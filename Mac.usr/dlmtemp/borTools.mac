 import "iProgBar","debug";

  private macro count(list):integer
/*    var pbar=CDeferredProgressBar(1," ~Подсчитываю список...~","Подсчет списка");*/
    var i=0,
        stat=list.first();
    while(stat)
      i=i+1;
/*      pbar.next();*/
      stat=list.next();
    end;
    return i;
  end;

  macro borPrintList(list)
    dbgPrint(list);
    var nrec=count(list);
    dbgPrint(nrec);
    var pbar=CDeferredProgressBar(nrec," ~Печатаю список...~","Распечатка списка");
    var stat=list.first();
    dbgPrint(stat);
    while(stat)
      dbgPrint(list.rec());
      pbar.next();
      stat=list.next();
    end;
  end;

  macro borCheckTypeDesc(o,type)
    if(ValType(type) == V_INTEGER)
      if(ValType(o) == type)
        return true; end;
      if(ValType(o) != V_GENOBJ)
        return string("DLM return ",ValTypeString(o),", expected ",type); end;
      if(IsEqClass("IBORError",o))
        if(IsEqClass("IBORDBMSError",o))
          return string(GenClassName(o),", code: ",o.code(),", type: \"",o.type(),"\", desc: \"",o.what(),"\"");
        else
          return string(GenClassName(o),", type: \"",o.type(),"\", desc: \"",o.what(),"\""); end;
      else
        return string("DLM return object \"",GenClassName(o),"\", expected ",type); end;

    elif(ValType(type) == V_STRING)
      if(ValType(o) != V_GENOBJ)
        return string("DLM return ",ValTypeString(o),", expected object \"",type,"\""); end;
      if(IsEqClass(type,o))
        return true; end;
      if(IsEqClass("IBORError",o))
        if(IsEqClass("IBORDBMSError",o))
          return string(GenClassName(o),", code: ",o.code(),", type: \"",o.type(),"\", desc: \"",o.what(),"\"");
        else
          return string(GenClassName(o),", type: \"",o.type(),"\", desc: \"",o.what(),"\""); end;
      else
        return string("DLM return \"",GenClassName(o),"\", expected object \"",type,"\""); end;

    elif(ValType(type) == V_UNDEF)
      if((ValType(o) != V_GENOBJ) OR (not IsEqClass("IBORError",o)))
        return true; end;
      return string(GenClassName(o),", type: \"",o.type(),"\", desc: \"",o.what(),"\"");

    else
      return "Bad parameters for borCheckTypeDesc";
    end;
  end;

  macro borCheck(v,type):bool
    var result=borCheckTypeDesc(v,type);
    if(ValType(result) != V_BOOL)
      return false; end;
    return result;
  end;

  macro borXCheck(v,type)
    var result=borCheckTypeDesc(v,type);
    if((ValType(result) != V_BOOL) OR (result != true))
      RunError(result); end;
    return v;
  end;

  macro borXAssign(to,from,type)
    if(ValType(type) != V_UNDEF)
      borXCheck(from,type);
    else
      borXCheck(from,ValType(to)); end;
    SetParm(0,from);
  end;


  class CBORList(__list:object,__recordClassName:string,__listClassName)
    var _list=__list;
    var _recordClassName=__recordClassName;
    local var _listClassName="IBORObjectList";
    if(ValType(__listClassName) == V_STRING)
      _listClassName=__listClassName; end;
    borXCheck(_list,_listClassName);

    macro list()
      return _list;
    end;

    macro first():bool
      var result=_list.first();
      borXCheck(result,V_BOOL);
      return result;
    end;

    macro last():bool
      var result=_list.last();
      borXCheck(result,V_BOOL);
      return result;
    end;

    macro next():bool
      var result=_list.next();
      borXCheck(result,V_BOOL);
      return result;
    end;

    macro prev():bool
      var result=_list.prev();
      borXCheck(result,V_BOOL);
      return result;
    end;

    macro rec()
      var r=_list.rec();
      borXCheck(r,_recordClassName);
      return r;
    end;
  end; /* class CBORList */

  macro bordbgPrint(o,indent)
    if((ValType(o) != V_GENOBJ) OR (not IsEqClass("IBORObjectList",o)))
      return dbgPrint(o,indent); end;

    var recursivePrint=false;
    if(((ValType(indent) == V_BOOL) AND indent) OR (ValType(indent) == V_INTEGER))
      recursivePrint=true; end;
    if(ValType(indent) != V_INTEGER)
      indent=0; end;
    var indentStr="";
    var i=0;
    while(i < indent)
      indentStr=indentStr + "│ ";
      i=i + 1;
    end;

    var title=string(o);
    if(indent > 0)
      println(indentStr,title);
    else
      println("\n",title); end;
    var stat=o.first(),v,prevRecurse=false;
    i=0;
    while(stat)
/*      dbgPrint(o.rec(),1);*/
      v=o.rec();
      if(prevRecurse)
        println(indentStr,"│ << continue of ",title," >>"); end;
      println(indentStr,"├record[",i,"]","=",v,", type: ",ValTypeString(v));
      if(recursivePrint AND (ValType(v) == V_GENOBJ))
        bordbgPrint(v,indent + 1);
        println(indentStr,"├─┘ << end of ",v," >>");
        prevRecurse=true;
      else
        prevRecurse=false;
      end;
      stat=o.next();
      i=i+1;
    end;
    if(indent == 0)
      println("╧ << end of ",title," >>"); end;
  end;

  private macro _IsTRecHandler(o,TblName:string):bool
    if((ValType(o) != V_GENOBJ) OR
       ((not IsEqClass("TBfile",o)) AND (not IsEqClass("TRecHandler",o))) OR
       (strupr(o.TblName) != strupr(TblName)))
      return false; end;
    return true;
  end;

  macro borGetImplementationRecHandler(oImpl:object,TblName:string)
    if(not IsEqClass("IBORObjectList",oImpl))
      if(_IsTRecHandler(oImpl,TblName))
        return oImpl; end;
      return null;
    end;
    var stat=borXCheck(oImpl.first(),V_BOOL);
    while(stat AND (not _IsTRecHandler(oImpl.rec(),TblName)))
      stat=borXCheck(oImpl.next(),V_BOOL);
    end;
    if(stat)
      return oImpl.rec(); end;
    return null;
  end;

