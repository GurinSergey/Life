/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   EVG               Макрос общих функций, используемых в процедурах взаимодействия с системой Фронт.
   Seleznev          Доработал
   2012-08-08 zip_z. Изменил таймауты, добавил констант из CursorLocationEnum и CommandTypeEnum
   2013-01-17 zip_z. Ещё раз изменил таймауты (30 -> 60)
   2013-04-01 Gurin S. C-18865
// KS 22.11.2013 Предварительная адаптация
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/

import bankinter, globals;

const FR_DEFAULT_TIMEOUT = 60; // zip_z. 2013-01-17 добавлено. Потом нужно бы вынести в кэш или реестр

// Сегмент статуса "Документ выгружен во фронт"
const OPR_STATUS_FRONT = 307;


// Значения сегмента статуса "Документ выгружен во фронт"
const OPRSTAT_FRONT_YES = 1,    // Требуется
      OPRSTAT_FRONT_NO  = 2;    // Не требуется

const adInteger     = 3;
const adDouble      = 5; 
const adDBDate      = 133;
const adDBTimeStamp = 135;
const adNumeric     = 131;
const adVarChar     = 200;

const adEmpty   = 0;

const adParamInput       = 1;
const adParamOutput      = 2;
const adParamReturnValue = 4; 

// zip_z. add > 
// CursorLocationEnum {
const AD_USE_NONE   = 1; // курсор не используется. Устаревший параметр.
const AD_USE_SERVER = 2; // серверный курсор
const AD_USE_CLIENT = 3; // клиентский курсор

// CommandTypeEnum {
const AD_CMD_UNSPECIFIED =  -1; 
const AD_CMD_TEXT        =   1; 
const AD_CMD_TABLE       =   2; 
const AD_CMD_STOREDPROC  =   4;
const AD_CMD_UNKNOWN     =   8;
const AD_CMD_FILE        = 256;
const AD_CMD_TABLEDIRECT = 512;
// < zip_z. 

private const VALTYPE_UNDEF = 26;


/* korkin */
macro IsGreenCorridor(ruleid)
    var ruleidmask;
    GetRegistryValue("PRBB\\МАРШРУТИЗАЦИЯ\\UBSRULES",0,ruleidmask);
    return ((valtype(ruleidmask) != v_undef) and (CompareStrWithMasks(ruleidmask, string(ruleid)) == 0));
end;

// KS 14.09.2011 Определение - является ли правило - правилом выгрузки в шину СОА банк ПОЙДЁМ
// zip_z. Переписал по-русски
macro IsSoaGo(ruleid)
    var cmd = RSDCommand("select p.bo_id from usr_route_parm p where p.rule_id=?");
    cmd.addParam("ruleid", RSDBP_IN, ruleid);
    var rs = RSDRecordset(cmd);
    return ((rs.MoveNext) and (rs.value("bo_id") == 51)) // KS 07.09.2011 Обработка веб-сервисов
end;

// KS 14.09.2011 Определение - является ли правило - правилом выгрузки в шину СОА
// zip_z. Переписал по-русски
macro IsSoa(ruleid)
    var cmd = RSDCommand("select p.connstring from usr_route_parm p where p.rule_id=?");
    cmd.addParam("ruleid", RSDBP_IN, ruleid);
    var rs = RSDRecordset(cmd);
    return ((rs.MoveNext)and(substr(rs.value(0),1,4)=="http")) // KS 07.09.2011 Обработка веб-сервисов
end;



MACRO IsPaymentToFRONT(PaymentObj)
    //Seleznev
    //это старая функция - заглушил
    return false;
END;


macro conn2front(oConnection, connstring, note)
    oConnection.CursorLocation = AD_USE_CLIENT;
    oConnection.Open(connstring);
onError
    msgbox("Не удалось соединиться с внешней системой.|("+note+")");
end;

//Gurin S. 01.04.2013 C-18865 (@author: zip-z)
macro checkConnectionError (m_Connection:object, m_NativeError:integer):bool
    var i = 0;
    while (i < m_Connection.errors.count)
        if (m_Connection.errors(i).NativeError == m_NativeError) return true; end;
        i = i + 1;
    end;
    return false;
end;

class RSADORecordset(recset)
    //класс для работы с объектом ADODB.Recordset 
    var rs = recset;
    if (not(rs))
        return false;
    end;
    
    private var i;
    var m_value = TArray;

    macro MoveNext
        if (rs.EOF)
            rs.close;
            return false
        else
            m_value.size = 0;
            i = 0 ;
            While( i < rs.Fields.Count )
                m_value(i) = rs.Fields.Item(i).Value;
                i = i + 1 ;
            end;
            rs.MoveNext;
            return true
        end;
    end;
end;


macro convRSLtype(param)
    if (valtype(param) == V_STRING)
        return adVarChar;
    elif (valtype(param) == V_INTEGER)
        return adInteger;
    elif (valtype(param) == V_DOUBLE)
        return adNumeric;
    elif (valtype(param) == V_MONEY)
        return adNumeric;
    elif (valtype(param) == V_DATE)
        return adDBDate;//adDBTimeStamp;
    end;

    return adVarChar;
end;

macro CreateADOParameter(param, type, cmd)
    var p = ActiveX("ADODB.Parameter");
    var psize;
    
    if (valtype(param) == V_STRING)
        psize = strlen(param);
    else
        psize = null;
    end;

    if (type == adParamOutput)
        if (valtype(param) == V_STRING)
            p = Cmd.CreateParameter(null, adVarChar, type, 4000);
        else
            p = Cmd.CreateParameter(null, convRSLtype(param), type);
        end;

        /*
        if (convRSLtype(param) == adNumeric)
            p.precision = 12;
            p.numericscale = 6;
        end;
        */

    else
        if ((valtype(param) == V_STRING) and (psize == 0 ))
            p = Cmd.CreateParameter(null, adVarChar, type, 1);
        else
            p = Cmd.CreateParameter(null, convRSLtype(param), type, psize, param);
        end;

        p.Attributes = 64;
        /*
        if (convRSLtype(param(i)) == adNumeric)
            p.precision = 12;
            p.numericscale = 6;
        end;
        */
    end;
   
    Cmd.Parameters.Append(p);
end;

macro ExecuteFrontProcEx(ProcName, Param, oConnection, ruleid, aOutput)
    var i, err_str="";
    var rs = ActiveX("ADODB.Recordset");
    var retval;
    var psize;
    var p;
    var rsvlist = "";

    var oCmd = ActiveX("ADODB.Command") ;
    oCmd.CommandText      = ProcName;
    oCmd.ActiveConnection = oConnection;
    // zip_z. Я так понял, парни конкретно не определились с таймаутами, поэтому засунули два варианта подряд.
    // oCmd.CommandTimeout = 10000;
    oCmd.CommandType      = AD_CMD_STOREDPROC; // 4
    // oCmd.CommandTimeout = 15000;
    // ... но таймаут вообще-таки в секундах (!!), поэтому я даже не представляю, кому понадобился таймаут в 25 часов на выполнение одной ХП
    oCmd.CommandTimeout = FR_DEFAULT_TIMEOUT; //TAM 17.01.2013 I-00313113-3 изменено с 30 секунд на 60
    
    // Передаем параметры для выполнения хранимой процедуры
    // Работа с провайдерами Oracle и Sybase отличается
    if (ruleid == 12) //OpenWay
        //создаем входные параметры
        i = 0;
        While( i < asize(param) )
            CreateADOParameter(param(i), adParamInput, oCmd);
            i = i + 1 ;
        end ;

        //создаем выходные параметры
        i = 0;
        While( i < asize(aOutput))
            CreateADOParameter(aOutput(i), adParamOutput, oCmd);
            i = i + 1;
        end;

        oCmd.Execute();
        //вычитываем выходные параметры
        i = 0;
        While( i < oCmd.parameters.count)
            if (oCmd.parameters(i).direction == adParamOutput)
                if (oCmd.parameters(i).type == adVarChar)
                    if (valtype(oCmd.parameters(i).value) != VALTYPE_UNDEF) //null
                        rsvlist = rsvlist + "'"+oCmd.parameters(i).value+"',";
                    else
                        rsvlist = rsvlist + "null,";
                    end;
                else
                    if (valtype(oCmd.parameters(i).value) != VALTYPE_UNDEF) //null
                        rsvlist = rsvlist + oCmd.parameters(i).value+",";
                    else
                        rsvlist = rsvlist + "null,";
                    end;
                end;
            end;
            i = i + 1;
        end;
        //возвращаем выходные параметры в виде result set
        rs = oConnection.Execute("select "+rsvlist+"0 from dual");

    else
        i = 0 ;
        While( i < asize(param) )
            // 2012-08-02 zip_z. Боремся с неправильной передачей параметров во внешнюю систему. Ей от этого плохо.
            if (valType (param(i)) != VALTYPE_UNDEF)
                oCmd.Parameters(i + 1) = param(i);
            else
                oCmd.Parameters(i + 1) = "";
            end;
            // < 2012-08-02 zip_z. 
            i = i + 1 ;
        end;
        
        rs = oCmd.Execute();
    end;
   return rs;
   
onError (er)
    if (oConnection.errors.count > 0)
        //Gurin S. 01.04.2013 C-18865
        if ( checkConnectionError (oConnection, 17002) == true) return 1; end;

        i = 0;
        while (i < oConnection.errors.count)
            err_str = err_str + oConnection.errors(i).description;
            i = i + 1;
        end;
        // 2012-08-02 zip_z. Логирование параметров, приводящих к ошибке
        var j =  0;
        setOutput ("../txtfile/!front_errlog.txt");
        while (j < oCmd.Parameters.count)
            println (string(oCmd.Parameters(j).name, " = ", oCmd.Parameters(j).value));
            j = j + 1;
        end;
        setOutput (null, true);
        // < 2012-08-02 zip_z. 
        msgbox ("Ошибка выполнения процедуры.|"+err_str);
    else
        msgbox ("Ошибка выполнения процедуры " + ProcName + ". :|" + er.message);
    end;
    return false;
end;


// Выполнение вебсервиса
macro ExecuteWebProcEx(ProcName, Param, ruleid, aOutput)
    var cmd;
    var errcode,errmsg,bizerrcode,bizerrmsg,
        konsolidaccount,clientfio,paycode,
        resultprovod,comment,oper,
        error_count,error;// KS 07.09.2011 Обработка веб-сервисов

    if (Index(ProcName,"(") == 0 )
        ProcName = ProcName + "("+Param( 0)+",";
    end;

    cmd = RSDCommand("{call usr_soa."+ProcName+ruleid+","+
                                               Param( 2)+","+ //PаymentId
                                              "1,'"+strsubst(Param(25),"'","''")+"',"+{oper}+",?,?,?,?,?,?,?,?,?"
                                              ")}");

    cmd.addParam("errcode",          RSDBP_OUT, V_INTEGER);
    cmd.addParam("errmsg",           RSDBP_OUT, V_STRING, 1024);

    cmd.addParam("bizerrcode",       RSDBP_OUT, V_INTEGER);
    cmd.addParam("bizerrmsg",        RSDBP_OUT, V_STRING, 1024);
                                                                 
    cmd.addParam("konsolidaccount",  RSDBP_OUT, V_STRING, 1024);
    cmd.addParam("clientfio",        RSDBP_OUT, V_STRING, 1024);
    cmd.addParam("paycode",          RSDBP_OUT, V_INTEGER);

    cmd.addParam("error_count",      RSDBP_OUT, V_INTEGER);
    cmd.addParam("error",            RSDBP_OUT, V_STRING, 1024);

    cmd.execute();

    errcode           = cmd.Param("errcode").value;
    errmsg            = cmd.Param("errmsg").value;
    bizerrcode        = cmd.Param("bizerrcode").value;
    bizerrmsg         = cmd.Param("bizerrmsg").value;

    konsolidaccount   = cmd.Param("konsolidaccount").value;
    clientfio         = cmd.Param("clientfio").value;
    paycode           = cmd.Param("paycode").value;

    error_count       = cmd.Param("error_count").value;
    error             = cmd.Param("error").value;

    if (error_count > 0)
        aOutput(0) = -14;
        aOutput(8) = "Ошибка выполнения: "+error;
    
    elif (errcode != 0)
        aOutput(0) = -12;
        aOutput(8) = "Логическая ошибка: "+errmsg;
        
        // KS 24.01.2011 По словам Вадима Арзуманяна:
        //               ...коды ошибок по BizErrCode на которые надо "реагировать"
    elif ((bizerrcode == 2)or // 2 - счет не найден
//        (bizerrcode == 5)or // 5 - отсутствует имя банка получателя
          (bizerrcode == 6))  // 6 - документ не обработан (треб. читать BizErrMsg)
        aOutput(0) = -13;
        aOutput(8) = "Ошибка бизнес-логики: "+bizerrmsg;
    else
        aOutput(0) = paycode;          //0 ret             0 - все хорошо, но счета нет, >0 идентификатор операции, <0 ошибка
        aOutput(1) = Param( 2);        //1 paymentid       идентификатор документа v6,
        aOutput(2) = Param( 4);        //2 payeraccount    счет платильщика,
        aOutput(3) = konsolidaccount;  //3 receiveraccount счет получателя,
        aOutput(4) = clientfio;        //4 receivername    получатель,
        aOutput(5) = Param(16);        //5 pack            пачка,
        aOutput(6) = Param(19);        //6 numdoc          номер документа,
        aOutput(7) = Param(22);        //7 value           сумма,
        aOutput(8) = Param(25);        //8 ground          основание
        aOutput(9) = ruleid;           //9 originout       номер условия маршрутизации, на случай если платеж был передан другому Фронту
    end;

OnError
    aOutput(0) = -15;
    msgbox("Ошибка отправки сообщения во внешнюю систему.|(Правило "+ruleid+")");
end;

// Выполнение фронтовой функции
macro ExecuteFrontFunc(FuncName, inParams, connectionString, outParams, note)
  var oConnection_lib = ActiveX("ADODB.Connection"),
      oCmd            = ActiveX("ADODB.Command"   );          
  var oConnection     = oConnection_lib; 

  conn2front(oConnection, connectionString, note);
  
  if (oConnection and (oConnection.State != 0))
    oCmd.CommandText      = FuncName;
    oCmd.ActiveConnection = oConnection;
    oCmd.CommandType      = AD_CMD_STOREDPROC;     
    oCmd.CommandTimeout   = FR_DEFAULT_TIMEOUT; 

    for (var i, 1, oCmd.Parameters.Count - 1)
      if (ValType(inParams(i - 1)) != V_UNDEF) oCmd.Parameters(i) = inParams(i - 1); else oCmd.Parameters(i) = ""; end;
    end;

    oCmd.Execute(); 

    for (var j, 0, oCmd.Parameters.Count - 1)
      outParams[j] = oCmd.Parameters.(j).Value; 
    end;

    if (oConnection and (oConnection.State != 0)) oConnection.Close(); end;
 
    SetParm(3, outParams);
    return true;
  end;  
onError(er)
  var err_str;
  if (oConnection.errors.count > 0)
    i = 0;
    for (i, 0, oConnection.errors.count - 1)
      err_str = err_str + oConnection.errors(i).description;
    end;
    msgbox(null,"Ошибка выполнения функции.|"+err_str);
  else
    msgbox("Ошибка выполнения функции.|"+er.message);
  end;
  return false;  
end;

// Выполнение фронтовой процедуры
macro ExecuteFrontProc(ProcName, aInput, oConnection, oCmd, note)
    var i, objRS_lib1,objRS_lib, err_str="";
    var objCmd_lib = ActiveX("ADODB.Command") ;
   
    if( ValType(ProcName) != V_UNDEF )
        oCmd = objCmd_Lib ;
        oCmd.CommandText = ProcName ;
        oCmd.CommandType = AD_CMD_STOREDPROC ;
        // oCmd.CommandTimeout = 10000 ;
        // zip_z. 166 часов... куда ?!
        oCmd.CommandTimeout = FR_DEFAULT_TIMEOUT;
        oCmd.ActiveConnection = oConnection ;
        oCmd.CommandText = ProcName ;
    end ;

    // oCmd.CommandTimeout = 15000 ;
    oCmd.CommandTimeout = FR_DEFAULT_TIMEOUT; // zip_z.
   
   
    // Передаем параметры для выполнения хранимой процедуры
    i = 0 ;
    while( i < asize(aInput) )
        oCmd.Parameters(i + 1) = aInput(i) ;
        i = i + 1 ;
    end ;
 
    // Выполняем процедуру
    objRS_lib1 = oCmd.Execute();

    /*korkin*/
    if (IsGreenCorridor(aInput(55)))
        objRS_lib  = objRS_lib1 ;
    else
        // Пропускаем все RecordSet и берем последний
        while( ValType(objRS_lib1) != V_UNDEF )
            objRS_lib  = objRS_lib1 ;
            objRS_lib1 = objRS_lib.NextRecordSet ;
        end;
    end;

    return objRs_lib;

onerror(er)
    if (oConnection.errors.count > 0)
        i = 0;
        while (i < oConnection.errors.count)
            err_str = err_str + oConnection.errors(i).description;
            i = i + 1;
        end;
        msgbox(null,"Ошибка выполнения процедуры. Внешняя система:|("+note+")|"+err_str);
    else
        msgbox("Ошибка выполнения процедуры. Внешняя система:|("+note+")|"+er.message);
    end;
    return false
 end ; // ExecuteFrontProc
