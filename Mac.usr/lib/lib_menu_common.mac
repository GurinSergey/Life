// -------------------------------------------------------------------------------------------------
// @filename: lib_menu_common.mac
// @author  : 2013-02-05 zip_z. 
// @desc    : общие функции для использования в пользовательском меню макросов скроллингов по Ctrl+Z
// @changes : 07.02.2013 Жаворонкова Н. GetParentDocInfo - функция перенесена из bnkorder.mac 
//            15.02.2013 Жаворонкова Н. ChangeType - функция перенесена из PS_CASH.mac
//            18.02.2013 Жаворонкова Н. GetParentDocK2Info и GetParentDocInfo_ForOldPaym - функции перенесены из ps_po.mac
//            28.06.2013 Жаворонкова Н. GetClientRepresent - C-5115 - Информация о представителе
//            17.07.2013 Жаворонкова Н. R-219313 Добавлены nvl, где это необходимо
//            20.01.2014 Gurin S. C-25393 ConfirmDebet ("Подтверждение дебета")
//            14.05.2014 Gurin S. 14.05.2014 Добавил функцию GetRaceInfo()
//            28.05.2014 Gurin S. R-385196-2 GetRecName ("ФИО получателя")
// -------------------------------------------------------------------------------------------------
import   PaymInter, Globals;
import   LikePy, oralib;
import   lib_const, lib_types, lib_pm_check;

//Gurin S. 28.05.2014 R-385196-2
MACRO GetRecName (acctrnid)
    var sql, parm;
    sql = " SELECT   dps.t_fioclient fio, pr.t_name name, dpr.t_paperseries ser, "
          "          dpr.t_papernumber num, dpr.t_paperissueddate dat, dpr.t_paperissuer suer "
          "   FROM   dpmdocs_dbt dp, dpmpaym_dbt dpm, dpscshdoc_dbt dps, dpersnidc_dbt dpr, dpaprkind_dbt pr "
          "  WHERE       dp.t_acctrnid = :acctrnid AND dp.t_paymentid = dpm.t_paymentid "
          "          AND dpm.t_paymentid = dps.t_autokey AND dps.t_clientid = dpr.t_personid "
          "          AND dpr.t_paperkind = pr.t_paperkind";  
    parm = makeArray (SQLParam ("acctrnid", acctrnid));
    sql  = execSQLSelect (sql, parm);
    if (sql.moveNext ())
        if (sql.value("fio") == "")
            return msgbox("Нет этих данных в документе");
        else
            return msgbox("ФИО: ", sql.value("fio"), "| Предьявлен: ", sql.value("name"), " Серия: ", sql.value("ser"),
                          " Номер: ", sql.value("num"), "| Выдан: ", sql.value("dat", null, V_DATE), " Кем: ", sql.value("suer"));
        end;
    end;
    return msgbox("Проводка не привязана к платежу");
onError
    return "";
end;
                             
/*Информация о рейсе документа*/
private macro GetRaceInfo(ID)
    var sql = "   SELECT   wlsess.t_numberrace numrace, wlsess.t_number numsess, to_char(wlsess.t_bankdate,'dd.mm.yyyy') dat"
            + "\n   FROM   dwlmes_dbt wlmes, "
            + "\n          dwlsess_dbt wlsess, "
            + "\n          dpmpaym_dbt pmpaym, "
            + "\n          dwlpm_dbt wlpm, "
            + "\n          dwlmeslnk_dbt wlmeslnk "
            + "\n  WHERE      pmpaym.t_paymentid = wlpm.t_paymentid "
            + "\n         AND wlpm.t_wlpmid = wlmeslnk.t_objid "
            + "\n         AND wlmeslnk.t_mesid = wlmes.t_mesid "
            + "\n         AND wlmes.t_sessionid = wlsess.t_sessionid "
            + "\n         AND pmpaym.t_paymentid = :id ";
    var rs:RsdRecordset = execSQLselect(sql, makeArray (SqlParam ("id", ID)));
    if (rs and rs.moveNext())
        return (msgbox(string("Рейс: ",rs.value("numrace"), "| Сеанс: ", rs.value("numsess"), "| Дата: ", rs.value("dat"))));
    end;
    return (msgbox("Нет данных о рейсе документа"));
end;

//Gurin S. 20.01.2014 C-25393
MACRO ConfirmDebet (paymid)
    var reportName = getTxtFileName ("ConfirmDebet");
    var sql, parm;
    file f  () txt;
    sql = ExecSqlSelect ("select ask_result from usr_uf_container_besp where paymentid = :id",  makeArray (SQLParam ("id", paymid)));
    sql.movenext();
    if (sql.value("ask_result") == "X")
        sql =
          " SELECT  to_char (extractvalue (usr.xml_ask, '/ED206/@EDNo', 'xmlns=urn:cbr-ru:ed:v2.0')) EDNo, " +
          "         to_char(to_date(extractvalue (usr.xml_ask, '/ED206/@EDDate', 'xmlns=urn:cbr-ru:ed:v2.0'),'yyyy-mm-dd'),'dd.mm.yyyy') EDDate, " +
          "         to_char (extractvalue (usr.xml_ask, '/ED206/@EDAuthor', 'xmlns=urn:cbr-ru:ed:v2.0')) EDAuthor, " +
          "         to_char (extractvalue (usr.xml_ask, '/ED206/@EDReceiver', 'xmlns=urn:cbr-ru:ed:v2.0')) EDReceiver, " +
          "         to_char (extractvalue (usr.xml_ask, '/ED206/@Acc', 'xmlns=urn:cbr-ru:ed:v2.0')) Acc, " +
          "         to_char (extractvalue (usr.xml_ask, '/ED206/@BICCorr', 'xmlns=urn:cbr-ru:ed:v2.0')) BICCorr, " +
          "         extractvalue (usr.xml_ask, '/ED206/@Sum', 'xmlns=urn:cbr-ru:ed:v2.0')/100 Sum, " +
          "         to_char(to_date (extractvalue (usr.xml_ask, '/ED206/@TransDate', 'xmlns=urn:cbr-ru:ed:v2.0'),'yyyy-mm-dd'),'dd.mm.yyyy') TransDate, " +
          "         to_char (extractvalue (usr.xml_ask, '/ED206/@TransTime', 'xmlns=urn:cbr-ru:ed:v2.0')) TransTime, " +
          "         to_char (extractvalue (usr.xml_ask, '/ED206/@CorrAcc', 'xmlns=urn:cbr-ru:ed:v2.0')) CorrAcc, " +
          "         case when (to_char (extractvalue (usr.xml_ask, '/ED206/@PaytKind', 'xmlns=urn:cbr-ru:ed:v2.0'))= '4') then 'срочно' end PaytKind, " +
          "         to_char (extractvalue (usr.xml_ask, '/ED206/AccDoc/@AccDocNo', 'xmlns=urn:cbr-ru:ed:v2.0')) AccDocNo, " +
          "         to_char(to_date (extractvalue (usr.xml_ask, '/ED206/AccDoc/@AccDocDate', 'xmlns=urn:cbr-ru:ed:v2.0'),'yyyy-mm-dd'),'dd.mm.yyyy') AccDocDate, " +
          "         to_char (extractvalue (usr.xml_ask, '/ED206/EDRefID/@EDNo', 'xmlns=urn:cbr-ru:ed:v2.0')) RefEDNo, " +
          "         to_char(to_date (extractvalue (usr.xml_ask, '/ED206/EDRefID/@EDDate', 'xmlns=urn:cbr-ru:ed:v2.0'),'yyyy-mm-dd'),'dd.mm.yyyy') RefEDDate,  " +
          "         to_char (extractvalue (usr.xml_ask, '/ED206/EDRefID/@EDAuthor', 'xmlns=urn:cbr-ru:ed:v2.0')) RefEDAuthor " +
          "   FROM  USR_UF_CONTAINER_BESP usr " +
          "  WHERE  usr.paymentid = :paymentid AND usr.ask_result = :ask_result ";
        parm = makeArray (SQLParam ("paymentid"   , paymid),
                          SQLParam ("ask_result"  , "X"));
        sql  = execSQLSelect (sql, parm);
        open (f, reportName);
        if (sql.moveNext ())
            setOutput (reportName);
            debugbreak;
            [   
                ПОДТВЕРЖДЕНИЕ ДЕБЕТА

                Электронный документ № ######## от ##########, составитель ##########
                Идентификатор получателя: ##########


                Номер счета, по которому формируется ЭСИД: ####################
                БИК банка корреспондента:                  #########
                Сумма:                                     #########################
                Дата совершения операции:                  ##########
                Время совершения операции:                 ########
                Корреспондирующий счет:                    ####################
                Вид платежа:                               ##########


                РЕКВИЗИТЫ РАСЧЕТНОГО ДОКУМЕНТА
                Номер расчетного документа:                ##########
                Дата выписки расчетного документа:         ##########


                ИДЕНТИФИКАТОРЫ ИСХОДНОГО ЭПД
                Номер ЭД в течение опердня:           ##########
                Дата составления ЭД:                  ##########
                Уникальный идентификатор составителя: ##########
            ]
            (sql.value("EDNo"), sql.value("EDDate"), sql.value("EDAuthor"), sql.value("EDReceiver"), sql.value("Acc"), sql.value("BICCorr"),
             string(strsubst(string(sql.value("Sum", null, V_MONEY)),"."," руб. ")," коп."), sql.value("TransDate"), sql.value("TransTime"), sql.value("CorrAcc"), sql.value("PaytKind"), sql.value("AccDocNo"),
             sql.value("AccDocDate"), sql.value("RefEDNo"), sql.value("RefEDDate"), sql.value("RefEDAuthor"));

            setOutput (null, true);
            viewFile (f);
        end;
    elif (sql.value("ask_result") == "-")
        sql =
          " SELECT to_char (extractvalue (usr.xml_ask, '/ED201/@EDNo', 'xmlns=urn:cbr-ru:ed:v2.0')) EDNo, " +
          "        to_char(to_date(extractvalue (usr.xml_ask, '/ED201/@EDDate', 'xmlns=urn:cbr-ru:ed:v2.0'),'yyyy-mm-dd'),'dd.mm.yyyy') EDDate, " +
          "        to_char (extractvalue (usr.xml_ask, '/ED201/@EDAuthor', 'xmlns=urn:cbr-ru:ed:v2.0')) EDAuthor, " +
          "        to_char (extractvalue (usr.xml_ask, '/ED201/@EDReceiver', 'xmlns=urn:cbr-ru:ed:v2.0')) EDReceiver, " +
          "        to_char (extractvalue (usr.xml_ask, '/ED201/@CtrlCode', 'xmlns=urn:cbr-ru:ed:v2.0')) CtrlCode, " +
          "        to_char (extractvalue (usr.xml_ask, '/ED201/@CtrlTime', 'xmlns=urn:cbr-ru:ed:v2.0')) CtrlTime, " +
          "        to_char (extractvalue (usr.xml_ask,'/ED201/Annotation','xmlns=urn:cbr-ru:ed:v2.0')) Annotation, " +
          "        to_char (extractvalue (usr.xml_ask,'/ED201/ErrorDiagnostic','xmlns=urn:cbr-ru:ed:v2.0')) ErrorDiagnostic, " +
          "        to_char (extractvalue (usr.xml_ask, '/ED201/EDRefID/@EDNo', 'xmlns=urn:cbr-ru:ed:v2.0')) RefEDNo, " +
          "        to_char(to_date (extractvalue (usr.xml_ask, '/ED201/EDRefID/@EDDate', 'xmlns=urn:cbr-ru:ed:v2.0'),'yyyy-mm-dd'),'dd.mm.yyyy') RefEDDate,  " +
          "        to_char (extractvalue (usr.xml_ask, '/ED201/EDRefID/@EDAuthor', 'xmlns=urn:cbr-ru:ed:v2.0')) RefEDAuthor " +
          "  FROM  USR_UF_CONTAINER_BESP usr " +
          "  WHERE usr.paymentid = :paymentid AND usr.ask_result = :ask_result ";
        parm = makeArray (SQLParam ("paymentid"   , paymid),
                          SQLParam ("ask_result"  , "-"));
        sql  = execSQLSelect (sql, parm);
        open (f, reportName);
        if (sql.moveNext ())
            setOutput (reportName);

            [   
                ИЗВЕЩЕНИЕ О РЕЗУЛЬТАТАХ КОНТРОЛЯ ЭД(ПАКЕТА ЭД)

                Электронный документ № ######## от ##########, составитель ##########
                Идентификатор получателя: ##########


                Код результата контроля:              #####
                Время проведения контроля:            ########
                Текст пояснения:
                 ######################################################################
                Детальная диагностика ошибки:
                 ######################################################################
                 ######################################################################


                ИДЕНТИФИКАТОРЫ ИСХОДНОГО ЭД (ПАКЕТА ЭД)
                Номер ЭД в течение опердня:           ##########
                Дата составления ЭД:                  ##########
                Уникальный идентификатор составителя: ##########
            ]
            (sql.value("EDNo"), sql.value("EDDate"), sql.value("EDAuthor"), sql.value("EDReceiver"), sql.value("CtrlCode"), sql.value("CtrlTime"),
             sql.value("Annotation"), substr(sql.value("ErrorDiagnostic"),1,70), trim(substr(sql.value("ErrorDiagnostic"),71)), sql.value("RefEDNo"), sql.value("RefEDDate"), sql.value("RefEDAuthor"));
            setOutput (null, true);
            viewFile (f);
        end;
    else 
        msgbox("Не найден ED206/ED201");
    end;
end;

/* Функция проверяет происхождение документа комиссии (по банковским ордерам)*/
MACRO GetParentDocInfo (paymentobj)
private var Rcmd0, Rrs0, sqwyrt0, Rcmd, Rrs, sqwyrt;

    if   ( (paymentobj.defcomid != 0) and (paymentobj.feetype == USR_SF_FEE_TYPE_PERIOD) ) //Периодические
    
        sqwyrt = "        SELECT   COMM.T_CODE, COMM.T_NAME, DEFF.T_DATEFEE "
                +"\n        FROM   dsfdef_dbt deff, dsfcomiss_dbt comm "
                +"\n       WHERE       DEFF.T_ID = ? " 
                +"\n               AND DEFF.T_FEETYPE = ? "
                +"\n               AND COMM.T_NUMBER = DEFF.T_COMMNUMBER "
                +"\n               AND COMM.T_FEETYPE = DEFF.T_FEETYPE ";
        Rcmd = RsdCommand(sqwyrt);
        Rcmd.AddParam("", RSDBP_IN,paymentobj.defcomid);
        Rcmd.AddParam("", RSDBP_IN,paymentobj.feetype);
        Rrs = RSDRecordset(Rcmd);
  
        if (Rrs and Rrs.movenext())
            msgbox ("Документ порожден периодической комиссией\n"+Rrs.value(0)+" - "+Rrs.value(1)+"\n за "+Rrs.value(2)+" число");
            return 0;
        end;
        
    elif ( (paymentobj.defcomid != 0) and (paymentobj.feetype == USR_SF_FEE_TYPE_SINGLE) ) //Единовременные
    
        sqwyrt0 = "        SELECT   COMM.T_CODE, COMM.T_NAME, DEFF.T_DATEFEE "
                +"\n        FROM   dsfdef_dbt deff, dsfcomiss_dbt comm "
                +"\n       WHERE       DEFF.T_ID = ? "
                +"\n               AND DEFF.T_FEETYPE = ? "
                +"\n               AND COMM.T_NUMBER = DEFF.T_COMMNUMBER "
                +"\n               AND COMM.T_FEETYPE = DEFF.T_FEETYPE ";
        Rcmd0 = RsdCommand(sqwyrt0);
        Rcmd0.AddParam("", RSDBP_IN,paymentobj.defcomid);
        Rcmd0.AddParam("", RSDBP_IN,paymentobj.feetype);
        Rrs0 = RSDRecordset(Rcmd0);
        
        sqwyrt = "select ( select t_name "
                +"\n                    from doprkdoc_dbt "
                +"\n                    where t_dockind = pm.t_dockind ) "
                +"\n                     as dockind, pm.t_valuedate, pm.t_payeraccount, pm.t_receiveraccount, prop.t_number, prop.t_ground "
                +"\n            from doproper_dbt opr, dpmpaym_dbt pm, dpmrmprop_dbt prop "
                +"\n            where     opr.t_id_operation = (select oprd.t_id_operation "
                +"\n                                            from doprdocs_dbt oprd "
                +"\n                                            where oprd.t_documentid = lpad ( to_char ( ? ), 34, '0' )) "
                +"\n                  and pm.t_paymentid = to_number ( opr.t_documentid ) "
                +"\n                  and pm.t_paymentid = prop.t_paymentid; ";
        Rcmd = rsdcommand(sqwyrt);
        Rcmd.AddParam("", RSDBP_IN,paymentobj.paymentid);
        Rrs = rsdRecordSet( Rcmd );
        
        if ((Rrs0 and Rrs0.moveNext()) and (Rrs and Rrs.moveNext()))
          msgbox("Документ порожден единовременной комиссией: "+Rrs0.value("T_CODE")+" "+Rrs0.value("T_NAME")+"\n Информация о первичном документе:\n Вид первичного документа:"+Rrs.value("dockind")+"\n Дата:"+Rrs.value("t_valuedate")+"\n Счет плательщика:"+Rrs.value("t_payeraccount")+"\n Счет получателя:"+Rrs.value("t_receiveraccount")+"\n Назначение платежа:"+Rrs.value("t_ground")+"");
          return 0;
        end;
        
    elif ( (paymentobj.defcomid != 0) and (paymentobj.feetype == USR_SF_FEE_TYPE_ONCE) ) //Разовые
    
        sqwyrt = "        SELECT   COMM.T_CODE, COMM.T_NAME, DEFF.T_DATEFEE "
                +"\n        FROM   dsfdef_dbt deff, dsfcomiss_dbt comm "
                +"\n       WHERE       DEFF.T_ID = ? "
                +"\n               AND DEFF.T_FEETYPE = ? "
                +"\n               AND COMM.T_NUMBER = DEFF.T_COMMNUMBER "
                +"\n               AND COMM.T_FEETYPE = DEFF.T_FEETYPE ";
        Rcmd = RsdCommand(sqwyrt);
        Rcmd.AddParam("", RSDBP_IN,paymentobj.defcomid);
        Rcmd.AddParam("", RSDBP_IN,paymentobj.feetype);
        Rrs = RSDRecordset(Rcmd);
        
        if (Rrs and Rrs.movenext())
          msgbox ("Документ порожден разовой комиссией\n"+Rrs.value(0)+" - "+Rrs.value(1)+"\n за "+Rrs.value(2)+" число");
          return 0;
        end;
        
    else
       msgbox ("Это не документ комиссии!!!");
       return 0;
    end;
END;

/* Функция похожа на GetParentDocInfo, но проверяет происхождение документа по рублевым платежам (раньше так формировались комиссии)*/
MACRO GetParentDocInfo_ForOldPaym (pmpaym)
var Rqwery, Rrs, Rcmd, Rqwery1, Rrs1, Rcmd1;

        if   (pmpaym.feetype == USR_SF_FEE_TYPE_PERIOD) // Ищем данные о периодической комиссии
            Rqwery = "select DSFCOM.T_CODE, DSFCOM.T_NAME "
    +"\n                 from dpmpaym_dbt paym, dsfdefcom_dbt defcom, dsfcomiss_dbt dsfcom "
    +"\n                 where     paym.t_paymentid = ? "
    +"\n                       and PAYM.T_FEETYPE = ? "
    +"\n                       and defcom.t_invoiceid = paym.t_defcomid "
    +"\n                       and dsfcom.t_number = defcom.t_commnumber "
    +"\n                       and dsfcom.t_feetype = paym.t_feetype; ";
    Rcmd = rsdcommand(Rqwery);
    Rcmd.AddParam("", RSDBP_IN,PMPAYM.PAYMENTID);
    Rcmd.AddParam("", RSDBP_IN,PMPAYM.FEETYPE);
    Rrs = rsdRecordSet( Rcmd );
            if (Rrs and Rrs.moveNext())
                msgbox("Документ порожден периодической комиссией: "+Rrs.value("T_CODE")+" "+Rrs.value("T_NAME")+"");
            end;
        
        elif (pmpaym.feetype == USR_SF_FEE_TYPE_SINGLE) //Ищем данные о единовременной комиссии
            Rqwery = "select DSFCOM.T_CODE, DSFCOM.T_NAME "
    +"\n                 from dpmpaym_dbt paym, doprsfcom_dbt oprsf, dsfcomiss_dbt dsfcom "
    +"\n                 where     paym.t_paymentid = ? "
    +"\n                       and paym.t_defcomid = oprsf.t_id "
    +"\n                       and oprsf.t_commnumber = DSFCOM.T_NUMBER "
    +"\n                       and DSFCOM.T_FEETYPE = ?; ";
    Rcmd = rsdcommand(Rqwery);
    Rcmd.AddParam("", RSDBP_IN,PMPAYM.PAYMENTID);
    Rcmd.AddParam("", RSDBP_IN,PMPAYM.FEETYPE);
    Rrs = rsdRecordSet( Rcmd );
    
            Rqwery1 = "select ( select t_name "
    +"\n                    from doprkdoc_dbt "
    +"\n                    where t_dockind = pm.t_dockind ) "
    +"\n                     as dockind, pm.t_valuedate, pm.t_payeraccount, pm.t_receiveraccount, prop.t_number, prop.t_ground "
    +"\n            from doproper_dbt opr, dpmpaym_dbt pm, dpmrmprop_dbt prop "
    +"\n            where     opr.t_id_operation = (select oprd.t_id_operation "
    +"\n                                            from doprdocs_dbt oprd "
    +"\n                                            where oprd.t_documentid = lpad ( to_char ( ? ), 34, '0' )) "
    +"\n                  and pm.t_paymentid = to_number ( opr.t_documentid ) "
    +"\n                  and pm.t_paymentid = prop.t_paymentid; ";
    Rcmd1 = rsdcommand(Rqwery1);
    Rcmd1.AddParam("", RSDBP_IN,PMPAYM.PAYMENTID);
    Rrs1 = rsdRecordSet( Rcmd1 );
    
            if ((Rrs and Rrs.moveNext()) and (Rrs1 and Rrs1.moveNext()))
                msgbox("Документ порожден единовременной комиссией: "+Rrs.value("T_CODE")+" "+Rrs.value("T_NAME")+"\n Информация о первичном документе:\n Вид первичного документа:"+Rrs1.value("dockind")+"\n Дата:"+Rrs1.value("t_valuedate")+"\n Счет плательщика:"+Rrs1.value("t_payeraccount")+"\n Счет получателя:"+Rrs1.value("t_receiveraccount")+"\n Назначение платежа:"+Rrs1.value("t_ground")+"");
            end;
            
        elif (pmpaym.feetype == USR_SF_FEE_TYPE_ONCE ) //Ищем данные о разовой комиссии
            Rqwery = "select DSFCOM.T_CODE, DSFCOM.T_NAME "
    +"\n                 from dpmpaym_dbt paym, dsfsingdf_dbt sfing, dsfcomiss_dbt dsfcom "
    +"\n                 where     paym.t_paymentid = ? "
    +"\n                       and paym.t_defcomid = sfing.t_id "
    +"\n                       and sfing.t_commnumber = dsfcom.t_number "
    +"\n                       and DSFCOM.T_FEETYPE = ?; ";
    Rcmd = rsdcommand(Rqwery);
    Rcmd.AddParam("", RSDBP_IN,PMPAYM.PAYMENTID);
    Rcmd.AddParam("", RSDBP_IN,PMPAYM.FEETYPE);
    Rrs = rsdRecordSet( Rcmd );
    
            if (Rrs and Rrs.moveNext())
                msgbox("Документ порожден разовой комиссией: "+Rrs.value("T_CODE")+" "+Rrs.value("T_NAME")+"");
            end;
        elif (pmpaym.feetype == 0)
            msgbox("Платеж не является документом ПЗО");
        else 
            msgbox("Ошибка, обратитесь к Рахмедову Р.С.");
        end;

END;
//zmp 21.08.2013 C-22338-6  добавлена ф-я
macro InsertSalaryPaym(Paym : RsbPayment)
     const EMPTY_STRING = strFor(1);
     var SQL = "", PayerINN;       
        
     SQL = "select 1 from USR_SALARY_PAYM_DBT where PAYMENTID = ?";
     SQL = execSqlSelect(SQL, makeArray(SQLParam("", Paym.PAYMENTID)));
     if (not SQL.moveNext())
     SplitFullINN(Paym.PayerINN, PayerINN, null);
     execSql("INSERT INTO USR_SALARY_PAYM_DBT VALUES(?, ?, ?, ?, ?, ?, ?, chr(0), 0, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
              makeArray(SQLParam("PAYMENTID"          , Paym.PAYMENTID                                   )
                       ,SQLParam("CARRYDATE"          , Paym.ValueDate                                   )
                       ,SQLParam("PAYERACCNUMBER"     , Paym.PayerAccount                                )
                       ,SQLParam("RECIPIENTACCNUMBER" , Paym.ReceiverAccount                             )
                       ,SQLParam("SUM"                , money(Paym.PayerAmount)                          )
                       ,SQLParam("GROUND"             , nvl_ex(Paym.Ground                , EMPTY_STRING))
                       ,SQLParam("EVENTDATE"          , date()                                           )
                       ,SQLParam("PAYERNAME"          , nvl_ex(Paym.PayerName             , EMPTY_STRING))
                       ,SQLParam("PAYERBIC"           , nvl_ex(Paym.PayerBankCode         , EMPTY_STRING))
                       ,SQLParam("PAYERINN"           , nvl_ex(PayerINN                   , EMPTY_STRING))//zmp 12.09.2013 убрал КПП по просьбе Ситова О.
                       ,SQLParam("PAYERCORRACC"       , nvl_ex(Paym.PayerCorrAccNostro    , EMPTY_STRING))
                       ,SQLParam("PAYERBANK"          , nvl_ex(Paym.PayerBankName         , EMPTY_STRING))
                       ,SQLParam("RECEIVERNAME"       , nvl_ex(Paym.ReceiverName          , EMPTY_STRING))
                       ,SQLParam("RECEIVERINN"        , nvl_ex(Paym.ReceiverINN           , EMPTY_STRING))
                       ,SQLParam("RECEIVERBIC"        , nvl_ex(Paym.ReceiverBankCode      , EMPTY_STRING))
                       ,SQLParam("RECEIVERCORRACC"    , nvl_ex(Paym.ReceiverCorrAccNostro , EMPTY_STRING))
                       ,SQLParam("RECEIVERBANKNAME"   , nvl_ex(Paym.ReceiverBankName      , EMPTY_STRING))
                       ,SQLParam("PROCESSING_DATE"    , {curdate})));
     end;  
onError()                
end;


/*15-02-2013 Жаворонкова Н. joy Перенесено из PS_CASH.MAC*/
//Gurin S. N.  23.08.2012 I-00241814-3 Разрешение оплаты при наличии приостановлений налоговых органов Ctr+Z
Macro ChangeType (type, id) 
    var cmd;
    cmd = RSDCommand ("update dpmpaym_dbt set t_paytype = :paytype where t_paymentID = :paymentid");
    cmd.addParam ("paytype", RSDBP_IN, type);
    cmd.addParam ("paymentid", RSDBP_IN, id);
    cmd.execute ();
    msgbox ("Выполнено успешно");
END;

/*Функция находит информацию о родительском документе частички, списанной с Картотеки2*/
Macro GetParentDocK2Info (Shifr, PMPAYM )
    private var shifropr;
    private const shifrindex2 = 16;
    var Rqwery, Rrs, Rcmd, Rqwery1, Rrs1, Rcmd1;
    shifropr = Shifr;
    
    if (shifropr == shifrindex2)
        Rqwery =  "   select paym.t_paymentid id, "
        +"\n                 paym.t_payeraccount payer, "
        +"\n                 paym.t_receiveraccount reciever, "
        +"\n                 paym.t_amount amount, "
        +"\n                 paym.t_valuedate vdate "
        +"\n          from dpmpaym_dbt paym "
        +"\n          where paym.t_paymentid = "
        +"\n                  (select to_number ( oper.t_documentid ) "
        +"\n                   from doproper_dbt oper "
        +"\n                   where oper.t_id_operation = (select docs.t_id_operation "
        +"\n                                                from doprdocs_dbt docs "
        +"\n                                                where docs.t_documentid = lpad ( to_char ( ? ), 34, '0' ))); ";
        Rcmd = rsdcommand(Rqwery);
        Rcmd.AddParam("", RSDBP_IN,PMPAYM.PAYMENTID);
        Rrs = rsdRecordSet( Rcmd );
        if (Rrs and Rrs.moveNext())
            msgbox("Документ порожден в результате обработки платежа с id: "+Rrs.value("id")+"\n Счет плательщика"+Rrs.value("payer")+"\n Счет получателя"+Rrs.value("reciever")+"\n Дата валютирования"+Rrs.value("vdate")+"\n Для того чтобы его найти - необходимо зайти в список всех платежей по счету "+Rrs.value("payer")+"");
        end;
    else 
        msgbox ("Документ не является частичной оплатой Картотеки 2");
    end;

END;

/* Функция для поиска и добавления информации о представителе клиента в операцию в ФМ*/
MACRO GetClientRepresent (operationFM, clientType, clientTitle, AgentType)

debugbreak;
    var query, rs, cmd;
    var ourClientID = operationFM.OprParty(clientType).PartyID;
    private var col = TArray;
    /* Вспомогательная процедура подготовки информации с атрибутами полей */
    private macro AddCol (ar, ind, fld, head, width, rdonly, DecPoint)
        ar.value (ind * 6 + 0)      = fld;
        ar.value (ind * 6 + 1)      = head;
        ar.value (ind * 6 + 2)      = width;
        ar.value (ind * 6 + 3)      = DecPoint;
        ar.value (ind * 6 + 4)      = 0;
    end;
    /* Функция обработки нажатия клавиши Enter*/
    private macro EvProc( rs, cmd, id, key )
        CONST _ENTER_KEY = 13;
        if( (cmd == DLG_KEY) and (key == _ENTER_KEY) )
            return CM_SELECT;
        end;
    end;

    if ( not  operationFM.IsInternalParty(clientType) ) 
        msgboxex (clientTitle +" не является клиентом нашего банка. | Добавление представителя невозможно", MB_OK );
        return 1;
    else 
        /*Проверяем, не заполнен ли данный вид участника у этой операции*/
        if (operationFM.OprParty(AgentType).partyid != -1)
            msgboxex ("Для выбранного участника операции представитель заполнен" , MB_OK );
            return 1;
        end;
        /*Заполняем скроллинг сотрудников клиента*/
debugbreak;
        query = "select o.t_personid person, pers.t_name1 || ' ' || pers.t_name2 || ' ' ||  pers.t_name3 name,          " +
                "       o.t_post post, o.t_isfirstperson isfirst , o.t_issecondperson issecond, o.t_matotv matotv,      " +
                "       o.t_isfirstofficeperson sfirstoffice, o.t_phonenumber phone, o.t_datefrom datefrom,             " +
                "       o.t_dateto dateto, o.t_istempsignature istemp, o.t_hassignright  hassignright                   " +
                "  from   dofficer_dbt o, dpersn_dbt pers                                                               " +
                " where   (t_partyid = :client ) and pers.t_personid = o.t_personid                                     ";
                
        cmd = RsdCommand (query);
        cmd.AddParam("client", RSDBP_IN, ourClientID);

        AddCol (col, 0, "name",          "ФИО",                25, true, 0);
        AddCol (col, 1, "post",          "Должность",          10, true, 0);
        AddCol (col, 2, "isfirst",       "Первая подпись",     1,  true, 0);
        AddCol (col, 3, "issecond",      "Вторая подпись",     1,  true, 0);
        AddCol (col, 4, "matotv",        "Мат. ответ.",        1,  true, 0);
        AddCol (col, 5, "sfirstoffice",  "Начальник отдела",   1,  true, 0);
        AddCol (col, 6, "phone",         "Телефон",            10, true, 0);
        AddCol (col, 7, "datefrom",      "Полномочия с",       10, true, 0);
        AddCol (col, 8, "dateto",        "Полномочия до",      10, true, 0);
        AddCol (col, 9, "istemp",        "Врем.",              1,  true, 0);
        AddCol (col, 10,"hassignright", "Зарпл. реестр",       1,  true, 0);
    
        rs = RSDRecordset(cmd, RSDVAL_CLIENT, RSDVAL_STATIC);
                
        if (rs.moveNext ())
            if (RunScroll (rs, 11, col, null, @EvProc, "Список сотрудников ", "~Enter~ Выбор, ~Esc~ Выйти ",  true, null, null, 95, 10 ) ) ;
                var AgentId = rs.Value (0);
            
            debugbreak;
                var ClientAgent = operationFM.OprParty (AgentType);
                ClientAgent.PartyID = AgentId;
                query = "INSERT INTO dopcntrpt_dbt (t_operationid, t_kind, t_clientid, t_type, t_name, t_foreignpublicfunctionary, t_szcountryr, t_szterritoryr,         " +
                        "                           t_szaddressr, t_regaddrokato, t_regaddrregion, t_regaddrplacename, t_regaddrstreet, t_regaddrhouse,                  " +
                        "                           t_regaddrbuilding, t_regaddroffice, t_szcountryp, t_szterritoryp, t_szaddressp, t_factaddrokato,                     " +
                        "                           t_factaddrregion, t_factaddrplacename, t_factaddrstreet, t_factaddrhouse, t_factaddrbuilding, t_factaddroffice,      " + 
                        "                           t_codedocum, t_paperseries, t_papernumber, t_paperissueddate, t_paperissuer, t_birthday, t_birthplace, t_inn,        " +
                        "                           t_okpo, t_regnumber, t_regdate, t_participantsign, t_superiorid, t_superiorname, t_superiorcountry,                  " +
                        "                           t_superiorterritory, t_superioraddress, t_superioraddrokato, t_superioraddrregion, t_superioraddrplacename,          " +
                        "                           t_superioraddrstreet, t_superioraddrhouse, t_superioraddrbuilding, t_superioraddroffice, t_beneficiarysign,          " +
                        "                           t_account, t_corraccount, t_bankid, t_bankname, t_bankcountry, t_bankterritory, t_bankcode, t_cardissuerid,          " +
                        "                           t_cardissuercode, t_cardissuername, t_cardholdersign, t_corrid, t_corrname, t_corrcountry, t_corrterritory,          " +
                        "                           t_corrcode, t_kfmnumber, t_superiorkfmnumber, t_rightvisitdoccode, t_rightvisitdocseries, t_rightvisitdocnumber,     " +
                        "                           t_rightvisitdocdatestart, t_rightvisitdocdateend, t_migratorycardnumber, t_migratorycarddatestart,                   " +
                        "                           t_migratorycarddateend, t_factaddrfrompayment)                                                                       " +
                        " VALUES (:operationid,:FMPartyKind,:PartyID,:PartyType, nvl (:name,chr(1)), nvl (:ForeignPublicFunctionary, chr(1)),nvl(:RegCountry,chr(1)),    " +
                        "         nvl (:RegTerritory, chr(1)),nvl (:RegAddress, chr(1)),nvl (:RegAddrOKATO, chr(1)), nvl (:RegAddrRegion, chr (1)),                      " +
                        "         nvl (:RegAddrPlaceName, chr(1)), nvl (:RegAddrStreet, chr (1)), nvl (:RegAddrHouse, chr (1)), nvl (:RegAddrBuilding, chr(1)),          " +
                        "         nvl (:RegAddrOffice, chr (1)), nvl (:StayCountry, chr (1)), nvl (:StayTerritory, chr (1) ),nvl (:StayAddress, chr (1)),                " +
                        "         nvl (:StayAddrOKATO, chr (1) ), nvl (:StayAddrRegion, chr(1) ),nvl (:StayAddrPlaceName, chr (1) ), nvl (:StayAddrStreet, chr (1)),     " +
                        "         nvl (:StayAddrHouse, chr(1)), nvl (:StayAddrBuilding, chr(1)), nvl (:StayAddrOffice, chr(1)), nvl (:CodeDocum, chr(1)),                " +
                        "         nvl (:PaperSeries, chr(1)), nvl (:PaperNumber, chr(1)), nvl (:PaperIssuedDate, '01.01.0001'),nvl (:PaperIssuer, chr(1)),               " +
                        "         nvl (:Birthday, '01.01.0001' ),nvl (:BirthPlace, chr (1)), nvl(:INN, chr(1)), nvl (:OKPO, chr (1)), nvl (:RegNumber, chr (1)),         " +
                        "         nvl (:RegDate, '01.01.0001'), :PartySign,:SuperiorID, nvl (:SuperiorName, chr (1)), nvl (:SuperiorCountry, chr (1)),                   " +
                        "         nvl (:SuperiorTerritory, chr (1)) , nvl (:SuperiorAddress, chr (1)), nvl (:SuperiorAddrOKATO, chr (1)), nvl(:SuperiorAddrRegion,chr(1))" +
                        "        ,nvl (:SuperiorAddrPlaceName, chr (1)), nvl (:SuperiorAddrStreet, chr (1)), nvl (:SuperiorAddrHouse, chr (1)),                          " +
                        "         nvl (:SuperiorAddrBuilding, chr (1)), nvl (:SuperiorAddrOffice, chr (1)), nvl (:BeneficiarySign, '0' ), nvl (:Account, chr (1)),       " +
                        "         nvl (:CorrAccount, chr(1)), :BankID, nvl (:BankName, chr (1)), nvl (:BankCountry, chr(1)), nvl (:BankTerritory, chr (1)),              " +
                        "         nvl (:BankCode, chr (1)), :CardIssuerID, nvl (:CardIssuerCode, chr (1)), nvl (:CardIssuerName, chr (1)), :CardHolderSign, :CorrID,     " +
                        "         nvl (:CorrName, chr (1)), nvl (:CorrCountry, chr (1)), nvl (:CorrTerritory, chr (1)), nvl (:CorrCode, chr (1)),:KFMNumber,             " +
                        "         :SuperiorKFMNumber, nvl (:RightVisitDocCode, chr (1)), nvl (:RightVisitDocSeries, chr (1)), nvl (:RightVisitDocNumber, chr (1)),       " +
                        "         nvl (:RightVisitDocDateStart, '01.01.0001'), nvl (:RightVisitDocDateEnd, '01.01.0001'), nvl (:MigratoryCardNumber, chr (1)),           " +
                        "         nvl (:MigratoryCardDateStart, '01.01.0001'), nvl (:MigratoryCardDateEnd, '01.01.0001'), nvl (:factaddrfrompayment, chr (1))          ) " ;
                cmd = rsdCommand( query );
                cmd.AddParam("operationid",             RSDBP_IN,operationFM.operationid);
                cmd.AddParam("FMPartyKind",             RSDBP_IN,ClientAgent.FMPartyKind);
                cmd.AddParam("PartyID",                 RSDBP_IN,ClientAgent.PartyID);
                cmd.AddParam("PartyType",               RSDBP_IN,ClientAgent.PartyType);
                cmd.AddParam("name",                    RSDBP_IN,ClientAgent.name);
                cmd.AddParam("ForeignPublicFunctionary",RSDBP_IN,ClientAgent.ForeignPublicFunctionary);
                cmd.AddParam("RegCountry",              RSDBP_IN,ClientAgent.RegCountry);
                cmd.AddParam("RegTerritory",            RSDBP_IN,ClientAgent.RegTerritory);
                cmd.AddParam("RegAddress",              RSDBP_IN,ClientAgent.RegAddress);
                cmd.AddParam("RegAddrOKATO",            RSDBP_IN,ClientAgent.RegAddrOKATO);
                cmd.AddParam("RegAddrRegion",           RSDBP_IN,ClientAgent.RegAddrRegion);
                cmd.AddParam("RegAddrPlaceName",        RSDBP_IN,ClientAgent.RegAddrPlaceName);
                cmd.AddParam("RegAddrStreet",           RSDBP_IN,ClientAgent.RegAddrStreet);
                cmd.AddParam("RegAddrHouse",            RSDBP_IN,ClientAgent.RegAddrHouse);
                cmd.AddParam("RegAddrBuilding",         RSDBP_IN,ClientAgent.RegAddrBuilding);
                cmd.AddParam("RegAddrOffice",           RSDBP_IN,ClientAgent.RegAddrOffice);
                cmd.AddParam("StayCountry",             RSDBP_IN,ClientAgent.StayCountry);
                cmd.AddParam("StayTerritory",           RSDBP_IN,ClientAgent.StayTerritory);
                cmd.AddParam("StayAddress",             RSDBP_IN,ClientAgent.StayAddress);
                cmd.AddParam("StayAddrOKATO",           RSDBP_IN,ClientAgent.StayAddrOKATO);
                cmd.AddParam("StayAddrRegion",          RSDBP_IN,ClientAgent.StayAddrRegion);
                cmd.AddParam("StayAddrPlaceName",       RSDBP_IN,ClientAgent.StayAddrPlaceName);
                cmd.AddParam("StayAddrStreet",          RSDBP_IN,ClientAgent.StayAddrStreet);
                cmd.AddParam("StayAddrHouse",           RSDBP_IN,ClientAgent.StayAddrHouse);
                cmd.AddParam("StayAddrBuilding",        RSDBP_IN,ClientAgent.StayAddrBuilding);
                cmd.AddParam("StayAddrOffice",          RSDBP_IN,ClientAgent.StayAddrOffice);
                cmd.AddParam("CodeDocum",               RSDBP_IN,ClientAgent.CodeDocum);
                cmd.AddParam("PaperSeries",             RSDBP_IN,ClientAgent.PaperSeries);
                cmd.AddParam("PaperNumber",             RSDBP_IN,ClientAgent.PaperNumber);
                cmd.AddParam("PaperIssuedDate",         RSDBP_IN,ClientAgent.PaperIssuedDate);
                cmd.AddParam("PaperIssuer",             RSDBP_IN,ClientAgent.PaperIssuer);
                cmd.AddParam("Birthday",                RSDBP_IN,ClientAgent.Birthday);
                cmd.AddParam("BirthPlace",              RSDBP_IN,ClientAgent.BirthPlace);
                cmd.AddParam("INN",                     RSDBP_IN,ClientAgent.INN);                    
                cmd.AddParam("OKPO",                    RSDBP_IN,ClientAgent.OKPO);                    
                cmd.AddParam("RegNumber",               RSDBP_IN,ClientAgent.RegNumber);                    
                cmd.AddParam("RegDate",                 RSDBP_IN,ClientAgent.RegDate);
                cmd.AddParam("PartySign",               RSDBP_IN,ClientAgent.PartySign);                    
                cmd.AddParam("SuperiorID",              RSDBP_IN,ClientAgent.SuperiorID);                    
                cmd.AddParam("SuperiorName",            RSDBP_IN,ClientAgent.SuperiorName);                     
                cmd.AddParam("SuperiorCountry",         RSDBP_IN,ClientAgent.SuperiorCountry);
                cmd.AddParam("SuperiorTerritory",       RSDBP_IN,ClientAgent.SuperiorTerritory);                    
                cmd.AddParam("SuperiorAddress",         RSDBP_IN,ClientAgent.SuperiorAddress);                    
                cmd.AddParam("SuperiorAddrOKATO",       RSDBP_IN,ClientAgent.SuperiorAddrOKATO);                    
                cmd.AddParam("SuperiorAddrRegion",      RSDBP_IN,ClientAgent.SuperiorAddrRegion);
                cmd.AddParam("SuperiorAddrPlaceName",   RSDBP_IN,ClientAgent.SuperiorAddrPlaceName);                    
                cmd.AddParam("SuperiorAddrStreet",      RSDBP_IN,ClientAgent.SuperiorAddrStreet);                    
                cmd.AddParam("SuperiorAddrHouse",       RSDBP_IN,ClientAgent.SuperiorAddrHouse);                     
                cmd.AddParam("SuperiorAddrBuilding",    RSDBP_IN,ClientAgent.SuperiorAddrBuilding);
                cmd.AddParam("SuperiorAddrOffice",      RSDBP_IN,ClientAgent.SuperiorAddrOffice);                    
                cmd.AddParam("BeneficiarySign",         RSDBP_IN,ClientAgent.BeneficiarySign);    
                cmd.AddParam("Account",                 RSDBP_IN,ClientAgent.Account);                    
                cmd.AddParam("CorrAccount",             RSDBP_IN,ClientAgent.CorrAccount);                    
                cmd.AddParam("BankID",                  RSDBP_IN,ClientAgent.BankID);       
                cmd.AddParam("BankName",                RSDBP_IN,ClientAgent.BankName);
                cmd.AddParam("BankCountry",             RSDBP_IN,ClientAgent.BankCountry);
                cmd.AddParam("BankTerritory",           RSDBP_IN,ClientAgent.BankTerritory);
                cmd.AddParam("BankCode",                RSDBP_IN,ClientAgent.BankCode);
                cmd.AddParam("CardIssuerID",            RSDBP_IN,ClientAgent.CardIssuerID);
                cmd.AddParam("CardIssuerCode",          RSDBP_IN,ClientAgent.CardIssuerCode);
                cmd.AddParam("CardIssuerName",          RSDBP_IN,ClientAgent.CardIssuerName);
                cmd.AddParam("CardHolderSign",          RSDBP_IN,ClientAgent.CardHolderSign);
                cmd.AddParam("CorrID",                  RSDBP_IN,ClientAgent.CorrID);
                cmd.AddParam("CorrName",                RSDBP_IN,ClientAgent.CorrName);                    
                cmd.AddParam("CorrCountry",             RSDBP_IN,ClientAgent.CorrCountry);  
                cmd.AddParam("CorrTerritory",           RSDBP_IN,ClientAgent.CorrTerritory);
                cmd.AddParam("CorrCode",                RSDBP_IN,ClientAgent.CorrCode);
                cmd.AddParam("KFMNumber",               RSDBP_IN,ClientAgent.KFMNumber);
                cmd.AddParam("SuperiorKFMNumber",       RSDBP_IN,ClientAgent.SuperiorKFMNumber);
                cmd.AddParam("RightVisitDocCode",       RSDBP_IN,ClientAgent.RightVisitDocCode);
                cmd.AddParam("RightVisitDocSeries",     RSDBP_IN,ClientAgent.RightVisitDocSeries);
                cmd.AddParam("RightVisitDocNumber",     RSDBP_IN,ClientAgent.RightVisitDocNumber);
                cmd.AddParam("RightVisitDocDateStart",  RSDBP_IN,ClientAgent.RightVisitDocDateStart);
                cmd.AddParam("RightVisitDocDateEnd",    RSDBP_IN,ClientAgent.RightVisitDocDateEnd);
                cmd.AddParam("MigratoryCardNumber",     RSDBP_IN,ClientAgent.MigratoryCardNumber);  
                cmd.AddParam("MigratoryCardDateStart",  RSDBP_IN,ClientAgent.MigratoryCardDateStart);
                cmd.AddParam("MigratoryCardDateEnd",    RSDBP_IN,ClientAgent.MigratoryCardDateEnd);
                cmd.AddParam("factaddrfrompayment",     RSDBP_IN,ClientAgent.factaddrfrompayment);
   
                cmd.execute();
                msgboxex ("Представитель добавлен", MB_OK);

            end;
        else
            msgboxex ("Сотрудники клиента не найдены", MB_OK);
            return 1;
        end;
    end;

END;

//Gurin S. 28.08.2015 I-00581174-2
macro UsrCloseDoc(PaymentObj)
   if (not GetTrue(true, "Вы действительно хотите закрыть документ?"))
      msgbox("Правильное решение :)");
      return 1;
   end;

   if (InList(PaymentObj.DocKind, 16, 70, 201, 202, 203, 286, 400, 410, 420, 430, 440, 445))
      rsldefcon.BeginTrans;
      execSql("update dpmpaym_dbt set t_paymstatus = 32000, t_closedate = trunc(sysdate) where t_paymentid = " + PaymentObj.PaymentId);
      execSql("update dpmprop_dbt set t_propstatus = 32000 where t_paymentid = " + PaymentObj.PaymentId);
      execSql("update doprstep_dbt set t_isexecute = 'X', t_oper = " + {oper}+ " where t_isexecute in ('R','W') and t_id_operation = " + PM_Opr_GetIdOperation(PaymentObj.PaymentId, PaymentObj.DocKind));
      if (PaymentObj.DocKind == 16)
         execSql("update dmemorder_dbt set t_status = 3 where t_orderid = " + PaymentObj.PaymentId);
      end;
      if (PaymentObj.DocKind == 70)
         execSql("update dcb_doc_dbt set t_state = 50 where t_documentid = " + PaymentObj.PaymentId);
      end;
      if (PaymentObj.DocKind == 201)
         execSql("update dpspayord_dbt set t_currentstate = 15 where t_orderid = " + PaymentObj.PaymentId);
      end;
      if (PaymentObj.DocKind == 202)
         execSql("update dpscpord_dbt set t_currentstate = 15 where t_orderid = " + PaymentObj.PaymentId);
      end;
      if (PaymentObj.DocKind == 203)
         execSql("update dpsinrq_dbt set t_state = 15 where t_paymentid = " + PaymentObj.PaymentId);
      end;
      if (inList(PaymentObj.DocKind, 400, 410, 420, 430, 440, 445))
         execSql("update dpscshdoc_dbt set t_status = 3 where t_autokey = " + PaymentObj.PaymentId);
      end;

      //Снимаем резервирование
      var sql = execSqlSelect(" SELECT cl.t_claimid clid "+
                              "   FROM dpmpaym_dbt dp, dpmrmprop_dbt rm, dacclaim_dbt cl "+
                              "  WHERE dp.t_paymentid = " + PaymentObj.PaymentId + " and dp.t_paymentid = rm.t_paymentid and dp.t_payeraccount = cl.t_account and rm.t_number = cl.t_docnumber and cl.t_claimkind = 3");
      if (sql and sql.movenext())
         execSql("delete from dacclaim_dbt where t_claimid = " + sql.value("clid"));
         execSql("delete from dacclaimstate_dbt where t_claimid = " + sql.value("clid"));
      end;
      rsldefcon.CommitTrans;

      msgbox ("Выполнено");
   else
      msgbox("Обработка данного вида документа не предусмотрена. | Обратитесь в Help Desk");
      return 1;
   end;
       
onError
    if( RSLDefCon.IsinTrans )
        RSLDefCon.RollbackTrans;
        msgbox("Не выполнено. | Обратитесь в Help Desk");
    end;
end;
