// -------------------------------------------------------------------------------------------------
// @filename: lib_types.mac
// @author  : 2013-05-01 zip_z. 
// @desc    : утилиты для работы с типами данных
// @changes : 2013-08-01 zip_z. + isZeroValue
//                              + isNullOrZero
//                              + notNullOrZero
//                              ~ nvl_ex
// -------------------------------------------------------------------------------------------------
private var V_UNDEFINED = 26;

// @desc  : val - нулевое или неопределенное значение ? Возвращаем true, если да
macro isNull ( val ):bool
    return (( val == null ) or ( valType (val) == V_UNDEFINED ));
end;

// @desc  : val - нулевое значение типа
// @return: V_BOOL (true, если да)
macro isZeroValue ( val ):bool
    return (val == zerovalue (valtype (val)));
end;

// @desc  : val - null /неопределенное значение / нулевое значение типа ? 
// @return: V_BOOL (true, если да)
macro isNullOrZero (val):bool
    return (isNull (val) or (isZeroValue (val)));
end;


// @desc  : val - нулевое или неопределенное значение ? Возвращаем false, если да
macro notNull ( val ):bool
    return (not (isNull (val)));
end;
// @desc  : val - не является нулевым или неопределенным значением ? 
// @return: V_BOOL (true, если не является)
macro notNullOrZero ( val ):bool
    return (not (isNullOrZero (val)));
end;


// @desc  : тернарный оператор (копия IfThenElse и ternary); _iftrue, если cond == true; иначе _iffalse
macro iif (cond, _iftrue, _iffalse)
    if (cond) return _iftrue; end;
    return _iffalse;
end;

// @desc  : если val нулевое, возвращаем _ifnull, иначе возвращаем val
//          в отличие от nvl из lib_lang проверяет на нулевое значение типа и неопределённость типа
macro nvl_ex (val:variant, _ifnull:variant):variant
    var condition = ((isnull (val)) or (val == zerovalue (valtype (val))));
    return iif (condition, _ifnull, val);
end;
