// -------------------------------------------------------------------------------------------------
// @filename: lib_gisgmp.mac
// @author  : 2016-01-12 LAO 
// @desc    : библиотека процедур для работы с ГИС ГМП
// @changes : Gurin S. 16.03.2016
// -------------------------------------------------------------------------------------------------
import oralib, likepy, globals;
import lib_sqltools;

// @desc  : Находим референс по платежу
// @return: string
private macro findReference(Paymentid,num):string
 var sql, parm, ret;
    var messid;

     sql  = "SELECT SUBSTR (UTL_RAW.CAST_TO_VARCHAR2 (t_Text), 1, :num) ref"
          +  " FROM dnotetext_dbt"
          +  " WHERE t_objecttype = 501"
          +  " AND t_notekind = 52"
          +  " and T_DOCUMENTID = LPAD (:paym, 10, '0')";
     parm = makeArray (SQLParam ("num", num),SQLParam ("paym",Paymentid));
     sql  = execSQLSelect (sql, parm);
     if (sql.moveNext)
       return  sql.value ("ref");
     end;
     return "";
end;

// @desc  : Есть ли ошибка по сообщению?!
// @return: boolean
private macro isExistsRowInErrLog(ref) 
   var sql, parm;
   sql = "SELECT 1 "
       + "  FROM dwlmes_dbt mes, dwlmeslnk_dbt lnk, USR_GIS_GMP_ERRSEND_LOG_DBT errlog "
       + " WHERE     mes.t_mesid = lnk.t_mesid AND errlog.t_infoid = lnk.t_objid "
       + "       AND lnk.t_objkind = 506 AND mes.t_trn = :gis_ref ";
   parm = makeArray (SQLParam ("gis_ref", ref));
   sql  = execSQLSelect (sql, parm);
   return (sql.moveNext);
onError
   return false;
end;

// @desc  : Есть ли ошибка по сообщению?!
// @return: boolean
private macro isExistsRowInSendLogWithError(id) 
   var sql, parm;
   sql = "SELECT 1 "
         "  FROM USR_GIS_GMP_SENDMES_LOG_DBT "
         " WHERE T_PAYMENT_ID = :pid AND T_RESP_ERR_CODE != '0' ";
   parm = makeArray (SQLParam ("pid", id));
   sql  = execSQLSelect (sql, parm);
   return (sql.moveNext);
onError
   return false;
end;

// @desc  : Удаляем запись с лога ошибок
// @return: boolean
private macro delRowFromErrLog(ref)
   var sql, parm;
   sql = " DELETE FROM USR_GIS_GMP_ERRSEND_LOG_DBT "
       + "       WHERE t_infoid = "
       + "               (SELECT lnk.t_objid "
       + "                  FROM dwlmes_dbt mes, dwlmeslnk_dbt lnk "
       + "                 WHERE     mes.t_mesid = lnk.t_mesid "
       + "                       AND lnk.t_objkind = 506 AND mes.t_trn = :gis_ref) ";
   parm = makeArray (SQLParam ("gis_ref", ref));
   sql  = execSQL (sql, parm);
end;

// @desc  : Удаляем запись с лога ошибок
// @return: boolean
private macro delRowFromSendLog(id)
   var sql, parm;
   sql = " DELETE FROM USR_GIS_GMP_SENDMES_LOG_DBT "
       + "       WHERE T_PAYMENT_ID = :pid ";
   parm = makeArray (SQLParam ("pid", id));
   sql  = execSQL (sql, parm);
end;

// @desc  : Удаляем сообщене по референсу
// @return: boolean
macro dell_GISGMPMessage (Paymentid):bool
    var sql, parm, ret;
    var messid, reff;
    private var flag1, flag2;
    
    reff = findReference(Paymentid, 22);
    if (reff == "")  
        msgbox ("Не удалось найти сообщение по платежу");
        return false;
    end;

    flag1 = isExistsRowInErrLog(reff);
    flag2 = isExistsRowInSendLogWithError(Paymentid);

    sql  = "SELECT T_MESID,T_STATE "
         +  " FROM dwlmes_dbt mes "
         +  "WHERE mes.t_trn = :gis_ref ";
    parm = makeArray (SQLParam ("gis_ref", reff));
    sql  = execSQLSelect (sql, parm);
    if (sql.moveNext)
       if ((not flag1) and (not flag2))
          if (sql.value ("T_STATE") != "10")
             msgbox ("Удалить сообщение по платежу возможно только если оно находится в списке Проконтроллированные ");
             return false;
          end;
       end;
       messid = sql.value ("T_MESID") ;
    else 
       msgbox ("Не удалось найти сообщение по платежу");
       return false;
    end;
    
    rsldefcon.BeginTrans;
    // удаляем сообщение:
    sql  = "DELETE FROM USR_GIS_GMP_ERRSEND_LOG_DBT mess WHERE T_INFOID = (SELECT T_OBJID FROM dwlmeslnk_dbt lnk WHERE lnk.T_MESID = :messid)";
    parm = makeArray (SQLParam ("messid", messid));
    execSQL(sql, parm);
    
    sql  = "Delete from dwlmesval_dbt val where val.T_MESID = :messid ";
    parm = makeArray (SQLParam ("messid", messid));
    execSQL(sql, parm);
    sql  = "Delete from dwlmeslnk_dbt lnk where lnk.T_MESID = :messid ";
    parm = makeArray (SQLParam ("messid", messid));
    execSQL(sql, parm);
    sql  = "Delete from dwlmes_dbt mess where mess.T_MESID = :messid ";
    parm = makeArray (SQLParam ("messid", messid));
    execSQL(sql, parm);
    sql  = "Delete from dnotetext_dbt mess where T_DOCUMENTID = LPAD (:paym, 10, '0') and  t_notekind = 52";
    parm = makeArray (SQLParam ("paym", Paymentid));
    execSQL(sql, parm);

    if (flag1)
       delRowFromErrLog(reff);
    end;

    if (flag2)
       delRowFromSendLog(Paymentid);
    end;

    rsldefcon.CommitTrans;

    return true;

    onError
    if( RSLDefCon.IsinTrans )
       RSLDefCon.RollbackTrans;
       msgbox("Не выполнено. | Обратитесь в Help Desk");
       return false;
    end;
    
 end;


  