/*************************************************************************************************/
/*                      Автоматизированная банковская система RS-Bank v6.0                       */
/*************************************************************************************************/
/*  Имя файла        : lib_reporting.mac                                                         */
/*  Описание         : набор макропроцедур для написания пользовательских отчетов в MS-Excel     */
/*************************************************************************************************/
/*  Программист      : GSP - Глушин С.П.                                                         */
/*  Создан           : 11.11.2013                                                                */
/*************************************************************************************************/


import globals;
import oralib,  BANKINTER;
import keycodes;
import rcw,RSD;
import PTInter,cb_sql;
import VBAConst;
import "lib_lang.mac",OprInter,treport,payminter,LikePy;
import "fastexcel.mac";
import lib_const;
   var recordcount = 1;


/* Создаем двумерный массив с форматами столбцов, на входе строка символов (t,d,s,g) через запятую */
MACRO SetTypeColumns(inp_string); 
/* поддерживаемые форматы колонок:                                                                 */
/* t -- текстовый                                                                                  */
/* d -- дата                                                                                       */
/* s -- пропустить колонку                                                                         */ 
/* g -- общий                                                                                      */
/* любой символ кроме перечисленных будет воспринят как общий формат колонки                       */
private var array_str, col_num = 1;
private var i = 0;
private var inp_aw = tarray(true);
private var out_aw = tarray(true);
    inp_aw = split(inp_string,",");
    while(i<inp_aw.size)
       if(inp_aw(i) == "t")
          inp_aw(i) = USR_REP_xlTextFormat;
       elif(inp_aw(i) == "d")
          inp_aw(i) = USR_REP_xlDMYFormat;
       elif(inp_aw(i) == "s")
          inp_aw(i) = USR_REP_xlSkipColumn;
       else
          inp_aw(i) = USR_REP_xlGeneralFormat;
       end;
       array_str = tarray(true); array_str(0) = col_num; array_str(1) = inp_aw(i); out_aw(i) = array_str; 
       col_num = col_num + 1;
       i = i + 1;
    end;/*while*/
    return out_aw;
END;/*macro*/


/* перевод времени в формат ЧЧ_ММ_СС для вставки в имя файла */
MACRO splitTime()  
 private var timesec = string(Time);
 private var splittimesec; 
    splittimesec = Substr(timesec,1,2)+"_"+substr(timesec,4,2)+"_"+substr(timesec,7,2);
    return splittimesec;
END;


/* формируем наименование колонки Excel по её порядковому номеру */
macro recalc_columns(col_num)
    if(col_num > 26)
       col_num = strfor(int(col_num/26) + 64) + strfor(mod(col_num,26) + 64);
    else
       col_num = strfor(col_num+64);
    end;
    return col_num;
end;


/* создание транспортного файла и открытие его Экселем */
MACRO Excel_Report( reportName:string, reportHead:string, numOfColumns:integer, dataset, columnFormat:string) 
/* входные параметры: */
/* reportName   -- желаемое имя файла с отчетом                                                      */
/* reportHead   -- заголовки колонок отчета(через установленный разделитель - USR_REP_TXT_DELIMITER) */
/* numOfColumns -- количество колонок в отчете                                                       */
/* dataset      -- ссылка на рекордсет с данными                                                     */
/* columnFormat -- строка с заданными форматами колонок(описание в MACRO SetTypeColumns)             */
private var dd:date,      /*|                                            */
            tt:time,      /*|  это переменные для использования FileInfo */
            ii:integer,   /*|                                            */
            ss:string;    /*|                                            */
    var   ob,obBook;
    var   val = 0, ex;
    var   repString = "";
    var   TimeSecond = splitTime();
    var   NameTranspFile:string = reportName + "_" + TimeSecond;
    var   SPNameTranspFile = GetTxtFileName(NameTranspFile);
    var   output_array;
          NameTranspFile = substr(SPNameTranspFile,12);     /* имя файла без пути */
    setOutput(SPNameTranspFile); /* изменение выходного потока */
    message("Формирование транспортного файла");
    println(reportHead);

    while(dataset.movenext())        /* заполнение транспортного файла */
    //debugbreak;
       For(val,0,numOfColumns-1)
          //debugbreak;
          repString = repString + dataset.value(val) + USR_REP_TXT_DELIMITER;
       end; 
       debugbreak;
       println(repString);
       repString = "";
       recordcount = recordcount + 1;
    end;/*while*/

    setOutput(NULL,TRUE); /* возврат печати в стандартный выходной поток, закрытие файла */
    CopyFile(NameTranspFile,"$c:\\rspar\\"+NameTranspFile, TRUE);                                              /* копирование транспортного файла на терминал */

    ob = CreateObject ("rsax","TRsAxServer","RsAxServer",IsStandAlone());                                      /* создание объекта для работы с приложениями  */

    ex = ob.CreateComObject ("Excel.Application", true);                                                       /* Active X, запуск Экселя                     */

    if(not(GetFileInfo("$c:\\rspar\\"+NameTranspFile,@dd,@tt,@ii,@ss)));                                       /* проверка успешности копирования и наличия   */
       println("на локальном диске не найден файл "+NameTranspFile+"          \n выполнение приостановлено");  /* файла на терминале пользователя             */
       exit(0);
    end;
    ss = substr(ss,2); /* убираем ненужный символ "$" */
    output_array = SetTypeColumns(columnFormat); /* формируем двумерный массив форматов колонок отчета для opentext */

    obBook = ex.Workbooks.opentext (ss,866,1,1,2,false,false,false,false,false,true,USR_REP_TXT_DELIMITER,output_array,1,"."," ",true,false); /*  открытие транспортного файла       */
    /*                                                                                                                                                      */
    /*    (Filename	- Имя файла,                                                                                                                        */
    /*     Origin	- Кодировка,                                                                                                                        */
    /*     StartRow	- Номер строки, с которого начинается разбор текста,                                                                                */
    /*     DataType	- Формат данных в файле. Может быть одним из следующих констант: xlDelimited = 1 (с разделителем) или xlFixedWidth = 2 (по ширине). */
    /*                     Если этот аргумент не указан, Microsoft Excel пытается определить формат столбца при открытии файла,                             */
    /*     TextQualifier	- Задает текст классификатора,                                                                                              */
    /*     ConsecutiveDelimiter	- Последовательные разделители считаются одним разделителем (True - считать),                                               */
    /*     Tab		- Символ табуляции считать разделителем ( True - считать, DataType должен быть xlDelimited ),                                       */
    /*     Semicolon	- Точку с запятой считать разделителем  ( True - считать, DataType должен быть xlDelimited ),                                       */
    /*     Comma	- Запятую считать разделителем          ( True - считать, DataType должен быть xlDelimited ),                                       */
    /*     Space	- Пробел считать разделителем           ( True - считать, DataType должен быть xlDelimited ),                                       */
    /*     Other	- Заданный символ считать разделителем  ( True - считать, DataType должен быть xlDelimited ),                                       */
    /*     OtherChar	- Определяет символ-разделитель ( Other дожно быть True ).                                                                          */
    /*                     Если указан более чем один символ, только первый символ строки используется, а остальные символы игнорируются.,                  */
    /*     FieldInfo	- Массив, содержащий информацию для разбора отдельных столбцов данных (типы данных по столбцам).                                    */
    /*                     Интерпретация зависит от значения DataType.                                                                                      */
    /*                     Когда данные с разделителями, этот аргумент является массивом из двух элементов массива,                                         */
    /*                     при этом каждый из двух элементов массива указает параметры преобразования для конкретного столбца.                              */
    /*                     Первый элемент является номером столбца, а второй элемент является одним из значений XlColumnDataType,                           */
    /*                     определяющей как столбец обрабатывается.                                                                                         */
    /*                     Перечень возможных значений второго элемента для разных типов данных:                                                            */
    /*                     Константа		Значение	Тип данных                                                                                  */
    /*                     xlDMYFormat		4		DMY date format.                                                                            */
    /*                     xlDYMFormat		7		DYM date format.                                                                            */
    /*                     xlEMDFormat		10		EMD date format.                                                                            */
    /*                     xlGeneralFormat	1		General.                                                                                    */
    /*                     xlMDYFormat		3		MDY date format.                                                                            */
    /*                     xlMYDFormat		6		MYD date format.                                                                            */
    /*                     xlSkipColumn	        9		Column is not parsed.                                                                       */
    /*                     xlTextFormat	        2		Text.                                                                                       */
    /*                     xlYDMFormat		8		YDM date format.                                                                            */
    /*                     xlYMDFormat		5		YMD date format.                                                                            */
    /*     TextVisualLayout	- Визуальная разметка текста,                                                                                               */
    /*     DecimalSeparator	- Разделитель, что Microsoft Excel использует при распознавании десятичных чисел. По умолчанию настройки системы,           */
    /*     ThousandsSeparator	- Разделитель тысяч, что Excel использует при распознавании чисел. По умолчанию настройки системы,                          */
    /*     TrailingMinusNumbers	- Если цифры с минусом в конце, должны рассматриваться как отрицательные числа - True.                                      */
    /*                            Если False или опущен, цифры с минусом в конце рассматриваются как текст,                                                 */
    /*     Local		- Если региональные настройки машины должны быть использованы для сепараторов, цифры и форматирования данных - True         */
    return ex;
END;/*macro ContragentsReport()*/



/* форматирование Экселя - наиболее общие и полезные команды, остальное для каждого макроса индивидуально                             */
MACRO ExStandFormat(ex, numOfCol:integer) /* на входе обхект - книга Эксель и количество колонок                                      */
    var obSheet = ex.Sheets(1);           /* выделение активного листа книги, с которым будем работать                                */
    var borderColumn = recalc_columns(numOfCol);/* получим буквенный код колонки по его порядковому номеру                            */
    ex.ActiveWindow.Selection.AutoFilter;                                            /* установка автофильтра на активный лист        */
    obSheet.Range("A2").Select;                                                      /* выбор ячейки и последующее                    */
    ex.ActiveWindow.FreezePanes = true;                                              /* закрепление области                           */
    obSheet.Columns("A:"+borderColumn).EntireColumn.AutoFit;                         /* установка автоширины колонок                  */
    obSheet.Columns("A:"+borderColumn).WrapText = true;                              /* перенос по словам                             */
    obSheet.Range("A1:"+borderColumn+recordcount).Borders.LineStyle = xlContinuous;  /* тип линии границы - сплошной                  */
    obSheet.Range("A1:"+borderColumn+recordcount).Borders.Weight = xlThin;           /* толщина линии                                 */
    obSheet.Range("A1:"+borderColumn+"1").Interior.Color = RSU_Rep_xlHeadColor;      /* заливка шапки отчета бледно-серым цветом      */
    obSheet.Range("A1:"+borderColumn+"1").Font.Bold = true;                          /* полужирный текст                              */
    obSheet.Range("A1:"+borderColumn+"1").HorizontalAlignment = xlCenter;            /* горизонтальное выравнивание по центру         */
    ex.visible = true;                                                               /* видимость                                     */
    return obSheet;
END;


