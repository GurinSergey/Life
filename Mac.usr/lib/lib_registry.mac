// -------------------------------------------------------------------------------------------------
// @filename: lib_registry.mac
// @author  : 2012-10-10 zip_z. 
// @desc    : библиотека процедур для работы с реестром настроек банка
// @changes : none
// -------------------------------------------------------------------------------------------------
import BankInter;
import oralib, likepy;

private const REGISTRY_VALUE_TYPE_UNDEF = -1;

private const ERR_REGPARM_NOT_FOUND = 1;  // Параметр не найден
private const ERR_REGVAL_NOT_FOUND  = 2;  // Значение параметра не найдено
private const ERR_WRONG_KEY_TYPE    = 3;  // Неверный тип настройки

private macro GetRegistryValueType (RegistryPath:string)
    var sql, m_RetVal;
    sql =       " WITH t AS (    SELECT   SUBSTR (SYS_CONNECT_BY_PATH (t_name, '\\\\'), 3) m_name, t_type" + 
         "\n" + "                 FROM   dregparm_dbt" +
         "\n" + "           START WITH   t_parentid = 0" +
         "\n" + "           CONNECT BY   PRIOR t_keyid = t_parentid)" +
         "\n" + " SELECT * FROM t WHERE m_name = REPLACE (:m_RegistryPath, '/', '\\\\')";
    sql = ExecSqlSelect (sql, MakeArray (SqlParam ("m_RegistryPath", RegistryPath)));
    if (sql.MoveNext ())
        m_RetVal = sql.Value ("t_type", null, V_INTEGER);
    else
        m_RetVal = REGISTRY_VALUE_TYPE_UNDEF;
    end;
    return m_RetVal;
end;

// @desc  : получение значения настройки реестра. Без дурацкого синтаксиса BankInter::GetRegistryValue ()
//          и с автоматическим определением типа возвращаемого значения.
// @params: RegistryPath    :string - путь к настройке
//          ShowError       :bool   - показывать сообщения об ошибке (true / false)
// @return: значение настройки реестра или null, если что-то пошло не так.
//          Исключительные ситуации не обрабатываются (happy debugging, babee)

macro RSL_GetRegistryValue (RegistryPath:string, ShowError:bool)
    var m_RegistryType = GetRegistryValueType (RegistryPath);
    var m_RetVal       = null;
    var m_ErrorCode    = 0;
    
    if (m_RegistryType == REGISTRY_VALUE_TYPE_UNDEF)
        if (ShowError)
            msgbox ("Не удалось найти настройку реестра " + RegistryPath);
        end;
        return m_RetVal;
    end;
    
    GetRegistryValue (RegistryPath, m_RegistryType, m_RetVal, m_ErrorCode);
    
    if ((m_ErrorCode !=0) and (ShowError == true))
        if   (m_ErrorCode == ERR_REGPARM_NOT_FOUND ) MsgBox ("Не удалось найти настройку реестра " + RegistryPath );
        elif (m_ErrorCode == ERR_REGVAL_NOT_FOUND  ) MsgBox ("Значение параметра " + RegistryPath  + " не найдено");
        elif (m_ErrorCode == ERR_WRONG_KEY_TYPE    ) MsgBox ("Неверно определён тип настройки "    + RegistryPath );
        end;
    end;
    
    return m_RetVal;

onError (e)
    return m_RetVal;
end;


// @desc  : получение пути к библиотеке ресурсов ResName
// @params: ResName    :string - имя LBR
//          ShowError  :bool   - показывать сообщения об ошибке (true / false)
// @return: путь к файлу или null, если что-то пошло не так.
macro RSL_GetLbrPath (ResName:string, ShowError:bool)
    var m_RetVal;
    if (not (m_RetVal = FindPath(ResName, RSL_GetRegistryValue ("BANK_INI/ОБЩИЕ ПАРАМЕТРЫ/ДИРЕКТОРИИ/LBRDIR", true))))
        if (ShowError) MsgBox ("Не найдена LBR с именем " + resname); end;
        return null;
    end;
    return m_RetVal;
end;