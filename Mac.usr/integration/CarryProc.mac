/*29.11.2013 LAO адаптация для 20.31*/
/******************************************************************************
   Имя файла.:       CarryProc.mac
   Назначение:       Реализация интерфейса "Документ"
   Дата......:       29.11.2013
   Автор.....:       Лисименко Антон
   
   Изменения:
   05.03.2014 Vaschenko D. Добавил условие на захват платежа круглосуточным роботом
   21.03.14 ОБНОВИТЬ 1
******************************************************************************/
import BankInter, PaymInter, CTInter, OprInter;;
import lib_pm_check,"CommonInt.mac", "lib_const.mac","ProcInit.inc", "Soa_const.mac", lib_fg,"lib_account.mac";

var g_carrynum,g_errortext,g_paymentid, g_dockind,g_oper;
var CarryFields = TArray;
var count_carry :integer=0;
var CarryforBack:TArray = TArray(); //LAO массив для возможности удаление проводок созданных во время процедуры
//Проверка на допустимость фазы по счету
private macro checkphacc (curp,curr, acc_rec, acc_pay, carry_date, oper, msg)

    if (date(carry_date) != {curdate})

        var cmd = RSDCommand (
          " select max(ph.t_phase) " +
          "   from daccount_dbt ac, dopdphase_dbt ph " +
          "  where     (ac.t_account = ? or ac.t_account = ?)" +
          "        and ac.t_chapter = usr_common.get_chapter (ac.t_account) " +
          "        and (ac.t_code_currency = ?  or ac.t_code_currency = ? )" +
          "        and ph.t_account = ac.t_account " +
          "        and ph.t_chapter = ac.t_chapter " +
          "        and ph.t_currency = ac.t_code_currency " +
          "        and ph.t_phasedate >= (select max (t_phasedate) " +
          "                                 from dopdphase_dbt " +
          "                                where     t_account = ac.t_account " +
          "                                      and t_chapter = ac.t_chapter " +
          "                                      and t_currency = ac.t_code_currency " +
          "                                      and t_phasedate <= ? )" 
        );
    
        cmd.addparam("acc_pay", RSDBP_IN, acc_pay);
        cmd.addparam("acc_rec", RSDBP_IN, acc_rec);
        cmd.addparam("fiidp", RSDBP_IN, curp);
        cmd.addparam("fiidr", RSDBP_IN, curr);
        cmd.addparam("carry_date", RSDBP_IN, date(carry_date));
    
        var rs = RSDRecordset(cmd);
    
        if ((rs.movenext) and (valtype(rs.value(0)) != V_SPECIAL_VALUE /*null*/))

            if( not( CheckObjectRestriction(92, 0, 0,"dphases_dbt" ,  "t_Phase = "+int(rs.value(0)), "", null, int(oper)) ));
                setparm(6,"Нет доступа к счету находящемуся в фазе "+int(rs.value(0)));
                return false;   
            end;

            return true;
        else
            return true; //если не записи в dopdphase_dbt то значит оба счета - покрытие, фазу не проверяем
        end;
        
    else
        return true; //если дата совпадает, пропускаем
    end;
end;

private macro check_for_backout(del_paymentid,del_oper,del_errm)
var    rs, cmd,err,ch;
        cmd = RSDCommand(
        " SELECT   arch.T_ACCTRNID,"+
        " pm.T_PAYMENTID,"+
        " arch.T_CHAPTER,"+
        " arch.T_DATE_CARRY,"+
        " arch.T_FIID_RECEIVER,"+
        " arch.T_FIID_PAYER,"+
        " ARCH.T_ACCOUNT_PAYER,"+
        " arch.T_ACCOUNT_RECEIVER,"+
        " arch.T_SUM_RECEIVER,"+
        " arch.T_SUM_PAYER, "+
        " ARCH.T_PRIORITY "+
        "  FROM   dacctrn_dbt arch,"+
        " dpmdocs_dbt pm"+
        "  WHERE       pm.T_PAYMENTID = ? "+
        " AND pm.T_ACCTRNID = ARCH.T_ACCTRNID ");
        cmd.addparam("pmid", RSDBP_IN, del_paymentid);
    
    rs = RSDRecordset(cmd);
    
    while (rs.MoveNext)
    
        ch = checkphacc (rs.value("T_FIID_PAYER"),rs.value("T_FIID_RECEIVER") , rs.value("T_ACCOUNT_RECEIVER"),rs.value("T_ACCOUNT_PAYER"), rs.value("T_DATE_CARRY") , del_oper, err);
        if (not ch)
            setparm( 2, err );
            return -400;
        end;
    
    end;
    
    return 0;
    /*
        if (rs.value("debetKind") =="А") 
            if (rs.value("limits_deb") >0)
                cmd = RSDCommand ("begin RSI_RsbAccTransaction.AccGetFreeAmount(?,?,?,?,?,?,?,0,0,?); END;");
                cmd.addParam( "amount"  ,  RSDBP_RETVAL, V_MONEY                 ); 
                cmd.addParam( "amountLim"  ,  RSDBP_RETVAL, V_MONEY                 ); 
                cmd.addParam( "acc"     ,  RSDBP_IN,     rs.value("T_ACCOUNT_PAYER")     );
                cmd.addParam( "chapter" ,  RSDBP_IN,     rs.value("T_CHAPTER")     );
                cmd.addParam( "curr"    ,  RSDBP_IN,     rs.value("T_FIID_PAYER")    );  
                cmd.addParam( "date"    ,  RSDBP_IN,     rs.value("T_DATE_CARRY")     ); 
                cmd.addParam( "pr"    ,  RSDBP_IN,     rs.value("T_PRIORITY")     ); 
                cmd.addParam( "s"  ,  RSDBP_RETVAL, V_INTEGER                ); 
                cmd.execute;
                if (cmd.Param(1).value - rs.value("T_SUM_PAYER")  < 0 )
                    return 1;
                end; 
            else
                cmd = RSDCommand ("begin ? := RSI_RsbAccTransaction.GetFreeAmountBackout (?,?,?,?,?); END;");
                cmd.addParam( "amount"  ,  RSDBP_RETVAL, V_MONEY                 ); 
                cmd.addParam( "acc"     ,  RSDBP_IN,     rs.value("T_ACCOUNT_PAYER")     );
                cmd.addParam( "chapter" ,  RSDBP_IN,     rs.value("T_CHAPTER")     );
                cmd.addParam( "curr"    ,  RSDBP_IN,     rs.value("T_FIID_PAYER")    );  
                cmd.addParam( "date"    ,  RSDBP_IN,     rs.value("T_DATE_CARRY")     ); 
                cmd.addParam( "dates"   ,  RSDBP_IN,    date("31.12.9999")    ); 
                cmd.execute;
                if (-cmd.Param(0).value - rs.value("T_SUM_PAYER")  < 0 )
                    return 1;
                end; 
            end;    
        end;
        if (rs.value("kreditKind") =="П") 
             if (rs.value("limits_kred") > 0)
                cmd = RSDCommand ("begin RSI_RsbAccTransaction.AccGetFreeAmount(?,?,?,?,?,?,?,0,0,?); END;");
                cmd.addParam( "amount"  ,  RSDBP_RETVAL, V_MONEY                 ); 
                cmd.addParam( "amountLim"  ,  RSDBP_RETVAL, V_MONEY                 ); 
                cmd.addParam( "acc"     ,  RSDBP_IN,     rs.value("T_ACCOUNT_RECEIVER")     );
                cmd.addParam( "chapter" ,  RSDBP_IN,     rs.value("T_CHAPTER")     );
                cmd.addParam( "curr"    ,  RSDBP_IN,     rs.value("T_FIID_RECEIVER")    );  
                cmd.addParam( "date"    ,  RSDBP_IN,     rs.value("T_DATE_CARRY")     ); 
                cmd.addParam( "pr"    ,  RSDBP_IN,     rs.value("T_PRIORITY")     ); 
                cmd.addParam( "s"  ,  RSDBP_RETVAL, V_INTEGER                ); 
                cmd.execute;
                if (cmd.Param(1).value - rs.value("T_SUM_PAYER")  < 0 )
                    return 1;
                end; 
            else
                cmd = RSDCommand ("begin ? := RSI_RsbAccTransaction.GetFreeAmountBackout (?,?,?,?,?); END;");
                cmd.addParam( "amount"  ,  RSDBP_RETVAL, V_MONEY                 ); 
                cmd.addParam( "acc"     ,  RSDBP_IN,     rs.value("T_ACCOUNT_RECEIVER")     );
                cmd.addParam( "chapter" ,  RSDBP_IN,     rs.value("T_CHAPTER")     );
                cmd.addParam( "curr"    ,  RSDBP_IN,     rs.value("T_FIID_RECEIVER")    );  
                cmd.addParam( "date"    ,  RSDBP_IN,     rs.value("T_DATE_CARRY")     ); 
                cmd.addParam( "dates"   ,  RSDBP_IN,    date("31.12.9999")    ); 
                cmd.execute;
                if (cmd.Param(0).value - rs.value("T_SUM_RECEIVER")  < 0 )
                    return 1;
                end; 
            end;    
        end;
    end;
    */
    return 0;

end;



macro SOA_RunMakeCarry (p_dockind,p_paymentid,err_txt,p_real_count_carry)
    private var ret = -1;
    private var stat = 0;
    private  var rs : object;
    private  var rs_symbols;
    private  var rs_carry;
    private  var cmd : object;
    private  var errm;
    private  var DocTabClause;
    private  var paym_origin; //USR_PAYMENT_OR_FRONT_DEAL
    g_dockind   = p_dockind;
    g_paymentid = p_paymentid;
    private var trn_stat = false;
    private var count_trn = 50;
    private var acc_TRN = 0;
    var SUMCONVP,SUMCONVR,STATE_CONV; //LAO 09.04.2014 определяем сумму в нац валюте для мультивалюток
    var real_count_carry = 0;  //обнуляем кол-во проводок.
    setparm( 3,real_count_carry );
    
    
    cmd = RSDCommand("select t_origin from dpmpaym_dbt where t_paymentid = ?");
    cmd.addparam("pmid", RSDBP_IN,g_paymentid);
    rs = RSDRecordset(cmd);
    if (not(rs.movenext))
         setparm( 2,"Платеж с id = "+g_paymentid+" не найден");
         return -580;
    else
        paym_origin =  rs.value("t_origin");
    end;

    cmd = RSDCommand(
      " select ACCTRNID " +
      "       ,paymentid " +
      "       ,operationid " +
      "       ,carrynum " +
      "       ,FIID_PAYER " +
      "       ,FIID_RECEIVER " +
      "       ,chapter " +
      "       ,payer_account " +
      "       ,receiver_account " +
      "       ,sum " +
      "       ,SUM_PAYER " +
      "       ,SUM_RECEIVER " +
      "       ,date_carry " +
      "       ,oper " +
      "       ,pack " +
      "       ,num_doc " +
      "       ,ground " +
      "       ,department " +
      "       ,vsp " +
      "       ,kind_oper " +
      "       ,shifr_oper " +
      "   from usr_pmdocs " +
      "  where paymentid = ? "
     );
    cmd.addparam("pmid", RSDBP_IN, g_paymentid);
    rs = RSDRecordset(cmd);

    var operationId = PM_Opr_GetIdOperation (g_paymentid, g_dockind);
    var pvt_idStep;
    
    if (not PM_FindOperation_Step (g_paymentid, "6", OPR_STEP_READYFOREXEC, operationId, pvt_idStep))
         setparm( 2,"Шаг операции не найден, платеж c id:"+g_paymentid);
         return -580;
    end;

   
    while (rs.MoveNext)
        var trn_carry = RSBAccTransaction ();
        var symb=0;
        g_carrynum  = rs.value("carrynum");
        trn_carry.Chapter           = rs.value("chapter");//this.chapter;
        trn_carry.FIIDReceiver      = rs.value("FIID_RECEIVER");//this.fiid;
        trn_carry.FIIDPayer         = rs.value("FIID_PAYER");//this.fiid;
       // trn_carry.FIID              = rs.value("FIID_PAYER");//this.fiid; //LAO В литературе написано что это сумма дебета проводки
        trn_carry.AccountPayer      = rs.value("payer_account");//this.payer_account;
        trn_carry.AccountReceiver   = rs.value("receiver_account");//this.receiver_account;
        trn_carry.SumReceiver       = rs.value("SUM_RECEIVER", null, V_MONEY); //this.sum;
        trn_carry.SumPayer          = rs.value("SUM_PAYER", null, V_MONEY); //this.sum;
    //    trn_carry.Sum               = rs.value("SUM_PAYER", null, V_MONEY);//написано в доке Core_RSLprc_1.pdf  -- это  сумма дебета проводки
        trn_carry.Ground            = rs.value("ground");//this.ground;
        trn_carry.Date_Carry        = rs.value("date_Carry");//this.date_carry;
        trn_carry.Numb_Document     = rs.value("num_doc");//this.num_doc;
        trn_carry.Number_Pack       = rs.value("pack");//this.pack;
        trn_carry.Shifr_Oper        = rs.value("shifr_oper");//this.shifr_oper;
        trn_carry.Kind_Oper         = rs.value("kind_oper");//this.kind_oper;
        trn_carry.Oper              = rs.value("oper");//this.oper;
        trn_carry.Department        = rs.value("department");//this.department;
        trn_carry.ID_Operation      = operationId;
        trn_carry.ID_Step           = pvt_idStep;
        trn_carry.userfield3        = "ik_paymid|" + g_paymentid + "|"; //LAO для сообщений по остаткам в ИК. необходимо сразу знать ид платежа, поэтому  фиксирую его тут.
        
       //Если  один счет в валютном документе рублевый, тогда нужно заполнить SumEquivalentCarry для него
        if (trn_carry.FIIDPayer != trn_carry.FIIDReceiver)
            if (trn_carry.FIIDPayer == 0)
                trn_carry.SumEquivalentCarry= rs.value("SUM_PAYER", null, V_MONEY); // LAO без него не считает курс Core_RSLprc_1.pdf 
            elif (trn_carry.FIIDReceiver == 0)
                trn_carry.SumEquivalentCarry= rs.value("SUM_RECEIVER", null, V_MONEY); // LAO без него не считает курс Core_RSLprc_1.pdf 
            else
               //LAO 09.04.2014 определяем сумму в нац валюте для мультика, это нужно что бы не формировалась проводка курсовой разницы
               
                if (paym_origin==USR_PAYMENT_OR_FRONT_DEAL)//25.12.2014 Фронт-диллинг определяет сумму нац.валюты самостоятельно LAO
                    trn_carry.SumEquivalentCarry=rs.value("SUM", null, V_MONEY);
                else
                    if ((ConvSum(SUMCONVP,trn_carry.SumPayer,trn_carry.Date_Carry ,trn_carry.FIIDPayer)!=0) or 
                        (ConvSum(SUMCONVR,trn_carry.SumReceiver,trn_carry.Date_Carry ,trn_carry.FIIDReceiver)!=0))
                        setparm( 2, "Для мультивалютного документа невозможно определить сумму в нац. валюте" );
                        return -455;
                    end;
                    //LAO для поля T_SUM_NATCUR в dacctrn_dbt выбирается наименьшая сумма  после конвертации
                    if (SUMCONVP>SUMCONVR) 
                        trn_carry.SumEquivalentCarry=SUMCONVR;
                    else
                        trn_carry.SumEquivalentCarry=SUMCONVP;
                    end;
                end;
            end;
        end;
        
        if (g_dockind == 15)
            trn_carry.TypeDocument = "Ц"; // LAO 2031 не делать дополнительные проводки по переоценки.
        end;
        
        
        trn_stat = false;
        count_trn = 1000;
        
        //Эмулятор транзакции
        /*
        while (not trn_stat)
        
            stat = trn_stat = checkphacc (trn_carry.FIIDPayer,trn_carry.FIIDReceiver , trn_carry.AccountReceiver,trn_carry.AccountPayer, trn_carry.Date_Carry , trn_carry.Oper, errm);
            
            
            if (not stat)
                if (index(errm,"Запись захвачена")!=0) 
                    if (count_trn > 0)
                        testevent(Random(1000)); //ждем рандомное время, в любом случае меньше секунды
                        count_trn= count_trn -1;
                     else 
                        trn_stat = true;
                        stat = true;
                    end;
                else
                    trn_stat = true;
                end;
            end;
        end;
        */
        
        stat = trn_stat = checkphacc (trn_carry.FIIDPayer,trn_carry.FIIDReceiver , trn_carry.AccountReceiver,trn_carry.AccountPayer, trn_carry.Date_Carry , trn_carry.Oper, errm);
        
        
        
        if (not stat)
            setparm( 2, errm );
            return -400;
        end;
        
        
        
        if ((g_dockind == 410) or 
                (g_dockind == 420) or 
                (g_dockind == 430) or 
                (g_dockind == 440) or 
                (g_dockind == 400) )
            if ((trn_carry.FIIDPayer == 0) or (trn_carry.FIIDReceiver == 0))
                cmd = RSDCommand(
                  " Select T_SYMBOL,T_SUM from dsymbcash_dbt "+
                  "  where t_applicationkey = lpad(?,34,0) "+
                  "    and exists (select 1 "+
                  "                  from daccount_dbt "+
                  "                 where t_chapter = ? "+
                  "                   and (t_account = ? or t_account = ?) "+
                  "                   and instr (t_type_account, 'А') > 0) ");
              //  cmd.addParam("old_applicationkey", RSDBP_IN, LZ_(g_paymentid,34));
                cmd.addParam("old_applicationkey", RSDBP_IN, g_paymentid);
                cmd.addParam("chapter", RSDBP_IN, trn_carry.Chapter );
                cmd.addParam("acc_payer", RSDBP_IN, trn_carry.AccountPayer);
                cmd.addParam("acc_receiver", RSDBP_IN, trn_carry.AccountReceiver);
                rs_symbols=RSDRecordset(cmd);
                
                while (rs_symbols.MoveNext)
                 //   if (trn_carry.SumPayer == rs_symbols.value("T_SUM")) 
                     //LAO  пока не починят запрос 208209
/*                    if (g_dockind != 440) 
                        trn_carry.AddCashSymbol(rs_symbols.value("T_SYMBOL"),rs_symbols.value("T_SUM"));
                        symb=1;
                    else */
                         cmd = RSDCommand(
                        " update dsymbcash_dbt "+
                        "    set T_ACCTRNID = ?, "+
                        " t_applicationkey =  chr(1) "+
                        "  where t_applicationkey = lpad(?,34,0)"+
                        "    and exists (select 1 "+
                        "                  from daccount_dbt "+
                        "                 where t_chapter = ? "+
                        "                   and (t_account = ? or t_account = ?) "+
                        "                   and instr (t_type_account, 'А') > 0) ");
                        cmd.addParam("payid", RSDBP_IN,trn_carry.ACCTRNID);
                        cmd.addParam("old_applicationkey", RSDBP_IN,g_paymentid);
                        cmd.addParam("chapter", RSDBP_IN, trn_carry.Chapter );
                        cmd.addParam("acc_payer", RSDBP_IN, trn_carry.AccountPayer);
                        cmd.addParam("acc_receiver", RSDBP_IN, trn_carry.AccountReceiver);
                        cmd.Execute();
//                    end;
                    
                end;
                
            end;
        end;
        

        
        //проверка на кассовый документ(подставляем вид операциии = 3 (кассовый))
        if ((acc_isCash (trn_carry.AccountPayer)) or (acc_isCash (trn_carry.AccountReceiver)))
            trn_carry.Kind_Oper=" 3";
        end;
        
        stat = trn_carry.Carry(ACCTRN_STATUS_DATE_CARRY, errm);
        
      
        
        if (not stat)
            cmd = RSDCommand("update usr_pmdocs set error_text = ? where paymentid = ? and carrynum = ?");
            cmd.addParam("error_text", RSDBP_IN, errm);
            cmd.addParam("paymentid", RSDBP_IN, g_paymentid);
            cmd.addParam("carrynum", RSDBP_IN, g_carrynum);
            cmd.Execute();
            setparm( 2, errm );
            return -600;
        else
            //LAO блок для возможного отката
            CarryforBack[CarryforBack.size]=trn_carry.ACCTRNID ; //Запомним ид проводки
            real_count_carry = real_count_carry +1; //Увеличиваем счетчик проводок
            setparm( 3,real_count_carry ); //Передадим кол-во проводок на верх
            
            
        // LAO  проводка не привязывается через dpmdocs_dbt к платежу, странно досадно но ладно...
            //привязка проводки к платежу
            cmd = RSDCommand(
            " insert into dpmdocs_dbt "+
            " (t_paymentid,t_autokey,t_keeptechfields,t_pmaddpiid,t_reason,T_ACCTRNID) "+
            " values (?,0, chr(88), 0, ?, ?)" );
            cmd.addParam("paymentid", RSDBP_IN, g_paymentid);
            cmd.addParam("reason", RSDBP_IN, trn_carry.ResultCarry );
            cmd.addParam("trnid", RSDBP_IN, trn_carry.ACCTRNID);

            cmd.Execute();

        // обновление пользовательской таблицы регистрации проводок
            cmd = RSDCommand("update usr_pmdocs set ACCTRNID = ?, "+
                             " error_text = 'no_error' where paymentid = ? and carrynum = ?");
            cmd.addParam("ACC_TRNID", RSDBP_IN, trn_carry.ACCTRNID);
            cmd.addParam("paymentid", RSDBP_IN, g_paymentid);
            cmd.addParam("carrynum", RSDBP_IN, g_carrynum);
            cmd.Execute();

            //привязка смены статуса к записи регистрации проводок к шагу операции
            cmd = RSDCommand(
            " insert into doprdocs_dbt "+
            "   (t_dockind, t_documentid, t_id_operation, t_id_step, t_part, t_status, t_origin, "+
            "    t_servdockind, t_servdocid, t_autokey, t_launchoper, t_fmtblobdata_xxxx,T_ACCTRNID) "+
            " values (1005, chr (1), ?, ?, 1, 0, 0, 0, 0, 0, chr (0), "+
            "         utl_raw.cast_to_raw ('update usr_pmdocs set ACCTRNID = null, error_text = ''проводка ожидает выполнения'' "+
            "                               where paymentid = "+g_paymentid+" and carrynum ="+g_carrynum+"'),? )");
            cmd.addParam("operid", RSDBP_IN, operationId);
            cmd.addParam("step", RSDBP_IN, pvt_idStep);
          //  cmd.addParam("pid", RSDBP_IN, g_paymentid); я_лох
          //  cmd.addParam("num", RSDBP_IN, g_carrynum);
            cmd.addParam("acctrn", RSDBP_IN, trn_carry.ACCTRNID);
            cmd.Execute();

        end;
    end; //while
    
    setparm( 2, "no_error" );
    return 0;   
   
    
    
end;
//Обертка новая
macro RunCarryWithStep(Str)
    debugbreak;
    var cmd;
    var v_errortxt;
    var check_carry;
    var v_real_count_carry = 0;
    var f,z; // для цикла
    var stat_del;
    
    count_carry = 0;
    CarryforBack = TArray(); //LAO обнуляем массив
    
    ParseStringToArray(Str, CarryFields);
    g_dockind   = CarryFields(crtCarryFldDocKind);
    g_paymentid = CarryFields(crtCarryFldPaymentID);

   // LoopInTrn(true);
    //Обернул  не через ProcessTrn, как было раньше
    
    //rslDefCon.BeginTrans;
    
    check_carry = SOA_RunMakeCarry(g_dockind, g_paymentid, v_errortxt,v_real_count_carry );

    if( check_carry != 0 )
        if (v_real_count_carry>0) //LAO если произошла ошибка при вставке проводок, и кол-во проводок не 0, тогда сами удаляем их
            var del_carry =RSBAccTransaction; 
            z = 0;
            f=CarryforBack.size-1;
            for (z,0,f) //Удаляем создавшиеся проводки
                stat_del= del_carry.find(CarryforBack(z)); //
                if (stat_del==0)
                    stat_del=del_carry.delete();
                end;
            end;
            
        end;
        
        runerror( v_errortxt, check_carry );
    else
        g_errortext = g_paymentid+chrDelimiter+g_carrynum+chrDelimiter+"no_error";     
    end;
    
  //  rslDefCon.CommitTrans;
    
    return g_errortext;
    
   //Если произошла ошибка, отправляет ответ 
    onerror(e) 
     //   if( rslDefCon.IsInTrans ) 
     //       rslDefCon.RollbackTrans;
     //   end; 
        
        g_errortext= e.message;
        cmd = RSDCommand("update usr_pmdocs set error_text = ? where paymentid = ? and carrynum = ?");
        cmd.addParam("error_text", RSDBP_IN, g_errortext);
        cmd.addParam("paymentid", RSDBP_IN, g_paymentid);
        cmd.addParam("carrynum", RSDBP_IN, g_carrynum);
        cmd.Execute();
           
        return g_paymentid+chrDelimiter+g_carrynum+chrDelimiter+g_errortext;

   
end;



macro RunBackoutCarry(Str)

    ParseStringToArray(Str, CarryFields);
    g_paymentid = CarryFields(crtCarryFldPayment_ID);
    g_oper = CarryFields(crtCarryFldBkOper);
    var docKind = PM_GetDocKind (g_paymentid);
    g_errortext="no_error";

    // ---------------------------------------------------------------------------------------------
    // ПРОВЕРКИ
    // ---------------------------------------------------------------------------------------------
    // выгруженные в МБР - запрещено
    if (PM_IsOprStep_State (g_paymentid, docKind, "Ф", OPR_STEP_EXECSTEP))
        runError ("Документ выгружен в МБР, удалять нельзя");
    end;
    
    // выгруженные во Фронт - запрещено
    if (PM_IsOprStep_State (g_paymentid, docKind, "f", OPR_STEP_EXECSTEP))
        runError ("Документ выгружен во Фронт, удалять нельзя");
    end;
    
    // клиентские платежи - запрещено
    if ((docKind == SOA_PS_PAYORDER) and (PM_IsClientPSPayment (g_paymentid)))
        runError ("Документ является клиентским платежом, удалять нельзя");
    end;
    
    // платежи на ФМ - запрещено
    if (PM_isLockedByFMControl (g_paymentid))
        runError ("Документ обрабатывается финмониторингом, удалять нельзя");
    end;
       debugbreak;
    //Vaschenko D. 05.03.2014 Если круглосуточный робот не забрал платеж на обработку
    if (PM_IsOwnedByNightlyRobot (g_paymentid))
        runError ("В данный момент платеж: "+String(g_paymentid)+", начал обрабатывать кругл. робот\n  через пару минут попробуйте повторить попытку");
    end;
    //проверяем фазу
    if (check_for_backout(g_paymentid,g_oper,g_errortext) != 0 )
        runError (g_errortext);
    end;
    
    // ---------------------------------------------------------------------------------------------
    // ТРАНЗАКЦИЯ ОТКАТА И УДАЛЕНИЯ
    // 1. откат шагов операции (если есть)
    // 2. удаляем первичку
    // 3. удаляем платеж и все, что с ним связано
    // ---------------------------------------------------------------------------------------------
    //Vaschenko D. 05.03.2014 Блокируем платеж, чтобы кругл.робот не смог его провести
    VAR cmd_DELL = RSDCommand("insert into usr_paymdelete_tmp values ("+ g_paymentid +")");
    cmd_DELL.Execute();
    
    
    
    

    var stat = 0;
    // 1
    rslDefCon.BeginTrans ();//PM_RollbackOperation выполняется в транзакии , его нельзя
     
    if( _bank.is_VUZ )
        var rs_pm2030 = rsdRecordset( " SELECT   1 "
                                      "   FROM   dpmpaym_dbt "
                                      "  WHERE   T_CREATIONDATE <= TO_DATE ('07.03.2014', 'dd.mm.yyyy') "
                                      "          AND t_paymentid = " + g_paymentid + " " );
        if( rs_pm2030.movenext )
            rsdCommand( " BEGIN usr_deleteSQLFromOrpDocs( " + g_paymentid + " ); END; " ).execute;

            rsdCommand( " UPDATE   USR_PMDOCS "
                        "    SET   ACCTRNID = NULL, ERROR_TEXT = 'проводка ожидает выполнения' "
                        "  WHERE   PAYMENTID = " + g_paymentid + " " ).execute;
        end;
    end;
    
 //  if (amount_for_backout(g_paymentid) == 1 )
 //        runError ("Свободного остатка на счете получателя не достаточно для отката документа:"+g_paymentid);
 //   end;
   //завернем откат операции в безинтерфейсный режим и массовый режим, в таком случае  не будет всплыв. окон
    if (PM_FindOperation (g_paymentid))
      var   prevMode = Opr_SetMultiExec(true);
      var   del_imode = SetDialogFlag(0);
            stat = PM_RollbackOperation (int(g_paymentid));
            SetDialogFlag(del_imode);
            Opr_SetMultiExec(prevMode);


        
        if (EXIT_SUCCESS != stat)
            runError (GetErrorMessage (stat));
        end;
    end;
    // 2
    PM_DeletePrimaryDocumentPaym (g_paymentid);
    // 3
    stat = execStoredFunc ("pm_common.DeletePayment", V_INTEGER, makeArray (SqlParam ("p_PaymentID", g_paymentid)));
    if (stat != EXIT_SUCCESS)
        if (rslDefCon.IsInTrans ()) rslDefCon.RollbackTrans (); end;
        runError (GetErrorMessage (stat));  
    end;
    // ~     

    // Golovkin 10.06.2014 Отправка статуса в ИК
    ExecMacroFile("SendStatus_IB.mac", "SendStatus_IB", g_paymentid, docKind, 21/*Отзыв в АБС*/, true);

    rslDefCon.CommitTrans ();
 
    //Vaschenko D. 05.03.2014 Чистим платеж с таблицы робота отзыва
  //WTF? а определять переменную не обязательно?
    cmd_DELL = RSDCommand("delete from usr_paymdelete_tmp where T_DOCUMENTID = ("+ g_paymentid +")");
    cmd_DELL.Execute();

    return g_errortext;
onerror (e) 
    if (rslDefCon.IsInTrans ()) 
        rslDefCon.RollbackTrans ();
    end; 
    g_errortext=e.message;
    return g_errortext;
end;
