/**
 * Класс TPrintProtocolOperation и его подклассы.
 * 
 * @since   09.11.2007
 * @author  Ivkina Olga
 * @version 6.00.004.24
 */
import repException;

import CFCalculationProtocolView;

/**
 * Операция печати (создания) протокола.
 */
class TPrintProtocolOperation()
    /**
     * Выполнить создание протокола.
     * 
     * @param     calculationProtocolView    представление протокола расчета
     * @param     dataBank   заполненный банка данных
     */
    macro execute(calculationProtocolView : TCalculationProtocolView, dataBank : TDataBank)
         throw(TPureVirtualMethodCallException("TPrintProtocolOperation::execute"));
    end;
end;


/**
 * Операция печати (создания) протокола по указанию 1881-У.
 */
class (TPrintProtocolOperation) TPrintProtocolOperation1881()
    /**
     * Котструктор.
     */
    private macro constructorTPrintProtocolOperation1881()
      initTPrintProtocolOperation()
    end;
    
    /**
     * Выполнить создание протокола.
     * 
     * @param     calculationProtocolView    представление протокола расчета
     * @param     dataBank   заполненный банк данных
     */
    macro execute(calculationProtocolView : TCalculationProtocolView, dataBank : TDataBank, mainAccountMasks : String)

        calculationProtocolView.setProtocolOutput();

        calculationProtocolView.printHead();
        
        var dataset = dataBank.createCalculationProtocolDataset();

        var symbolTypeItogRecord = null;
        var symbolItogRecord     = null;
        var okatoItogRecord      = null;
       
        if (mainAccountMasks == null)
        	mainAccountMasks = "20202*, 20206*, 20207*";
        end;

        var isEof = not dataset.moveNext();
       
        if (not isEof)
            calculationProtocolView.beginProtocol();
        else    
            calculationProtocolView.printNullData();
        end;    

        while ((not isEof) and dataset.isSymbolTypeItog)
            symbolTypeItogRecord = dataset.getRecord();
        
            calculationProtocolView.beginSymbolType(symbolTypeItogRecord.symbolType);

            isEof = not dataset.moveNext();
            while ((not isEof) and dataset.isSymbolCodeItog and (not dataset.isSymbolTypeItog))
                  symbolItogRecord = dataset.getRecord();

                calculationProtocolView.beginSymbol(symbolItogRecord.symbolCode);
        
                isEof = not dataset.moveNext();
                while ((not isEof) and (dataset.isOkatoCodeItog) and (not dataset.isSymbolCodeItog))
                    okatoItogRecord = dataset.getRecord();
    
                    calculationProtocolView.beginOkato(okatoItogRecord.okatoCode);
             
                    isEof = not dataset.moveNext();
                    while ((not isEof) and (not dataset.isOkatoCodeItog))
                        calculationProtocolView.printDocument(symbolItogRecord.symbolCode, okatoItogRecord.okatoCode, dataset.documentNumber, dataset.documentDate,
                                                              dataset.debetAccount, dataset.creditAccount,
                                                              dataset.value);
                        isEof = not dataset.moveNext();
                    end;

                    calculationProtocolView.endOkato(okatoItogRecord.okatoCode, okatoItogRecord.value);
                end;
                calculationProtocolView.endSymbol(symbolItogRecord.symbolCode, symbolItogRecord.value);
            end;

            calculationProtocolView.endSymbolType(symbolTypeItogRecord.symbolType, symbolTypeItogRecord.value);

            if (symbolTypeItogRecord.symbolType == 1)
                calculationProtocolView.printDebetTurns(dataBank.calculateDebetTurns(mainAccountMasks), mainAccountMasks);
            elif (symbolTypeItogRecord.symbolType == 2)
                calculationProtocolView.printCreditTurns(dataBank.calculateCreditTurns(mainAccountMasks), mainAccountMasks);
            end;
        end;

        calculationProtocolView.endProtocol();

        calculationProtocolView.resetProtocolOutput();
    end;

    constructorTPrintProtocolOperation1881();
end;