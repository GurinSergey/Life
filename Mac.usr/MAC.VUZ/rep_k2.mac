/*

Сведения о Картотеке 2 - просроченная задолженность
 
 
А.Киселев 21.12.2010                    Версия 1.0

!!! Проверить partyid субъектов видом кода 1 '010000060164','010000060350', '010000060198'
  если не соответствует подставить соответствующие из objcode

    : 04.06.2013 AAN I-00377969-2 запрос падал, т.к. подзапрос возвращал более одной строки, из-за того что не
    учитывался признак актуальность/неактуальности на сегодня определённого кода

*/



Import globals ,Календарь, oralib, likepy, rsexts, lib_str;

const  KEY_F1      =315;
const  KEY_F2      =316;
const  KEY_F3      =317;
const KEY_ESC      = 27;
const KEY_SPACE    = 32;
const KEY_ENTER    = 13;


var Fulloutputl, outl, outputl="rep_k2.lbr";                    

GetRegistryValue("BANK_INI\\ОБЩИЕ ПАРАМЕТРЫ\\ДИРЕКТОРИИ\\LBRDIR",2,outl);
Fulloutputl = FindPath(outputl, outl);
//Fulloutputl = "C:\\R_STYLE\\KISELEV\\SoftProject\\Report_4\\"+outputl;

var dlgRep = TRecHandler("Pan0", Fulloutputl, TRUE);






macro UserFormOKPO(OKPO,INN)
 if ( (numeric(OKPO) == 0) or (valtype (OKPO)==V_UNDEF) or (valtype (OKPO) == 26))
  if ( (numeric(INN) == 0) or (valtype (OKPO)==V_UNDEF) or (valtype (OKPO) == 26))
   return "0";
  else
   OKPO = strLpad(INN,10,"0");
   OKPO = substr(OKPO,StrLen(OKPO)-10+1);
  end;
 end;
 return OKPO;
end;


macro MakeRep( DateReport )

file RepFile1 () write dbf;
file RepFile2 () write dbf;

Const
   NameRepTMP_1 = "RepTMP_K2_1.dbf",
   NameRepTMP_2 = "RepTMP_K2_2.dbf";


Var
 DataSet_1 :RsdRecordset,
 DataSet_2 :RsdRecordset,
 Query :string = "",        
 Params :TArray,
 i,s,fl_exit,Buf,Sgn,
 NameRepOUT_1,
 NameRepOUT_2,
 PathTmp,
 FullRepPathTmp_1,
 FullRepPathTmp_2,
 PathTxt,
 PathOut,
 ErrReg;

//Header
//открываем шаблоны DBF


Var  MaskAcc = TArray;
 MaskAcc(0) = "^32[45]|^91603"; //для Клиент и Банк тип задолженности "S"
 MaskAcc(1) = "^4581[234]|^4591[234]|^91604....[012345689]"; // для Юриков и ИП, Клиентов и не Банков тип задолженности "S"
 MaskAcc(2) = "^90902"; // для Юриков и ИП, Клиентов и не Банков тип задолженности ""
 MaskAcc(3) = "^45815|^45915|^91604....[012345689]"; // для физиков не ИП тип задолженности "S"

 NameRepOUT_1 = Substr({MFO_Bank},7,3) + Substr(string(DateReport),9,2) + Substr(string(DateReport),4,2) + "1.dbf";
 NameRepOUT_2 = Substr({MFO_Bank},7,3) + Substr(string(DateReport),9,2) + Substr(string(DateReport),4,2) + "2.dbf";

 GetRegistryValue("BANK_INI\\ОБЩИЕ ПАРАМЕТРЫ\\ДИРЕКТОРИИ\\USERTEMPLSDIR",2,PathTmp,ErrReg,False,{Oper});
 FullRepPathTmp_1 = FindPath(NameRepTMP_1, PathTmp);
 FullRepPathTmp_2 = FindPath(NameRepTMP_2, PathTmp);

 GetRegistryValue("BANK_INI\\ОБЩИЕ ПАРАМЕТРЫ\\ДИРЕКТОРИИ\\TEXTDIR",2,PathTxt,ErrReg,False,{Oper});
 PathTxt = Trim(Substr(PathTxt,1,Index(PathTxt+";",";")-1)); //первый приоритетный путь
 PathOut = "$" + "C:\\Term"; //путь к терминалу

 //msgbox( FullRepPathTmp_1, "-|", PathTxt + "\\" + NameRepOUT_1 );
 if( not CopyFile(FullRepPathTmp_1, PathTxt + "\\" + NameRepOUT_1) )
   MsgBox("Не удалось скопировать файл " + NameRepTMP_1 + ".");
   Exit(1);
 end;
 if( not CopyFile(FullRepPathTmp_2, PathTxt + "\\" + NameRepOUT_2)   )
   MsgBox("Не удалось скопировать файл " + NameRepTMP_2 + ".");
   Exit(1);
 end;
 
 if (not open (RepFile1, PathTxt + "\\" + NameRepOUT_1))
   MsgBox("Не удалось открыть файл для записи " + NameRepOUT_1 + " !");
   Exit(1);
 end;
 if (not open (RepFile2, PathTxt + "\\" + NameRepOUT_2))
   MsgBox("Не удалось открыть файл для записи " + NameRepOUT_2 + " !");
   Exit(1);
 end;

 initprogress(-1,"Ждите, производится расчет...","Расчет ссудной и К2 задолженностей");

 useprogress(-1);

 s=0;
//открываем шаблоны DBF
 i = 0;
 while ( i < 3)
  if ( i == 0 )
     //выбираем счета клиенты-банки
    Query = " SELECT A.T_PARTYID, " + 
            //" NVL((SELECT DISTINCT F.T_CODE FROM dobjcode_dbt F WHERE F.T_OBJECTTYPE = 3 AND F.T_CODEKIND = 16  AND F.T_OBJECTID = A.T_PARTYID ),'000000000000') AS INN, " +  // так было
            " NVL((SELECT DISTINCT F.T_CODE FROM dobjcode_dbt F WHERE F.T_OBJECTTYPE = 3 AND F.T_CODEKIND = 16 AND f.t_state = 0 AND F.T_OBJECTID = A.T_PARTYID ),'000000000000') AS INN, " +  //  04.06.2013 AAN I-00377969-2 так стало
            " (SELECT G.T_OKPO FROM dparty_dbt G WHERE G.T_PARTYID = A.T_PARTYID) AS OKPO, " +
            " (SELECT G.T_NAME FROM dparty_dbt G WHERE G.T_PARTYID = A.T_PARTYID) AS NAME  " +
            " FROM dparty_dbt A, dpartyown_dbt C " +  
            " WHERE C.T_PARTYID = A.T_PARTYID " +
            " AND C.T_PARTYKIND IN (1,2) " +
            " GROUP BY A.T_PARTYID " +
            " HAVING COUNT(A.T_PARTYID) >= 2 ";
  elif ( i == 1 )
   //выбираем счета клиенты-юрики и физики ИП
/*    Query = " SELECT A.T_PARTYID, " + 
            " (SELECT DISTINCT F.T_CODE FROM dobjcode_dbt F WHERE F.T_OBJECTTYPE = 3 AND F.T_CODEKIND = 16 AND F.T_OBJECTID = A.T_PARTYID ) AS INN, " +
            " A.T_OKPO, A.T_NAME " +
            " FROM dparty_dbt A, dpartyown_dbt B, dpersn_dbt D " +
            " WHERE B.T_PARTYID = A.T_PARTYID                                     " +
            "  AND B.T_PARTYKIND = 1  " + //клиент
            "  AND NOT EXISTS( SELECT C.T_PARTYID FROM dpartyown_dbt C " + //не банк
            "                  WHERE C.T_PARTYID = A.T_PARTYID         " +
            "                   AND C.T_PARTYKIND = 2                  " +         
            "                )                                         " +
            "  AND D.T_PERSONID = A.T_PARTYID                          " +
            "  AND ( A.T_LEGALFORM = 1 OR A.T_LEGALFORM = 2 AND D.T_PERSONID = A.T_PARTYID AND D.T_ISEMPLOYER = CHR(88)) " + //юрик, физик ИП
            "  AND A.T_PARTYID NOT IN ( 23805, 23809, 23814 ) " + //не включать субъектов с кодм '010000060164','010000060350', '010000060198'
            "  ORDER BY 1 ";*/
    Query = " SELECT A.T_PARTYID, " +
            "  NVL((SELECT DISTINCT MAX(F.T_CODE) FROM dobjcode_dbt F WHERE F.T_OBJECTTYPE = 3 AND F.T_CODEKIND = 16 AND F.T_OBJECTID = A.T_PARTYID ),'000000000000') AS INN, " +
            "  A.T_OKPO, A.T_NAME " +
            " FROM dparty_dbt A, dpartyown_dbt B " +
            " WHERE B.T_PARTYID = A.T_PARTYID " +
            "  AND B.T_PARTYKIND = 1  " +
            "  AND NOT EXISTS( SELECT C.T_PARTYID FROM dpartyown_dbt C " +
            "                  WHERE C.T_PARTYID = A.T_PARTYID " +
            "                   AND C.T_PARTYKIND = 2 " +
            "                ) " +
            "  AND NOT EXISTS( SELECT 1 FROM dpersn_dbt D WHERE D.T_PERSONID = A.T_PARTYID " +
            "                ) " +
            "  AND A.T_LEGALFORM = 1 " +
            "  AND A.T_PARTYID NOT IN ( 23805, 23809, 23814 ) " + //не включать субъектов с кодм '010000060164','010000060350', '010000060198'     
            " UNION ALL " +
            " SELECT A.T_PARTYID, " +
            "  NVL((SELECT DISTINCT MAX(F.T_CODE) FROM dobjcode_dbt F WHERE F.T_OBJECTTYPE = 3 AND F.T_CODEKIND = 16 AND F.T_OBJECTID = A.T_PARTYID ),'000000000000') AS INN, " +
            "  A.T_OKPO, A.T_NAME " +
            " FROM dparty_dbt A, dpartyown_dbt B, dpersn_dbt D " +
            " WHERE B.T_PARTYID = A.T_PARTYID " +
            "  AND B.T_PARTYKIND = 1 " +
            "  AND NOT EXISTS( SELECT C.T_PARTYID FROM dpartyown_dbt C " +
            "                  WHERE C.T_PARTYID = A.T_PARTYID " +
            "                   AND C.T_PARTYKIND = 2 " +
            "                ) " +
            "  AND D.T_PERSONID = A.T_PARTYID " +
            "  AND A.T_LEGALFORM = 2 AND D.T_PERSONID = A.T_PARTYID AND D.T_ISEMPLOYER = CHR(88) " +
            "  AND A.T_PARTYID NOT IN ( 23805, 23809, 23814 ) " + //не включать субъектов с кодм '010000060164','010000060350', '010000060198'     
            " ORDER BY 1 ";
  elif ( i == 2 )
   //выбираем счета клиенты физики не ИП на сводных счетах по банковским картам
     //счета с остатками > 0
     /* EVG 17/1/2014 Адаптация под 2031
     Query = " SELECT T_BALANCE, ABS(SUM(RSB_ACCOUNT.RESTA(T_ACCOUNT, :DateReport_1,T_CHAPTER,T_R0))) AS SUM_REST FROM daccount_dbt " +*/
     Query = " SELECT T_BALANCE, ABS(SUM(RSB_ACCOUNT.RESTA(T_ACCOUNT, :DateReport_1,T_CHAPTER,0))) AS SUM_REST FROM daccount_dbt " +
             " WHERE REGEXP_LIKE(T_ACCOUNT,'" + MaskAcc(3) + "') " + 
//             " AND T_CLOSE_DATE <= :DateReport_2 " +
//             " AND T_CLIENT =  :PartyId " +
             " AND T_CLIENT IN ( " +
             "                   SELECT A.T_PARTYID " +
             "                   FROM dparty_dbt A, dpartyown_dbt B " +
             "                   WHERE B.T_PARTYID = A.T_PARTYID " +
             "                    AND B.T_PARTYKIND = 1  " + //клиент
             "                    AND NOT EXISTS( SELECT C.T_PARTYID FROM dpartyown_dbt C  " + //не банк
             "                                    WHERE C.T_PARTYID = A.T_PARTYID " +
             "                                     AND C.T_PARTYKIND = 2          " +
             "                                  )                                 " +
             "                    AND A.T_LEGALFORM = 1                           " +
             "                    AND A.T_PARTYID IN ( 23805, 23809, 23814 )  " + //субъекты с кодом '010000060164', '010000060350', '010000060198'
             "                  ) " +
             /* EVG 17/1/2014 Адаптация под 2031
             " AND RSB_ACCOUNT.RESTA(T_ACCOUNT, :DateReport_3,T_CHAPTER,T_R0) <> 0 " +*/
             " AND RSB_ACCOUNT.RESTA(T_ACCOUNT, :DateReport_3,T_CHAPTER,0) <> 0 " +

             " GROUP BY T_BALANCE "; 
     fl_exit = 2;
     Sgn = "S";
     Params = makeArray( SQLParam( "DateReport_1", DateReport ), SQLParam( "DateReport_3", DateReport ));


    
  end;
  DataSet_1 = execSQLselect( Query, Params);
  
  while ( DataSet_1.MoveNext() )
   //progressbar
   useprogress(s);
   s=s+1;

   fl_exit = 0;
   while ( (fl_exit < 2) and (i != 2)) //цикл по типам задолженности ссудная/картотека
    if ( i == 0 ) //счета с остатками > 1000

     /* EVG 17/1/2014 Адаптация под 2031
     Query = " SELECT T_BALANCE, ABS(SUM(RSB_ACCOUNT.RESTA(T_ACCOUNT, :DateReport_1,T_CHAPTER,T_R0))) AS SUM_REST FROM daccount_dbt " +
             " WHERE REGEXP_LIKE(T_ACCOUNT,'" + MaskAcc(0) + "') " + 
//             " AND T_CLOSE_DATE <= :DateReport_2 " +
             " AND T_CLIENT =  :PartyId " +
             " AND ABS(RSB_ACCOUNT.RESTA(T_ACCOUNT, :DateReport_3,T_CHAPTER,T_R0)) > 1000 " +
             " GROUP BY T_BALANCE "; */
     Query = " SELECT T_BALANCE, ABS(SUM(RSB_ACCOUNT.RESTA(T_ACCOUNT, :DateReport_1,T_CHAPTER,0))) AS SUM_REST FROM daccount_dbt " +
             " WHERE REGEXP_LIKE(T_ACCOUNT,'" + MaskAcc(0) + "') " + 
             " AND T_CLIENT =  :PartyId " +
             " AND ABS(RSB_ACCOUNT.RESTA(T_ACCOUNT, :DateReport_3,T_CHAPTER,0)) > 1000 " +
             " GROUP BY T_BALANCE "; 

     fl_exit = 2;
     Sgn = "S";
     Params = makeArray( SQLParam( "DateReport_1", DateReport ), /*SQLParam( "DateReport_2", DateReport ),*/ SQLParam("PartyId",DataSet_1.value(0)),
                         SQLParam( "DateReport_3", DateReport ));
     
    elif ( i == 1 ) //счета с суммарными остатками по клиенту >= 1000
     /* EVG 17/1/2014 Адаптация под 2031
     Query = " SELECT T_BALANCE, ABS(SUM(RSB_ACCOUNT.RESTA(T_ACCOUNT, :DateReport_1,T_CHAPTER,T_R0))) AS SUM_REST FROM daccount_dbt " +*/
     Query = " SELECT T_BALANCE, ABS(SUM(RSB_ACCOUNT.RESTA(T_ACCOUNT, :DateReport_1,T_CHAPTER,0))) AS SUM_REST FROM daccount_dbt " +
             " WHERE REGEXP_LIKE(T_ACCOUNT,'"; 
     // сделано для расделения по типам задолженности ссудная/картотека
     if ( fl_exit == 0 ) 
      Query = Query + MaskAcc(1) + "') ";
      fl_exit = 1;
      Sgn = "S";
     elif ( fl_exit == 1 )
      Query = Query + MaskAcc(2) + "') ";
      fl_exit = 2;
      Sgn = "";
     end;

     // сделано для разделения по типам задолженности ссудная/картотека
     /* EVG 17/1/2014 Адаптация под 2031
     Query = Query +  
//             " AND T_CLOSE_DATE <= :DateReport_2 " +
             " AND T_CLIENT =  :PartyId " +
             " AND RSB_ACCOUNT.RESTA(T_ACCOUNT, :DateReport_3,T_CHAPTER,T_R0) <> 0 " +
             " GROUP BY T_BALANCE " +
             " HAVING ABS(SUM(RSB_ACCOUNT.RESTA(T_ACCOUNT, :DateReport_4 ,T_CHAPTER,T_R0))) >= 1000 "; */
     Query = Query +  
             " AND T_CLIENT =  :PartyId " +
             " AND RSB_ACCOUNT.RESTA(T_ACCOUNT, :DateReport_3,T_CHAPTER,0) <> 0 " +
             " GROUP BY T_BALANCE " +
             " HAVING ABS(SUM(RSB_ACCOUNT.RESTA(T_ACCOUNT, :DateReport_4 ,T_CHAPTER,0))) >= 1000 "; 

     Params = makeArray( SQLParam( "DateReport_1", DateReport ),/* SQLParam( "DateReport_2", DateReport ),*/ SQLParam("PartyId",DataSet_1.value(0)),
                         SQLParam( "DateReport_3", DateReport ), SQLParam( "DateReport_4", DateReport ));
    end;



    DataSet_2 = execSQLselect( Query, Params );

    while ( DataSet_2.MoveNext() )  //вывод в dbf
     RepFile1.INN = strLpad(Trim(Substr(DataSet_1.value(1),1,Index(DataSet_1.value(1)+"/","/")-1)), 12, "0");
     RepFile1.DBT = Sgn;
     
     DateSplit(DateReport,null,null,Buf);
     RepFile1.YEAR = string (Buf);
     
     DateSplit(DateReport,null,Buf,null);
     RepFile1.MNTH = strLpad(string (Buf),2,"0");
     
     RepFile1.BNK_INF = "";
     RepFile1.BNK = "00"+Substr({MFO_Bank},7,3); 
     RepFile1.BNK_A = "00"+Substr({MFO_Bank},7,3); 
     RepFile1.BUCK = DataSet_2.value(1); //numeric 15 
     RepFile2.KOD_INN = Trim(Substr(DataSet_1.value(1),1,Index(DataSet_1.value(1)+"/","/")-1));
     RepFile2.KOD_OKP = strLpad(UserFormOKPO(DataSet_1.value(2),RepFile2.KOD_INN), 10, "0");
     if ( i == 0)
      RepFile2.TXT = DataSet_1.value(3);
      RepFile1.DBT = "S";
      RepFile1.LN_CNT = DataSet_2.value(0);
     elif ( ( i == 1 ) and ( fl_exit == 1 ))
      RepFile2.TXT = DataSet_1.value(3);
      RepFile1.DBT = "S";
      RepFile1.LN_CNT = DataSet_2.value(0);
     elif ( ( i == 1 ) and ( fl_exit == 2 ))
      RepFile2.TXT = DataSet_1.value(3);
      RepFile1.DBT = "";
      RepFile1.LN_CNT = "";
     end;

     Insert(RepFile1);
     Insert(RepFile2);

    end;
   end;


// отдельный вывод в файлы для объединенных счетов физиков не ИП Согласовано с Е.Шевцовой ВУЗ-банк 02/02/2011
   if(i == 2) 
    DateSplit(DateReport,null,null,Buf);
    RepFile1.YEAR = string (Buf);
    
    DateSplit(DateReport,null,Buf,null);
    RepFile1.MNTH = strLpad(string (Buf),2,"0");
    
    RepFile1.BNK_INF = "";
    RepFile1.BNK = "00"+Substr({MFO_Bank},7,3); 
    RepFile1.BNK_A = "00"+Substr({MFO_Bank},7,3); 
    RepFile1.DBT = Sgn;
    RepFile1.INN = "9000781"+string(DataSet_1.value(0));
    RepFile1.BUCK = DataSet_1.value(1); //numeric 15 
    RepFile1.LN_CNT = DataSet_1.value(0);            


    RepFile2.KOD_INN = "9000781"+string(DataSet_1.value(0));
    RepFile2.TXT = "физические лица";

    if(DataSet_1.value(0) == "45815")
     RepFile2.KOD_OKP = "0097810225";
    elif(DataSet_1.value(0) == "45915")
     RepFile2.KOD_OKP = "0097810404";
    elif(DataSet_1.value(0) == "91604")
     RepFile2.KOD_OKP = "0097810394";
    end;

    Insert(RepFile1);
    Insert(RepFile2);
   end;

// отдельный вывод в файлы для объединенных счетов физиков не ИП Согласовано с Е.Шевцовой ВУЗ-банк 02/02/2011


  end; 
  
  i = i + 1;
  
 //Separator




 end;


//Footer
//закрываем шаблоны DBF переносим в нужное место
 remprogress(s); 
 Close(RepFile1);
 Close(RepFile2);


 if( not CopyFile(PathTxt + "\\" + NameRepOUT_1, PathOut + "\\" + NameRepOUT_1) )       
   MsgBox("Файл " + NameRepOUT_1 + " не удалось отправить на терминал!");
 else
//   Println("Файл скопирован на станцию пользователя " +PathOut + "\\" + NameRepOUT_1);
  [##########################################################################################]
   ("Файл скопирован на станцию пользователя " + PathOut + "\\" + NameRepOUT_1);
 end;

 if( not CopyFile(PathTxt + "\\" + NameRepOUT_2, PathOut + "\\" + NameRepOUT_2) )
   MsgBox("Файл " + NameRepOUT_2 + "не удалось отправить на терминал!");                        
 else
//   Println("Файл скопирован на станцию пользователя "+PathOut + "\\" + NameRepOUT_2);
  [##########################################################################################]
   ("Файл скопирован на станцию пользователя " + PathOut + "\\" + NameRepOUT_2);
 end;


//закрываем шаблоны DBF переносим в нужное место

end;


macro Pan0_Handler  (dlgRep, cmd, id, key )

  if (cmd == DLG_INIT)
   
   message ("~Esc~ - Выход,~F2~ - Выполнить, ~F3~ - Календарь" );
   dlgRep.rec.DateRep = {CurDate};
   updatefields (dlgRep);
   return CM_IGNORE;
  elif (cmd == DLG_KEY)
   if ( ( key == KEY_F2 ) or (key == KEY_ENTER) ) //проверить достоверность даты isdate
//отчет с параметрами
    
    MakeRep(dlgRep.rec.DateRep);
    return exit(0);
   elif (key == KEY_F3)
    
    dlgRep.rec.DateRep = GetDateByCalendar({CurDate});
//выбор из календаря даты
   elif (key == KEY_ESC)
    
    return exit(1);//CM_CANCEL;
   end;
  end;


end; 




 RunDialog(dlgRep,"Pan0_Handler");

End