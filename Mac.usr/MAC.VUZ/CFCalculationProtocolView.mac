/**
 * Класс TCalculationProtocolView.
 *
 * @since   09.11.2007
 * @author  Ivkina Olga
 * @version 6.00.020.??
 */

import BankInter;
import RsbDataSet;
import log_lib;
import RcbCoreInter;
import cb_sql;

import repException;
import rcbProtocolView;


/**
 * Протокол расчета кассовых оборотов.
 */
class (TProtocolView) TCalculationProtocolView(reportName)

    /**
     * Конструктор.
     */
    private macro constructorTCalculationProtocolView(reportName)
        initTProtocolView("ПРОТОКОЛ РАСЧЕТА", reportName);
    end;

    /**
     *  Устанавливает файл для вывода.
     */
    macro setProtocolOutput()
        m_oldOutput = setOutput(m_fileName);
    end;


    /**
     *  Вернуть старый файл для вывода.
     */
    macro resetProtocolOutput()
        setOutput(m_oldOutput, true);
    end;

    /**
     * Начать протокол.
     */
    macro beginProtocol();
        throw(TPureVirtualMethodCallException("TCalculationProtocolView::beginProtocol"));
    end;

    /**
     * Закончить протокол.
     */
    macro endProtocol()
        throw(TPureVirtualMethodCallException("TCalculationProtocolView::endProtocol"));
    end;

    /**
     * Начать раздел символов.
     *
     * @param     symbolType код типа символов
     */
    macro beginSymbolType(symbolType : Integer)
        throw(TPureVirtualMethodCallException("TCalculationProtocolView::beginSymbolType"));
    end;

    /**
     * Закончить раздел символов.
     *
     * @param     symbolType код типа символов
     * @param     value  сумма итога по разделу символов
     */
    macro endSymbolType(symbolType : integer, value : Money)
        throw(TPureVirtualMethodCallException("TCalculationProtocolView::endSymbolType"));
    end;

    /**
     * Начать символ.
     *
     * @param     symbolCode код символа
     */
    macro beginSymbol(symbolCode : String)
        throw(TPureVirtualMethodCallException("TCalculationProtocolView::beginSymbol"));
    end;

    /**
     * Конец символа.
     *
     * @param     symbolCode код символа
     * @param     value  итоговое значение по символу
     */
    macro endSymbol(symbolCode : String, value : Money)
        throw(TPureVirtualMethodCallException("TCalculationProtocolView::endSymbol"));
    end;

    /**
     * Начало подитога по ОКАТО.
     *
     * @param     okatoCode  код ОКАТО
     */
    macro beginOkato(okatoCode : String)
        throw(TPureVirtualMethodCallException("TCalculationProtocolView::beginOkato"));
    end;

    /**
     * Конец подитога по ОКАТО.
     *
     * @param     okatoCode  код ОКАТО
     * @param     value  сумма подитога по ОКАТО
     */
    macro endOkato(okatoCode : String, value : Money)
        throw(TPureVirtualMethodCallException("TCalculationProtocolView::endOkato"));
    end;

    /**
     * Напечатать данные по документу.
     *
     * @param     number номер документа
     * @param     date   дата документа
     * @param     debetAccount   счет по дебету документа
     * @param     creditAccount  счет по кредиту документа
     * @param     value  сумма документа
     */
    macro printDocument(number : String, docDate : Date, debetAccount : String, creditAccount : String, value : Money)
        throw(TPureVirtualMethodCallException("TCalculationProtocolView::printDocument"));
    end;

    /**
     * Напечатать обороты по дебету.
     *
     * @param     value  сумма оборотов по дебету
     */
    macro printDebetTurns(value:money)
        throw(TPureVirtualMethodCallException("TCalculationProtocolView::printDebetTurns"));
    end;

    /**
     * Напечатать обороты по кредиту.
     *
     * @param     value  сумма оборотов по кредиту
     */
    macro printCreditTurns(value : Money)
        throw(TPureVirtualMethodCallException("TCalculationProtocolView::printCreditTurns"));
    end;

    constructorTCalculationProtocolView(reportName);
end;

/**
 * Протокол расчета по 1881-У.
 */
class (TCalculationProtocolView) TCalculationProtocolView1881(reportName)
    /**
     * Конструктор.
     */
    private macro constructorTCalculationProtocolView1881(reportName)
        initTCalculationProtocolView(reportName);
    end;

    /**
     * Начать протокол.
     */
    macro beginProtocol()
[ ┌────────┬───────────┬───────────────┬──────────┬─────────────────────────┬─────────────────────────┬────────────────┐
  │ Символ │ Код Окато │  № документа  │   Дата   │     Счет по дебету      │     Счет по кредиту     │     Сумма      │
  └────────┴───────────┴───────────────┴──────────┴─────────────────────────┴─────────────────────────┴────────────────┘];
    end;

    /**
     * Закончить протокол.
     */
    macro endProtocol()
    end;

    /**
     * Начать раздел символов.
     *
     * @param     symbolType код типа символов
     */
    macro beginSymbolType(symbolType : integer)
        if (symbolType != 1)
[ ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────];

        end;
    end;

    /**
     * Закончить раздел символов.
     *
     * @param     symbolType код типа символов
     * @param     value  сумма итога по разделу символов
     */
    macro endSymbolType(symbolType : integer, value : Money)
        if (symbolType == 1)
[  Итого по приходу                                                                                    ################ ](value);
        elif (symbolType == 2)
[  Итого по расходу                                                                                    ################ ](value);
//        elif (symbolType == 3)
//[  Итого по забалансу                                                             ################ ](value);
        end;
    end;

    /**
     * Начать символ.
     *
     * @param     symbolCode код символа
     */
    macro beginSymbol(symbolCode : String)
        if (symbolCode != "")
[  Символ #                                                                                                             ](symbolCode);
        else
[  Без символа                                                                                                          ];
        end;
    end;

    /**
     * Конец символа.
     *
     * @param     symbolCode код символа
     * @param     value  итоговое значение по символу
     */
    macro endSymbol(symbolCode : String, value : Money)
        if (symbolCode != "")
[  Итого по символу                                                                                    ################ ](value);
        else
[  Итого по документам без символа                                                                     ################ ](value);
        end;
[                                                                                                                       ];
    end;

    /**
     * Начало подитога по ОКАТО.
     *
     * @param     okatoCode  код ОКАТО
     */
    macro beginOkato(okatoCode : String)
         if (okatoCode != "")
[  ОКАТО #                                                                                                              ](okatoCode);
        else
[  ОКАТО не задан                                                                                                       ];
        end;
    end;

    /**
     * Конец подитога по ОКАТО.
     *
     * @param     okatoCode  код ОКАТО
     * @param     value  сумма подитога по ОКАТО
     */
    macro endOkato(okatoCode : String, value : Money)
        if (okatoCode != "")
[  Итого по ОКАТО                                                                                      ################ ](value);
        else
[  Итого по незаданному ОКАТО                                                                          ################ ](value);
        end;
    end;

    /**
     * Напечатать данные по документу.
     *
     * @param     number номер документа
     * @param     date   дата документа
     * @param     debetAccount   счет по дебету документа
     * @param     creditAccount  счет по кредиту документа
     * @param     value  сумма документа
     */
    macro printDocument(simbol : String, okato : String, number : String, docDate : Date, debetAccount : String, creditAccount : String, value : Money)
[    ###        ###      ############# ##########  ######################### ######################### ################ ]
(simbol, okato, number, docDate, debetAccount, creditAccount, value);
    end;

    /**
     * Напечатать обороты по дебету.
     *
     * @param     value  сумма оборотов по дебету
     */
    macro printDebetTurns(value : Money, accountMasks : String)
[  Сумма оборотов по дебету счетов #                                                                   ################ ](accountMasks, value);
    end;

    /**
     * Напечатать обороты по кредиту.
     *
     * @param     value  сумма оборотов по кредиту
     */
    macro printCreditTurns(value : Money, accountMasks : String)
[  Сумма оборотов по кредиту счетов #                                                                  ################ ](accountMasks, value);
    end;

    constructorTCalculationProtocolView1881(reportName);
end;

/**
 * Протокол расчета по 2332-У.
 */
class (TCalculationProtocolView1881) TCalculationProtocolView_2332(reportName)
    initTCalculationProtocolView1881("Отчет о наличном денежном обороте");
end;
