/*
$Name:          TDataSource.mac
$Module:        Регламентируемая отчетность
$Description:   Источники данных
*/

/*─────────────────────────────────────────────────────────────────────────────────────────────────┐
  RS-Bank V6                                                                        R-Style Softlab
  Файл подсистемы "Регламентируемая отчетность"

  Классы источника данных ФОР

  Создан: 20.04.2007 - Ser.
└─────────────────────────────────────────────────────────────────────────────────────────────────*/
/***************************************************************************************************
 *  Источник данных по балансовым счетам
 **************************************************************************************************/
class TBalanceDataSource(dataSourceFilter : Object, rowCode : String, applicationName : String, balanceGroup : String, isOnlyExistData : Bool, finInstr : Integer)

    private var m_balanceGroup     = balanceGroup;
    private var m_dataSourceFilter = dataSourceFilter;
    private var m_applicationName  = applicationName;
    private var m_rowCode          = rowCode;
    private var m_query            = "";
    private var m_isOnlyExistData  = isOnlyExistData;
    private var m_finInstr         = finInstr;

    private macro makeBalanceQuery(balanceField)
        var additionalCondition : String = "";
        var finInstrCondition   : String = "";

        if (m_finInstr == global.ROUBLE_ONLY)
            finInstrCondition = "t_isCurrency = CHR(0)";
        elif (m_finInstr == global.CURRENCY_ONLY)
            finInstrCondition = "t_isCurrency = 'X'";
        else
            finInstrCondition = "1 = 1";
        end;

        private var LAO_additionalCondition = "";
        if (m_isOnlyExistData)
            additionalCondition = "1 = 0";
            LAO_additionalCondition = additionalCondition;
        else
            additionalCondition = "1 = 1";
        end;

        var restField : String = "";

        if ((m_applicationName == "Приложение3") and global.parameters.isConversionOfCurrency())

            restField = "LEAST(NVL(rep_note.readForTrancheAmount(t_chapter, t_account, t_fiId, t_date - 1) * t_rate, t_rest * t_rate), t_rest * t_rate)";

        elif ((m_applicationName == "Приложение3") and not global.parameters.isConversionOfCurrency())

            restField = "LEAST(NVL(rep_note.readForTrancheAmount(t_chapter, t_account, t_fiId, t_date - 1) * t_rate, t_rest), t_rest)";

        elif (global.parameters.isConversionOfCurrency())

            restField = "t_rest * t_rate";
        else
            restField = "t_rest";
        end;

        var fforAccountInRestQuery = "SELECT account.*,"
            +"\n"+                   "       frd.t_date,"
            +"\n"+                   "       frd.t_rate,"
            +"\n"+                   "       DECODE(account.t_kind_account,  'П',  1,  -1) * NVL((SELECT repRestHist.t_rest"
            +"\n"+                   "                                                      FROM drepRestHist_tmp repRestHist"
            +"\n"+                   "                                                     WHERE repRestHist.t_accountId     = account.t_accountId"
            +"\n"+                   "                                                       AND repRestHist.t_restCurrency  = " + ternary(global.parameters.isConversionOfCurrency(), "account.t_fiId", "0")
            +"\n"+                   "                                                       AND repRestHist.t_restDate IN (SELECT MAX (rd.t_restDate)"
            +"\n"+                   "                                                                                          FROM drepRestHist_tmp rd"
            +"\n"+                   "                                                                                         WHERE rd.t_accountId     = account.t_accountId"
            +"\n"+                   "                                                                                           AND rd.t_restCurrency  = " + ternary(global.parameters.isConversionOfCurrency(), "account.t_fiId", "0")
            +"\n"+                   "                                                                                           AND rd.t_restDate  < frd.t_date)),  0) t_rest"
            +"\n"+                   "     FROM (SELECT account.*"
            +"\n"+                   "             FROM (SELECT ac.*,"
            +"\n"+                   "                          TO_CHAR(ac.t_chapter, 'FM0x') || TO_CHAR(ac.t_fiId, 'FM0xxxxxx') || ac.t_account AS t_accountObjectId,"
            +"\n"+                   "                          NVL((SELECT TO_NUMBER(linkedObjects.t_id)"
            +"\n"+                   "                                 FROM drepLinkedObjects_vw linkedObjects"
            +"\n"+                   "                                WHERE linkedObjects.t_connectObjectId = TO_CHAR(ac.t_chapter, 'FM0x') || TO_CHAR(ac.t_fiId, 'FM0xxxxxx') || ac.t_account"
            +"\n"+                   "                                  AND linkedObjects.t_connectObjectType = rep_const.get().cb.objectTypes.account"
            +"\n"+                   "                                  AND linkedObjects.t_type = rep_const.get().cb.objectTypes.party"
            +"\n"+                   "                                  AND linkedObjects.t_role = rep_const.get().cb.objectRoles.party.operationContragent"
            +"\n"+                   "                                  AND linkedObjects.t_isInstalledForEndDate = 1), t_clientCode)"
            +"\n"+                   "                          AS t_contractorId"
            +"\n"+                   "                     FROM dfforaccount_tmp ac) account"
            +"\n"+                   "            WHERE " + m_dataSourceFilter.getSqlFilter()
            +"\n"+                   "              AND rowNum > 0 --Делаем так для того, чтобы сначла был наложен фильтр на л/с и только потом джойн с датами"
            +"\n"+                   "              AND " + finInstrCondition + " ) account,"
            +"\n"+                   "          dfforRateDates_tmp frd"
            +"\n"+                   "    WHERE account.t_fiId = frd.t_fiId"
            +"\n"+                   "      AND " + m_dataSourceFilter.getSqlDateFilter();

        //LAO_additionalCondition
        if (LAO_additionalCondition != additionalCondition)
        m_query =  "SELECT /*+ PUSH_PRED(@subq1)*/   " + getSqlString(m_applicationName) + " t_applicationName, " + BOCB + " t_backOffice, " + getSqlString(m_rowCode) + " t_rowCode,"
            +"\n"+ "         " + balanceField + " t_balance, t_date, SUM(NVL(t_rest, 0)) t_rest, "
            +"\n"+ "         ROUND(SUM(NVL(t_rest, 0)) / " + rcbApplication.currentReport.multiplier + ") t_scaledRest, NVL(t_isCurrency, CHR(0)) t_isCurrency, "
            +"\n"+ "         " + getSqlString(m_balanceGroup) + " t_balanceGroup"
            +"\n"+ "    FROM (SELECT   t_balance, t_date, t_rate,"
            +"\n"+ "                   " + restField + " t_rest,"
            +"\n"+ "                   t_isCurrency"
            +"\n"+ "              FROM (" + fforAccountInRestQuery + ") account"
            +"\n"+ "          UNION ALL"
            +"\n"+ "          SELECT   t_balance, t_date, 1 t_rate, 0 t_rest, cur.t_isCurrency"
            +"\n"+ "              FROM dbalance_dbt , dffordates_tmp, (SELECT 'X' t_isCurrency FROM DUAL UNION ALL SELECT CHR(0) t_isCurrency FROM DUAL) cur"
            +"\n"+ "             WHERE " + additionalCondition
            +"\n"+ "               AND t_chapter = 1"
            +"\n"+ "               AND " + m_dataSourceFilter.isSatisfiesToBalancesMasks("t_balance") + ") account"
            +"\n"+ "GROUP BY t_balance, t_date, t_isCurrency";
        else
            m_query =  "SELECT /*+ PUSH_PRED(@subq1)*/ " + getSqlString(m_applicationName) + " t_applicationName, " + BOCB + " t_backOffice, " + getSqlString(m_rowCode) + " t_rowCode,"
            +"\n"+ "         " + balanceField + " t_balance, t_date, SUM(NVL(t_rest, 0)) t_rest, "
            +"\n"+ "         ROUND(SUM(NVL(t_rest, 0)) / " + rcbApplication.currentReport.multiplier + ") t_scaledRest, NVL(t_isCurrency, CHR(0)) t_isCurrency, "
            +"\n"+ "         " + getSqlString(m_balanceGroup) + " t_balanceGroup"
            +"\n"+ "    FROM (SELECT   t_balance, t_date, t_rate,"
            +"\n"+ "                   " + restField + " t_rest,"
            +"\n"+ "                   t_isCurrency"
            +"\n"+ "              FROM (" + fforAccountInRestQuery + ")) account"
            +"\n"+ "GROUP BY t_balance, t_date, t_isCurrency";
        end
        
    end;

    macro getQuery()
        return m_query;
    end;

    private macro getBalanceField()
        return "t_balance";
    end;

    makeBalanceQuery(getBalanceField());
end;

class TBalanceDataSource4090(dataSourceFilter1 : Object, dataSourceFilter2 : Object, rowCode : String, applicationName : String, balanceGroup : String, finInstr : Integer)

    private var m_balanceGroup     = balanceGroup;
    private var m_dataSourceFilter1 = dataSourceFilter1;
    private var m_dataSourceFilter2 = dataSourceFilter2;
    private var m_applicationName  = applicationName;
    private var m_rowCode          = rowCode;
    private var m_query            = "";
    private var m_finInstr         = finInstr;

    private macro makeBalanceQuery(balanceField)
        var additionalCondition : String = "";
        var finInstrCondition   : String = "";

        if (m_finInstr == global.ROUBLE_ONLY)
            finInstrCondition = "t_isCurrency = CHR(0)";
        elif (m_finInstr == global.CURRENCY_ONLY)
            finInstrCondition = "t_isCurrency = 'X'";
        else
            finInstrCondition = "1 = 1";
        end;

        var restField : String = "";

        if (global.parameters.isConversionOfCurrency())
            restField = "t_rest * t_rate";
        else
            restField = "t_rest";
        end;

        var fforAccountInRestQuery1 = "SELECT account.*,"
            +"\n"+                   "       frd.t_date,"
            +"\n"+                   "       frd.t_rate,"
            +"\n"+                   "       DECODE(account.t_kind_account,  'П',  1,  -1) * (SELECT repRestHist.t_rest"
            +"\n"+                   "                                                      FROM drepRestHist_tmp repRestHist"
            +"\n"+                   "                                                     WHERE repRestHist.t_accountId     = account.t_accountId"
            +"\n"+                   "                                                       AND repRestHist.t_restCurrency  = " + ternary(global.parameters.isConversionOfCurrency(), "account.t_fiId", "0")
            +"\n"+                   "                                                       AND repRestHist.t_restDate IN (SELECT MAX (rd.t_restDate)"
            +"\n"+                   "                                                                                          FROM drepRestHist_tmp rd"
            +"\n"+                   "                                                                                         WHERE rd.t_accountId     = account.t_accountId"
            +"\n"+                   "                                                                                           AND rd.t_restCurrency  = " + ternary(global.parameters.isConversionOfCurrency(), "account.t_fiId", "0")
            +"\n"+                   "                                                                                           AND rd.t_restDate  < frd.t_date)) t_rest"
            +"\n"+                   "     FROM (SELECT account.*"
            +"\n"+                   "             FROM (SELECT ac.*,"
            +"\n"+                   "                          TO_CHAR(ac.t_chapter, 'FM0x') || TO_CHAR(ac.t_fiId, 'FM0xxxxxx') || ac.t_account AS t_accountObjectId,"
            +"\n"+                   "                          NVL((SELECT TO_NUMBER(linkedObjects.t_id)"
            +"\n"+                   "                                 FROM drepLinkedObjects_vw linkedObjects"
            +"\n"+                   "                                WHERE linkedObjects.t_connectObjectId = TO_CHAR(ac.t_chapter, 'FM0x') || TO_CHAR(ac.t_fiId, 'FM0xxxxxx') || ac.t_account"
            +"\n"+                   "                                  AND linkedObjects.t_connectObjectType = rep_const.get().cb.objectTypes.account"
            +"\n"+                   "                                  AND linkedObjects.t_type = rep_const.get().cb.objectTypes.party"
            +"\n"+                   "                                  AND linkedObjects.t_role = rep_const.get().cb.objectRoles.party.operationContragent"
            +"\n"+                   "                                  AND linkedObjects.t_isInstalledForEndDate = 1), t_clientCode)"
            +"\n"+                   "                          AS t_contractorId"
            +"\n"+                   "                     FROM dfforaccount_tmp ac) account"
            +"\n"+                   "            WHERE " + m_dataSourceFilter1.getSqlFilter()
            +"\n"+                   "              AND rowNum > 0 --Делаем так для того, чтобы сначла был наложен фильтр на л/с и только потом джойн с датами"
            +"\n"+                   "              AND " + finInstrCondition + " ) account,"
            +"\n"+                   "          dfforRateDates_tmp frd"
            +"\n"+                   "    WHERE account.t_fiId = frd.t_fiId"
            +"\n"+                   "      AND " + m_dataSourceFilter1.getSqlDateFilter();

        var fforAccountInRestQuery2 ="SELECT account.*,"
            +"\n"+                   "       frd.t_date,"
            +"\n"+                   "       frd.t_rate,"
            +"\n"+                   "       DECODE(account.t_kind_account,  'П',  1,  -1) * (SELECT repRestHist.t_rest"
            +"\n"+                   "                                                      FROM drepRestHist_tmp repRestHist"
            +"\n"+                   "                                                     WHERE repRestHist.t_accountId     = account.t_accountId"
            +"\n"+                   "                                                       AND repRestHist.t_restCurrency  = " + ternary(global.parameters.isConversionOfCurrency(), "account.t_fiId", "0")
            +"\n"+                   "                                                       AND repRestHist.t_restDate IN (SELECT MAX (rd.t_restDate)"
            +"\n"+                   "                                                                                          FROM drepRestHist_tmp rd"
            +"\n"+                   "                                                                                         WHERE rd.t_accountId     = account.t_accountId"
            +"\n"+                   "                                                                                           AND rd.t_restCurrency  = " + ternary(global.parameters.isConversionOfCurrency(), "account.t_fiId", "0")
            +"\n"+                   "                                                                                           AND rd.t_restDate  < frd.t_date)) t_rest"
            +"\n"+                   "     FROM (SELECT account.*"
            +"\n"+                   "             FROM (SELECT ac.*,"
            +"\n"+                   "                          TO_CHAR(ac.t_chapter, 'FM0x') || TO_CHAR(ac.t_fiId, 'FM0xxxxxx') || ac.t_account AS t_accountObjectId,"
            +"\n"+                   "                          NVL((SELECT TO_NUMBER(linkedObjects.t_id)"
            +"\n"+                   "                                 FROM drepLinkedObjects_vw linkedObjects"
            +"\n"+                   "                                WHERE linkedObjects.t_connectObjectId = TO_CHAR(ac.t_chapter, 'FM0x') || TO_CHAR(ac.t_fiId, 'FM0xxxxxx') || ac.t_account"
            +"\n"+                   "                                  AND linkedObjects.t_connectObjectType = rep_const.get().cb.objectTypes.account"
            +"\n"+                   "                                  AND linkedObjects.t_type = rep_const.get().cb.objectTypes.party"
            +"\n"+                   "                                  AND linkedObjects.t_role = rep_const.get().cb.objectRoles.party.operationContragent"
            +"\n"+                   "                                  AND linkedObjects.t_isInstalledForEndDate = 1), t_clientCode)"
            +"\n"+                   "                          AS t_contractorId"
            +"\n"+                   "                     FROM dfforaccount_tmp ac) account"
            +"\n"+                   "            WHERE " + m_dataSourceFilter2.getSqlFilter()
            +"\n"+                   "              AND rowNum > 0 --Делаем так для того, чтобы сначла был наложен фильтр на л/с и только потом джойн с датами"
            +"\n"+                   "              AND " + finInstrCondition + " ) account,"
            +"\n"+                   "          dfforRateDates_tmp frd"
            +"\n"+                   "    WHERE account.t_fiId = frd.t_fiId"
            +"\n"+                   "      AND " + m_dataSourceFilter2.getSqlDateFilter();

        m_query =  "SELECT t_applicationName    t_applicationName,"
            +"\n"+ "       t_backOffice         t_backOffice,"
            +"\n"+ "       t_rowCode            t_rowCode,"
            +"\n"+ "       t_balance            t_balance,"
            +"\n"+ "       t_date               t_date,"
            +"\n"+ "       MIN(t_rest)          t_rest,"
            +"\n"+ "       MIN(t_scaledRest)    t_scaledRest,"
            +"\n"+ "       t_isCurrency         t_isCurrency,"
            +"\n"+ "       t_balanceGroup       t_balanceGroup"
            +"\n"+ "  FROM("
            +"\n"+ "SELECT  /*+ PUSH_PRED(@subq1)*/ " + getSqlString(m_applicationName) + " t_applicationName, " + BOCB + " t_backOffice, " + getSqlString(m_rowCode) + " t_rowCode,"
            +"\n"+ "         " + balanceField + " t_balance, t_date, SUM(t_rest) t_rest, "
            +"\n"+ "         ROUND(SUM(t_rest) / " + rcbApplication.currentReport.multiplier + ") t_scaledRest, NVL(t_isCurrency, CHR(0)) t_isCurrency, "
            +"\n"+ "         " + getSqlString(m_balanceGroup) + " t_balanceGroup"
            +"\n"+ "    FROM (SELECT   t_balance, t_date, t_rate,"
            +"\n"+ "                   " + restField + " t_rest,"
            +"\n"+ "                   t_isCurrency"
            +"\n"+ "              FROM (" + fforAccountInRestQuery1 + ") account"
            +"\n"+ "          UNION ALL"
            +"\n"+ "          SELECT   t_balance, t_date, 1 t_rate, 0 t_rest, cur.t_isCurrency"
            +"\n"+ "              FROM dbalance_dbt , dffordates_tmp, (SELECT 'X' t_isCurrency FROM DUAL UNION ALL SELECT CHR(0) t_isCurrency FROM DUAL) cur"
            +"\n"+ "             WHERE "
            +"\n"+ "               t_chapter = 1"
            +"\n"+ "               AND " + m_dataSourceFilter1.isSatisfiesToBalancesMasks("t_balance") + ") account"
            +"\n"+ "GROUP BY t_balance, t_date, t_isCurrency"
            +"\n"+ " UNION "
            +"\n"+ "SELECT /*+ PUSH_PRED(@subq1)*/  " + getSqlString(m_applicationName) + " t_applicationName, " + BOCB + " t_backOffice, " + getSqlString(m_rowCode) + " t_rowCode,"
            +"\n"+ "         " + balanceField + " t_balance, t_date, SUM(t_rest) t_rest, "
            +"\n"+ "         ROUND(SUM(t_rest) / " + rcbApplication.currentReport.multiplier + ") t_scaledRest, NVL(t_isCurrency, CHR(0)) t_isCurrency, "
            +"\n"+ "         " + getSqlString(m_balanceGroup) + " t_balanceGroup"
            +"\n"+ "    FROM (SELECT   t_balance, t_date, t_rate,"
            +"\n"+ "                   " + restField + " t_rest,"
            +"\n"+ "                   t_isCurrency"
            +"\n"+ "              FROM (" + fforAccountInRestQuery2 + ") account"
            +"\n"+ "          UNION ALL"
            +"\n"+ "          SELECT   t_balance, t_date, 1 t_rate, 0 t_rest, cur.t_isCurrency"
            +"\n"+ "              FROM dbalance_dbt , dffordates_tmp, (SELECT 'X' t_isCurrency FROM DUAL UNION ALL SELECT CHR(0) t_isCurrency FROM DUAL) cur"
            +"\n"+ "             WHERE "
            +"\n"+ "               t_chapter = 1"
            +"\n"+ "               AND " + m_dataSourceFilter2.isSatisfiesToBalancesMasks("t_balance") + ") account"
            +"\n"+ "GROUP BY t_balance, t_date, t_isCurrency)"
            +"\n"+ "GROUP BY t_applicationName, t_backOffice, t_rowCode, t_balance, t_date, t_isCurrency, t_balanceGroup";
    end;

    macro getQuery()
        return m_query;
    end;

    private macro getBalanceField()
        return "t_balance";
    end;

    makeBalanceQuery(getBalanceField());
end;

class TBalanceDataSource4090_Total(obj4090 : Object)
    private var m_query = obj4090.getQuery();
    var obj;
    var i = 2;

    while (getparm(i, obj))
        m_query = m_query
            + "\n" + " UNION ALL"
            + "\n" + obj.getQuery();
        i = i + 1;
    end;

        m_query =  "SELECT t_applicationName,"
            +"\n"+ "          t_backOffice,"
            +"\n"+ "          t_rowCode,"
            +"\n"+ "          t_balance,"
            +"\n"+ "          t_date,"
            +"\n"+ "          SUM(t_rest),"
            +"\n"+ "          SUM(t_scaledRest),"
            +"\n"+ "          t_isCurrency,"
            +"\n"+ "          t_balanceGroup"
            +"\n"+ "      FROM ( " 
            +"\n"+              m_query 
            +"\n"+ "           )"
            +"\n"+ "     GROUP BY t_applicationName, t_backOffice, t_rowCode, t_balance, t_date, t_isCurrency, t_balanceGroup";

    macro getQuery()
        return m_query;
    end;
end;

class TBalanceDataSource3042(dataSourceMinuedFilter : Object, dataSourceSubtrahendFilter : Object, rowCode : String, applicationName : String, balanceGroup : String, isOnlyExistData : Bool, finInstr : Integer)

    private var m_dataSourceMinuedFilter = dataSourceMinuedFilter;
    private var m_dataSourceSubtrahendFilter = dataSourceSubtrahendFilter;
    private var m_balanceGroup     = balanceGroup;
    private var m_applicationName  = applicationName;
    private var m_rowCode          = rowCode;
    private var m_queryMinued      = "";
    private var m_querySubtrahend  = "";
    private var m_query            = "";
    private var m_isOnlyExistData  = isOnlyExistData;
    private var m_finInstr         = finInstr;

    private macro makeBalanceQueryMinued(balanceField)
        var additionalCondition : String = "";
        var finInstrCondition   : String = "";

        if (m_finInstr == global.ROUBLE_ONLY)
            finInstrCondition = "t_isCurrency = CHR(0)";
        elif (m_finInstr == global.CURRENCY_ONLY)
            finInstrCondition = "t_isCurrency = 'X'";
        else
            finInstrCondition = "1 = 1";
        end;

        private var LAO_additionalCondition = "";
        if (m_isOnlyExistData)
            additionalCondition = "1 = 0";
            LAO_additionalCondition = additionalCondition;
        else
            additionalCondition = "1 = 1";
        end;

        var restField : String = "";

        if (global.parameters.isConversionOfCurrency())

            restField = "t_rest * t_rate";
        else
            restField = "t_rest";
        end;

        var fforAccountInRestQuery = "SELECT account.*,"
            +"\n"+                   "       frd.t_date,"
            +"\n"+                   "       frd.t_rate,"
            +"\n"+                   "       DECODE(account.t_kind_account,  'П',  1,  -1) * NVL((SELECT repRestHist.t_rest"
            +"\n"+                   "                                                      FROM drepRestHist_tmp repRestHist"
            +"\n"+                   "                                                     WHERE repRestHist.t_accountId     = account.t_accountId"
            +"\n"+                   "                                                       AND repRestHist.t_restCurrency  = " + ternary(global.parameters.isConversionOfCurrency(), "account.t_fiId", "0")
            +"\n"+                   "                                                       AND repRestHist.t_restDate IN (SELECT MAX (rd.t_restDate)"
            +"\n"+                   "                                                                                          FROM drepRestHist_tmp rd"
            +"\n"+                   "                                                                                         WHERE rd.t_accountId     = account.t_accountId"
            +"\n"+                   "                                                                                           AND rd.t_restCurrency  = " + ternary(global.parameters.isConversionOfCurrency(), "account.t_fiId", "0")
            +"\n"+                   "                                                                                           AND rd.t_restDate  < frd.t_date)),  0) t_rest"
            +"\n"+                   "     FROM (SELECT account.*"
            +"\n"+                   "             FROM (SELECT ac.*,"
            +"\n"+                   "                          TO_CHAR(ac.t_chapter, 'FM0x') || TO_CHAR(ac.t_fiId, 'FM0xxxxxx') || ac.t_account AS t_accountObjectId,"
            +"\n"+                   "                          NVL((SELECT TO_NUMBER(linkedObjects.t_id)"
            +"\n"+                   "                                 FROM drepLinkedObjects_vw linkedObjects"
            +"\n"+                   "                                WHERE linkedObjects.t_connectObjectId = TO_CHAR(ac.t_chapter, 'FM0x') || TO_CHAR(ac.t_fiId, 'FM0xxxxxx') || ac.t_account"
            +"\n"+                   "                                  AND linkedObjects.t_connectObjectType = rep_const.get().cb.objectTypes.account"
            +"\n"+                   "                                  AND linkedObjects.t_type = rep_const.get().cb.objectTypes.party"
            +"\n"+                   "                                  AND linkedObjects.t_role = rep_const.get().cb.objectRoles.party.operationContragent"
            +"\n"+                   "                                  AND linkedObjects.t_isInstalledForEndDate = 1), t_clientCode)"
            +"\n"+                   "                          AS t_contractorId"
            +"\n"+                   "                     FROM dfforaccount_tmp ac) account"
            +"\n"+                   "            WHERE " + m_dataSourceMinuedFilter.getSqlFilter()
            +"\n"+                   "              AND rowNum > 0 --Делаем так для того, чтобы сначла был наложен фильтр на л/с и только потом джойн с датами"
            +"\n"+                   "              AND " + finInstrCondition + " ) account,"
            +"\n"+                   "          dfforRateDates_tmp frd"
            +"\n"+                   "    WHERE account.t_fiId = frd.t_fiId"
            +"\n"+                   "      AND " + m_dataSourceMinuedFilter.getSqlDateFilter();
    if (LAO_additionalCondition != additionalCondition)
        m_queryMinued =  "SELECT  /*+ PUSH_PRED(@subq1)*/  " + getSqlString(m_applicationName) + " t_applicationName, " + BOCB + " t_backOffice, " + getSqlString(m_rowCode) + " t_rowCode,"
            +"\n"+ "         " + balanceField + " t_balance, t_date, SUM(NVL(t_rest, 0)) t_rest, "
            +"\n"+ "         ROUND(SUM(NVL(t_rest, 0)) / " + rcbApplication.currentReport.multiplier + ") t_scaledRest, NVL(t_isCurrency, CHR(0)) t_isCurrency, "
            +"\n"+ "         " + getSqlString(m_balanceGroup) + " t_balanceGroup"
            +"\n"+ "    FROM (SELECT   t_balance, t_date, t_rate,"
            +"\n"+ "                   " + restField + " t_rest,"
            +"\n"+ "                   t_isCurrency"
            +"\n"+ "              FROM (" + fforAccountInRestQuery + ") account"
            +"\n"+ "          UNION ALL"
            +"\n"+ "          SELECT   t_balance, t_date, 1 t_rate, 0 t_rest, cur.t_isCurrency"
            +"\n"+ "              FROM dbalance_dbt , dffordates_tmp, (SELECT 'X' t_isCurrency FROM DUAL UNION ALL SELECT CHR(0) t_isCurrency FROM DUAL) cur"
            +"\n"+ "             WHERE " + additionalCondition
            +"\n"+ "               AND t_chapter = 1"
            +"\n"+ "               AND " + m_dataSourceMinuedFilter.isSatisfiesToBalancesMasks("t_balance") + ") account"
            +"\n"+ "GROUP BY t_balance, t_date, t_isCurrency";
         else 
          m_queryMinued =  "SELECT /*+ PUSH_PRED(@subq1)*/ " + getSqlString(m_applicationName) + " t_applicationName, " + BOCB + " t_backOffice, " + getSqlString(m_rowCode) + " t_rowCode,"
            +"\n"+ "         " + balanceField + " t_balance, t_date, SUM(NVL(t_rest, 0)) t_rest, "
            +"\n"+ "         ROUND(SUM(NVL(t_rest, 0)) / " + rcbApplication.currentReport.multiplier + ") t_scaledRest, NVL(t_isCurrency, CHR(0)) t_isCurrency, "
            +"\n"+ "         " + getSqlString(m_balanceGroup) + " t_balanceGroup"
            +"\n"+ "    FROM (SELECT   t_balance, t_date, t_rate,"
            +"\n"+ "                   " + restField + " t_rest,"
            +"\n"+ "                   t_isCurrency"
            +"\n"+ "              FROM (" + fforAccountInRestQuery + ")) account"
            +"\n"+ "GROUP BY t_balance, t_date, t_isCurrency";
         
         end;         
    end;

    private macro makeBalanceQuerySubtrahend(balanceField)
        var additionalCondition : String = "";
        var finInstrCondition   : String = "";

        if (m_finInstr == global.ROUBLE_ONLY)
            finInstrCondition = "t_isCurrency = CHR(0)";
        elif (m_finInstr == global.CURRENCY_ONLY)
            finInstrCondition = "t_isCurrency = 'X'";
        else
            finInstrCondition = "1 = 1";
        end;

private var LAO_additionalCondition = "";
        if (m_isOnlyExistData)
            additionalCondition = "1 = 0";
            LAO_additionalCondition = additionalCondition;
        else
            additionalCondition = "1 = 1";
        end;

        var restField : String = "";

        if (global.parameters.isConversionOfCurrency())

            restField = "t_rest * t_rate";
        else
            restField = "t_rest";
        end;

        var fforAccountInRestQuery = "SELECT account.*,"
            +"\n"+                   "       frd.t_date,"
            +"\n"+                   "       frd.t_rate,"
            +"\n"+                   "       DECODE(account.t_kind_account,  'П',  1,  -1) * NVL((SELECT repRestHist.t_rest"
            +"\n"+                   "                                                      FROM drepRestHist_tmp repRestHist"
            +"\n"+                   "                                                     WHERE repRestHist.t_accountId     = account.t_accountId"
            +"\n"+                   "                                                       AND repRestHist.t_restCurrency  = " + ternary(global.parameters.isConversionOfCurrency(), "account.t_fiId", "0")
            +"\n"+                   "                                                       AND repRestHist.t_restDate IN (SELECT MAX (rd.t_restDate)"
            +"\n"+                   "                                                                                          FROM drepRestHist_tmp rd"
            +"\n"+                   "                                                                                         WHERE rd.t_accountId     = account.t_accountId"
            +"\n"+                   "                                                                                           AND rd.t_restCurrency  = " + ternary(global.parameters.isConversionOfCurrency(), "account.t_fiId", "0")
            +"\n"+                   "                                                                                           AND rd.t_restDate  < frd.t_date)),  0) t_rest"
            +"\n"+                   "     FROM (SELECT account.*"
            +"\n"+                   "             FROM (SELECT ac.*,"
            +"\n"+                   "                          TO_CHAR(ac.t_chapter, 'FM0x') || TO_CHAR(ac.t_fiId, 'FM0xxxxxx') || ac.t_account AS t_accountObjectId,"
            +"\n"+                   "                          NVL((SELECT TO_NUMBER(linkedObjects.t_id)"
            +"\n"+                   "                                 FROM drepLinkedObjects_vw linkedObjects"
            +"\n"+                   "                                WHERE linkedObjects.t_connectObjectId = TO_CHAR(ac.t_chapter, 'FM0x') || TO_CHAR(ac.t_fiId, 'FM0xxxxxx') || ac.t_account"
            +"\n"+                   "                                  AND linkedObjects.t_connectObjectType = rep_const.get().cb.objectTypes.account"
            +"\n"+                   "                                  AND linkedObjects.t_type = rep_const.get().cb.objectTypes.party"
            +"\n"+                   "                                  AND linkedObjects.t_role = rep_const.get().cb.objectRoles.party.operationContragent"
            +"\n"+                   "                                  AND linkedObjects.t_isInstalledForEndDate = 1), t_clientCode)"
            +"\n"+                   "                          AS t_contractorId"
            +"\n"+                   "                     FROM dfforaccount_tmp ac) account"
            +"\n"+                   "            WHERE " + m_dataSourceSubtrahendFilter.getSqlFilter()
            +"\n"+                   "              AND rowNum > 0 --Делаем так для того, чтобы сначла был наложен фильтр на л/с и только потом джойн с датами"
            +"\n"+                   "              AND " + finInstrCondition + " ) account,"
            +"\n"+                   "          dfforRateDates_tmp frd"
            +"\n"+                   "    WHERE account.t_fiId = frd.t_fiId"
            +"\n"+                   "      AND " + m_dataSourceSubtrahendFilter.getSqlDateFilter();
if (additionalCondition!=LAO_additionalCondition)
        m_querySubtrahend =  "SELECT  /*+ PUSH_PRED(@subq1)*/ " + getSqlString(m_applicationName) + " t_applicationName, " + BOCB + " t_backOffice, " + getSqlString(m_rowCode) + " t_rowCode,"
            +"\n"+ "         " + balanceField + " t_balance, t_date, SUM(NVL(t_rest, 0)) t_rest, "
            +"\n"+ "         ROUND(SUM(NVL(t_rest, 0)) / " + rcbApplication.currentReport.multiplier + ") t_scaledRest, NVL(t_isCurrency, CHR(0)) t_isCurrency, "
            +"\n"+ "         " + getSqlString(m_balanceGroup) + " t_balanceGroup"
            +"\n"+ "    FROM (SELECT   t_balance, t_date, t_rate,"
            +"\n"+ "                   " + restField + " t_rest,"
            +"\n"+ "                   t_isCurrency"
            +"\n"+ "              FROM (" + fforAccountInRestQuery + ") account"
            +"\n"+ "          UNION ALL"
            +"\n"+ "          SELECT   t_balance, t_date, 1 t_rate, 0 t_rest, cur.t_isCurrency"
            +"\n"+ "              FROM dbalance_dbt , dffordates_tmp, (SELECT 'X' t_isCurrency FROM DUAL UNION ALL SELECT CHR(0) t_isCurrency FROM DUAL) cur"
            +"\n"+ "             WHERE " + additionalCondition
            +"\n"+ "               AND t_chapter = 1"
            +"\n"+ "               AND " + m_dataSourceSubtrahendFilter.isSatisfiesToBalancesMasks("t_balance") + ") account"
            +"\n"+ "GROUP BY t_balance, t_date, t_isCurrency";
            else
                 m_querySubtrahend =  "SELECT /*+ PUSH_PRED(@subq1)*/  " + getSqlString(m_applicationName) + " t_applicationName, " + BOCB + " t_backOffice, " + getSqlString(m_rowCode) + " t_rowCode,"
            +"\n"+ "         " + balanceField + " t_balance, t_date, SUM(NVL(t_rest, 0)) t_rest, "
            +"\n"+ "         ROUND(SUM(NVL(t_rest, 0)) / " + rcbApplication.currentReport.multiplier + ") t_scaledRest, NVL(t_isCurrency, CHR(0)) t_isCurrency, "
            +"\n"+ "         " + getSqlString(m_balanceGroup) + " t_balanceGroup"
            +"\n"+ "    FROM (SELECT   t_balance, t_date, t_rate,"
            +"\n"+ "                   " + restField + " t_rest,"
            +"\n"+ "                   t_isCurrency"
            +"\n"+ "              FROM (" + fforAccountInRestQuery + ")) account"
            +"\n"+ "GROUP BY t_balance, t_date, t_isCurrency";
            end;
    end;

    macro getQuery()
        return m_query;
    end;

    private macro getBalanceField()
        return "t_balance";
    end;

    makeBalanceQueryMinued(getBalanceField());
    makeBalanceQuerySubtrahend(getBalanceField());
end;

/***************************************************************************************************
 *  Источник данных по расшифровкам
 **************************************************************************************************/
class (TBalanceDataSource) TDecodingDataSource(dataSourceFilter : Object, rowCode : String, applicationName : String, decodingName : String, isOnlyExistData : Bool, finInstr : Integer)
    private var m_decodingName = decodingName;

    private macro getBalanceField()
        return getSqlString(m_decodingName);
    end;

    initTBalanceDataSource(dataSourceFilter, rowCode, applicationName, "расшифровка", isOnlyExistData, finInstr);
end;

/* П2_3_2_409011 П2_3_2_409021 */
class (TBalanceDataSource4090) TDecodingDataSource4090(dataSourceFilter1 : Object, dataSourceFilter2 : Object, rowCode : String, applicationName : String, decodingName : String, finInstr : Integer)
    private var m_decodingName = decodingName;

    private macro getBalanceField()
        return getSqlString(m_decodingName);
    end;

    initTBalanceDataSource4090(dataSourceFilter1, dataSourceFilter2, rowCode, applicationName, "расшифровка", finInstr);
end;

/***************************************************************************************************
 *  Источник данных по расшифровкам для групп балансовых счетов
 **************************************************************************************************/
class (TBalanceDataSource) TBalanceDecodingDataSource(dataSourceFilter : Object, rowCode : String, applicationName : String, balanceSuffix : String, balanceGroup : String, isOnlyExistData : Bool, finInstr : Integer)
    private var m_balanceSuffix = balanceSuffix;

    private macro getBalanceField()
        return "t_balance || " + getSqlString(m_balanceSuffix);
    end;

    initTBalanceDataSource(dataSourceFilter, rowCode, applicationName, nvl(balanceGroup, "Расш"), isOnlyExistData, finInstr);
end;

/***************************************************************************************************
 *  Источник данных по расшифровкам, получаемых, как разность остатков на балансовых
 **************************************************************************************************/
class (TBalanceDataSource) TDecodingDifferenceDataSource(dataSourceFilter : Object, rowCode : String, applicationName : String,
                                                         decodingName : String, minuedBalance : String, subtrahendBalance : String)

    private var m_decodingName      = decodingName;
    private var m_minuedBalance     = minuedBalance;
    private var m_subtrahendBalance = subtrahendBalance;

    private macro makeDifferenceQuery(balanceField : String)
        var minuedSource     = "(SELECT * FROM (" + m_query + ") WHERE SUBSTR(t_balance, 1, 5) = SUBSTR(" + getSqlString(m_minuedBalance) + ", 1, 5))";
        var subtrahendSource = "(SELECT * FROM (" + m_query + ") WHERE SUBSTR(t_balance, 1, 5) = SUBSTR(" + getSqlString(m_subtrahendBalance) + ", 1, 5))";

        var balanceGroupField = "";

        if (m_balanceGroup != null)
            balanceGroupField = getSqlString(m_balanceGroup);
        else
            balanceGroupField = "NVL(minued.t_balanceGroup, subtrahend.t_balanceGroup)";
        end;

        m_query =  "SELECT NVL(minued.t_applicationName, subtrahend.t_applicationName) t_applicationName,"
            +"\n"+ "       NVL(minued.t_backOffice, subtrahend.t_backOffice) t_backOffice,"
            +"\n"+ "       NVL(minued.t_rowCode, subtrahend.t_rowCode) t_rowCode,"
            +"\n"+ "       " + balanceField + " t_balance,"
            +"\n"+ "       NVL(minued.t_date, subtrahend.t_date) t_date,"
            +"\n"+ "       (NVL(minued.t_rest, 0) - NVL(subtrahend.t_rest, 0)) t_rest,"
            +"\n"+ "       (NVL(minued.t_scaledRest, 0) - NVL(subtrahend.t_scaledRest, 0)) t_scaledRest,"
            +"\n"+ "       NVL(minued.t_isCurrency, subtrahend.t_isCurrency) t_isCurrency,"
            +"\n"+ "       " + balanceGroupField + " t_balanceGroup"
            +"\n"+ "  FROM " + minuedSource + " minued FULL OUTER JOIN " + subtrahendSource + " subtrahend"
            +"\n"+ "                                                ON  minued.t_date        = subtrahend.t_date"
            +"\n"+ "                                               AND  minued.t_isCurrency  = subtrahend.t_isCurrency";
    end;

    initTBalanceDataSource(dataSourceFilter, rowCode, applicationName, "расшифровка");

    makeDifferenceQuery(m_decodingName);
end;

/* П2_3___304211 П2_3___304231 */
class (TBalanceDataSource3042) TDecodingDifferenceDataSource3042(dataSourceMinuedFilter : Object, dataSourceSubtrahendFilter : Object,
                                                                 rowCode : String, applicationName : String, decodingName : String,
                                                                 deductibleBalanceId : TBalanceId)

    private var m_decodingName;
    private var m_deductibleBalanceId;

        macro getQueryForDeductible(balanceId : TBalanceId, isScaled)
            var subtrahendBalance : String = "";
            var restField         : String = "";

            if (isScaled)
                restField = "t_scaledRest";
            else
                restField = "t_rest";
            end;

            if (balanceId.getNumber() == NULL)
                subtrahendBalance = "subtrahend.t_balance";
            else
                subtrahendBalance = getSqlString(balanceId.getNumber());
            end;

            var query = " NVL (( SELECT subtrahend." + restField
                +"\n"+  "          FROM dffor_tmp subtrahend"
                +"\n"+  "         WHERE subtrahend.t_applicationName = " + getSqlString(balanceId.getApplicationName())
                +"\n"+  "           AND subtrahend.t_row             = " + getSqlString(balanceId.getApplicationRowCode())
                +"\n"+  "           AND subtrahend.t_balanceGroup    = " + getSqlString(balanceId.getGroup())
                +"\n"+  "           AND subtrahend.t_balance         = " + subtrahendBalance
                +"\n"+  "           AND subtrahend.t_isCurrency      = minued.t_isCurrency"
                +"\n"+  "           AND subtrahend.t_date            = minued.t_date), 0 ) ";
            return query;
        end;

    private macro makeDifferenceQuery(balanceField : String)
        var minuedSource     = "(SELECT                     t_applicationName t_applicationName,"
                        + "\n" + "                          sum(t_rest) t_rest,                 "
                        + "\n" + "                          sum(t_scaledRest) t_scaledRest,     "
                        + "\n" + "                          t_backOffice t_backOffice,          "
                        + "\n" + "                          t_rowCode t_rowCode,                "
                        + "\n" +         m_decodingName + " t_balance,                          "
                        + "\n" + "                          t_date t_date,                      "
                        + "\n" + "                          t_isCurrency t_isCurrency,          "
                        + "\n" + "                          t_balanceGroup t_balanceGroup       "
                        + "\n" + "  FROM (" + m_queryMinued + ")"
                        + "\n" + "  WHERE " + m_dataSourceMinuedFilter.isSatisfiesToBalancesMasks("t_balance")
                        + "\n" + "  GROUP BY t_applicationName,t_backOffice,t_rowCode,t_date,t_isCurrency,t_balanceGroup)";

        var subtrahendSource     = "(SELECT                 t_applicationName t_applicationName,"
                        + "\n" + "                          sum(t_rest) t_rest,                 "
                        + "\n" + "                          sum(t_scaledRest) t_scaledRest,     "
                        + "\n" + "                          t_backOffice t_backOffice,          "
                        + "\n" + "                          t_rowCode t_rowCode,                "
                        + "\n" +         m_decodingName + " t_balance,                          "
                        + "\n" + "                          t_date t_date,                      "
                        + "\n" + "                          t_isCurrency t_isCurrency,          "
                        + "\n" + "                          t_balanceGroup t_balanceGroup       "
                        + "\n" + "  FROM (" + m_querySubtrahend + ")"
                        + "\n" + "  WHERE " + m_dataSourceSubtrahendFilter.isSatisfiesToBalancesMasks("t_balance")
                        + "\n" + "  GROUP BY t_applicationName,t_backOffice,t_rowCode,t_date,t_isCurrency,t_balanceGroup)";

        var balanceGroupField = "";

        if (m_balanceGroup != null)
            balanceGroupField = getSqlString(m_balanceGroup);
        else
            balanceGroupField = "NVL(minued.t_balanceGroup, subtrahend.t_balanceGroup)";
        end;

        var deductibleQuery = "";

        if (m_deductibleBalanceId.size > 0)
            var i : Integer = 0;
            var deductibleQueryScaled = "";

            while (i < m_deductibleBalanceId.size)
                deductibleQuery = deductibleQuery + "\n + \n" + getQueryForDeductible(m_deductibleBalanceId[i], false);
                deductibleQueryScaled = deductibleQueryScaled + "\n + \n" + getQueryForDeductible(m_deductibleBalanceId[i], true);
                i = i + 1;
            end;
            deductibleQuery = " - ( " + deductibleQuery + " ) ";
        end;

        m_query =  "SELECT NVL(minued.t_applicationName, subtrahend.t_applicationName) t_applicationName,"
            +"\n"+ "       NVL(minued.t_backOffice, subtrahend.t_backOffice) t_backOffice,"
            +"\n"+ "       NVL(minued.t_rowCode, subtrahend.t_rowCode) t_rowCode,"
            +"\n"+ "       " + balanceField + " t_balance,"
            +"\n"+ "       NVL(minued.t_date, subtrahend.t_date) t_date,"
            +"\n"+ "       (NVL(minued.t_rest, 0) - NVL(subtrahend.t_rest, 0))" + deductibleQuery + " t_rest,"
            +"\n"+ "       (NVL(minued.t_scaledRest, 0) - NVL(subtrahend.t_scaledRest, 0))" + deductibleQueryScaled + " t_scaledRest,"
            +"\n"+ "       NVL(minued.t_isCurrency, subtrahend.t_isCurrency) t_isCurrency,"
            +"\n"+ "       " + balanceGroupField + " t_balanceGroup"
            +"\n"+ "  FROM " + minuedSource + " minued FULL OUTER JOIN " + subtrahendSource + " subtrahend"
            +"\n"+ "                                                ON  minued.t_date        = subtrahend.t_date"
            +"\n"+ "                                               AND  minued.t_isCurrency  = subtrahend.t_isCurrency";
    end;

    initTBalanceDataSource3042(dataSourceMinuedFilter, dataSourceSubtrahendFilter, rowCode, applicationName, "расшифровка");

    m_decodingName = decodingName;
    m_deductibleBalanceId = TArray();

    var i = 6;
    var balance;

    while (getparm(i, balance))
        m_deductibleBalanceId[m_deductibleBalanceId.size] = balance;
        i = i + 1;
    end;

    makeDifferenceQuery(m_decodingName);
end;

/***************************************************************************************************
 *  Базовый класс источника данных для контроля исходных данных.
 **************************************************************************************************/
class TBaseInputControlDataSource()
    private var m_tuneTable;

    private var m_tuneTableFilter;

    private macro initialize()
        m_tuneTable = TFORTuneTable();

        m_tuneTable.setInstructionFilter(global.parameters.getEndDate());

        m_tuneTable.setConstFilter(m_tuneTableFilter);
    end;

    private macro getQerry()
        throw(TPureVirtualMethodCallException("TBaseInputControlDataSource::getQerry"));
    end;


    macro getDataSet()
        return TRsbDataSet(getQerry());
    end;

    initialize();
end;



/***************************************************************************************************
 *  Источник данных для контроля исходных данных. Приложение 2.
 **************************************************************************************************/
class (TBaseInputControlDataSource) TInputControlForApplication2DataSource()

    m_tuneTableFilter = "t_applicationName = 'Приложение2' AND (t_row = '2' OR t_row = '2(1)' OR t_row = '2(2)')";

    private macro getQerry()
        return      "WITH repcategory AS (SELECT *"
            +"\n"+ "                        FROM drepcategory_vw"
            +"\n"+ "                       WHERE t_id = 1"
            +"\n"+ "                         AND t_isforaccount =1"
            +"\n"+ "                         AND t_isinstalledoverperiod = 1)"
            +"\n"+ "        SELECT *"
            +"\n"+ "          FROM (SELECT repaccount.t_account,"
            +"\n"+ "                       '2' t_row,"
            +"\n"+ "                       'Категория л/с \"Категория для отчетности / Для ФОР / Счет включен в расчет строки 2.2. Приложения 2\", значение \"Строка 2.2\"' t_value"
            +"\n"+ "                  FROM drepaccount_vw repaccount,"
            +"\n"+ "                       repcategory"
            +"\n"+ "                 WHERE (" + convertMaskToSqlFormat(m_tuneTable.getMasks(),"repaccount.t_balance") +  ")"
            +"\n"+ "                   AND repaccount.t_objectid = repcategory.t_objectid"
            +"\n"+ "                   AND repcategory.t_value = 'Строка 2.2'"
            +"\n"+ "                   AND repaccount.t_isopened = 1"
            +"\n"+ "                 UNION"
            +"\n"+ "                 SELECT repaccount.t_account,"
            +"\n"+ "                       '3' t_row,"
            +"\n"+ "                       CASE"
            +"\n"+ "                            WHEN repcategory.t_value = 'F'"
            +"\n"+ "                            THEN 'Категория л/с \"Категория для отчетности / Для ФОР /  Счет включается в расчет расшифровки 603221\", значение \"F\"'"
            +"\n"+ "                            WHEN repcategory.t_value = 'E'"
            +"\n"+ "                            THEN 'Категория л/с \"Категория для отчетности / Для ФОР /  Счет включается в расчет расшифровки 603222\", значение \"E\"'"
            +"\n"+ "                            ELSE 'Категория л/с \"Категория для отчетности / Для ФОР /  Счет включается в расчет расшифровки 603223\", значение \"A\"'"
            +"\n"+ "                       END t_value"
            +"\n"+ "                  FROM drepaccount_vw repaccount,"
            +"\n"+ "                       repcategory"
            +"\n"+ "                 WHERE repaccount.t_balance LIKE '60322%'"
            +"\n"+ "                   AND repaccount.t_objectid = repcategory.t_objectid"
            +"\n"+ "                   AND (repcategory.t_value = 'F' OR repcategory.t_value = 'E' OR repcategory.t_value = 'A')"
            +"\n"+ "                   AND repaccount.t_isopened = 1"
            +"\n"+ "                 UNION"
            +"\n"+ "                 SELECT repaccount.t_account,"
            +"\n"+ "                       '3.2' t_row,"
            +"\n"+ "                       'Категория л/с \"Категория для отчетности / Для ФОР / Счет исключается из расчета ФОР\", значение \"R\"'  t_value"
            +"\n"+ "                  FROM drepaccount_vw repaccount,"
            +"\n"+ "                       repcategory"
            +"\n"+ "                 WHERE (repaccount.t_balance LIKE '40312%' OR repaccount.t_balance LIKE '47409%')"
            +"\n"+ "                   AND repaccount.t_objectid = repcategory.t_objectid"
            +"\n"+ "                   AND repcategory.t_value = 'R'"
            +"\n"+ "                   AND repaccount.t_isopened = 1"
            +"\n"+ "                 UNION"
            +"\n"+ "                 SELECT repaccount.t_account,"
            +"\n"+ "                       '3.2' t_row,"
            +"\n"+ "                       'Категория л/с \"Категория для отчетности / Для ФОР / Без досрочного погашения\", значение \"D\"' t_value"
            +"\n"+ "                  FROM drepaccount_vw repaccount,"
            +"\n"+ "                       repcategory"
            +"\n"+ "                 WHERE (repaccount.t_balance LIKE '52005%' OR repaccount.t_balance LIKE '52006%')"
            +"\n"+ "                   AND repaccount.t_objectid = repcategory.t_objectid"
            +"\n"+ "                   AND repcategory.t_value = 'D'"
            +"\n"+ "                   AND repaccount.t_isopened = 1)"
            +"\n"+ "      ORDER BY t_row, t_account, t_value";
    end;

    initTBaseInputControlDataSource();
end;

/***************************************************************************************************
 *  Источник данных для контроля исходных данных. Приложение 2. По 2963-У.
 **************************************************************************************************/
class (TBaseInputControlDataSource) TInputControlForApplication2DataSourceI2963()

    m_tuneTableFilter = "t_applicationName = 'Приложение2' AND (t_row = '2' OR t_row = '2(1)' OR t_row = '2(2)')";

    private macro getQerry()
        return      "WITH repcategory AS (SELECT *"
            +"\n"+ "                        FROM drepcategory_vw"
            +"\n"+ "                       WHERE t_id = 1"
            +"\n"+ "                         AND t_isforaccount =1"
            +"\n"+ "                         AND t_isinstalledoverperiod = 1),"
            +"\n"+ "      repkind AS (SELECT *"
            +"\n"+ "                      FROM drepcategory_vw"
            +"\n"+ "                       WHERE t_id = 2"
            +"\n"+ "                         AND t_isforaccount =1"
            +"\n"+ "                         AND t_isinstalledoverperiod = 1)"
            +"\n"+ "        SELECT *"
            +"\n"+ "          FROM (SELECT repaccount.t_account,"
            +"\n"+ "                       '2' t_row,"
            +"\n"+ "                       'Категория л/с \"Категория для отчетности / Для ФОР / Счет включен в расчет строки 2.2. Приложения 2\"' t_category,"
            +"\n"+ "                       repcategory.t_value t_value,"
            +"\n"+ "                       repcategory.t_validFromDate t_fromDate,"
            +"\n"+ "                       repcategory.t_validToDate t_toDate"
            +"\n"+ "                  FROM drepaccount_vw repaccount,"
            +"\n"+ "                       repcategory"
            +"\n"+ "                 WHERE (" + convertMaskToSqlFormat(m_tuneTable.getMasks(),"repaccount.t_balance") +  ")"
            +"\n"+ "                   AND repaccount.t_objectid = repcategory.t_objectid"
            +"\n"+ "                   AND repcategory.t_value = 'Строка 2.2'"
            +"\n"+ "                   AND repaccount.t_isopened = 1"
            +"\n"+ "                 UNION"
            +"\n"+ "                 SELECT repaccount.t_account,"
            +"\n"+ "                       '3' t_row,"
            +"\n"+ "                       CASE"
            +"\n"+ "                            WHEN repcategory.t_value = 'G'"
            +"\n"+ "                            THEN 'Категория л/с \"Категория для отчетности / Для ФОР / Счет включается в расчет расшифровки 603224\"'"
            +"\n"+ "                            WHEN repcategory.t_value = 'F'"
            +"\n"+ "                            THEN 'Категория л/с \"Категория для отчетности / Для ФОР / Счет включается в расчет расшифровки 603221\"'"
            +"\n"+ "                            WHEN repcategory.t_value = 'E'"
            +"\n"+ "                            THEN 'Категория л/с \"Категория для отчетности / Для ФОР / Счет включается в расчет расшифровки 603222\"'"
            +"\n"+ "                            ELSE 'Категория л/с \"Категория для отчетности / Для ФОР / Счет включается в расчет расшифровки 603223\"'"
            +"\n"+ "                       END t_category,"
            +"\n"+ "                       repcategory.t_value t_value,"
            +"\n"+ "                       repcategory.t_validFromDate t_fromDate,"
            +"\n"+ "                       repcategory.t_validToDate t_toDate"
            +"\n"+ "                  FROM drepaccount_vw repaccount,"
            +"\n"+ "                       repcategory"
            +"\n"+ "                 WHERE repaccount.t_balance LIKE '60322%'"
            +"\n"+ "                   AND repaccount.t_objectid = repcategory.t_objectid"
            +"\n"+ "                   AND (repcategory.t_value = 'G' OR repcategory.t_value = 'F' OR repcategory.t_value = 'E' OR repcategory.t_value = 'A')"
            +"\n"+ "                   AND repaccount.t_isopened = 1"
            +"\n"+ "                 UNION"
            +"\n"+ "                 SELECT repaccount.t_account,"
            +"\n"+ "                       '3.2' t_row,"
            +"\n"+ "                       'Категория л/с \"Категория для отчетности / Для ФОР / Счет исключается из расчета ФОР\". Счет включается в расчет расшифровки 403121'  t_category,"
            +"\n"+ "                       repcategory.t_value t_value,"
            +"\n"+ "                       repcategory.t_validFromDate t_fromDate,"
            +"\n"+ "                       repcategory.t_validToDate t_toDate"
            +"\n"+ "                  FROM drepaccount_vw repaccount,"
            +"\n"+ "                       repcategory"
            +"\n"+ "                 WHERE (repaccount.t_balance LIKE '40312%')"
            +"\n"+ "                   AND repaccount.t_objectid = repcategory.t_objectid"
            +"\n"+ "                   AND repcategory.t_value = 'R'"
            +"\n"+ "                   AND repaccount.t_isopened = 1"
            +"\n"+ "                 UNION"
            +"\n"+ "                 SELECT repaccount.t_account,"
            +"\n"+ "                       '3.2' t_row,"
            +"\n"+ "                       'Категория л/с \"Вид\"'  t_category,"
            +"\n"+ "                       repkind.t_value t_value,"
            +"\n"+ "                       repkind.t_validFromDate t_fromDate,"
            +"\n"+ "                       repkind.t_validToDate t_toDate"
            +"\n"+ "                  FROM drepaccount_vw repaccount,"
            +"\n"+ "                       repkind"
            +"\n"+ "                 WHERE (repaccount.t_balance LIKE '40901%' OR repaccount.t_balance LIKE '40902%')"
            +"\n"+ "                   AND repaccount.t_objectid = repkind.t_objectid"
            +"\n"+ "                   AND repkind.t_value = 'ПА'"
            +"\n"+ "                   AND repaccount.t_isopened = 1"
            +"\n"+ "                 UNION"
            +"\n"+ "                 SELECT repaccount.t_account,"
            +"\n"+ "                       '3.2' t_row,"
            +"\n"+ "                       'Категория л/с \"Категория для отчетности / Для ФОР / Без досрочного погашения\"' t_category,"
            +"\n"+ "                       repcategory.t_value t_value,"
            +"\n"+ "                       repcategory.t_validFromDate t_fromDate,"
            +"\n"+ "                       repcategory.t_validToDate t_toDate"
            +"\n"+ "                  FROM drepaccount_vw repaccount,"
            +"\n"+ "                       repcategory"
            +"\n"+ "                 WHERE (repaccount.t_balance LIKE '52005%' OR repaccount.t_balance LIKE '52006%')"
            +"\n"+ "                   AND repaccount.t_objectid = repcategory.t_objectid"
            +"\n"+ "                   AND repcategory.t_value = 'D'"
            +"\n"+ "                   AND repaccount.t_isopened = 1)"
            +"\n"+ "      ORDER BY t_row, t_account, t_category, t_fromDate";
    end;

    initTBaseInputControlDataSource();
end;

/***************************************************************************************************
 *  Источник данных для контроля исходных данных. Приложение 3.
 **************************************************************************************************/
class (TBaseInputControlDataSource) TInputControlForApplication3DataSource()

    /**
     * Тип объекта: лицевой счет.
     */
    const OBJTYPE_ACCOUNT = 4;

    /**
     * Вид примечания: Дата погашения.
     */
    const NOTEKIND_MATURITY_DATE = 16;

    /**
     * Вид примечания: Дата частичного погашения.
     */
    const NK_PARTIAL_REPAYMENT_DATE = 38;

    /**
     * Вид примечания: Дата досрочного расторжения.
     */
    const ANTICIPATORY_REPUDIATION_DATE = 36;

    /**
     * Вид примечания: Дата оплаты акций.
     */
    const NOTEKIND_PAYING_SHARES_DATE = 37;

    /**
     * Вид примечания: Сумма транша для Приложения 3 ФОР.
     */
    const NOTEKIND_FOR_TRANCHE_AMOUNT = 33;

    m_tuneTableFilter =  "t_applicationName = 'Приложение3' AND (t_row = '1.1' OR t_row = '1.3')";

    private macro getQerry()
        return     "SELECT * FROM ("
            +"\n"+ "    SELECT repAccount_.t_account AS t_account,"
            +"\n"+ "           '1' t_row,"
            +"\n"+ "           'Категория л/с \"Категория для отчетности / Для формы 134 / Субординированный кредит\"' t_category,"
            +"\n"+ "           subordinatedCredit.t_validFromDate t_fromDate,"
            +"\n"+ "           subordinatedCredit.t_validToDate t_toDate,"
            +"\n"+ "           subordinatedCredit.t_value t_value,"
            +"\n"+ "           TO_DATE('01.01.0001','DD.MM.YYYY') t_valueDate,"
            +"\n"+ "           0 t_valueMoney,"
            +"\n"+ "           1 t_valueType"
            +"\n"+ "      FROM dRepAccount_vw repAccount_,"
            +"\n"+ "           -- Категория л/с \"Категория для отчетности / Для формы 134 / Субординированный кредит\""
            +"\n"+ "           (SELECT *"
            +"\n"+ "              FROM drepcategory_vw"
            +"\n"+ "             WHERE t_id = 1"
            +"\n"+ "               AND t_isforaccount =1"
            +"\n"+ "               AND t_isinstalledoverperiod = 1"
            +"\n"+ "               AND t_value = 'СубКредит') subordinatedCredit"
            +"\n"+ "     WHERE (" + convertMaskToSqlFormat(m_tuneTable.getMasks(),"repaccount_.t_balance") +  ")"
            +"\n"+ "       AND repAccount_.t_isOpened = 1"
            +"\n"+ "       AND subordinatedCredit.t_objectId(+) = repAccount_.t_objectId"
            +"\n"+ "       AND (subordinatedCredit.t_value IS NOT NULL)"
            +"\n"+ "    UNION ALL"
            +"\n"+ "    SELECT repAccount_.t_account AS t_account,"
            +"\n"+ "           '1' t_row,"
            +"\n"+ "           'Категория л/с \"Категория для отчетности / Для ФОР / Договор расторгнут  в соотв. с абз. 5 - 8 п. 2.1.4 342-П\"' t_category,"
            +"\n"+ "           repudiationCredit.t_validFromDate t_fromDate,"
            +"\n"+ "           repudiationCredit.t_validToDate t_toDate,"
            +"\n"+ "           repudiationCredit.t_value t_value,"
            +"\n"+ "           TO_DATE('01.01.0001','DD.MM.YYYY') t_valueDate,"
            +"\n"+ "           0 t_valueMoney,"
            +"\n"+ "           1 t_valueType"
            +"\n"+ "      FROM dRepAccount_vw repAccount_,"
            +"\n"+ "           -- Категория л/с \"Категория для отчетности / Для ФОР / Договор расторгнут  в соотв. с абз. 5 - 8 п. 2.1.4 342-П\""
            +"\n"+ "           (SELECT *"
            +"\n"+ "              FROM drepcategory_vw"
            +"\n"+ "             WHERE t_id = 1"
            +"\n"+ "               AND t_isforaccount =1"
            +"\n"+ "               AND t_isinstalledoverperiod = 1"
            +"\n"+ "               AND t_value = 'ДР') repudiationCredit"
            +"\n"+ "     WHERE (" + convertMaskToSqlFormat(m_tuneTable.getMasks(),"repaccount_.t_balance") +  ")"
            +"\n"+ "       AND repAccount_.t_isOpened = 1"
            +"\n"+ "       AND repudiationCredit.t_objectId(+) = repAccount_.t_objectId"
            +"\n"+ "       AND (repudiationCredit.t_value IS NOT NULL)"
            +"\n"+ "    UNION ALL"
            +"\n"+ "    SELECT repAccount_.t_account AS t_account,"
            +"\n"+ "           '1' t_row,"
            +"\n"+ "           (SELECT kind.t_name"
            +"\n"+ "              FROM dNoteKind_dbt kind"
            +"\n"+ "             WHERE kind.t_objectType = paymentDate.t_objectType"
            +"\n"+ "               AND kind.t_noteKind   = paymentDate.t_noteKind) AS t_category,"
            +"\n"+ "           paymentDate.t_date AS t_fromDate,"
            +"\n"+ "           paymentDate.t_validToDate AS t_toDate,"
            +"\n"+ "           '' t_value,"
            +"\n"+ "           CASE"
            +"\n"+ "               WHEN paymentDate.t_text IS NULL "
            +"\n"+ "                   THEN TO_DATE('01.01.0001', 'DD.MM.YYYY')"
            +"\n"+ "                   ELSE rsb_struct.getDate(paymentDate.t_text)"
            +"\n"+ "           END AS t_valueDate,"
            +"\n"+ "           0 t_valueMoney,"
            +"\n"+ "           2 t_valueType"
            +"\n"+ "      FROM dRepAccount_vw repAccount_,"
            +"\n"+ "           -- Дата погашения"
            +"\n"+ "           (SELECT *"
            +"\n"+ "              FROM dNoteText_dbt note"
            +"\n"+ "             WHERE note.t_objectType = " + OBJTYPE_ACCOUNT
            +"\n"+ "               AND note.t_noteKind   = " + NOTEKIND_MATURITY_DATE
            +"\n"+ "               AND rep_data.getEndDate() >= note.t_date"
            +"\n"+ "               AND rep_data.getBeginDate() <= note.t_validToDate"
            +"\n"+ "               ) paymentDate"
            +"\n"+ "     WHERE (" + convertMaskToSqlFormat(m_tuneTable.getMasks(),"repaccount_.t_balance") +  ")"
            +"\n"+ "       AND repAccount_.t_isOpened = 1"
            +"\n"+ "       AND paymentDate.t_documentId(+) = repAccount_.t_objectId"
            +"\n"+ "       AND (NOT paymentDate.t_text IS NULL)"
            +"\n"+ "    UNION ALL"
            +"\n"+ "    SELECT repAccount_.t_account AS t_account,"
            +"\n"+ "           '1' t_row,"
            +"\n"+ "           (SELECT kind.t_name"
            +"\n"+ "              FROM dNoteKind_dbt kind"
            +"\n"+ "             WHERE kind.t_objectType = partialMaturityDate.t_objectType"
            +"\n"+ "               AND kind.t_noteKind   = partialMaturityDate.t_noteKind) AS t_category,"
            +"\n"+ "           partialMaturityDate.t_date AS t_fromDate,"
            +"\n"+ "           partialMaturityDate.t_validToDate AS t_toDate,"
            +"\n"+ "           '' t_value,"
            +"\n"+ "           CASE"
            +"\n"+ "               WHEN partialMaturityDate.t_text IS NULL "
            +"\n"+ "                   THEN TO_DATE('01.01.0001', 'DD.MM.YYYY')"
            +"\n"+ "                   ELSE rsb_struct.getDate(partialMaturityDate.t_text)"
            +"\n"+ "           END AS t_valueDate,"
            +"\n"+ "           0 t_valueMoney,"
            +"\n"+ "           2 t_valueType"
            +"\n"+ "      FROM dRepAccount_vw repAccount_,"
            +"\n"+ "           -- Дата частичного погашения"
            +"\n"+ "           (SELECT *"
            +"\n"+ "              FROM dNoteText_dbt note"
            +"\n"+ "             WHERE note.t_objectType = " + OBJTYPE_ACCOUNT
            +"\n"+ "               AND note.t_noteKind   = " + NK_PARTIAL_REPAYMENT_DATE
            +"\n"+ "               AND rep_data.getEndDate()   >= note.t_date "
            +"\n"+ "               AND rep_data.getBeginDate() <= note.t_validToDate"
            +"\n"+ "               ) partialMaturityDate"
            +"\n"+ "     WHERE (" + convertMaskToSqlFormat(m_tuneTable.getMasks(),"repaccount_.t_balance") +  ")"
            +"\n"+ "       AND repAccount_.t_isOpened = 1"
            +"\n"+ "       AND partialMaturityDate.t_documentId(+) = repAccount_.t_objectId"
            +"\n"+ "       AND (NOT partialMaturityDate.t_text IS NULL)"
            +"\n"+ "    UNION ALL"
            +"\n"+ "    SELECT repAccount_.t_account AS t_account,"
            +"\n"+ "           '1' t_row,"
            +"\n"+ "           (SELECT kind.t_name"
            +"\n"+ "              FROM dNoteKind_dbt kind"
            +"\n"+ "             WHERE kind.t_objectType = anticipatoryRepudiationDate.t_objectType"
            +"\n"+ "               AND kind.t_noteKind   = anticipatoryRepudiationDate.t_noteKind) AS t_category,"
            +"\n"+ "           anticipatoryRepudiationDate.t_date AS t_fromDate,"
            +"\n"+ "           anticipatoryRepudiationDate.t_validToDate AS t_toDate,"
            +"\n"+ "           '' t_value,"
            +"\n"+ "           CASE"
            +"\n"+ "               WHEN anticipatoryRepudiationDate.t_text IS NULL "
            +"\n"+ "                   THEN TO_DATE('01.01.0001', 'DD.MM.YYYY')"
            +"\n"+ "                   ELSE rsb_struct.getDate(anticipatoryRepudiationDate.t_text)"
            +"\n"+ "           END AS t_valueDate,"
            +"\n"+ "           0 t_valueMoney,"
            +"\n"+ "           2 t_valueType"
            +"\n"+ "      FROM dRepAccount_vw repAccount_,"
            +"\n"+ "           -- Дата расторжения договора по суборд. кредиту"
            +"\n"+ "           (SELECT *"
            +"\n"+ "              FROM dNoteText_dbt note"
            +"\n"+ "             WHERE note.t_objectType = " + OBJTYPE_ACCOUNT
            +"\n"+ "               AND note.t_noteKind   = " + ANTICIPATORY_REPUDIATION_DATE
            +"\n"+ "               AND rep_data.getEndDate()   >= note.t_date "
            +"\n"+ "               AND rep_data.getBeginDate() <= note.t_validToDate"
            +"\n"+ "               ) anticipatoryRepudiationDate"
            +"\n"+ "     WHERE (" + convertMaskToSqlFormat(m_tuneTable.getMasks(),"repaccount_.t_balance") +  ")"
            +"\n"+ "       AND repAccount_.t_isOpened = 1"
            +"\n"+ "       AND anticipatoryRepudiationDate.t_documentId(+) = repAccount_.t_objectId"
            +"\n"+ "       AND (NOT anticipatoryRepudiationDate.t_text IS NULL)"
            +"\n"+ "    UNION ALL"
            +"\n"+ "    SELECT repAccount_.t_account AS t_account,"
            +"\n"+ "           '1' t_row,"
            +"\n"+ "           (SELECT kind.t_name"
            +"\n"+ "              FROM dNoteKind_dbt kind"
            +"\n"+ "             WHERE kind.t_objectType = payingSharesDate.t_objectType"
            +"\n"+ "               AND kind.t_noteKind   = payingSharesDate.t_noteKind) AS t_category,"
            +"\n"+ "           payingSharesDate.t_date AS t_fromDate,"
            +"\n"+ "           payingSharesDate.t_validToDate AS t_toDate,"
            +"\n"+ "           '' t_value,"
            +"\n"+ "           CASE"
            +"\n"+ "               WHEN payingSharesDate.t_text IS NULL "
            +"\n"+ "                   THEN TO_DATE('01.01.0001', 'DD.MM.YYYY')"
            +"\n"+ "                   ELSE rsb_struct.getDate(payingSharesDate.t_text)"
            +"\n"+ "           END AS t_valueDate,"
            +"\n"+ "           0 t_valueMoney,"
            +"\n"+ "           2 t_valueType"
            +"\n"+ "      FROM dRepAccount_vw repAccount_,"
            +"\n"+ "           -- Дата оплаты долей (акций)"
            +"\n"+ "           (SELECT *"
            +"\n"+ "              FROM dNoteText_dbt note"
            +"\n"+ "             WHERE note.t_objectType = " + OBJTYPE_ACCOUNT
            +"\n"+ "               AND note.t_noteKind   = " + NOTEKIND_PAYING_SHARES_DATE
            +"\n"+ "               AND rep_data.getEndDate()   >= note.t_date"
            +"\n"+ "               AND rep_data.getBeginDate() <= note.t_validToDate"
            +"\n"+ "               ) payingSharesDate"
            +"\n"+ "     WHERE (" + convertMaskToSqlFormat(m_tuneTable.getMasks(),"repaccount_.t_balance") +  ")"
            +"\n"+ "       AND repAccount_.t_isOpened = 1"
            +"\n"+ "       AND payingSharesDate.t_documentId(+)            = repAccount_.t_objectId"
            +"\n"+ "       AND (NOT payingSharesDate.t_text IS NULL)"
            +"\n"+ "    UNION ALL"
            +"\n"+ "    SELECT repAccount_.t_account AS t_account,"
            +"\n"+ "           '1' t_row,"
            +"\n"+ "           (SELECT kind.t_name"
            +"\n"+ "              FROM dNoteKind_dbt kind"
            +"\n"+ "             WHERE kind.t_objectType = forTrancheAmount.t_objectType"
            +"\n"+ "               AND kind.t_noteKind   = forTrancheAmount.t_noteKind) AS t_category,"
            +"\n"+ "           forTrancheAmount.t_date AS t_fromDate,"
            +"\n"+ "           forTrancheAmount.t_validToDate AS t_toDate,"
            +"\n"+ "           '' t_value,"
            +"\n"+ "           TO_DATE('01.01.0001','DD.MM.YYYY') t_valueDate,"
            +"\n"+ "           CASE"
            +"\n"+ "               WHEN forTrancheAmount.t_text IS NULL "
            +"\n"+ "                   THEN 0"
            +"\n"+ "                   ELSE rsb_struct.getMoney(forTrancheAmount.t_text)"
            +"\n"+ "           END AS t_valueMoney,"
            +"\n"+ "           3 t_valueType"
            +"\n"+ "      FROM dRepAccount_vw repAccount_,"
            +"\n"+ "           -- Сумма транша для Приложения 3 ФОР"
            +"\n"+ "           (SELECT *"
            +"\n"+ "              FROM dNoteText_dbt note"
            +"\n"+ "             WHERE note.t_objectType = " + OBJTYPE_ACCOUNT
            +"\n"+ "               AND note.t_noteKind   = " + NOTEKIND_FOR_TRANCHE_AMOUNT
            +"\n"+ "               AND rep_data.getEndDate()   >= note.t_date"
            +"\n"+ "               AND rep_data.getBeginDate() <= note.t_validToDate"
            +"\n"+ "               ) forTrancheAmount"
            +"\n"+ "     WHERE (" + convertMaskToSqlFormat(m_tuneTable.getMasks(),"repaccount_.t_balance") +  ")"
            +"\n"+ "       AND repAccount_.t_isOpened = 1"
            +"\n"+ "       AND forTrancheAmount.t_documentId(+) = repAccount_.t_objectId"
            +"\n"+ "       AND (NOT forTrancheAmount.t_text IS NULL)"
            +"\n"+ ")"
            +"\n"+ "ORDER BY t_account, t_category, t_fromDate";

    end;

    initTBaseInputControlDataSource();
end;

/***************************************************************************************************
 *  Источник данных для контроля исходных данных. Приложение 6.
 **************************************************************************************************/
class (TBaseInputControlDataSource) TInputControlForApplication6DataSource()

    m_tuneTableFilter = "t_applicationName = 'Приложение6'";

    private macro getQerry()
        return      "WITH repcategory AS (SELECT *"
            +"\n"+ "                        FROM drepcategory_vw"
            +"\n"+ "                       WHERE t_id = 1"
            +"\n"+ "                         AND t_isforaccount =1"
            +"\n"+ "                         AND t_isinstalledoverperiod = 1)"
            +"\n"+ "        SELECT *"
            +"\n"+ "          FROM (SELECT repaccount.t_account,"
            +"\n"+ "                       '1' t_row,"
            +"\n"+ "                       'Категория л/с \"Категория для отчетности / Для ФОР / Обязательства в неденежной форме\"' t_category,"
            +"\n"+ "                       repcategory.t_value t_value,"
            +"\n"+ "                       repcategory.t_validFromDate t_fromDate,"
            +"\n"+ "                       repcategory.t_validToDate t_toDate"
            +"\n"+ "                  FROM drepaccount_vw repaccount,"
            +"\n"+ "                       repcategory"
            +"\n"+ "                 WHERE (" + convertMaskToSqlFormat(m_tuneTable.setKey("1").getMasks(),"repaccount.t_balance") +  ")"
            +"\n"+ "                   AND repaccount.t_objectid = repcategory.t_objectid"
            +"\n"+ "                   AND repcategory.t_value = 'N'"
            +"\n"+ "                   AND repaccount.t_isopened = 1"
            +"\n"+ "                 UNION"
            +"\n"+ "                 SELECT repaccount.t_account,"
            +"\n"+ "                       '2' t_row,"
            +"\n"+ "                       'Категория л/с \"Категория для отчетности / Для ФОР / Обязательства перед другими КО, международными организациями и АСВ\"' t_category,"
            +"\n"+ "                       repcategory.t_value t_value,"
            +"\n"+ "                       repcategory.t_validFromDate t_fromDate,"
            +"\n"+ "                       repcategory.t_validToDate t_toDate"
            +"\n"+ "                  FROM drepaccount_vw repaccount,"
            +"\n"+ "                       repcategory"
            +"\n"+ "                 WHERE (" + convertMaskToSqlFormat(m_tuneTable.setKey("2").getMasks(),"repaccount.t_balance") +  ")"
            +"\n"+ "                   AND repaccount.t_objectid = repcategory.t_objectid"
            +"\n"+ "                   AND repcategory.t_value = 'КО'"
            +"\n"+ "                   AND repaccount.t_isopened = 1"
            +"\n"+ "                 UNION"
            +"\n"+ "                 SELECT repaccount.t_account,"
            +"\n"+ "                       '2' t_row,"
            +"\n"+ "                       'категория л/с \"Вид / Счет КО - довер. управл. по опер. с имущ-ом, полученным в ДУ\"' t_category,"
            +"\n"+ "                       repcategory.t_value t_value,"
            +"\n"+ "                       repcategory.t_validFromDate t_fromDate,"
            +"\n"+ "                       repcategory.t_validToDate t_toDate"
            +"\n"+ "                  FROM drepaccount_vw repaccount,"
            +"\n"+ "                       (SELECT *"
            +"\n"+ "                          FROM drepcategory_vw"
            +"\n"+ "                         WHERE t_id = 2"
            +"\n"+ "                           AND t_isforaccount = 1"
            +"\n"+ "                           AND t_isinstalledoverperiod = 1) repcategory"
            +"\n"+ "                 WHERE (" + convertMaskToSqlFormat(m_tuneTable.setKey("2").getMasks(),"repaccount.t_balance") +  ")"
            +"\n"+ "                   AND repaccount.t_objectid = repcategory.t_objectid"
            +"\n"+ "                   AND repcategory.t_value   = 'ДУ'"
            +"\n"+ "                   AND repaccount.t_isopened = 1"
            +"\n"+ "                 UNION"
            +"\n"+ "                 SELECT repaccount.t_account,"
            +"\n"+ "                       '3' t_row,"
            +"\n"+ "                       'Категория л/с \"Категория для отчетности / Для ФОР / Задолженность между обособленными подразделениями КО\"'  t_category,"
            +"\n"+ "                       repcategory.t_value t_value,"
            +"\n"+ "                       repcategory.t_validFromDate t_fromDate,"
            +"\n"+ "                       repcategory.t_validToDate t_toDate"
            +"\n"+ "                  FROM drepaccount_vw repaccount,"
            +"\n"+ "                       repcategory"
            +"\n"+ "                 WHERE (" + convertMaskToSqlFormat(m_tuneTable.setKey("3").getMasks(),"repaccount.t_balance") +  ")"
            +"\n"+ "                   AND repaccount.t_objectid = repcategory.t_objectid"
            +"\n"+ "                   AND repcategory.t_value = 'З'"
            +"\n"+ "                   AND repaccount.t_isopened = 1)"
            +"\n"+ "      ORDER BY t_row, t_account, t_category, t_fromDate";
    end;

    initTBaseInputControlDataSource();
end;
