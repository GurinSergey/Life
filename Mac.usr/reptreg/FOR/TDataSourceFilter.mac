/*
$Name:          TDataSourceFilter.mac
$Module:        Регламентируемая отчетность
$Description:   Фильтры для источников данных
*/

/*─────────────────────────────────────────────────────────────────────────────────────────────────┐
  RS-Bank V6                                                                        R-Style Softlab
  Файл подсистемы "Регламентируемая отчетность"

  Класс фильтров для источника данных ФОР

  Создан: 20.04.2007 - Ser.
└─────────────────────────────────────────────────────────────────────────────────────────────────*/
/***************************************************************************************************
 *  Класс фильтров для выбора данных из БД
 **************************************************************************************************/
class TDataSourceFilter(balanceMasks : String, category : String)
    private var m_category       : String = category;
    private var m_balanceMasks   : String = balanceMasks;
    private var m_partFilter     : String = null;
    private var m_partDateFilter : String = null;

    // Является банком
    private macro isEmployer(clientCodeAlias : String)

        var filter = "EXISTS(SELECT 1"
            +"\n"+ "           FROM drepparty_vw"
            +"\n"+ "          WHERE t_id         = " + clientCodeAlias
            +"\n"+ "            AND t_isEmployer = 1)";

        return filter;
    end;

    // Является банком
    private macro isBank(clientCodeAlias : String)
        var filter =   "EXISTS(SELECT 1"
                +"\n"+ "         FROM dpartyown_dbt partyown"
                +"\n"+ "        WHERE partyown.t_partyId = " + clientCodeAlias
                +"\n"+ "          AND partyown.t_partykind = " + RCB_PTK_BANK + ")";
        return filter;
    end;

    // Наш банк
    private macro isOurBank(clientCodeAlias : String)
        var filter = "EXISTS(SELECT 1"
              +"\n"+ "         FROM dfforourbank_tmp"
              +"\n"+ "        WHERE t_partyId = " + clientCodeAlias + ")";
        return filter;
    end;

    // Собственные средства подразделения
    private macro isDepartmentOwnFunds(clientCodeAlias : String)
        var filter = "EXISTS(SELECT 1"
              +"\n"+ "  FROM ddp_dep_dbt  dp"
              +"\n"+ " WHERE dp.t_partyId  = " + clientCodeAlias
              +"\n"+ "   AND dp.t_code     = account.t_department" + ")";

           return filter;
    end;

    // Клиент - нерезидент
    private macro isNotResident(clientCodeAlias : String)
        var filter =   "EXISTS(SELECT 1"
                +"\n"+ "         FROM dparty_dbt party"
                +"\n"+ "        WHERE party.t_partyId = " + clientCodeAlias
                +"\n"+ "          AND party.t_notResident = 'X')";
        return filter;
    end;

    // Клиент - физическое лицо
    private macro isNaturalPerson(clientCodeAlias : String)
        var filter =   "EXISTS(SELECT 1"
                +"\n"+ "         FROM dparty_dbt party"
                +"\n"+ "        WHERE party.t_partyId   = " + clientCodeAlias
                +"\n"+ "          AND party.t_legalForm = " + RCB_NATURAL_PERSON + ")";
        return filter;
    end;

    // Установлена категория отчетности
    private macro hasAssignedCategory(category : String, groupId : Integer)
        var filter = "";

        if (nvl(category, m_category) != NULL)
            filter = "EXISTS(SELECT 1"
              +"\n"+ "         FROM dobjatcor_dbt atc"
              +"\n"+ "        WHERE atc.t_ObjectType = " + RCB_OBJTYPE_ACCOUNT
              +"\n"+ "          AND atc.t_GroupID    = " + nvl(groupId, RCB_OBJGROUP_REPORT)
              +"\n"+ "          AND atc.t_Object     = account.t_accountObjectId"
              +"\n"+ "          AND atc.t_AttrID = (SELECT att.t_AttrID"
              +"\n"+ "                                FROM dobjattr_dbt att"
              +"\n"+ "                               WHERE att.t_ObjectType = " + RCB_OBJTYPE_ACCOUNT
              +"\n"+ "                                 AND att.t_GroupID    = " + nvl(groupId, RCB_OBJGROUP_REPORT)
              +"\n"+ "                                 AND att.t_codeList = CHR(1)"
              +"\n"+ "                                 AND att.t_numInList  = " + getSqlString(nvl(category, m_category)) + ")"
              +"\n"+ "          AND (frd.t_date - 1) BETWEEN atc.t_ValidFromDate AND atc.t_ValidToDate)";
        else
            filter = "1 = 1";
        end;
        return filter;
    end;

    // Срок больше трех лет
    private macro isTermExceedThreeYears(accountAlias : String, fiIdAlias : String, chapterAlias : String)
        const DAYS_IN_THREE_YEARS = 365 * 3;

        var filter =   "rep_note.readMaturityDate(t_accountObjectId, " + getSqlDate(global.parameters.getEndDate()) + ") - rcb_for.dateOpeningAccount(account.t_account, account.t_openDate) >= " + DAYS_IN_THREE_YEARS;
        return filter;
    end;

    // Счет является открытым за дату
    private macro isOpened(date_ : Date)
        var filter =      "(" + getSqlDate(date_) + " BETWEEN account.t_openDate AND account.t_closeDate"
            +"\n"+   "      OR account.t_closeDate = " + getSqlDate(date(0,0,0)) + ")";

        return filter;
    end;

    // Возвращает дату частичного погашения
    private macro getPartialRepaymentDate() : String
        var partialRepaymentDate = "rep_note.readPartialRepaymentDate(t_accountObjectId, " + getSqlDate(global.parameters.getEndDate()) + ")";

        return partialRepaymentDate;
    end;

    // Возвращает дату досрочного расторжения
    private macro getAnticipatoryRepudiationDate() : String
        var anticipatoryRepudiationDate = "rep_note.anticipatoryRepudiationDate(t_accountObjectId, " + getSqlDate(global.parameters.getEndDate()) + ")";

        return anticipatoryRepudiationDate;
    end;

    // Возвращает дату оплаты акций
    private macro getPayingSharesDate() : String
        var payingSharesDate = "rep_note.readPayingSharesDate(t_accountObjectId, " + getSqlDate(global.parameters.getEndDate()) + ")";

        return payingSharesDate;
    end;

    // Существует досрочный возврат
    private macro isExistsAnticipatedPayment(accountAlias : String, fiIdAlias : String, chapterAlias : String)
        const DAYS_IN_THREE_YEARS    = 365 * 3;
        const NOTEKIND_MATURITY_DATE = 16;

        //Обработка примечания "Дата погашения"
        var initialNoteDate   = "rep_note.getInitialNoteDate(" + RCB_OBJTYPE_ACCOUNT + " , t_accountObjectId, " + NOTEKIND_MATURITY_DATE + ")";
        var initialMaturityDate = "rep_note.readMaturityDate(t_accountObjectId, " + initialNoteDate + ")";

        var currentNoteDate     = "rep_note.getNoteDate(" + RCB_OBJTYPE_ACCOUNT + " , t_accountObjectId, " + NOTEKIND_MATURITY_DATE + ", " + getSqlDate(global.parameters.getEndDate()) +")";
        var currentMaturityDate = "rep_note.readMaturityDate(t_accountObjectId, " + getSqlDate(global.parameters.getEndDate()) + ")";

        //частичное погашение
        var partialrepaymentdate = "rep_note.readPartialRepaymentDate(t_accountObjectId, " + getSqlDate(global.parameters.getEndDate()) + ")";

        //Определение сумм привлечения

        var filter =    " (   (     (" + initialMaturityDate + " - account.t_openDate) >= " + DAYS_IN_THREE_YEARS
            +"\n"+   "         AND  NOT " + hasAssignedCategory("СубКредит")
            +"\n"+   "         AND  (   (    account.t_closeDate BETWEEN add_months(" + getSqlDate(global.parameters.getBeginDate()) +", -2) AND " + getSqlDate(global.parameters.getEndDate())
            +"\n"+   "                   AND (account.t_closeDate - account.t_openDate) < " + DAYS_IN_THREE_YEARS + ")"
            +"\n"+   "               OR (    " + currentNoteDate + " BETWEEN " + "add_months(" + getSqlDate(global.parameters.getBeginDate()) +", -2) AND " + getSqlDate(global.parameters.getEndDate())
            +"\n"+   "                   AND (" + currentMaturityDate + " - account.t_openDate) < " + DAYS_IN_THREE_YEARS
            +"\n"+   "                   AND " + isOpened(global.parameters.getEndDate()) + ")"
            +"\n"+   "               OR (    (" + currentMaturityDate + " - account.t_openDate) >= " + DAYS_IN_THREE_YEARS
            +"\n"+   "                   AND " + partialrepaymentdate + " BETWEEN add_months(" + getSqlDate(global.parameters.getBeginDate()) +", -2) AND "+ getSqlDate(global.parameters.getEndDate())
            +"\n"+   "                   AND " + isOpened(global.parameters.getEndDate()) + ")))"
            +"\n"+   "     OR"
            +"\n"+   "        (    " + hasAssignedCategory("СубКредит")
            +"\n"+   "         AND (   (    " + isOpened(global.parameters.getEndDate())
            +"\n"+   "                  AND " + currentMaturityDate + " - account.t_openDate >= " + DAYS_IN_THREE_YEARS
            +"\n"+   "                  AND " + partialrepaymentdate + " BETWEEN add_months(" + getSqlDate(global.parameters.getBeginDate()) +", -2) AND "+ getSqlDate(global.parameters.getEndDate()) + ")"
            +"\n"+   "              OR (rcb_for.isPretermRepaymentOfSubCredit(" + chapterAlias + "," + fiIdAlias + "," + accountAlias + "," + getSqlDate(global.parameters.getBeginDate()) + "," + getSqlDate(global.parameters.getEndDate()) + ") = 1))))";

        return filter;
    end;

    //Является частично досрочным погашением
    private macro isPartialRepayment()
        return getPartialRepaymentDate() + " BETWEEN add_months(" + getSqlDate(global.parameters.getBeginDate()) + ", -2) AND " + getSqlDate(global.parameters.getEndDate());
    end;

    // Существует связанный финансовый инструмент
    private macro hasLinkedFinInstr(accountAlias : String, fiIdAlias : String, chapterAlias : String)
        var filter =   "EXISTS(SELECT 1"
                +"\n"+ "         FROM dobjlink_dbt ol, dfininstr_dbt fi"
                +"\n"+ "        WHERE ol.t_attrId     = rsb_rep_fi.makeFiId(fi.t_fiId)"
                +"\n"+ "          AND ol.t_objectId   = t_accountObjectId"
                +"\n"+ "          AND ol.t_objectType = " + RCB_OBJTYPE_ACCOUNT
                +"\n"+ "          AND ol.t_groupId    = " + RCB_OBJROLE_FININSTR
                +"\n"+ "          AND ol.t_attrType   = " + RCB_OBJTYPE_AVOIRISS + ")";
        return filter;
    end;

    // Эмитент связанного финансового инструмента - облигация (при использовании сравнивается с RCB_PTK_CENTRBANK)
    private macro getBondIssuer(accountAlias : String, fiIdAlias : String, chapterAlias : String)
        var filter =   "(SELECT partyown.t_partyKind"
                +"\n"+ "   FROM dobjlink_dbt ol,"
                +"\n"+ "        dpartyown_dbt partyown,"
                +"\n"+ "        dfininstr_dbt fininstr"
                +"\n"+ "  WHERE ol.t_attrId     = rsb_rep_fi.makeFiId(finInstr.t_fiId)"
                +"\n"+ "    AND ol.t_objectId   = t_accountObjectId"
                +"\n"+ "    AND ol.t_objectType = " + RCB_OBJTYPE_ACCOUNT
                +"\n"+ "    AND ol.t_groupId    = " + RCB_OBJROLE_FININSTR
                +"\n"+ "    AND ol.t_attrType   = " + RCB_OBJTYPE_AVOIRISS
                +"\n"+ "    AND fininstr.t_avoirKind IN (" + RCB_AVOIRISSKIND_ORDINARY_BOND    + ","
                +"\n"+ "                                 " + RCB_AVOIRISSKIND_COUPON_BOND      + ","
                +"\n"+ "                                 " + RCB_AVOIRISSKIND_CONV_BOND        + ","
                +"\n"+ "                                 " + RCB_AVOIRISSKIND_COUPON_BOND_AD   + ","
                +"\n"+ "                                 " + RCB_AVOIRISSKIND_ORDINARY_BOND_AD + ")"
                +"\n"+ "    AND partyown.t_partyId   = fininstr.t_issuer)";
        return filter;
    end;

    // Клиент присутствует в справочнике филиалов
    private macro isClientInDepartmentReference(clientCodeAlias : String)
        var filter =   "EXISTS(SELECT 1"
                +"\n"+ "         FROM ddp_dep_dbt ddp_dep"
                +"\n"+ "        WHERE ddp_dep.t_partyId = " + clientCodeAlias + ")";
        return filter;
    end;

    // Клиент является банком с действующей лицензией
    private macro isClientBankWithValidLicense(clientCodeAlias : String)
        const REGPT_CENTRALBANK = 45;

        var filter =   "EXISTS(SELECT 1"
                +"\n"+ "         FROM dobjRgDoc_dbt objRgDoc"
                +"\n"+ "        WHERE objRgDoc.t_objectType = " + RCB_OBJTYPE_PARTY
                +"\n"+ "          AND objRgDoc.t_regDocKind = (SELECT t_regDocKind"
                +"\n"+ "                                         FROM dobjKDoc_dbt objKDoc"
                +"\n"+ "                                        WHERE objKDoc.t_objectType = " + RCB_OBJTYPE_PARTY
                +"\n"+ "                                          AND objKDoc.t_name = 'Генеральная лицензия')"
                +"\n"+ "          AND objRgDoc.t_regPartyKind = " + REGPT_CENTRALBANK
                +"\n"+ "          AND objRgDoc.t_objectID = " + clientCodeAlias
                +"\n"+ "          AND objRgDoc.t_startDate  <= frd.t_date - 1"
                +"\n"+ "          AND (objRgDoc.t_finishDate >=  frd.t_date - 1 OR objRgDoc.t_finishDate = TO_DATE('01.01.0001', 'dd.mm.yyyy')))";
        return filter;
    end;

    private macro getBondKindCategory(accountAlias : String, fiIdAlias : String, chapterAlias : String)
        var filter =   "(SELECT att.t_name"
                +"\n"+ "   FROM dobjlink_dbt ol,"
                +"\n"+ "        dfininstr_dbt fi,"
                +"\n"+ "        dobjatcor_dbt atc,"
                +"\n"+ "        dobjgroup_dbt gr,"
                +"\n"+ "        dobjattr_dbt att"
                +"\n"+ "  WHERE ol.t_attrId      = rsb_rep_fi.makeFiId(fi.t_fiId)"
                +"\n"+ "    AND ol.t_objectId    = t_accountObjectId"
                +"\n"+ "    AND ol.t_objectType  = " + RCB_OBJTYPE_ACCOUNT
                +"\n"+ "    AND ol.t_groupId     = " + RCB_OBJROLE_FININSTR
                +"\n"+ "    AND ol.t_attrType    = " + RCB_OBJTYPE_AVOIRISS
                +"\n"+ "    AND atc.t_objectType = " + RCB_OBJTYPE_AVOIRISS
                +"\n"+ "    AND atc.t_groupID    = 4"
                +"\n"+ "    AND atc.t_object     = rsb_rep_fi.makeFiId(fi.t_fiId)"
                +"\n"+ "    AND atc.t_AttrID     = att.t_AttrID"
                +"\n"+ "    AND att.t_ObjectType = atc.t_ObjectType"
                +"\n"+ "    AND att.t_GroupID    = atc.t_GroupID"
                +"\n"+ "    AND " + getSqlDate(global.parameters.getEndDate()) + " BETWEEN atc.t_ValidFromDate AND atc.t_ValidToDate"
                +"\n"+ "    AND gr.t_objectType = atc.t_ObjectType"
                +"\n"+ "    AND gr.t_groupID    = atc.t_GroupID"
                +"\n"+ "    AND gr.t_name       = 'Вид облигации')";
        return filter;
    end;

    private macro getOperationContragentQuery(accountAlias : String, fiIdAlias : String, chapterAlias : String, offset : Integer)
        var offsetString = "\n" + mkStr(" ", offset);

        return               "SELECT 1"
            + offsetString + "  FROM dobjlink_dbt"
            + offsetString + " WHERE t_objectType = "  + RCB_OBJTYPE_ACCOUNT
            + offsetString + "   AND t_objectId   = t_accountObjectId"
            + offsetString + "   AND t_attrType   = " + RCB_OBJTYPE_PARTY
            + offsetString + "   AND t_GroupID    = " + RCB_OBJROLE_OPERATION_CONTRAGENT;
    end;

    private macro isExistsOperationContragent(accountAlias : String, fiIdAlias : String, chapterAlias : String)
        var filter = "EXISTS(" + getOperationContragentQuery(accountAlias, fiIdAlias, chapterAlias, 7) + ")";
        return filter;
    end;

    private macro hasNotResidentBankOperationContragent(accountAlias : String, fiIdAlias : String, chapterAlias : String)
        var filter = "EXISTS(" + getOperationContragentQuery(accountAlias, fiIdAlias, chapterAlias, 7)
            + "\n" + "           AND " + isBank("t_AttrID")
            + "\n" + "           AND " + isNotResident("t_AttrID") + ")";
        return filter;
    end;

    private macro hasNotResidentBankOperationContragent2(accountAlias : String, fiIdAlias : String, chapterAlias : String)
        var filter = "EXISTS(" + getOperationContragentQuery(accountAlias, fiIdAlias, chapterAlias, 7)
            + "\n" + "           AND " + isBank("t_attrId")
            + "\n" + "           AND NOT " + isNotResident("t_AttrID")
            + "\n" + "           AND " + isClientBankWithValidLicense("t_AttrID")
            + "\n" + "           AND NOT " + isClientInDepartmentReference("t_AttrID") + ")";
        return filter;
    end;

    private macro hasNotResidentBankOperationContragent3(accountAlias : String, fiIdAlias : String, chapterAlias : String)
        var filter = "EXISTS(" + getOperationContragentQuery(accountAlias, fiIdAlias, chapterAlias, 7)
            + "\n" + "           AND NOT " + isDepartmentOwnFunds("t_AttrID", accountAlias)
            + "\n" + "           AND " + isClientInDepartmentReference("t_AttrID") + ")";
        return filter;
    end;

    private macro hasNaturalPersonOperationContragent(accountAlias : String, fiIdAlias : String, chapterAlias : String)
        var filter = "EXISTS(" + getOperationContragentQuery(accountAlias, fiIdAlias, chapterAlias, 7)
            + "\n" + "           AND " + isNaturalPerson("t_AttrID") + ")";
        return filter;
    end;

    private macro getBalanceSetString(masks : String) : String

        var dataSet = TRsbDataSet("SELECT t_balance AS t_balance"
            + "\n" +              "  FROM dbalance_dbt"
            + "\n" +              " WHERE " + convertMaskToSqlFormat(masks, "t_balance"));

        var masksString : String = "";

        while (dataSet.moveNext())
            masksString = masksString + "," + getSqlString(dataSet.balance);
        end;

        if (masksString != "")
            return substr(masksString, 2);
        end;

        return "'EMPTY'";
    end;

    private macro isNotZeroForAtLeastOneDay
        var filter = " EXISTS ("
            +"\n"+ "           SELECT /*+ QB_NAME(subq1)*/  1 "
            +"\n"+ "               FROM drestdate_dbt r"
            +"\n"+ "             WHERE r.t_accountId = account.t_accountId AND r.t_rest <> 0"
            +"\n"+ "             AND (r.t_restDate BETWEEN rep_data.getBeginDate() AND rep_data.getEndDate()"
            +"\n"+ "               OR r.t_restDate <= (SELECT MAX(maxDate.t_restDate) t_maxDate"
            +"\n"+ "                                         FROM dRestDate_dbt maxDate"
            +"\n"+ "                                       WHERE maxDate.t_restDate <= rep_data.getBeginDate()"
            +"\n"+ "                                         AND maxDate.t_accountId = r.t_accountId)"
            +"\n"+ "                  )"
            +"\n"+ "           )";
        return filter;
    end;

    // Удовлетворяет маскам балансовых счетов
    macro isSatisfiesToBalancesMasks(balanceAlias : String, masks : String)
        var balanceMasks = nvl(masks, m_balanceMasks);

        var filter = balanceAlias + " IN (" + getBalanceSetString(balanceMasks) + ")";

        if (balanceMasks == "")
            filter = "(0 = 1)";
        end;
        return filter;
    end;

    macro getSqlFilter()
        return nvl(m_partFilter, "(1 = 1)");
    end;

    macro getSqlDateFilter()
        return nvl(m_partDateFilter, "(1 = 1)");
    end;

    macro makePartFilter()
    end;

    macro makePartDateFilter()
    end;

    makePartFilter();
    makePartDateFilter();
end;

class (TDataSourceFilter) TDataSourceFilter_3115 (balanceMasks : String, category : String)
    initTDataSourceFilter(balanceMasks, category);

    // Существует досрочный возврат
    private macro isExistsAnticipatedPayment(accountAlias : String, fiIdAlias : String, chapterAlias : String)
        const DAYS_IN_THREE_YEARS    = 365 * 3;
        const NOTEKIND_MATURITY_DATE = 16;          /* Примечание "Дата погашения" */
        const NOTEKIND_PAYING_SHARES_DATE = 37;     /* Примечание "Дата оплаты акций" */

        //Обработка примечания "Дата погашения"
        var initialNoteDate   = "rep_note.getInitialNoteDate(" + RCB_OBJTYPE_ACCOUNT + " , t_accountObjectId, " + NOTEKIND_MATURITY_DATE + ")";
        var initialMaturityDate = "rep_note.readMaturityDate(t_accountObjectId, " + initialNoteDate + ")";

        var currentNoteDate     = "rep_note.getNoteDate(" + RCB_OBJTYPE_ACCOUNT + " , t_accountObjectId, " + NOTEKIND_MATURITY_DATE + ", " + getSqlDate(global.parameters.getEndDate()) +")";
        var currentMaturityDate = "rep_note.readMaturityDate(t_accountObjectId, " + getSqlDate(global.parameters.getEndDate()) + ")";

        // Дата начала действия примечания "Дата оплаты акций"
        var currentNotePayingSharesDate     = "rep_note.getNoteDate(" + RCB_OBJTYPE_ACCOUNT + " , t_accountObjectId, " + NOTEKIND_PAYING_SHARES_DATE + ", " + getSqlDate(global.parameters.getEndDate()) +")";

        //частичное погашение
        var partialrepaymentdate = "rep_note.readPartialRepaymentDate(t_accountObjectId, " + getSqlDate(global.parameters.getEndDate()) + ")";

        //Определение сумм привлечения

        var filter =    " (   (     (" + initialMaturityDate + " - account.t_openDate) >= " + DAYS_IN_THREE_YEARS
            +"\n"+   "         AND  NOT " + hasAssignedCategory("СубКредит")
            +"\n"+   "         AND  (   (    account.t_closeDate BETWEEN add_months(" + getSqlDate(global.parameters.getBeginDate()) +", -2) AND " + getSqlDate(global.parameters.getEndDate())
            +"\n"+   "                   AND (account.t_closeDate - account.t_openDate) < " + DAYS_IN_THREE_YEARS + ")"
            +"\n"+   "               OR (    " + currentNoteDate + " BETWEEN " + "add_months(" + getSqlDate(global.parameters.getBeginDate()) +", -2) AND " + getSqlDate(global.parameters.getEndDate())
            +"\n"+   "                   AND (" + currentMaturityDate + " - account.t_openDate) < " + DAYS_IN_THREE_YEARS
            +"\n"+   "                   AND " + isOpened(global.parameters.getEndDate()) + ")"
            +"\n"+   "               OR (    (" + currentMaturityDate + " - account.t_openDate) >= " + DAYS_IN_THREE_YEARS
            +"\n"+   "                   AND " + partialrepaymentdate + " BETWEEN add_months(" + getSqlDate(global.parameters.getBeginDate()) +", -2) AND "+ getSqlDate(global.parameters.getEndDate())
            +"\n"+   "                   AND " + isOpened(global.parameters.getEndDate()) + ")))"
            +"\n"+   "     OR"
            +"\n"+   "        (    " + hasAssignedCategory("СубКредит")
            +"\n"+   "         AND NOT " + hasAssignedCategory("ДР")
            +"\n"+   "         AND (   (    " + isOpened(global.parameters.getEndDate())
            +"\n"+   "                  AND " + currentMaturityDate + " - account.t_openDate >= " + DAYS_IN_THREE_YEARS
            +"\n"+   "                  AND " + partialrepaymentdate + " BETWEEN add_months(" + getSqlDate(global.parameters.getBeginDate()) +", -2) AND "+ getSqlDate(global.parameters.getEndDate())
            +"\n"+   "                  AND ("
            +"\n"+ "                           rcb_for.getWorkDayCount(" + partialrepaymentdate + "," + getPayingSharesDate() + ") > 5"
            +"\n"+ "                         OR ("
            +"\n"+ "                             " + getPayingSharesDate() + " > " + getSqlDate(global.parameters.getEndDate())
            +"\n"+ "                            AND " + currentNotePayingSharesDate + " > " + getSqlDate(global.parameters.getEndDate())
            +"\n"+ "                            AND rcb_for.getWorkDayCount(" + partialrepaymentdate + "," + getPayingSharesDate() + ") <= 5"
            +"\n"+ "                            )"
            +"\n"+ "                         OR " + getPayingSharesDate() + "IS NULL"
            +"\n"+   "                      )"
            +"\n"+   "                 )"
            +"\n"+   "              OR (rcb_for.isPretermRepaymentOfSubCredit(" + chapterAlias + "," + fiIdAlias + "," + accountAlias + "," + getSqlDate(global.parameters.getBeginDate()) + "," + getSqlDate(global.parameters.getEndDate()) + ") = 1))))";

        return filter;
    end;
end;