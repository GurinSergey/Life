/*───────────────────────────────────────────────────────────────────────────┐
  RS-Bank version 5.10                                        R-Style Softlab
  Файл подсистемы "Отчеты ЦБ"

  Печать 9-го приложения.

  Создан: 04.02.2004 - Sal.

  Комментарии:
     1. Определяем шаблон, который подходит для печати отчета в текущий
        период. Для этого использубтся служебные тэги в шаблонах DATE1 и
        DATE2. Шаблон подходит для печати, если ДатаОтчета лежит между
        DATE1 и DATE2.
     2. Создается рабочий шаблон, который и будет напечатан, по найденному.
        Рабочий шаблон создается в каталоге текстовых файлов. Из
        дистрибутивного шаблона вырезаются строки с неиспользующимися
        переменными. На данном этапе используется тэг MASK который определяет,
        нужно ли вставлять в рабочий шаблон идущие за тэгом строки.
     3. Тэг EXPR задает выражение. Если выражение принимает значение true, то
        идущие за тэгом строки попадают в рабочий шаблон. В выражении могут
        использоваться значения переменных, для этого надо использовать
        конструктцию FUNC_VNAME(<Имя переменной>).
     4. Символ ";" в начале строки шаблона означает, что в строке содержится
        тэг. Символ "#" в начале строки определяет, что это коментарий. Такие
        строки в рабочий шаблон не попадают.

    25.03.2005 BugZ SCR 64029
        В TPL_PrintReport можно передавать дату для явного выбора шаблона.
    10.08.2005 BugZ SCR Некорректный порядок операторов.

└───────────────────────────────────────────────────────────────────────────*/
import BankInter, ReptCBInter, PrnFrm, Календарь, globals, cy_find;
import lib_lang;
import rsexts;
import RcbCoreInter;

/* Справочник описаний переменных */
file varsd("cy_varsd.dbt","cy_files.def") key 2;

/* Процедуры, определяемые в вызывающем модуле */
var TPL_ProcSetExternNames = "TPL_SetExternNames";
var TPL_ProcGetStatusMask  = "TPL_GetStatusMask";
var TPL_ProcBeforeInsWork  = "TPL_BeforeInsWork";

/* Служебные символы */
private const COMMENT_SIGN = "#";
private const SERVICE_SIGN = ";";

/* Отчет */
private var report = RcbApplication().currentReport;

/* Служебные тэги для создания рабочего шаблона */
private const MASK_STR  = "MASK:";
private const EXPR_STR  = "EXPR:";
private const DATE1_STR = "DATE1:";
private const DATE2_STR = "DATE2:";

/* Настройка с каталогами макрофайлов */
private const MACRO_REGPATH = "BANK_INI/ОБЩИЕ ПАРАМЕТРЫ/ДИРЕКТОРИИ/MACRODIR";
private const USER_MACRO_REGPATH = "BANK_INI/ОБЩИЕ ПАРАМЕТРЫ/ДИРЕКТОРИИ/USERMACRODIR";

/* Имена полей */
private const FIELD_SERVNAME_PREF     = "Ext_"; /* Поля с таким префиксом инициализируются в вызывающем модуле */
private const FIELD_SERVNAME_PREF_LEN = StrLen(FIELD_SERVNAME_PREF);

/* Обработка выражений */
private const FUNC_VNAME = "FUNC_VNAME"; /* Имя переменной в выражении */
private const FUNC_DAY   = "FUNC_DAY";   /* Получить день из даты      */
private const FUNC_MON   = "FUNC_MON";   /* Получить месяц из даты     */

/*Точность округления значений главы Д*/
private var precision;
getRegistryValue("REPTREG/REP_GROUPS/BALANCE_ACCOUNTS/ТОЧНОСТЬ ДЛЯ ГЛАВЫ Д", V_INTEGER,  precision, null);

/* Крутящийся индикатор в статус-строке */
Private
CLASS ProcessIndic( mess )

   private var m_graphics  = TArray; /* массив крутящихся симолов -\|/ */
   private var m_size      = 0;      /* размер массива                 */
   private var m_cur_index = 0;      /* текущий индекс массива         */
   private var m_mess      = "";     /* сообщение в статус-строке      */

   /* Выполнить один поворот индикатора */
   Macro Inc()
      Message( m_mess, " ", m_graphics(m_cur_index) );
      m_cur_index = m_cur_index + 1;
      if ( m_cur_index >= m_size )
         m_cur_index = 0;
      end;
   End;

   /* Инициализировать статус-строку */
   Macro Init( mess )
      m_mess = mess;
      Inc();
   End;

   /* Очистить статус-строку */
   Macro Done()
      Message("");
   End;

   /* Деструктор класса */
   Macro Destructor()
      Done();
   End;

   /* Конструктор класса */
   Init(mess);

   m_graphics(0) = "-";
   m_graphics(1) = "\\";
   m_graphics(2) = "|";
   m_graphics(3) = "/";

   m_size = m_graphics.Size();
END;

/* Пара */
Private
CLASS Pair( first_parm, second_parm )

   var first;
   var second;

   first  = first_parm;
   second = second_parm;

END;

/* Обработать специальные поля (шапка и подвал отчета) */
MACRO TPL_SetExternNames( RepForm )

   /*
       Функция может быть переопределена с помощью переменной TPL_ProcSetExternNames в
       вызывающем модуле, т.к. специфична для каждого отчета.
   */
   return;

END;

/* Удовлетворяет ли переменная необходимым условиям */
MACRO TPL_GetStatusMask( varsd, mask )

   /*
       Функция может быть переопределена с помощью переменной TPL_ProcGetStatusMask в
       вызывающем модуле, если это необходимо.
   */
   return true;

END;

/* Вызывается перед вставкой строки Str в рабочий шаблон */
MACRO TPL_BeforeInsWork( Str )

   /*
       Функция может быть переопределена с помощью переменной TPL_ProcBeforeInsWork в
       вызывающем модуле, если это необходимо.
   */
   return;

END;

/* Есть ли в шаблоне поле с именем или индексом Field */
MACRO TPL_HasField( RepForm, Field )

   /* если поля нет, то генерится Runtime Error... */
   RepForm.Field(Field);
   return true;

   /* ...который перехватываем здесь */
   OnError(err);
   if ( err.Code != 40 )
      RunError();
   end;
   return false;
END;

/* Получить количество полей шаблона */
MACRO TPL_GetNumFields( RepForm )
    var i = 0;

    while (true)
        RepForm.field(i);
        i = i + 1;
    end;

    onError(e);
    if (e.code != 40)
        runError();
    end;

    return i;
END;


/* Есть ли в шаблоне поле с именем или индексом Field */
MACRO TPL_SetField( RepForm, Field, Value )

   if ( TPL_HasField(RepForm,Field) )
      RepForm.Value(Field) = Value;
      return true;
   end;

   return false;
END;

/* Получить массив каталогов с макрофайлами */
Private
MACRO GetMacroDirs( mdirs )
   var val_type = V_UNDEF,
       err_code = 0,
       val      = "",
       userPath = "",
       ind      = 0;

   ASize(mdirs,0);

   val_type = GetRegistryValue(MACRO_REGPATH, V_STRING, val, err_code );

   GetRegistryValue( USER_MACRO_REGPATH, V_STRING, userPath, null);

   if ( (err_code == 0) and (val_type == V_STRING) )
      val = nvl(userPath, "") + ";" + val;

      ind = Index(val,";");
      while ( ind > 0 )
         mdirs(ASize(mdirs)) = SubStr(val,1,ind-1);
         val = SubStr(val,ind+1);
         ind = Index(val,";");
      end;
      mdirs(ASize(mdirs)) = val;
   else
      MsgBox( "Ошибка чтения настройки|", MACRO_REGPATH );
      Exit(1);
   end;

END;

/* Преобразовать строку в дату */
Private
MACRO GetDateFromStr( str_date )
   var day  = 0,
       mon  = 0,
       year = 0;

   var ind = 0;

   str_date = Trim(str_date);

   ind      = StrBrk(str_date,".,-/\\");
   day      = Int( SubStr(str_date,1,ind) );
   str_date = SubStr(str_date,ind+1);
   ind      = StrBrk(str_date,".,-/\\");
   mon      = Int( SubStr(str_date,1,ind) );
   str_date = SubStr(str_date,ind+1);
   year     = Int( str_date );

   return Date(day,mon,year);
END;

/* Найти шаблон для печати */
Private
MACRO GetTplName( TplName, reportDate: date )

   file ftpl() txt;

   array mdirs;

   var found = false;
   var stat  = true;
   var name  = "";
   var i  = 0;
   var idir  = 0;
   var ndirs = 0;
   var str   = "";


   var date1 = Date(31,12,9999);
   var date2 = Date( 0, 0,   0);
   var fileList = TDirList();


   /* Получаем список каталогов макрофайлов */
   GetMacroDirs( mdirs );

   ndirs = ASize(mdirs);

   /* Пока не нашли - ищем в каждом каталоге */
   while( (idir < ndirs) and (not found) )

      i = 0;

      /* Пока не нашли и есть шаблоны в каталоге - открываем и проверяем */
      name = mdirs(idir) + "\\" + TplName + "_" + "*.tpl";

      fileList.list(name, "f");

      while( (i < fileList.count) and (not found) )

         date1 = Date(31,12,9999);
         date2 = Date( 0, 0,   0);

         name = mdirs(idir) + "\\" + fileList.name(i);

         stat = Open(ftpl, name);

         if ( stat )
            /* Ищем период действия шаблона */
            Rewind(ftpl);
            while( stat and Next(ftpl) )
               str = Trim(ftpl.Str);
               if ( SubStr(str,1,1) == SERVICE_SIGN )
                  if ( Index(str,DATE1_STR) > 0 )
                     date1 = GetDateFromStr( SubStr(str,Index(str,DATE1_STR)+StrLen(DATE1_STR)) );
                  end;
                  if ( Index(str,DATE2_STR) > 0 )
                     date2 = GetDateFromStr( SubStr(str,Index(str,DATE2_STR)+StrLen(DATE2_STR)) );
                  end;
               end;

               stat = (date1 == Date(31,12,9999)) or (date2 == Date(0,0,0));
            end;

            Close( ftpl );

            /* Подходит ли шаблон нам? */
            stat = true;
            if ( (date1 <= reportDate) and (reportDate <= date2) )
               found = true;
            end;

         end;

         i = i + 1;
      end;

      stat = true;

      idir = idir + 1;
   end;

   if ( not found )
      MsgBox("Не найден подходящий для печати шаблон");
      Exit(1);
   end;

   return name;
END;

/* Получить значение переменной в виде строки */
Private
MACRO GetStrVarMean(attributeName, isKopeck, isZeroKopeck, chapter)
    var av = report.attributeValue(attributeName);
    var account = substr(attributeName, 1, 7);
    /* у счетов типа 0, переменные в шаблоне задаются в формате БнББББРу0, БнБББББПо0 и БнБББББ__0 */
    if (substr(attributeName, 10, 1) == "0")
        if (substr(attributeName, 8, 1) == "Р")
            return string((report.attributeValue(account + "РуА").exact - report.attributeValue(account + "РуП").exact):0:2);
        elif (substr(attributeName, 8, 1) == "П") 
            return string((report.attributeValue(account + "ПоА").exact - report.attributeValue(account + "ПоП").exact):0:2);
        elif (substr(attributeName, 8, 1) == "_") 
            return string((report.attributeValue(account + "__А").exact - report.attributeValue(account + "__П").exact):0:2);
        else
            MsgBox("Ошибка чтения значения переменной " + attributeName);
            Exit(1);
        end;
    end;

    if (av == null)
        if (report.form.attribute(attributeName) == null)
            MsgBox("Ошибка чтения значения переменной " + attributeName);
            Exit(1);
        else
            if (chapter == 5)
                return execExp("String(0.0:0:" + precision + ")");
            else
                if (isKopeck or РасчетВКопейках)
                    return String($0.00);
                else
                    return String(0);
                end;
            end;
        end;
    end;

    if (av.exact == 0)
       if (chapter == 5)
            return execExp("String(0.0:0:" + precision + ")");
       else
            if (isZeroKopeck)
                return String($0.00);
            else
                return String(0);
            end;
       end;
    end;

    if (av.exact == null)
        MsgBox("Не определено значение переменной " + attributeName);
        exit(1);
    end;

    if ((isKopeck) and (chapter != 5))
        return av.exactAsString;
    else
        return av.currentAsString;
    end;

    return "";
END;

/* Создать рабочий шаблон */
Private
MACRO GetWorkTplName( TplName )

   var  formId   = НайтиИдентификаторОтчетаПоНазванию( {Название отчета} );
   var  badMasks = TArray();
   var  indic    = ProcessIndic("Подготовка шаблона \"" + TplName + "\" к печати отчета...");

   /* Проверить маску */
   Macro getAddStatusMask( str_mask )

      /* Создать список масок */
      macro set_masks( masks, str_mask )
         var ind = 0;

         ASize(masks,0);

         ind = Index(str_mask,",");
         while( ind > 0 )
            masks(ASize(masks)) = Trim(SubStr(str_mask,1,ind-1));
            str_mask = SubStr(str_mask,ind+1);
            ind      = Index(str_mask,",");
         end;
         masks(ASize(masks)) = Trim(str_mask);
      end;

      /* Искать маску в списке "плохих" */
      macro found_in_bad_mask( first, second )
         var i = 0;
         var n = badMasks.Size();

         while( i < n )
            if ( (badMasks(i).first <= first) and (second <= badMasks(i).second) )
               return true;
            end;
            i = i + 1;
         end;

         return false;
      end;

      /* Проверить одну маску */
      macro check_mask( mask )
         var first     = "";
         var second    = "";
         var ind       = 0;
         var ind_range = Index(mask,"-");
         var stat      = false;
         var mask_ok   = false;

         /* Определяем диапазон имен переменных */
         if ( ind_range > 0 )
            first  = Trim(SubStr(mask,1,ind_range-1));
            second = Trim(SubStr(mask,ind_range+1)) + StrFor(255);
         else
            first  = Trim(mask);
            second = first + StrFor(255);
         end;

         /* Сначала поищем в массиве "плохих" масок */
         if ( found_in_bad_mask(first,second) )
            return false;
         end;

         /* Есть ли печатаемые переменные в данном диапазоне? */
         /* Есть ли печатаемые переменные в данном диапазоне? */
         ClearRecord(varsd);
         varsd.iFormId   = formId;
         varsd.szVarName = first;
         stat = GetGE(varsd);

         while(     stat
                and (varsd.iFormId   == formId)
                and (varsd.szVarName >= first )
                and (varsd.szVarName <= second)
              )
            indic.inc();

            mask_ok = ExecMacro2( TPL_ProcGetStatusMask, varsd, mask );

            if ( mask_ok )
               return true;
            end;

            stat = Next(varsd);
         end;

         /* Занесем в массив "плохих" масок */
         if ( StrLen(mask) <= 5 )
            BadMasks(BadMasks.Size()) = Pair(first,second);
         end;

         return false;
      end;

      array masks;

      var imask    = 0;
      var nmasks   = 0;
      var add_stat = false;

      /* Создать список масок */
      set_masks(masks,str_mask);
      nmasks = ASize(masks);

      /* Проверить каждую маску */
      while( (imask < nmasks) and (not add_stat) )
         add_stat = check_mask(masks(imask));

         imask = imask + 1;
      end;

      return add_stat;
   End;

   /* Проверить выражение */
   Macro getAddStatusExpr( str_expr )

      macro setFuncValue( str, FuncName, Proc )

          macro get_brr( str, ind_brl )
              var i = ind_brl;
              var l = StrLen(str);
              var r = 0;
              var c = "";

              var stat = false;

              while( (i < l) and (not stat) )

                 i = i + 1;

                 c = SubStr(str,i,1);

                 if ( c == "(" )
                    r = r + 1;
                 end;

                 if ( c == ")" )
                    if ( r > 0 )
                       r = r - 1;
                    else
                       stat = true;
                    end;
                 end;

              end;

              if ( not stat )
                 i = 0;
              end;

              return i;
          end;

          var ind_fun = Index(str,FuncName);
          var ind_brl = 0;
          var ind_brr = 0;

          var parm = "";

          if ( ind_fun > 0 )
              parm    = SubStr(str,ind_fun+StrLen(FuncName));
              ind_brl = Index(parm,"(");
              ind_brr = get_brr(parm,ind_brl);

              if ( (ind_brl <= 0) and (ind_brr <= 0) )
                  MsgBox("Ошибочное выражение: " + str_expr);
                  Exit(1);
              end;

              parm = Trim( SubStr(parm,ind_brl+1,ind_brr-ind_brl-1) );

              str = SubStr(str,1,ind_fun-1) + ExecMacro2(Proc,parm) + SubStr(str,ind_fun+StrLen(FuncName)+ind_brr);

              setFuncValue(str,FuncName,Proc);
          end;

          SetParm(0,str);
      end;

      macro getDay( str_date )
          var day = 0;
          var dat = ExecExp(str_date);

          if ( ValType(dat) != V_DATE )
             MsgBox("Ошибочное выражение: " + str_expr);
             Exit(1);
          end;

          DateSplit(dat,day,null,null);

          return day;
      end;

      macro getMon( str_date )
          var mon = 0;
          var dat = ExecExp(str_date);

          if ( ValType(dat) != V_DATE )
             MsgBox("Ошибочное выражение: " + str_expr);
             Exit(1);
          end;

          DateSplit(dat,null,mon,null);

          return mon;
      end;

      macro setDates( str )
          var ed = 0, em = 0, ey = 0;
          var bd = 0, bm = 0, by = 0;

          DateSplit(     ДатаОтчета, ed, em, ey );
          DateSplit( ПредДатаОтчета, bd, bm, by );

          str = StrSubst(str,"ПредДатаОтчета",String("Date(",bd,",",bm,",",by,")"));
          str = StrSubst(str,    "ДатаОтчета",String("Date(",ed,",",em,",",ey,")"));

          SetParm(0,str);
      end;

      setDates    ( str_expr );
      setFuncValue( str_expr, FUNC_VNAME, @GetStrVarMean );
      setFuncValue( str_expr, FUNC_DAY,   @getDay        );
      setFuncValue( str_expr, FUNC_MON,   @getMon        );

      return ExecExp(str_expr);
   End;

   file tplo() txt write;
   file tpli() txt;

   var WorkTplName = GetTxtFileName(TplName);
   var fstr        = "";
   var ind         = 0;
   var add_status  = false;

   if ( not Open(tpli,TplName) )
      MsgBox("Ошибка открытия файла шаблона|" + TplName);
      Exit(1);
   end;

   if ( not Open(tplo,WorkTplName) )
      MsgBox("Ошибка открытия файла шаблона|" + WorkTplName);
      Exit(1);
   end;

   /* Цикл по строкам шаблона */
   Rewind(tpli);
   while( Next(tpli) )

      indic.inc();

      /* Комментарии пропускаем */
      if ( SubStr(tpli.Str,1,1) != COMMENT_SIGN )

         fstr = Trim(tpli.Str);

         /* Служебная ли строка?.. */
         if ( Index(fstr,SERVICE_SIGN) > 0 )
            /* ...да - проверяем маску... */
            ind = Index(fstr,MASK_STR);
            if ( ind > 0  )
               fstr = Trim(SubStr(fstr,ind+StrLen(MASK_STR)));
               add_status = getAddStatusMask(fstr);
            end;
            /* ...или выражение */
            ind = Index(fstr,EXPR_STR);
            if ( ind > 0  )
               fstr = Trim(SubStr(fstr,ind+StrLen(EXPR_STR)));
               add_status = getAddStatusExpr(fstr);
            end;
         else
            /* ...нет - в зависимости от предыдущего тэга вставляем в рабочий шаблон или пропускаем */
            if ( add_status )
               tplo.Str = tpli.Str;

               /* Допускаем пользовательскую корректировку перед записью */
               ExecMacro( TPL_ProcBeforeInsWork, tplo.Str );

               if ( not Insert(tplo) )
                  MsgBox("Ошибка вставки строки в шаблон");
                  Exit(1);
               end;
            end;
         end;
      end;

   end;

   return WorkTplName;
END;

/* Напечатать отчет */
MACRO TPL_PrintReport( TplName, reportDate: date, isKopeck, isBool, chapter )

   if ( ValType( reportDate ) == V_UNDEF )
        reportDate = ДатаОтчета;
   end;

   var FullTplName = GetTplName(TplName,reportDate);
   var WorkTplName = GetWorkTplName( FullTplName );
   var RepForm     = TRepForm(WorkTplName);
   var NumFields   = TPL_GetNumFields(RepForm);
   var i           = 0;

   /* Обработать поля шапки и подвала отчета */
   ExecMacro( TPL_ProcSetExternNames, RepForm );

   while( i < NumFields )

      /* Для полей, соответствующих переменным ищем значения */
      if ( SubStr(RepForm.Field(i).Name,1,FIELD_SERVNAME_PREF_LEN) != FIELD_SERVNAME_PREF )
         /* Получаем строковое значение переменной */
         RepForm.Value(i) = GetStrVarMean( RepForm.Field(i).Name, isKopeck, null, chapter );
      end;

      i = i + 1;

   end;

   /* Печать шаблона */
   RepForm.Write;
END;

/* eof */
