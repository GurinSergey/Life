/**
 * Класс TDataBank и его наследники.
 *
 * @since   09.11.2007
 * @author  Ivkina Olga
 * @version 6.00.020.??
 *       Коркин Иван: Из расчета кассовых символов 80/81 
 *                    исключены проводки с/на 60322*, 60323*
// KS  12.12.2013 Перенос пользовательских доработок в 31ю сборку
// GSP 25.02.2014 адаптация макроса под Лайф, настройка расчета 80 и 81 символов
 */

import BankInter;
import RsbDataSet;
import globals;
import cb_sql;
import rcb_lib;
import repException;
import departmentFilter;

import CFGlobal;
import CFSymbol;
import CFTuneTable;

/* EVG To 2030 26/10/2011 Унификация */
import "fg_Life_parm.mac";


/*import testlib;

var p = TSQLProfiler(getTxtFileName("!!_202_profiler"));

p.on();
*/

/**
 * Банк данных.
 */
class TDataBank()
    /**
     * Конструктор.
     */
    macro constructorTDataBank()
    end;

    /**
     * Очистить кэш данных.
     */
    macro clear()
        throw(TPureVirtualMethodCallException("TDataBank::clear"));
    end;

    /**
     * Кэшировать данные.
     *
     * @param     balanceMask    маска балансовых счетов
     */
    macro cache(balanceMask : String)
        throw(TPureVirtualMethodCallException("TDataBank::cache"));
    end;

    /**
     * Рассчитать значение символа по документам.
     *
     * @param     symbol символ для расчета
     */
    macro calculateDocumentSymbol(symbol : TSymbol)
        throw(TPureVirtualMethodCallException("TDataBank::calculateDocumentSymbol"));
    end;

    /**
     * Рассчитать значение символа по остаткам.
     *
     * @param     symbol символ для расчета
     * @param     balanceMask
     * @param     date   дата, за которую вычислять остаток.
     */
    macro calculateRestSymbol(symbol : TSymbol, balanceMask : String, date : Date)
        throw(TPureVirtualMethodCallException("TDataBank::calculateRestSymbol"));
    end;

    /**
     * Рассчитать значение символа по оборотам.
     *
     * @param     symbol символ для расчета
     * @param     debetBalanceMask   маска балансовых счетов по дебету
     * @param     creditBalanceMask  маска балансовых счетов по кредиту
     */
    macro calculateTurnSymbol(symbol : TSymbol, debetBalanceMask : String, creditBalanceMask : String)
        throw(TPureVirtualMethodCallException("TDataBank::calculateTurnSymbol"));
    end;


    /**
     * Получить список кодов ОКАТО, участвующих
     * в расчете, отсортированный по возрастанию.
     */
    macro getSortedOkatoCodes()
        throw(TPureVirtualMethodCallException("TDataBank::getSortedOkatoCodes"));
    end;

    /**
     * Вычислить дебетовые обороты по счетам.
     *
     * @param     balanceMask   маска б/с
     */
    macro calculateDebetTurns(balanceMask : String)
        throw(TPureVirtualMethodCallException("TDataBank::calculateDebetTurns"));
    end;

    /**
     * Вычислить кредитовые обороты по счетам.
     *
     * @param     balanceMask   маска б/с
     */
    macro calculateCreditTurns(balanceMask : String)
        throw(TPureVirtualMethodCallException("TDataBank::calculateCreditTurns"));
    end;

    /**
     * Рассчитать значения без символов.
     */
    macro calculateNullSymbols(receiptsSymbol : TSymbol, expeditureSymbol : TSymbol, balanceMask : String)
        throw(TPureVirtualMethodCallException("TDataBank::calculateNullSymbols"));
    end;

    constructorTDataBank();
end;


/**
 * Банк данных для указания 1881-У.
 */
class (TDataBank) TDataBank1881

    /* EVG To 2030 26/10/2011 Унификация */
    private Var fgBank = fg_life_subject({OurBank});
    var AccMascClause = "\n" + "  and not (T_ACCOUNT_PAYER    like '20208%' AND (T_ACCOUNT_RECEIVER like '60322%' OR T_ACCOUNT_RECEIVER like '60323%')) " +
                        "\n" + "  and not (T_ACCOUNT_RECEIVER like '20208%' AND (T_ACCOUNT_PAYER      like '60322%' OR T_ACCOUNT_PAYER      like '60323%')) ";
    if( fgBank.is_EXV )
       AccMascClause = "\n  ";
    end;
    /* --- EVG --- */

    /**
     * дата начала отчетного периода
     */
    private var m_beginReportDate : Date;
    /**
     * дата окончания отчетного периода
     */
    private var m_endReportDate : Date;
    /**
     * номер плана
     */
    private var m_balancePlanNumber;

    private var tuneTable;
    private var mainAccountMasks;
    private var corrAccountMasks;

    /**
     * Конструктор.
     */
    macro constructorTDataBank1881()
        InitTDataBank();
        m_beginReportDate   = globalInstance().getRcbReport().context.period.beginDate;
        m_endReportDate     = globalInstance().getRcbReport().context.period.endDate;
        m_balancePlanNumber = rcbApplication().parameters.balancePlanNumber;

       tuneTable = TTuneTable1881();
       mainAccountMasks = tuneTable.getMainAccountMasks("80,81");
       corrAccountMasks = tuneTable.getCorrAccountMasks("80,81");
    end;

    /**
     * Очистить кэш данных.
     */
    macro clear()
        sql_execute("call rep_opt.resetDepartmentCodesCache();");
        sql_truncate("dfcash_tmp");
    end;

    /**
     * Кэшировать данные.
     *
     * @param     balanceMask    маска балансовых счетов
     */
    macro cache(balanceMask : String, otherBalanceMask : String)
        sql_execute("call rep_opt.cacheDepartmentCodes( " + getSqlDate(m_endReportDate) + " , " + getSqlString("dp_dep.t_code IN " + rcbDepartmentList().getAsSqlSetFull()) + " );");

        sql_execute( "UPDATE drepDepCode_tmp"
            + "\n" + "   SET t_okatoCode = SUBSTR(t_okatoCode, 1, 5);");

        macro getCommandText(isInstajedSymbol : Bool)
            var commandText = "INSERT INTO dfcash_tmp(t_documentAutoKey,"
                     + "\n" + "                       t_documentSum,"
                     + "\n" + "                       t_symbolCode,"
                     + "\n" + "                       t_symbolValue,"
                     + "\n" + "                       t_okatoCode)"
                     + "\n" + "    SELECT /*+ LEADING(daccTrn_dbt) */"
                     + "\n" + "           arhdoc.t_accTrnId AS t_documentAutoKey,"
                     + "\n" + "           arhdoc.t_sum_natCur AS t_documentSum,"
                     + "\n" + "           symbcash.t_symbol AS t_symbolCode,"
                     + "\n" + "           NVL(symbcash.t_sum, arhdoc.t_sum_natCur) AS t_symbolValue,"
                     + "\n" + "           CASE"
                     + "\n" + "               WHEN listsymb.t_type_symbol = 1"
                     + "\n" + "                   THEN depcode_debet.t_okatocode"
                     + "\n" + "               WHEN listsymb.t_type_symbol = 2"
                     + "\n" + "                   THEN depcode_credit.t_okatocode"
                     + "\n" + "               WHEN listsymb.t_type_symbol = 3"
                     + "\n" + "                   THEN CASE"
//                     + "\n" + "                            WHEN listsymb.t_symb_cash IN (' 89', ' 97', ' 99', '100')"
                     + "\n" + "                            WHEN listsymb.t_symb_cash IN (' 82', ' 85', ' 87', ' 89', ' 97', ' 99', '100')" // KS 03.02.2012 ... 03.04.2012 vihrov I-00175219-1
                     + "\n" + "                                THEN depcode_debet.t_okatocode"
//                     + "\n" + "                            WHEN listsymb.t_symb_cash IN (' 96', ' 98')"
                     + "\n" + "                            WHEN listsymb.t_symb_cash IN (' 83', ' 86', ' 88', ' 96', ' 98')" // KS 03.02.2012 ... 03.04.2012 vihrov I-00175219-1
                     + "\n" + "                                THEN depcode_credit.t_okatocode"
                     + "\n" + "                               ELSE CHR(1)"
                     + "\n" + "                           END"
                     + "\n" + "               WHEN accblnc_debet.t_balance0 = '20208'"
                     + "\n" + "                   THEN depcode_debet.t_okatocode"
                     + "\n" + "               WHEN accblnc_credit.t_balance0 = '20208'"
                     + "\n" + "                   THEN depcode_credit.t_okatocode"
                     + "\n" + "               WHEN listsymb.t_type_symbol IS NULL"
                     + "\n" + "                   THEN CASE"
                     + "\n" + "                            WHEN INSTR(account_debet.t_type_account, 'А') <> 0"
                     + "\n" + "                                THEN depcode_debet.t_okatoCode"
                     + "\n" + "                            WHEN INSTR(account_credit.t_type_account, 'А') <> 0"
                     + "\n" + "                                THEN depcode_credit.t_okatoCode"
                     + "\n" + "                            ELSE CHR(1)"
                     + "\n" + "                        END"
                     + "\n" + "               ELSE CHR(1)"
                     + "\n" + "           END AS t_okatocode"
                     + "\n" + "      FROM (select /*+inline */ * "
                     + "\n" + "              from daccTrn_dbt "
                     + "\n" + "             where T_CHAPTER = 1  "
                     + "\n" + "               and t_fiid_payer = 0 and t_fiid_receiver = 0 "
                     + "\n" + "               and t_date_carry BETWEEN " + getSqlDate(m_beginReportDate)
                     + "\n" + "                                    AND  " + getSqlDate(m_endReportDate)
                     + "\n" + " " + AccMascClause + ")"
                     + "\n" + "             arhdoc,"
                     + "\n" + "           (SELECT t_symbol, t_accTrnId, t_docKind, t_sum, t_kind FROM dsymbcash_dbt"
                     + "\n" + "            UNION ALL"
                     + "\n" + "            SELECT null t_symbol, null t_accTrnId, null t_docKind, null t_sum, null t_kind FROM DUAL) symbcash,"
                     + "\n" + "           dlistsymb_dbt listsymb,"
                     + "\n" + "           daccblnc_dbt  accblnc_debet,"
                     + "\n" + "           daccount_dbt  account_debet,"
                     + "\n" + "           drepDepCode_tmp  depcode_debet,"
                     + "\n" + "           daccblnc_dbt  accblnc_credit,"
                     + "\n" + "           daccount_dbt  account_credit,"
                     + "\n" + "           drepDepCode_tmp  depcode_credit"
                     + "\n" + "     WHERE arhdoc.t_chapter = 1"
                     + "\n" + "       AND arhdoc.t_date_carry BETWEEN " + getSqlDate(m_beginReportDate)
                     + "\n" + "                                   AND " + getSqlDate(m_endReportDate)
                     + "\n" + "       AND CASE"
                     + "\n" + "               --если сумма не разнесена по символам"
                     + "\n" + "               WHEN NOT EXISTS (SELECT 1"
                     + "\n" + "                                  FROM dsymbcash_dbt s"
                     + "\n" + "                                 WHERE s.t_accTrnId = arhdoc.t_accTrnId"
                     + "\n" + "                                   AND s.t_docKind = 1)"
                     + "\n" + "                   AND symbcash.t_symbol IS NULL"
                     + "\n" + "                   AND ("   + convertMaskToSqlFormat(balanceMask + "," + otherBalanceMask, "accblnc_credit.t_balance"  + m_balancePlanNumber)
                     + "\n" + "                       OR " + convertMaskToSqlFormat(balanceMask + "," + otherBalanceMask, "accblnc_debet.t_balance"  + m_balancePlanNumber) + ")"
                     + "\n" + "                    THEN 1"
                     + "\n" + "               --если сумма по приходу не разнесена по символам"
                     + "\n" + "               WHEN NOT EXISTS (SELECT 1"
                     + "\n" + "                                  FROM dsymbcash_dbt s"
                     + "\n" + "                                 WHERE s.t_accTrnId = arhdoc.t_accTrnId"
                     + "\n" + "                                   AND s.t_docKind = 1"
                     + "\n" + "                                   AND s.t_kind = 1)"
                     + "\n" + "                   AND symbcash.t_symbol IS NULL"
                     + "\n" + "                   AND "+ convertMaskToSqlFormat(balanceMask + "," + otherBalanceMask, "accblnc_debet.t_balance"  + m_balancePlanNumber)
                     + "\n" + "                    THEN 1"
                     + "\n" + "               --если сумма по расходу не разнесена по символам"
                     + "\n" + "               WHEN NOT EXISTS (SELECT 1"
                     + "\n" + "                                  FROM dsymbcash_dbt s "
                     + "\n" + "                                 WHERE s.t_accTrnId = arhdoc.t_accTrnId"
                     + "\n" + "                                   AND s.t_docKind = 1"
                     + "\n" + "                                   AND s.t_kind = 2)"
                     + "\n" + "                   AND symbcash.t_symbol IS NULL"
                     + "\n" + "                   AND "+ convertMaskToSqlFormat(balanceMask + "," + otherBalanceMask, "accblnc_credit.t_balance"  + m_balancePlanNumber)
                     + "\n" + "                    THEN 1"
                     + "\n" + "               WHEN symbcash.t_docKind = 1 AND symbcash.t_accTrnId = arhdoc.t_accTrnId"
                     + "\n" + "                    THEN 1"
                     + "\n" + "               ELSE 0"
                     + "\n" + "           END = 1"
                     + "\n" + "       AND symbcash.t_accTrnId " + ternary(isInstajedSymbol, "= arhdoc.t_accTrnId", "IS NULL")
                     + "\n" + "       AND listsymb.t_docKind(+)   = 1"
                     + "\n" + "       AND listsymb.t_symb_cash(+) = symbcash.t_symbol"
                     + "\n" + "       AND accblnc_debet.t_chapter = 1"
                     + "\n" + "       AND accblnc_debet.t_account = arhdoc.t_account_payer"
                     + "\n" + "       AND account_debet.t_chapter = 1"
                     + "\n" + "       AND account_debet.t_account = accblnc_debet.t_account"
                     + "\n" + "       AND depcode_debet.t_departmentCode(+) = account_debet.t_branch"
                     + "\n" + "       AND accblnc_credit.t_chapter = 1"
                     + "\n" + "       AND accblnc_credit.t_account = arhdoc.t_account_receiver"
                     + "\n" + "       AND account_credit.t_chapter = 1"
                     + "\n" + "       AND account_credit.t_account = accblnc_credit.t_account"
                     + "\n" + "       AND depcode_credit.t_departmentCode(+) = account_credit.t_branch"
                     + "\n" + "       AND CASE"
                     + "\n" + "               WHEN    (     INSTR(account_debet.t_type_account,  'А') <> 0"
                     + "\n" + "                         AND account_debet.t_code_currency =  " + NATCUR + ")"
                     + "\n" + "                    OR (     INSTR(account_credit.t_type_account, 'А') <> 0"
                     + "\n" + "                         AND account_credit.t_code_currency =  " + NATCUR + ")"
                     + "\n" + "                   THEN 1"
                     + "\n" + "               ELSE 0"
                     + "\n" + "           END = 1"
                     + "\n" + "       AND (       trim(arhdoc.t_kind_oper) = '3'"
                     + "\n" + "             AND  (           (("+ convertMaskToSqlFormat(balanceMask, "accblnc_debet.t_balance"  + m_balancePlanNumber) + ")"
                     + "\n" + "                          AND (" + rcbAccountFilter.getAsSqlString("account_debet") +"))"
                     + "\n" + "                     OR       (("+ convertMaskToSqlFormat(balanceMask, "accblnc_credit.t_balance" + m_balancePlanNumber) + ")"
                     + "\n" + "                          AND (" + rcbAccountFilter.getAsSqlString("account_credit") + ")) )"
                     + "\n" + "              OR  (     ((         accblnc_debet.t_balance"  + m_balancePlanNumber + " = '20208')"
                     + "\n" + "                         AND ("  + rcbAccountFilter.getAsSqlString("account_debet") + ")"
                     + "\n" + "                         AND (NOT accblnc_credit.t_balance" + m_balancePlanNumber + " LIKE '202%' OR account_credit.t_code_currency <>  " + NATCUR + "))"
                     + "\n" + "                     OR  ((        accblnc_credit.t_balance" + m_balancePlanNumber + " = '20208')"
                     + "\n" + "                         AND ("  + rcbAccountFilter.getAsSqlString("account_credit") + ")"
                     + "\n" + "                         AND (NOT accblnc_debet.t_balance"  + m_balancePlanNumber + " LIKE '202%' OR account_debet.t_code_currency <>  " + NATCUR + ")) ))";

            return commandText;
        end;

        sql_execute(getCommandText(true));
        sql_execute(getCommandText(false));

     end;

    /**
     * Рассчитать значение символа по документам.
     *
     * @param     symbol символ для расчета
     */

    macro calculateDocumentSymbol(symbol : TSymbol)
        var queryText =  "SELECT NVL(SUM(t_symbolValue), 0) AS t_value"
                + "\n" + "  FROM dfcash_tmp"
                + "\n" + " WHERE TRIM(t_symbolCode) = '" + symbol.getCode() + "'"
                + "\n" + "   AND (    " + getSqlString(symbol.getOkatoCode()) + " = " + getSqlString(globalInstance().getPart1OkatoCode())
                + "\n" + "         OR " + getSqlString(symbol.getOkatoCode()) + " = t_okatoCode)";

        var dataSet = TRsbDataSet(queryText);

        dataSet.SetFieldType("t_value", V_MONEY);

        if (dataSet.moveNext())
            symbol.getValue().exact = dataSet.value;
        else
            symbol.getValue().exact = $0;
        end;

        symbol.getValue().recalculateScaled();
    end;

    /**
     * Рассчитать значение символа по остаткам.
     *
     * @param     symbol символ для расчета
     * @param     balanceMask
     * @param     date   дата, за которую вычислять остаток.
     */
     macro calculateRestSymbol(symbol : TSymbol, balanceMask : String, restDate : Date)

        var queryText = "SELECT NVL(ABS(SUM((SELECT restdate.t_rest"
               + "\n" + "                      FROM drestdate_dbt restdate"
               + "\n" + "                     WHERE restdate.t_accountId       = account.t_accountId"
               + "\n" + "                       AND restdate.t_restDate IN (SELECT MAX(rd.t_restDate)"
               + "\n" + "                                                       FROM drestdate_dbt rd"
               + "\n" + "                                                      WHERE rd.t_accountId       = account.t_accountId"
               + "\n" + "                                                        AND rd.t_restDate   <= " +  getSqlDate(restDate) + ")))), 0) t_value"
               + "\n" + "  FROM daccount_dbt    account,"
               + "\n" + "       daccblnc_dbt    accblnc,"
               + "\n" + "       drepdepcode_tmp depcode"
               + "\n" + " WHERE account.t_chapter = 1"
               + "\n" + "   AND account.t_code_currency =  " + NATCUR
               + "\n" + "   AND accblnc.t_accountId = account.t_accountId"
               + "\n" + "   AND (" + convertMaskToSqlFormat(balanceMask, "accblnc.t_balance" + m_balancePlanNumber) + ")"
               + "\n" + "   AND " + rcbAccountFilter.getAsSqlString("account")
               + "\n" + "   AND depcode.t_departmentCode = account.t_branch"
               + "\n" + "   AND (   " + getSqlBoolIdentity(symbol.getOkatoCode() == globalInstance().getPart1OkatoCode())
               + "\n" + "        OR " + getSqlString(symbol.getOkatoCode()) + "= depcode.t_okatoCode )" ;

        var dataSet = TRsbDataSet(queryText);

        dataSet.SetFieldType("t_value", V_MONEY);

        if (dataSet.moveNext())
            symbol.getValue().exact = dataSet.value;
        else
            symbol.getValue().exact = $0;
        end;

        symbol.getValue().recalculateScaled();
    end;

    /**
     * Рассчитать значение символа по оборотам.
     *
     * @param     symbol символ для расчета
     * @param     debetBalanceMask   маска балансовых счетов по дебету
     * @param     creditBalanceMask  маска балансовых счетов по кредиту
     */

    macro calculateTurnSymbol(symbol : TSymbol, debetBalanceMask : String, creditBalanceMask : String,  isDebet : Bool)

        var dataSet = TRsbDataSet("SELECT NVL(SUM(t_documentSum), 0) AS t_value"
                + "\n" +          "  FROM dfcash_tmp   dfcash, "
                + "\n" +          "       (select /*+inline */ * "
                + "\n" +          "         from daccTrn_dbt "
                + "\n" +          "         where T_CHAPTER = 1  "
//                + "\n" +          "           and t_fiid_payer = 0 and t_fiid_receiver = 0 "                               //GSP
                + "\n" +          "           and t_date_carry BETWEEN " + getSqlDate(m_beginReportDate)
                + "\n" +          "                                     AND  " + getSqlDate(m_endReportDate)
                + AccMascClause + " )"
                + "\n" +          "        arhdoc "
                + "\n" +          " WHERE (    " + getSqlString(symbol.getOkatoCode()) + " = " + getSqlString(globalInstance().getPart1OkatoCode())
                + "\n" +          "         OR " + getSqlString(symbol.getOkatoCode()) + " = t_okatoCode)"
                + "\n" +          "   AND dfcash.t_documentAutoKey = arhdoc.t_accTrnId"
                + "\n" +          "   AND ("  + convertMaskToSqlFormat(ternary(isDebet,  debetBalanceMask, creditBalanceMask), "arhdoc.t_account_"+ternary(isDebet, "payer",    "receiver")) + ")"
                + "\n" +          "   AND ((" + convertMaskToSqlFormat(ternary(isDebet, creditBalanceMask,debetBalanceMask),  "arhdoc.t_account_"+ternary(isDebet, "receiver", "payer")) + ")"
                + "\n" +          "        OR exists(select 1 "
                + "\n" +          "                    from daccount_dbt acc "
                + "\n" +          "                   where acc.t_accountId = arhdoc.t_accountId_" + ternary(isDebet, "receiver", "payer")
                + "\n" +          "                     and acc.t_code_currency <>  " + NATCUR + ") "
                + "\n" +          "       )");

        dataSet.SetFieldType("t_value", V_MONEY);

        if (dataSet.moveNext())
            symbol.getValue().exact = dataSet.value;
        else
            symbol.getValue().exact = $0;
        end;

        symbol.getValue().recalculateScaled();

    end;

    /**
     * Получить список кодов ОКАТО, участвующих
     * в расчете, отсортированный по возрастанию.
     */
    macro getSortedOkatoCodes()
        var queryText = "SELECT distinct depcode.t_okatoCode t_okatoCode"
               + "\n" + "  FROM drepdepcode_tmp depcode"
               + "\n" + " WHERE depcode.t_okatoCode <> " + getSqlString(globalInstance().getPart1OkatoCode())
               + "\n" + "   AND depcode.t_okatoCode <> CHR(1)"
               + "\n" + "   AND depcode.t_okatoCode IS NOT NULL"
               + "\n" + "   AND CASE"
               + "\n" + "           WHEN     SUBSTR(" + getSqlString(globalInstance().getPart1OkatoCode()) + ", 1, 2) IN ('45', '46')"
               + "\n" + "                AND SUBSTR(depcode.t_okatoCode, 1, 2) IN ('45', '46')"
               + "\n" + "               THEN 0"
               + "\n" + "           ELSE 1"
               + "\n" + "       END = 1"
               + "\n" + " ORDER BY t_okatoCode";

        var okatoCodes = TArray();

        var dataSet = TRsbDataSet(queryText);

        while (dataSet.moveNext())
            okatoCodes[okatoCodes.size] = dataSet.okatoCode;
        end;

        return okatoCodes;
    end;

    /**
     * Создать источник данных для протокола расчета.
     */
    macro createCalculationProtocolDataset()
        var queryText = "SELECT t_isSymbolTypeItog,"
               + "\n" + "       t_isSymbolCodeItog,"
               + "\n" + "       t_isOkatoCodeItog,"
               + "\n" + "       t_symbolType,"
               + "\n" + "       t_symbolCode,"
               + "\n" + "       t_okatoCode,"
               + "\n" + "       t_documentNumber,"
               + "\n" + "       t_documentDate,"
               + "\n" + "       t_debetAccount,"
               + "\n" + "       t_creditAccount,"
               + "\n" + "       t_value"
               + "\n" + "  FROM (SELECT GROUPING(t_symbolType) AS t_isSymbolType,"
               + "\n" + "               GROUPING(t_symbolCode) AS t_isSymbolTypeItog,"
               + "\n" + "               GROUPING(t_okatoCode) AS t_isSymbolCodeItog,"
               + "\n" + "               GROUPING(t_documentNumber) AS t_isOkatoCodeItog,"
               + "\n" + "               symbol.t_symbolType,"
               + "\n" + "               symbol.t_symbolCode,"
               + "\n" + "               symbol.t_okatoCode,"
               + "\n" + "               symbol.t_documentNumber,"
               + "\n" + "               symbol.t_documentDate,"
               + "\n" + "               symbol.t_debetAccount,"
               + "\n" + "               symbol.t_creditAccount,"
               + "\n" + "               SUM(symbol.t_symbolValue) AS t_value"
               + "\n" + "          FROM (SELECT CASE"
               + "\n" + "                           WHEN " + convertMaskToSqlFormat(mainAccountMasks, "arhdoc.t_account_payer")
               + "\n" + "                               AND (" + convertMaskToSqlFormat(corrAccountMasks, "arhdoc.t_account_receiver")
               + "\n" + "                                      OR exists(select 1 "
               + "\n" + "                                                  from daccount_dbt acc "
               + "\n" + "                                                 where acc.t_chapter = 1 "
               + "\n" + "                                                   and acc.t_account = arhdoc.t_account_receiver"
               + "\n" + "                                                   and acc.t_code_currency <>  " + NATCUR + ")) "
               + "\n" + "                           THEN '80'"
               + "\n" + "                           WHEN " + convertMaskToSqlFormat(mainAccountMasks, "arhdoc.t_account_receiver")
               + "\n" + "                                 AND ( " + convertMaskToSqlFormat(corrAccountMasks, "arhdoc.t_account_payer")
               + "\n" + "                                      OR exists(select 1 "
               + "\n" + "                                                  from daccount_dbt acc "
               + "\n" + "                                                 where acc.t_chapter = 1 "
               + "\n" + "                                                   and acc.t_account = arhdoc.t_account_payer"
               + "\n" + "                                                   and acc.t_code_currency <>  " + NATCUR + ")) "
               + "\n" + "                           THEN '81'"
               + "\n" + "                           ELSE NVL (fcash.t_symbolcode, CHR (1))"
               + "\n" + "                       END AS t_symbolcode,"
               + "\n" + "                       CASE"
               + "\n" + "                            WHEN ((" + convertMaskToSqlFormat(mainAccountMasks, "arhdoc.t_account_payer")
               + "\n" + "                                   AND " + convertMaskToSqlFormat(corrAccountMasks, "arhdoc.t_account_receiver")
               + "\n" + "                                  ) "
               + "\n" + "                                  OR (" + convertMaskToSqlFormat(corrAccountMasks, "arhdoc.t_account_payer")
               + "\n" + "                                   AND " + convertMaskToSqlFormat(mainAccountMasks, "arhdoc.t_account_receiver")
               + "\n" + "                                 ))"
               + "\n" + "                            THEN 3"
               + "\n" + "                            ELSE NVL (listsymb.t_type_symbol, 99)"
               + "\n" + "                       END AS t_symboltype,"
               + "\n" + "                       NVL(fcash.t_okatoCode, CHR(1)) AS t_okatoCode,"
               + "\n" + "                       arhdoc.t_numb_document AS t_documentNumber,"
               + "\n" + "                       arhdoc.t_date_carry AS t_documentDate,"
               + "\n" + "                       arhdoc.t_account_payer AS t_debetAccount,"
               + "\n" + "                       arhdoc.t_account_receiver AS t_creditAccount,"
               + "\n" + "                       NVL(fcash.t_symbolValue, 0) AS t_symbolValue "
               + "\n" + "                  FROM dfcash_tmp    fcash,"
               + "\n" + "                       daccTrn_dbt   arhdoc,"
               + "\n" + "                       dlistsymb_dbt listsymb"
               + "\n" + "                 WHERE arhdoc.t_accTrnId(+) = fcash.t_documentAutoKey"
               + "\n" + "                   AND listsymb.t_docKind(+) = 1"
               + "\n" + "                   AND listsymb.t_symb_cash(+) = fcash.t_symbolCode) symbol"
               + "\n" + "         GROUP BY ROLLUP(t_symbolType, t_symbolCode, t_okatoCode,"
               + "\n" + "                         (t_documentNumber, t_documentDate, t_debetAccount,"
               + "\n" + "                          t_creditAccount, t_symbolValue)))"
               + "\n" + " WHERE t_isSymbolType = 0"
               + "\n" + " ORDER BY t_symbolType, t_isSymbolTypeItog DESC, t_symbolCode, t_isSymbolCodeItog DESC,"
               + "\n" + "          t_okatoCode, t_isOkatoCodeItog DESC, t_documentDate, t_documentNumber,"
               + "\n" + "          t_value, t_debetAccount, t_creditAccount";

//msgbox (queryText);
        return TRsbDataSet(queryText);
    end;

    /**
     * Вычислить обороты по счетам.
     *
     * @param     balanceMask   маска б/с
     * @param     isDebet       признак вычисления дебетовых оборотов
     */
    macro calculateTurns(balanceMask : String, isDebet : Bool)
        var queryText = "SELECT /*+ LEADING(daccTrn_dbt) */                                             "
               + "\n" + "       SUM(t_sum_natCur) t_value                                               "
               + "\n" + "  FROM  (select /*+inline */ * "
               + "\n" + "           from daccTrn_dbt "
               + "\n" + "          where T_CHAPTER = 1  "
               + "\n" + "            and t_fiid_payer = 0 and t_fiid_receiver = 0 "
               + "\n" + "            and t_date_carry BETWEEN " + getSqlDate(m_beginReportDate)
               + "\n" + "                                 AND  " + getSqlDate(m_endReportDate)
               + AccMascClause + " )"
/*!*/          + "\n" + "                       arhdoc,"
               + "\n" + "       daccount_dbt account,                                                   "
               + "\n" + "       daccblnc_dbt accblnc                                                    "
               + "\n" + " WHERE arhdoc.t_chapter = 1                                                    "
               + "\n" + "   AND arhdoc.t_date_carry BETWEEN " + getSqlDate(m_beginReportDate)
               + "\n" + "                               AND " + getSqlDate(m_endReportDate)
               + "\n" + "   AND accblnc.t_accountId = arhdoc.t_accountId_" + ternary(isDebet, "payer", "receiver" )
               + "\n" + "   AND account.t_accountId = arhdoc.t_accountId_" + ternary(isDebet, "payer", "receiver" )
               + "\n" + "   AND CASE                                                                    "
               + "\n" + "           WHEN (     INSTR(account.t_type_account, 'А') <> 0                  "
               + "\n" + "                  AND account.t_code_currency =  " + NATCUR + ")                 "
               + "\n" + "               THEN 1"
               + "\n" + "           ELSE 0"
               + "\n" + "       END = 1"
               + "\n" + "   AND (" + convertMaskToSqlFormat(balanceMask, "accblnc.t_balance"  + m_balancePlanNumber) + ")"
               + "\n" + "   AND " + rcbDocumentFilter().getAsSqlString("arhdoc");

        var dataSet = TRsbDataSet(queryText);

        dataSet.SetFieldType("t_value", V_MONEY);

        if (dataSet.moveNext() and (dataSet.value != null))
            return dataSet.value;
        end;

        return $0;
    end;

    /**
     * Вычислить дебетовые обороты по счетам.
     *
     * @param     balanceMask   маска б/с
     */
    macro calculateDebetTurns(balanceMask : String)
        return calculateTurns(balanceMask, true);
    end;

    /**
     * Вычислить кредитовые обороты по счетам.
     *
     * @param     balanceMask   маска б/с
     */
    macro calculateCreditTurns(balanceMask : String)
        return calculateTurns(balanceMask, false);
    end;

    /**
     * Рассчитать значения без символов.
     */
    macro calculateNullSymbols(receiptsSymbol : TSymbol, expeditureSymbol : TSymbol, balanceMask : String)
        var text = "SELECT NVL(SUM(CASE"
          + "\n" + "                    WHEN EXISTS(SELECT 1"
          + "\n" + "                                 FROM daccblnc_dbt"
          + "\n" + "                                WHERE t_accountId = arhdoc.t_accountId_payer"
          + "\n" + "                                  AND (" + convertMaskToSqlFormat(balanceMask, "t_balance" + rcbApplication.parameters.balancePlanNumber) + "))"
          + "\n" + "                     AND NOT EXISTS (SELECT 1"
          + "\n" + "                                       FROM dsymbcash_dbt s"
          + "\n" + "                                      WHERE s.t_accTrnId = arhdoc.t_accTrnId"
          + "\n" + "                                        AND s.t_kind = 1)"
          + "\n" + "                       THEN t_sum_natCur"
          + "\n" + "                   ELSE 0"
          + "\n" + "               END), 0) t_receipts,"
          + "\n" + "       NVL(SUM(CASE"
          + "\n" + "                   WHEN EXISTS(SELECT 1"
          + "\n" + "                                 FROM daccblnc_dbt"
          + "\n" + "                                WHERE t_accountId = arhdoc.t_accountId_receiver"
          + "\n" + "                                  AND (" + convertMaskToSqlFormat(balanceMask, "t_balance" + rcbApplication.parameters.balancePlanNumber) + "))"
          + "\n" + "                     AND NOT EXISTS (SELECT 1"
          + "\n" + "                                       FROM dsymbcash_dbt s"
          + "\n" + "                                      WHERE s.t_accTrnId = arhdoc.t_accTrnId"
          + "\n" + "                                        AND s.t_kind = 2)"
          + "\n" + "                       THEN t_sum_natCur"
          + "\n" + "                   ELSE 0"
          + "\n" + "               END), 0) t_expediture"
          + "\n" + "  FROM dfcash_tmp  fcash,"
/**/      + "\n" + "       (select /*+inline */ * "
          + "\n" + "          from daccTrn_dbt "
          + "\n" + "         where T_CHAPTER = 1  "
          + "\n" + "           and t_date_carry BETWEEN " + getSqlDate(m_beginReportDate)
          + "\n" + "                                AND  " + getSqlDate(m_endReportDate)

          + AccMascClause + " )"
/*!*/     + "\n" + "                    arhdoc"
          + "\n" + " WHERE arhdoc.t_accTrnId = fcash.t_documentAutoKey"
          + "\n" + "   AND fcash.t_symbolCode IS NULL";

        var dataSet = TRsbDataSet(text);

        dataSet.SetFieldType("t_receipts",   V_MONEY);
        dataSet.SetFieldType("t_expediture", V_MONEY);

        if (dataSet.moveNext())
            receiptsSymbol.getValue().exact   = dataSet.receipts;
            expeditureSymbol.getValue().exact = dataSet.expediture;
        else
            receiptsSymbol.getValue().exact   = $0;
            expeditureSymbol.getValue().exact = $0;
        end;

        receiptsSymbol.getValue().recalculateScaled();
        expeditureSymbol.getValue().recalculateScaled();
    end;

    constructorTDataBank1881();
end;


/**
 * Банк данных для указания 2627-У.
 */
class (TDataBank1881) TDataBank2627
    InitTDataBank1881();

    macro cache(balanceMask : String, otherBalanceMask : String)
        sql_execute("call rep_opt.cacheDepartmentCodes( " + getSqlDate(m_endReportDate) + " , " + getSqlString("dp_dep.t_code IN " + rcbDepartmentList().getAsSqlSetFull()) + " );");

        sql_execute( "UPDATE drepDepCode_tmp"
            + "\n" + "   SET t_okatoCode = SUBSTR(t_okatoCode, 1, 5);");

        macro getCommandText()
        var commandText = "INSERT INTO dfcash_tmp(t_documentAutoKey,"
                 + "\n" + "                       t_documentSum,"
                 + "\n" + "                       t_symbolCode,"
                 + "\n" + "                       t_symbolValue,"
                 + "\n" + "                       t_okatoCode)"
                  + "\n" + "   WITH documents AS(SELECT doc.t_accTrnId, "
                 + "\n" + "                            doc.t_sum_natCur, "
                 + "\n" + "                            account_debet.t_branch t_branch_debet,"
                 + "\n" + "                            account_credit.t_branch t_branch_credit,"
                 + "\n" + "                            accblnc_debet.t_balance"  + m_balancePlanNumber + " t_balance_debet,"
                 + "\n" + "                            accblnc_credit.t_balance"  + m_balancePlanNumber + " t_balance_credit,"
                 + "\n" + "                            account_debet.t_type_account t_type_account_debet,"
                 + "\n" + "                            account_credit.t_type_account t_type_account_credit,"
                 + "\n" + "                            DOC.T_FIID_PAYER t_fiid_debet,"
                 + "\n" + "                            DOC.T_FIID_RECEIVER t_fiid_credit"
                 + "\n" + "                       FROM daccTrn_dbt doc,"
                 + "\n" + "                            daccblnc_dbt  accblnc_debet,"
                 + "\n" + "                            daccount_dbt  account_debet,"
                 + "\n" + "                            daccblnc_dbt  accblnc_credit,"
                 + "\n" + "                            daccount_dbt  account_credit"
                 + "\n" + "                      WHERE doc.t_chapter = 1"
                 + "\n" + "                        and doc.t_state = 1" //GSP недоработка в дистрибутиве.
/*                 + "\n" + "                        AND NOT (account_credit.t_account LIKE '20208%' AND account_debet.t_account LIKE '706%')"
                 + "\n" + "                        AND NOT (account_credit.t_account LIKE '706%' AND account_debet.t_account LIKE '20208%')"*/           //GSP 25.02.2014
                 + AccMascClause
                 + "\n" + "                        AND doc.t_date_carry BETWEEN " + getSqlDate(m_beginReportDate)
                 + "\n" + "                                                    AND " + getSqlDate(m_endReportDate)
                 + "\n" + "                        AND accblnc_debet.t_accountId = doc.t_accountId_payer"
                 + "\n" + "                        AND account_debet.t_accountId = accblnc_debet.t_accountId"
                 + "\n" + "                        AND accblnc_credit.t_accountId = doc.t_accountId_receiver"
                 + "\n" + "                        AND account_credit.t_accountId = accblnc_credit.t_accountId"
                 + "\n" + "                        AND (   (account_debet.t_code_currency =  " + NATCUR + ")"
                 + "\n" + "                             OR (account_credit.t_code_currency =  " + NATCUR + "))"
                 + "\n" + "                        AND (       trim(doc.t_kind_oper) = '3'"
                 + "\n" + "                              AND  (           (("+ convertMaskToSqlFormat(balanceMask, "accblnc_debet.t_balance"  + m_balancePlanNumber) + ")"
                 + "\n" + "                                           AND (" + rcbAccountFilter.getAsSqlString("account_debet") +"))"
                 + "\n" + "                                      OR       (("+ convertMaskToSqlFormat(balanceMask, "accblnc_credit.t_balance" + m_balancePlanNumber) + ")"
                 + "\n" + "                                           AND (" + rcbAccountFilter.getAsSqlString("account_credit") + ")) )"
                 + "\n" + "                               OR  (     ((         accblnc_debet.t_balance"  + m_balancePlanNumber + " = '20208')"
                 + "\n" + "                                          AND ("  + rcbAccountFilter.getAsSqlString("account_debet") + ")"
                 + "\n" + "                                          AND (NOT accblnc_credit.t_balance" + m_balancePlanNumber + " LIKE '202%' OR account_credit.t_code_currency <>  " + NATCUR + " )"
                 + "\n" + "                                          /*AND account_debet.t_type_account <> 'А'*/)"                                       //GSP 25.02.2014
                 + "\n" + "                                      OR  ((        accblnc_credit.t_balance" + m_balancePlanNumber + " = '20208')"
                 + "\n" + "                                          AND ("  + rcbAccountFilter.getAsSqlString("account_credit") + ")"
                 + "\n" + "                                          AND (NOT accblnc_debet.t_balance"  + m_balancePlanNumber + " LIKE '202%' OR account_debet.t_code_currency <>  " + NATCUR+" ) "
                 + "\n" + "                                          /*AND account_credit.t_type_account <> 'А'*/)))"
                 + "\n" + "                    )"
                 + "\n" + "    SELECT documents.t_accTrnId AS t_documentAutoKey,"
                 + "\n" + "           documents.t_sum_natCur AS t_documentSum,"
                 + "\n" + "           symbcash.t_symbol AS t_symbolCode,"
                 + "\n" + "           symbcash.t_sum AS t_symbolValue,"
                 + "\n" + "           CASE"
                 + "\n" + "               WHEN listsymb.t_type_symbol = 1"
                 + "\n" + "                   THEN NVL((SELECT depcode.t_okatocode FROM drepDepCode_tmp depcode WHERE depcode.t_departmentCode = documents.t_branch_debet),CHR(1))"
                 + "\n" + "               WHEN listsymb.t_type_symbol = 2"
                 + "\n" + "                   THEN NVL((SELECT depcode.t_okatocode FROM drepDepCode_tmp depcode WHERE depcode.t_departmentCode = documents.t_branch_credit),CHR(1))"
                 + "\n" + "               WHEN listsymb.t_type_symbol = 3"
                 + "\n" + "                   THEN CASE"
                 + "\n" + "                            WHEN listsymb.t_symb_cash IN (' 82',' 85',' 87',' 89',' 97',' 99','100')"
                 + "\n" + "                                THEN NVL((SELECT depcode.t_okatocode FROM drepDepCode_tmp depcode WHERE depcode.t_departmentCode = documents.t_branch_debet),CHR(1))"
                 + "\n" + "                            WHEN listsymb.t_symb_cash IN (' 83',' 86',' 88',' 96', ' 98')"
                 + "\n" + "                                THEN NVL((SELECT depcode.t_okatocode FROM drepDepCode_tmp depcode WHERE depcode.t_departmentCode = documents.t_branch_credit),CHR(1))"
                 + "\n" + "                               ELSE CHR(1)"
                 + "\n" + "                           END"
                 + "\n" + "               WHEN documents.t_balance_debet = '20208'"
                 + "\n" + "                   THEN NVL((SELECT depcode.t_okatocode FROM drepDepCode_tmp depcode WHERE depcode.t_departmentCode = documents.t_branch_debet),CHR(1))"
                 + "\n" + "               WHEN documents.t_balance_credit = '20208'"
                 + "\n" + "                   THEN NVL((SELECT depcode.t_okatocode FROM drepDepCode_tmp depcode WHERE depcode.t_departmentCode = documents.t_branch_credit),CHR(1))"
                 + "\n" + "               ELSE CHR(1)"
                 + "\n" + "           END AS t_okatocode"
                 + "\n" + "      FROM documents,"
                 + "\n" + "           dsymbcash_dbt symbcash,"
                 + "\n" + "           dlistsymb_dbt listsymb"
                 + "\n" + "     WHERE symbcash.t_docKind = 1 AND symbcash.t_accTrnId = documents.t_accTrnId"
                 + "\n" + "       AND listsymb.t_docKind = 1"
                 + "\n" + "       AND trim(listsymb.t_symb_cash) = trim(symbcash.t_symbol)"
// GSP - отключил по причине того, что в протоколе задваивались данные
//         одна запись в раздел с символом, другая в раздел без символа.
//         требует донастройки - нужны примеры документов, пока их нет.
// GSP - фильтр переписан с учетом кода нац. валюты по счету кассы. 29.04.2014
                 + "\n" + " UNION ALL "
                 + "\n" + "    SELECT documents.t_accTrnId AS t_documentAutoKey,"
                 + "\n" + "           documents.t_sum_natCur AS t_documentSum,"
                 + "\n" + "           NULL AS t_symbolCode,"
                 + "\n" + "           documents.t_sum_natCur AS t_symbolValue,"
                 + "\n" + "           CASE"
                 + "\n" + "               WHEN documents.t_balance_debet = '20208'"
                 + "\n" + "                   THEN NVL((SELECT depcode.t_okatocode FROM drepDepCode_tmp depcode WHERE depcode.t_departmentCode = documents.t_branch_debet),CHR(1))"
                 + "\n" + "               WHEN documents.t_balance_credit = '20208'"
                 + "\n" + "                   THEN NVL((SELECT depcode.t_okatocode FROM drepDepCode_tmp depcode WHERE depcode.t_departmentCode = documents.t_branch_credit),CHR(1))"
                 + "\n" + "               WHEN INSTR(documents.t_type_account_debet, 'А') <> 0"
                 + "\n" + "                   THEN NVL((SELECT depcode.t_okatocode FROM drepDepCode_tmp depcode WHERE depcode.t_departmentCode = documents.t_branch_debet),CHR(1))"
                 + "\n" + "               WHEN INSTR(documents.t_type_account_credit, 'А') <> 0"
                 + "\n" + "                   THEN NVL((SELECT depcode.t_okatocode FROM drepDepCode_tmp depcode WHERE depcode.t_departmentCode = documents.t_branch_credit),CHR(1))"
                 + "\n" + "               ELSE CHR(1)"
                 + "\n" + "           END AS t_okatocode"
                 + "\n" + "      FROM documents"

/*                 + "\n" + "     WHERE (NOT EXISTS (SELECT 1                                  --если сумма не разнесена по символам"
                 + "\n" + "                         FROM dsymbcash_dbt s"
                 + "\n" + "                        WHERE s.t_accTrnId = documents.t_accTrnId"
                 + "\n" + "                          AND s.t_docKind = 1)"
                 + "\n" + "                   AND ("   + convertMaskToSqlFormat(balanceMask + "," + otherBalanceMask, "documents.t_balance_credit")
                 + "\n" + "                       OR " + convertMaskToSqlFormat(balanceMask + "," + otherBalanceMask, "documents.t_balance_debet") + ")"
                 + "\n" + "            )"
                 + "\n" + "        OR (NOT EXISTS (SELECT 1                                  --если сумма по приходу не разнесена по символам"
                 + "\n" + "                          FROM dsymbcash_dbt s"
                 + "\n" + "                         WHERE s.t_accTrnId = documents.t_accTrnId"
                 + "\n" + "                           AND s.t_docKind = 1"
                 + "\n" + "                           AND s.t_kind = 1)"
                 + "\n" + "                   AND "+ convertMaskToSqlFormat(balanceMask + "," + otherBalanceMask, "documents.t_balance_debet")
                 + "\n" + "            )"
                 + "\n" + "        OR (NOT EXISTS (SELECT 1                                  --если сумма по расходу не разнесена по символам"
                 + "\n" + "                          FROM dsymbcash_dbt s "
                 + "\n" + "                         WHERE s.t_accTrnId = documents.t_accTrnId"
                 + "\n" + "                           AND s.t_docKind = 1"
                 + "\n" + "                           AND s.t_kind = 2)"
                 + "\n" + "                   AND "+ convertMaskToSqlFormat(balanceMask + "," + otherBalanceMask, "documents.t_balance_credit")
                 + "\n" + "           )";
*/
                 + "\n" + "     WHERE (NOT EXISTS (SELECT 1                                  --если сумма не разнесена по символам"
                 + "\n" + "                         FROM dsymbcash_dbt s"
                 + "\n" + "                        WHERE s.t_accTrnId = documents.t_accTrnId"
                 + "\n" + "                          AND s.t_docKind = 1)"
                 + "\n" + "                   AND (((documents.t_balance_credit LIKE '20202%' OR documents.t_balance_credit LIKE '20208%') and documents.t_fiid_credit = 0 )"
                 + "\n" + "                       OR ((documents.t_balance_debet LIKE '20202%' OR documents.t_balance_debet LIKE '20208%') and documents.t_fiid_debet = 0))"
                 + "\n" + "            )"
                 + "\n" + "        OR (NOT EXISTS (SELECT 1                                  --если сумма по приходу не разнесена по символам"
                 + "\n" + "                          FROM dsymbcash_dbt s"
                 + "\n" + "                         WHERE s.t_accTrnId = documents.t_accTrnId"
                 + "\n" + "                           AND s.t_docKind = 1"
                 + "\n" + "                           AND s.t_kind = 1)"
                 + "\n" + "                   AND ((documents.t_balance_debet LIKE '20202%' OR documents.t_balance_debet LIKE '20208%') and documents.t_fiid_debet = 0)"
                 + "\n" + "            )"
                 + "\n" + "        OR (NOT EXISTS (SELECT 1                                  --если сумма по расходу не разнесена по символам"
                 + "\n" + "                          FROM dsymbcash_dbt s "
                 + "\n" + "                         WHERE s.t_accTrnId = documents.t_accTrnId"
                 + "\n" + "                           AND s.t_docKind = 1"
                 + "\n" + "                           AND s.t_kind = 2)"
                 + "\n" + "                   AND ((documents.t_balance_credit LIKE '20202%' OR documents.t_balance_credit LIKE '20208%') and documents.t_fiid_credit = 0)"
                 + "\n" + "           )";
debugbreak;
            return commandText;
        end;

        sql_execute(getCommandText());

     end;
end;
