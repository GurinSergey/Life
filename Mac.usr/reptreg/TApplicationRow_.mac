/*─────────────────────────────────────────────────────────────────────────────────────────────────┐
  RS-Bank V6                                                                        R-Style Softlab
  Файл подсистемы "Регламентируемая отчетность"

  Базовые классы строк приложений ФОР

  Создан: 20.04.2007 - Ser.
└─────────────────────────────────────────────────────────────────────────────────────────────────*/
/**
 * Общая для всех экспортов класс обработки балансового номера.
 * Обработка вынесена в отдельный класс, так как используется во вложенном классе экспорта в ПТК ПСД
 */

private class TExportBalanceProcessor()

    macro getBalanceNumber(compositeValue : Object) : String
        var balance = compositeValue.fieldValue("balance").currentAsString;

        if (in(balance, "52005(2)", "52006(2)"))
            return subStr(balance, 1, 5);
        end;

        return balance;
    end;
end;

global.exportBalanceProcessor = TExportBalanceProcessor();


    /**
     *  Функционал экспорта в ПТК ПСД
     */
    class TPtkPsdExporter(appCode, applicationRow, columnKind)
        private var m_appCode        = appCode;
        private var m_applicationRow = applicationRow;
        private var m_columnKind     = columnKind;

        private macro createIterator(balanceGroup, balance)
            global.rowCode      = m_applicationRow.getCode();
            global.balanceGroup = balanceGroup;
            global.balance      = balance;

            var iterator : Object = NULL;
            if (valType(global.balanceGroup) == V_UNDEF)
                global.balanceGroup = "";
            end;
            if (valType(global.balance) == V_UNDEF)
                global.balance = "";
            end;
            iterator = m_applicationRow.getAttributeValueIterator(m_applicationRow.getApplicationName(), NULL, NULL);
            iterator.setFilter(FILTER_FOR_PTKPSD, global.rowCode, global.balanceGroup, global.balance);
            iterator.setSortOrder(SORTER_FOR_BALANCE_DATE);
            return iterator;
        end;

        private macro exportFake(compositeValue : Object, forceRowCode : String)
            const MAX_DAY   : Integer  = 31;
            var rowCode     : String = "";
            var beginColumn : Integer;
            dateSplit(global.parameters.getEndDate(), beginColumn, null, null);
            beginColumn = beginColumn + 1;

            if (forceRowCode == NULL)
                rowCode = global.exportBalanceProcessor.getBalanceNumber(compositeValue);
            else
                rowCode = forceRowCode;
            end;

            while (beginColumn <= MAX_DAY)
                if (index(m_columnKind, "R") > 0)
                    global.ptkPsdExportFile.printString(m_appCode, rowCode, strLpad(String(beginColumn), 2, "0") + "R", "0");
                end;
                if (index(m_columnKind, "V") > 0)
                    global.ptkPsdExportFile.printString(m_appCode, rowCode, strLpad(String(beginColumn), 2, "0") + "V", "0");
                end;

                beginColumn = beginColumn + 1;
            end;
        end;

        private macro exportCommonValue(rowCode, completeColumnCode, stringValue)
            global.ptkPsdExportFile.printString(m_appCode, rowCode, completeColumnCode, stringValue);
        end;

        private macro exportRoubleValue(rowCode, columnCode, value)
            exportCommonValue(rowCode, columnCode + "R", value.fieldValue("roubleRest").currentAsString);
        end;

        private macro exportCurrencyValue(rowCode, columnCode, value)
            exportCommonValue(rowCode, columnCode + "V", value.fieldValue("currencyRest").currentAsString);
        end;

        private macro exportSingleValue(rowCode, columnCode, value)
            exportCommonValue(rowCode, columnCode, value.fieldValue("currencyRest").currentAsString);
        end;

        private macro exportValue(balance, value, forceRowCode)
            macro makeColumnCode(dt : Date)
                if (dt == Date(0, 0, 0))
                    return "01";
                elif (dt == (global.parameters.getEndDate() + 1))
                    return "32";
                end;
                return strLpad(String(dt - global.parameters.getBeginDate() + 1), 2, "0");
            end;

            var rowCode    = "";
            var columnCode = makeColumnCode(Date(trim(value.fieldValue("date").current)));

            if (forceRowCode == NULL)
                rowCode = global.exportBalanceProcessor.getBalanceNumber(value);
            else
                rowCode = forceRowCode;
            end;

            if (balance != value.fieldValue("balance").current)
                global.ptkPsdExportFile.printString(m_appCode, rowCode, "$name$", global.exportBalanceProcessor.getBalanceNumber(value));
                balance = value.fieldValue("balance").current;
                setParm(1, balance);
            end;

            var r_index = index(m_columnKind, "R");
            var v_index = index(m_columnKind, "V");

            if (r_index > 0)
                exportRoubleValue(rowCode, columnCode, value);
            end;
            if (v_index > 0)
                exportCurrencyValue(rowCode, columnCode, value);
            end;

            if (r_index  + v_index == 0)
                exportSingleValue(rowCode, m_columnKind, value);
            end;
        end;

        private macro exportIterator(iterator, forceRowCode)
            var balance = "";
            var compositeValue : Object = NULL;
            iterator.moveFirst();
            while (not iterator.isDone())
                compositeValue = iterator.currentItem;

                if (m_applicationRow.isPrintableBalance(compositeValue))
                    exportValue(balance, compositeValue, forceRowCode);
                    if (Date(trim(compositeValue.fieldValue("date").currentAsString)) == global.parameters.getEndDate())
                        exportFake(compositeValue, forceRowCode);
                    end;
                end;
                iterator.moveNext();
            end;
        end;

    end;

    class (TPtkPsdExporter) TPtkPsdBalanceGroupExporter(appCode, applicationRow, balanceGroup, columnKind)
        private var m_balanceGroup = balanceGroup;

        macro export()
            var balance    = "";
            var balanceSet = NULL;
            var iterator   = createIterator(m_balanceGroup, "");
            var isEof      = false;

            if (iterator.count > 0)
                exportIterator(iterator);
            else
                if ((index(m_appCode, "OR6") == 0) and (index(m_appCode, "OR7") == 0))
                    runError("Ошибка!|Код приложения: ",m_appCode,"|Строка: ", m_applicationRow.getCode());
                        end;
            end;
        end;

        initTPtkPsdExporter(appCode, applicationRow, columnKind);
    end;

    class (TPtkPsdExporter) TPtkPsdDecodingExporter(appCode, applicationRow, columnKind, decodingName)
        private var m_decodingName = decodingName;

        macro export()
            var iterator = createIterator("расшифровка", m_decodingName);

            if (iterator.count > 0)
                exportIterator(iterator, m_decodingName);
            else
                if (index(m_appCode, "OR7") == 0)
                    runError("Ошибка|Код приложения: '",m_appCode,"'|строка: '", m_applicationRow.getCode(),"'|расшифровка: '", m_decodingName,"'");
                end;
            end;
        end;

        initTPtkPsdExporter(appCode, applicationRow, columnKind);
    end;

    class (TPtkPsdExporter) TPtkPsdRowExporter(appCode, applicationRow, columnKind)
        macro export()
            var iterator = createIterator("", "");

            if (iterator.count > 0)
                exportIterator(iterator, m_applicationRow.getExportCode());
            else
                if (index(m_appCode, "OR7") == 0)
                    runError("Ошибка!|Код приложения: ",m_appCode,"|Строка: ", m_applicationRow.getCode());
                end;
            end;
        end;

        initTPtkPsdExporter(appCode, applicationRow, columnKind);
    end;

    class (TPtkPsdRowExporter) TPtkPsdChronologicAverageExporter(appCode, applicationRow, columnKind)
        private macro exportCurrencyValue(rowCode, columnCode, value)
            exportCommonValue(rowCode, columnCode + "R", value.fieldValue("currencyRest").currentAsString);
        end;

        initTPtkPsdRowExporter(appCode, applicationRow, columnKind);
    end;

    class (TPtkPsdRowExporter) TPtkPsdCoefficientExporter(appCode, applicationRow, columnKind)

        private macro exportRoubleValue(rowCode, columnCode, value)
            exportCommonValue(rowCode, columnCode + "R", String(value.fieldValue("roubleRest").exact:0:4));
        end;

        private macro exportSingleValue(rowCode, columnCode, value)
            exportCommonValue(rowCode, columnCode, String(value.fieldValue("roubleRest").exact:0:4));
        end;

        initTPtkPsdRowExporter(appCode, applicationRow, columnKind);
    end;

    class (TPtkPsdRowExporter) TPtkPsdConvertColumnKindExporter(appCode, applicationRow, columnKind)

        private macro exportRoubleValue(rowCode, columnCode, value)
            exportCommonValue(rowCode, columnCode + "R", value.fieldValue("currencyRest").currentAsString);
        end;

        initTPtkPsdRowExporter(appCode, applicationRow, columnKind);
    end;


/***************************************************************************************************
 *  Базовый класс строки приложения
 **************************************************************************************************/
class TDecodingData(_applicationName : String, _row : String, _name : String)
    var applicationName = _applicationName;
    var row = _row;
    var name = _name;
end;

private class TNormalizerValueData(_name : String, _value : Object)
    var name = _name;
    var value = _value;
end;

class TApplicationRow(applicationName : String)

    private const TOP_SEPARATOR    : Integer = 0;
    private const MIDDLE_SEPARATOR : Integer = 1;
    private const BOTTOM_SEPARATOR : Integer = 2;
    private const WIDTH_SEPARATOR  : Integer = 3;
    private var m_applicationName  : String  = applicationName;
    private var m_code             : String;
    private var m_isSaved          : Bool    = false;
    private var m_report           : Object  = RcbApplication().currentReport;
    private var m_valueColumnWidth      : Integer;

    macro getFilter()
        throw(TPureVirtualMethodCallException("TApplicationRow::getFilter"));
    end;

    private macro saveAttributeValue()
    end;

    private macro correctNegativeValue(value, defaultValue)
        if (value < $0)
            return defaultValue;
        end;
        return value;
    end;

    macro getAttributeValueIterator(attributName : String, filter : Object, sorter : Object)
        var attributeValue = m_report.attributeValue(attributName);
        var iterator = attributeValue.createValueIterator();
        if (filter != NULL)
            iterator.setFilter(filter);
        end;
        if (sorter != NULL)
            iterator.setSortOrder(sorter);
        end;
        iterator.moveFirst();
        return iterator;
    end;

    private macro getValueIterator(sorter : Object)
        global.rowCode = m_code;

        var iterator : Object = NULL;

        iterator = getAttributeValueIterator(m_applicationName, NULL, sorter);
        iterator.setFilter(FILTER_FOR_APPLICATION_ROW, global.rowCode);
        return iterator;
    end;

    macro getBalanceMasksForRow(rowCode : String)
        var tuneTable = RcbTuneTable("dtFor_dbt");

        tuneTable.setInstructionFilter(global.parameters.getEndDate());

        tuneTable.setUserFilter("t_applicationName = " + getSqlString(m_applicationName)+ " AND t_row = " + getSqlString(rowCode));

        var dataSet = tuneTable.getDataSet();

        if (dataSet.moveNext())
            return dataSet.balanceMasks;
        end;
        return "";
    end;

    macro isSaved()
        return m_isSaved;
    end;

    macro setSaved(isSaved : Bool)
        m_isSaved = isSaved;
    end;

    macro removeValues()
        var iterator = getValueIterator();
        var idList   = TArray();
        var i;

        i = 0;
        iterator.moveFirst();
        while(not iterator.isDone())
            if( iterator.currentItem.valueId != 0 )
                idList(i) = iterator.currentItem.valueId;
                i = i + 1;
            end;
            iterator.moveNext();
        end;

        i = 0;
        while(i < idList.size())
            m_report.AttributeValue(m_applicationName).removeValue(idList(i));
            i = i + 1;
        end;
    end;

    macro getApplicationName()
        return m_applicationName;
    end;

    macro getCode()
        return m_code;
    end;

    macro getBalanceMasks()
        return "";
    end;

    macro getDecodingBalanceMasks()
        return "";
    end;

    macro fillTempTable(tempTable : TTempTable)
    end;

    macro fillTempTableForBalanceData(tempTable : TTempTable)
        fillTempTable(tempTable);
    end;

    macro saveAttributes()
        var dependencies = global.form.getRowDependencies(m_applicationName, m_code);

        var i = 0;
        while (i < dependencies.size())
            if (not dependencies[i].isSaved())
                dependencies[i].saveAttributes();
            end;
            i = i + 1;
        end;
    end;

    macro print()
    end;

    macro normalizeDecoding()
    end;

    /**
     * Нормализовать одну запись
     */
    private macro normalizeOneRecord(rcbValuePool : RcbArray, constValue : Double, sign : Integer)
        var normalizer = ReportNormalizer(RcbApplication.currentReport.multiplier);
        var relation = ReportLinearRelation(sign);

        var currentItem;

        relation.rhs.plus(constValue);

        rcbValuePool.moveFirst();

        while(rcbValuePool.moveNext())
            currentItem = rcbValuePool.getCurrentItem();
            var node = normalizer.addNode(currentItem.name);

            node.setExact(currentItem.value.exact);
            node.recalculateScaled();
            node.setDef(1.0);

            relation.lhs.plus(node);
        end;

        normalizer.addRelation(relation);

        normalizer.normalize();

        if (normalizer.isNormalized())
            rcbValuePool.moveFirst();
            while(rcbValuePool.moveNext())
                currentItem = rcbValuePool.getCurrentItem();
                currentItem.value.scaled = double(normalizer.node(currentItem.name).scaled);
            end;
        end;
    end;

    /**
     * Нормализовать одну расшифровку
     */
    private macro normalizeOneDecoding(decodingNamePool : RcbArray, isRouble : Bool, sign : Integer)

        var iteratorPool = RcbArray();
        var applicationNamePool = RcbArray();

        var synchronizer = RcbValueIteratorSynchronizer(RCB_ISK_FULL_OUTER_JOIN, SORTER_FOR_DATE);

        var iterator;

        decodingNamePool.moveFirst();
        while (decodingNamePool.moveNext())
            var decodingName = decodingNamePool.getCurrentItem();
            var applicationName;
            var row = "";
            if (isEqClass("TDecodingData", decodingName))
                applicationName = decodingName.applicationName;
                row = decodingName.row;
                decodingName = decodingName.name;
            else
                applicationName = m_applicationName;
            end;

            iterator = getAttributeValueIterator(applicationName, NULL);
            iterator.setFilter(FILTER_FOR_NORMALIZER1, decodingName, row);
            iteratorPool.push_back(iterator);
            applicationNamePool.push_back(applicationName);
            synchronizer.addIterator(iterator);
        end;

        synchronizer.moveFirst();
        while (not synchronizer.isDone())

            iteratorPool.moveFirst();

            var dateValue : Date;
            var balanceNumber;

            var rcbValuePool = RcbArray();
            var isFirstIterator = true;
            var hasBalanceData = false;

            while (iteratorPool.moveNext())
                if (synchronizer.isNull(iteratorPool.getCurrentItem()))
                    continue;
                end;

                var compositeValue = iteratorPool.getCurrentItem().currentItem;

                if (isFirstIterator)
                    dateValue = Date(trim(compositeValue.fieldValue("date").exactAsString));
                    balanceNumber = substr(compositeValue.fieldValue("balance").exactAsString, 1, 5);
                    isFirstIterator = false;
                    hasBalanceData = global.balanceData.hasData(dateValue);
                end;

                if (hasBalanceData)
                    var value = compositeValue.fieldValue(ternary(isRouble, "roubleRest", "currencyRest"));
                    if (value.exact != $0)
                        var id = toAnsi(        applicationNamePool.value(iteratorPool.getCurrentIndex())
                                        + "_" + compositeValue.fieldValue("row").exactAsString
                                        + "_" + ternary(isRouble, "Ру", "Ва")
                                        + "_" + compositeValue.fieldValue("balance").exactAsString
                                        + "_" + string(dateValue : f),
                                        true
                                       );
                        rcbValuePool.push_back(TNormalizerValueData(id, value));
                    end;
                end;
            end;

            if (hasBalanceData)
                var balancevalues = global.balanceData.getValues(balanceNumber, dateValue);
                var balanceValue = ternary(isRouble, balancevalues.getRoubleScaledRest(), balancevalues.getCurrencyScaledRest());
                if ((balanceValue != 0.0) or (rcbValuePool.size != 0))
                    normalizeOneRecord(rcbValuePool, balanceValue, sign);
                end;
            end;

            synchronizer.moveNext();
        end;
    end;

    /**
     *  Функционал экспорта в ПТК ПСД
     */
    macro getExportCode()
        return m_code;
    end;

    macro exportToPtkPsd()
    end;

    macro exportToKliko()
    end;

    macro isPrintableBalance(compositeValue : Object)
        /**
         * Раньше тут многое проверялось, теперь печатаем на основании настроечной таблицы,
         * а так как переменные уже заполнены на основаниии настроечной таблицы,
         * то ничего проверять не нужно
         */
        return true;
    end;
end;

/***************************************************************************************************
 *  Базовый класс строки приложения для Приложения 1
 **************************************************************************************************/
class (TApplicationRow) TApplicationRow1(applicationName : String)
    private macro getValue()
        global.rowCode = m_code;
        var iterator = getAttributeValueIterator(m_applicationName, NULL);
        iterator.setFilter(FILTER_FOR_APPLICATION_ROW, global.rowCode);
        var value    = NULL;

        iterator.moveFirst();
        if (not iterator.isDone())
            if (not iterator.currentItem.fieldValue("sum").isUndefined())
                value = iterator.currentItem.fieldValue("sum").currentAsString;
            else
                value = "-";
            end;
        end;
        return value;
    end;

    private macro getRcbValue(rowCode : String) : RcbValue

        var iterator = getAttributeValueIterator(m_applicationName, NULL);
        iterator.setFilter(FILTER_FOR_APPLICATION_ROW, nvl(rowCode, m_code));

        iterator.moveFirst();
        if (not iterator.isDone())
            return iterator.currentItem.fieldvalue("sum");
        end;

        return null;
    end;

    private macro saveAttributeValue(sum : Money, scaledSum : Double)
        var attributeValue = m_report.attributeValue(m_applicationName);
        var compositeValue = attributeValue.addValue();
        compositeValue.fieldValue("row").exact = m_code;
        if (sum == NULL)
            compositeValue.fieldValue("sum").setUndefined();
        else
            compositeValue.fieldValue("sum").exact = sum;
            if (scaledSum == NULL)
                compositeValue.fieldValue("sum").recalculateScaled();
            else
                compositeValue.fieldValue("sum").scaled = scaledSum;
            end;
        end;
    end;

    macro completeAttributes()
    end;

    /**
     *  Функционал экспорта в ПТК ПСД
     */
    macro getExportCode()
        return strSubst(getCode(), ".", "");
    end;

    macro exportToPtkPsd()
        var value = nvl(getValue(), "");
        global.ptkPsdExportFile.printString("OR1", getExportCode(), "1", getValue());
    end;

    /**
     *  Функционал экспорта в kliko.exe
     */
    macro exportToKliko()
        var valueArray = TArray();
        var value      = getValue();

        valueArray[valueArray.size] = "S_" + getExportCode();
        valueArray[valueArray.size] = ternary(value == "-", "0", nvl(value, "0"));
        valueArray[valueArray.size] = "";

        global.klikoExportFile.printString(valueArray);
    end;

    initTApplicationRow(applicationName);
end;
/***************************************************************************************************
 *  Базовый класс строки приложения для Приложений 2 - 7
 **************************************************************************************************/

class TBalanceId(applicationName, applicationRowCode, group, number)
        private var m_applicationName    = applicationName;
        private var m_applicationRowCode = applicationRowCode;
        private var m_group              = group;
        private var m_number             = number;

        macro getApplicationName()
            return m_applicationName;
        end;

        macro getApplicationRowCode()
            return m_applicationRowCode;
        end;

        macro getGroup()
            return m_group;
        end;

        macro getNumber()
            return m_number;
        end;
    end;

class (TApplicationRow) TApplicationRow2_7(applicationName : String)



    private macro getValueIterator(sorter : Object, beginDateInBlock, numberDatesInBlock)
        global.rowCode = m_code;

        var iterator = getAttributeValueIterator(m_applicationName, NULL, sorter);
        if (valType(numberDatesInBlock) == V_UNDEF)
            numberDatesInBlock = 0;
        end;
        if (valType(beginDateInBlock) == V_UNDEF)
            beginDateInBlock = Date(0,0,0);
        end;
        iterator.setFilter(FILTER_FOR_APPLICATION_2_7_BASE_ROW, Date(beginDateInBlock), numberDatesInBlock, String(global.rowCode));
        return iterator;
    end;

    macro getCompositeValue(balanceGroup : String, balance : String, restDate : Date)
        var attributeValue = RcbApplication.currentReport.attributeValue(getApplicationName());
        var keyValue       = attributeValue.createKeyValue();

        keyValue.fieldValue("row")          = getCode();
        keyValue.fieldValue("balanceGroup") = balanceGroup;
        keyValue.fieldValue("balance")      = balance;
        keyValue.fieldValue("date")         = String(restDate);

        var compositeValue = attributeValue.findValue(keyValue);

        return compositeValue;
    end;

    /**
     * Для каждого б/с, по которому есть данные хотя бы за один день периода, добавляет нулевые значения для всех дней периода,
     * по которым данные отсутствуют.
     */
    macro completeAttributes()
        var i = getValueIterator(NULL);
            i.setSortOrder(SORTER_FOR_BALANCE_DATE);
        var isDone = false;
        var balanceGroup = null;
        var balance = null;
        var restDate = null;
        var dates;

        i.moveFirst();
        while (not i.isDone())
            if (balance != i.currentItem.fieldValue("balance").exact)
                // Дополнить данными до окончания ОП
                if (balance != null)
                    while ((not isDone) and (dates.getCurrentItem() < restDate))
                        saveAttributeValue(balanceGroup, balance, dates.getCurrentItem(), $0, $0, 0.0, 0.0);
                        isDone = not dates.moveNext();
                    end;
                end;

                balanceGroup = i.currentItem.fieldValue("balanceGroup").exact;
                balance = i.currentItem.fieldValue("balance").exact;

                dates = global.tempTable.getForDates();
                isDone = not dates.moveNext();
            end;

            restDate = Date(trim(i.currentItem.fieldValue("date").exact));

            // Дополнить данными в середине ОП
            while ((not isDone) and (dates.getCurrentItem() < restDate))
                saveAttributeValue(balanceGroup, balance, dates.getCurrentItem(), $0, $0, 0.0, 0.0);
                isDone = not dates.moveNext();
            end;

            i.moveNext();
            isDone = not dates.moveNext();
        end;

        // Дополнить данными до окончания ОП для последнего б/с в итераторе
        if (balance != null)
            while (not isDone)
                saveAttributeValue(balanceGroup, balance, dates.getCurrentItem(), $0, $0, 0.0, 0.0);
                isDone = not dates.moveNext();
            end;
        end;
    end;

    private macro getUpdateTempTableQuery(balance, balanceGroup, restDate, countHoliday)

        var balanceValues = global.balanceData.getValues(balance, restDate - countHoliday);

        macro getQuery(isCurrency : Bool)
            var rest   : Money  = $0.0;
            var scaledRest : Double =  0.0;

            if (isCurrency)
                rest   = balanceValues.getCurrencyRest();
                scaledRest = balanceValues.getCurrencyScaledRest();
            else
                rest   = balanceValues.getRoubleRest();
                scaledRest = balanceValues.getRoubleScaledRest();
            end;

            if (rest == 0)
                return "NULL;";
            end;

            var isReplace = true;

            if (in(balance, "40312", "47409"))
                isReplace = false;
            end;

            var query = "EXECUTE IMMEDIATE '";
            if (m_applicationName == "Приложение3")
                query = query
                    +"\n" + " UPDATE dffor_tmp"
                    +"\n" + "    SET t_scaledRest = CASE"
                    +"\n" + "                           WHEN t_rest = :rest"
                    +"\n" + "                               THEN :scaledRest"
                    +"\n" + "                           WHEN t_rest > :rest"
                    +"\n" + "                               THEN GREATEST(t_scaledRest, :scaledRest)"
                    +"\n" + "                           ELSE LEAST(t_scaledRest, :scaledRest)"
                    +"\n" + "                       END"
                    +"\n" + "  WHERE t_applicationName = :applicationName"
                    +"\n" + "    AND t_row  = :code"
                    +"\n" + "    AND t_date = :restDate"
                    +"\n" + "    AND t_balanceGroup = :balanceGroup"
                    +"\n" + "    AND t_balance    = :balance"
                    +"\n" + "    AND t_isCurrency = :isCurrency'"
                    +"\n" + "USING " + rest + "," + scaledRest + ","  + rest + "," + scaledRest + "," + scaledRest + ","
                    +"\n" + "      " + getSqlString(m_applicationName) + "," + m_code + ","
                    +"\n" + "      " + getSqlDate(restDate) + "," + getSqlString(balanceGroup) + ","
                    +"\n" + "      " + getSqlString(balance) + "," + rcbSqlBool(isCurrency);
            elif (isReplace)
                query =  query
                    +"\n" + " UPDATE dffor_tmp"
                    +"\n" + "    SET t_rest   = :rest ,"
                    +"\n" + "        t_scaledRest = :scaledRest"
                    +"\n" + "  WHERE t_applicationName = :applicationName"
                    +"\n" + "    AND t_row  = :code"
                    +"\n" + "    AND t_date = :restDate"
                    +"\n" + "    AND t_balanceGroup = :balanceGroup"
                    +"\n" + "    AND t_balance    = :balance"
                    +"\n" + "    AND t_isCurrency = :isCurrency'"
                    +"\n" + "USING " + rest + "," + scaledRest + ","
                    +"\n" + "      " + getSqlString(m_applicationName) + "," + m_code + ","
                    +"\n" + "      " + getSqlDate(restDate) + "," + getSqlString(balanceGroup) + ","
                    +"\n" + "      " + getSqlString(balance) + "," + rcbSqlBool(isCurrency);
            else
                query = query
                    +"\n" + " UPDATE dffor_tmp"
                    +"\n" + "    SET t_scaledRest = CASE"
                    +"\n" + "                           WHEN t_rest = :rest"
                    +"\n" + "                               THEN :scaledRest"
                    +"\n" + "                           ELSE LEAST(t_scaledRest, :scaledRest)"
                    +"\n" + "                       END"
                    +"\n" + "  WHERE t_applicationName = :applicationName"
                    +"\n" + "    AND t_row  = :code"
                    +"\n" + "    AND t_date = :restDate"
                    +"\n" + "    AND t_balanceGroup = :balanceGroup"
                    +"\n" + "    AND t_balance    = :balance"
                    +"\n" + "    AND t_isCurrency = :isCurrency'"
                    +"\n" + "USING " + rest + "," + scaledRest + "," + scaledRest + ","
                    +"\n" + "      " + getSqlString(m_applicationName) + "," + m_code + ","
                    +"\n" + "      " + getSqlDate(restDate) + "," + getSqlString(balanceGroup) + ","
                    +"\n" + "      " + getSqlString(balance) + "," + rcbSqlBool(isCurrency);
            end;

            return query + ";";
        end;

        var query = "   " + getQuery(true)
            +"\n" + "   " + getQuery(false);

        return query;
    end;

    private macro updateTempTable(dataSet : Object, balanceGroup : String)
        var dateCount   = global.parameters.getPeriod().daysQuantity + 2;
        var currentDate = null;
        var query = "";

        var i = 0;
        var countHoliday = 0;
        var firstWorkDay = null;

        while (dataSet.moveNext())
            query = "BEGIN \n";
            i = 0;
            countHoliday = 0;
            while (i < dateCount)
                currentDate = global.parameters.getBeginDate() + i;

                if (global.balanceData.isWorkDate(currentDate))
                    if ((currentDate != firstWorkDay) or
                        (floatMonths(global.parameters.getBeginDate(), currentDate) > 1.00))
                        if (global.balanceData.hasData(currentDate))
                            query = query + "\n" + getUpdateTempTableQuery(dataSet.balance, balanceGroup, currentDate, countHoliday) + "\n";
                        end;
                    else
                        if (global.balanceData.hasData(currentDate - countHoliday))
                            query = query + "\n" + getUpdateTempTableQuery(dataSet.balance, balanceGroup, currentDate, countHoliday) + "\n";
                        end;
                    end;
                    countHoliday = 0;
                else
                    if (global.balanceData.hasData(currentDate - countHoliday))
                        query = query + "\n" + getUpdateTempTableQuery(dataSet.balance, balanceGroup, currentDate, countHoliday) + "\n";
                    end;
                    countHoliday = countHoliday + 1;

                    if (global.balanceData.isWorkDate(currentDate + 1))
                        firstWorkDay = currentDate + 1;
                    end;
                end;
                i = i + 1;

            end;
            query = query + "END;\n";
            sql_execute(query);
        end;
    end;

    macro updateBalanceValues()
        //Заглушка.
        //Требуется переопределять для строк, которым требуется замена значений на данные баланса.
        //Нужен для пересчета после свода.
    end;

    private macro updateAttributeValue(balanceGroup : String, balance : String, date_: Date, roubleRest : Money, currencyRest : Money, roubleScaledRest : Double, currencyScaledRest : Double)
        var attributeValue = m_report.attributeValue(m_applicationName);


        var keyValue = attributeValue.createKeyValue();

        keyValue.fieldValue("row")          = m_code;
        keyValue.fieldValue("balanceGroup") = balanceGroup;
        keyValue.fieldValue("balance")      = balance;
        keyValue.fieldValue("date")         = String(date_);

        var compositeValue = attributeValue.findVAlue(keyValue);

        if (compositeValue == null)
            saveAttributeValue(balanceGroup, balance, date_, roubleRest, currencyRest, roubleScaledRest, currencyScaledRest);
            return;
        end;

        if ((roubleScaledRest == NULL) or (currencyScaledRest == NULL))
            compositeValue.fieldValue("roubleRest").setUndefined();
            compositeValue.fieldValue("currencyRest").setUndefined();
        else
            compositeValue.fieldValue("roubleRest").scaled   = roubleScaledRest;
            compositeValue.fieldValue("currencyRest").scaled = currencyScaledRest;
        end;
        compositeValue.fieldValue("row").exact          = m_code;
        compositeValue.fieldValue("balanceGroup").exact = balanceGroup;
        compositeValue.fieldValue("balance").exact      = balance;
        compositeValue.fieldValue("date").exact         = String(date_);
        compositeValue.fieldValue("roubleRest").exact   = roubleRest;
        compositeValue.fieldValue("currencyRest").exact = currencyRest;
    end;

    private macro updateBalanceValue(dataSet : Object, balanceGroup : String)
        var dateCount   = global.parameters.getPeriod().daysQuantity + 2;
        var currentDate = null;

        var i = 0;
        while (dataSet.moveNext())
            i = 0;
            while (i < dateCount)
                currentDate = global.parameters.getBeginDate() + i;

                if (global.balanceData.hasData(currentDate))
                    var balanceValues = global.balanceData.getValues(dataSet.balance, currentDate);

                    updateAttributeValue(balanceGroup,
                                         dataSet.balance,
                                         currentDate,
                                         balanceValues.getRoubleRest(),
                                         balanceValues.getCurrencyRest(),
                                         balanceValues.getRoubleScaledRest(),
                                         balanceValues.getCurrencyScaledRest());
                end;

                i = i + 1;
            end;
        end;
    end;

    private macro getBalanceDataSet(masksString : String)
        return TRsbDataSet("SELECT   DISTINCT t_balance" + global.parameters.getPlanNumber() + " t_balance"
            +"\n"+         "    FROM daccblnc_dbt"
            +"\n"+         "   WHERE " + convertMaskToSqlFormat(masksString, "t_balance"+ global.parameters.getPlanNumber())
            +"\n"+         "ORDER BY t_balance" + global.parameters.getPlanNumber());
    end;

    private macro createQueryForBalance(balanceId : TBalanceId, excludeBalance : String, masksExcludeBalance : String)
        var balanceMasksCondition : String = "";
        var balance = "";

        if (balanceId.getNumber() == NULL)
            balance = "t_balance";
        else
            balance = getSqlString(balanceId.getNumber());
        end;

        if (excludeBalance == NULL)
            balanceMasksCondition = " 1 = 1 ";
        else
            balanceMasksCondition = " NOT (" + convertMaskToSqlFormat(excludeBalance, "t_balance") + ")";
        end;

        if (masksExcludeBalance != NULL)

            if (balanceMasksCondition != "")
                balanceMasksCondition = balanceMasksCondition + " AND "
            end;

            balanceMasksCondition = balanceMasksCondition + "  (" + convertMaskToSqlFormat(masksExcludeBalance, "t_balance") + ")";
        end;

        var query =    "SELECT t_row, t_balanceGroup, t_balance, t_date, t_isCurrency, "
                +"\n"+  "      DECODE(t_isCurrency, 'X', NVL(t_rest, 0), 0) t_currencyRest,"
                +"\n"+ "       DECODE(t_isCurrency, 'X', 0, NVL(t_rest, 0)) t_roubleRest,"
                +"\n"+  "      DECODE(t_isCurrency, 'X', NVL(t_scaledRest, 0), 0) t_currencyScaledRest,"
                +"\n"+ "       DECODE(t_isCurrency, 'X', 0, NVL(t_scaledRest, 0)) t_roubleScaledRest"
                +"\n"+ "  FROM dffor_tmp"
                +"\n"+ " WHERE t_applicationName = " + getSqlString(balanceId.getApplicationName())
                +"\n"+ "   AND t_row = "+ getSqlString(balanceId.getApplicationRowCode())
                +"\n"+ "   AND t_balanceGroup = " +getSqlString(balanceId.getGroup())
                +"\n"+ "   AND t_balance = " + balance
                +"\n"+ "   AND " + balanceMasksCondition;

        query =    "SELECT t_row, t_balanceGroup, t_balance, t_date, SUM(t_roubleRest) t_roubleRest, SUM(t_currencyRest) t_currencyRest,"
            +"\n"+ "       SUM(t_roubleScaledRest) t_roubleScaledRest, SUM(t_currencyScaledRest) t_currencyScaledRest"
            +"\n"+ "    FROM (" + query + ")"
            +"\n"+ "GROUP BY t_row, t_balanceGroup, t_balance, t_date";

        return query;
    end;

        private macro getQueryForSubtrahend(balanceId : TBalanceId, isScaled)
            var subtrahendBalance : String = "";
            var restField         : String = "";

            if (isScaled)
                restField = "t_scaledRest";
            else
                restField = "t_rest";
            end;

            if (balanceId.getNumber() == NULL)
                subtrahendBalance = "subtrahend.t_balance";
            else
                subtrahendBalance = getSqlString(balanceId.getNumber());
            end;

            var query = " NVL (( SELECT subtrahend." + restField
                +"\n"+  "          FROM dffor_tmp subtrahend"
                +"\n"+  "         WHERE subtrahend.t_applicationName = " + getSqlString(balanceId.getApplicationName())
                +"\n"+  "           AND subtrahend.t_row             = " + getSqlString(balanceId.getApplicationRowCode())
                +"\n"+  "           AND subtrahend.t_balanceGroup    = " + getSqlString(balanceId.getGroup())
                +"\n"+  "           AND subtrahend.t_balance         = " + subtrahendBalance
                +"\n"+  "           AND SUBSTR(subtrahend.t_balance,1,5)  = SUBSTR(minued.t_balance, 1, 5)"
                +"\n"+  "           AND subtrahend.t_isCurrency      = minued.t_isCurrency"
                +"\n"+  "           AND subtrahend.t_date            = minued.t_date), 0 ) ";
            return query;
        end;

    private macro createQueryForDifferenceBalance(minuedBalanceId : TBalanceId)
        var query             : String = "";
        var subtrahendQuery   : String = "";
        var scaledSubtrahendQuery : String = "";

        var i : Integer = 2;
        var value;

        while(getParm(i, value))
            if (i == 2)
                subtrahendQuery       = getQueryForSubtrahend(value, false);
                scaledSubtrahendQuery = getQueryForSubtrahend(value, true);
            else
                subtrahendQuery = subtrahendQuery + "\n + \n" + getQueryForSubtrahend(value, false);
                scaledSubtrahendQuery = scaledSubtrahendQuery + "\n + \n" + getQueryForSubtrahend(value, true);
            end;
            i = i + 1;
        end;

        var minuedBalance : String = "";

        if (minuedBalanceId.getNumber() == NULL)
            minuedBalance = "minued.t_balance";
        else
            minuedBalance = getSqlString(minuedBalanceId.getNumber());
        end;

        query =    "SELECT DECODE(t_isCurrency, CHR(0), NVL(minued.t_rest, 0) - ( " + subtrahendQuery + " ), 0)  t_roubleRest,"
            +"\n"+ "       DECODE(t_isCurrency, CHR(0), 0, NVL(minued.t_rest, 0) - ( " + subtrahendQuery + " ))  t_currencyRest,"
            +"\n"+ "       DECODE(t_isCurrency, CHR(0), NVL(minued.t_scaledRest, 0) - ( " + scaledSubtrahendQuery + " ), 0)  t_roubleScaledRest,"
            +"\n"+ "       DECODE(t_isCurrency, CHR(0), 0, NVL(minued.t_scaledRest, 0) - ( " + scaledSubtrahendQuery + " ))  t_currencyScaledRest,"
            +"\n"+ "       minued.t_row, minued.t_balanceGroup, minued.t_balance, minued.t_date, minued.t_isCurrency"
            +"\n"+ "  FROM dffor_tmp minued"
            +"\n"+ " WHERE minued.t_applicationName = " + getSqlString(minuedBalanceId.getApplicationName())
            +"\n"+ "   AND minued.t_row             = " + getSqlString(minuedBalanceId.getApplicationRowCode())
            +"\n"+ "   AND minued.t_balanceGroup    = " + getSqlString(minuedBalanceId.getGroup())
            +"\n"+ "   AND minued.t_balance         = " + minuedBalance;

        query =    "SELECT t_row, t_balanceGroup, t_balance, t_date, SUM(t_roubleRest) t_roubleRest, SUM(t_currencyRest) t_currencyRest,"
            +"\n"+ "       SUM(t_roubleScaledRest) t_roubleScaledRest, SUM(t_currencyScaledRest) t_currencyScaledRest"
            +"\n"+ "    FROM (" + query + ")"
            +"\n"+ "GROUP BY t_row, t_balanceGroup, t_balance, t_date";

        return query;
    end;

    private macro createQueryForDifferenceBalanceWithMasks(maskForRow, minuedBalanceId : TBalanceId)
        var query             : String = "";
        var subtrahendQuery   : String = "";
        var scaledSubtrahendQuery : String = "";


        var i : Integer = 3;
        var value;

        while(getParm(i, value))
            if (i == 3)
                subtrahendQuery       = getQueryForSubtrahend(value, false);
                scaledSubtrahendQuery = getQueryForSubtrahend(value, true);
            else
                subtrahendQuery = subtrahendQuery + "\n + \n" + getQueryForSubtrahend(value, false);
                scaledSubtrahendQuery = scaledSubtrahendQuery + "\n + \n" + getQueryForSubtrahend(value, true);
            end;
            i = i + 1;
        end;

        query =    "SELECT DECODE(t_isCurrency, CHR(0), NVL(minued.t_rest, 0) - ( " + subtrahendQuery + " ), 0)  t_roubleRest,"
            +"\n"+ "       DECODE(t_isCurrency, CHR(0), 0, NVL(minued.t_rest, 0) - ( " + subtrahendQuery + " ))  t_currencyRest,"
            +"\n"+ "       DECODE(t_isCurrency, CHR(0), NVL(minued.t_scaledRest, 0) - ( " + scaledSubtrahendQuery + " ), 0)  t_roubleScaledRest,"
            +"\n"+ "       DECODE(t_isCurrency, CHR(0), 0, NVL(minued.t_scaledRest, 0) - ( " + scaledSubtrahendQuery + " ))  t_currencyScaledRest,"
            +"\n"+ "       minued.t_row, minued.t_balanceGroup, minued.t_balance, minued.t_date, minued.t_isCurrency"
            +"\n"+ "  FROM dffor_tmp minued"
            +"\n"+ " WHERE minued.t_applicationName = " + getSqlString(minuedBalanceId.getApplicationName())
            +"\n"+ "   AND minued.t_row             = " + getSqlString(minuedBalanceId.getApplicationRowCode())
            +"\n"+ "   AND minued.t_balanceGroup    = " + getSqlString(minuedBalanceId.getGroup())
            +"\n"+ "   AND minued.t_balance         = minued.t_balance";

        query =    "SELECT t_row, t_balanceGroup, t_balance, t_date, SUM(t_roubleRest) t_roubleRest, SUM(t_currencyRest) t_currencyRest,"
            +"\n"+ "       SUM(t_roubleScaledRest) t_roubleScaledRest, SUM(t_currencyScaledRest) t_currencyScaledRest"
            +"\n"+ "    FROM (" + query + ")"
            +"\n"+ "  WHERE " + convertMaskToSqlFormat(maskForRow, "t_balance")
            +"\n"+ "GROUP BY t_row, t_balanceGroup, t_balance, t_date";

        return query;
    end;

    private macro calculateChronologicAverage(iterator : Object)
        class TStructValue(rouble_, scaledRouble_, currency_, scaledCurrency_)
            var rouble         : Money  = rouble_;
            var scaledRouble   : Double = scaledRouble_;
            var currency       : Money  = currency_;
            var scaledCurrency : Double = scaledCurrency_;
        end;

        macro getValue(rest : Money, restDate : Date)
            if ((restDate == global.parameters.getBeginDate()) or (restDate == (global.parameters.getEndDate() + 1)))
                return rest / 2;
            end;
            return rest;
        end;

        var compositeValue        : Object = NULL;
        var roubleRestSum         : Money  = $0.0;
        var roubleRestScaledSum   : Double = 0.0;
        var currencyRestSum       : Money  = $0.0;
        var currencyRestScaledSum : Double = 0.0;

        iterator.moveFirst();
        while (not iterator.isDone())
            compositeValue        = iterator.currentItem();
            roubleRestSum         = roubleRestSum     + getValue(compositeValue.fieldValue("roubleRest").exact,    Date(trim(compositeValue.fieldValue("date").current)));
            roubleRestScaledSum   = roubleRestScaledSum   + getValue(compositeValue.fieldValue("roubleRest").scaled,   Date(trim(compositeValue.fieldValue("date").current)));
            currencyRestSum       = currencyRestSum   + getValue(compositeValue.fieldValue("currencyRest").exact,  Date(trim(compositeValue.fieldValue("date").current)));
            currencyRestScaledSum = currencyRestScaledSum + getValue(compositeValue.fieldValue("currencyRest").scaled, Date(trim(compositeValue.fieldValue("date").current)));
            iterator.moveNext();
        end;

        var devisor = (global.parameters.getPeriod().daysQuantity + 2) - 1;

        return TStructValue(roubleRestSum/devisor, roubleRestScaledSum/devisor, currencyRestSum/devisor, currencyRestScaledSum/devisor);
    end;

    private macro saveAttributeValue(balanceGroup : String, balance : String, date_: Date, roubleRest : Money, currencyRest : Money, roubleScaledRest : Double, currencyScaledRest : Double)
        var attributeValue = m_report.attributeValue(m_applicationName);
        var compositeValue = attributeValue.addValue();
        if (m_applicationName == "Приложение6")
            currencyRest   = $0.0;
            currencyScaledRest = 0.0;
        end;


        if ((roubleScaledRest == NULL) or (currencyScaledRest == NULL))
            compositeValue.fieldValue("roubleRest").setUndefined();
            compositeValue.fieldValue("currencyRest").setUndefined();
        else
            compositeValue.fieldValue("roubleRest").scaled   = roubleScaledRest;
            compositeValue.fieldValue("currencyRest").scaled = currencyScaledRest;
        end;
        compositeValue.fieldValue("row").exact          = m_code;
        compositeValue.fieldValue("balanceGroup").exact = balanceGroup;
        compositeValue.fieldValue("balance").exact      = balance;
        compositeValue.fieldValue("date").exact         = String(date_);
        compositeValue.fieldValue("roubleRest").exact   = roubleRest;
        compositeValue.fieldValue("currencyRest").exact = currencyRest;

    end;

    private macro summarizeAndSaveAttributeValue(iterator : Object, balanceGroup, balance)
        var compositeValue     : Object = NULL;
        var roubleRest         : Money  = $0.0;
        var roubleScaledRest   : Double = $0.0;
        var currencyRest       : Money  = $0.0;
        var currencyScaledRest : Double = $0.0;
        var currentDate        : String = "no date";
        var isFirst            : Bool   = true;

        iterator.moveFirst();
        while (not iterator.isDone())
            compositeValue = iterator.currentItem();
            if (currentDate == compositeValue.fieldValue("date").exact)
                roubleRest         = roubleRest     + compositeValue.fieldValue("roubleRest").exact;
                roubleScaledRest   = roubleScaledRest   + compositeValue.fieldValue("roubleRest").scaled;
                currencyRest       = currencyRest   + compositeValue.fieldValue("currencyRest").exact;
                currencyScaledRest = currencyScaledRest + compositeValue.fieldValue("currencyRest").scaled;
            else
                if (not isFirst)
                    saveAttributeValue(nvl(balanceGroup, ""), nvl(balance, ""), Date(trim(currentDate)), roubleRest, currencyRest, roubleScaledRest, currencyScaledRest);
                end;
                isFirst = false;
                currentDate    = compositeValue.fieldValue("date").exact;

                roubleRest         = compositeValue.fieldValue("roubleRest").exact;
                roubleScaledRest   = compositeValue.fieldValue("roubleRest").scaled;
                currencyRest       = compositeValue.fieldValue("currencyRest").exact;
                currencyScaledRest = compositeValue.fieldValue("currencyRest").scaled;
            end;
            iterator.moveNext();
        end;

        if (iterator.count > 0)
            saveAttributeValue(nvl(balanceGroup, ""), nvl(balance, ""), Date(trim(currentDate)), roubleRest, currencyRest, roubleScaledRest, currencyScaledRest);
        end;
    end;

    private macro subtractAndSaveAttributeValue(iterator : Object, minued : String, subtrahend : String, balanceGroup: String, balance : String)
        var compositeValue           : Object = NULL;
        var minuedRoubleRest         : Money  = $0.0;
        var minuedCurrencyRest       : Money  = $0.0;
        var minuedRoubleScaledRest       : Double = 0.0;
        var minuedCurrencyScaledRest     : Double = 0.0;
        var subtrahendRoubleRest     : Money  = $0.0;
        var subtrahendCurrencyRest   : Money  = $0.0;
        var subtrahendRoubleScaledRest   : Double = 0.0;
        var subtrahendCurrencyScaledRest : Double = 0.0;
        var currentDate              : String = "no date";
        var isFirst                  : Bool   = true;

        macro processRecord(compositeValue : Object)
            if (compositeValue.fieldValue("row").exact == minued)
                minuedRoubleRest     = minuedRoubleRest     + compositeValue.fieldValue("roubleRest").exact;
                minuedRoubleScaledRest   = minuedRoubleScaledRest   + compositeValue.fieldValue("roubleRest").scaled;
                minuedCurrencyRest   = minuedCurrencyRest   + compositeValue.fieldValue("currencyRest").exact;
                minuedCurrencyScaledRest = minuedCurrencyScaledRest + compositeValue.fieldValue("currencyRest").scaled;
            elif (compositeValue.fieldValue("row").exact == subtrahend)
                subtrahendRoubleRest     = subtrahendRoubleRest     + compositeValue.fieldValue("roubleRest").exact;
                subtrahendRoubleScaledRest   = subtrahendRoubleScaledRest   + compositeValue.fieldValue("roubleRest").scaled;
                subtrahendCurrencyRest   = subtrahendCurrencyRest   + compositeValue.fieldValue("currencyRest").exact;
                subtrahendCurrencyScaledRest = subtrahendCurrencyScaledRest + compositeValue.fieldValue("currencyRest").scaled;
            end;
        end;

        iterator.moveFirst();
        while (not iterator.isDone())
            compositeValue = iterator.currentItem();
            if (currentDate == compositeValue.fieldValue("date").exact)
                processRecord(compositeValue);
            else
                if (not isFirst)
                    saveAttributeValue(nvl(balanceGroup, ""), nvl(balance, ""), Date(trim(currentDate)),
                                       (minuedRoubleRest - subtrahendRoubleRest), (minuedCurrencyRest - subtrahendCurrencyRest),
                                       (minuedRoubleScaledRest - subtrahendRoubleScaledRest), (minuedCurrencyScaledRest - subtrahendCurrencyScaledRest));
                end;
                isFirst = false;

                currentDate  = compositeValue.fieldValue("date").exact;
                minuedRoubleRest         = $0.0;
                minuedCurrencyRest       = $0.0;
                minuedRoubleScaledRest       = 0.0;
                minuedCurrencyScaledRest     = 0.0;
                subtrahendRoubleRest     = $0.0;
                subtrahendCurrencyRest   = $0.0;
                subtrahendRoubleScaledRest   = 0.0;
                subtrahendCurrencyScaledRest = 0.0;

                processRecord(compositeValue);
            end;
            iterator.moveNext();
        end;

        if (iterator.count > 0)
            saveAttributeValue(nvl(balanceGroup, ""), nvl(balance, ""), Date(trim(currentDate)),
                               (minuedRoubleRest - subtrahendRoubleRest), (minuedCurrencyRest - subtrahendCurrencyRest),
                               (minuedRoubleScaledRest - subtrahendRoubleScaledRest), (minuedCurrencyScaledRest - subtrahendCurrencyScaledRest));
        end;
    end;

    private macro findMinimumAndSaveAttributeValue(iterator : Object)
        var compositeValue : Object = NULL;
        var roubleRest     : Money  = $0.0;
        var roubleScaledRest   : Double = 0.0;
        var currencyRest   : Money  = $0.0;
        var currencyScaledRest : Double = 0.0;
        var currentDate    : String = "no date";

        iterator.moveFirst();
        while (not iterator.isDone())
            compositeValue = iterator.currentItem();
            if (currentDate != compositeValue.fieldValue("date").exact)
                currentDate    = compositeValue.fieldValue("date").exact;

                roubleRest     = compositeValue.fieldValue("roubleRest").exact;
                roubleScaledRest   = compositeValue.fieldValue("roubleRest").scaled;
                currencyRest   = compositeValue.fieldValue("currencyRest").exact;
                currencyScaledRest = compositeValue.fieldValue("currencyRest").scaled;
            else
                saveAttributeValue("", "", Date(trim(currentDate)),
                                   min(compositeValue.fieldValue("roubleRest").exact, roubleRest), min(compositeValue.fieldValue("currencyRest").exact, currencyRest),
                                   min(compositeValue.fieldValue("roubleRest").scaled, roubleScaledRest), min(compositeValue.fieldValue("currencyRest").scaled, currencyScaledRest));
            end;
            iterator.moveNext();
        end;
    end;



    /**
     *  Функционал экспорта в kliko.exe
     */
    private macro getArrayExt(defaultValue, isPrintRouble : Bool, isPrintCurrency : Bool) : TArray
        var size : Integer = 0;
        var i    : Integer = 0;
        var valueArray     = TArray();

        if (m_applicationName == "Приложение2")
            size = 65 + 1;
        elif (m_applicationName == "Приложение6")
            size = 33;
        else
            size = 64 + 1;
        end;

        while (i < size)
            valueArray[i] = defaultValue;
            i = i + 1;
        end;

        if (m_applicationName == "Приложение2")
            valueArray[size - 1] = "";
        end;

        if (not isPrintRouble)
            i = 1;
            while (i < valueArray.size)
                valueArray[i] = "";
                i = i + 2;
            end;
        end;

        if (not isPrintCurrency)
            i = 2;
            while (i < valueArray.size)
                valueArray[i] = "";
                i = i + 2;
            end;
        end;

        return valueArray;
    end;

    private macro getArray(defaultValue) : TArray
        return getArrayExt(defaultValue, true, true);
    end;

    private macro exportSingleValueRow(description : String, value : String)
        var valueArray : Object = getArray("");

        valueArray[0] = description;
        valueArray[1] = value;

        global.klikoExportFile.printString(valueArray);
    end;

    private macro correctValueArray(valueArray : TArray, roubleValue : String, currencyValue : String, isPrintRouble : Bool, isPrintCurrency : Bool)

        var dateCount = global.parameters.getPeriod().daysQuantity + 2;

        if (dateCount == 32)
            return;
        end;

        var i = 0;

        if (m_applicationName == "Приложение6")
            i = dateCount;
        else
            i = dateCount * 2 - 1;
        end;

        while (i < valueArray.size)

            if (m_applicationName == "Приложение6")
                valueArray[i] = "0";
                i = i + 1;
            else
                valueArray[i]     = ternary(isPrintRouble, "0", "");

                if ((i+1) < valueArray.size)
                    valueArray[i + 1] = ternary(isPrintCurrency, "0", "");
                end;
                i = i + 2;
            end;

        end;

        if (m_applicationName == "Приложение2")
            valueArray[valueArray.size - 3] = ternary(isPrintRouble, roubleValue, "");
            valueArray[valueArray.size - 2] = ternary(isPrintCurrency, currencyValue, "");
            valueArray[valueArray.size - 1] = "";
        elif (m_applicationName != "Приложение6")
            valueArray[valueArray.size - 2] = ternary(isPrintRouble, roubleValue, "");
            valueArray[valueArray.size - 1] = ternary(isPrintCurrency, currencyValue, "");
        else
            valueArray[valueArray.size - 1] = roubleValue;
        end;
    end;

    private macro exportValueRowExt(iterator : Object, description : String, isPrintRouble : Bool, isPrintCurrency : Bool)

        var valueArray     : Object = getArrayExt(0, isPrintRouble, isPrintCurrency);
        var isFirst        : Bool   = true;
        var currentBalance : String = "no balance";
        var compositeValue : Object = NULL;

        var lastCurrencyValue = "";
        var lastRoubleValue   = "";

        var i : Integer = 0;
        iterator.moveFirst();
        while (not iterator.isDone)
            compositeValue = iterator.currentItem;
            if (currentBalance != global.exportBalanceProcessor.getBalanceNumber(compositeValue))
                if (not isFirst)
                    if (RcbApplication.currentReport.context.period.kind == RCB_PK_MONTH)
                        correctValueArray(valueArray, lastRoubleValue, lastCurrencyValue, isPrintRouble, isPrintCurrency);
                    end;
                    global.klikoExportFile.printString(valueArray);
                end;
                isFirst = false;
                currentBalance = global.exportBalanceProcessor.getBalanceNumber(compositeValue);
                valueArray = getArrayExt(0, isPrintRouble, isPrintCurrency);
                i = 0;
                if (description == NULL)
                    valueArray[i] = currentBalance;
                else
                    valueArray[i] = description;
                end;
                i = i + 1;
                valueArray[i] = ternary(isPrintRouble, compositeValue.fieldValue("roubleRest").currentAsString, "");

                if (m_applicationName != "Приложение6")
                    i = i + 1;
                    valueArray[i] = ternary(isPrintCurrency, compositeValue.fieldValue("currencyRest").currentAsString, "");
                end;
            else
                valueArray[i] = ternary(isPrintRouble, compositeValue.fieldValue("roubleRest").currentAsString, "");

                if (m_applicationName != "Приложение6")
                    i = i + 1;
                    valueArray[i] = ternary(isPrintCurrency, compositeValue.fieldValue("currencyRest").currentAsString, "");
                end;
            end;

            lastRoubleValue   = ternary(isPrintRouble, compositeValue.fieldValue("roubleRest").currentAsString, "");
            lastCurrencyValue = ternary(isPrintCurrency, compositeValue.fieldValue("currencyRest").currentAsString, "");

            iterator.moveNext();
            i = i + 1;
        end;

        if (iterator.count > 0)

            if (RcbApplication.currentReport.context.period.kind == RCB_PK_MONTH)
                correctValueArray(valueArray, lastRoubleValue, lastCurrencyValue, isPrintRouble, isPrintCurrency);
            end;

            global.klikoExportFile.printString(valueArray);
        end;

        if ((iterator.count == 0) and (description != NULL))
            valueArray[0] = description;
            global.klikoExportFile.printString(valueArray);
        end;
    end;


    private macro exportValueRow(iterator : Object, description : String)
        exportValueRowExt(iterator, description, true, true);
    end;

    private macro exportRoubleValueRow(iterator : Object, description : String)
        exportValueRowExt(iterator, description, true, false);
    end;

    private macro exportCurrencyValueRow(iterator : Object, description : String)
        exportValueRowExt(iterator, description, false, true);
    end;

    private macro exportDescriptionRow(description : String)
        var valueArray = getArray("");
        valueArray[0]  = description;

        global.klikoExportFile.printString(valueArray);
    end;
    /**
     *  Функционал печати отчета
     */
    private macro getDiscriptionColumnString(discription : String, align : Integer)
        var columnWidth : Integer = 41;
        return strAlign(discription, columnWidth, align) + "│";
    end;

    private macro getSumColumnString(sum : String, isPrintValue : BOOL)
        var columnWidth : INteger = nvl(m_valueColumnWidth, 14);
        if (isPrintValue)
            return strLpad(sum, columnWidth, " ") + "│";
        else
            return strLpad("X", columnWidth, " ") + "│";
        end;
    end;

    private macro getNumberColumnString()
        var columnWidth : Integer = 6;
        return "│" + strAlign(m_code, columnWidth, STR_ALIGN_CENTER) + "│";
    end;

    private macro printSingleValueRow(printableObject : Variant, description : String, reportWidth : Integer, isRoubleValue : Bool)
        var compositeValue : Object  = NULL;
        var value          : String  = "";
        var str            : String  = "";
        var sumcolumnWidth : INteger = nvl(m_valueColumnWidth, 14);

        if (isEqClass("RcbValueIterator", printableObject))

            printableObject.moveFirst();
            while (not printableObject.isDone)
                compositeValue = printableObject.currentItem;
                if (isRoubleValue)
                    value = compositeValue.fieldValue("roubleRest").currentAsString;
                else
                    value = compositeValue.fieldValue("currencyRest").currentAsString;
                end;
                printableObject.moveNext();
            end;
        else
            value = printableObject;
        end;

        str = getNumberColumnString() + getDiscriptionColumnString(description, STR_ALIGN_LEFT);
        str = str + strAlign(strLpad(String(value), sumColumnWidth, " "), reportWidth - strLen(str) - 1, STR_ALIGN_LEFT) + "│";
        printLn(str);
    end;

    private macro printRow(iterator : Object, isPrintRowNumber : Bool, isPrintRouble : Bool, isPrintCurrency : Bool, description : String)

        var compositeValue     : Object = NULL;
        var currentBalance     : String = "no balance";
        var str                : String = "";
        var numberColumnString : String = "";
        var isNeedPrint        : Bool   = false;

        const PRINT_RPS       = 1;
        const PRINT_NOT_ZERO  = 2;

        if (isPrintRowNumber)
            numberColumnString = getNumberColumnString();
        else
            numberColumnString = "│      │";
        end;

        macro isNotDataZero(compositeValue : Object)
             return (compositeValue.fieldValue("roubleRest").current   != 0.0)
                 or (compositeValue.fieldValue("currencyRest").current != 0.0);
        end;

        macro isBalanceInBwp(compositeValue : Object)
            var dataSet = TRsbDataSet("SELECT 1"
                + "\n" +              "  FROM dbalance_dbt"
                + "\n" +              " WHERE t_chapter = 1"
                + "\n" +              "   AND t_balance = " + getSqlString(substr(compositeValue.fieldValue("balance").currentAsString, 1 , 5))
                + "\n" +              "   AND t_bdIncludeBWP <= " + getSqlDate(global.parameters.getEndDate() + 1)
                + "\n" +              "   AND t_bdExcludeBWP >= " + getSqlDate(global.parameters.getBeginDate()));

            if (dataSet.moveNext() or (compositeValue.fieldValue("balanceGroup").currentAsString == "расшифровка"))
                return true;
            end;
            return false;
        end;

        iterator.moveFirst();
        while (not iterator.isDone)
            compositeValue = iterator.currentItem;
            if (currentBalance != global.exportBalanceProcessor.getBalanceNumber(compositeValue))
                if (isNeedPrint)
                    printLn(str);
                    isNeedPrint = false;
                end;
                currentBalance = global.exportBalanceProcessor.getBalanceNumber(compositeValue);
                if (description == NULL)
                    str = numberColumnString + getDiscriptionColumnString(currentBalance, STR_ALIGN_CENTER);
                else
                    str = numberColumnString + getDiscriptionColumnString(description, STR_ALIGN_LEFT);
                end;
                str = str + getSumColumnString(compositeValue.fieldValue("roubleRest").currentAsString,   isPrintRouble);
                str = str + getSumColumnString(compositeValue.fieldValue("currencyRest").currentAsString, isPrintCurrency);
            else
                str = str + getSumColumnString(compositeValue.fieldValue("roubleRest").currentAsString,   isPrintRouble);
                str = str + getSumColumnString(compositeValue.fieldValue("currencyRest").currentAsString, isPrintCurrency);
            end;

            if (description == NULL)
                if (((m_applicationName == "Приложение2") or (m_applicationName == "Приложение7")) and (global.parameters.getPrintZero() == PRINT_NOT_ZERO))
                    if (isNotDataZero(compositeValue) and (not isNeedPrint))
                        isNeedPrint = true;
                    end;
                elif (((m_applicationName == "Приложение2") or (m_applicationName == "Приложение7")) and (global.parameters.getPrintZero() == PRINT_RPS))
                    if (isBalanceInBwp(compositeValue) and (not isNeedPrint))
                        isNeedPrint = true;
                    end;
                else
                    isNeedPrint = true;
                end;

                if (not isPrintableBalance(compositeValue))
                    isNeedPrint = false;
                end;
            else
                isNeedPrint = true;
            end;

            iterator.moveNext();
        end;

        var dateCount   : Integer = global.parameters.getEndDate() - global.parameters.getBeginDate() + 2;
        var i           : Integer = 0;

        if ((iterator.count == 0) and (description != NULL))
            str = numberColumnString + getDiscriptionColumnString(description, STR_ALIGN_LEFT);
            while (i < dateCount)
                str = str + getSumColumnString(0, isPrintRouble);
                str = str + getSumColumnString(0, isPrintCurrency);
                i = i + 1;
            end;
            printLn(str);
        end;

        if (iterator.count > 0)
            if (isNeedPrint)
                printLn(str);
            end;
        end;
    end;

    private macro printDescriptionRow(description : String, isPrintRowNumber : Bool, isPrintDelimeter: Bool, beginDateInBlock, numberDatesInBlock)
        var columnWidth : INteger = nvl(m_valueColumnWidth, 14);
        var delimeter   : String  = "";
        var str         : String  = "";
        var dateCount   : Integer = numberDatesInBlock;
        var i           : Integer = 0;

        if (isPrintRowNumber)
            str = getNumberColumnString();
        else
            str = "│      │";
        end;

        if (isPrintDelimeter)
            delimeter = "│";
        else
            delimeter = " ";
        end;

        str = str + getDiscriptionColumnString(description, STR_ALIGN_LEFT);

        while ((i < dateCount)and(beginDateInBlock + i <= global.parameters.getEndDate() + 1))
            str = str + mkStr(" ", columnWidth) + delimeter;
            str = str + mkStr(" ", columnWidth) + delimeter;
            i = i + 1;
        end;
        printLn(subStr(str, 1, strLen(str) - 1) + "│");
    end;

    private macro printSeparator(separatorKind : Integer, beginDateInBlock, numberDatesInBlock)
        var columnWidth : INteger = nvl(m_valueColumnWidth, 14);
        var str         : String  = "├──────┼─────────────────────────────────────────┼";
        var dateCount   : Integer = numberDatesInBlock;
        var i           : Integer = 0;
        var cross       : String;

        if (separatorKind == 0)
            cross = "┬";
        elif (separatorKind == 1)
            cross = "┼";
        elif (separatorKind == 2)
            cross = "┴";
        elif (separatorKind == 3)
            cross = "─";
        end;

        while ((i < dateCount)and(beginDateInBlock + i <= global.parameters.getEndDate() + 1))
            str = str + mkStr("─", columnWidth) + cross;
            str = str + mkStr("─", columnWidth) + cross;
            i = i + 1;
        end;
        printLn(subStr(str, 1, strLen(str) - 1) + "┤");
    end;

    private macro printBottom(isDelimeter : Bool, beginDateInBlock, numberDatesInBlock)
        var columnWidth : INteger = nvl(m_valueColumnWidth, 14);
        var str         : String  = "└──────┴─────────────────────────────────────────┴";
        var dateCount   : Integer = numberDatesInBlock;
        var i           : Integer = 0;
        var delimeter   : String  = "";
        if (isDelimeter)
            delimeter = "┴";
        else
            delimeter = "─";
        end;

        while ((i < dateCount)and(beginDateInBlock + i <= global.parameters.getEndDate() + 1))
            str = str + mkStr("─", columnWidth) + delimeter;
            str = str + mkStr("─", columnWidth) + delimeter;
            i = i + 1;
        end;
        printLn(subStr(str, 1, strLen(str) - 1) + "┘");
    end;

    private macro normalizeApplication2Row()

        var prevBalance = "";

        var balanceIterator = getAttributeValueIterator("Приложение2", NULL, NULL);
        balanceIterator.setFilter(FILTER_FOR_NORMALIZER2, 5, "40901", "40902", global.rowCode);
        balanceIterator.setSortOrder(SORTER_FOR_BALANCE);

        while (not balanceIterator.isDone())
            var balance = balanceIterator.currentItem.fieldValue("balance").current;
            if (prevBalance == balance)
                balanceIterator.next();
                continue;
            end;

            var row = balanceIterator.currentItem.fieldValue("row").current;

            normalizeOneDecoding(RcbArray().initialize(TDecodingData("Приложение2", row, balance),
                                                       TDecodingData("Приложение6", "1", balance),
                                                       TDecodingData("Приложение6", "2", balance),
                                                       TDecodingData("Приложение6", "3", balance)
                                                      ),
                                 true,
                                 RCB_RS_EQUAL
                                );
            normalizeOneDecoding(RcbArray().initialize(TDecodingData("Приложение2", row, balance),
                                                       TDecodingData("Приложение6", "1", balance),
                                                       TDecodingData("Приложение6", "2", balance),
                                                       TDecodingData("Приложение6", "3", balance)
                                                      ),
                                 false,
                                 RCB_RS_EQUAL
                                );

            balanceIterator.next();
            prevBalance = balance;
        end;
    end;

    initTApplicationRow(applicationName);
end;

/***************************************************************************************************
 *  Базовый класс строки приложения для Приложения 2
 **************************************************************************************************/
class (TApplicationRow2_7) TApplicationRow2(applicationName : String)

    private macro normalizeOneDecoding(decodingNamePool : RcbArray, isRouble : Bool, sign : Integer)
        class TSorter()
            macro isLess(v1 : Object, v2 : Object)
                return (Date(trim(v1.fieldValue("date").exact)) < Date(trim(v2.fieldValue("date").exact)));
            end;
        end;

        class TFilter(balance : String, row : String)
            private var m_balance = balance;
            private var m_row = row;

            macro isSuitable(v : Object)
                return (    (v.fieldValue("balance").exact == m_balance)
                        and ((m_row == null) or (v.fieldValue("row").exact == m_row))
                       );
            end;
        end;

        class TFilterOutSide(balance : String, row : String, beginDate : Date, endDate : Date)
            private var m_balance = balance;
            private var m_row = row;
            private var m_beginDate = beginDate;
            private var m_endDate = endDate;

            macro isSuitable(v : Object)
                return (    (v.fieldValue("balance").current == m_balance)
                        and ((m_row == null) or (v.fieldValue("row").current == m_row))
                        and ((v.fieldValue("date").current == m_beginDate) or (v.fieldValue("date").current == m_endDate + 1))
                       );
            end;
        end;

        class TEmptyFilter() /* Класс для возврата пустого итератора */
            macro isSuitable(v : Object)
                return (v.fieldValue("row").current == "1234567890");
            end;
        end;

        var iteratorPool = RcbArray();
        var applicationNamePool = RcbArray();

        var synchronizer = RcbValueIteratorSynchronizer(RCB_ISK_FULL_OUTER_JOIN, TSorter());

        var iterator;

        var decodingName;
        var applicationName;
        var row;

        decodingNamePool.moveFirst();

        if (global.parameters.isDisableNormalization() == 0)
            return getAttributeValueIterator(m_applicationName, TEmptyFilter());
        elif (global.parameters.isDisableNormalization() == 1)
            while (decodingNamePool.moveNext())
                decodingName = decodingNamePool.getCurrentItem();
                applicationName;
                row = null;
                if (isEqClass("TDecodingData", decodingName))
                    applicationName = decodingName.applicationName;
                    row = decodingName.row;
                    decodingName = decodingName.name;
                else
                    applicationName = m_applicationName;
                end;

                iterator = getAttributeValueIterator(applicationName, TFilterOutSide(decodingName, row, global.parameters.getBeginDate(), global.parameters.getEndDate()));
                iteratorPool.push_back(iterator);
                applicationNamePool.push_back(applicationName);
                synchronizer.addIterator(iterator);
            end;
        else
            while (decodingNamePool.moveNext())
                decodingName = decodingNamePool.getCurrentItem();
                applicationName;
                row = null;
                if (isEqClass("TDecodingData", decodingName))
                    applicationName = decodingName.applicationName;
                    row = decodingName.row;
                    decodingName = decodingName.name;
                else
                    applicationName = m_applicationName;
                end;

                iterator = getAttributeValueIterator(applicationName, TFilter(decodingName, row));
                iteratorPool.push_back(iterator);
                applicationNamePool.push_back(applicationName);
                synchronizer.addIterator(iterator);
            end;
        end;

        synchronizer.moveFirst();
        while (not synchronizer.isDone())

            iteratorPool.moveFirst();

            var dateValue : Date;
            var balanceNumber;

            var rcbValuePool = RcbArray();
            var isFirstIterator = true;
            var hasBalanceData = false;

            while (iteratorPool.moveNext())
                if (synchronizer.isNull(iteratorPool.getCurrentItem()))
                    continue;
                end;

                var compositeValue = iteratorPool.getCurrentItem().currentItem;

                if (isFirstIterator)
                    dateValue = Date(trim(compositeValue.fieldValue("date").exactAsString));
                    balanceNumber = substr(compositeValue.fieldValue("balance").exactAsString, 1, 5);
                    isFirstIterator = false;
                    hasBalanceData = global.balanceData.hasData(dateValue);
                end;

                if (hasBalanceData)
                    var value = compositeValue.fieldValue(ternary(isRouble, "roubleRest", "currencyRest"));
                    if (value.exact != $0)
                        var id = toAnsi(        applicationNamePool.value(iteratorPool.getCurrentIndex())
                                        + "_" + compositeValue.fieldValue("row").exactAsString
                                        + "_" + ternary(isRouble, "Ру", "Ва")
                                        + "_" + compositeValue.fieldValue("balance").exactAsString
                                        + "_" + string(dateValue : f),
                                        true
                                       );
                        rcbValuePool.push_back(TNormalizerValueData(id, value));
                    end;
                end;
            end;

            if (hasBalanceData)
                var balancevalues = global.balanceData.getValues(balanceNumber, dateValue);
                var balanceValue = ternary(isRouble, balancevalues.getRoubleScaledRest(), balancevalues.getCurrencyScaledRest());
                if ((balanceValue != 0.0) or (rcbValuePool.size != 0))
                    normalizeOneRecord(rcbValuePool, balanceValue, sign);
                end;
            end;

            synchronizer.moveNext();
        end;
    end;

    private macro normalizeApplication2Row()
        class TFilter()
            macro isSuitable(v : Object)
                return (    (strlen(v.fieldValue("balance").current) == 5)
                        and (v.fieldValue("row").current == global.rowCode)
                        and (v.fieldValue("balance").current != "40901")
                        and (v.fieldValue("balance").current != "40902")
                       );
            end;
        end;

        class TFilterOutSide()
            macro isSuitable(v : Object)
                return (    (strlen(v.fieldValue("balance").current) == 5)
                        and (v.fieldValue("row").current == global.rowCode)
                        and (v.fieldValue("balance").current != "40901")
                        and (v.fieldValue("balance").current != "40902")
                        and ((v.fieldValue("date").current == global.parameters.getBeginDate()) or (v.fieldValue("date").current == global.parameters.getEndDate() + 1))
                       );
            end;
        end;

        class TEmptyFilter() /* Класс для возврата пустого итератора */
            macro isSuitable(v : Object)
                return (v.fieldValue("row").current == "1234567890");
            end;
        end;

        class TSorter()
            macro isLess(v1 : Object, v2 : Object)
                return ((v1.fieldValue("balance").current) < (v2.fieldValue("balance").current));
            end;
        end;

        var prevBalance = "";

        var balanceIterator;

        if (global.parameters.isDisableNormalization() == 0)
            return getAttributeValueIterator("Приложение2", TEmptyFilter(), TSorter());
        elif (global.parameters.isDisableNormalization() == 1)
            balanceIterator = getAttributeValueIterator("Приложение2", TFilterOutSide(), TSorter())
        else
            balanceIterator = getAttributeValueIterator("Приложение2", TFilter(), TSorter())
        end;

        while (not balanceIterator.isDone())
            var balance = balanceIterator.currentItem.fieldValue("balance").current;
            if (prevBalance == balance)
                balanceIterator.next();
                continue;
            end;

            var row = balanceIterator.currentItem.fieldValue("row").current;

            normalizeOneDecoding(RcbArray().initialize(TDecodingData("Приложение2", row, balance),
                                                       TDecodingData("Приложение6", "1", balance),
                                                       TDecodingData("Приложение6", "2", balance),
                                                       TDecodingData("Приложение6", "3", balance)
                                                      ),
                                 true,
                                 RCB_RS_EQUAL
                                );
            normalizeOneDecoding(RcbArray().initialize(TDecodingData("Приложение2", row, balance),
                                                       TDecodingData("Приложение6", "1", balance),
                                                       TDecodingData("Приложение6", "2", balance),
                                                       TDecodingData("Приложение6", "3", balance)
                                                      ),
                                 false,
                                 RCB_RS_EQUAL
                                );

            balanceIterator.next();
            prevBalance = balance;
        end;
    end;

    initTApplicationRow2_7(applicationName);
end;

/***************************************************************************************************
 *  Базовый класс строки приложения для Приложения 5
 **************************************************************************************************/
class (TApplicationRow2_7) TApplicationRow5(applicationName : String)
    /**
     *  Функционал экспорта в ПТК ПСД
     */
    macro getExportCode()
        return strSubst(getCode(), ".", "");
    end;

    initTApplicationRow2_7(applicationName);
end;
/***************************************************************************************************
 *  Базовый класс строки приложения для Приложения 4 по 342-П
 **************************************************************************************************/
class (TApplicationRow5) TApplicationRow342_4(applicationName : String)

    private macro exportValueRowExt(iterator : Object, description : String, isPrintRouble : Bool, isPrintCurrency : Bool)
        var valueArray     : Object = getArrayExt(0, isPrintRouble, isPrintCurrency);
        var isFirst        : Bool   = true;
        var currentBalance : String = "no balance";
        var compositeValue : Object = NULL;

        var lastCurrencyValue = "";
        var lastRoubleValue   = "";

        var i : Integer = 0;
        iterator.moveFirst();
        while (not iterator.isDone)
            compositeValue = iterator.currentItem;
            if (currentBalance != global.exportBalanceProcessor.getBalanceNumber(compositeValue))
                if (not isFirst)
                    if (RcbApplication.currentReport.context.period.kind == RCB_PK_MONTH)
                        correctValueArray(valueArray, lastRoubleValue, lastCurrencyValue, isPrintRouble, isPrintCurrency);
                    end;
                    global.klikoExportFile.printString(valueArray);
                end;
                isFirst = false;
                currentBalance = global.exportBalanceProcessor.getBalanceNumber(compositeValue);
                valueArray = getArrayExt(0, isPrintRouble, isPrintCurrency);
                i = 0;
                if (description == NULL)
                    valueArray[i] = currentBalance + "\",\"";
                else
                    valueArray[i] = description;
                end;
                i = i + 1;
                valueArray[i] = ternary(isPrintRouble, compositeValue.fieldValue("roubleRest").currentAsString, "");

                i = i + 1;
                valueArray[i] = ternary(isPrintCurrency, compositeValue.fieldValue("currencyRest").currentAsString, "");
            else
                valueArray[i] = ternary(isPrintRouble, compositeValue.fieldValue("roubleRest").currentAsString, "");

                i = i + 1;
                valueArray[i] = ternary(isPrintCurrency, compositeValue.fieldValue("currencyRest").currentAsString, "");
            end;

            lastRoubleValue   = ternary(isPrintRouble, compositeValue.fieldValue("roubleRest").currentAsString, "");
            lastCurrencyValue = ternary(isPrintCurrency, compositeValue.fieldValue("currencyRest").currentAsString, "");

            iterator.moveNext();
            i = i + 1;
        end;

        if (iterator.count > 0)

            if (RcbApplication.currentReport.context.period.kind == RCB_PK_MONTH)
                correctValueArray(valueArray, lastRoubleValue, lastCurrencyValue, isPrintRouble, isPrintCurrency);
            end;

            global.klikoExportFile.printString(valueArray);
        end;

        if ((iterator.count == 0) and (description != NULL))
            valueArray[0] = description;
            global.klikoExportFile.printString(valueArray);
        end;
    end;

    private macro exportValueRow(iterator : Object, description : String)
        if (description != null)
            description = description + "\",\"";
        end;
        exportValueRowExt(iterator, description, true, true);
    end;
    /**
     *  Функционал экспорта в ПТК ПСД
     */
    macro getExportCode()
        return strSubst(getCode(), ".", "");
    end;

    initTApplicationRow5(applicationName);
end;
/***************************************************************************************************
 *  Базовый класс строки приложения для Приложения 6
 **************************************************************************************************/
class (TApplicationRow2_7) TApplicationRow6(applicationName : String)
    /**
     *  Функционал печати отчета
     */
    private macro printRow(iterator : Object, isPrintRowNumber : Bool, description : String)

        var currentBalance : String = "no balance";
        var isFirst = true;
        var compositeValue : Object = NULL;
        var str : String = "";
        var numberColumnString : String = "";

        if (isPrintRowNumber)
            numberColumnString = getNumberColumnString();
        else
            numberColumnString = "│      │";
        end;

        iterator.moveFirst();
        while (not iterator.isDone)
            compositeValue = iterator.currentItem;
            if (currentBalance != compositeValue.fieldValue("balance").currentAsString)
                if (not IsFirst)
                    printLn(str);
                end;
                isFirst = false;
                currentBalance = compositeValue.fieldValue("balance").currentAsString;
                if (description == NULL)
                    str = numberColumnString + getDiscriptionColumnString(currentBalance, STR_ALIGN_CENTER);
                else
                    str = numberColumnString + getDiscriptionColumnString(description, STR_ALIGN_LEFT);
                end;
                str = str + getSumColumnString(compositeValue.fieldValue("roubleRest").currentAsString, true);
            else
                str = str + getSumColumnString(compositeValue.fieldValue("roubleRest").currentAsString, true);
            end;
            iterator.moveNext();
        end;

        var dateCount   : Integer = global.parameters.getEndDate() - global.parameters.getBeginDate() + 2;
        var i           : Integer = 0;

        if ((iterator.count == 0) and (description != NULL))
            str = numberColumnString + getDiscriptionColumnString(description, STR_ALIGN_LEFT);
            while (i < dateCount)
                str = str + getSumColumnString(0, true);
                i = i + 1;
            end;
            printLn(str);
        end;

        if (iterator.count > 0)
            printLn(str);
        end;
    end;


    private macro printDescriptionRow(description : String, isPrintRowNumber : Bool, isPrintDelimeter: Bool, beginDateInBlock, numberDatesInBlock)
        var columnWidth : Integer = nvl(m_valueColumnWidth, 14);
        var delimeter   : String  = "";
        var str         : String  = "";
        var dateCount   : Integer = numberDatesInBlock;
        var i           : Integer = 0;

        if (isPrintRowNumber)
            str = getNumberColumnString();
        else
            str = "│      │";
        end;

        if (isPrintDelimeter)
            delimeter = "│";
        else
            delimeter = " ";
        end;

        str = str + getDiscriptionColumnString(description, STR_ALIGN_LEFT);

        while ((i < dateCount)and(beginDateInBlock + i <= global.parameters.getEndDate() + 1))
            str = str + mkStr(" ", columnWidth) + delimeter;
            i = i + 1;
        end;
        printLn(subStr(str, 1, strLen(str) - 1) + "│");
    end;

    private macro printSeparator(separatorKind : Integer, beginDateInBlock, numberDatesInBlock)
        var columnWidth : Integer = nvl(m_valueColumnWidth, 14);
        var str         : String  = "├──────┼─────────────────────────────────────────┼";
        var dateCount   : Integer = numberDatesInBlock;
        var i           : Integer = 0;
        var cross       : String;

        if (separatorKind == 0)
            cross = "┬";
        elif (separatorKind == 1)
            cross = "┼";
        elif (separatorKind == 2)
            cross = "┴";
        elif (separatorKind == 3)
            cross = "─";
        end;

        while ((i < dateCount)and(beginDateInBlock + i <= global.parameters.getEndDate() + 1))
            str = str + mkStr("─", columnWidth) + cross;
            i = i + 1;
        end;
        printLn(subStr(str, 1, strLen(str) - 1) + "┤");
    end;

    private macro printBottom(isDelimeter : Bool, beginDateInBlock, numberDatesInBlock)
        var columnWidth : Integer = nvl(m_valueColumnWidth, 14);
        var str         : String  = "└──────┴─────────────────────────────────────────┴";
        var dateCount   : Integer = numberDatesInBlock;
        var i           : Integer = 0;
        var delimeter   : String  = "";
        if (isDelimeter)
            delimeter = "┴";
        else
            delimeter = "─";
        end;

        while ((i < dateCount)and(beginDateInBlock + i <= global.parameters.getEndDate() + 1))
            str = str + mkStr("─", columnWidth) + delimeter;
            i = i + 1;
        end;
        printLn(subStr(str, 1, strLen(str) - 1) + "┘");
    end;
    initTApplicationRow2_7(applicationName);
end;

/***************************************************************************************************
 *  Базовый класс строки приложения для Приложения 5 по 342-П
 **************************************************************************************************/
class (TApplicationRow6) TApplicationRow342_5(applicationName : String)

    private macro correctValueArray(valueArray : TArray, roubleValue : String)

        var dateCount = global.parameters.getPeriod().daysQuantity + 2;

        if (dateCount == 32)
            return;
        end;

        var i = dateCount;

        while (i < valueArray.size)
            valueArray[i] = "0";
            i = i + 1;
        end;

        valueArray[valueArray.size - 1] = roubleValue;
    end;

    private macro getArrayExt(defaultValue, isPrintRouble : Bool, isPrintCurrency : Bool) : TArray
        var size : Integer = 33;
        var i    : Integer = 0;
        var valueArray     = TArray();

        while (i < size)
            valueArray[i] = defaultValue;
            i = i + 1;
        end;

        if (not isPrintRouble)
            i = 1;
            while (i < valueArray.size)
                valueArray[i] = "";
                i = i + 2;
            end;
        end;

        if (not isPrintCurrency)
            i = 2;
            while (i < valueArray.size)
                valueArray[i] = "";
                i = i + 2;
            end;
        end;

        return valueArray;
    end;

    private macro exportValueRowExt(iterator : Object, description : String, isPrintRouble : Bool, isPrintCurrency : Bool)
        var valueArray     : Object = getArrayExt(0, isPrintRouble, isPrintCurrency);
        var isFirst        : Bool   = true;
        var currentBalance : String = "no balance";
        var compositeValue : Object = NULL;

        var lastRoubleValue   = "";

        var i : Integer = 0;
        iterator.moveFirst();
        while (not iterator.isDone)
            compositeValue = iterator.currentItem;
            if (currentBalance != compositeValue.fieldValue("balance").currentAsString)
                if (not isFirst)
                    if (RcbApplication.currentReport.context.period.kind == RCB_PK_MONTH)
                        correctValueArray(valueArray, lastRoubleValue);
                    end;
                    global.klikoExportFile.printString(valueArray);
                end;
                isFirst = false;
                currentBalance = compositeValue.fieldValue("balance").currentAsString;
                valueArray = getArrayExt(0, isPrintRouble, isPrintCurrency);
                i = 0;
                if (description == NULL)
                    valueArray[i] = currentBalance;
                else
                    valueArray[i] = description;
                end;
                i = i + 1;
                valueArray[i] = ternary(isPrintRouble, compositeValue.fieldValue("roubleRest").currentAsString, "");
            else
                valueArray[i] = ternary(isPrintRouble, compositeValue.fieldValue("roubleRest").currentAsString, "");
            end;

            lastRoubleValue   = ternary(isPrintRouble, compositeValue.fieldValue("roubleRest").currentAsString, "");

            iterator.moveNext();
            i = i + 1;
        end;

        if (iterator.count > 0)

            if (RcbApplication.currentReport.context.period.kind == RCB_PK_MONTH)
                correctValueArray(valueArray, lastRoubleValue);
            end;

            global.klikoExportFile.printString(valueArray);
        end;

        if ((iterator.count == 0) and (description != NULL))
            valueArray[0] = description;
            global.klikoExportFile.printString(valueArray);
        end;
    end;

    /**
     *  Функционал экспорта в ПТК ПСД
     */
    macro getExportCode()
        return strSubst(getCode(), ".", "");
    end;

    m_valueColumnWidth = 17;
    initTApplicationRow6(applicationName);
end;
/***************************************************************************************************
 *  Базовый класс строки приложения для Приложения 6 по 342-П
 **************************************************************************************************/
class (TApplicationRow2_7) TApplicationRow342_6(applicationName : String)
    initTApplicationRow2_7(applicationName );

    private macro normalizeOneDecoding(decodingNamePool : RcbArray, isRouble : Bool, sign : Integer)
        class TSorter()
            macro isLess(v1 : Object, v2 : Object)
                return (Date(trim(v1.fieldValue("date").exact)) < Date(trim(v2.fieldValue("date").exact)));
            end;
        end;

        class TFilter(balance : String, row : String)
            private var m_balance = balance;
            private var m_row = row;

            macro isSuitable(v : Object)
                return (    (v.fieldValue("balance").exact == m_balance)
                        and ((m_row == null) or (v.fieldValue("row").exact == m_row))
                       );
            end;
        end;

        class TFilterOutSide(balance : String, row : String, beginDate : Date, endDate : Date)
            private var m_balance = balance;
            private var m_row = row;
            private var m_beginDate = beginDate;
            private var m_endDate = endDate;

            macro isSuitable(v : Object)
                return (    (v.fieldValue("balance").current == m_balance)
                        and ((m_row == null) or (v.fieldValue("row").current == m_row))
                        and ((v.fieldValue("date").current == m_beginDate) or (v.fieldValue("date").current == m_endDate + 1))
                       );
            end;
        end;

        class TEmptyFilter() /* Класс для возврата пустого итератора */
            macro isSuitable(v : Object)
                return (v.fieldValue("row").current == "1234567890");
            end;
        end;

        var iteratorPool = RcbArray();
        var applicationNamePool = RcbArray();

        var synchronizer = RcbValueIteratorSynchronizer(RCB_ISK_FULL_OUTER_JOIN, TSorter());

        var iterator;

        var decodingName;
        var applicationName;
        var row;

        decodingNamePool.moveFirst();

        if (global.parameters.isDisableNormalization() == 0)
            return getAttributeValueIterator(m_applicationName, TEmptyFilter());
        elif (global.parameters.isDisableNormalization() == 1)
            while (decodingNamePool.moveNext())
                decodingName = decodingNamePool.getCurrentItem();
                applicationName;
                row = null;
                if (isEqClass("TDecodingData", decodingName))
                    applicationName = decodingName.applicationName;
                    row = decodingName.row;
                    decodingName = decodingName.name;
                else
                    applicationName = m_applicationName;
                end;

                iterator = getAttributeValueIterator(applicationName, TFilterOutSide(decodingName, row, global.parameters.getBeginDate(), global.parameters.getEndDate()));
                iteratorPool.push_back(iterator);
                applicationNamePool.push_back(applicationName);
                synchronizer.addIterator(iterator);
            end;
        else
            while (decodingNamePool.moveNext())
                decodingName = decodingNamePool.getCurrentItem();
                applicationName;
                row = null;
                if (isEqClass("TDecodingData", decodingName))
                    applicationName = decodingName.applicationName;
                    row = decodingName.row;
                    decodingName = decodingName.name;
                else
                    applicationName = m_applicationName;
                end;

                iterator = getAttributeValueIterator(applicationName, TFilter(decodingName, row));
                iteratorPool.push_back(iterator);
                applicationNamePool.push_back(applicationName);
                synchronizer.addIterator(iterator);
            end;
        end;

        synchronizer.moveFirst();
        while (not synchronizer.isDone())

            iteratorPool.moveFirst();

            var dateValue : Date;
            var balanceNumber;

            var rcbValuePool = RcbArray();
            var isFirstIterator = true;
            var hasBalanceData = false;

            while (iteratorPool.moveNext())
                if (synchronizer.isNull(iteratorPool.getCurrentItem()))
                    continue;
                end;

                var compositeValue = iteratorPool.getCurrentItem().currentItem;

                if (isFirstIterator)
                    dateValue = Date(trim(compositeValue.fieldValue("date").exactAsString));
                    balanceNumber = substr(compositeValue.fieldValue("balance").exactAsString, 1, 5);
                    isFirstIterator = false;
                    hasBalanceData = global.balanceData.hasData(dateValue);
                end;

                if (hasBalanceData)
                    var value = compositeValue.fieldValue(ternary(isRouble, "roubleRest", "currencyRest"));
                    if (value.exact != $0)
                        var id = toAnsi(        applicationNamePool.value(iteratorPool.getCurrentIndex())
                                        + "_" + compositeValue.fieldValue("row").exactAsString
                                        + "_" + ternary(isRouble, "Ру", "Ва")
                                        + "_" + compositeValue.fieldValue("balance").exactAsString
                                        + "_" + string(dateValue : f),
                                        true
                                       );
                        rcbValuePool.push_back(TNormalizerValueData(id, value));
                    end;
                end;
            end;

            if (hasBalanceData)
                var balancevalues = global.balanceData.getValues(balanceNumber, dateValue);
                var balanceValue = ternary(isRouble, balancevalues.getRoubleScaledRest(), balancevalues.getCurrencyScaledRest());
                if ((balanceValue != 0.0) or (rcbValuePool.size != 0))
                    normalizeOneRecord(rcbValuePool, balanceValue, sign);
                end;
            end;

            synchronizer.moveNext();
        end;
    end;

    macro isPrintableBalance(compositeValue : Object)

        if (    ((m_code == "2") or (m_code == "3"))
                and (compositeValue.fieldValue("roubleRest").current == 0.0)
                and (compositeValue.fieldValue("currencyRest").current == 0.0))
                return false;
        end;
        /**
         * Раньше тут многое проверялось, теперь печатаем на основании настроечной таблицы,
         * а так как переменные уже заполнены на основаниии настроечной таблицы,
         * то ничего проверять не нужно
         */
        return true;
    end;

    private macro exportValueRowExt(iterator : Object, description : String, isPrintRouble : Bool, isPrintCurrency : Bool)
        var valueArray     : Object = getArrayExt(0, isPrintRouble, isPrintCurrency);
        var isFirst        : Bool   = true;
        var currentBalance : String = "no balance";
        var compositeValue : Object = NULL;

        var lastCurrencyValue = "";
        var lastRoubleValue   = "";

        var i : Integer = 0;
        iterator.moveFirst();
        while (not iterator.isDone)
            compositeValue = iterator.currentItem;
            if (currentBalance != compositeValue.fieldValue("balance").currentAsString)
                if (not isFirst)
                    if (RcbApplication.currentReport.context.period.kind == RCB_PK_MONTH)
                        correctValueArray(valueArray, lastRoubleValue, lastCurrencyValue, isPrintRouble, isPrintCurrency);
                    end;
                    global.klikoExportFile.printString(valueArray);
                end;
                isFirst = false;
                currentBalance = compositeValue.fieldValue("balance").currentAsString;
                valueArray = getArrayExt(0, isPrintRouble, isPrintCurrency);
                i = 0;
                if (description == NULL)
                    valueArray[i] = currentBalance;
                else
                    valueArray[i] = description;
                end;
                i = i + 1;
                valueArray[i] = ternary(isPrintRouble, compositeValue.fieldValue("roubleRest").currentAsString, "");

                i = i + 1;
                valueArray[i] = ternary(isPrintCurrency, compositeValue.fieldValue("currencyRest").currentAsString, "");
            else
                valueArray[i] = ternary(isPrintRouble, compositeValue.fieldValue("roubleRest").currentAsString, "");

                i = i + 1;
                valueArray[i] = ternary(isPrintCurrency, compositeValue.fieldValue("currencyRest").currentAsString, "");
            end;

            lastRoubleValue   = ternary(isPrintRouble, compositeValue.fieldValue("roubleRest").currentAsString, "");
            lastCurrencyValue = ternary(isPrintCurrency, compositeValue.fieldValue("currencyRest").currentAsString, "");

            iterator.moveNext();
            i = i + 1;
        end;

        if (iterator.count > 0)

            if (RcbApplication.currentReport.context.period.kind == RCB_PK_MONTH)
                correctValueArray(valueArray, lastRoubleValue, lastCurrencyValue, isPrintRouble, isPrintCurrency);
            end;

            global.klikoExportFile.printString(valueArray);
        end;

        if ((iterator.count == 0) and (description != NULL))
            valueArray[0] = description;
            global.klikoExportFile.printString(valueArray);
        end;
    end;

    private macro correctValueArray(valueArray : TArray, roubleValue : String, currencyValue : String, isPrintRouble : Bool, isPrintCurrency : Bool)

        var dateCount = global.parameters.getPeriod().daysQuantity + 2;

        if (dateCount == 32)
            return;
        end;

        var i = dateCount * 2 - 1;

        while (i < valueArray.size)

            valueArray[i]     = ternary(isPrintRouble, "0", "");

            if ((i+1) < valueArray.size)
                valueArray[i + 1] = ternary(isPrintCurrency, "0", "");
            end;
            i = i + 2;

        end;

        valueArray[valueArray.size - 2] = ternary(isPrintRouble, roubleValue, "");
        valueArray[valueArray.size - 1] = ternary(isPrintCurrency, currencyValue, "");
    end;

    private macro getArrayExt(defaultValue, isPrintRouble : Bool, isPrintCurrency : Bool) : TArray
        var size : Integer = 65;
        var i    : Integer = 0;
        var valueArray     = TArray();

        while (i < size)
            valueArray[i] = defaultValue;
            i = i + 1;
        end;

        if (not isPrintRouble)
            i = 1;
            while (i < valueArray.size)
                valueArray[i] = "";
                i = i + 2;
            end;
        end;

        if (not isPrintCurrency)
            i = 2;
            while (i < valueArray.size)
                valueArray[i] = "";
                i = i + 2;
            end;
        end;

        return valueArray;
    end;

    private macro saveAttributeValue(balanceGroup : String, balance : String, date_: Date, roubleRest : Money, currencyRest : Money, roubleScaledRest : Double, currencyScaledRest : Double)
        var attributeValue = m_report.attributeValue(m_applicationName);
        var compositeValue = attributeValue.addValue();

        if ((roubleScaledRest == NULL) or (currencyScaledRest == NULL))
            compositeValue.fieldValue("roubleRest").setUndefined();
            compositeValue.fieldValue("currencyRest").setUndefined();
        else
            compositeValue.fieldValue("roubleRest").scaled   = roubleScaledRest;
            compositeValue.fieldValue("currencyRest").scaled = currencyScaledRest;
        end;
        compositeValue.fieldValue("row").exact          = m_code;
        compositeValue.fieldValue("balanceGroup").exact = balanceGroup;
        compositeValue.fieldValue("balance").exact      = balance;
        compositeValue.fieldValue("date").exact         = String(date_);
        compositeValue.fieldValue("roubleRest").exact   = roubleRest;
        compositeValue.fieldValue("currencyRest").exact = currencyRest;

    end;
end;

/***************************************************************************************************
 *  Базовый класс строки приложения для приложения:
 *      "Отчет об отсутствии остатков на балансовых счетах отдельных расшифровок"
 **************************************************************************************************/
class (TApplicationRow) TApplicationRow8(applicationName : String)

    local class  TSequence(start)
        private var m_start = start;

        macro nextVal()
            m_start = m_start + 1;
            return m_start - 1;
        end;
    end;

    private var sequence = TSequence(1);

    macro removeValues()
        var iterator = getAttributeValueIterator(m_applicationName);
        var idList   = TArray();
        var i;

        i = 0;
        iterator.moveFirst();
        while(not iterator.isDone())
            if( iterator.currentItem.valueId != 0 )
                idList(i) = iterator.currentItem.valueId;
                i = i + 1;
            end;
            iterator.moveNext();
        end;

        i = 0;
        while(i < idList.size())
            m_report.AttributeValue(m_applicationName).removeValue(idList(i));
            i = i + 1;
        end;

	sequence = TSequence(1);
    end;

    private macro saveAttributeValue(row : String, applicationName : String, balanceList : String)
        var attributeValue = m_report.attributeValue(m_applicationName);
        var compositeValue = attributeValue.addValue();
        compositeValue.fieldValue("row").exact             = row;
        compositeValue.fieldValue("applicationName").exact = applicationName;
        compositeValue.fieldValue("balanceList").exact     = balanceList;
    end;

    initTApplicationRow(applicationName);
end;
