import BankInter, Календарь, ReptCBInter, ReptCBCommon, rsexts, param, cb_sql, cy_find, chk_regd, exp_exl, lib_path, rcb_lib;
import RsbDataSet;

import DepartmentFilter;  /*23 Apr 07 Mon 14:56:11 Malakhova Irina 104847*/
import FIInter;

import acv; /*16 Jan 07 Malakhova Irina - Для вызова функции печати шапки*/

import RcbCoreInter;

import rcbconst;

const RRG_IS =  0; /* Входящие остатки - итого */
const RRG_DR =  1;
const RRG_DV =  2;
const RRG_DS =  3;
const RRG_CR =  4;
const RRG_CV =  5;
const RRG_CS =  6;
const RRG_OS =  7; /* Исходящие остатки - итого */

const RRG_PRL8_XOK      = 0;
const RRG_PRL8_XWarning = 1;
const RRG_PRL8_XError   = 2;

private const ALIGN_LEFT   = -1;
private const ALIGN_CENTER = 0;
private const ALIGN_RIGHT  = 1;

private const REPORT_WIDTH = 213;

private const KA_A  = "А";
private const KA_P  = "П";
private const KA_AP = "АП";
private const KA_0  = "0";

private const FORM_NAME = "Балансовые счета";
private const FORM_ID   = НайтиИдентификаторОтчетаПоНазванию( FORM_NAME );

private const PRK_ALL = 0;
private const PRK_BWP = 1;
private const PRK_NOZ = 2;
private const PRK_BEG = PRK_ALL;
private const PRK_END = PRK_NOZ;

private const PRINT_KIND_REGPATH          = "REPTREG/REP_GROUPS/BALANCE_ACCOUNTS/ПЕЧАТЬ ФОРМЫ 101";
private const PRINT_COPECKS_REGPATH       = "REPTREG/REP_GROUPS/BALANCE_ACCOUNTS/ПЕЧАТЬ В КОПЕЙКАХ";
private const PRINT_EVERY_DAY_REGPATH     = "REPTREG/REP_GROUPS/BALANCE_ACCOUNTS/ПЕЧАТЬ ЗА КАЖДЫЙ ДЕНЬ ПЕРИОДА";
private const PRINT_LEVEL_2_TOTAL_REGPATH = "REPTREG/REP_GROUPS/ОБОРОТНАЯ_ВЕДОМОСТЬ(ПРИЛ.8)/ПЕЧАТЬ_ИТОГОВ_2_ПОРЯДКА";

private const VF_MONEY  = "Д";
private const VF_DOUBLE = "Ч";
private const VF_PERC   = "%";
private const VF_ITEM   = "Ш";


private class (CTableReport) PRL8_TableReport()
    InitCTableReport( 1,TRUE, FALSE );

    AddColumn( "", 5  );    /* Номер счета первого порядка */
    AddColumn( "", 5  );    /* Номер счета второго порядка */
    AddColumn( "", 25 );    /* Наименование счетов баланса */
    AddColumn( "", 18, AL_RIGHT );    /* Входящие остатки            */
    AddColumn( "", 18, AL_RIGHT );    /* Обороты по дебету в рублях  */
    AddColumn( "", 18, AL_RIGHT );    /* Обороты по дебету в валюте  */
    AddColumn( "", 18, AL_RIGHT );    /* Обороты по дебету итого     */
    AddColumn( "", 18, AL_RIGHT );    /* Обороты по кредиту в рублях */
    AddColumn( "", 18, AL_RIGHT );    /* Обороты по кредиту в валюте */
    AddColumn( "", 18, AL_RIGHT );    /* Обороты по кредиту итого    */
    AddColumn( "", 18, AL_RIGHT );    /* Исходящие остатки           */


end;



class RRG_PRL8_Error( p_XType : Integer, p_XMessage : String )

    var XType    = p_XType;
    var XMessage = p_XMessage;

end;

private var RRG_PRL8_X = RRG_PRL8_Error( RRG_PRL8_XOK, "" );

macro RRG_PRL8_XThrow( XType : Integer, XMessage : String )

    RRG_PRL8_X = RRG_PRL8_Error( XType, XMessage );

    RunError(XMessage);

end;

macro RRG_PRL8_XCatch(err)

    if   ( RRG_PRL8_X.XType == RRG_PRL8_XWarning )
        MsgBox( RRG_PRL8_X.XMessage );
    elif ( RRG_PRL8_X.XType == RRG_PRL8_XError   )
        MsgBox( RRG_PRL8_X.XMessage );
    else
        RunError();
    end;

    Exit(1);

end;


private macro GetPartitionName( balance, chapter, planNumber, partition )
    var query = " SELECT T_NAME_PART "  +
                " FROM DPARTBLNC_DBT "  +
                " WHERE T_CHAPTER  =  " + chapter +
                " AND   T_INUMPLAN =  " + planNumber +
                " AND   T_PART     =  " + partition;

    var dataset = TRsbDataSet( query );

    if ( not dataset.MoveNext() )
        RRG_PRL8_XThrow( RRG_PRL8_XError, String("Не найдено имя раздела для балансового счета: ", balance ) );
    end;


    return dataset.name_part;
end;

/*
private macro GetBalanceName( balance, chapter, planNumber )
    var query = " SELECT T_NAME_PART "  +
                " FROM DBALANCE_DBT "  +
                " WHERE T_CHAPTER  =  " + chapter +
                " AND   T_INUMPLAN =  " + planNumber +
                " AND   T_BALANCE  =  " + GetSQLString( balance );

    var dataset = TRsbDataSet( query );

    dataset.First();

    if ( not dataset.MoveNext() )
        RRG_PRL8_XThrow( RRG_PRL8_XError, String("Не найдено имя балансового счета: ", balance ) );
    end;


    return dataset.name_part;

end;
*/

// Morgo (2012.12.27) - ищем наименование счета из истории DBALANCE_NAMEHISTORY_DBT
private macro GetBalanceName( balance, chapter, planNumber )

    var query = "select T_NAME_PART                                                                                            "
       + "\n" + "from                                                                                                          "
       + "\n" + "(                                                                                                             "
       + "\n" + " select T_BALANCE, T_NAME_PART, T_INSTRUCTIONDATE                                                             "
       + "\n" + "    from                                                                                                      "
       + "\n" + "    (                                                                                                         "
       + "\n" + "        SELECT T_BALANCE, T_NAME_PART, T_INSTRUCTIONDATE                                                      "
       + "\n" + "        FROM DBALANCE_NAMEHISTORY_DBT                                                                         "
       + "\n" + "        WHERE T_BALANCE  = " + GetSQLString( balance )
       + "\n" + "        and T_INSTRUCTIONDATE <= " + GetSQLString(ДатаОтчета)
       + "\n" + "        )                                                                                                     "
       + "\n" + "        order by T_INSTRUCTIONDATE desc                                                                       "
       + "\n" + ") WHERE ROWNUM = 1                                                                                            ";

    var dataset = TRsbDataSet( query );

    if (not dataset.Next())
        query = " SELECT T_NAME_PART "  +
                " FROM DBALANCE_DBT "  +
                " WHERE T_CHAPTER  =  " + chapter +
                " AND   T_INUMPLAN =  " + planNumber +
                " AND   T_BALANCE  =  " + GetSQLString( balance );
        dataset = TRsbDataSet( query );

        if ( not dataset.MoveNext() )
           RRG_PRL8_XThrow( RRG_PRL8_XError, String("Не найдено имя балансового счета: ", balance ) );
        end;
    end;

    return dataset.name_part;

end;

private macro GetPartition( balance, chapter, planNumber )

    var query = " SELECT  T_PART " +
                " FROM    DBALANCE_DBT " +
                " WHERE T_CHAPTER  =  " + chapter +
                " AND   T_INUMPLAN =  " + planNumber +
                " AND   T_BALANCE  =  " + GetSQLString( balance );


    var dataset = TRsbDataSet( query );

    if ( not dataset.MoveNext() )
        RRG_PRL8_XThrow( RRG_PRL8_XError, String("Не найден раздел для балансового счета: ", balance ) );
    end;


    return dataset.part;


end;

private macro recursiveFindSpodValue(balance : string, root)
    var iterator = root.createValueIterator();
    var result = NULL;

    iterator.moveFirst();
    while (not iterator.isDone())
        if (iterator.currentItem.fieldValue("balance").exact == balance)
            return iterator.currentItem;
        end;

        result = recursiveFindSpodValue(balance, iterator.currentItem);
        if( result != NULL )
            return result;
        end;

        iterator.moveNext();
    end;

    return result;
end;

private macro ZeroValue( Format )
    if   ( format == VF_MONEY  ) return Money ($0);
    elif ( format == VF_DOUBLE ) return Double(0.);
    elif ( format == VF_PERC   ) return Double(0.);
    elif ( format == VF_ITEM   ) return Int   (0);
    else
        RRG_PRL8_XThrow( RRG_PRL8_XError, String("Неизвестный формат переменной: ",format) );
    end;
end;

class RRG_PRL8_Balance( dataSet )

    private var m_Balance     : String;
    private var m_BalanceName : String;
    private var m_BKind       : String;
    private var m_isAP        : Integer;
    private var m_Sums        : TArray;

    private var m_isWork      : Bool;
    private var m_isZero      : Bool;

    private var m_Format      : String;
    private var m_Zero;

    private var m_isSkip : Bool;

    private macro getValue( dataSet, cname, varname, make_error )

        macro getMean( mean1, mean2 )
           var value;

           if   ( m_Format == VF_MONEY  ) value = Money (mean1);
           elif ( m_Format == VF_DOUBLE ) value = Double(mean1);
           elif ( m_Format == VF_PERC   ) value = Double(mean1);
           elif ( m_Format == VF_ITEM   ) value = Double(mean1);
           else
               RRG_PRL8_XThrow( RRG_PRL8_XError, String("Неизвестный формат переменной: ",m_Format) );
           end;

           return value;
        end;

        if (m_isSkip)
            m_isZero = true;
            return 0;
        end;

        var iswrk  = dataSet.value(cname+"w",NULL,V_INTEGER) == 1;
        var isnul  = false;
        var mean1  = dataSet.value(cname+"1",@isnul,V_DOUBLE);
        var mean2  = dataSet.value(cname+"2",@isnul,V_DOUBLE);
        var value;

        if ( not iswrk )
            value = m_Zero;
        else
            m_isWork = true;

            if ( isnul )
                if ( (not make_error) or (MeanUndefByZero != 0) )
                    value = m_Zero;
                else
                    RRG_PRL8_XThrow( RRG_PRL8_XError, String("Не найдено значение переменной \"",varname,"\"") );
                end;
            else
                value = getMean( mean1, mean2 );
            end;
        end;

        if ( value != m_Zero )
            m_isZero = false;
        end;

        return value;
    end;

    private macro Constructor( dataSet )

        macro setSums()
            if (m_isSkip)
                return;
            end;

            var cr = getValue( dataSet, "cr", String("Бн",m_Balance,"РуК"), true ),
                cp = getValue( dataSet, "cp", String("Бн",m_Balance,"ПоК"), true ),
                cs = getValue( dataSet, "cs", String("Бн",m_Balance,"__К"), true ),
                dr = getValue( dataSet, "dr", String("Бн",m_Balance,"РуД"), true ),
                dp = getValue( dataSet, "dp", String("Бн",m_Balance,"ПоД"), true ),
                ds = getValue( dataSet, "ds", String("Бн",m_Balance,"__Д"), true ),
                ar = getValue( dataSet, "ar", String("Бн",m_Balance,"РуА"), m_isAP or (m_BKind == KA_A) ),
                ap = getValue( dataSet, "ap", String("Бн",m_Balance,"ПоА"), m_isAP or (m_BKind == KA_A) ),
                as = getValue( dataSet, "as", String("Бн",m_Balance,"__А"), m_isAP or (m_BKind == KA_A) ),
                pr = getValue( dataSet, "pr", String("Бн",m_Balance,"РуП"), m_isAP or (m_BKind == KA_P) ),
                pp = getValue( dataSet, "pp", String("Бн",m_Balance,"ПоП"), m_isAP or (m_BKind == KA_P) ),
                ps = getValue( dataSet, "ps", String("Бн",m_Balance,"__П"), m_isAP or (m_BKind == KA_P) );

            m_Sums[RRG_CR] = cr;
            m_Sums[RRG_CV] = cp;
            m_Sums[RRG_CS] = cs;
            m_Sums[RRG_DR] = dr;
            m_Sums[RRG_DV] = dp;
            m_Sums[RRG_DS] = ds;

            if   ( m_BKind == KA_A )

                m_Sums[RRG_OS] = as - ps;
                m_Sums[RRG_IS] = m_Sums[RRG_OS] - m_Sums[RRG_DS] + m_Sums[RRG_CS];

            elif ( m_BKind == KA_P )

                m_Sums[RRG_OS] = ps - as;
                m_Sums[RRG_IS] = m_Sums[RRG_OS] + m_Sums[RRG_DS] - m_Sums[RRG_CS];

            end;
        end;

        macro setFormat()
            m_Format = NULL;

            if ( m_Format == NULL ) m_Format = dataSet.crf; end;
            if ( m_Format == NULL ) m_Format = dataSet.cpf; end;
            if ( m_Format == NULL ) m_Format = dataSet.csf; end;
            if ( m_Format == NULL ) m_Format = dataSet.drf; end;
            if ( m_Format == NULL ) m_Format = dataSet.dpf; end;
            if ( m_Format == NULL ) m_Format = dataSet.dsf; end;
            if ( m_Format == NULL ) m_Format = dataSet.arf; end;
            if ( m_Format == NULL ) m_Format = dataSet.apf; end;
            if ( m_Format == NULL ) m_Format = dataSet.asf; end;
            if ( m_Format == NULL ) m_Format = dataSet.prf; end;
            if ( m_Format == NULL ) m_Format = dataSet.ppf; end;
            if ( m_Format == NULL ) m_Format = dataSet.psf; end;

            if ( m_Format == NULL )
                m_isSkip = true;
                return;
//                RRG_PRL8_XThrow( RRG_PRL8_XError, "Отсутствуют переменные для б/с: " + m_Balance );
            end;

            m_Zero = ZeroValue(m_Format);
        end;

        m_isSkip = false;

        m_Balance     = dataSet.value("Balance");
        m_BalanceName = dataSet.value("BalanceName");
        m_BKind       = dataSet.value("BKind");
        m_isAP        = dataSet.value("isAP");

        m_Sums = TArray();

        m_isWork = false;
        m_isZero = true;

        setFormat();

        setSums();

    end;

    macro Balance()
        return m_Balance;
    end;

    macro BalanceName()
        return m_BalanceName;
    end;

    macro Sums()
        return m_Sums;
    end;

    macro isWork()
        return m_isWork;
    end;

    macro isZero()
        return m_isZero;
    end;

    macro isAP()
        return m_isAP;
    end;

    Constructor(dataSet);

end;

class (RRG_PRL8_Balance) RRG_PRL85_Balance( dataSet )

    initRRG_PRL8_Balance(dataSet);

    private var m_precision;
    private var m_multiplier;

    private macro getValue( dataSet, cname, varname, make_error )

        if (m_isSkip)
            m_isZero = true;
            return 0;
        end;

        var iswrk  = dataSet.value(cname+"w",NULL,V_INTEGER) == 1;
        var isnul  = false;
        var mean2  = dataSet.value(cname+"2",@isnul,V_DOUBLE);
        var value;

        if ( not iswrk )
            value = m_Zero;
        else
            m_isWork = true;

            if ( isnul )
                if ( (not make_error) or (MeanUndefByZero != 0) )
                    value = m_Zero;
                else
                    RRG_PRL8_XThrow( RRG_PRL8_XError, String("Не найдено значение переменной \"",varname,"\"") );
                end;
            else
                value = mean2/m_multiplier;
            end;
        end;

        if ( value != m_Zero )
            m_isZero = false;
        end;

        return value;
    end;

    private macro Constructor( dataSet )

        macro setSums()
            if (m_isSkip)
                return;
            end;

            var cr = getValue( dataSet, "cr", String("Бн",m_Balance,"РуК"), true ),
                cp = getValue( dataSet, "cp", String("Бн",m_Balance,"ПоК"), true ),
                cs = getValue( dataSet, "cs", String("Бн",m_Balance,"__К"), true ),
                dr = getValue( dataSet, "dr", String("Бн",m_Balance,"РуД"), true ),
                dp = getValue( dataSet, "dp", String("Бн",m_Balance,"ПоД"), true ),
                ds = getValue( dataSet, "ds", String("Бн",m_Balance,"__Д"), true ),
                ar = getValue( dataSet, "ar", String("Бн",m_Balance,"РуА"), m_isAP or (m_BKind == KA_A) ),
                ap = getValue( dataSet, "ap", String("Бн",m_Balance,"ПоА"), m_isAP or (m_BKind == KA_A) ),
                as = getValue( dataSet, "as", String("Бн",m_Balance,"__А"), m_isAP or (m_BKind == KA_A) ),
                pr = getValue( dataSet, "pr", String("Бн",m_Balance,"РуП"), m_isAP or (m_BKind == KA_P) ),
                pp = getValue( dataSet, "pp", String("Бн",m_Balance,"ПоП"), m_isAP or (m_BKind == KA_P) ),
                ps = getValue( dataSet, "ps", String("Бн",m_Balance,"__П"), m_isAP or (m_BKind == KA_P) );

            m_Sums[RRG_CR] = cr;
            m_Sums[RRG_CV] = cp;
            m_Sums[RRG_CS] = cs;
            m_Sums[RRG_DR] = dr;
            m_Sums[RRG_DV] = dp;
            m_Sums[RRG_DS] = ds;

            if   ( m_BKind == KA_A )

                m_Sums[RRG_OS] = as - ps;
                m_Sums[RRG_IS] = m_Sums[RRG_OS] - m_Sums[RRG_DS] + m_Sums[RRG_CS];

            elif ( m_BKind == KA_P )

                m_Sums[RRG_OS] = ps - as;
                m_Sums[RRG_IS] = m_Sums[RRG_OS] + m_Sums[RRG_DS] - m_Sums[RRG_CS];

            end;
        end;

        macro setFormat()
            m_Format = NULL;

            if ( m_Format == NULL ) m_Format = dataSet.crf; end;
            if ( m_Format == NULL ) m_Format = dataSet.cpf; end;
            if ( m_Format == NULL ) m_Format = dataSet.csf; end;
            if ( m_Format == NULL ) m_Format = dataSet.drf; end;
            if ( m_Format == NULL ) m_Format = dataSet.dpf; end;
            if ( m_Format == NULL ) m_Format = dataSet.dsf; end;
            if ( m_Format == NULL ) m_Format = dataSet.arf; end;
            if ( m_Format == NULL ) m_Format = dataSet.apf; end;
            if ( m_Format == NULL ) m_Format = dataSet.asf; end;
            if ( m_Format == NULL ) m_Format = dataSet.prf; end;
            if ( m_Format == NULL ) m_Format = dataSet.ppf; end;
            if ( m_Format == NULL ) m_Format = dataSet.psf; end;

            if ( m_Format == NULL )
                m_isSkip = true;
                return;
//                RRG_PRL8_XThrow( RRG_PRL8_XError, "Отсутствуют переменные для б/с: " + m_Balance );
            end;

            if(m_precision == 0)
                m_Zero = Int   (0);
            else
                m_Zero = Double(0.);
            end;
        end;

        m_isSkip = false;

        getRegistryValue("REPTREG/REP_GROUPS/BALANCE_ACCOUNTS/ТОЧНОСТЬ ДЛЯ ГЛАВЫ Д", V_INTEGER,  m_precision, null);
        m_multiplier = rcbApplication.currentReport.multiplier;

        m_Balance     = dataSet.value("Balance");
        m_BalanceName = dataSet.value("BalanceName");
        m_BKind       = dataSet.value("BKind");
        m_isAP        = dataSet.value("isAP");

        m_Sums = TArray();

        m_isWork = false;
        m_isZero = true;

        setFormat();

        setSums();

    end;
end;

class (RRG_PRL8_Balance) RRG_PRL8_BalanceSpod( dataSet )

    private var m_spodSums = TArray();

    local macro correctSpod()
        var spodValue = recursiveFindSpodValue(m_balance, RcbApplication.currentReport.attributeValue("БнСПОД_СП"));

        var currCR = 0;
        var currCV = 0;
        var currCS = 0;
        var nextCR = 0;
        var nextCV = 0;
        var nextCS = 0;
        var currDR = 0;
        var currDV = 0;
        var currDS = 0;
        var nextDR = 0;
        var nextDV = 0;
        var nextDS = 0;

        m_spodSums[RRG_CR] = 0;
        m_spodSums[RRG_CV] = 0;
        m_spodSums[RRG_CS] = 0;
        m_spodSums[RRG_DR] = 0;
        m_spodSums[RRG_DV] = 0;
        m_spodSums[RRG_DS] = 0;

        if (spodValue != NULL)
            currCR = spodValue.fieldValue("currYearCreditRouble").exact;
            currCV = spodValue.fieldValue("currYearCreditCover").exact;
            currCS = currCR + currCV;
            nextCR = spodValue.fieldValue("nextYearCreditRouble").exact;
            nextCV = spodValue.fieldValue("nextYearCreditCover").exact;
            nextCS = nextCR + nextCV;
            currDR = spodValue.fieldValue("currYearDebetRouble").exact;
            currDV = spodValue.fieldValue("currYearDebetCover").exact;
            currDS = currDR + currDV;
            nextDR = spodValue.fieldValue("nextYearDebetRouble").exact;
            nextDV = spodValue.fieldValue("nextYearDebetCover").exact;
            nextDS = nextDR + nextDV;

            if (RcbApplication().currentReport.context.period.kind == RCB_PK_YEAR)
                m_sums[RRG_CR] = m_sums[RRG_CR] - currCR;
                m_sums[RRG_CV] = m_sums[RRG_CV] - currCV;
                m_sums[RRG_CS] = m_sums[RRG_CS] - currCS;
                m_sums[RRG_DR] = m_sums[RRG_DR] - currDR;
                m_sums[RRG_DV] = m_sums[RRG_DV] - currDV;
                m_sums[RRG_DS] = m_sums[RRG_DS] - currDS;

                if   (m_BKind == KA_A)
                    m_sums[RRG_OS] = m_sums[RRG_OS];
                    m_sums[RRG_IS] = m_sums[RRG_IS] + (currDS - currCS);
                elif (m_BKind == KA_P)
                    m_sums[RRG_OS] = m_sums[RRG_OS];
                    m_sums[RRG_IS] = m_sums[RRG_IS] + (currCS - currDS);
                end;
            else
                m_spodSums[RRG_CR] = nextCR;
                m_spodSums[RRG_CV] = nextCV;
                m_spodSums[RRG_CS] = nextCS;
                m_spodSums[RRG_DR] = nextDR;
                m_spodSums[RRG_DV] = nextDV;
                m_spodSums[RRG_DS] = nextDS;
            end;
        end;
    end;

    macro spodSums()
        return m_spodSums;
    end;

    initRRG_PRL8_Balance(dataSet);

    correctSpod();

end;

class RRG_PRL8_Protocol( p_NameFile )

    private var m_NameFile : String;

    private macro Constructor(p_NameFile)
        m_NameFile = getTxtFileName(p_NameFile);

        SetOutPut( m_NameFile, false );
        SetOutPut( NULL,       true  );
    end;

    macro NameFile()
        return m_NameFile;
    end;

    macro PrintLine( Mess : String )
        SetOutPut(m_NameFile,true);
        PrintLn(Mess);
        SetOutPut(NULL,true);
    end;

    macro View()
        file p() txt;

        if ( not Open(p,m_NameFile) )
            RRG_PRL8_XThrow( RRG_PRL8_XWarning, String("Ошибка открытия файла протокола:|",m_NameFile) );
        end;

        ViewFile(p);
    end;

    Constructor(p_NameFile);

end;

class RRG_PRL8_Parm( p_Chapter : Integer)

    var Chapter    : Integer;
    var PlanNumber : Integer;
    var PrintKind  : Integer;
    var EveryDay   : Bool;
    var PrintOCP   : Bool;
    var PrintCop   : Bool;
    var Date1376   : Date;
    var periodKind : Integer;

    var PrintLevel2Total : bool;

    var BegDate    : Date;
    var EndDate    : Date;
    var Protocol   : RRG_PRL8_Protocol;

    private macro initPrintKind()
        var type = V_UNDEF,
            err  = 0,
            val  = PRK_NOZ;

        PrintKind = PRK_NOZ;

        type = GetRegistryValue( PRINT_KIND_REGPATH, V_INTEGER, val, err );
        if ( (err == 0) and (type == V_INTEGER) )
            if ( (val >= PRK_BEG) and (val <= PRK_END) )
                PrintKind = val;
            end;
        end;
    end;

    private macro initEveryDay()
        var type = V_UNDEF,
            err  = 0,
            val  = false;

        EveryDay = false;

        type = GetRegistryValue( PRINT_EVERY_DAY_REGPATH, V_BOOL, val, err );
        if ( (err == 0) and (type == V_BOOL) )
            EveryDay = val;
        end;
    end;


    private macro initPrintCop()
        var type = V_UNDEF,
            err  = 0,
            val  = false;

        PrintCop = false;

        type = GetRegistryValue( PRINT_COPECKS_REGPATH, V_BOOL, val, err );
        if ( (err == 0) and (type == V_BOOL) )
            PrintCop = val;
        end;
    end;

    private macro initDate1376()
        Date1376 = Date(1,4,2004);

        GetRegDate(Date1376,"ДАТА_1376У");
        if ( Date1376 == date(0,0,0) )
            Date1376 = date(1,4,2004);
        end;
    end;



    private macro initPrintLevel2Total()
        var type = V_UNDEF,
            err  = 0,
            val  = false;

        PrintLevel2Total = false;

        type = GetRegistryValue( PRINT_LEVEL_2_TOTAL_REGPATH, V_BOOL, val, err );
        if ( (err == 0) and (type == V_BOOL) )
            PrintLevel2Total = val;
        end;
    end;



    private macro initProtocol()
        Protocol = RRG_PRL8_Protocol("PRL8_log");
    end;

    private macro Constructor( p_Chapter)
        Chapter = p_Chapter;
        planNumber = ПолучитьРеальныйНомерПлана();

        initPrintKind();
        initEveryDay();
        initPrintCop();
        initDate1376();
        initProtocol();
        initPrintLevel2Total();

        BegDate = ПредДатаОтчета;
        EndDate = ДатаОтчета;
        periodKind = RcbApplication().currentReport.context.period.kind;
    end;

    Constructor(p_Chapter);

end;

class RRG_PRL8_Itog( Parm : RRG_PRL8_Parm )

    private var m_Sums    : TArray;
    private var m_IsValid : Bool;

    macro ClearSums()
        m_Sums[RRG_OS] = $0;
        m_Sums[RRG_IS] = $0;
        m_Sums[RRG_CR] = $0;
        m_Sums[RRG_CV] = $0;
        m_Sums[RRG_CS] = $0;
        m_Sums[RRG_DR] = $0;
        m_Sums[RRG_DV] = $0;
        m_Sums[RRG_DS] = $0;
    end;


    private macro Constructor( Parm )
        m_Sums    = TArray();
        m_IsValid = false;
        ClearSums();
    end;

    macro Sums()
        return m_Sums;
    end;

    private macro OpAdd( Sums : TArray )
        var i = 0;

        while( i < m_Sums.Size() )
            if (Sums[i] != NULL)
                m_Sums[i] = m_Sums[i] + Sums[i];
            end;
            i = i + 1;
        end;
    end;

    private macro OpSub( Sums : TArray )
        var i = 0;

        while( i < m_Sums.Size() )
            if (Sums[i] != NULL)
                m_Sums[i] = m_Sums[i] - Sums[i];
            end;
            i = i + 1;
        end;
    end;

    macro AddI( Itog )
        OpAdd(Itog.Sums());
    end;

    macro SubI( Itog  )
        OpSub(Itog.Sums());
    end;

    macro AddB( Balance )
        OpAdd(Balance.Sums());
    end;

    macro SubB( Balance )
        OpSub(Balance.Sums());
    end;

    macro isZero()
        var i = 0;

        while( i < m_sums.Size() )
            if ((m_sums[i] != NULL) and (m_sums[i] != $0))
                return false;;
            end;
            i = i + 1;
        end;

        return true;
    end;

    Constructor(parm);
end;

class (RRG_PRL8_Itog) RRG_PRL8_ItogSpod( Parm : RRG_PRL8_Parm )

    private var m_spodSums = TArray();

    macro clearSums()
        ClearSums();

        m_spodSums[RRG_CR] = $0;
        m_spodSums[RRG_CV] = $0;
        m_spodSums[RRG_CS] = $0;
        m_spodSums[RRG_DR] = $0;
        m_spodSums[RRG_DV] = $0;
        m_spodSums[RRG_DS] = $0;
    end;

    private macro OpAddSpod( Sums : TArray )
        var i = 0;

        while( i < m_spodSums.Size() )
            if (Sums[i] != NULL)
                m_spodSums[i] = m_spodSums[i] + Sums[i];
            end;
            i = i + 1;
        end;
    end;

    private macro OpSubSpod( Sums : TArray )
        var i = 0;

        while( i < m_spodSums.Size() )
            if (Sums[i] != NULL)
                m_spodSums[i] = m_spodSums[i] - Sums[i];
            end;
            i = i + 1;
        end;
    end;

    macro spodSums()
        return m_spodSums;
    end;

    macro AddI( Itog  )
        AddI(Itog);
        OpAddSpod(Itog.spodSums());
    end;

    macro SubI( Itog  )
        SubI(Itog);
        OpSubSpod(Itog.spodSums());
    end;

    macro AddB( Balance )
        AddB(Balance);
        OpAddSpod(Balance.spodSums());
    end;

    macro SubB( Balance )
        SubB(Balance);
        OpSubSpod(Balance.spodSums());
    end;

    macro isZero()
        var i = 0;

        while( i < m_spodSums.size() )
            if ((m_spodSums[i] != NULL) and (m_spodSums[i] != $0))
                return false;
            end;
            i = i + 1;
        end;

        return true;
    end;

    initRRG_PRL8_Itog(parm);
end;

private macro NamePeriod( parm : RRG_PRL8_Parm )
    var Name = "";
    var m = 0,
        y = 0;

    if ( parm.EveryDay )
        Name = String( parm.CurDate:m );
    else
        DateSplit( parm.EndDate, NULL, m, y );

        if ( Накопительный )
            Name = String( "период с ", parm.BegDate:m, " по ", parm.EndDate:m );
        else
            if   ( ВидПериода == ВП_Год )
                Name = String( y, " г.");
            elif ( ВидПериода == ВП_Квартал )
                Name = String( (m-1)/3 + 1, " квартал ", y, " г.");
            elif ( ВидПериода == ВП_Месяц )
                Name = String( MonName( m), " ", y, " г.");
            elif ( ВидПериода == ВП_День )
                Name = String( ДатаОтчета:m );
            else
               Name = String( "период с ", ПредДатаОтчета:m, " по ", ДатаОтчета:m);
            end;
        end;
    end;

    return Name;
end;

macro RRG_PRL8_MakeString( text, align )
    var str : string;

    if   ( align == ALIGN_LEFT )
      ExecExp("str = String(text:" + REPORT_WIDTH + ":l)");
    elif ( align == ALIGN_CENTER )
      ExecExp("str = String(text:" + REPORT_WIDTH + ":c)");
    elif ( align == ALIGN_RIGHT )
      ExecExp("str = String(text:" + REPORT_WIDTH + ":r)");
    else
      ExecExp("str = String(text:" + REPORT_WIDTH + ")");
    end;

    return str;
end;

class RRG_PRL8_Report()

    private var m_tableReport = PRL8_TableReport();

    private const NONEXISTENT = -1;

    private var m_currentPartition = NONEXISTENT;
    private var m_currentLevel2Balance = NONEXISTENT;
    private var m_currentLevel2BalanceName = "";
    private var m_currentLevel1Balance = NONEXISTENT ;

     // KS 25.11.2011 Печать в Эксель
    //  m_formFormat = 0 - печать как обычно
    //  m_formFormat = 1 - печать как обычно + Excel
    var m_formFormat;
    var m_offsetR = 2;     // Смещение по строкам
    var m_offsetC = 1;     // Смещение по столбцам
    var m_DecimalSeparator;// Разделитель
    var obSheet;
    var m_Row;             // Текущая строка

    /**
     * Целочисленное деление
     */
    private macro div(a,b)
        return int(round(a/b,0));
    end;

    /**
     * Получить имя столбца
     */
    private macro getColumnName(i)
        var acode = codefor("A")+m_offsetC+i;
        if (acode > codefor("Z"))
          return       (
                        StrFor(div(acode-codefor("A"),codefor("Z")-codefor("A"))+codefor("A")-1)
                        +
                        StrFor(mod(acode-codefor("A"),codefor("Z")-codefor("A"))+codefor("A")-1)
                       );
        else
          return StrFor(acode);
        end;
    end;

    /**
     * Печать всякого прочего
     */
    private macro RRG_PRL8_MakeStringInExcel( text, align )

      if (ValType(m_offsetR) == 0)
        m_offsetR = 2;
      end;
      if (ValType(m_offsetC) == 0)
        m_offsetC = 1;
      end;

      if (m_formFormat == 1)
        obSheet.Range(getColumnName(m_offsetC  )+(m_Row + m_offsetR)+":"+
                      getColumnName(m_offsetC+9)+(m_Row + m_offsetR)).Merge;
        if   ( align == ALIGN_LEFT )
          obSheet.Range(getColumnName(m_offsetC)+(m_Row + m_offsetR)).HorizontalAlignment = -4131;
        elif ( align == ALIGN_CENTER )
          obSheet.Range(getColumnName(m_offsetC)+(m_Row + m_offsetR)).HorizontalAlignment = -4108;
        elif ( align == ALIGN_RIGHT )
          obSheet.Range(getColumnName(m_offsetC)+(m_Row + m_offsetR)).HorizontalAlignment = -4152;
        else
          obSheet.Range(getColumnName(m_offsetC)+(m_Row + m_offsetR)).HorizontalAlignment = -4131;
        end;
        obSheet.Range(getColumnName(m_offsetC)+(m_Row + m_offsetR)).Value = text;
        m_Row = m_Row + 1;
      end;

      return RRG_PRL8_MakeString( text, align );
    end;

    private macro PrintFreeStringInExcel (text)
        m_tableReport.PrintFreeString( text );
        if (m_formFormat == 1)
          obSheet.Range(getColumnName(m_offsetC  )+(m_Row + m_offsetR)+":"+
                        getColumnName(m_offsetC+9)+(m_Row + m_offsetR)).Merge;
          obSheet.Range(getColumnName(m_offsetC)+(m_Row + m_offsetR)).Value = text;
          m_Row = m_Row + 1;
        end;
    end;

    private macro PrintStringInExcel( p1, p2, p3, p4, p5, p6, p7, p8, p9, p10 )
        var p11, i, parm;

        if (GetParm(11, p11))
          m_tableReport.PrintStringTransferByWord
            ( p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11 );
        else
          m_tableReport.PrintStringTransferByWord
            ( p1, p2, p3, p4, p5, p6, p7, p8, p9, p10 );
        end;

        if (m_formFormat == 1)
          i = 2;
          while( GetParm(i, parm) )
//            if (i>3)
//              parm = strsubst(strsubst(parm,"'",""),".",m_DecimalSeparator);
//            end;
            obSheet.Range(getColumnName(i + m_offsetC - 2)+(m_Row + m_offsetR)).Value = parm;
            i = i + 1;
          end;
          obSheet.Range(getColumnName(m_offsetC)+(m_Row + m_offsetR) + ":" +
                        getColumnName(i + m_offsetC - 3)+(m_Row + m_offsetR)).VerticalAlignment = -4160;
          obSheet.Range(getColumnName(m_offsetC)+(m_Row + m_offsetR) + ":" +
                        getColumnName(i + m_offsetC - 3)+(m_Row + m_offsetR)).WrapText = True;
          m_Row = m_Row + 1;
        end;
    end;

macro ClearCurrentNames()
        m_currentPartition     = NONEXISTENT;
        m_currentLevel2Balance = NONEXISTENT;
        m_currentLevel1Balance = NONEXISTENT;
    end;

    macro Pr( Value, Parm : RRG_PRL8_Parm )
            // KS 08.11.2011 Апострофы. Через :a и с перехватом вывода не получилось
        var s = String(Money (value));
        var i = StrLen(s)-6;
        var PrintAp, err;

        GetRegistryValue ("PRBB\\REPTREG\\ПРИЛ 8\\АПОСТРОФЫ", V_Bool, PrintAp, err );
        if ( (PrintAp == true) and (err==0) )
          while (i>0)
             s=substr(s,1,i)+"'"+substr(s,i+1,StrLen(s)-i+1);
             i=i-3;
          end;
        end;

        return s;  
 //return Money (value);
    end;

    macro PrintSeparator()
        [#]( mkstr( "─", REPORT_WIDTH ) );
    end;

    macro PrintChapterName( Parm : RRG_PRL8_Parm )
        var dataSet = TRsbDataSet("SELECT t_Symbol, t_Name FROM dobchaptr_dbt WHERE t_Chapter = " + Parm.Chapter);

        if ( not dataSet.moveNext() )
            RRG_PRL8_XThrow( RRG_PRL8_XError, String("Не найдена глава с номером ",Parm.Chapter) );
        end;

        var ChapterStr = String(dataSet.value("t_Symbol"),".",dataSet.value("t_Name"));

        [#]( RRG_PRL8_MakeString( ChapterStr, ALIGN_CENTER ) );
    end;

    macro PrintHeadActive( Parm : RRG_PRL8_Parm )
        [#]( RRG_PRL8_MakeString( "Актив", ALIGN_CENTER ) );
    end;

    macro PrintItogActive( Parm : RRG_PRL8_Parm, Itog  )
        [#]( RRG_PRL8_MakeString( " ИТОГО по активу:" ) );
        m_tableReport.PrintStringTransferByWord
        ( "", "", "",
                             Pr( Itog.Sums()[RRG_IS], Parm ),
                             Pr( Itog.Sums()[RRG_DR], Parm ),
                             Pr( Itog.Sums()[RRG_DV], Parm ),
                             Pr( Itog.Sums()[RRG_DS], Parm ),
                             Pr( Itog.Sums()[RRG_CR], Parm ),
                             Pr( Itog.Sums()[RRG_CV], Parm ),
                             Pr( Itog.Sums()[RRG_CS], Parm ),
                             Pr( Itog.Sums()[RRG_OS], Parm )
        );
        PrintSeparator();
    end;

    macro PrintHeadPassive( Parm : RRG_PRL8_Parm )
        [#]( RRG_PRL8_MakeString( "Пассив", ALIGN_CENTER ) );
    end;

    macro PrintItogPassive( Parm : RRG_PRL8_Parm, Itog  )
        [#]( RRG_PRL8_MakeString( " ИТОГО по пассиву:" ) );
        m_tableReport.PrintStringTransferByWord
        ( "", "", "",
                             Pr( Itog.Sums()[RRG_IS], Parm ),
                             Pr( Itog.Sums()[RRG_DR], Parm ),
                             Pr( Itog.Sums()[RRG_DV], Parm ),
                             Pr( Itog.Sums()[RRG_DS], Parm ),
                             Pr( Itog.Sums()[RRG_CR], Parm ),
                             Pr( Itog.Sums()[RRG_CV], Parm ),
                             Pr( Itog.Sums()[RRG_CS], Parm ),
                             Pr( Itog.Sums()[RRG_OS], Parm )
        );
        PrintSeparator();
    end;


    macro PrintHeadPartition( Parm: RRG_PRL8_Parm, Balance )
        var partition = GetPartition( Balance.balance(), Parm.chapter, Parm.planNumber );
        [                 #]( RRG_PRL8_MakeString( string( "РАЗДЕЛ ", partition, ". ", GetPartitionName( Balance.balance(), Parm.chapter, Parm.planNumber, partition ) ) ) );

        // m_tableReport.PrintSeparator(); // !!!
        PrintSeparator();

    end;


    macro PrintLevel2BalanceItog( Parm : RRG_PRL8_Parm, Itog  )
        if ( ( m_currentLevel2Balance != NONEXISTENT ) and Parm.printLevel2Total )
            m_tableReport.PrintFreeString(" ИТОГО по счету 2-ого порядка:");
            // Morgo (2012.12.27) - ищем наименование счета из истории
            //m_tableReport.PrintStringTransferByWord( "", m_currentLevel2Balance, m_currentLevel2BalanceName,
            m_tableReport.PrintStringTransferByWord( "", m_currentLevel2Balance, GetBalanceName(m_currentLevel2Balance, Parm.chapter, Parm.planNumber),
                             Pr( Itog.Sums()[RRG_IS], Parm ),
                             Pr( Itog.Sums()[RRG_DR], Parm ),
                             Pr( Itog.Sums()[RRG_DV], Parm ),
                             Pr( Itog.Sums()[RRG_DS], Parm ),
                             Pr( Itog.Sums()[RRG_CR], Parm ),
                             Pr( Itog.Sums()[RRG_CV], Parm ),
                             Pr( Itog.Sums()[RRG_CS], Parm ),
                             Pr( Itog.Sums()[RRG_OS], Parm )
                                                   );
            PrintSeparator();
        end;
    end;

    macro PrintLevel1BalanceItog( Parm: RRG_PRL8_Parm, Itog  )
        if ((m_currentLevel1Balance != NONEXISTENT ) and (m_currentLevel1Balance != "999"))
        /* Изменено по SCR 121587 */
        //  m_tableReport.PrintStringTransferByWord(m_currentLevel1Balance, "", GetBalanceName(m_currentLevel1Balance, Parm.chapter, Parm.planNumber));
            m_tableReport.PrintFreeString(" ИТОГО по счету 1-ого порядка:");
            /* Изменено по SCR 121587 */
            m_tableReport.PrintStringTransferByWord( "", m_currentLevel1Balance, GetBalanceName(m_currentLevel1Balance, Parm.chapter, Parm.planNumber),
                             Pr( Itog.Sums()[RRG_IS], Parm ),
                             Pr( Itog.Sums()[RRG_DR], Parm ),
                             Pr( Itog.Sums()[RRG_DV], Parm ),
                             Pr( Itog.Sums()[RRG_DS], Parm ),
                             Pr( Itog.Sums()[RRG_CR], Parm ),
                             Pr( Itog.Sums()[RRG_CV], Parm ),
                             Pr( Itog.Sums()[RRG_CS], Parm ),
                             Pr( Itog.Sums()[RRG_OS], Parm )
           );
            PrintSeparator();
        end;
    end;

    macro PrintPartitionItog( Parm : RRG_PRL8_Parm, Itog  )
        if (m_currentPartition != NONEXISTENT )
            m_tableReport.PrintFreeString( string( " ИТОГО по разделу ", m_currentPartition ) );
            m_tableReport.PrintStringTransferByWord( "", "", "",
                             Pr( Itog.Sums()[RRG_IS], Parm ),
                             Pr( Itog.Sums()[RRG_DR], Parm ),
                             Pr( Itog.Sums()[RRG_DV], Parm ),
                             Pr( Itog.Sums()[RRG_DS], Parm ),
                             Pr( Itog.Sums()[RRG_CR], Parm ),
                             Pr( Itog.Sums()[RRG_CV], Parm ),
                             Pr( Itog.Sums()[RRG_CS], Parm ),
                             Pr( Itog.Sums()[RRG_OS], Parm )
                                                   );
            PrintSeparator();
        end;
    end;

    macro PrintAllTurnsItog( Parm : RRG_PRL8_Parm, Itog  )
        m_tableReport.PrintFreeString( " ВСЕГО ОБОРОТОВ " );
        m_tableReport.PrintStringTransferByWord( "", "", "", "",
                             Pr( Itog.Sums()[RRG_DR], Parm ),
                             Pr( Itog.Sums()[RRG_DV], Parm ),
                             Pr( Itog.Sums()[RRG_DS], Parm ),
                             Pr( Itog.Sums()[RRG_CR], Parm ),
                             Pr( Itog.Sums()[RRG_CV], Parm ),
                             Pr( Itog.Sums()[RRG_CS], Parm )
                                               );
        PrintSeparator();
    end;

    macro ProcessPartitionName( Balance, Parm: RRG_PRL8_Parm )
        var partition = GetPartition( Balance.balance(), Parm.chapter, Parm.planNumber );
        if ( partition != m_currentPartition )
            /* Печатаем имя раздела */
            PrintHeadPartition( Parm, Balance );
            m_currentPartition = partition;
        end;
    end;


    macro ProcessPartition( Balance, Parm : RRG_PRL8_Parm, Itog1 , ItogP  )
        ItogP.AddI( Itog1 );

        var partition = GetPartition( Balance.balance(), Parm.chapter, Parm.planNumber );
        if ( partition != m_currentPartition )
                /* Напечатать информацию по счету второго порядка */
                PrintPartitionItog( Parm, ItogP );
                ProcessPartitionName( Balance, Parm );
                /* Очистить итоги */
                ItogP.ClearSums();

        end;
        m_currentPartition = partition;
    end;



    macro ProcessLevel1Balance( Balance, Parm : RRG_PRL8_Parm, Itog2 , Itog1 , ItogP  )
        Itog1.AddI( Itog2 );


        var level1Balance;

        level1Balance = БалансовыйПредыдущегоПорядка( balance.Balance() );
        if ( level1Balance != m_currentLevel1Balance )
            /* Напечатать информацию по счету второго порядка */
            PrintLevel1BalanceItog( Parm, Itog1 );
            /* Очистить итоги */
            ProcessPartition( Balance, Parm , Itog1, ItogP );
            Itog1.ClearSums();
        end;
        m_currentLevel1Balance = level1Balance;

    end;



    macro ProcessLevel2Balance( Balance, Parm : RRG_PRL8_Parm, Itog2 , Itog1 , ItogP  )
        var level2Balance = Balance.balance();
        if ( ( level2Balance != m_currentLevel2Balance ) )
            /* Первый обрабатываемый счет - инициализируем вышестоящие уровни */
            if ( m_currentLevel2Balance == NONEXISTENT )
                /* Вывести название нового раздела */
                ProcessPartitionName( Balance, Parm );
                m_currentLevel1Balance = БалансовыйПредыдущегоПорядка( level2Balance );
                m_currentPartition = GetPartition( Balance.balance(), Parm.chapter, Parm.planNumber );
            else
                 /* Напечатать информацию по счету второго порядка */
                PrintLevel2BalanceItog( Parm, Itog2 );
                ProcessLevel1Balance( Balance, Parm, Itog2, Itog1, ItogP );

                /* Очистить итоги */
                Itog2.ClearSums();
            end;
        end;

        Itog2.AddB( Balance );
        m_currentLevel2Balance = level2Balance;
    end;


    macro ProcessBalance( Balance, Parm : RRG_PRL8_Parm, level2Itog , level1Itog , partitionItog  )
        ProcessLevel2Balance( Balance, Parm, level2Itog, level1Itog, partitionItog );
        m_currentLevel2BalanceName = balance.BalanceName();
    end;

    macro createBalance(dataSet)
 
       return RRG_PRL8_Balance(dataSet);
    end;

    macro createItog(parm)
        return RRG_PRL8_Itog(parm);
    end;
end;

class (RRG_PRL8_Report) RRG_PRL8_Report_Spod()

    /*вынесено вотдельную функцию, т.к. используется и в pr_prl85.mac*/
    private macro isPrindSpod(periodKind, shouldPrintZero, itog)
        return ((periodKind != RCB_PK_YEAR) and (shouldPrintZero or not itog.isZero()));
    end;

    private macro printSpod( Parm : RRG_PRL8_Parm, Itog, shouldPrintZero  )
        defaultParm(shouldPrintZero, true);

        if (isPrindSpod(Parm.periodKind, shouldPrintZero, itog))
            m_tableReport.PrintFreeString(" В том числе СПОД:");

            m_tableReport.PrintStringTransferByWord("", "","",
                                                    "",
                                                    Pr( itog.spodSums()[RRG_DR], Parm ),
                                                    Pr( itog.spodSums()[RRG_DV], Parm ),
                                                    Pr( itog.spodSums()[RRG_DS], Parm ),
                                                    Pr( itog.spodSums()[RRG_CR], Parm ),
                                                    Pr( itog.spodSums()[RRG_CV], Parm ),
                                                    Pr( itog.spodSums()[RRG_CS], Parm ),
                                                    "");
        end;
    end;

    macro PrintItogActive( Parm : RRG_PRL8_Parm, Itog  )
        [#]( RRG_PRL8_MakeString( " ИТОГО по активу:" ) );
        m_tableReport.PrintStringTransferByWord("", "", "",
                                                Pr( Itog.Sums()[RRG_IS], Parm ),
                                                Pr( Itog.Sums()[RRG_DR], Parm ),
                                                Pr( Itog.Sums()[RRG_DV], Parm ),
                                                Pr( Itog.Sums()[RRG_DS], Parm ),
                                                Pr( Itog.Sums()[RRG_CR], Parm ),
                                                Pr( Itog.Sums()[RRG_CV], Parm ),
                                                Pr( Itog.Sums()[RRG_CS], Parm ),
                                                Pr( Itog.Sums()[RRG_OS], Parm ));
        printSpod( RRG_PRL8_Parm, Itog );

        PrintSeparator();
    end;

    macro PrintItogPassive( Parm : RRG_PRL8_Parm, Itog  )
        [#]( RRG_PRL8_MakeString( " ИТОГО по пассиву:" ) );
        m_tableReport.PrintStringTransferByWord("", "", "",
                                                Pr( Itog.Sums()[RRG_IS], Parm ),
                                                Pr( Itog.Sums()[RRG_DR], Parm ),
                                                Pr( Itog.Sums()[RRG_DV], Parm ),
                                                Pr( Itog.Sums()[RRG_DS], Parm ),
                                                Pr( Itog.Sums()[RRG_CR], Parm ),
                                                Pr( Itog.Sums()[RRG_CV], Parm ),
                                                Pr( Itog.Sums()[RRG_CS], Parm ),
                                                Pr( Itog.Sums()[RRG_OS], Parm ));
        printSpod( RRG_PRL8_Parm, Itog );

        PrintSeparator();
    end;

    macro PrintLevel1BalanceItog( Parm: RRG_PRL8_Parm, Itog  )
        var Spod;
        if ((m_currentLevel1Balance != NONEXISTENT ) and (m_currentLevel1Balance != "999"))
            m_tableReport.PrintFreeString(" ИТОГО по счету 1-ого порядка:");
            /* Изменено по SCR 121587 */
            m_tableReport.PrintStringTransferByWord("", m_currentLevel1Balance, GetBalanceName(m_currentLevel1Balance, Parm.chapter, Parm.planNumber),
                                                    Pr( Itog.Sums()[RRG_IS], Parm ),
                                                    Pr( Itog.Sums()[RRG_DR], Parm ),
                                                    Pr( Itog.Sums()[RRG_DV], Parm ),
                                                    Pr( Itog.Sums()[RRG_DS], Parm ),
                                                    Pr( Itog.Sums()[RRG_CR], Parm ),
                                                    Pr( Itog.Sums()[RRG_CV], Parm ),
                                                    Pr( Itog.Sums()[RRG_CS], Parm ),
                                                    Pr( Itog.Sums()[RRG_OS], Parm ));
            printSpod( RRG_PRL8_Parm, Itog );

             PrintSeparator();
        end;
    end;

    macro PrintLevel2BalanceItog( Parm : RRG_PRL8_Parm, Itog  )
        if ( ( m_currentLevel2Balance != NONEXISTENT ) and Parm.printLevel2Total )
            m_tableReport.PrintFreeString(" ИТОГО по счету 2-ого порядка:");
            m_tableReport.PrintStringTransferByWord( "", m_currentLevel2Balance, m_currentLevel2BalanceName,
                             Pr( Itog.Sums()[RRG_IS], Parm ),
                             Pr( Itog.Sums()[RRG_DR], Parm ),
                             Pr( Itog.Sums()[RRG_DV], Parm ),
                             Pr( Itog.Sums()[RRG_DS], Parm ),
                             Pr( Itog.Sums()[RRG_CR], Parm ),
                             Pr( Itog.Sums()[RRG_CV], Parm ),
                             Pr( Itog.Sums()[RRG_CS], Parm ),
                             Pr( Itog.Sums()[RRG_OS], Parm )
                                                   );
            printSpod( RRG_PRL8_Parm, Itog, false);

            PrintSeparator();
        end;
    end;

    macro PrintPartitionItog( Parm : RRG_PRL8_Parm, Itog  )
        var Spod;
        if (m_currentPartition != NONEXISTENT )
            m_tableReport.PrintFreeString( string( " ИТОГО по разделу ", m_currentPartition ) );
            m_tableReport.PrintStringTransferByWord("", "", "",
                                                    Pr( Itog.Sums()[RRG_IS], Parm ),
                                                    Pr( Itog.Sums()[RRG_DR], Parm ),
                                                    Pr( Itog.Sums()[RRG_DV], Parm ),
                                                    Pr( Itog.Sums()[RRG_DS], Parm ),
                                                    Pr( Itog.Sums()[RRG_CR], Parm ),
                                                    Pr( Itog.Sums()[RRG_CV], Parm ),
                                                    Pr( Itog.Sums()[RRG_CS], Parm ),
                                                    Pr( Itog.Sums()[RRG_OS], Parm ));

            printSpod( RRG_PRL8_Parm, Itog );

            PrintSeparator();
        end;
    end;

    macro PrintAllTurnsItog( Parm : RRG_PRL8_Parm, Itog  )
        var Spod;
        m_tableReport.PrintFreeString( " ВСЕГО оборотов " );
        m_tableReport.PrintStringTransferByWord("", "", "",
                                                "",
                                                Pr( Itog.Sums()[RRG_DR], Parm ),
                                                Pr( Itog.Sums()[RRG_DV], Parm ),
                                                Pr( Itog.Sums()[RRG_DS], Parm ),
                                                Pr( Itog.Sums()[RRG_CR], Parm ),
                                                Pr( Itog.Sums()[RRG_CV], Parm ),
                                                Pr( Itog.Sums()[RRG_CS], Parm ),
                                                ""
                                               );
        printSpod( RRG_PRL8_Parm, Itog );

        PrintSeparator();
    end;

    macro createBalance(dataSet)
        return RRG_PRL8_BalanceSpod(dataSet);
    end;

    macro createItog(parm)
        return RRG_PRL8_ItogSpod(parm);
    end;

    initRRG_PRL8_Report();
end;

private macro GetQuery( Chapter, BKind, BegDate, EndDate )

    macro GetVarName( Suffix )
        return "'Бн' || TRANSLATE(bl.t_Balance,'.\\/','___') || " + GetSQLString(Suffix);
    end;

    macro SelectString( ps )
        return "       CASE"                                                                                            + "\n" +
               "           WHEN    NVL(vd"+ps+".t_bdInclude," + GetSQLDate(Date(0,0,0)) + ") <= " + GetSQLDate(EndDate) + "\n" +
               "               AND NVL(vd"+ps+".t_bdExclude," + GetSQLDate(Date(0,0,0)) + ") >= " + GetSQLDate(BegDate) + "\n" +
               "               THEN 1 "                                                                                 + "\n" +
               "           ELSE 0 "                                                                                     + "\n" +
               "       END "+ps+"w, "                                                                                   + "\n" +
               "       vd"+ps+".t_cFormat "+ps+"f,"                                                                     + "\n" +
               "       mr"+ps+".t_mean1   "+ps+"1,"                                                                     + "\n" +
               "       mr"+ps+".t_mean2   "+ps+"2 ";
    end;

    macro WhereString( ps, suff, begdate, enddate )
        return "       AND vd"+ps+".t_iFormId(+)               = " + 1                             + "\n" +
               "       AND vd"+ps+".t_szVarName(+)             = " + GetVarName(suff)              + "\n" +
               "       AND mr"+ps+".t_iNumDprt(+)              = " + НомерПодразделения            + "\n" +
               "       AND mr"+ps+".t_OrganizationStructure(+) = " + RcbOrganizationStructure      + "\n" +
               "       AND mr"+ps+".t_IssueMode(+)             = " + RcbIssueMode                  + "\n" +
               "       AND mr"+ps+".t_IsSummary(+)             = " + RcbSqlBool(RcbIsSummaryMode)  + "\n" +
               "       AND mr"+ps+".t_bdRepDate(+)             = " + GetSQLDate(enddate)           + "\n" +
               "       AND mr"+ps+".t_bdPrevDate(+)            = DECODE(vd"+ps+".t_cDoubleDates, CHR(0),"+GetSQLDate(Date(0,0,0))+","+GetSQLDate(begdate)+")" + "\n" +
               "       AND mr"+ps+".t_iFormId(+)               = " + 1                             + "\n" +
               "       AND mr"+ps+".t_iVarId(+)                = vd"+ps+".t_iVarId";
    end;

    macro GetIsAP()
        return "       DECODE(INSTR(bl.t_Kind_Account,"+GetSQLString(KA_AP)+"),0,0,1)";
    end;

    macro GetFilterBKind()
        return "       INSTR(DECODE(bl.t_Kind_Account, " + GetSQLString(KA_0) + ", " + GetSQLString(KA_A) + ", bl.t_Kind_Account), " + GetSQLChar(BKind) + ") > 0";
    end;

    return "SELECT bl.t_Balance      Balance,"                                       + "\n" +
           "       bl.t_Name_Part    BalanceName,"                                   + "\n" +
                   GetSQLChar(BKind)  + " BKind,"                                    + "\n" +
                   GetIsAP()          + " isAP,"                                     + "\n" +
                   SelectString("cs") + ","                                          + "\n" +
                   SelectString("cr") + ","                                          + "\n" +
                   SelectString("cp") + ","                                          + "\n" +
                   SelectString("ds") + ","                                          + "\n" +
                   SelectString("dr") + ","                                          + "\n" +
                   SelectString("dp") + ","                                          + "\n" +
                   SelectString("as") + ","                                          + "\n" +
                   SelectString("ar") + ","                                          + "\n" +
                   SelectString("ap") + ","                                          + "\n" +
                   SelectString("ps") + ","                                          + "\n" +
                   SelectString("pr") + ","                                          + "\n" +
                   SelectString("pp")                                                + "\n" +
           "FROM   dbalance_dbt  bl, "                                               + "\n" +
           "       dcy_varsd_dbt vdcs, dcy_varsd_dbt vdcr, dcy_varsd_dbt vdcp,"      + "\n" +
           "       dcy_varsd_dbt vdds, dcy_varsd_dbt vddr, dcy_varsd_dbt vddp,"      + "\n" +
           "       dcy_varsd_dbt vdas, dcy_varsd_dbt vdar, dcy_varsd_dbt vdap,"      + "\n" +
           "       dcy_varsd_dbt vdps, dcy_varsd_dbt vdpr, dcy_varsd_dbt vdpp,"      + "\n" +
           "       dcy_mreal_dbt mrcs, dcy_mreal_dbt mrcr, dcy_mreal_dbt mrcp,"      + "\n" +
           "       dcy_mreal_dbt mrds, dcy_mreal_dbt mrdr, dcy_mreal_dbt mrdp,"      + "\n" +
           "       dcy_mreal_dbt mras, dcy_mreal_dbt mrar, dcy_mreal_dbt mrap,"      + "\n" +
           "       dcy_mreal_dbt mrps, dcy_mreal_dbt mrpr, dcy_mreal_dbt mrpp "      + "\n" +
           "WHERE      bl.t_Chapter         = " + Chapter                            + "\n" +
           "       AND bl.t_iNumPlan        = " + ПолучитьРеальныйНомерПлана()       + "\n" +
           "       AND " + GetFilterBKind()                                          + "\n" +
           "       AND INSTR(bl.t_Type_Balance," + GetSQLChar("1")   + ") = 0"       + "\n" +
           "       AND INSTR(bl.t_Type_Balance," + GetSQLChar("T")   + ") = 0"       + "\n" +
           "       AND NOT EXISTS (SELECT 1"                                         + "\n" +
           "                         FROM dmctempl_dbt"                              + "\n" +
           "                        WHERE t_catId = " + RCB_CATEGORY_ID_OCP          + "\n" +
           "                          AND t_chapter = " + chapter                    + "\n" +
           "                          AND t_balance = '\"' || bl.t_balance || '\"')" + "\n" +
           "       AND (LENGTH(bl.t_Balance)<=5)"                                    + "\n" +
           "       AND bl.t_bdIncludeBwp <= " + getSqlDate(EndDate)                  + "\n" +
           "       AND (    bl.t_bdExcludeBwp >= " + getSqlDate(BegDate)             + "\n" +
           "             OR bl.t_bdExcludeBwp <  bl.t_bdIncludeBwp)"                 + "\n" +
                   WhereString("cs","__К",    BegDate,EndDate)                       + "\n" +
                   WhereString("cr","РуК",    BegDate,EndDate)                       + "\n" +
                   WhereString("cp","ПоК",    BegDate,EndDate)                       + "\n" +
                   WhereString("ds","__Д",    BegDate,EndDate)                       + "\n" +
                   WhereString("dr","РуД",    BegDate,EndDate)                       + "\n" +
                   WhereString("dp","ПоД",    BegDate,EndDate)                       + "\n" +
                   WhereString("as","__А",    BegDate,EndDate)                       + "\n" +
                   WhereString("ar","РуА",    BegDate,EndDate)                       + "\n" +
                   WhereString("ap","ПоА",    BegDate,EndDate)                       + "\n" +
                   WhereString("ps","__П",    BegDate,EndDate)                       + "\n" +
                   WhereString("pr","РуП",    BegDate,EndDate)                       + "\n" +
                   WhereString("pp","ПоП",    BegDate,EndDate)                       + "\n" +
           "ORDER BY bl.t_Balance";
end;

private class TPrinter()


    // KS 25.11.2011 Печать в Эксель
    //  m_formFormat = 0 - печать как обычно
    //  m_formFormat = 1 - печать как обычно + Excel
    var m_formFormat;
    var nmob, nmtlg, obbook, obsheet;
    var m_offsetR = 2;     // Смещение по строкам
    var m_offsetC = 1;     // Смещение по столбцам
    var m_offsetRbegin;    // Смещение по строкам
    var m_offsetRend;      // Смещение по столбцам
    var m_Row;             // Текущая строка

    /**
     * Целочисленное деление
     */
    private macro div(a,b)
        return int(round(a/b,0));
    end;

    /**
     * Получить имя столбца
     */
    private macro getColumnName(i)
        var acode = codefor("A")+m_offsetC+i;
        if (acode > codefor("Z"))
          return       (
                        StrFor(div(acode-codefor("A"),codefor("Z")-codefor("A"))+codefor("A")-1)
                        +
                        StrFor(mod(acode-codefor("A"),codefor("Z")-codefor("A"))+codefor("A")-1)
                       );
        else
          return StrFor(acode);
        end;
    end;

    /**
     * Печать всякого прочего
     */
    private macro MakeStringInExcel( text, align )

      if (ValType(m_offsetR) == 0)
        m_offsetR = 2;
      end;
      if (ValType(m_offsetC) == 0)
        m_offsetC = 1;
      end;

      if (m_formFormat == 1)
        obSheet.Range(getColumnName(m_offsetC  )+(m_Row + m_offsetR)+":"+
                      getColumnName(m_offsetC+9)+(m_Row + m_offsetR)).Merge;
        if   ( align == ALIGN_LEFT )
          obSheet.Range(getColumnName(m_offsetC)+(m_Row + m_offsetR)).HorizontalAlignment = -4131;
        elif ( align == ALIGN_CENTER )
          obSheet.Range(getColumnName(m_offsetC)+(m_Row + m_offsetR)).HorizontalAlignment = -4108;
        elif ( align == ALIGN_RIGHT )
          obSheet.Range(getColumnName(m_offsetC)+(m_Row + m_offsetR)).HorizontalAlignment = -4152;
        else
          obSheet.Range(getColumnName(m_offsetC)+(m_Row + m_offsetR)).HorizontalAlignment = -4131;
        end;
        obSheet.Range(getColumnName(m_offsetC)+(m_Row + m_offsetR)).Value = text;
        m_Row = m_Row + 1;
      end;

    end;

    /**
     * Печать всякого прочего
     */
    private macro RRG_PRL8_MakeStringInExcel( text, align )

      MakeStringInExcel( text, align );

      return RRG_PRL8_MakeString( text, align );
    end;

    macro CheckForm()
        if ( {Название отчета} != FORM_NAME )
            RRG_PRL8_XThrow( RRG_PRL8_XError, String("Макрос реализован только для приложения \"",FORM_NAME,"\"") );
        end;
    end;

    private macro ProcessBalances( parm : RRG_PRL8_Parm, BKind : String, Itog , Report : RRG_PRL8_Report )

        macro isPrint( Balance )

            var stat : Bool = true;

            if ( stat )
                stat =    (parm.PrintKind == PRK_ALL)
                       or (parm.PrintKind == PRK_BWP) and     Balance.isWork()
                       or (parm.PrintKind == PRK_NOZ) and not Balance.isZero();
            end;

            if ( stat )
                stat =    (not Balance.isAP())
                       or ((Balance.Sums()[RRG_OS] >= 0) and (BKind == KA_A))
                       or ((Balance.Sums()[RRG_OS] >  0) and (BKind == KA_P));
            end;

                   return stat;

        end;

        var planArray = TArray(30);
        var i = 0;

        var q;
        var dataSet;

        var Balance : RRG_PRL8_Balance;
        var level2Itog ;
        var level1Itog ;
        var partitionItog ;

        while (i < planArray.size)
            planArray[i] = 0;
            i = i + 1;
        end;

        q = GetQuery(parm.Chapter,BKind,parm.BegDate,parm.EndDate);

        dataSet = TRsbDataSet(q);


        level2Itog = report.createItog( parm );
        level1Itog = report.createItog( parm );
        partitionItog = report.createItog( parm );

        while( dataSet.moveNext() )

            Balance = report.createBalance(dataSet);

            Message("Обрабатывается балансовый счет: ", Balance.Balance(), " (" + BKind + ")");

            if ( isPrint(Balance) )
                Report.ProcessBalance( Balance, parm, level2Itog, level1Itog, partitionItog );
                Itog.AddB(Balance);
            end;
        end;

        level1Itog.AddI( level2Itog );
        partitionItog.AddI( level1Itog );

        Report.PrintLevel2BalanceItog( Parm, level2Itog    );
        Report.PrintLevel1BalanceItog( Parm, level1Itog    );
        Report.PrintPartitionItog(     Parm, partitionItog );
        Report.ClearCurrentNames( Parm );


    end;

    private macro PrintFormBody( parm : RRG_PRL8_Parm, Report : RRG_PRL8_Report )

        Report.PrintChapterName( parm );
        /*10 Aug 07 Fri 10:32:54 Malakhova Irina 111186*/
        /*Поправила шапку в соответствии с ТЗ*/
        [┌───────────────┬───────────────────────────┬────────────────────┬─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┬────────────────────┐];
        [│  Номер счета  │       Наименование        │  Входящие остатки  │                                                 Обороты за отчетный период                                                  │ Исходящие остатки  │];
        [│ 1 (2) порядка │    разделов и счетов      │  на отчетную дату  ├──────────────────────────────────────────────────────────────┬──────────────────────────────────────────────────────────────┤  на отчетную дату  │];
        [│               │         баланса           │   (в рублях,       │                          по дебету                           │                           по кредиту                         │  (в рублях,        │];
        [├───────┬───────┤                           │    ин.валюта и     ├────────────────────┬────────────────────┬────────────────────┼────────────────────┬────────────────────┬────────────────────┤   ин.валюта и      │];
        [│первого│второго│                           │    драг.металлы    │      в рублях      │    ин.валюта и     │        итого       │      в рублях      │    ин.валюта и     │        итого       │   драг.металлы     │];
        [│порядка│порядка│                           │    в рублевом      │                    │   драг.металлы в   │                    │                    │   драг.металлы в   │                    │   в рублевом       │];
        [│       │       │                           │    эквиваленте)    │                    │рублевом эквиваленте│                    │                    │рублевом эквиваленте│                    │   эквиваленте)     │];
        [├───────┼───────┼───────────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┤];
        [│   1   │   2   │            3              │          4         │          5         │          6         │          7         │          8         │          9         │         10         │         11         │];
        [├───────┴───────┴───────────────────────────┴────────────────────┴────────────────────┴────────────────────┴────────────────────┴────────────────────┴────────────────────┴────────────────────┴────────────────────┤];

        var Itog ;
        var AllTurnsItog;

       if (m_formFormat == 1)

          Report.m_Row = Report.m_Row + 3;

          m_offsetRbegin = Report.m_Row + 2;

          obSheet.Range(getColumnName(m_offsetC-1)+(Report.m_Row + m_offsetR)+":"+
                        getColumnName(m_offsetC+0)+(Report.m_Row + m_offsetR+1)).Merge;
          obSheet.Range(getColumnName(m_offsetC-1)+(Report.m_Row + m_offsetR)).Value = "Номер счета\n1 (2) порядка";

          obSheet.Range(getColumnName(m_offsetC+1)+(Report.m_Row + m_offsetR)+":"+
                        getColumnName(m_offsetC+1)+(Report.m_Row + m_offsetR+2)).Merge;
          obSheet.Range(getColumnName(m_offsetC+1)+(Report.m_Row + m_offsetR)).Value = "Наименование\nразделов и счетов\nбаланса";

          obSheet.Range(getColumnName(m_offsetC+2)+(Report.m_Row + m_offsetR)+":"+
                        getColumnName(m_offsetC+2)+(Report.m_Row + m_offsetR+2)).Merge;
          obSheet.Range(getColumnName(m_offsetC+2)+(Report.m_Row + m_offsetR)).Value = "Входящие остатки\nна отчетную дату\n(в рублях,\nин.валюта и\nдраг.металлы\nв рублевом\nэквиваленте)";

          obSheet.Range(getColumnName(m_offsetC+3)+(Report.m_Row + m_offsetR)+":"+
                        getColumnName(m_offsetC+8)+(Report.m_Row + m_offsetR)).Merge;
          obSheet.Range(getColumnName(m_offsetC+3)+(Report.m_Row + m_offsetR)).Value = "Обороты за отчетный период";

          obSheet.Range(getColumnName(m_offsetC+3)+(Report.m_Row + m_offsetR+1)+":"+
                        getColumnName(m_offsetC+5)+(Report.m_Row + m_offsetR+1)).Merge;
          obSheet.Range(getColumnName(m_offsetC+3)+(Report.m_Row + m_offsetR+1)).Value = "по дебету";

          obSheet.Range(getColumnName(m_offsetC+6)+(Report.m_Row + m_offsetR+1)+":"+
                        getColumnName(m_offsetC+8)+(Report.m_Row + m_offsetR+1)).Merge;
          obSheet.Range(getColumnName(m_offsetC+6)+(Report.m_Row + m_offsetR+1)).Value = "по кредиту";

          obSheet.Range(getColumnName(m_offsetC+9)+(Report.m_Row + m_offsetR)+":"+
                        getColumnName(m_offsetC+9)+(Report.m_Row + m_offsetR+2)).Merge;
          obSheet.Range(getColumnName(m_offsetC+9)+(Report.m_Row + m_offsetR)).Value = "Исходящие остатки\nна отчетную дату\n(в рублях,\nин.валюта и\nдраг.металлы\nв рублевом\nэквиваленте)";

          obSheet.Range(getColumnName(m_offsetC-1)+(Report.m_Row + m_offsetR+2)).Value = "первого\nпорядка";
          obSheet.Range(getColumnName(m_offsetC-0)+(Report.m_Row + m_offsetR+2)).Value = "второго\nпорядка";
          obSheet.Range(getColumnName(m_offsetC+3)+(Report.m_Row + m_offsetR+2)).Value = "в рублях";
          obSheet.Range(getColumnName(m_offsetC+4)+(Report.m_Row + m_offsetR+2)).Value = "ин.валюта и\nдраг.металлы в\nрублевом эквиваленте";
          obSheet.Range(getColumnName(m_offsetC+5)+(Report.m_Row + m_offsetR+2)).Value = "итого";
          obSheet.Range(getColumnName(m_offsetC+6)+(Report.m_Row + m_offsetR+2)).Value = "в рублях";
          obSheet.Range(getColumnName(m_offsetC+7)+(Report.m_Row + m_offsetR+2)).Value = "ин.валюта и\nдраг.металлы в\nрублевом эквиваленте";
          obSheet.Range(getColumnName(m_offsetC+8)+(Report.m_Row + m_offsetR+2)).Value = "итого";

          obSheet.Range(getColumnName(m_offsetC-1)+(Report.m_Row + m_offsetR+3)).Value = "1";
          obSheet.Range(getColumnName(m_offsetC-0)+(Report.m_Row + m_offsetR+3)).Value = "2";
          obSheet.Range(getColumnName(m_offsetC+1)+(Report.m_Row + m_offsetR+3)).Value = "3";
          obSheet.Range(getColumnName(m_offsetC+2)+(Report.m_Row + m_offsetR+3)).Value = "4";
          obSheet.Range(getColumnName(m_offsetC+3)+(Report.m_Row + m_offsetR+3)).Value = "5";
          obSheet.Range(getColumnName(m_offsetC+4)+(Report.m_Row + m_offsetR+3)).Value = "6";
          obSheet.Range(getColumnName(m_offsetC+5)+(Report.m_Row + m_offsetR+3)).Value = "7";
          obSheet.Range(getColumnName(m_offsetC+6)+(Report.m_Row + m_offsetR+3)).Value = "8";
          obSheet.Range(getColumnName(m_offsetC+7)+(Report.m_Row + m_offsetR+3)).Value = "9";
          obSheet.Range(getColumnName(m_offsetC+8)+(Report.m_Row + m_offsetR+3)).Value = "10";
          obSheet.Range(getColumnName(m_offsetC+9)+(Report.m_Row + m_offsetR+3)).Value = "11";

          obSheet.Range(getColumnName(m_offsetC-1)+(Report.m_Row + m_offsetR)+":"+
                        getColumnName(m_offsetC+9)+(Report.m_Row + m_offsetR+3)).HorizontalAlignment = -4108;


          obSheet.Range(getColumnName(m_offsetC-1)+(Report.m_Row + m_offsetR)+":"+
                        getColumnName(m_offsetC+9)+(Report.m_Row + m_offsetR+3)).Font.Bold = True;

          Report.m_Row = Report.m_Row + 4;
        end;

        AllTurnsItog = report.createItog(parm);

        Itog = report.createItog(parm);
        Report.PrintHeadActive( parm );
        ProcessBalances( parm, "А", Itog, Report );
        Report.PrintItogActive( parm, Itog );

        AllTurnsItog.AddI( Itog );


        Itog = report.createItog(parm);
        Report.PrintHeadPassive( parm );
        ProcessBalances( parm, "П", Itog, Report );
        Report.PrintItogPassive( parm, Itog );

        AllTurnsItog.AddI( Itog );

        Report.PrintAllTurnsItog( Parm, AllTurnsItog );

        if (m_formFormat == 1)

                 // Решётка
                 obSheet.Range(getColumnName(0)+(m_offsetRbegin)+":"+
                               getColumnName(10)+(Report.m_Row+1)
                             ).Borders(7).LineStyle = 1;
                 // Решётка
                 obSheet.Range(getColumnName(0)+(m_offsetRbegin)+":"+
                               getColumnName(10)+(Report.m_Row+1)
                             ).Borders(8).LineStyle = 1;
                 // Решётка
                 obSheet.Range(getColumnName(0)+(m_offsetRbegin)+":"+
                               getColumnName(10)+(Report.m_Row+1)
                             ).Borders(9).LineStyle = 1;
                 // Решётка
                 obSheet.Range(getColumnName(0)+(m_offsetRbegin)+":"+
                               getColumnName(10)+(Report.m_Row+1)
                             ).Borders(10).LineStyle = 1;
                 // Решётка
                 obSheet.Range(getColumnName(0)+(m_offsetRbegin)+":"+
                               getColumnName(10)+(Report.m_Row+1)
                             ).Borders(11).LineStyle = 1;
                 // Решётка
                 obSheet.Range(getColumnName(0)+(m_offsetRbegin)+":"+
                               getColumnName(10)+(Report.m_Row+1)
                             ).Borders(12).LineStyle = 1;

    end;
    end;

    macro PrintHead( Parm : RRG_PRL8_Parm )

        /*_____________________________________________________________________________________*/
        var bankName = TArray();
        var i;
        /*_____________________________________________________________________________________*/


        [#]( RRG_PRL8_MakeString( "                              Приложение 8 ", ALIGN_RIGHT ) );
        [#]( RRG_PRL8_MakeString( "   к Правилам ведения бухгалтерского учета ", ALIGN_RIGHT ) );
        [#]( RRG_PRL8_MakeString( "   в кредитных организациях, расположенных ", ALIGN_RIGHT ) );
        [#]( RRG_PRL8_MakeString( "        на территории Российской Федерации ", ALIGN_RIGHT ) );
        [ ];
        [#]( RRG_PRL8_MakeString( "      (Приложение к Положению Банка России ", ALIGN_RIGHT ) );
        [#]( RRG_PRL8_MakeString( " \"О правилах ведения бухгалтерского учета ", ALIGN_RIGHT ) );
        [#]( RRG_PRL8_MakeString( "   в кредитных организациях, расположенных ", ALIGN_RIGHT ) );
        [#]( RRG_PRL8_MakeString( "      на территории Российской Федерации\" ", ALIGN_RIGHT ) );
        [#]( RRG_PRL8_MakeString( "              от 5 декабря 2002г. № 205-П) ", ALIGN_RIGHT ) );
        [ ];

        /*________________________________________________________________________________________*/
        PrintBankHeaderBuf(НомерПодразделения,
                     RcbOrganizationStructure,
                                 REPORT_WIDTH,
                                     bankName,
                                            0);  /*Shift*/

        i = 0;
        while(i < bankName.Size())
          [#]( RRG_PRL8_MakeString(bankName[i], ALIGN_CENTER) );
          i = i+1;
        end;

        [ ];
        /*________________________________________________________________________________________*/

        [#]( RRG_PRL8_MakeString(        "ОБОРОТНАЯ ВЕДОМОСТЬ", ALIGN_CENTER ) );
        [#]( RRG_PRL8_MakeString( "ПО СЧЕТАМ КРЕДИТНОЙ ОРГАНИЗАЦИИ", ALIGN_CENTER ) );
        [#]( RRG_PRL8_MakeString( string( "за ", NamePeriod(parm) ), ALIGN_CENTER ) );
    end;

    macro PrintFoot( Parm : RRG_PRL8_Parm )

        [   #                       _____________________  #  ]( {Name_Boss}:l, {FIO_Boss} );
        [                                                     ];
        [                                                     ];
        [   #                       _____________________  #  ]( {Name_Book}:l, {FIO_Book} );
        [                                                     ];
        [   #                                                 ]( trim( string( {curdate}:m ) ) );
        [                                                     ];
        [   Примечание: по балансовым счетам, не имеющим признака ( А или П ), сальдо   ];
        [               по которым на конец рабочего дня должно быть равно нулю,        ];
        [               обороты в ежедневной оборотной ведомости показываются в разделе ];
        [               "Актив" по дебету и кредиту в равных суммах.                    ];
        if (m_formFormat == 1)
           m_Row = m_Row + 2;
           MakeStringInExcel( "   " + {Name_Boss} + "  " + {FIO_Boss} + "           " +
                                      {Name_Book} + "  " + {FIO_Book}, ALIGN_LEFT );
           MakeStringInExcel( trim( string( {curdate}:m ) ), ALIGN_LEFT );
           m_Row = m_Row + 2;
           MakeStringInExcel( "   Примечание: по балансовым счетам, не имеющим признака ( А или П ), сальдо   ", ALIGN_LEFT );
           MakeStringInExcel( "               по которым на конец рабочего дня должно быть равно нулю,        ", ALIGN_LEFT );
           MakeStringInExcel( "               обороты в ежедневной оборотной ведомости показываются в разделе ", ALIGN_LEFT );
           MakeStringInExcel( "               'Актив' по дебету и кредиту в равных суммах.                    ", ALIGN_LEFT );
        end;
    end;

    private macro PrintFormPeriod( parm : RRG_PRL8_Parm, Reports)

        var Chapter : Integer;

        // KS 25.11.2011 Печать в Эксель
        var PrintExcel, stat;
        m_Row = 1;
        GetRegistryValue("PRBB\\REPTREG\\ПРИЛ 8\\ПЕЧАТЬ В EXCEL", V_BOOL, PrintExcel, stat );
        if( ( stat == 0 ) and ( PrintExcel ) )
          if (GetTrue(TRUE,"Вывести форму в Эксель?"))
             m_formFormat  = 1;
             nmob = CreateObject ("rsax","TRsAxServer",string("RsAxServer", UserNumber()),IsStandAlone());
             nmtlg = nmob.CreateComObject ("Excel.Application");
             obBook = nmtlg.Workbooks.add;
             obSheet = obBook.ActiveSheet(); 
         end;
        end;

        PrintHead( parm );

        if ( parm.Chapter == 0 )
            Chapter = 1;
            while( Chapter <= 5 )
                parm.Chapter = Chapter;
                if (m_formFormat == 1)
                  Reports[parm.chapter].m_formFormat = m_formFormat;
                  Reports[parm.chapter].obsheet = obsheet;
                  Reports[parm.chapter].m_DecimalSeparator = nmtlg.DecimalSeparator;
                  if (parm.Chapter == 1)
                     Reports[parm.chapter].m_Row = m_Row+2;
                  else
                     Reports[parm.chapter].m_Row = Reports[parm.chapter-1].m_Row+2;
                  end;
                end;
                PrintFormBody( parm, Reports[parm.chapter] );
                m_Row = Reports[parm.chapter].m_Row;
                Chapter = Chapter + 1;
            end;
            parm.Chapter = 0;
        else
            if (m_formFormat == 1)
              Reports[parm.chapter].m_formFormat = m_formFormat;
              Reports[parm.chapter].obsheet = obsheet;
              Reports[parm.chapter].m_Row = m_Row+2;
            end;
            PrintFormBody( parm, Reports[parm.chapter] );
            m_Row = Reports[parm.chapter].m_Row;
        end;

        PrintFoot( parm );

        // Показать
        if (m_formFormat == 1)

          obSheet.Range(getColumnName(-0)+":"+getColumnName(-0)).ColumnWidth = 8;
          obSheet.Range(getColumnName(+2)+":"+getColumnName(+2)).ColumnWidth = 35;
          obSheet.Range(getColumnName(+2)+":"+getColumnName(+3)).ColumnWidth = 20;
          obSheet.Range(getColumnName(+4)+":"+getColumnName(+9)).ColumnWidth = 25;
          obSheet.Range(getColumnName(10)+":"+getColumnName(10)).ColumnWidth = 20;

          obSheet.Rows((1)+":"+(m_Row)).EntireRow.AutoFit;

          nmtlg.visible = true;// KS 25.11.2011 Печать в Эксель
        end;

    end;

    macro PrintForm( Parm : RRG_PRL8_Parm, Reports)

        var CurDate = Parm.BegDate;
        var BegDate = Parm.BegDate;
        var EndDate = Parm.EndDate;

        if ( Parm.EveryDay )

            while( CurDate <= EndDate )
                parm.BegDate = CurDate;
                parm.EndDate = CurDate;

                PrintFormPeriod(parm,Reports);

                CurDate = DateAfterWorkDays(CurDate,1);
            end;

        else
            PrintFormPeriod(Parm,Reports);
        end;

        Parm.BegDate = BegDate;
        Parm.EndDate = EndDate;

    end;

    macro ViewProtocol( Parm : RRG_PRL8_Parm )

        file f() txt;

        Parm.Protocol.PrintLine("Печать завершена успешно.");
        Parm.Protocol.PrintLine("Нажмите ESC для просмотра отчета.");

        Parm.Protocol.View();

    end;
end;

private class (TPrinter) TPrinter_302()
    macro PrintHead( Parm : RRG_PRL8_Parm )

        /*_____________________________________________________________________________________*/
        var bankName = TArray();
        var i;
        /*_____________________________________________________________________________________*/


        [#]( RRG_PRL8_MakeString( "                              Приложение 8 ", ALIGN_RIGHT ) );
        [#]( RRG_PRL8_MakeString( "   к Правилам ведения бухгалтерского учета ", ALIGN_RIGHT ) );
        [#]( RRG_PRL8_MakeString( "   в кредитных организациях, расположенных ", ALIGN_RIGHT ) );
        [#]( RRG_PRL8_MakeString( "        на территории Российской Федерации ", ALIGN_RIGHT ) );
        [ ];
        [#]( RRG_PRL8_MakeString( "                               (Приложение ", ALIGN_RIGHT ) );
        [#]( RRG_PRL8_MakeString( "                           к Положению ЦБР ", ALIGN_RIGHT ) );
        [#]( RRG_PRL8_MakeString( "                от 26 марта 2007г. № 302-П ", ALIGN_RIGHT ) );
        [#]( RRG_PRL8_MakeString( "       \"О правилах ведения бухгалтерского ", ALIGN_RIGHT ) );
        [#]( RRG_PRL8_MakeString( "           учета в кредитных организациях, ", ALIGN_RIGHT ) );
        [#]( RRG_PRL8_MakeString( "               расположенных на территории ", ALIGN_RIGHT ) );
        [#]( RRG_PRL8_MakeString( "                   Российской Федерации\") ", ALIGN_RIGHT ) );
        [ ];

        /*________________________________________________________________________________________*/
        PrintBankHeaderBuf(НомерПодразделения,
                     RcbOrganizationStructure,
                                 REPORT_WIDTH,
                                     bankName,
                                            0);  /*Shift*/

        i = 0;
        while(i < bankName.Size())
          [#]( RRG_PRL8_MakeString(bankName[i], ALIGN_CENTER) );
          i = i+1;
        end;

        [ ];
        /*________________________________________________________________________________________*/

        [#]( RRG_PRL8_MakeString(        "ОБОРОТНАЯ ВЕДОМОСТЬ", ALIGN_CENTER ) );
        [#]( RRG_PRL8_MakeString( "ПО СЧЕТАМ КРЕДИТНОЙ ОРГАНИЗАЦИИ", ALIGN_CENTER ) );
        [#]( RRG_PRL8_MakeString( string( "за ", NamePeriod(parm) ), ALIGN_CENTER ) );
    end;

end;

private class (TPrinter_302) TPrinter_385()
    macro PrintHead( Parm : RRG_PRL8_Parm )

        /*_____________________________________________________________________________________*/
        var bankName = TArray();
        var i;
        /*_____________________________________________________________________________________*/


        [#]( RRG_PRL8_MakeString( "                              Приложение 7 ", ALIGN_RIGHT ) );
        [#]( RRG_PRL8_MakeString( " к Правилам ведения бухгалтерского учета   ", ALIGN_RIGHT ) );
        [#]( RRG_PRL8_MakeString( " в кредитных организациях, расположенных   ", ALIGN_RIGHT ) );
        [#]( RRG_PRL8_MakeString( " на территории Российской Федерации        ", ALIGN_RIGHT ) );
        [ ];
        [#]( RRG_PRL8_MakeString( " (Приложение к Положению Банка России      ", ALIGN_RIGHT ) );
        [#]( RRG_PRL8_MakeString( " от 16 июля 2012 года N 385-П              ", ALIGN_RIGHT ) );
        [#]( RRG_PRL8_MakeString( " \"О правилах ведения бухгалтерского учета ", ALIGN_RIGHT ) );
        [#]( RRG_PRL8_MakeString( " в кредитных организациях, расположенных   ", ALIGN_RIGHT ) );
        [#]( RRG_PRL8_MakeString( " на территории Российской Федерации\")     ", ALIGN_RIGHT ) );
        [ ];

        /*________________________________________________________________________________________*/
        PrintBankHeaderBuf(НомерПодразделения,
                     RcbOrganizationStructure,
                                 REPORT_WIDTH,
                                     bankName,
                                            0);  /*Shift*/

        i = 0;
        while(i < bankName.Size())
          [#]( RRG_PRL8_MakeString(bankName[i], ALIGN_CENTER) );
          i = i+1;
        end;

        [ ];
        /*________________________________________________________________________________________*/

        [#]( RRG_PRL8_MakeString(        "Оборотная ведомость", ALIGN_CENTER ) );
        [#]( RRG_PRL8_MakeString( "по счетам кредитной организации", ALIGN_CENTER ) );
        [#]( RRG_PRL8_MakeString( string( "за ", NamePeriod(parm) ), ALIGN_CENTER ) );
    end;

    private macro PrintFormBody( parm : RRG_PRL8_Parm, Report : RRG_PRL8_Report )

        Report.PrintChapterName( parm );
        /*10 Aug 07 Fri 10:32:54 Malakhova Irina 111186*/
        /*Поправила шапку в соответствии с ТЗ*/
        [┌─────────────────┬───────────────────────────┬────────────────────┬─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┬────────────────────┐];
        [│   Номер счета   │       Наименование        │  Входящие остатки  │                                                 Обороты за отчетный период                                                  │ Исходящие остатки  │];
        [│ первого(второго)│    разделов и счетов      │  на отчетную дату  ├──────────────────────────────────────────────────────────────┬──────────────────────────────────────────────────────────────┤  на отчетную дату  │];
        [│     порядка     │         баланса           │    (в рублях,      │                          по дебету                           │                           по кредиту                         │    (в рублях,      │];
        [├────────┬────────┤                           │иностранной валюте  ├────────────────────┬────────────────────┬────────────────────┼────────────────────┬────────────────────┬────────────────────┤иностранной валюте  │];
        [│первого │второго │                           │   и драгоценных    │      в рублях      │ иностранная валюта │        итого       │      в рублях      │ иностранная валюта │        итого       │   и драгоценных    │];
        [│порядка │порядка │                           │     металлах       │                    │   и драгоценные    │                    │                    │   и драгоценные    │                    │     металлах       │];
        [│        │        │                           │    в рублевом      │                    │      металлы в     │                    │                    │      металлы в     │                    │    в рублевом      │];
        [│        │        │                           │    эквиваленте)    │                    │рублевом эквиваленте│                    │                    │рублевом эквиваленте│                    │    эквиваленте)    │];
        [├────────┼────────┼───────────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┤];
        [│    1   │   2    │            3              │          4         │          5         │          6         │          7         │          8         │          9         │         10         │         11         │];
        [├────────┴────────┴───────────────────────────┴────────────────────┴────────────────────┴────────────────────┴────────────────────┴────────────────────┴────────────────────┴────────────────────┴────────────────────┤];

        var Itog ;
        var AllTurnsItog;

        AllTurnsItog = report.createItog(parm);

        Itog = report.createItog(parm);
        Report.PrintHeadActive( parm );
        ProcessBalances( parm, "А", Itog, Report );
        Report.PrintItogActive( parm, Itog );

        AllTurnsItog.AddI( Itog );


        Itog = report.createItog(parm);
        Report.PrintHeadPassive( parm );
        ProcessBalances( parm, "П", Itog, Report );
        Report.PrintItogPassive( parm, Itog );

        AllTurnsItog.AddI( Itog );

        Report.PrintAllTurnsItog( Parm, AllTurnsItog );

    end;

    macro PrintFoot( Parm : RRG_PRL8_Parm )

        [   #                       _____________________  #                                                 #                       _____________________  #  ]( {Name_Boss}:l, {FIO_Boss}, {Name_Book}:l, {FIO_Book} );
        [                                                     ];
        [   #                                                 ]( trim( string( {curdate}:m ) ) );
        [─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────];
        [   Примечание: по балансовым счетам, не имеющим признака ( А или П ), сальдо   ];
        [               по которым на конец рабочего дня должно быть равно нулю,        ];
        [               обороты в ежедневной оборотной ведомости показываются в разделе ];
        [               "Актив" по дебету и кредиту в равных суммах.                    ];
    end;

end;

macro RRG_PRL8_Main( Chapter, Reports)

    var Parm : RRG_PRL8_Parm;
    var printer;

    if (ДатаОтчета < RCB_I302_DATE1)
        printer = TPrinter();
    elif (ДатаОтчета < RCB_I385_DATE)
        printer = TPrinter_302();
    else
        printer = TPrinter_385();
    end;

    printer.CheckForm();

    Parm = RRG_PRL8_Parm(Chapter);

    printer.PrintForm(Parm,Reports);

    printer.ViewProtocol(Parm);

    return 0;

    OnError(err);
    RRG_PRL8_XCatch(err);
    return 1;

end;
