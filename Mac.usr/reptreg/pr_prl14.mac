import BankInter, Календарь, ReptCBInter, ReptCBCommon, rsexts, param, cb_sql, cy_find, chk_regd, exp_exl, lib_path, rcb_lib;
import RsbDataSet;
import rcbZone;
import rcbSignatureZone;


import DepartmentFilter;  /*27 Apr 07 Malakhova Irina 104847*/
import FIInter;

import RcbClassLibInter;

import acv; /*16 Jan 07 Malakhova Irina - Для вызова функции печати шапки*/

import RcbCoreInter;

import rcbconst;

const RRG_IS =  0; /* Входящие остатки - итого */
const RRG_DR =  1;
const RRG_DV =  2;
const RRG_DS =  3;
const RRG_CR =  4;
const RRG_CV =  5;
const RRG_CS =  6;
const RRG_OS =  7; /* Исходящие остатки - итого */
const RRG_OR =  8;
const RRG_OV =  9;
const RRG_IR = 10;
const RRG_IV = 11;

const RRG_PRL14_XOK      = 0;
const RRG_PRL14_XWarning = 1;
const RRG_PRL14_XError   = 2;

private const KA_A  = "А";
private const KA_P  = "П";
private const KA_AP = "АП";
private const KA_0  = "0";

private const FORM_NAME = "Балансовые счета";
private const FORM_ID   = НайтиИдентификаторОтчетаПоНазванию( FORM_NAME );

private const PRK_ALL = 0;
private const PRK_BWP = 1;
private const PRK_NOZ = 2;
private const PRK_BEG = PRK_ALL;
private const PRK_END = PRK_NOZ;

private const PRINT_KIND_REGPATH          = "REPTREG/REP_GROUPS/BALANCE_ACCOUNTS/ПЕЧАТЬ ФОРМЫ БАЛАНСОВЫЕ СЧЕТА";
private const PRINT_COPECKS_REGPATH       = "REPTREG/REP_GROUPS/BALANCE_ACCOUNTS/ПЕЧАТЬ В КОПЕЙКАХ";
private const PRINT_EVERY_DAY_REGPATH     = "REPTREG/REP_GROUPS/BALANCE_ACCOUNTS/ПЕЧАТЬ ЗА КАЖДЫЙ ДЕНЬ ПЕРИОДА";
private const PRINT_LEVEL_2_TOTAL_REGPATH = "REPTREG/REP_GROUPS/ОБОРОТНАЯ_ВЕДОМОСТЬ(ПРИЛ.8)/ПЕЧАТЬ_ИТОГОВ_2_ПОРЯДКА";

private const VF_MONEY  = "Д";
private const VF_DOUBLE = "Ч";
private const VF_PERC   = "%";
private const VF_ITEM   = "Ш";




private class TGlobal()
    private var m_rcbReport = RcbApplication.currentReport;

    macro getRcbReport() : Object
        return m_rcbReport;
    end;
end;

private var global = TGlobal();

private
CLASS (CTableReport) PRL14_TableReport()
    InitCTableReport( 0, False, False);

    AddColumn( "", 21 );    /* Номер счета первого порядка */
    AddColumn( "", 5  );    /* Номер счета второго порядка */

    AddColumn( "", 14, AL_RIGHT );
    AddColumn( "", 14, AL_RIGHT );
    AddColumn( "", 14, AL_RIGHT );

    AddColumn( "", 14, AL_RIGHT );
    AddColumn( "", 14, AL_RIGHT );
    AddColumn( "", 14, AL_RIGHT );

    AddColumn( "", 14, AL_RIGHT );
    AddColumn( "", 14, AL_RIGHT );
    AddColumn( "", 14, AL_RIGHT );

    AddColumn( "", 14, AL_RIGHT );
    AddColumn( "", 14, AL_RIGHT );
    AddColumn( "", 14, AL_RIGHT );

END;



CLASS RRG_PRL14_Error( p_XType : Integer, p_XMessage : String )

    var XType    = p_XType;
    var XMessage = p_XMessage;

END;

private var RRG_PRL14_X = RRG_PRL14_Error( RRG_PRL14_XOK, "" );

MACRO RRG_PRL14_XThrow( XType : Integer, XMessage : String )

    RRG_PRL14_X = RRG_PRL14_Error( XType, XMessage );

    RunError(XMessage);

END;

MACRO RRG_PRL14_XCatch(err)

    if   ( RRG_PRL14_X.XType == RRG_PRL14_XWarning )
        MsgBox( RRG_PRL14_X.XMessage );
    elif ( RRG_PRL14_X.XType == RRG_PRL14_XError   )
        MsgBox( RRG_PRL14_X.XMessage );
    else
        RunError();
    end;

    Exit(1);

END;


/* !!!BZ!!! Librarian */
private
macro GetPartitionName( balance, chapter, planNumber, partition )

    var query = " SELECT T_NAME_PART "  +
                " FROM DPARTBLNC_DBT "  +
                " WHERE T_CHAPTER  =  " + chapter +
                " AND   T_INUMPLAN =  " + planNumber +
                " AND   T_PART     =  " + partition;

    var dataset = TRsbDataSet( query );

    if ( not dataset.MoveNext() )
        RRG_PRL14_XThrow( RRG_PRL14_XError, String("Не найдено имя раздела для балансового счета: ", balance ) );
    end;


    return dataset.name_part;

end;


private
macro GetBalanceName( balance, chapter, planNumber )

    var query = " SELECT T_NAME_PART "  +
                " FROM DBALANCE_DBT "  +
                " WHERE T_CHAPTER  =  " + chapter +
                " AND   T_INUMPLAN =  " + planNumber +
                " AND   T_BALANCE  =  " + GetSQLString( balance );

    var dataset = TRsbDataSet( query );

    if ( not dataset.MoveNext() )
        RRG_PRL14_XThrow( RRG_PRL14_XError, String("Не найдено имя  балансового счета: ", balance ) );
    end;


    return dataset.name_part;

end;

private
macro GetPartition( balance, chapter, planNumber )

    var query = " SELECT  T_PART " +
                " FROM    DBALANCE_DBT " +
                " WHERE T_CHAPTER  =  " + chapter +
                " AND   T_INUMPLAN =  " + planNumber +
                " AND   T_BALANCE  =  " + GetSQLString( balance );


    var dataset = TRsbDataSet( query );

    if ( not dataset.MoveNext() )
        RRG_PRL14_XThrow( RRG_PRL14_XError, String("Не найден раздел для балансового счета: ", balance ) );
    end;


    return dataset.part;


end;



private
MACRO ZeroValue( Format )
    if   ( format == VF_MONEY  ) return Money ($0);
    elif ( format == VF_DOUBLE ) return Double(0.);
    elif ( format == VF_PERC   ) return Double(0.);
    elif ( format == VF_ITEM   ) return Int   (0);
    else
        RRG_PRL14_XThrow( RRG_PRL14_XError, String("Неизвестный формат переменной: ",format) );
    end;
END;

CLASS RRG_PRL14_Balance( dataSet )

    private var m_Balance     : String;
    private var m_BalanceName : String;
    private var m_BKind       : String;
    private var m_isAP        : Integer;
    private var m_Sums        : TArray;

    private var m_isWork      : Bool;
    private var m_isZero      : Bool;

    private var m_Format      : String;
    private var m_Zero;

    private var m_isSkip : Bool;

    private macro recursiveFindSpodValue(balance : string, root)
        var iterator = root.createValueIterator();
        var result = NULL;

        iterator.moveFirst();
        while (not iterator.isDone())
            if (iterator.currentItem.fieldValue("balance").exact == balance)
                return iterator.currentItem;
            end;

            result = recursiveFindSpodValue(balance, iterator.currentItem);
            if( result != NULL )
                return result;
            end;

            iterator.moveNext();
        end;

        return result;
    end;

    private
    Macro getValue( dataSet, cname, varname, make_error )

        macro getMean( mean1, mean2 )

           var value;

           if   ( m_Format == VF_MONEY  ) value = Money (mean1);
           elif ( m_Format == VF_DOUBLE ) value = Double(mean1);
           elif ( m_Format == VF_PERC   ) value = Double(mean1);
           elif ( m_Format == VF_ITEM   ) value = Int   (mean1);
           else
               RRG_PRL14_XThrow( RRG_PRL14_XError, String("Неизвестный формат переменной: ",m_Format) );
           end;

           return value;
        end;

        if (m_isSkip)
            m_isZero = true;
            return 0;
        end;

        var iswrk  = dataSet.value(cname+"w",NULL,V_INTEGER) == 1;
        var isnul  = false;
        var mean1  = dataSet.value(cname+"1",@isnul,V_DOUBLE);
        var mean2  = dataSet.value(cname+"2",@isnul,V_DOUBLE);
        var value;

        if ( not iswrk )
            value = m_Zero;
        else
            m_isWork = true;

            if ( isnul )
                if ( (not make_error) or (MeanUndefByZero != 0) )
                    value = m_Zero;
                else
                    RRG_PRL14_XThrow( RRG_PRL14_XError, String("Не найдено значение переменной \"",varname,"\"") );
                end;
            else
                value = getMean( mean1, mean2 );
            end;
        end;

        if ( value != m_Zero )
            m_isZero = false;
        end;

        return value;
    End;

    private
    Macro Constructor( dataSet )
        macro setSums()
            if (m_isSkip)
                return;
            end;

            var ar = getValue( dataSet, "ar", String("Бн",m_Balance,"РуА"), m_isAP or (m_BKind == KA_A) ),
                ap = getValue( dataSet, "ap", String("Бн",m_Balance,"ПоА"), m_isAP or (m_BKind == KA_A) ),
                as = getValue( dataSet, "as", String("Бн",m_Balance,"__А"), m_isAP or (m_BKind == KA_A) ),
                pr = getValue( dataSet, "pr", String("Бн",m_Balance,"РуП"), m_isAP or (m_BKind == KA_P) ),
                pp = getValue( dataSet, "pp", String("Бн",m_Balance,"ПоП"), m_isAP or (m_BKind == KA_P) ),
                ps = getValue( dataSet, "ps", String("Бн",m_Balance,"__П"), m_isAP or (m_BKind == KA_P) );

            var spodValue = recursiveFindSpodValue(m_balance, global.getRcbReport().attributeValue("БнСПОД_СП"));

            if (spodValue != NULL)
                m_sums[RRG_CR] = spodValue.fieldValue("nextYearCreditRouble").exact;
                m_sums[RRG_CV] = spodValue.fieldValue("nextYearCreditCover").exact;
                m_sums[RRG_CS] = m_sums[RRG_CR] + m_sums[RRG_CV];
                m_sums[RRG_DR] = spodValue.fieldValue("nextYearDebetRouble").exact;
                m_sums[RRG_DV] = spodValue.fieldValue("nextYearDebetCover").exact;
                m_sums[RRG_DS] = m_sums[RRG_DR] + m_sums[RRG_DV];
            else
                m_sums[RRG_CR] = 0;
                m_sums[RRG_CV] = 0;
                m_sums[RRG_CS] = 0;
                m_sums[RRG_DR] = 0;
                m_sums[RRG_DV] = 0;
                m_sums[RRG_DS] = 0;
            end;

            if   (m_BKind == KA_A)
                m_Sums[RRG_IS] = as - ps;
                m_Sums[RRG_IR] = ar - pr;
                m_Sums[RRG_IV] = ap - pp;
                m_sums[RRG_OR] = m_sums[RRG_IR] + m_sums[RRG_DR] - m_sums[RRG_CR];
                m_sums[RRG_OV] = m_sums[RRG_IV] + m_sums[RRG_DV] - m_sums[RRG_CV];
                m_sums[RRG_OS] = m_sums[RRG_IS] + m_sums[RRG_DS] - m_sums[RRG_CS];
            elif (m_BKind == KA_P)
                m_Sums[RRG_IS] = ps - as;
                m_Sums[RRG_IR] = pr - ar;
                m_Sums[RRG_IV] = pp - ap;
                m_sums[RRG_OR] = m_sums[RRG_IR] + m_sums[RRG_CR] - m_sums[RRG_DR];
                m_sums[RRG_OV] = m_sums[RRG_IV] + m_sums[RRG_CV] - m_sums[RRG_DV];
                m_sums[RRG_OS] = m_sums[RRG_IS] + m_sums[RRG_CS] - m_sums[RRG_DS];
            end;
        end;

        macro setFormat()
            m_Format = NULL;

            if ( m_Format == NULL ) m_Format = dataSet.arf; end;
            if ( m_Format == NULL ) m_Format = dataSet.apf; end;
            if ( m_Format == NULL ) m_Format = dataSet.asf; end;
            if ( m_Format == NULL ) m_Format = dataSet.prf; end;
            if ( m_Format == NULL ) m_Format = dataSet.ppf; end;
            if ( m_Format == NULL ) m_Format = dataSet.psf; end;

            if ( m_Format == NULL )
                m_isSkip = true;
                return;
//                RRG_PRL14_XThrow( RRG_PRL14_XError, "Отсутствуют переменные для б/с: " + m_Balance );
            end;

            m_Zero = ZeroValue(m_Format);
        end;

        m_isSkip = false;

        m_Balance     = dataSet.value("Balance");
        m_BalanceName = dataSet.value("BalanceName");
        m_BKind       = dataSet.value("BKind");
        m_isAP        = dataSet.value("isAP");

        m_isWork = false;
        m_isZero = true;

        m_Sums = TArray();

        setFormat();

        setSums();
    End;

    private macro checkTurn()
        macro checkAttribute(attributeId : String)
            var attributeValue = global.getRcbReport().attributeValue(attributeId);
            if ((attributeValue != null) and (abs(attributeValue.current) > 0.0))
                m_isZero = false;
            end;
        end;

        checkAttribute("Бн" + m_balance + "РуД");
        checkAttribute("Бн" + m_balance + "РуК");
        checkAttribute("Бн" + m_balance + "ПоД");
        checkAttribute("Бн" + m_balance + "ПоК");
    end;

    Macro Balance()
        return m_Balance;
    End;

    Macro BalanceName()
        return m_BalanceName;
    End;

    Macro Sums()
        return m_Sums;
    End;

    Macro isWork()
        return m_isWork;
    End;

    Macro isZero()
        if (m_isZero)
            checkTurn();
        end;
        return m_isZero;
    End;

    Macro isAP()
        return m_isAP;
    End;

    Macro isSpodZero()
        return (m_sums[RRG_DR] == 0)
           and (m_sums[RRG_DV] == 0)
           and (m_sums[RRG_DS] == 0)
           and (m_sums[RRG_CR] == 0)
           and (m_sums[RRG_CV] == 0)
           and (m_sums[RRG_CS] == 0);
    End;

    Constructor(dataSet);

END;

CLASS (RRG_PRL14_Balance) RRG_PRL145_Balance( dataSet )

    initRRG_PRL14_Balance(dataSet);

    private var m_precision;
    private var m_multiplier;

    private
    Macro getValue( dataSet, cname, varname, make_error )

        if (m_isSkip)
            m_isZero = true;
            return 0;
        end;

        var iswrk  = dataSet.value(cname+"w",NULL,V_INTEGER) == 1;
        var isnul  = false;
        var mean2  = dataSet.value(cname+"2",@isnul,V_DOUBLE);
        var value;

        if ( not iswrk )
            value = m_Zero;
        else
            m_isWork = true;

            if ( isnul )
                if ( (not make_error) or (MeanUndefByZero != 0) )
                    value = m_Zero;
                else
                    RRG_PRL14_XThrow( RRG_PRL14_XError, String("Не найдено значение переменной \"",varname,"\"") );
                end;
            else
                value = mean2 / m_multiplier;
            end;
        end;

        if ( value != m_Zero )
            m_isZero = false;
        end;

        return value;
    End;

    private
    Macro Constructor( dataSet )
        macro setSums()
            if (m_isSkip)
                return;
            end;

            var ar = getValue( dataSet, "ar", String("Бн",m_Balance,"РуА"), m_isAP or (m_BKind == KA_A) ),
                ap = getValue( dataSet, "ap", String("Бн",m_Balance,"ПоА"), m_isAP or (m_BKind == KA_A) ),
                as = getValue( dataSet, "as", String("Бн",m_Balance,"__А"), m_isAP or (m_BKind == KA_A) ),
                pr = getValue( dataSet, "pr", String("Бн",m_Balance,"РуП"), m_isAP or (m_BKind == KA_P) ),
                pp = getValue( dataSet, "pp", String("Бн",m_Balance,"ПоП"), m_isAP or (m_BKind == KA_P) ),
                ps = getValue( dataSet, "ps", String("Бн",m_Balance,"__П"), m_isAP or (m_BKind == KA_P) );

            var spodValue = recursiveFindSpodValue(m_balance, global.getRcbReport().attributeValue("БнСПОД_СП"));

            if (spodValue != NULL)
                m_sums[RRG_CR] = spodValue.fieldValue("nextYearCreditRouble").exact;
                m_sums[RRG_CV] = spodValue.fieldValue("nextYearCreditCover").exact;
                m_sums[RRG_CS] = m_sums[RRG_CR] + m_sums[RRG_CV];
                m_sums[RRG_DR] = spodValue.fieldValue("nextYearDebetRouble").exact;
                m_sums[RRG_DV] = spodValue.fieldValue("nextYearDebetCover").exact;
                m_sums[RRG_DS] = m_sums[RRG_DR] + m_sums[RRG_DV];
            else
                m_sums[RRG_CR] = 0;
                m_sums[RRG_CV] = 0;
                m_sums[RRG_CS] = 0;
                m_sums[RRG_DR] = 0;
                m_sums[RRG_DV] = 0;
                m_sums[RRG_DS] = 0;
            end;

            if   (m_BKind == KA_A)
                m_Sums[RRG_IS] = as - ps;
                m_Sums[RRG_IR] = ar - pr;
                m_Sums[RRG_IV] = ap - pp;
                m_sums[RRG_OR] = m_sums[RRG_IR] + m_sums[RRG_DR] - m_sums[RRG_CR];
                m_sums[RRG_OV] = m_sums[RRG_IV] + m_sums[RRG_DV] - m_sums[RRG_CV];
                m_sums[RRG_OS] = m_sums[RRG_IS] + m_sums[RRG_DS] - m_sums[RRG_CS];
            elif (m_BKind == KA_P)
                m_Sums[RRG_IS] = ps - as;
                m_Sums[RRG_IR] = pr - ar;
                m_Sums[RRG_IV] = pp - ap;
                m_sums[RRG_OR] = m_sums[RRG_IR] + m_sums[RRG_CR] - m_sums[RRG_DR];
                m_sums[RRG_OV] = m_sums[RRG_IV] + m_sums[RRG_CV] - m_sums[RRG_DV];
                m_sums[RRG_OS] = m_sums[RRG_IS] + m_sums[RRG_CS] - m_sums[RRG_DS];
            end;
        end;

        macro setFormat()
            m_Format = NULL;

            if ( m_Format == NULL ) m_Format = dataSet.arf; end;
            if ( m_Format == NULL ) m_Format = dataSet.apf; end;
            if ( m_Format == NULL ) m_Format = dataSet.asf; end;
            if ( m_Format == NULL ) m_Format = dataSet.prf; end;
            if ( m_Format == NULL ) m_Format = dataSet.ppf; end;
            if ( m_Format == NULL ) m_Format = dataSet.psf; end;

            if ( m_Format == NULL )
                m_isSkip = true;
                return;
//                RRG_PRL14_XThrow( RRG_PRL14_XError, "Отсутствуют переменные для б/с: " + m_Balance );
            end;

            if(m_precision == 0)
                m_Zero = Int   (0);
            else
                m_Zero = Double(0.);
            end;
        end;

        m_isSkip = false;

        getRegistryValue("REPTREG/REP_GROUPS/BALANCE_ACCOUNTS/ТОЧНОСТЬ ДЛЯ ГЛАВЫ Д", V_INTEGER,  m_precision, null);
        m_multiplier = rcbApplication.currentReport.multiplier;

        m_Balance     = dataSet.value("Balance");
        m_BalanceName = dataSet.value("BalanceName");
        m_BKind       = dataSet.value("BKind");
        m_isAP        = dataSet.value("isAP");

        m_Sums = TArray();

        m_isWork = false;
        m_isZero = true;

        setFormat();

        setSums();
    End;

END;

CLASS RRG_PRL14_Protocol( p_NameFile )

    private var m_NameFile : String;

    private
    Macro Constructor(p_NameFile)
        m_NameFile = getTxtFileName(p_NameFile);

        SetOutPut( m_NameFile, false );
        SetOutPut( NULL,       true  );
    End;

    Macro NameFile()
        return m_NameFile;
    End;

    Macro PrintLine( Mess : String )
        SetOutPut(m_NameFile,true);
        PrintLn(Mess);
        SetOutPut(NULL,true);
    End;

    Macro View()
        file p() txt;

        if ( not Open(p,m_NameFile) )
            RRG_PRL14_XThrow( RRG_PRL14_XWarning, String("Ошибка открытия файла протокола:|",m_NameFile) );
        end;

        ViewFile(p);
    End;

    Constructor(p_NameFile);

END;

CLASS RRG_PRL14_Parm( p_Chapter : Integer )

    var Chapter    : Integer;
    var PlanNumber : Integer;
    var PrintKind  : Integer;
    var EveryDay   : Bool;
    var PrintOCP   : Bool;
    var PrintCop   : Bool;
    var Date1376   : Date;

    var PrintLevel2Total : bool;

    var BegDate    : Date;
    var EndDate    : Date;
    var Protocol   : RRG_PRL14_Protocol;
    var isLastChapter: Bool;

    private
    Macro initPrintKind()
        var type = V_UNDEF,
            err  = 0,
            val  = PRK_NOZ;

        PrintKind = PRK_NOZ;

        type = GetRegistryValue( PRINT_KIND_REGPATH, V_INTEGER, val, err );
        if ( (err == 0) and (type == V_INTEGER) )
            if ( (val >= PRK_BEG) and (val <= PRK_END) )
                PrintKind = val;
            end;
        end;
    End;

    private
    Macro initEveryDay()
        var type = V_UNDEF,
            err  = 0,
            val  = false;

        EveryDay = false;

        type = GetRegistryValue( PRINT_EVERY_DAY_REGPATH, V_BOOL, val, err );
        if ( (err == 0) and (type == V_BOOL) )
            EveryDay = val;
        end;
    End;

    private
       Macro initPrintCop()
        var type = V_UNDEF,
            err  = 0,
            val  = false;

        PrintCop = false;

        type = GetRegistryValue( PRINT_COPECKS_REGPATH, V_BOOL, val, err );
        if ( (err == 0) and (type == V_BOOL) )
            PrintCop = val;
        end;
    End;

    private
    Macro initDate1376()
        Date1376 = Date(1,4,2004);

        GetRegDate(Date1376,"ДАТА_1376У");
        if ( Date1376 == date(0,0,0) )
            Date1376 = date(1,4,2004);
        end;
    End;



    private
    Macro initPrintLevel2Total()
        var type = V_UNDEF,
            err  = 0,
            val  = false;

        PrintLevel2Total = false;

        type = GetRegistryValue( PRINT_LEVEL_2_TOTAL_REGPATH, V_BOOL, val, err );
        if ( (err == 0) and (type == V_BOOL) )
            PrintLevel2Total = val;
        end;
    End;



    private
    Macro initProtocol()
        Protocol = RRG_PRL14_Protocol("PRL14_log");
    End;

    private
    Macro Constructor( p_Chapter )
        Chapter = p_Chapter;

        planNumber = ПолучитьРеальныйНомерПлана();

        initPrintKind();
        initEveryDay();
        initPrintCop();
        initDate1376();
        initProtocol();
        initPrintLevel2Total();

        BegDate = ПредДатаОтчета;
        EndDate = ДатаОтчета;
    End;

    Constructor(p_Chapter);

END;

CLASS RRG_PRL14_Itog( Parm : RRG_PRL14_Parm )

    private var m_Sums    : TArray;
    private var m_IsValid : Bool;

    Macro ClearSums()
        m_Sums[RRG_OS] = $0;
        m_Sums[RRG_IS] = $0;
        m_Sums[RRG_CR] = $0;
        m_Sums[RRG_CV] = $0;
        m_Sums[RRG_CS] = $0;
        m_Sums[RRG_DR] = $0;
        m_Sums[RRG_DV] = $0;
        m_Sums[RRG_DS] = $0;

        m_Sums[RRG_OR] = $0;
        m_Sums[RRG_OV] = $0;
        m_Sums[RRG_IR] = $0;
        m_Sums[RRG_IV] = $0;
    end;


    private
    Macro Constructor( Parm )
        m_Sums    = TArray();
        m_IsValid = false;
        ClearSums();
    End;

    Macro Sums()
        return m_Sums;
    End;

    private
    Macro OpAdd( Sums : TArray )
        var i = 0;

        while( i < m_Sums.Size() )
            m_Sums[i] = m_Sums[i] + Sums[i];
            i = i + 1;
        end;

    End;

    private
    Macro OpSub( Sums : TArray )
        var i = 0;

        while( i < m_Sums.Size() )
            m_Sums[i] = m_Sums[i] - Sums[i];
            i = i + 1;
        end;

    End;

    Macro AddI( Itog : RRG_PRL14_Itog )
        OpAdd(Itog.Sums());
    End;

    Macro SubI( Itog : RRG_PRL14_Itog )
        OpSub(Itog.Sums());
    End;

    Macro AddB( Balance : RRG_PRL14_Balance )
        OpAdd(Balance.Sums());
    End;

    Macro SubB( Balance : RRG_PRL14_Balance )
        OpSub(Balance.Sums());
    End;

    Macro isSpodZero()
        return (m_sums[RRG_DR] == 0)
           and (m_sums[RRG_DV] == 0)
           and (m_sums[RRG_DS] == 0)
           and (m_sums[RRG_CR] == 0)
           and (m_sums[RRG_CV] == 0)
           and (m_sums[RRG_CS] == 0);
    End;

    Constructor(parm);

END;

private
MACRO NamePeriod( parm : RRG_PRL14_Parm )
    var Name = "";
    var m = 0,
        y = 0;

    if ( parm.EveryDay )
        Name = String( parm.CurDate:m );
    else
        DateSplit( parm.EndDate, NULL, m, y );

        if ( Накопительный )
            Name = String( "период с ", parm.BegDate:m, " по ", parm.EndDate:m );
        else
            if   ( ВидПериода == ВП_Год )
                Name = String( y, " г.");
            elif ( ВидПериода == ВП_Квартал )
                Name = String( (m-1)/3 + 1, " квартал ", y, " г.");
            elif ( ВидПериода == ВП_Месяц )
                Name = String( MonName( m), " ", y, " г.");
            elif ( ВидПериода == ВП_День )
                Name = String( ДатаОтчета:m );
            else
               Name = String( "период с ", ПредДатаОтчета:m, " по ", ДатаОтчета:m);
            end;
        end;
    end;

    return Name;
END;


CLASS RRG_PRL14_Report()


    private var m_tableReport = PRL14_TableReport();
    private const M_REPORTWIDTH = 237;
    private const ALIGN_LEFT   = -1;
    private const ALIGN_CENTER = 0;
    private const ALIGN_RIGHT  = 1;

    private const NONEXISTENT = -1;

    private var m_currentPartition = NONEXISTENT;
    private var m_currentLevel2Balance = NONEXISTENT;
    private var m_currentLevel2BalanceName = "";
    private var m_currentLevel1Balance = NONEXISTENT ;

    Macro ClearCurrentNames()
        m_currentPartition     = NONEXISTENT;
        m_currentLevel2Balance = NONEXISTENT;
        m_currentLevel1Balance = NONEXISTENT;
    end;

    private
    Macro MakeString( text, align )
        var str : string;
        if   ( align == ALIGN_LEFT )
          ExecExp("str = String(text:" + M_REPORTWIDTH + ":l)");
        elif ( align == ALIGN_CENTER )
          ExecExp("str = String(text:" + M_REPORTWIDTH + ":c)");
        elif ( align == ALIGN_RIGHT )
          ExecExp("str = String(text:" + M_REPORTWIDTH + ":r)");
        else
          ExecExp("str = String(text:" + M_REPORTWIDTH + ")");
        end;
        return str;
    END;


    Macro Pr( Value, Parm : RRG_PRL14_Parm )
        return Money (value);
    End;

    Macro PrintSeparator()
          m_tableReport.PrintSeparator();
    end;
    Macro PrintFooter()
          m_tableReport.PrintBottom();
    end;

// 30.05.2008 ABP 125526. Вообще непонятны причины печати названия главы. В ТЗ нет, в нормативных документах тоже нет.
//    Macro PrintChapterName( Parm : RRG_PRL14_Parm )
//        var dataSet = TRsbDataSet("SELECT t_Symbol, t_Name FROM dobchaptr_dbt WHERE t_Chapter = " + Parm.Chapter);
//
//        if ( not dataSet.moveNext() )
//            RRG_PRL14_XThrow( RRG_PRL14_XError, String("Не найдена глава с номером ",Parm.Chapter) );
//        end;
//
//        var ChapterStr = String(dataSet.value("t_Symbol"),". ",dataSet.value("t_Name"));
//
//        m_tableReport.PrintStringTransferByWord( ChapterStr );
//        m_tableReport.PrintStringTransferByWord( "" );
//    End;

    Macro PrintHead( Parm : RRG_PRL14_Parm )

        if (ДатаОтчета < RCB_I385_DATE)
            [#]( MakeString( "                             Приложение 14 ", ALIGN_RIGHT ) );
            [#]( MakeString( "   к Правилам ведения бухгалтерского учета ", ALIGN_RIGHT ) );
            [#]( MakeString( "   в кредитных организациях, расположенных ", ALIGN_RIGHT ) );
            [#]( MakeString( "        на территории Российской Федерации ", ALIGN_RIGHT ) );
            [ ];
            if (ДатаОтчета < RCB_I302_DATE1)
            [#]( MakeString( "      (Приложение к Положению Банка России ", ALIGN_RIGHT ) );
            [#]( MakeString( "               от 5 декабря 2002г. № 205-П ", ALIGN_RIGHT ) );
            [#]( MakeString( " \"О правилах ведения бухгалтерского учета ", ALIGN_RIGHT ) );
            [#]( MakeString( "   в кредитных организациях, расположенных ", ALIGN_RIGHT ) );
            [#]( MakeString( "     на территории Российской Федерации\") ", ALIGN_RIGHT ) );
            else
            [#]( MakeString( "                               (Приложение ", ALIGN_RIGHT ) );
            [#]( MakeString( "                           к Положению ЦБР ", ALIGN_RIGHT ) );
            [#]( MakeString( "                от 26 марта 2007г. № 302-П ", ALIGN_RIGHT ) );
            [#]( MakeString( "       \"О правилах ведения бухгалтерского ", ALIGN_RIGHT ) );
            [#]( MakeString( "           учета в кредитных организациях, ", ALIGN_RIGHT ) );
            [#]( MakeString( "               расположенных на территории ", ALIGN_RIGHT ) );
            [#]( MakeString( "                   Российской Федерации\") ", ALIGN_RIGHT ) );
            end;
            if (ДатаОтчета >= RCB_I2477_DATE1)
            [#]( MakeString( String(nvl(TZone().party().rec.name, ""))    , ALIGN_LEFT));
            [#]( MakeString( "(полное или сокращенное фирменное наименование кредитной организации)", ALIGN_LEFT));
            end;
            [ ];
            [#]( MakeString(        "СВОДНАЯ ВЕДОМОСТЬ ОБОРОТОВ ПО ОТРАЖЕНИЮ СОБЫТИЙ", ALIGN_CENTER ) );
            [#]( MakeString( "ПОСЛЕ ОТЧЕТНОЙ ДАТЫ ЗА " + NamePeriod(parm) , ALIGN_CENTER ) );
            [ ];
            [┌───────────────────────────────┬──────────────────────────────────────────────────┬─────────────────────────────────────────────────────────────────────────────────────────────────────┬──────────────────────────────────────────────────┐];
            [│                               │                                                  │                       Обороты по отражению событий после отчетной даты (СПОД)                       │        Исходящие остатки с учетом событий        │];
            [│          Номер счета          │     Входящие остатки на 1 января нового года     ├──────────────────────────────────────────────────┬──────────────────────────────────────────────────┤            после отчетной даты (СПОД)            │];
            [│                               │                                                  │                    по дебету                     │                     по кредиту                   │                                                  │];
            [├───────────────────────┬───────┼────────────────┬────────────────┬────────────────┼────────────────┬────────────────┬────────────────┼────────────────┬────────────────┬────────────────┼────────────────┬────────────────┬────────────────┤];
            [│                       │  2-го │    в рублях    │   ин.валюта,   │      итого     │    в рублях    │   ин.валюта,   │      итого     │    в рублях    │   ин.валюта,   │      итого     │    в рублях    │   ин.валюта,   │      итого     │];
            [│    1-го порядка       │  пор. │                │  драг.метал.   │                │                │  драг.метал.   │                │                │  драг.метал.   │                │                │  драг.метал.   │                │];
            [│                       │       │                │ в рубл.эквивал.│                │                │ в рубл.эквивал.│                │                │ в рубл.эквивал.│                │                │ в рубл.эквивал.│                │];
            [├───────────────────────┼───────┼────────────────┼────────────────┼────────────────┼────────────────┼────────────────┼────────────────┼────────────────┼────────────────┼────────────────┼────────────────┼────────────────┼────────────────┤];
            [│          1            │   2   │        3       │        4       │        5       │        6       │        7       │        8       │        9       │       10       │       11       │        12      │        13      │        14      │];
            [├───────────────────────┼───────┼────────────────┼────────────────┼────────────────┼────────────────┼────────────────┼────────────────┼────────────────┼────────────────┼────────────────┼────────────────┼────────────────┼────────────────┤];
        else
            [#]( MakeString( "                           Приложение 13   ",                           ALIGN_RIGHT ));
            [#]( MakeString( " к Правилам ведения бухгалтерского учета   ",                           ALIGN_RIGHT ));
            [#]( MakeString( " в кредитных организациях, расположенных   ",                           ALIGN_RIGHT ));
            [#]( MakeString( " на территории Российской Федерации        ",                           ALIGN_RIGHT ));
            [#]( MakeString( "                                           ",                           ALIGN_RIGHT ));
            [#]( MakeString( " (Приложение к Положению Банка России      ",                           ALIGN_RIGHT ));
            [#]( MakeString( " от 16 июля 2012 года N 385-П              ",                           ALIGN_RIGHT ));
            [#]( MakeString( "\"О правилах ведения бухгалтерского учета  ",                           ALIGN_RIGHT ));
            [#]( MakeString( " в кредитных организациях, расположенных   ",                           ALIGN_RIGHT ));
            [#]( MakeString( "на территории Российской Федерации\")      ",                           ALIGN_RIGHT ));
            [#]( MakeString( String(nvl(TZone().party().rec.name, ""))    ,                           ALIGN_LEFT  ));
            [#]( MakeString( "(полное или сокращенное фирменное наименование кредитной организации)", ALIGN_LEFT  ));
            [ ];
            [#]( MakeString( "Сводная ведомость оборотов по отражению    ",                           ALIGN_LEFT  ));
            [#]( MakeString( "событий после отчетной даты                ",                           ALIGN_LEFT  ));
            [#]( MakeString( "за " + NamePeriod(parm)                     ,                           ALIGN_LEFT  ));
            [ ];
            [┌───────────────────────────────┬──────────────────────────────────────────────────┬─────────────────────────────────────────────────────────────────────────────────────────────────────┬──────────────────────────────────────────────────┐];
            [│                               │                                                  │                       Обороты по отражению событий после отчетной даты (СПОД)                       │        Исходящие остатки с учетом событий        │];
            [│          Номер счета          │     Входящие остатки на 1 января нового года     ├──────────────────────────────────────────────────┬──────────────────────────────────────────────────┤            после отчетной даты (СПОД)            │];
            [│                               │                                                  │                    по дебету                     │                     по кредиту                   │                                                  │];
            [├───────────────────────┬───────┼────────────────┬────────────────┬────────────────┼────────────────┬────────────────┬────────────────┼────────────────┬────────────────┬────────────────┼────────────────┬────────────────┬────────────────┤];
            [│    первого порядка    │второго│    в рублях    │  иностранная   │      итого     │    в рублях    │  иностранная   │      итого     │    в рублях    │  иностранная   │      итого     │    в рублях    │  иностранная   │      итого     │];
            [│                       │порядка│                │     валюта     │                │                │     валюта     │                │                │     валюта     │                │                │     валюта     │                │];
            [│                       │       │                │   в рублевом   │                │                │   в рублевом   │                │                │   в рублевом   │                │                │   в рублевом   │                │];
            [│                       │       │                │  эквиваленте   │                │                │  эквиваленте   │                │                │  эквиваленте   │                │                │  эквиваленте   │                │];
            [├───────────────────────┼───────┼────────────────┼────────────────┼────────────────┼────────────────┼────────────────┼────────────────┼────────────────┼────────────────┼────────────────┼────────────────┼────────────────┼────────────────┤];
            [│          1            │   2   │        3       │        4       │        5       │        6       │        7       │        8       │        9       │       10       │       11       │        12      │        13      │        14      │];
            [├───────────────────────┼───────┼────────────────┼────────────────┼────────────────┼────────────────┼────────────────┼────────────────┼────────────────┼────────────────┼────────────────┼────────────────┼────────────────┼────────────────┤];

        end;
    End;

    Macro PrintHeadActive( Parm : RRG_PRL14_Parm )
        m_tableReport.PrintStringTransferByWord( "Актив" );
    End;

    private macro printSpodString(parm, column1, column2, itog)
        if (itog.isSpodZero())
            m_tableReport.PrintStringTransferByWord
                ( column1, column2,
                    Pr( Itog.Sums()[RRG_IR], Parm ),
                    Pr( Itog.Sums()[RRG_IV], Parm ),
                    Pr( Itog.Sums()[RRG_IS], Parm ),

                    "0.00",
                    "0.00",
                    "0.00",
                    "0.00",
                    "0.00",
                    "0.00",

                    Pr( Itog.Sums()[RRG_OR], Parm ),
                    Pr( Itog.Sums()[RRG_OV], Parm ),
                    Pr( Itog.Sums()[RRG_OS], Parm )
                );
        else
            m_tableReport.PrintStringTransferByWord
                ( column1, column2,
                    Pr( Itog.Sums()[RRG_IR], Parm ),
                    Pr( Itog.Sums()[RRG_IV], Parm ),
                    Pr( Itog.Sums()[RRG_IS], Parm ),

                    Pr( Itog.Sums()[RRG_DR], Parm ),
                    Pr( Itog.Sums()[RRG_DV], Parm ),
                    Pr( Itog.Sums()[RRG_DS], Parm ),
                    Pr( Itog.Sums()[RRG_CR], Parm ),
                    Pr( Itog.Sums()[RRG_CV], Parm ),
                    Pr( Itog.Sums()[RRG_CS], Parm ),

                    Pr( Itog.Sums()[RRG_OR], Parm ),
                    Pr( Itog.Sums()[RRG_OV], Parm ),
                    Pr( Itog.Sums()[RRG_OS], Parm )
                );
        end;
    end;

    Macro PrintItogActive( Parm : RRG_PRL14_Parm, Itog : RRG_PRL14_Itog )
        PrintSeparator();
        printSpodString(parm, "ИТОГО по активу", "", itog);
        PrintSeparator();
    End;

    Macro PrintHeadPassive( Parm : RRG_PRL14_Parm )
        m_tableReport.PrintStringTransferByWord( "Пассив" );
    End;

    Macro PrintItogPassive( Parm : RRG_PRL14_Parm, Itog : RRG_PRL14_Itog )
        PrintSeparator();
        printSpodString(parm, "ИТОГО по пассиву", "", itog);

        if(Parm.isLastChapter)
            PrintFooter();
        else
            PrintSeparator();
        end;
    End;


    Macro PrintHeadPartition( Parm: RRG_PRL14_Parm, Balance : RRG_PRL14_Balance )

        var partition;

        if (global.getRcbReport().context.period.endDate < RCB_I2090_DATE)
            partition = GetPartition( Balance.balance(), Parm.chapter, Parm.planNumber );
            //m_tableReport.PrintStringTransferByWord( string( "РАЗДЕЛ ", partition, ". ", GetPartitionName( Balance.balance(), Parm.chapter, Parm.planNumber, partition ) ) );
        end;

    End;


    Macro PrintLevel2BalanceItog( Parm : RRG_PRL14_Parm, Itog : RRG_PRL14_Itog )

        if (global.getRcbReport().context.period.endDate < RCB_I2090_DATE)
            if ( ( m_currentLevel2Balance != NONEXISTENT ) and Parm.printLevel2Total )
                m_tableReport.PrintStringTransferByWord("");
                m_tableReport.PrintStringTransferByWord("ИТОГО");
                printSpodString(parm, "по счету 2-го порядка", m_currentLevel2Balance, itog);
            end;
        else
            if ( m_currentLevel2Balance != NONEXISTENT )
                m_tableReport.PrintStringTransferByWord("");
                m_tableReport.PrintStringTransferByWord("ИТОГО");
                printSpodString(parm, "по счету 2-го порядка", m_currentLevel2Balance, itog);
            end;
        end;

    end;

    Macro PrintHeadLevel1Balance( Parm : RRG_PRL14_Parm, level1Balance )
    end;

    Macro PrintLevel1BalanceItog( Parm: RRG_PRL14_Parm, Itog : RRG_PRL14_Itog )
        if (m_currentLevel1Balance != NONEXISTENT )
            m_tableReport.PrintStringTransferByWord("");
            m_tableReport.PrintStringTransferByWord("ИТОГО");
            m_tableReport.PrintStringTransferByWord("по счету 1-го порядка");
            printSpodString(parm, m_currentLevel1Balance, "", itog);
        end;
    end;

    Macro PrintPartitionItog( Parm : RRG_PRL14_Parm, Itog : RRG_PRL14_Itog )
        if (m_currentPartition != NONEXISTENT )
            m_tableReport.PrintStringTransferByWord("");
            m_tableReport.PrintStringTransferByWord("ИТОГО");
            printSpodString(parm, "по разделу " + m_currentPartition, "", itog);
        end;
        printSeparator();
    end;

    Macro PrintAllTurnsItog( Parm : RRG_PRL14_Parm, Itog : RRG_PRL14_Itog )
    end;


    Macro PrintFoot( Parm : RRG_PRL14_Parm )
        print("\n   ");
        printLn({Name_Boss} + " _____________________ " + {FIO_Boss} + "\t" +
                {Name_Book} + " _____________________ " + {FIO_Book} );
    END;


    Macro ProcessPartitionName( Balance : RRG_PRL14_Balance, Parm: RRG_PRL14_Parm )
        var partition = GetPartition( Balance.balance(), Parm.chapter, Parm.planNumber );
        if ( partition != m_currentPartition )
            /* Печатаем имя раздела */
            PrintHeadPartition( Parm, Balance );
            m_currentPartition = partition;
        end;
    end;


    Macro ProcessPartition( Balance : RRG_PRL14_Balance, Parm : RRG_PRL14_Parm, Itog1 : RRG_PRL14_Itog, ItogP : RRG_PRL14_Itog )
        ItogP.AddI( Itog1 );

        var partition = GetPartition( Balance.balance(), Parm.chapter, Parm.planNumber );
        if ( partition != m_currentPartition )
                /* Напечатать информацию по счету второго порядка */
                PrintPartitionItog( Parm, ItogP );
                ProcessPartitionName( Balance, Parm );
                /* Очистить итоги */
                ItogP.ClearSums();

        end;
        m_currentPartition = partition;
    end;



    Macro ProcessLevel1Balance( Balance : RRG_PRL14_Balance, Parm : RRG_PRL14_Parm, Itog2 : RRG_PRL14_Itog, Itog1 : RRG_PRL14_Itog, ItogP : RRG_PRL14_Itog )
        Itog1.AddI( Itog2 );


        var level1Balance = БалансовыйПредыдущегоПорядка( balance.Balance() );
        if ( level1Balance != m_currentLevel1Balance )
            /* Напечатать информацию по счету второго порядка */
            PrintLevel1BalanceItog( Parm, Itog1 );
            /* Очистить итоги */
            ProcessPartition( Balance, Parm , Itog1, ItogP );
            PrintHeadLevel1Balance( Parm, level1Balance );
            Itog1.ClearSums();
        end;
        m_currentLevel1Balance = level1Balance;

    end;



    Macro ProcessLevel2Balance( Balance : RRG_PRL14_Balance, Parm : RRG_PRL14_Parm, Itog2 : RRG_PRL14_Itog, Itog1 : RRG_PRL14_Itog, ItogP : RRG_PRL14_Itog )
        var level2Balance = Balance.balance();
        if ( ( level2Balance != m_currentLevel2Balance ) )
            /* Первый обрабатываемый счет - инициализируем вышестоящие уровни */
            if ( m_currentLevel2Balance == NONEXISTENT )
                /* Вывести название нового раздела */
                ProcessPartitionName( Balance, Parm );
                m_currentLevel1Balance = БалансовыйПредыдущегоПорядка( level2Balance );
                PrintHeadLevel1Balance( Parm, m_currentLevel1Balance );
                m_currentPartition = GetPartition( Balance.balance(), Parm.chapter, Parm.planNumber );
            else
                 /* Напечатать информацию по счету второго порядка */
                PrintLevel2BalanceItog( Parm, Itog2 );
                ProcessLevel1Balance( Balance, Parm, Itog2, Itog1, ItogP );

                /* Очистить итоги */
                Itog2.ClearSums();
            end;
        end;

        Itog2.AddB( Balance );
        m_currentLevel2Balance = level2Balance;
    end;


    Macro ProcessBalance( Balance : RRG_PRL14_Balance, Parm : RRG_PRL14_Parm, level2Itog : RRG_PRL14_Itog, level1Itog : RRG_PRL14_Itog, partitionItog : RRG_PRL14_Itog )

        ProcessLevel2Balance( Balance, Parm, level2Itog, level1Itog, partitionItog );
        m_currentLevel2BalanceName = balance.BalanceName();
    End;


    Macro ViewDOS( Parm : RRG_PRL14_Parm )

        file f() txt;

        Parm.Protocol.PrintLine("Печать завершена успешно.");
        Parm.Protocol.PrintLine("Нажмите ESC для просмотра отчета.");

        Parm.Protocol.View();

    End;

END;

private
MACRO GetQuery( Chapter, BKind, BegDate, EndDate )

    Macro GetVarName( Suffix )
        return "'Бн' || TRANSLATE(bl.t_Balance,'.\\/','___') || " + GetSQLString(Suffix);
    End;

    Macro SelectString( ps )
        return "       CASE"                                                                                            + "\n" +
               "           WHEN    NVL(vd"+ps+".t_bdInclude," + GetSQLDate(Date(0,0,0)) + ") <= " + GetSQLDate(EndDate) + "\n" +
               "               AND NVL(vd"+ps+".t_bdExclude," + GetSQLDate(Date(0,0,0)) + ") >= " + GetSQLDate(BegDate) + "\n" +
               "               THEN 1 "                                                                                 + "\n" +
               "           ELSE 0 "                                                                                     + "\n" +
               "       END "+ps+"w, "                                                                                   + "\n" +
               "       vd"+ps+".t_cFormat "+ps+"f,"                                                                     + "\n" +
               "       mr"+ps+".t_mean1   "+ps+"1,"                                                                     + "\n" +
               "       mr"+ps+".t_mean2   "+ps+"2 ";
    End;

    Macro WhereString( ps, suff, begdate, enddate )
        return "       AND vd"+ps+".t_iFormId(+)               = " + 1                             + "\n" +
               "       AND vd"+ps+".t_szVarName(+)             = " + GetVarName(suff)              + "\n" +
               "       AND mr"+ps+".t_iNumDprt(+)              = " + НомерПодразделения            + "\n" +
               "       AND mr"+ps+".t_OrganizationStructure(+) = " + RcbOrganizationStructure      + "\n" +
               "       AND mr"+ps+".t_IssueMode(+)             = " + RcbIssueMode                  + "\n" +
               "       AND mr"+ps+".t_IsSummary(+)             = " + RcbSqlBool(RcbIsSummaryMode)  + "\n" +
               "       AND mr"+ps+".t_bdRepDate(+)             = " + GetSQLDate(enddate)           + "\n" +
               "       AND mr"+ps+".t_bdPrevDate(+)            = DECODE(vd"+ps+".t_cDoubleDates, CHR(0),"+GetSQLDate(Date(0,0,0))+","+GetSQLDate(begdate)+")" + "\n" +
               "       AND mr"+ps+".t_iFormId(+)               = " + 1                             + "\n" +
               "       AND mr"+ps+".t_iVarId(+)                = vd"+ps+".t_iVarId";
    End;

    Macro GetIsAP()
        return "       DECODE(INSTR(bl.t_Kind_Account,"+GetSQLString(KA_AP)+"),0,0,1)";
    End;

    Macro GetFilterBKind()
        return "       INSTR(DECODE(bl.t_Kind_Account, " + GetSQLString(KA_0) + ", " + GetSQLString(KA_A) + ", bl.t_Kind_Account), " + GetSQLChar(BKind) + ") > 0";
    End;

    /*Вернуть список балансовых счетов, вошедших в расчет СПОД*/
    macro getSpodBalancesString() : String
        var set : TRcbSet = TRcbSet();

        macro recursiveFillSet(compositeValue : Object, set : TRcbSet)
            var iterator : Object = compositeValue.createValueIterator();
            debugBreak;
            iterator.moveFirst();

            if (iterator.isDone())
                set.insert(compositeValue.fieldValue("balance").currentAsString);
            end;

            while (not iterator.isDone())
                recursiveFillSet(iterator.currentItem, @set);

                iterator.moveNext();
            end;
        end;

        recursiveFillSet(RcbApplication.currentReport.attributeValue("БнСПОД_СП"), @set);

        var iterator       : TRcbSetIterator = set.createIterator();
        var balancesString : String = "";

        iterator.moveFirst();

        while (not iterator.isDone())
            if (strLen(iterator.getCurrentItem()) >= 5)
                balancesString = balancesString + ", " + getSqlString(iterator.getCurrentItem());
            end;
            iterator.moveNext();
        end;

        return ternary(balancesString != "", subStr(balancesString, 3), "NULL");
    end;

    return "WITH bl_ocp AS"                                                       + "\n" +
           "("                                                                    + "\n" +
           " SELECT account.t_chapter t_chapter,"                                 + "\n" +
           "        account.t_balance t_balance"                                  + "\n" +
           "   FROM drepocp_tmp ocp,"                                             + "\n" +
           "        daccount$_dbt account"                                        + "\n" +
           "  WHERE account.t_accountId = ocp.t_accountId"                        + "\n" +
           ")"                                                                    + "\n" +
           "SELECT bl.t_Balance      Balance,"                                    + "\n" +
           "       bl.t_Name_Part    BalanceName,"                                + "\n" +
                   GetSQLChar(BKind)  + " BKind,"                                 + "\n" +
                   GetIsAP()          + " isAP,"                                  + "\n" +
                   SelectString("as") + ","                                       + "\n" +
                   SelectString("ar") + ","                                       + "\n" +
                   SelectString("ap") + ","                                       + "\n" +
                   SelectString("ps") + ","                                       + "\n" +
                   SelectString("pr") + ","                                       + "\n" +
                   SelectString("pp")                                             + "\n" +
           "FROM   dbalance_dbt  bl, "                                            + "\n" +
           "       dcy_varsd_dbt vdas, dcy_varsd_dbt vdar, dcy_varsd_dbt vdap,"   + "\n" +
           "       dcy_varsd_dbt vdps, dcy_varsd_dbt vdpr, dcy_varsd_dbt vdpp,"   + "\n" +
           "       dcy_mreal_dbt mras, dcy_mreal_dbt mrar, dcy_mreal_dbt mrap,"   + "\n" +
           "       dcy_mreal_dbt mrps, dcy_mreal_dbt mrpr, dcy_mreal_dbt mrpp "   + "\n" +
           "WHERE      bl.t_Chapter         = " + Chapter                         + "\n" +
           "       AND bl.t_iNumPlan        = " + ПолучитьРеальныйНомерПлана()    + "\n" +
           "       AND " + GetFilterBKind()                                       + "\n" +
           "       AND INSTR(bl.t_Type_Balance," + GetSQLChar("1")   + ") = 0"    + "\n" +
           "       AND INSTR(bl.t_Type_Balance," + GetSQLChar("T")   + ") = 0"    + "\n" +
           "       AND NOT EXISTS (SELECT NULL"                                   + "\n" +
           "                         FROM bl_ocp"                                 + "\n" +
           "                        WHERE bl_ocp.t_chapter = bl.t_chapter"        + "\n" +
           "                          AND bl_ocp.t_balance = bl.t_balance"        + "\n" +
           "                      )"                                              + "\n" +
           "       AND (LENGTH(bl.t_Balance) <= 5)"                               + "\n" +
           "       AND (    (bl.t_bdIncludeBwp <= " + getSqlDate(EndDate)         + "\n" +
           "            AND (   bl.t_bdExcludeBwp >= " + getSqlDate(BegDate)      + "\n" +
           "                 OR bl.t_bdExcludeBwp <  bl.t_bdIncludeBwp))"         + "\n" +
           "            OR (bl.t_balance IN (" + getSpodBalancesString() + ")))"  + "\n" +
                   WhereString("as","__А", BegDate, EndDate)                      + "\n" +
                   WhereString("ar","РуА", BegDate, EndDate)                      + "\n" +
                   WhereString("ap","ПоА", BegDate, EndDate)                      + "\n" +
                   WhereString("ps","__П", BegDate, EndDate)                      + "\n" +
                   WhereString("pr","РуП", BegDate, EndDate)                      + "\n" +
                   WhereString("pp","ПоП", BegDate, EndDate)                      + "\n" +
           "ORDER BY bl.t_Balance";

END;

private
MACRO CheckForm()
    if ( {Название отчета} != FORM_NAME )
        RRG_PRL14_XThrow( RRG_PRL14_XError, String("Макрос реализован только для приложения \"",FORM_NAME,"\"") );
    end;
END;

private
MACRO ProcessBalances( parm : RRG_PRL14_Parm, BKind : String, Itog : RRG_PRL14_Itog, Report : RRG_PRL14_Report )

    Macro isPrint( Balance : RRG_PRL14_Balance )
        var stat : Bool = true;

        if ( stat )
            stat =    (parm.PrintKind == PRK_ALL)
                   or (parm.PrintKind == PRK_BWP) and     Balance.isWork()
                   or (parm.PrintKind == PRK_NOZ) and not Balance.isZero();
        end;

        if (not stat)
            stat = not balance.isSpodZero();
        end;

        return stat;
    End;


    /*27 Apr 07 Malakhova Irina 104847*/
    var planArray = TArray(30);
    var i = 0;
    var ocpAccountServer;

    var q;
    var dataSet;

    var Balance : RRG_PRL14_Balance;
    var level2Itog : RRG_PRL14_Itog;
    var level1Itog : RRG_PRL14_Itog;
    var partitionItog : RRG_PRL14_Itog;

    while (i < planArray.size)
        planArray[i] = 0;
        i = i + 1;
    end;

    ocpAccountServer = RepOcpAccountServer(parm.Chapter, ALLFININSTR, RcbDepartmentList());
    ocpAccountServer.saveToTable(); /*кладем данные по счетам ОВП во временную табличку drepocp_tmp*/

    q = GetQuery(parm.Chapter,BKind,parm.BegDate,parm.EndDate);

    dataSet = TRsbDataSet(q);


    level2Itog = RRG_PRL14_Itog( parm );
    level1Itog = RRG_PRL14_Itog( parm );
    partitionItog = RRG_PRL14_Itog( parm );

    while( dataSet.moveNext() )

        if (parm.Chapter != 5)
            Balance = RRG_PRL14_Balance( dataSet );
        else
            Balance = RRG_PRL145_Balance( dataSet );
        end;

        Message("Обрабатывается балансовый счет: ", Balance.Balance(), " (" + BKind + ")");

        if ( isPrint(Balance) )
            Report.ProcessBalance( Balance, parm, level2Itog, level1Itog, partitionItog );
            Itog.AddB(Balance);
        end;
    end;

    level1Itog.AddI( level2Itog );
    partitionItog.AddI( level1Itog );

    Report.PrintLevel2BalanceItog( Parm, level2Itog    );
    Report.PrintLevel1BalanceItog( Parm, level1Itog    );
    Report.PrintPartitionItog(     Parm, partitionItog );
    Report.ClearCurrentNames( Parm );


END;

private
MACRO PrintFormBody( parm : RRG_PRL14_Parm, Report : RRG_PRL14_Report )

// 30.05.2008 ABP 125526. Вообще непонятны причины печати названия главы. В ТЗ нет, в нормативных документах тоже нет.
//    Report.PrintChapterName( parm );


    var Itog : RRG_PRL14_Itog;
    var AllTurnsItog : RRG_PRL14_Itog;

    AllTurnsItog = RRG_PRL14_Itog(parm);

    Itog = RRG_PRL14_Itog(parm);
    Report.PrintHeadActive( parm );
    ProcessBalances( parm, "А", Itog, Report );
    Report.PrintItogActive( parm, Itog );

    AllTurnsItog.AddI( Itog );


    Itog = RRG_PRL14_Itog(parm);
    Report.PrintHeadPassive( parm );
    ProcessBalances( parm, "П", Itog, Report );
    Report.PrintItogPassive( parm, Itog );

    AllTurnsItog.AddI( Itog );

    Report.PrintAllTurnsItog( Parm, AllTurnsItog );



END;

private macro isChapterSpodZero(chapter)
    var dataSet     = TRsbDataSet("SELECT t_symbol FROM dobchaptr_dbt WHERE t_chapter = " + chapter);
    var spodValue   = RcbApplication().currentReport.attributeValue("БнСПОД_СП");
    var iterator    = spodValue.createValueIterator();
    var currentItem = NULL;

    if (dataSet.moveNext())
        iterator.moveFirst();
        while (not iterator.isDone())
            currentItem = iterator.currentItem;

            if (currentItem.fieldValue("balance").exact == dataSet.symbol)
                return (currentItem.fieldValue("currYearCreditRouble").exact == 0)
                   and (currentItem.fieldValue("currYearCreditCover").exact  == 0)
                   and (currentItem.fieldValue("nextYearCreditRouble").exact == 0)
                   and (currentItem.fieldValue("nextYearCreditCover").exact  == 0)
                   and (currentItem.fieldValue("currYearDebetRouble").exact  == 0)
                   and (currentItem.fieldValue("currYearDebetCover").exact   == 0)
                   and (currentItem.fieldValue("nextYearDebetRouble").exact  == 0)
                   and (currentItem.fieldValue("nextYearDebetCover").exact   == 0);
            end;

            iterator.moveNext();
        end;
    end;

    return true;
end;

private
MACRO PrintFormPeriod( parm : RRG_PRL14_Parm, Report : RRG_PRL14_Report )

    var Chapter : Integer;
    var isData = false;
    var i = 1;
    var chapters = "";
    parm.isLastChapter = true;
    Report.PrintHead( parm );

    if ( parm.Chapter == 0 )
        Chapter = 1;
        while( Chapter <= 5 )
            if(not isChapterSpodZero(String(Chapter)))
                chapters = chapters + String(Chapter);
            end;
            Chapter = Chapter + 1;
        end;
        while( i <= strlen(chapters) )
            Chapter = substr(chapters,i,1);
            isData = true;
            parm.Chapter = Chapter;
            if(i == strlen(chapters))
                parm.isLastChapter = true;
            else
                parm.isLastChapter = false;
            end;
            PrintFormBody( parm, Report );
            i = i + 1;
        end;
        parm.Chapter = 0;
    else
        if(not isChapterSpodZero(String(parm.Chapter)))
            isData = true;
            PrintFormBody( parm, Report );
        end;
    end;
    if(not isData)
        RRG_PRL14_XThrow( RRG_PRL14_XWarning,
            "Все попадающие в отчет счета имеют нулевые обороты СПОД.|Отчет не сформирован." );
    end;
    Report.PrintFoot( parm );

END;

private
MACRO PrintForm( Parm : RRG_PRL14_Parm, Report : RRG_PRL14_Report )

    var CurDate = Parm.BegDate;
    var BegDate = Parm.BegDate;
    var EndDate = Parm.EndDate;

    if ( IsHoliday(CurDate) )
        CurDate = DateAfterWorkDays(CurDate,1);

        if ( CurDate > parm.EndDate )
            RRG_PRL14_XThrow( RRG_PRL14_XWarning,
                "В заданном отчетном периоде только выходные дни.|Отчет не сформирован." );
        end;
    end;

    if ( Parm.EveryDay )

        while( CurDate <= EndDate )
            parm.BegDate = CurDate;
            parm.EndDate = CurDate;

            PrintFormPeriod(parm,Report);

            CurDate = DateAfterWorkDays(CurDate,1);
        end;

    else
        PrintFormPeriod(Parm,Report);
    end;

    Parm.BegDate = BegDate;
    Parm.EndDate = EndDate;

END;


MACRO RRG_PRL14_Main( Chapter, Report : RRG_PRL14_Report)

    var Parm : RRG_PRL14_Parm;

    CheckForm();

    Parm = RRG_PRL14_Parm(Chapter);

    PrintForm(Parm,Report);

    Report.ViewDos(Parm);

    return 0;

    OnError(err);
    RRG_PRL14_XCatch(err);
    return 1;

END;
