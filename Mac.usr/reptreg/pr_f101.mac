/********************************************************************************************/
/*    Макрос печати 101 формы                                                               */
/********************************************************************************************/
/* Modified                                                                                 */
/* 23.01.2013 GSP по I-00309788-3 Корректировка ширины полей для печати в txt формате       */
/********************************************************************************************/

import BankInter,
       RsbDataSet,
       Календарь,
       ReptCBInter,
       ReptCBCommon,
       cb_sql,
       rsexts,
       param,
       cy_find,
       chk_regd,
       exp_exl,
       lib_path,
       rcb_lib;

import exp_lib;
import rcbimport;

const RRG_OS =  0;
const RRG_OR =  1;
const RRG_OV =  2;
const RRG_IS =  3;
const RRG_IR =  4;
const RRG_IV =  5;
const RRG_DS =  6;
const RRG_DR =  7;
const RRG_DV =  8;
const RRG_CS =  9;
const RRG_CR = 10;
const RRG_CV = 11;

const RRG_F101_XOK      = 0;
const RRG_F101_XWarning = 1;
const RRG_F101_XError   = 2;

private const KA_A  = "А";
private const KA_P  = "П";
private const KA_AP = "АП";
private const KA_0  = "0";

private const FORM_NAME = "Балансовые счета";
private const FORM_ID   = НайтиИдентификаторОтчетаПоНазванию( FORM_NAME );

private const PRK_ALL = 0;
private const PRK_BWP = 1;
private const PRK_NOZ = 2;
private const PRK_BEG = PRK_ALL;
private const PRK_END = PRK_NOZ;

private const PRINT_KIND_REGPATH      = "REPTREG/REP_GROUPS/BALANCE_ACCOUNTS/ПЕЧАТЬ ФОРМЫ 101";
private const PRINT_COPECKS_REGPATH   = "REPTREG/REP_GROUPS/BALANCE_ACCOUNTS/ПЕЧАТЬ В КОПЕЙКАХ";
private const PRINT_EVERY_DAY_REGPATH = "REPTREG/REP_GROUPS/BALANCE_ACCOUNTS/ПЕЧАТЬ ЗА КАЖДЫЙ ДЕНЬ ПЕРИОДА";

private const VF_MONEY  = "Д";
private const VF_DOUBLE = "Ч";
private const VF_PERC   = "%";
private const VF_ITEM   = "Ш";

CLASS RRG_F101_Error( p_XType : Integer, p_XMessage : String )

    var XType    = p_XType;
    var XMessage = p_XMessage;

END;

private var RRG_F101_X = RRG_F101_Error( RRG_F101_XOK, "" );

MACRO RRG_F101_XThrow( XType : Integer, XMessage : String )

    RRG_F101_X = RRG_F101_Error( XType, XMessage );

    RunError(XMessage);

END;

MACRO RRG_F101_XCatch(err)

    if   ( RRG_F101_X.XType == RRG_F101_XWarning )
        MsgBox( RRG_F101_X.XMessage );
    elif ( RRG_F101_X.XType == RRG_F101_XError   )
        MsgBox( RRG_F101_X.XMessage );
    else
        RunError();
    end;

    Exit(1);

END;

private
MACRO ZeroValue( Format )
    if ( РасчетВКопейках )
        if   ( format == VF_MONEY  ) return Money ($0);
        elif ( format == VF_DOUBLE ) return Double(0.);
        elif ( format == VF_PERC   ) return Double(0.);
        elif ( format == VF_ITEM   ) return Int   (0);
        else
            RRG_F101_XThrow( RRG_F101_XError, String("Неизвестный формат переменной: ",format) );
        end;
    else
        return RCB_FloorTerm(0.);
    end;
END;

CLASS RRG_F101_Balance( dataSet )

    private var m_Balance : String;
    private var m_BKind   : String;
    private var m_isAP    : Integer;
    private var m_Sums    : TArray;

    private var m_isWork  : Bool;
    private var m_isZero  : Bool;

    private var m_Format  : String;
    private var m_Zero;

    private var m_isSkip : Bool;

    private
    Macro getValue( dataSet, cname, varname, make_error )

        macro getMean( mean1 : Double, mean2 : Double )

           var value;

           if (m_Format == VF_MONEY)
               if ( РасчетВКопейках )
                   value = Money(mean1);
               else
                   value = RCB_FloorTerm(mean2);
               end;
           else
               if   ( m_Format == VF_DOUBLE ) value = Double(mean1);
               elif ( m_Format == VF_PERC   ) value = Double(mean1);
               elif ( m_Format == VF_ITEM   ) value = Int   (mean1);
               else
                   RRG_F101_XThrow( RRG_F101_XError, String("Неизвестный формат переменной: ", m_Format) );
               end;
           end;

           return value;
        end;

        if (m_isSkip)
            m_isZero = true;
            return 0;
        end;

        var iswrk  = dataSet.value(cname+"w") == 1;
        var mean1  = dataSet.value(cname+"1");
        var mean2  = dataSet.value(cname+"2");
        var value;

        if ( not iswrk )
            value = m_Zero;
        else
            m_isWork = true;

            if ( (mean1 == NULL) or (mean2 == NULL)  )
                if ( (not make_error) or (MeanUndefByZero != 0) )
                    value = m_Zero;
                else
                    RRG_F101_XThrow( RRG_F101_XError, String("Не найдено значение переменной \"",varname,"\"") );
                end;
            else
                value = getMean( mean1, mean2 );
            end;
        end;

        if ( value != m_Zero )
            m_isZero = false;
        end;

        return value;
    End;

    private
    Macro Constructor( dataSet )

        macro setSums()
            if (m_isSkip)
                return;
            end;

            var cr = getValue( dataSet, "cr", String("Бн",m_Balance,"РуК"), true ),
                cp = getValue( dataSet, "cp", String("Бн",m_Balance,"ПоК"), true ),
                cs = getValue( dataSet, "cs", String("Бн",m_Balance,"__К"), true ),
                dr = getValue( dataSet, "dr", String("Бн",m_Balance,"РуД"), true ),
                dp = getValue( dataSet, "dp", String("Бн",m_Balance,"ПоД"), true ),
                ds = getValue( dataSet, "ds", String("Бн",m_Balance,"__Д"), true ),
                ar = getValue( dataSet, "ar", String("Бн",m_Balance,"РуА"), m_isAP or (m_BKind == KA_A) ),
                ap = getValue( dataSet, "ap", String("Бн",m_Balance,"ПоА"), m_isAP or (m_BKind == KA_A) ),
                as = getValue( dataSet, "as", String("Бн",m_Balance,"__А"), m_isAP or (m_BKind == KA_A) ),
                pr = getValue( dataSet, "pr", String("Бн",m_Balance,"РуП"), m_isAP or (m_BKind == KA_P) ),
                pp = getValue( dataSet, "pp", String("Бн",m_Balance,"ПоП"), m_isAP or (m_BKind == KA_P) ),
                ps = getValue( dataSet, "ps", String("Бн",m_Balance,"__П"), m_isAP or (m_BKind == KA_P) );

            m_Sums[RRG_CR] = cr;
            m_Sums[RRG_CV] = cp;
            m_Sums[RRG_CS] = cs;
            m_Sums[RRG_DR] = dr;
            m_Sums[RRG_DV] = dp;
            m_Sums[RRG_DS] = ds;

            if   ( m_BKind == KA_A )

                m_Sums[RRG_OR] = ar - pr;
                m_Sums[RRG_OV] = ap - pp;
                m_Sums[RRG_OS] = as - ps;

                m_Sums[RRG_IR] = m_Sums[RRG_OR] - m_Sums[RRG_DR] + m_Sums[RRG_CR];
                m_Sums[RRG_IV] = m_Sums[RRG_OV] - m_Sums[RRG_DV] + m_Sums[RRG_CV];
                m_Sums[RRG_IS] = m_Sums[RRG_OS] - m_Sums[RRG_DS] + m_Sums[RRG_CS];

            elif ( m_BKind == KA_P )

                m_Sums[RRG_OR] = pr - ar;
                m_Sums[RRG_OV] = pp - ap;
                m_Sums[RRG_OS] = ps - as;

                m_Sums[RRG_IR] = m_Sums[RRG_OR] + m_Sums[RRG_DR] - m_Sums[RRG_CR];
                m_Sums[RRG_IV] = m_Sums[RRG_OV] + m_Sums[RRG_DV] - m_Sums[RRG_CV];
                m_Sums[RRG_IS] = m_Sums[RRG_OS] + m_Sums[RRG_DS] - m_Sums[RRG_CS];

            end;
        end;

        macro setFormat()
            m_Format = NULL;

            if ( m_Format == NULL ) m_Format = dataSet.crf; end;
            if ( m_Format == NULL ) m_Format = dataSet.cpf; end;
            if ( m_Format == NULL ) m_Format = dataSet.csf; end;
            if ( m_Format == NULL ) m_Format = dataSet.drf; end;
            if ( m_Format == NULL ) m_Format = dataSet.dpf; end;
            if ( m_Format == NULL ) m_Format = dataSet.dsf; end;
            if ( m_Format == NULL ) m_Format = dataSet.arf; end;
            if ( m_Format == NULL ) m_Format = dataSet.apf; end;
            if ( m_Format == NULL ) m_Format = dataSet.asf; end;
            if ( m_Format == NULL ) m_Format = dataSet.prf; end;
            if ( m_Format == NULL ) m_Format = dataSet.ppf; end;
            if ( m_Format == NULL ) m_Format = dataSet.psf; end;

            if ( m_Format == NULL )
                m_isSkip = true;
                return;
//                RRG_F101_XThrow( RRG_F101_XError, "Отсутствуют переменные для б/с: " + m_Balance );
            end;

            m_Zero = ZeroValue(m_Format);
        end;

        m_isSkip = false;

        m_Balance = dataSet.balance;
        m_BKind   = dataSet.BKind;
        m_isAP    = dataSet.isAP;

        m_Sums    = TArray();

        m_isWork = false;
        m_isZero = true;

        setFormat();

        setSums();

    End;

    Macro Balance()
        return m_Balance;
    End;

    Macro Sums()
        return m_Sums;
    End;

    Macro isWork()
        return m_isWork;
    End;

    Macro isZero()
        return m_isZero;
    End;

    Macro isAP()
        return m_isAP;
    End;

    Constructor(dataSet);

END;

CLASS (RRG_F101_Balance) RRG_F1015_Balance( dataSet )

    initRRG_F101_Balance(dataSet);

    private var m_precision;
    private var m_multiplier;

    private
    Macro getValue( dataSet, cname, varname, make_error )

        if (m_isSkip)
            m_isZero = true;
            return 0;
        end;

        var iswrk  = dataSet.value(cname+"w") == 1;
        var mean2  = dataSet.value(cname+"2");
        var value;

        if ( not iswrk )
            value = m_Zero;
        else
            m_isWork = true;

            if (mean2 == NULL)
                if ( (not make_error) or (MeanUndefByZero != 0) )
                    value = m_Zero;
                else
                    RRG_F101_XThrow( RRG_F101_XError, String("Не найдено значение переменной \"",varname,"\"") );
                end;
            else
                value = mean2/m_multiplier;
            end;
        end;

        if ( value != m_Zero )
            m_isZero = false;
        end;

        return value;
    End;


        private
    Macro Constructor( dataSet )

        macro setSums()
            if (m_isSkip)
                return;
            end;

            var cr = getValue( dataSet, "cr", String("Бн",m_Balance,"РуК"), true ),
                cp = getValue( dataSet, "cp", String("Бн",m_Balance,"ПоК"), true ),
                cs = getValue( dataSet, "cs", String("Бн",m_Balance,"__К"), true ),
                dr = getValue( dataSet, "dr", String("Бн",m_Balance,"РуД"), true ),
                dp = getValue( dataSet, "dp", String("Бн",m_Balance,"ПоД"), true ),
                ds = getValue( dataSet, "ds", String("Бн",m_Balance,"__Д"), true ),
                ar = getValue( dataSet, "ar", String("Бн",m_Balance,"РуА"), m_isAP or (m_BKind == KA_A) ),
                ap = getValue( dataSet, "ap", String("Бн",m_Balance,"ПоА"), m_isAP or (m_BKind == KA_A) ),
                as = getValue( dataSet, "as", String("Бн",m_Balance,"__А"), m_isAP or (m_BKind == KA_A) ),
                pr = getValue( dataSet, "pr", String("Бн",m_Balance,"РуП"), m_isAP or (m_BKind == KA_P) ),
                pp = getValue( dataSet, "pp", String("Бн",m_Balance,"ПоП"), m_isAP or (m_BKind == KA_P) ),
                ps = getValue( dataSet, "ps", String("Бн",m_Balance,"__П"), m_isAP or (m_BKind == KA_P) );

            m_Sums[RRG_CR] = cr;
            m_Sums[RRG_CV] = cp;
            m_Sums[RRG_CS] = cs;
            m_Sums[RRG_DR] = dr;
            m_Sums[RRG_DV] = dp;
            m_Sums[RRG_DS] = ds;

            if   ( m_BKind == KA_A )

                m_Sums[RRG_OR] = ar - pr;
                m_Sums[RRG_OV] = ap - pp;
                m_Sums[RRG_OS] = as - ps;

                m_Sums[RRG_IR] = m_Sums[RRG_OR] - m_Sums[RRG_DR] + m_Sums[RRG_CR];
                m_Sums[RRG_IV] = m_Sums[RRG_OV] - m_Sums[RRG_DV] + m_Sums[RRG_CV];
                m_Sums[RRG_IS] = m_Sums[RRG_OS] - m_Sums[RRG_DS] + m_Sums[RRG_CS];

            elif ( m_BKind == KA_P )

                m_Sums[RRG_OR] = pr - ar;
                m_Sums[RRG_OV] = pp - ap;
                m_Sums[RRG_OS] = ps - as;

                m_Sums[RRG_IR] = m_Sums[RRG_OR] + m_Sums[RRG_DR] - m_Sums[RRG_CR];
                m_Sums[RRG_IV] = m_Sums[RRG_OV] + m_Sums[RRG_DV] - m_Sums[RRG_CV];
                m_Sums[RRG_IS] = m_Sums[RRG_OS] + m_Sums[RRG_DS] - m_Sums[RRG_CS];

            end;
        end;

        macro setFormat()
            m_Format = NULL;

            if ( m_Format == NULL ) m_Format = dataSet.crf; end;
            if ( m_Format == NULL ) m_Format = dataSet.cpf; end;
            if ( m_Format == NULL ) m_Format = dataSet.csf; end;
            if ( m_Format == NULL ) m_Format = dataSet.drf; end;
            if ( m_Format == NULL ) m_Format = dataSet.dpf; end;
            if ( m_Format == NULL ) m_Format = dataSet.dsf; end;
            if ( m_Format == NULL ) m_Format = dataSet.arf; end;
            if ( m_Format == NULL ) m_Format = dataSet.apf; end;
            if ( m_Format == NULL ) m_Format = dataSet.asf; end;
            if ( m_Format == NULL ) m_Format = dataSet.prf; end;
            if ( m_Format == NULL ) m_Format = dataSet.ppf; end;
            if ( m_Format == NULL ) m_Format = dataSet.psf; end;

            if ( m_Format == NULL )
                m_isSkip = true;
                return;
//                RRG_F101_XThrow( RRG_F101_XError, "Отсутствуют переменные для б/с: " + m_Balance );
            end;

            if(m_precision == 0)
                m_Zero = Int   (0);
            else
                m_Zero = Double(0.);
            end;

        end;

        m_isSkip = false;

        getRegistryValue("REPTREG/REP_GROUPS/BALANCE_ACCOUNTS/ТОЧНОСТЬ ДЛЯ ГЛАВЫ Д", V_INTEGER,  m_precision, null);
        m_multiplier = rcbApplication.currentReport.multiplier;

        m_Balance = dataSet.balance;
        m_BKind   = dataSet.BKind;
        m_isAP    = dataSet.isAP;

        m_Sums = TArray();

        m_isWork = false;
        m_isZero = true;

        setFormat();

        setSums();

    End;
END;

CLASS RRG_F101_Protocol( p_NameFile )

    private var m_NameFile : String;

    private
    Macro Constructor(p_NameFile)
        m_NameFile = getTxtFileName(p_NameFile);

        SetOutPut( m_NameFile, false );
        SetOutPut( NULL,       true  );
    End;

    Macro NameFile()
        return m_NameFile;
    End;

    Macro PrintLine( Mess : String )
        SetOutPut(m_NameFile,true);
        PrintLn(Mess);
        SetOutPut(NULL,true);
    End;

    Macro View()
        file p() txt;

        if ( not Open(p,m_NameFile) )
            RRG_F101_XThrow( RRG_F101_XWarning, String("Ошибка открытия файла протокола:|",m_NameFile) );
        end;

        ViewFile(p);
    End;

    Constructor(p_NameFile);

END;

CLASS RRG_F101_Parm( p_Chapter : Integer )

    var Chapter   : Integer;
    var PrintKind : Integer;
    var EveryDay  : Bool;
    var PrintCop  : Bool;
    var Date1376  : Date;

    var BegDate   : Date;
    var EndDate   : Date;
    var Protocol  : RRG_F101_Protocol;
    var kindView  : Integer;

    private
    Macro initPrintKind()
        var type = V_UNDEF,
            err  = 0,
            val  = PRK_NOZ;

        PrintKind = PRK_NOZ;

        type = GetRegistryValue( PRINT_KIND_REGPATH, V_INTEGER, val, err );
        if ( (err == 0) and (type == V_INTEGER) )
            if ( (val >= PRK_BEG) and (val <= PRK_END) )
                PrintKind = val;
            end;
        end;
    End;

    private
    Macro initEveryDay()
        var type = V_UNDEF,
            err  = 0,
            val  = false;

        EveryDay = false;

        type = GetRegistryValue( PRINT_EVERY_DAY_REGPATH, V_BOOL, val, err );
        if ( (err == 0) and (type == V_BOOL) )
            EveryDay = val;
        end;
    End;

    private
    Macro initPrintCop()
        var type = V_UNDEF,
            err  = 0,
            val  = false;

        PrintCop = false;

        type = GetRegistryValue( PRINT_COPECKS_REGPATH, V_BOOL, val, err );
        if ( (err == 0) and (type == V_BOOL) )
            PrintCop = val;
        end;
    End;

    private
    Macro initDate1376()
        Date1376 = Date(1,4,2004);

        GetRegDate(Date1376,"ДАТА_1376У");
        if ( Date1376 == date(0,0,0) )
            Date1376 = date(1,4,2004);
        end;
    End;

    private
    Macro initProtocol()
        Protocol = RRG_F101_Protocol("f101_log");
    End;

    private
    Macro initExcel()
        kindView = ee_user_select_xl();
    End;

    private
    Macro Constructor( p_Chapter )
        Chapter = p_Chapter;

        initPrintKind();
        initEveryDay();
        initPrintCop();
        initDate1376();
        initProtocol();
        initExcel();

        BegDate = ПредДатаОтчета;
        EndDate = ДатаОтчета;
    End;

    Constructor(p_Chapter);

END;

CLASS RRG_F101_Itog( Parm : RRG_F101_Parm )

    private var m_Sums    : TArray;
    private var m_IsValid : Bool;

    private
    Macro Constructor( Parm )
        m_Sums    = TArray();
        m_IsValid = false;
        m_Sums[RRG_OR] = $0;
        m_Sums[RRG_OV] = $0;
        m_Sums[RRG_OS] = $0;
        m_Sums[RRG_IR] = $0;
        m_Sums[RRG_IV] = $0;
        m_Sums[RRG_IS] = $0;
        m_Sums[RRG_CR] = $0;
        m_Sums[RRG_CV] = $0;
        m_Sums[RRG_CS] = $0;
        m_Sums[RRG_DR] = $0;
        m_Sums[RRG_DV] = $0;
        m_Sums[RRG_DS] = $0;
    End;

    Macro Sums()
        return m_Sums;
    End;

    private
    Macro OpAdd( Sums : TArray )
        var i = 0;

        while( i < m_Sums.Size() )
            m_Sums[i] = m_Sums[i] + Sums[i];
            i = i + 1;
        end;

    End;

    private
    Macro OpSub( Sums : TArray )
        var i = 0;

        while( i < m_Sums.Size() )
            m_Sums[i] = m_Sums[i] - Sums[i];
            i = i + 1;
        end;

    End;

    Macro AddI( Itog : RRG_F101_Itog )
        OpAdd(Itog.Sums());
    End;

    Macro SubI( Itog : RRG_F101_Itog )
        OpSub(Itog.Sums());
    End;

    Macro AddB( Balance : RRG_F101_Balance )
        OpAdd(Balance.Sums());
    End;

    Macro SubB( Balance : RRG_F101_Balance )
        OpSub(Balance.Sums());
    End;

    Constructor(parm);

END;

private
MACRO NamePeriod( parm : RRG_F101_Parm )
    var Name = "";
    var m = 0,
        y = 0;

    if ( parm.EveryDay )
        Name = String( parm.EndDate:m:f );
    else
        DateSplit( parm.EndDate, NULL, m, y );

        if ( Накопительный )
            Name = String( "период с ", parm.BegDate:m:f, " по ", parm.EndDate:m:f );
        else
            if   ( ВидПериода == ВП_Год )
                Name = String( y, " г.");
            elif ( ВидПериода == ВП_Квартал )
                Name = String( (m-1)/3 + 1, " квартал ", y, " г.");
            elif ( ВидПериода == ВП_Месяц )
                Name = String( MonName(m), " ", y, " г.");
            elif ( ВидПериода == ВП_День )
                Name = String( ДатаОтчета:m:f );
            else
               Name = String( "период с ", ПредДатаОтчета:m:f, " по ", ДатаОтчета:m:f);
            end;
        end;
    end;

    return Name;
END;

CLASS Report101()

    private var m_EE_EXP_FILE_NAME   = "";
    private var m_EE_LOCAL_FILE_NAME = "";

    private
    Macro Constructor()
        m_EE_LOCAL_FILE_NAME = "pr_f101.exl";
        m_EE_EXP_FILE_NAME   = ReturnDirString("TEXTDIR","TXTFILE") + m_EE_LOCAL_FILE_NAME;
    End;

    macro getEE_EXP_FILE_NAME()
        return m_EE_EXP_FILE_NAME;
    end;

    macro getEE_LOCAL_FILE_NAME()
        return m_EE_LOCAL_FILE_NAME;
    end;

    Macro Pr( Value, Parm : RRG_F101_Parm )
        var str = String(Value);

        if ( РасчетВКопейках and Parm.PrintCop )
            str = SubStr( str, 1, StrLen(str)-3 )+SubStr( str, StrLen(str)-1, 2 );
            if ( str == "000" )
                str = "0";
            end;
        elif ( not РасчетВКопейках )
            return Value;
        end;

        return str;
    End;

    Macro PrintChapterName( Parm : RRG_F101_Parm )
        var dataSet = TRsbDataSet("SELECT t_Symbol, t_Name FROM dobchaptr_dbt WHERE t_Chapter = " + Parm.Chapter);

        if ( not dataSet.moveNext() )
            RRG_F101_XThrow( RRG_F101_XError, String("Не найдена глава с номером ",Parm.Chapter) );
        end;

        var ChapterStr = String( String(dataSet.Symbol, ".", dataSet.Name):172:c );

        ee_insert_ef_values( ChapterStr );
        [#]( ChapterStr );
    End;

    private macro printTableHead()

/*        [─────┬─────────────────────────────────────────╥───────────────────────────────────────────────────────────────────────────────────╥─────────────────────────────────────────┐];
        [     │                                         ║                              Обороты за отчетный период                           ║                                         │];
        [Номер│            Входящие остатки             ╟─────────────────────────────────────────┬─────────────────────────────────────────╢            Исходящие остатки            │];
        [счета│                                         ║               по дебету                 │               по кредиту                ║                                         │];     
        [вто- ├─────────────┬─────────────┬─────────────╫─────────────┬─────────────┬─────────────┼─────────────┬─────────────┬─────────────╫─────────────┬─────────────┬─────────────┤];
        [рого │     руб.    │   ин.вал.,  │    итого    ║     руб.    │   ин.вал.,  │    итого    │     руб.    │   ин.вал.,  │    итого    ║     руб.    │   ин.вал.,  │    итого    │];        23.01.2013 GSP по I-00309788-3
        [по-  │             │    драг.    │             ║             │    драг.    │             │             │    драг.    │             ║             │    драг.    │             │];
        [рядка│             │   металлы   │             ║             │   металлы   │             │             │   металлы   │             ║             │   металлы   │             │];
        [─────┼─────────────┼─────────────┼─────────────╫─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────╫─────────────┼─────────────┼─────────────┤];
        [  1  │      2      │      3      │      4      ║      5      │      6      │      7      │      8      │      9      │     10      ║      11     │     12      │     13      │];
        [─────┴─────────────┴─────────────┴─────────────╨─────────────┴─────────────┴─────────────┴─────────────┴─────────────┴─────────────╨─────────────┴─────────────┴─────────────┘];*/
        [─────┬──────────────────────────────────────────────────────╥─────────────────────────────────────────────────────────────────────────────────────────────────────────────╥──────────────────────────────────────────────────────┐];
        [     │                                                      ║                                         Обороты за отчетный период                                          ║                                                      │];
        [Номер│                  Входящие остатки                    ╟──────────────────────────────────────────────────────┬──────────────────────────────────────────────────────╢                  Исходящие остатки                   │];
        [счета│                                                      ║                        по дебету                     │                    по кредиту                        ║                                                      │];
        [вто- ├─────────────────┬─────────────────┬──────────────────╫─────────────────┬─────────────────┬──────────────────┼─────────────────┬─────────────────┬──────────────────╫─────────────────┬─────────────────┬──────────────────┤];
        [рого │       руб.      │     ин.вал.,    │       итого      ║       руб.      │     ин.вал.,    │       итого      │       руб.      │     ин.вал.,    │      итого       ║       руб.      │     ин.вал.,    │       итого      │];
        [по-  │                 │      драг.      │                  ║                 │      драг.      │                  │                 │      драг.      │                  ║                 │      драг.      │                  │];
        [рядка│                 │     металлы     │                  ║                 │     металлы     │                  │                 │     металлы     │                  ║                 │     металлы     │                  │];
        [─────┼─────────────────┼─────────────────┼──────────────────╫─────────────────┼─────────────────┼──────────────────┼─────────────────┼─────────────────┼──────────────────╫─────────────────┼─────────────────┼──────────────────┤];
        [  1  │        2        │        3        │         4        ║        5        │        6        │         7        │        8        │        9        │       10         ║        11       │       12        │        13        │];
        [─────┴─────────────────┴─────────────────┴──────────────────╨─────────────────┴─────────────────┴──────────────────┴─────────────────┴─────────────────┴──────────────────╨─────────────────┴─────────────────┴──────────────────┘];
    end;

    Macro PrintHead( Parm : RRG_F101_Parm )

        var m_view;
        var kindPeriod;

        var objectFactoryInstance = RcbObjectFactoryBase();

        if (Parm.endDate >= RCB_I2742_DATE)
            m_view = RcbReportView("ОБОРОТНАЯ ВЕДОМОСТЬ ПО СЧЕТАМ БУХГАЛТЕРСКОГО УЧЕТА КРЕДИТНОЙ ОРГАНИЗАЦИИ", "0409101", arrCreate(RCB_PK_QUARTER, RCB_PK_MONTH, RCB_PK_DAY), DATE_IN_PERIOD_FORMAT);
        elif (Parm.endDate >= RCB_I2332_DATE)
            m_view = RcbReportView("ОБОРОТНАЯ ВЕДОМОСТЬ ПО СЧЕТАМ БУХГАЛТЕРСКОГО УЧЕТА КРЕДИТНОЙ ОРГАНИЗАЦИИ", "0409101", arrCreate(RCB_PK_MONTH, RCB_PK_DAY), DATE_IN_PERIOD_FORMAT);
        else
            m_view = RcbReportView("ОБОРОТНАЯ ВЕДОМОСТЬ ПО СЧЕТАМ БУХГАЛТЕРСКОГО УЧЕТА КРЕДИТНОЙ ОРГАНИЗАЦИИ", "0409101", RCB_PK_MONTH, DATE_IN_PERIOD_FORMAT);
        end;

        m_view.setReportWidth(174);

        m_view.printLendingAgencyCodeZone();
        m_view.printNamesZone();

        if ( not ee_open_ef(true,m_EE_EXP_FILE_NAME) )
            RRG_F101_XThrow( RRG_F101_XError, String("Ошибка открытия файла ",m_EE_EXP_FILE_NAME) );
        end;

        if ( (Parm.EveryDay and (Parm.EndDate < Parm.Date1376)) or ((not Parm.EveryDay) and (Parm.EndDate < Parm.Date1376)) )
            ee_insert_cell_data( m_view.getLendingAgencyCodeZone().getOkato(), 10,   6 );
            ee_insert_cell_data( m_view.getLendingAgencyCodeZone().getOkpo(),  11,   6 );
        else
            ee_insert_cell_data( m_view.getLendingAgencyCodeZone().getOkato(),  9,   6 );
            ee_insert_cell_data( m_view.getLendingAgencyCodeZone().getOkpo(),  10,   6 );
            ee_insert_cell_data( m_view.getLendingAgencyCodeZone().getOgrn(),      11,   6 );
        end;

        ee_insert_cell_data( m_view.getLendingAgencyCodeZone().getRegistrationNumber(), 12, 6 );
        ee_insert_cell_data( m_view.getLendingAgencyCodeZone().getBic(),   13, 6 );  /* 18.10.2007 Malakhova 110424 - заменила {MFO_Bank} на rcbGetBic()*/

        ee_insert_cell_data( "за " + NamePeriod(parm), 7, 11 );

        ee_insert_cell_data( m_view.getNamesZone().getLendingAgencyName() ,        10, 12 );
        ee_insert_cell_data( m_view.getNamesZone().getLendingAgencyPostalAdress(), 3,  13 );

        ee_insert_cell_data( m_view.getNamesZone().getOkudString(40),    13, 15 );
        ee_insert_cell_data( m_view.getNamesZone().getFormPeriodicity(), 13, 16 );

        if ( РасчетВКопейках and Parm.PrintCop )
            ee_insert_cell_data( "коп.",      13, 17 );
        elif ( РасчетВКопейках )
            ee_insert_cell_data( "руб.",      13, 17 );
        else
            ee_insert_cell_data( "тыс. руб.", 13, 17 );
        end;

        ee_start_tbl;

        printTableHead();

    End;

    Macro PrintHeadActive( Parm : RRG_F101_Parm )
        ee_insert_ef_values( " Актив" );
        [ Актив                                                                                                                                                                        ];
    End;

    Macro PrintItogActive( Parm : RRG_F101_Parm, Itog : RRG_F101_Itog )
        ee_insert_ef_values( " " );
        ee_insert_ef_values( " Итого по активу (баланс)" );
        ee_insert_ef_values( " ", Pr(Itog.Sums()[RRG_IR],Parm), Pr(Itog.Sums()[RRG_IV],Parm), Pr(Itog.Sums()[RRG_IS],Parm),
                                  Pr(Itog.Sums()[RRG_DR],Parm), Pr(Itog.Sums()[RRG_DV],Parm), Pr(Itog.Sums()[RRG_DS],Parm),
                                  Pr(Itog.Sums()[RRG_CR],Parm), Pr(Itog.Sums()[RRG_CV],Parm), Pr(Itog.Sums()[RRG_CS],Parm),
                                  Pr(Itog.Sums()[RRG_OR],Parm), Pr(Itog.Sums()[RRG_OV],Parm), Pr(Itog.Sums()[RRG_OS],Parm)
                           );
        ee_insert_ef_values( " " );

/*        [──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────]; 23.01.2013 GSP по I-00309788-3 */  
        [─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────];
        [ Итого по активу (баланс)                                                                                                                                                     ];
/*        [      ############# ############# ############# ############# ############# ############# ############# ############# ############# ############# ############# ############# ]*/
        [      ################# ################# ################## ################# ################# ################## ################# ################# ################## ################# ################# ##################]
        ( Pr(Itog.Sums()[RRG_IR],Parm):r:0:0, Pr(Itog.Sums()[RRG_IV],Parm):r:0:0, Pr(Itog.Sums()[RRG_IS],Parm):r:0:0,
          Pr(Itog.Sums()[RRG_DR],Parm):r:0:0, Pr(Itog.Sums()[RRG_DV],Parm):r:0:0, Pr(Itog.Sums()[RRG_DS],Parm):r:0:0,
          Pr(Itog.Sums()[RRG_CR],Parm):r:0:0, Pr(Itog.Sums()[RRG_CV],Parm):r:0:0, Pr(Itog.Sums()[RRG_CS],Parm):r:0:0,
          Pr(Itog.Sums()[RRG_OR],Parm):r:0:0, Pr(Itog.Sums()[RRG_OV],Parm):r:0:0, Pr(Itog.Sums()[RRG_OS],Parm):r:0:0
        );
/*        [──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────];*/
        [─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────];
    End;

    Macro PrintHeadPassive( Parm : RRG_F101_Parm )
        ee_insert_ef_values( " Пассив" );
        [ Пассив                                                                                                                                                                       ];
    End;

    Macro PrintItogPassive( Parm : RRG_F101_Parm, Itog : RRG_F101_Itog )
        ee_insert_ef_values( " " );
        ee_insert_ef_values( " Итого по пассиву (баланс)" );
        ee_insert_ef_values( " ", Pr(Itog.Sums()[RRG_IR],Parm), Pr(Itog.Sums()[RRG_IV],Parm), Pr(Itog.Sums()[RRG_IS],Parm),
                                  Pr(Itog.Sums()[RRG_DR],Parm), Pr(Itog.Sums()[RRG_DV],Parm), Pr(Itog.Sums()[RRG_DS],Parm),
                                  Pr(Itog.Sums()[RRG_CR],Parm), Pr(Itog.Sums()[RRG_CV],Parm), Pr(Itog.Sums()[RRG_CS],Parm),
                                  Pr(Itog.Sums()[RRG_OR],Parm), Pr(Itog.Sums()[RRG_OV],Parm), Pr(Itog.Sums()[RRG_OS],Parm)
                           );
        ee_insert_ef_values( " " );

/*        [──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────]; 23.01.2013 GSP по I-00309788-3 */
        [─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────];
        [ Итого по пассиву (баланс)                                                                                                                                                    ];
/*        [      ############# ############# ############# ############# ############# ############# ############# ############# ############# ############# ############# ############# ]*/
        [      ################# ################# ################## ################# ################# ################## ################# ################# ################## ################# ################# ##################]
        ( Pr(Itog.Sums()[RRG_IR],Parm):r:0:0, Pr(Itog.Sums()[RRG_IV],Parm):r:0:0, Pr(Itog.Sums()[RRG_IS],Parm):r:0:0,
          Pr(Itog.Sums()[RRG_DR],Parm):r:0:0, Pr(Itog.Sums()[RRG_DV],Parm):r:0:0, Pr(Itog.Sums()[RRG_DS],Parm):r:0:0,
          Pr(Itog.Sums()[RRG_CR],Parm):r:0:0, Pr(Itog.Sums()[RRG_CV],Parm):r:0:0, Pr(Itog.Sums()[RRG_CS],Parm):r:0:0,
          Pr(Itog.Sums()[RRG_OR],Parm):r:0:0, Pr(Itog.Sums()[RRG_OV],Parm):r:0:0, Pr(Itog.Sums()[RRG_OS],Parm):r:0:0
        );
/*        [──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────];*/
        [─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────];
    End;

    Macro PrintFoot( Parm : RRG_F101_Parm )
        ee_insert_ef_values( " " );
        ee_insert_ef_values( string( {Name_Boss}:35,   " ", {FIO_Boss}:40,  " (Ф.И.О.)" ) );
        ee_insert_ef_values( string( {Name_Book}:35,   " ", {FIO_Book}:40,  " (Ф.И.О.)" ) );
        ee_insert_ef_values( "М.П." );
        ee_insert_ef_values( string( "Исполнитель":35, " ", Исполнитель:40, " (Ф.И.О.)" ) );
        ee_insert_ef_values( string( "Телефон:":35,    " ", ТелефонИсполнителя ) );
        ee_insert_ef_values( {curdate} );
        ee_end_tbl;
        ee_close_ef;

        [ ];
        [   #                                 ##################################      (Ф.И.О.)]( {Name_Boss}:l, {FIO_Boss}:l );
        [   #                                 ##################################      (Ф.И.О.)]( {Name_Book}:l, {FIO_Book}:l );
        [   М.П.                                                                              ];
        [   Исполнитель                       ##################################      (Ф.И.О.)]( Исполнитель );
        [   Телефон:                          #                                               ]( ТелефонИсполнителя:l );
        [   #                                                                                 ]( {curdate}:l );
        [ ];
    End;

    Macro ProcessBalance( Balance : RRG_F101_Balance, Parm : RRG_F101_Parm )

        ee_insert_ef_values( balance.Balance(), Pr(Balance.Sums()[RRG_IR],Parm), Pr(Balance.Sums()[RRG_IV],Parm), Pr(Balance.Sums()[RRG_IS],Parm),
                                                Pr(Balance.Sums()[RRG_DR],Parm), Pr(Balance.Sums()[RRG_DV],Parm), Pr(Balance.Sums()[RRG_DS],Parm),
                                                Pr(Balance.Sums()[RRG_CR],Parm), Pr(Balance.Sums()[RRG_CV],Parm), Pr(Balance.Sums()[RRG_CS],Parm),
                                                Pr(Balance.Sums()[RRG_OR],Parm), Pr(Balance.Sums()[RRG_OV],Parm), Pr(Balance.Sums()[RRG_OS],Parm)
                           );

/*        [##### ############# ############# ############# ############# ############# ############# ############# ############# ############# ############# ############# ############# ] 23.01.2013 GSP по I-00309788-3 */
        [##### ################# ################# ################## ################# ################# ################## ################# ################# ################## ################# ################# ##################]
        ( balance.Balance(), Pr(Balance.Sums()[RRG_IR],Parm):r:0:0, Pr(Balance.Sums()[RRG_IV],Parm):r:0:0, Pr(Balance.Sums()[RRG_IS],Parm):r:0:0,
                             Pr(Balance.Sums()[RRG_DR],Parm):r:0:0, Pr(Balance.Sums()[RRG_DV],Parm):r:0:0, Pr(Balance.Sums()[RRG_DS],Parm):r:0:0,
                             Pr(Balance.Sums()[RRG_CR],Parm):r:0:0, Pr(Balance.Sums()[RRG_CV],Parm):r:0:0, Pr(Balance.Sums()[RRG_CS],Parm):r:0:0,
                             Pr(Balance.Sums()[RRG_OR],Parm):r:0:0, Pr(Balance.Sums()[RRG_OV],Parm):r:0:0, Pr(Balance.Sums()[RRG_OS],Parm):r:0:0
        );
    End;

    Macro ViewDOS( Parm : RRG_F101_Parm )

        file f() txt;

        Parm.Protocol.PrintLine("Печать завершена успешно.");
        Parm.Protocol.PrintLine("Нажмите ESC для просмотра отчета.");

        Parm.Protocol.View();

    End;

    Macro ViewExcel( Parm : RRG_F101_Parm )

        var path    = "",
            exlname = "";

        path = GetCurDir(false);

        if ( Parm.EndDate < Parm.Date1376 )
            exlname = "tmpl_101.xls";
        else
            exlname = "tmpl101b.xls";
        end;

        ExecMacroFile( "pr101_xl.mac", "PrintByFile", m_EE_EXP_FILE_NAME, exlname, РасчетВКопейках and (not Parm.PrintCop), path, parm.chapter);

    End;

    Macro View( Parm : RRG_F101_Parm )

        if ( Parm.kindView == 0 )
            ViewDOS( Parm );
        else
            ViewExcel( Parm );
        end;

    End;

    Constructor();

END;

class (Report101) Report101_2332()
    initReport101();

    private macro printTableHead()
/*        [─────┬─────────────────────────────────────────╥───────────────────────────────────────────────────────────────────────────────────╥─────────────────────────────────────────┐];
        [     │                                         ║                              Обороты за отчетный период                           ║                                         │];
        [Номер│            Входящие остатки             ╟─────────────────────────────────────────┬─────────────────────────────────────────╢            Исходящие остатки            │];
        [счета│                                         ║               по дебету                 │               по кредиту                ║                                         │];
        [вто- ├─────────────┬─────────────┬─────────────╫─────────────┬─────────────┬─────────────┼─────────────┬─────────────┬─────────────╫─────────────┬─────────────┬─────────────┤];
        [рого │  в рублях   │   ин.вал.,  │    итого    ║   в рублях  │   ин.вал.,  │    итого    │  в рублях   │   ин.вал.,  │    итого    ║   в рублях  │   ин.вал.,  │    итого    │];        23.01.2013 GSP по I-00309788-3
        [по-  │             │    драг.    │             ║             │    драг.    │             │             │    драг.    │             ║             │    драг.    │             │];
        [рядка│             │   металлы   │             ║             │   металлы   │             │             │   металлы   │             ║             │   металлы   │             │];
        [─────┼─────────────┼─────────────┼─────────────╫─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────╫─────────────┼─────────────┼─────────────┤];
        [  1  │      2      │      3      │      4      ║      5      │      6      │      7      │      8      │      9      │     10      ║      11     │     12      │     13      │];
        [─────┴─────────────┴─────────────┴─────────────╨─────────────┴─────────────┴─────────────┴─────────────┴─────────────┴─────────────╨─────────────┴─────────────┴─────────────┘];*/
        [─────┬──────────────────────────────────────────────────────╥─────────────────────────────────────────────────────────────────────────────────────────────────────────────╥──────────────────────────────────────────────────────┐];
        [     │                                                      ║                                         Обороты за отчетный период                                          ║                                                      │];
        [Номер│                  Входящие остатки                    ╟──────────────────────────────────────────────────────┬──────────────────────────────────────────────────────╢                  Исходящие остатки                   │];
        [счета│                                                      ║                        по дебету                     │                    по кредиту                        ║                                                      │];
        [вто- ├─────────────────┬─────────────────┬──────────────────╫─────────────────┬─────────────────┬──────────────────┼─────────────────┬─────────────────┬──────────────────╫─────────────────┬─────────────────┬──────────────────┤];
        [рого │    в рублях     │     ин.вал.,    │       итого      ║     в рублях    │     ин.вал.,    │      итого       │    в рублях     │     ин.вал.,    │       итого      ║     в рублях    │     ин.вал.,    │       итого      │];
        [по-  │                 │      драг.      │                  ║                 │      драг.      │                  │                 │      драг.      │                  ║                 │      драг.      │                  │];
        [рядка│                 │     металлы     │                  ║                 │     металлы     │                  │                 │     металлы     │                  ║                 │     металлы     │                  │];
        [─────┼─────────────────┼─────────────────┼──────────────────╫─────────────────┼─────────────────┼──────────────────┼─────────────────┼─────────────────┼──────────────────╫─────────────────┼─────────────────┼──────────────────┤];
        [  1  │        2        │        3        │         4        ║        5        │        6        │         7        │        8        │        9        │       10         ║        11       │       12        │        13        │];
        [─────┴─────────────────┴─────────────────┴──────────────────╨─────────────────┴─────────────────┴──────────────────┴─────────────────┴─────────────────┴──────────────────╨─────────────────┴─────────────────┴──────────────────┘];
    end;

    Macro ViewExcel( Parm : RRG_F101_Parm )

        var path    = "",
            exlname = "";

        path = GetCurDir(false);

        exlname = "tmpl101b_2332.xls";


        ExecMacroFile( "pr101_xl.mac", "PrintByFile", m_EE_EXP_FILE_NAME, exlname, РасчетВКопейках and (not Parm.PrintCop), path, parm.chapter);

    End;

end;

class RRG_F101_Report()

    private var m_report;

    private macro Constructor()
        if (rcbApplication.currentReport.context.period.endDate < RCB_I2332_DATE)
            m_report = Report101();
        else
            m_report = Report101_2332();
        end;
    End;

    macro getEE_EXP_FILE_NAME()
        return m_report.getEE_EXP_FILE_NAME();
    end;

    macro getEE_LOCAL_FILE_NAME()
        return m_report.getEE_LOCAL_FILE_NAME();
    end;

    Macro Pr( Value, Parm : RRG_F101_Parm )
        return m_report.Pr( Value, Parm);
    End;

    Macro PrintChapterName( Parm : RRG_F101_Parm )
        m_report.PrintChapterName(Parm);
    End;

    Macro PrintHead( Parm : RRG_F101_Parm )
        m_report.PrintHead(Parm);
    End;

    Macro PrintHeadActive( Parm : RRG_F101_Parm )
        m_report.PrintHeadActive(Parm);
    End;

    Macro PrintItogActive( Parm : RRG_F101_Parm, Itog : RRG_F101_Itog )
        m_report.PrintItogActive(Parm, Itog);
    End;

    Macro PrintHeadPassive( Parm : RRG_F101_Parm )
        m_report.PrintHeadPassive(Parm);
    End;

    Macro PrintItogPassive( Parm : RRG_F101_Parm, Itog : RRG_F101_Itog )
        m_report.PrintItogPassive(Parm, Itog);
    End;

    Macro PrintFoot( Parm : RRG_F101_Parm )
        m_report.PrintFoot(Parm);
    End;

    Macro ProcessBalance( Balance : RRG_F101_Balance, Parm : RRG_F101_Parm )
        m_report.ProcessBalance(Balance, Parm);
    End;

    Macro ViewDOS( Parm : RRG_F101_Parm )
        m_report.ViewDOS(Parm);
    End;

    Macro ViewExcel( Parm : RRG_F101_Parm )
        m_report.ViewExcel(Parm);
    End;

    Macro View( Parm : RRG_F101_Parm )
        m_report.View(Parm);
    End;

    Constructor();
end;

private
MACRO GetQuery( Chapter, BKind, BegDate, EndDate )

    Macro GetVarName( Suffix )
        return "'Бн' || TRANSLATE(bl.t_Balance,'.\\/','___') || " + GetSQLString(Suffix);
    End;

    Macro SelectString( ps )
        return "       CASE"                                                                                            + "\n" +
               "           WHEN    NVL(vd"+ps+".t_bdInclude," + GetSQLDate(Date(0,0,0)) + ") <= " + GetSQLDate(EndDate) + "\n" +
               "               AND NVL(vd"+ps+".t_bdExclude," + GetSQLDate(Date(0,0,0)) + ") >= " + GetSQLDate(BegDate) + "\n" +
               "               THEN 1 "                                                                                 + "\n" +
               "           ELSE 0 "                                                                                     + "\n" +
               "       END "+ps+"w, "                                                                                   + "\n" +
               "       vd"+ps+".t_cFormat "+ps+"f,"                                                                     + "\n" +
               "       mr"+ps+".t_mean1   "+ps+"1,"                                                                     + "\n" +
               "       mr"+ps+".t_mean2   "+ps+"2 ";
    End;

    Macro WhereString( ps, suff, begdate, enddate )
        return "       AND vd"+ps+".t_iFormId(+)               = " + 1                            + "\n" +
               "       AND vd"+ps+".t_szVarName(+)             = " + GetVarName(suff)             + "\n" +
               "       AND mr"+ps+".t_iNumDprt(+)              = " + НомерПодразделения           + "\n" +
               "       AND mr"+ps+".t_OrganizationStructure(+) = " + RcbOrganizationStructure     + "\n" +
               "       AND mr"+ps+".t_IssueMode(+)             = " + RcbIssueMode                 + "\n" +
               "       AND mr"+ps+".t_IsSummary(+)             = " + RcbSqlBool(RcbIsSummaryMode) + "\n" +
               "       AND mr"+ps+".t_bdRepDate(+)             = " + GetSQLDate(enddate)          + "\n" +
               "       AND mr"+ps+".t_bdPrevDate(+)            = DECODE(vd"+ps+".t_cDoubleDates, CHR(0),"+GetSQLDate(Date(0,0,0))+","+GetSQLDate(begdate)+")" + "\n"+
               "       AND mr"+ps+".t_iFormId(+)               = " + 1                            + "\n" +
               "       AND mr"+ps+".t_iVarId(+)                = vd"+ps+".t_iVarId";
    End;

    Macro GetIsAP()
        return "       DECODE(INSTR(bl.t_Kind_Account,"+GetSQLString(KA_AP)+"),0,0,1)";
    End;

    Macro GetFilterBKind()
        return "       INSTR(DECODE(bl.t_Kind_Account, " + GetSQLString(KA_0) + ", " + GetSQLString(KA_A) + ", bl.t_Kind_Account), " + GetSQLChar(BKind) + ") > 0";
    End;

    return "SELECT bl.t_Balance      Balance,"                                  + "\n" +
                   GetSQLChar(BKind)  + " BKind,"                               + "\n" +
                   GetIsAP()          + " isAP,"                                + "\n" +
                   SelectString("cs") + ","                                     + "\n" +
                   SelectString("cr") + ","                                     + "\n" +
                   SelectString("cp") + ","                                     + "\n" +
                   SelectString("ds") + ","                                     + "\n" +
                   SelectString("dr") + ","                                     + "\n" +
                   SelectString("dp") + ","                                     + "\n" +
                   SelectString("as") + ","                                     + "\n" +
                   SelectString("ar") + ","                                     + "\n" +
                   SelectString("ap") + ","                                     + "\n" +
                   SelectString("ps") + ","                                     + "\n" +
                   SelectString("pr") + ","                                     + "\n" +
                   SelectString("pp")                                           + "\n" +
           "FROM   dbalance_dbt  bl, "                                          + "\n" +
           "       dcy_varsd_dbt vdcs, dcy_varsd_dbt vdcr, dcy_varsd_dbt vdcp," + "\n" +
           "       dcy_varsd_dbt vdds, dcy_varsd_dbt vddr, dcy_varsd_dbt vddp," + "\n" +
           "       dcy_varsd_dbt vdas, dcy_varsd_dbt vdar, dcy_varsd_dbt vdap," + "\n" +
           "       dcy_varsd_dbt vdps, dcy_varsd_dbt vdpr, dcy_varsd_dbt vdpp," + "\n" +
           "       dcy_mreal_dbt mrcs, dcy_mreal_dbt mrcr, dcy_mreal_dbt mrcp," + "\n" +
           "       dcy_mreal_dbt mrds, dcy_mreal_dbt mrdr, dcy_mreal_dbt mrdp," + "\n" +
           "       dcy_mreal_dbt mras, dcy_mreal_dbt mrar, dcy_mreal_dbt mrap," + "\n" +
           "       dcy_mreal_dbt mrps, dcy_mreal_dbt mrpr, dcy_mreal_dbt mrpp " + "\n" +
           "WHERE      bl.t_Chapter         = " + Chapter                       + "\n" +
           "       AND bl.t_iNumPlan        = " + ПолучитьРеальныйНомерПлана()  + "\n" +
           "       AND " + GetFilterBKind()                                     + "\n" +
           "       AND INSTR(bl.t_Type_Balance," + GetSQLChar("1")   + ") = 0"  + "\n" +
           "       AND INSTR(bl.t_Type_Balance," + GetSQLChar("T")   + ") = 0"  + "\n" +
           "       AND bl.t_bdIncludeBwp <= " + getSqlDate(EndDate)             + "\n" +
           "       AND (    bl.t_bdExcludeBwp >= " + getSqlDate(BegDate)        + "\n" +
           "             OR bl.t_bdExcludeBwp <  bl.t_bdIncludeBwp)"            + "\n" +
                   WhereString("cs","__К", BegDate, EndDate)                    + "\n" +
                   WhereString("cr","РуК", BegDate, EndDate)                    + "\n" +
                   WhereString("cp","ПоК", BegDate, EndDate)                    + "\n" +
                   WhereString("ds","__Д", BegDate, EndDate)                    + "\n" +
                   WhereString("dr","РуД", BegDate, EndDate)                    + "\n" +
                   WhereString("dp","ПоД", BegDate, EndDate)                    + "\n" +
                   WhereString("as","__А", BegDate, EndDate)                    + "\n" +
                   WhereString("ar","РуА", BegDate, EndDate)                    + "\n" +
                   WhereString("ap","ПоА", BegDate, EndDate)                    + "\n" +
                   WhereString("ps","__П", BegDate, EndDate)                    + "\n" +
                   WhereString("pr","РуП", BegDate, EndDate)                    + "\n" +
                   WhereString("pp","ПоП", BegDate, EndDate)                    + "\n" +
           "ORDER BY bl.t_Balance";

END;

private
MACRO CheckForm()
    if ( {Название отчета} != FORM_NAME )
        RRG_F101_XThrow( RRG_F101_XError, String("Макрос реализован только для приложения \"",FORM_NAME,"\"") );
    end;
END;

private
MACRO ProcessBalances( parm : RRG_F101_Parm, BKind : String, Itog : RRG_F101_Itog, Report : RRG_F101_Report )

    Macro isPrint( Balance : RRG_F101_Balance )

        var stat : Bool = true;

        if ( stat )
            stat =    (parm.PrintKind == PRK_ALL)
                   or (parm.PrintKind == PRK_BWP) and     Balance.isWork()
                   or (parm.PrintKind == PRK_NOZ) and not Balance.isZero();
        end;

        if ( stat )
            stat =    (not Balance.isAP())
                   or ((Balance.Sums()[RRG_OR] >= 0) and (BKind == KA_A))
                   or ((Balance.Sums()[RRG_OR] >  0) and (BKind == KA_P));
        end;

        return stat;

    End;

    var dataSet = TRsbDataSet(GetQuery(parm.Chapter, BKind, parm.BegDate, parm.EndDate));

    var Balance;

    while( dataSet.moveNext() )

        if ( ПорядокБалансовогоСчета( dataSet.Balance ) != 3)
          continue;
        end;

        if (parm.Chapter != 5)
            Balance = RRG_F101_Balance( dataSet );
        else
            Balance = RRG_F1015_Balance( dataSet );
        end;

        Message("Обрабатывается балансовый счет: ", Balance.Balance(), " (" + BKind + ")");

        if ( isPrint(Balance) )
            Report.ProcessBalance( Balance, parm );

            Itog.AddB(Balance);
        end;
    end;

END;

private
MACRO PrintFormBody( parm : RRG_F101_Parm, Report : RRG_F101_Report )

    var Itog : RRG_F101_Itog;

    Report.PrintChapterName( parm );

    Itog = RRG_F101_Itog(parm);
    Report.PrintHeadActive( parm );
    ProcessBalances( parm, "А", Itog, Report );
    Report.PrintItogActive( parm, Itog );

    Itog = RRG_F101_Itog(parm);
    Report.PrintHeadPassive( parm );
    ProcessBalances( parm, "П", Itog, Report );
    Report.PrintItogPassive( parm, Itog );

END;

private
MACRO PrintFormPeriod( parm : RRG_F101_Parm, Report : RRG_F101_Report )

    var Chapter : Integer;

    Report.PrintHead( parm );

    if ( parm.Chapter == 0 )
        Chapter = 1;
        while( Chapter <= 5 )
            parm.Chapter = Chapter;
            PrintFormBody( parm, Report );
            Chapter = Chapter + 1;
        end;
        parm.Chapter = 0;
    else
        PrintFormBody( parm, Report );
    end;

    Report.PrintFoot( parm );

END;

private
MACRO PrintForm( Parm : RRG_F101_Parm, Report : RRG_F101_Report )

    var CurDate = Parm.BegDate;
    var BegDate = Parm.BegDate;
    var EndDate = Parm.EndDate;

    while ((not RcbIsWorkday(CurDate)) and (CurDate <= EndDate))
        CurDate = CurDate + 1;
    end;

    if ( CurDate > parm.EndDate )
        RRG_F101_XThrow( RRG_F101_XWarning, "В заданном отчетном периоде только выходные дни.|Отчет не сформирован." );
    end;

    if ( Parm.EveryDay )

        while( CurDate <= EndDate )
            parm.BegDate = CurDate;
            parm.EndDate = CurDate;

            PrintFormPeriod(parm,Report);

            CurDate = DateAfterWorkDays(CurDate,1);
        end;

    else
        PrintFormPeriod(Parm,Report);
    end;

    Parm.BegDate = BegDate;
    Parm.EndDate = EndDate;

END;

private
MACRO ExitCode( Parm : RRG_F101_Parm )
    if ( Parm.kindView == 0)
        return 0;
    else
        return 1;
    end;
END;

MACRO RRG_F101_Main( Chapter, Report : RRG_F101_Report )

    var Parm : RRG_F101_Parm;

    CheckForm();

    Parm = RRG_F101_Parm(Chapter);

    if (Parm.kindView >= 0)

        PrintForm(Parm,Report);

        Report.View(Parm);
    end;

    return ExitCode(Parm);

    OnError(err);
    RRG_F101_XCatch(err);
    return 1;

END;
