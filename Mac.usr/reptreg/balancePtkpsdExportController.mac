import ä†´•≠§†‡Ï;
private const PERIOD_DAY       = 1;
private const PERIOD_MONTH     = 5;
private const PERIOD_QUARTER   = 6;
private const PERIOD_HALF_YEAR = 8;

import RcbProtocolView;
import RcbPtkPsdView;

class TPtkPsdExportChapterController(view, chapter, head)

    private var m_view            = view;
    private var m_chapter         = chapter;
    private var m_applicationCode = head;
    private var m_stringCode;
    private var m_value;

    private var m_report = rcbApplication.currentReport;

    /**
     * íÆÁ≠Æ·‚Ï §´Ô £´†¢Î Ñ. 
     */
    private var m_precision;
    getRegistryValue("REPTREG/REP_GROUPS/BALANCE_ACCOUNTS/íéóçéëíú Ñãü ÉãÄÇõ Ñ", V_INTEGER, m_precision, null);

    private macro arrayInitialize()
        m_stringCode = TArray();
        m_value      = TArray();

        m_stringCode[m_stringCode.size] = "BS";
        m_stringCode[m_stringCode.size] = "AP";

        if (m_chapter != 5)
            m_stringCode[m_stringCode.size] = "I_SUM_R";
            m_stringCode[m_stringCode.size] = "I_SUM_V";
            m_stringCode[m_stringCode.size] = "I_SUMM";
            m_stringCode[m_stringCode.size] = "O_ACT_R";
            m_stringCode[m_stringCode.size] = "O_ACT_V";
            m_stringCode[m_stringCode.size] = "O_ACT";
            m_stringCode[m_stringCode.size] = "O_PAS_R";
            m_stringCode[m_stringCode.size] = "O_PAS_V";
            m_stringCode[m_stringCode.size] = "O_PAS";
            m_stringCode[m_stringCode.size] = "SUM_R";
            m_stringCode[m_stringCode.size] = "SUM_V";
            m_stringCode[m_stringCode.size] = "SUMM";
        else
            m_stringCode[m_stringCode.size] = "I_SUMM";
            m_stringCode[m_stringCode.size] = "O_ACT";
            m_stringCode[m_stringCode.size] = "O_PAS";
            m_stringCode[m_stringCode.size] = "SUMM";
        end;
    end;

    macro getValue(value)
        if (value == NULL)
            return 0;
        end;

        if (m_chapter == 5)
            return value.exact;
        else
            return value.scaledAsString;
        end;
    end;

    macro execute()
        var av = TBalanceAttribute("ÅÄãÄçë");

        av.createBalanceIterator(m_chapter, KIND_ALL, false, false);
        av.sortIteratorByBalance();

        var i;

        arrayInitialize();

        while (av.next())
            if (av.isNonZero(av.getValue()))
                m_value[0] = av.getBalance();
                m_value[1] = ternary(av.getKindBalance() == "è", "2", "1");

                i = 0;

                if (m_chapter != 5)

                    m_value[2 ] = getValue(av.getInRestNatCur());
                    m_value[3 ] = getValue(av.getInRestCur());
                    m_value[4 ] = getValue(av.getInRest());

                    m_value[5 ] = getValue(av.getDebetNatCur());
                    m_value[6 ] = getValue(av.getDebetCur());
                    m_value[7 ] = getValue(av.getDebet());

                    m_value[8 ] = getValue(av.getCreditNatCur());
                    m_value[9 ] = getValue(av.getCreditCur());
                    m_value[10] = getValue(av.getCredit());

                    m_value[11] = getValue(av.getOutRestNatCur());
                    m_value[12] = getValue(av.getOutRestCur());
                    m_value[13] = getValue(av.getOutRest());
                else
                    m_value[2] = getValue(av.getInRest());
                    m_value[3] = getValue(av.getDebet());
                    m_value[4] = getValue(av.getCredit());
                    m_value[5] = getValue(av.getOutRest());
                end;

                while (i < m_stringCode.size)

                    if (av != null)
                        if (m_chapter == 5)
                            m_view.printRow(m_applicationCode, av.getBalance(), m_stringCode[i], execExp("String(m_value[i]:0:" + m_precision + ")"));
                        else
                            m_view.printRow(m_applicationCode, av.getBalance(), m_stringCode[i], m_value[i]);
                        end;
                    end;

                    i=i+1;
                end;
            end;
        end;
    end;
end;

class TBalancePtkPsdExportController(dayly, chapter)

    private var m_ptkPsdExportChapterControllers = TArray();
    private var m_ptkPsdView;
    private var m_appCode;
    private var m_report;
    private var m_exportPtkPsdDate;
    private var m_precision;
    private var m_dayly   = dayly;
    private var m_chapter = chapter;


    getRegistryValue("REPTREG/REP_GROUPS/BALANCE_ACCOUNTS/ÑÄíÄ_ùäëèéêíÄ_èíä_èëÑ", V_INTEGER,  m_exportPtkPsdDate, null);
    getRegistryValue("REPTREG/REP_GROUPS/BALANCE_ACCOUNTS/íéóçéëíú Ñãü ÉãÄÇõ Ñ", V_INTEGER, m_precision, null);

    private macro getExportDate()
        var exportDate = m_report.context.period.endDate;

        if (m_exportPtkPsdDate == 0)
            return exportDate + 1;
        else
            exportDate = exportDate + 1;

            while (not isWorkDay(exportDate))
                exportDate = exportDate + 1;
            end;

            return exportDate;
        end;
    end;

    private macro constructor()
        m_report = balanceGlobal().getRcbReport();
        m_ptkPsdView = TPtkPsdView("101", getExportDate(), "rsansi");
        m_ptkPsdView.setOutputFile();

        /* DAI 28/10/2014 C-33831*/
        if (m_chapter == "ìè")
            m_appCode = "F101D";
        else
            m_appCode = "F101DV";
            if (m_report.context.period.kind == PERIOD_QUARTER)
                m_ptkPsdView.printRow("BALpr", "001", "1", "2");
                m_appCode = "BAL";
            elif (m_report.context.period.kind == PERIOD_HALF_YEAR)
                m_ptkPsdView.printRow("BALpr", "001", "1", "3");
                m_appCode = "BAL";
            elif (m_report.context.period.kind == PERIOD_MONTH)
                m_ptkPsdView.printRow("BALpr", "001", "1", "1");
                m_appCode = "BAL";
            end;
        end;


        m_ptkPsdExportChapterControllers[m_ptkPsdExportChapterControllers.size] = TPtkPsdExportChapterController(m_ptkPsdView, 1, m_appCode);
        m_ptkPsdExportChapterControllers[m_ptkPsdExportChapterControllers.size] = TPtkPsdExportChapterController(m_ptkPsdView, 2, m_appCode);
        m_ptkPsdExportChapterControllers[m_ptkPsdExportChapterControllers.size] = TPtkPsdExportChapterController(m_ptkPsdView, 3, m_appCode);
        m_ptkPsdExportChapterControllers[m_ptkPsdExportChapterControllers.size] = TPtkPsdExportChapterController(m_ptkPsdView, 4, m_appCode);
        m_ptkPsdExportChapterControllers[m_ptkPsdExportChapterControllers.size] = TPtkPsdExportChapterController(m_ptkPsdView, 5, m_appCode);
    end;

    macro execute()
        var i = 0;

        while ( i < m_ptkPsdExportChapterControllers.size)
            m_ptkPsdExportChapterControllers[i].execute();
            i = i + 1;
        end;

        m_ptkPsdView.resetOutputFile();

        var protocolView  = TProtocolView("èêéíéäéã ùäëèéêíÄ Ç èíä èëÑ");

        protocolView.setProtocolOutput();
        protocolView.printHead();

        protocolView.printLine("ù™·ØÆ‡‚®‡Æ¢†≠Æ ·‚‡Æ™: " + m_ptkPsdView.getRowsCount()());
        protocolView.printLine("î†©´ Ì™·ØÆ‡‚†: " + m_ptkPsdView.getFileName());

        protocolView.resetProtocolOutput();
        protocolView.show();
    end;

    constructor();
end;

„·‚†≠Æ¢®‚Ïî´†£ÇÆß¢‡†‚†(OK_MACRO_FLAG);
exit(1);
