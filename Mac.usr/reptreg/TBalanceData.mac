/*
$Name:          TBalanceData.mac
$Module:        Регламентируемая отчетность
$Description:   Фор. Класс получения данных баланса
*/

/*─────────────────────────────────────────────────────────────────────────────────────────────────┐
  RS-Bank V6                                                                        R-Style Softlab
  Файл подсистемы "Регламентируемая отчетность"

  Класс получения данных баланса

  Создан: 20.04.2007 - Ser.
└─────────────────────────────────────────────────────────────────────────────────────────────────*/

import balanceAttribute;

class TBalanceData()
    private var m_report            : Object = RcbApplication().currentReport;

    private var m_balanceReportPool = RcbArray();

    private var m_errorMesssage = "";

    private var m_isCalculated : Bool = null;

    local class TDataStruct(balance : String, restDate : Date, roubleRest : Money, currencyRest : Money, roubleScaledRest : Double, currencyScaledRest : Double)

        var m_balance            : String = balance;
        var m_restDate           : Date   = restDate;
        var m_roubleRest         : Money  = roubleRest;
        var m_roubleScaledRest   : Money  = roubleScaledRest;
        var m_currencyRest       : Money  = currencyRest;
        var m_currencyScaledRest : Money  = currencyScaledRest;

        macro getBalance()
            return m_balance;
        end;

        macro getRestDate()
            return m_restDate;
        end;

        macro getRoubleRest()
            return m_roubleRest;
        end;

        macro getRoubleScaledRest()
            return m_roubleScaledRest;
        end;

        macro getCurrencyRest()
            return m_currencyRest;
        end;

        macro getCurrencyScaledRest()
            return m_currencyScaledRest;
        end;
    end;

    private macro isWorkDate(day : Date) : Bool
        var serviceKind;
        var isBalance = false;
        var res;

        if (global.parameters.isCalendarWeekends())
            return isWorkDayBranch(day, m_report.context.departmentCode) == 1;
        else
            res = getDateAttr(day, serviceKind, isBalance, m_report.context.departmentCode);
            return isBalance;
        end;
    end;

    private macro createPreviouseBalanceReport(dimension)
        var context = m_report.context;
        var d, m, y;
        var prevEndDate;
        var prevBeginDate;
        var balanceReport;

        prevEndDate = global.parameters.getBeginDate() - 1;
        DateSplit(prevEndDate, d, m, y);
        prevBeginDate = Date(1, m, y);

        DateSplit(global.parameters.getBeginDate(), d, m, y);

        var dataset = TRsbDataset("SELECT t_bdPrevDate AS t_beginDate,"
                         + "\n" + "       t_bdRepDate  AS t_endDate"
                         + "\n" + "  FROM dcy_rdate_dbt rdate,"
                         + "\n" + "       dcy_forms_dbt forms"
                         + "\n" + " WHERE forms.t_szFormName  = 'Балансовые счета'"
                         + "\n" + "   AND rdate.t_organizationStructure = " + context.organizationStructure
                         + "\n" + "   AND rdate.t_issueMode   = " + context.issueMode
                         + "\n" + "   AND rdate.t_isSummary   = " + rcbSqlBool(context.isSummaryMode)
                         + "\n" + "   AND rdate.t_iFormId     = forms.t_iFormId"
                         + "\n" + "   AND rdate.t_iNumDprt    = " + context.departmentCode
                         + "\n" + "   AND rdate.t_cVarKind    = CHR(0)"
                         + "\n" + "   AND rdate.t_bdRepDate   = " + getSqlDate(context.period.beginDate - 1)
                         //если отчетный период месяц или ДНОП является первым днем месяца и ДООП не является последним днем месяца - ищем баланс за месяц,
                         //если нет - любой баланс с ДООП = (ДНОП ФОР) - 1
                         + "\n" + ternary(   global.reportingPeriodIsEqualMonth
                                          or (global.parameters.isBeginDateFallsOnFirstDayInMonth() and not global.parameters.isEndDateFallsOnLastDayInMonth()),
                                          "   AND rdate.t_bdPrevDate  = " + getSqlDate(prevBeginDate),
                                          "")
                         + "\n" + " ORDER BY t_bdPrevDate ASC");

        dataset.setFieldType("beginDate", V_DATE);
        dataset.setFieldType("endDate",   V_DATE);

        while (dataset.next())
            balanceReport = rcbApplication.objectFactory.createReport("Балансовые счета", RcbReportContext(RcbPeriod(Date(dataset.beginDate),
                                                                                                                     Date(dataset.endDate)),
                                                                                                           context.departmentCode,
                                                                                                           context.issueMode,
                                                                                                           context.organizationStructure,
                                                                                                           context.isSummaryMode));
            //if (TBaseBalanceAttribute("БАЛАНС", balanceReport).isBalanceCalculated(1, dimension)) //Gurin S. 09.02.2016
            if (TBaseBalanceAttribute("БАЛАНС", balanceReport).isCalculated(1, dimension))
                return balanceReport;
            end;
        end;

        return rcbApplication.objectFactory.createReport("Балансовые счета", RcbReportContext(RcbPeriod(ternary(    global.reportingPeriodIsEqualMonth
                                                                                                                or (global.parameters.isBeginDateFallsOnFirstDayInMonth() and not global.parameters.isEndDateFallsOnLastDayInMonth()),
                                                                                                                prevBeginDate,
                                                                                                                Date(0, 0, 0)
                                                                                                               ),
                                                                                                        prevEndDate),
                                                                                              context.departmentCode,
                                                                                              context.issueMode,
                                                                                              context.organizationStructure,
                                                                                              context.isSummaryMode));
    end;

    private macro initializeBalanceReportPool()
        var dateCount = ternary(global.reportingPeriodIsEqualMonth == true,
                                global.parameters.getPeriod().daysQuantity,
                                global.parameters.getPeriod().daysQuantity + 1);    //если период рассчета ФОР != месяц, то создаем баланс за каждый рабочий день (включаяя ДООП)
        var i = 0;
        var d, m, y;
        var beginDate;

        var context      = null;
        var currentDate  = null;
        var report       = null;
        var br;

        while (i < dateCount)
            currentDate = global.parameters.getBeginDate() + i;
            // 29.05.2014 ABP Балансы формируем за каждый день отчетного периода, кроме последнего дня
            context = RcbReportContext(RcbPeriod(currentDate, currentDate),
                                       m_report.context.departmentCode,
                                       m_report.context.issueMode,
                                       m_report.context.organizationStructure,
                                       m_report.context.isSummaryMode);

            report = RcbApplication().objectFactory.createReport(m_report.form.id, context);
            m_balanceReportPool.push_back(report.createOtherReport("Балансовые счета"));

            i = i + 1;
        end;

        //если отчетный период == месяц, то создаем баланс с ДНОП по ДООП
        if (global.reportingPeriodIsEqualMonth)
            br = m_report.createOtherReport("Балансовые счета");
            m_balanceReportPool.push_back(br);
        //если ДООП - последний день месяца, то создаем баланс с 1-го числа по ДООП
        elif (    global.parameters.isEndDateFallsOnLastDayInMonth()
              and not global.parameters.isBeginDateFallsOnFirstDayInMonth())

            DateSplit(global.parameters.getBeginDate(), d, m, y);
            beginDate = Date(1, m, y);
            context = RcbReportContext(RcbPeriod(beginDate, global.parameters.getEndDate()),
                                       m_report.context.departmentCode,
                                       m_report.context.issueMode,
                                       m_report.context.organizationStructure,
                                       m_report.context.isSummaryMode);
            report = RcbApplication().objectFactory.createReport(m_report.form.id, context);
            m_balanceReportPool.push_back(report.createOtherReport("Балансовые счета"));
        end;

        //создаем баланс за предыдущий период (месяц или не месяц)
        m_balanceReportPool.push_back(createPreviouseBalanceReport(m_report.dimension));
    end;

    macro isCalculated()
        if (m_isCalculated != null)
            return m_isCalculated;
        end;

        if (m_balanceReportPool.isEmpty())
            initializeBalanceReportPool();
        end;

        m_isCalculated = true;

        m_balanceReportPool.moveFirst();
        while (m_balanceReportPool.moveNext())
            // 29.05.2014 ABP Проверяем рассчитанность балансов для периода, равного периоду расчета ФОР
            //                и периода, примыкающего к периоду расчета ФОР
            // сюда же попадет проверка рассчитанности баланса за ДООП при условии период расчета != месяц
            if (in(m_balanceReportPool.getCurrentItem().context.period.endDate,
                   m_report.context.period.beginDate - 1,
                   m_report.context.period.endDate
                  )
               )
                if (not m_balanceReportPool.getCurrentItem().isCalculated())
                    m_errorMesssage = "Отсутствует рассчитанная форма \"Балансовые счета\" за период "
                                      + ternary(m_balanceReportPool.getCurrentItem().context.period.beginDate != Date(0, 0, 0),
                                                "с " + String(m_balanceReportPool.getCurrentItem().context.period.beginDate:f) + " ",   //вариант: период рассчета == месяц, баланса нет
                                                ""                                                                                      //вариант: период рассчета != месяц, баланса нет
                                               )
                                      + "по " + String(m_balanceReportPool.getCurrentItem().context.period.endDate:f);
                    m_isCalculated = false;
                    break;
                end;
            else
                // 29.05.2014 ABP Проверяем рассчитанность балансов для каждого рабочего (с точки зрения алгоритма ФОР) дня
                //                периода, кроме последнего дня
                if (not isWorkDate(m_balanceReportPool.getCurrentItem().context.period.endDate))
                    continue;
                end;

                if (not m_balanceReportPool.getCurrentItem().isCalculated())
                    m_errorMesssage = "Отсутствует рассчитанная форма \"Балансовые счета\" за "
                                     + String(m_balanceReportPool.getCurrentItem().context.period.endDate:f);
                    m_isCalculated = false;
                    break;
                end;
            end;
        end;

        return m_isCalculated;
    end;

    macro hasData(inRestDate : Date) : bool
        m_balanceReportPool.moveFirst();
        while (m_balanceReportPool.moveNext())
            if ((m_balanceReportPool.getCurrentItem().context.period.endDate == inRestDate - 1) and (m_balanceReportPool.getCurrentItem().isCalculated()))
                return true;
            end;
        end;

        return false;
    end;

    macro getErrorMessage()
        return m_errorMesssage;
    end;

    private macro getBalanceReport(outRestDate : Date) : RcbReport
        if (m_balanceReportPool.isEmpty())
            initializeBalanceReportPool();
        end;

        m_balanceReportPool.moveFirst();
        while (m_balanceReportPool.moveNext())
            if (m_balanceReportPool.getCurrentItem().context.period.endDate == outRestDate)
                return m_balanceReportPool.getCurrentItem();
            end;
        end;

        return null;
    end;

    macro getBalanceReports()
        if (isCalculated())
            var result = TArray(m_balanceReportPool.size);

            m_balanceReportPool.moveFirst();
            while (m_balanceReportPool.moveNext())
                result[result.size] = m_balanceReportPool.getCurrentItem();
            end;

            return result;
        end;

        return null;
    end;

    macro getValues(balance : String, inRestDate : Date)

        var roubleRest           : Money  = $0.0;
        var roubleScaledRest     : Double = 0.0;
        var currencyRest         : Money  = $0.0;
        var currencyScaledRest   : Double = 0.0;
        var currencyDebet        : Money  = $0.0;
        var scaledCurrencyDebet  : Double = 0.0;
        var currencyCredit       : Money  = $0.0;
        var scaledCurrencyCredit : Double = 0.0;
        var roubleDebet          : Money  = $0.0;
        var scaledRoubleDebet    : Double = 0.0;
        var roubleCredit         : Money  = $0.0;
        var scaledRoubleCredit   : Double = 0.0;

        var balanceAttribute;
        var attributeValueA : Object = NULL;
        var attributeValueP : Object = NULL;
        var balanceReport;

        while (inRestDate > m_report.context.period.beginDate)
            if (hasData(inRestDate))
                break;
            else
                inRestDate = inRestDate - 1;
            end;
        end;
        balanceReport = getBalanceReport(inRestDate - 1);

        if (isCalculated() and (balanceReport != null))

            balanceAttribute = TBalanceAttribute("БАЛАНС",  balanceReport);
            balanceAttribute.getBalanceAttribute(1, balance, false);

            if (balanceAttribute.getKindBalance() == "П")
                attributeValueP = balanceAttribute.getOutRestPassive();
            else
                attributeValueA = balanceAttribute.getOutRestActive();
            end;

            if   (attributeValueA != NULL)
                currencyRest       = balanceAttribute.getOutRestCurActive().exact;
                currencyScaledRest = balanceAttribute.getOutRestCurActive().scaled;
                roubleRest         = balanceAttribute.getOutRestNatCurActive().exact;
                roubleScaledRest   = balanceAttribute.getOutRestNatCurActive().scaled;
            elif (attributeValueP != NULL)
                currencyRest       = balanceAttribute.getOutRestCurPassive().exact;
                currencyScaledRest = balanceAttribute.getOutRestCurPassive().scaled;
                roubleRest         = balanceAttribute.getOutRestNatCurPassive().exact;
                roubleScaledRest   = balanceAttribute.getOutRestNatCurPassive().scaled;
            else
                /*Если переменная не найдена, то возвращаем нулевые значения*/
                return TDataStruct(balance, inRestDate, roubleRest, currencyRest, roubleScaledRest, currencyScaledRest);
            end;

            currencyDebet        = balanceAttribute.getDebetCur().exact;
            scaledCurrencyDebet  = balanceAttribute.getDebetCur().scaled;

            currencyCredit       = balanceAttribute.getCreditCur().exact;
            scaledCurrencyCredit = balanceAttribute.getCreditCur().scaled;

            roubleDebet          = balanceAttribute.getDebetNatCur().exact;
            scaledRoubleDebet    = balanceAttribute.getDebetNatCur().scaled;

            roubleCredit         = balanceAttribute.getCreditNatCur().exact;
            scaledRoubleCredit   = balanceAttribute.getCreditNatCur().scaled;
        end;

        return TDataStruct(balance, inRestDate, roubleRest, currencyRest, roubleScaledRest, currencyScaledRest);
    end;
end;

/*Создаем единственный экземпляр класса*/
global.balanceData = TBalanceData();
