 //06.03.2015 I-00554888-2 DPN Расширил колонки, не помещались значения

import rcbimport;
import balanceAttribute;
import balanceReportParameters;

/**
 * Класс представления отчетной формы.
 */
class (RcbReportView) TApplication13ReportView()
    private var m_tableReport;
    private var reportWidth;
    private var m_planNumber;

    /**
     * Номер текущей главы.
     */
    private var m_chapter: Integer;

    /**
     * Точность для главы Д.
     */
    private var m_precisionChapter5   : Integer;

    private macro constructorTApplication13ReportView()
        initRcbReportView("",
                          "",
                          RCB_PK_PERIOD,
                          DATE_IN_PERIOD_FORMAT
                         );


        m_tableReport = CTableReport(1, false, false);
        //06.03.2015 I-00554888-2 DPN

        m_tableReport.addColumn( "", 20, AL_LEFT );    /* Номер счета первого порядка */
        m_tableReport.addColumn( "", 5,  AL_RIGHT  );    /* Номер счета второго порядка */
        m_tableReport.addColumn( "", 18, AL_RIGHT );    /* Входящие остатки на 1 января нового года в рублях*/
        m_tableReport.addColumn( "", 18, AL_RIGHT );    /* Входящие остатки на 1 января нового года в валюте*/
        m_tableReport.addColumn( "", 18, AL_RIGHT );    /* Входящие остатки на 1 января нового года Итого*/
        m_tableReport.addColumn( "", 18, AL_RIGHT );    /* Обороты по отражению событий после отчетной даты (СПОД) по дебету в рублях*/
        m_tableReport.addColumn( "", 18, AL_RIGHT );    /* Обороты по отражению событий после отчетной даты (СПОД) по дебету в валюте*/
        m_tableReport.addColumn( "", 18, AL_RIGHT );    /* Обороты по отражению событий после отчетной даты (СПОД) по дебету Итого*/
        m_tableReport.addColumn( "", 18, AL_RIGHT );    /* Обороты по отражению событий после отчетной даты (СПОД) по кредиту в рублях*/
        m_tableReport.addColumn( "", 18, AL_RIGHT );    /* Обороты по отражению событий после отчетной даты (СПОД) по кредиту в валюте*/
        m_tableReport.addColumn( "", 18, AL_RIGHT );    /* Обороты по отражению событий после отчетной даты (СПОД) по кредиту Итого*/
        m_tableReport.addColumn( "", 18, AL_RIGHT );    /* Исходящие остатки с учетом событий после отчетной даты (СПОД) в рублях*/
        m_tableReport.addColumn( "", 18, AL_RIGHT );    /* Исходящие остатки с учетом событий после отчетной даты (СПОД) в валюте*/
        m_tableReport.addColumn( "", 18, AL_RIGHT );    /* Исходящие остатки с учетом событий после отчетной даты (СПОД) Итого*/


        reportWidth = m_tableReport.getSumLen();
        setReportWidth(reportWidth);

        m_planNumber = balanceParameters().getPlanNumber();

        m_precisionChapter5 = balanceParameters().getPrecisionChapter5();
    end;

    /**
     * Указать точность для значения.
     * Количество знаков после запятой считывается из настройки реестра для главы Д.
     * @param value Значение, для которого применяем точность.
     * @return Если глава Д, то значение с изменненной точность, иначе точность не меняется.
     */
    private macro changePrecision(value)
        if (valType(value) == V_UNDEF)
            value = 0;
        end;

        if ((m_chapter == 5) AND (value != ""))
            return execExp("String(" + value + ":0:" + m_precisionChapter5 + ")");
        else
            return value;
        end;
    end;

    macro printTableBottom()
        m_tableReport.printBottom();
        println();
    end;

    macro printFreeString(str)
        m_tableReport.printFreeString(str);
    end;

    macro printNamesZone()
    end;

    macro printLendingAgencyCodeZone()
        /*_____________________________________________________________________________________*/
        var bankName = TArray();
        var i;
        /*_____________________________________________________________________________________*/

        [#]( strAlign( "                           Приложение 13   ", ReportWidth, STR_ALIGN_RIGHT ));
        [#]( strAlign( " к Правилам ведения бухгалтерского учета   ", ReportWidth, STR_ALIGN_RIGHT ));
        [#]( strAlign( " в кредитных организациях, расположенных   ", ReportWidth, STR_ALIGN_RIGHT ));
        [#]( strAlign( " на территории Российской Федерации        ", ReportWidth, STR_ALIGN_RIGHT ));
        [#]( strAlign( "                                           ", ReportWidth, STR_ALIGN_RIGHT ));
        [#]( strAlign( " (Приложение к Положению Банка России      ", ReportWidth, STR_ALIGN_RIGHT ));
        [#]( strAlign( " от 16 июля 2012 года N 385-П              ", ReportWidth, STR_ALIGN_RIGHT ));
        [#]( strAlign( "\"О правилах ведения бухгалтерского учета  ", ReportWidth, STR_ALIGN_RIGHT ));
        [#]( strAlign( " в кредитных организациях, расположенных   ", ReportWidth, STR_ALIGN_RIGHT ));
        [#]( strAlign( "на территории Российской Федерации\")      ", ReportWidth, STR_ALIGN_RIGHT ));
        [ ];

        /*________________________________________________________________________________________*/
        PrintBankHeaderBuf(НомерПодразделения,
                     RcbOrganizationStructure,
                                 ReportWidth,
                                     bankName,
                                            0);

        i = 0;
        while(i < bankName.Size())
          [#]( strAlign(bankName[i], ReportWidth, STR_ALIGN_CENTER) );
          i = i+1;
        end;

        [ ];
        /*________________________________________________________________________________________*/
        var periodName = RcbReportView("", "", RcbArray().initialize(RCB_PK_DAY, RCB_PK_MONTH, RCB_PK_QUARTER, RCB_PK_HALFYEAR, RCB_PK_PERIOD), DATE_IN_PERIOD_FORMAT).getNamesZone().getPeriodName();

        [#]( strAlign( "Сводная ведомость оборотов по отражению", ReportWidth, STR_ALIGN_CENTER ) );
        [#]( strAlign( "событий после отчетной даты", ReportWidth, STR_ALIGN_CENTER ) );
        [#]( strAlign( periodName, ReportWidth, STR_ALIGN_CENTER ) );
    end;

    macro printSignatureZone()
        m_tableReport.printFreeString("");
        m_tableReport.printFreeString({Name_Boss} + " _____________________ " + {FIO_Boss} + "\t" +
                                      {Name_Book} + " _____________________ " + {FIO_Book} );
    end;
 //06.03.2015 I-00554888-2 DPN
    macro printTableHeader()
        [ ┌──────────────────────────────┬──────────────────────────────────────────────────────────────┬─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┬──────────────────────────────────────────────────────────────┐];
        [ │                              │                                                              │                                   Обороты по отражению событий после отчетной даты (СПОД)                                   │            Исходящие остатки с учетом событий                │];
        [ │         Номер счета          │         Входящие остатки на 1 января нового года             ├──────────────────────────────────────────────────────────────┬──────────────────────────────────────────────────────────────┤                после отчетной даты (СПОД)                    │];
        [ │                              │                                                              │                          по дебету                           │                       по кредиту                             │                                                              │];
        [ ├──────────────────────┬───────┼────────────────────┬────────────────────┬────────────────────┼────────────────────┬────────────────────┬────────────────────┼────────────────────┬────────────────────┬────────────────────┼────────────────────┬────────────────────┬────────────────────┤];
        [ │   первого порядка    │второго│      в рублях      │    иностранная     │       итого        │      в рублях      │    иностранная     │        итого       │      в рублях      │    иностранная     │        итого       │      в рублях      │    иностранная     │        итого       │];
        [ │                      │порядка│                    │       валюта       │                    │                    │       валюта       │                    │                    │       валюта       │                    │                    │       валюта       │                    │];
        [ │                      │       │                    │     в рублевом     │                    │                    │     в рублевом     │                    │                    │     в рублевом     │                    │                    │     в рублевом     │                    │];
        [ │                      │       │                    │    эквиваленте     │                    │                    │    эквиваленте     │                    │                    │    эквиваленте     │                    │                    │    эквиваленте     │                    │];
        [ ├──────────────────────┼───────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┤];
        [ │         1            │   2   │          3         │          4         │          5         │          6         │          7         │          8         │            9       │         10         │         11         │          12        │          13        │          14        │];
        [ ├──────────────────────┼───────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┤];
    end;

    macro printSeparator()
        // m_tableReport.PrintSeparator();
    end;

    macro printTableString(balanceOrder, balance, _inR, _inV, _inItog, _dtRub, _dtCur, _dtItog, _ktRub, _ktCur, _ktItog, _outR, _outV, _outItog)
        var balance1, balance2;

        var inR     = changePrecision(_inR);
        var inV     = changePrecision(_inV);
        var inItog  = changePrecision(_inItog);
        var dtRub   = changePrecision(_dtRub);
        var dtCur   = changePrecision(_dtCur);
        var dtItog  = changePrecision(_dtItog);
        var ktRub   = changePrecision(_ktRub);
        var ktCur   = changePrecision(_ktCur);
        var ktItog  = changePrecision(_ktItog);
        var outR    = changePrecision(_outR);
        var outV    = changePrecision(_outV);
        var outItog = changePrecision(_outItog);

        if (balanceOrder == 1)
            m_tableReport.PrintStringTransferByWord("ИТОГО по счету первого порядка:");
            balance1 = balance;
            balance2 = "";
        else
            m_tableReport.PrintStringTransferByWord("ИТОГО по счету второго порядка:");
            balance1 = "";
            balance2 = balance;
        end;

        m_tableReport.PrintStringTransferByWord(balance1, balance2, inR, inV, inItog, dtRub, dtCur, dtItog, ktRub, ktCur, ktItog, outR, outV, outItog);
        printSeparator();
    end;

    macro printItog(nameItog, _inR, _inV, _inItog, _dtRub, _dtCur, _dtItog, _ktRub, _ktCur, _ktItog, _outR, _outV, _outItog)

        var inR     = changePrecision(_inR);
        var inV     = changePrecision(_inV);
        var inItog  = changePrecision(_inItog);
        var dtRub   = changePrecision(_dtRub);
        var dtCur   = changePrecision(_dtCur);
        var dtItog  = changePrecision(_dtItog);
        var ktRub   = changePrecision(_ktRub);
        var ktCur   = changePrecision(_ktCur);
        var ktItog  = changePrecision(_ktItog);
        var outR    = changePrecision(_outR);
        var outV    = changePrecision(_outV);
        var outItog = changePrecision(_outItog);
debugbreak;
        m_tableReport.PrintStringTransferByWord(nameItog);
        m_tableReport.PrintStringTransferByWord("", "", inR, inV, inItog, dtRub, dtCur, dtItog, ktRub, ktCur, ktItog, outR, outV, outItog);
        printSeparator();
    end;

    macro printKindHeader(kind)
        m_tableReport.PrintStringTransferByWord(kind);
        m_tableReport.PrintStringTransferByWord("");
    end;

    macro getValue(value, chapter)
        if (value == NULL)
            return 0;
        end;

        return value.exact;
    end;

    private macro GetPartitionName(chapter, partition)
        var query = " SELECT T_NAME_PART   "  +
                    "   FROM DPARTBLNC_DBT "  +
                    "  WHERE T_CHAPTER  =  " + chapter +
                    "    AND T_INUMPLAN =  " + m_planNumber +
                    "    AND T_PART     =  " + partition;

        var dataset = TRsbDataSet(query);

        dataset.moveNext();

        return dataset.name_part;
    end;

    macro printChapter(chapter/*, chapterName*/)
        var av = TApplication13Attribute("ПРИЛОЖЕНИЕ13");
        var currentPart : Integer;
        var sIn, sInR, sInV, sD, sDr, sDv, sK, sKr, sKv, sOut, sOutR, sOutV;
        var sPartIn, sPartInR, sPartInV, sPartD, sPartDr, sPartDv, sPartK, sPartKr, sPartKv, sPartOut, sPartOutR, sPartOutV;
        var sKindIn, sKindInR, sKindInV, sKindD, sKindDr, sKindDv, sKindK, sKindKr, sKindKv, sKindOut, sKindOutR, sKindOutV;
        var curIn, curInR, curInV, curD, curDr, curDv, curK, curKr, curKv, curOut, curOutR, curOutV;
        var balanceOrder;
        var onlyBwp = false;
        var onlyNonZero = false;

        if (balanceParameters().getPrintFormBalance() == 1)
            onlyBwp = true;
        elif(balanceParameters().getPrintFormBalance() == 2)
            onlyNonZero = true;
        end;

        m_chapter = chapter;

        av.createBalanceIterator(chapter, KIND_ACTIVE, true, onlyNonZero, onlyBwp);
        // av.sortIteratorByPart();

        sIn = 0; sInR = 0; sInV = 0; sD = 0; sDr = 0; sDv = 0; sK = 0; sKr = 0; sKv = 0; sOut = 0; sOutR = 0; sOutV = 0;
        sKindIn = 0; sKindInR = 0; sKindInV = 0; sKindD = 0; sKindDr = 0; sKindDv = 0; sKindK = 0; sKindKr = 0; sKindKv = 0; sKindOut = 0; sKindOutR = 0;sKindOutV = 0;
        sPartIn = 0; sPartInR = 0; sPartInV = 0; sPartD = 0; sPartDr = 0; sPartDv = 0; sPartK = 0; sPartKr = 0; sPartKv = 0; sPartOut = 0; sPartOutR = 0; sPartOutV = 0;
        currentPart = 0;

        printKindHeader("Актив");
        while (av.next())
         //DPN I-00591683-2
            if((substr(av.getBalance(), 1,3) == "706") or (substr(av.getBalance(), 1,3) == "707"))
                debugbreak;
                curInR = getValue(av.getRestInNatCur(), chapter) + getValue(av.getRestInCur(), chapter);
                curInV = 0;
                
                curDr  = getValue(av.getDebetNatCur(), chapter) + getValue(av.getDebetCur(), chapter);
                curDv  = 0;
                
                curKr  = getValue(av.getCreditNatCur(), chapter) + getValue(av.getCreditCur(), chapter);
                curKv  = 0;
                
                curOutR = getValue(av.getRestOutNatCur(), chapter) + getValue(av.getRestOutCur(), chapter);
                curOutV = 0;
            else
                curInR = getValue(av.getRestInNatCur(), chapter);
                curInV = getValue(av.getRestInCur(), chapter);
                
                curDr  = getValue(av.getDebetNatCur(), chapter);
                curDv  = getValue(av.getDebetCur(), chapter);
                
                curKr  = getValue(av.getCreditNatCur(), chapter);
                curKv  = getValue(av.getCreditCur(), chapter);
                
                curOutR = getValue(av.getRestOutNatCur(), chapter);
                curOutV = getValue(av.getRestOutCur(), chapter);
                
            end;
            curIn  = getValue(av.getRestIn(), chapter);
            curD   = getValue(av.getDebet(), chapter);
            curK   = getValue(av.getCredit(), chapter);
            curOut = getValue(av.getRestOut(), chapter);
            balanceOrder = ternary(strLen(av.getBalance()) == 3, 1, 2);

            if ((av.getPart().exact != currentPart) and (balanceOrder == 2))
                if (currentPart > 0)
                    printItog("ИТОГО по разделу " + currentPart, sPartInR, sPartInV, sPartIn, sPartDr, sPartDv,  sPartD, sPartKr, sPartKv, sPartK, sPartOutR, sPartOutV, sPartOut);
                end;

                currentPart = av.getPart().exact;
                printSeparator();
                sPartInR = 0; sPartInV = 0; sPartIn = 0; sPartD = 0; sPartDr = 0; sPartDv = 0; sPartK = 0; sPartKr = 0; sPartKv = 0; sPartOutR = 0; sPartOutV = 0; sPartOut = 0;
            end;

            printTableString(balanceOrder, av.getBalance(), curInR, curInV, curIn, curDr, curDv, curD, curKr, curKv, curK, curOutR, curOutV, curOut);

            if (balanceOrder == 2)
                sInR  = sInR  + curInR;
                sInV  = sInV  + curInV;
                sIn  = sIn  + curIn;
                sDr  = sDr  + curDr;
                sDv  = sDv  + curDv;
                sD   = sD   + curD;
                sKr  = sKr  + curKr;
                sKv  = sKv  + curKv;
                sK   = sK   + curK;
                sOutR = sOutR + curOutR;
                sOutV = sOutV + curOutV;
                sOut = sOut + curOut;

                sKindInR  = sKindInR  + curInR;
                sKindInV  = sKindInV  + curInV;
                sKindIn  = sKindIn  + curIn;
                sKindDr  = sKindDr  + curDr;
                sKindDv  = sKindDv  + curDv;
                sKindD   = sKindD   + curD;
                sKindKr  = sKindKr  + curKr;
                sKindKv  = sKindKv  + curKv;
                sKindK   = sKindK   + curK;
                sKindOutR = sKindOutR + curOutR;
                sKindOutV = sKindOutV + curOutV;
                sKindOut = sKindOut + curOut;

                sPartInR  = sPartInR  + curInR;
                sPartInV  = sPartInV  + curInV;
                sPartIn  = sPartIn  + curIn;
                sPartDr  = sPartDr  + curDr;
                sPartDv  = sPartDv  + curDv;
                sPartD   = sPartD   + curD;
                sPartKr  = sPartKr  + curKr;
                sPartKv  = sPartKv  + curKv;
                sPartK   = sPartK   + curK;
                sPartOutR = sPartOutR + curOutR;
                sPartOutV = sPartOutV + curOutV;
                sPartOut = sPartOut + curOut;
            end;
        end;

        printItog("ИТОГО по разделу " + currentPart, sPartInR, sPartInV, sPartIn, sPartDr, sPartDv,  sPartD, sPartKr, sPartKv, sPartK, sPartOutR, sPartOutV, sPartOut);
        printItog("ИТОГО по активу: ", sKindInR, sKindInV, sKindIn, sKindDr, sKindDv,  sKindD, sKindKr, sKindKv, sKindK, sKindOutR, sKindOutV, sKindOut);

        av.createBalanceIterator(chapter, KIND_PASSIVE, true, onlyNonZero, onlyBwp);
        // av.sortIteratorByPart();

        sIn = 0; sInR = 0; sInV = 0; sD = 0; sDr = 0; sDv = 0; sK = 0; sKr = 0; sKv = 0; sOut = 0; sOutR = 0; sOutV = 0;
        sKindIn = 0; sKindInR = 0; sKindInV = 0; sKindD = 0; sKindDr = 0; sKindDv = 0; sKindK = 0; sKindKr = 0; sKindKv = 0; sKindOut = 0; sKindOutR = 0;sKindOutV = 0;
        sPartIn = 0; sPartInR = 0; sPartInV = 0; sPartD = 0; sPartDr = 0; sPartDv = 0; sPartK = 0; sPartKr = 0; sPartKv = 0; sPartOut = 0; sPartOutR = 0; sPartOutV = 0;
        currentPart = 0;

        printKindHeader("Пассив");
        //DPN I-00591683-2
        while (av.next())
            if((substr(av.getBalance(), 1,3) == "706") or (substr(av.getBalance(), 1,3) == "707"))
                debugbreak;
                curInR = getValue(av.getRestInNatCur(), chapter) + getValue(av.getRestInCur(), chapter);
                curInV = 0;
                
                curDr  = getValue(av.getDebetNatCur(), chapter) + getValue(av.getDebetCur(), chapter);
                curDv  = 0;
                
                curKr  = getValue(av.getCreditNatCur(), chapter) + getValue(av.getCreditCur(), chapter);
                curKv  = 0;
                
                curOutR = getValue(av.getRestOutNatCur(), chapter) + getValue(av.getRestOutCur(), chapter);
                curOutV = 0;
            else
                curInR = getValue(av.getRestInNatCur(), chapter);
                curInV = getValue(av.getRestInCur(), chapter);
                
                curDr  = getValue(av.getDebetNatCur(), chapter);
                curDv  = getValue(av.getDebetCur(), chapter);
                
                curKr  = getValue(av.getCreditNatCur(), chapter);
                curKv  = getValue(av.getCreditCur(), chapter);
                
                curOutR = getValue(av.getRestOutNatCur(), chapter);
                curOutV = getValue(av.getRestOutCur(), chapter);
                
            end;
            curIn  = getValue(av.getRestIn(), chapter);
            curD   = getValue(av.getDebet(), chapter);
            curK   = getValue(av.getCredit(), chapter);
            curOut = getValue(av.getRestOut(), chapter);

            balanceOrder = ternary(strLen(av.getBalance()) == 3, 1, 2);

            if ((av.getPart().exact != currentPart) and (balanceOrder == 2))
                if (currentPart > 0)
                    printItog("ИТОГО по разделу " + currentPart, sPartInR, sPartInV, sPartIn, sPartDr, sPartDv,  sPartD, sPartKr, sPartKv, sPartK, sPartOutR, sPartOutV, sPartOut);
                end;

                currentPart = av.getPart().exact;
                printSeparator();
                sPartInR = 0; sPartInV = 0; sPartIn = 0; sPartD = 0; sPartDr = 0; sPartDv = 0; sPartK = 0; sPartKr = 0; sPartKv = 0; sPartOutR = 0; sPartOutV = 0; sPartOut = 0;
            end;


            printTableString(balanceOrder, av.getBalance(), curInR, curInV, curIn, curDr, curDv, curD, curKr, curKv, curK, curOutR, curOutV, curOut);

            if (balanceOrder == 2)
                sInR  = sInR  + curInR;
                sInV  = sInV  + curInV;
                sIn  = sIn  + curIn;
                sDr  = sDr  + curDr;
                sDv  = sDv  + curDv;
                sD   = sD   + curD;
                sKr  = sKr  + curKr;
                sKv  = sKv  + curKv;
                sK   = sK   + curK;
                sOutR = sOutR + curOutR;
                sOutV = sOutV + curOutV;
                sOut = sOut + curOut;

                sKindInR  = sKindInR  + curInR;
                sKindInV  = sKindInV  + curInV;
                sKindIn  = sKindIn  + curIn;
                sKindDr  = sKindDr  + curDr;
                sKindDv  = sKindDv  + curDv;
                sKindD   = sKindD   + curD;
                sKindKr  = sKindKr  + curKr;
                sKindKv  = sKindKv  + curKv;
                sKindK   = sKindK   + curK;
                sKindOutR = sKindOutR + curOutR;
                sKindOutV = sKindOutV + curOutV;
                sKindOut = sKindOut + curOut;

                sPartInR  = sPartInR  + curInR;
                sPartInV  = sPartInV  + curInV;
                sPartIn  = sPartIn  + curIn;
                sPartDr  = sPartDr  + curDr;
                sPartDv  = sPartDv  + curDv;
                sPartD   = sPartD   + curD;
                sPartKr  = sPartKr  + curKr;
                sPartKv  = sPartKv  + curKv;
                sPartK   = sPartK   + curK;
                sPartOutR = sPartOutR + curOutR;
                sPartOutV = sPartOutV + curOutV;
                sPartOut = sPartOut + curOut;
            end;
        end;

        printItog("ИТОГО по разделу " + currentPart, sPartInR, sPartInV, sPartIn, sPartDr, sPartDv,  sPartD, sPartKr, sPartKv, sPartK, sPartOutR, sPartOutV, sPartOut);
        printItog("ИТОГО по пассиву: ", sKindInR, sKindInV, sKindIn, sKindDr, sKindDv,  sKindD, sKindKr, sKindKv, sKindK, sKindOutR, sKindOutV, sKindOut);
    end;

    /**
     * Печать наименования главы.
     * @param nameChapter: String Наименование главы.
     */
    macro printNameChapter(nameChapter: String)
        [#]( strAlign(nameChapter, ReportWidth, STR_ALIGN_CENTER));
    end;

    constructorTApplication13ReportView();
end;
