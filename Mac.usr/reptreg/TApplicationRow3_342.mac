/*
$Name:          TApplicationRow3_342.mac
$Module:        Регламентируемая отчетность
$Description:   Классы строк Приложения3 ФОР по 342-П
*/
/*─────────────────────────────────────────────────────────────────────────────────────────────────┐
  RS-Bank V6                                                                        R-Style Softlab
  Файл подсистемы "Регламентируемая отчетность"

  Классы строк приложения3 ФОР по 342-П

  Создан: 22.10.2009 - Ser.
└─────────────────────────────────────────────────────────────────────────────────────────────────*/
/***************************************************************************************************
 *  Класc строки 1 приложения3
 **************************************************************************************************/
class (TApplicationRow2_7) TApplicationRow342_3_1(applicationName : String)
    initTApplicationRow2_7(applicationName);

    private macro constructor()
        m_code = "1";
    end;

    macro print(reportWidth : Integer, beginDateInBlock, numberDatesInBlock)
        printSeparator(MIDDLE_SEPARATOR, beginDateInBlock, numberDatesInBlock);
        printDescriptionRow(" Пассивные остатки (либо их часть) ", true, true, beginDateInBlock, numberDatesInBlock);
        printDescriptionRow(" отдельных лицевых счетов балансовых", false, true, beginDateInBlock, numberDatesInBlock);
        printDescriptionRow(" счетов по учету денежных средств,", false, true, beginDateInBlock, numberDatesInBlock);
        printDescriptionRow(" привлеченных от юридических лиц на", false, true, beginDateInBlock, numberDatesInBlock);
        printDescriptionRow(" срок не менее трех лет в соответствии", false, true, beginDateInBlock, numberDatesInBlock);
        printDescriptionRow(" с условиями заключенных  договоров:", false, true, beginDateInBlock, numberDatesInBlock);
    end;

    macro exportToKliko()
        exportDescriptionRow("1.Пассивные остатки", true);
    end;

    constructor();
end;

class (TApplicationRow342_3_1) TApplicationRow342_3_1_3115(applicationName : String)
    initTApplicationRow342_3_1(applicationName);

    private macro constructorTApplicationRow342_3_1_3115()
        m_code = "1";
    end;

    macro print(reportWidth : Integer, beginDateInBlock, numberDatesInBlock)
        printSeparator(MIDDLE_SEPARATOR, beginDateInBlock, numberDatesInBlock);
        printDescriptionRow(" Пассивные остатки (либо их часть) ", true, true, beginDateInBlock, numberDatesInBlock);
        printDescriptionRow(" отдельных лицевых счетов балансовых", false, true, beginDateInBlock, numberDatesInBlock);
        printDescriptionRow(" счетов по учету денежных средств,", false, true, beginDateInBlock, numberDatesInBlock);
        printDescriptionRow(" привлеченных от юридических лиц и ", false, true, beginDateInBlock, numberDatesInBlock);
        printDescriptionRow(" индивидуальных предпринимателей на", false, true, beginDateInBlock, numberDatesInBlock);
        printDescriptionRow(" срок не менее трех лет в соответствии", false, true, beginDateInBlock, numberDatesInBlock);
        printDescriptionRow(" с условиями заключенных  договоров:", false, true, beginDateInBlock, numberDatesInBlock);
    end;

    constructorTApplicationRow342_3_1_3115();
end;

/***************************************************************************************************
 *  Базовый класс для строк 1.1 и 1.3 приложения3
 **************************************************************************************************/
class (TApplicationRow2_7) TApplicationRow342_3__1_1__1_3(applicationName : String)
    initTApplicationRow2_7(applicationName);

    /*Существует хотябы один досрочный возврат*/
    class (TDataSourceFilter) TDataSourceFilter3_F1(balanceMasks : String, category : String)
        macro makePartDateFilter()
            m_partDateFilter = " " + isExistsAnticipatedPayment("account.t_account", "account.t_fiId", "account.t_chapter")
            ;
        end;

        macro makePartFilter()
            m_partFilter = " " + isSatisfiesToBalancesMasks("account.t_balance")
            ;
        end;
        initTDataSourceFilter(balanceMasks, category);
    end;

    /*Фильтр суммы 1*/
    class (TDataSourceFilter) TDataSourceFilter3_F2(balanceMasks : String, category : String)
        macro makePartFilter()
            m_partFilter = " " + isSatisfiesToBalancesMasks("account.t_balance")
                ;
        end;

        macro makePartDateFilter()
            var isPaidCancellation = global.parameters.isPaidCancellation();

            m_partDateFilter = " " + hasAssignedCategory()
                +"\n"+ "      AND (   (    " + getAnticipatoryRepudiationDate() + " IS NULL"
                +"\n"+ "               AND " + getPayingSharesDate() + " IS NULL)"
                +"\n"+ "           OR (    (   " + getPayingSharesDate() + " IS NULL"
                +"\n"+ "                    OR rcb_for.getWorkDayCount(" + getAnticipatoryRepudiationDate() + "," + getPayingSharesDate() + ") > 5)"
                +"\n"+ "               AND (t_date - 1) < " + getAnticipatoryRepudiationDate() + ")"
                +"\n"+ "           OR (    rcb_for.getWorkDayCount(" + getAnticipatoryRepudiationDate() + "," + getPayingSharesDate() + ") <= 5"
                +"\n"+ "               " + ternary(isPaidCancellation, "OR", "AND") + " (t_date - 1) < " + getAnticipatoryRepudiationDate() + "))";
        end;

        initTDataSourceFilter(balanceMasks, category);
    end;

    /*Фильтр для суммы 2*/
    class (TDataSourceFilter) TDataSourceFilter3_F3(balanceMasks : String, category : String)
        macro makePartFilter()
            m_partFilter = " " + isSatisfiesToBalancesMasks("account.t_balance")
                +"\n"+ "AND (         NOT (account.t_balance LIKE '%06' OR account.t_balance LIKE '%07' OR account.t_balance LIKE '%08')"
                +"\n"+ " OR " + isTermExceedThreeYears("account.t_account", "account.t_fiId", "account.t_chapter") + ")"
                +"\n"+ "AND  " + getAnticipatoryRepudiationDate("account.t_account", "account.t_fiId", "account.t_chapter") + " IS null"
                +"\n"+ "AND  " + getPayingSharesDate("account.t_account", "account.t_fiId", "account.t_chapter") + " IS null";
        end;

        macro makePartDateFilter()
            m_partDateFilter = " NOT " + hasAssignedCategory("СубКредит");
        end;

        initTDataSourceFilter(balanceMasks, category);
    end;

    /*Фильтр для суммы 3*/
    class (TDataSourceFilter) TDataSourceFilter3_F4(balanceMasks : String, category : String)
        macro makePartFilter()
            m_partFilter = " " + isSatisfiesToBalancesMasks("account.t_balance")
                ;
        end;

        macro makePartDateFilter()
            if (global.parameters.isPaidCancellation())
                m_partDateFilter = "  (    rcb_for.getWorkDayCount(" + getAnticipatoryRepudiationDate() + "," + getPayingSharesDate() + ") <= 5"
                    +"\n"+         "   OR (frd.t_date - 1) < " + getAnticipatoryRepudiationDate() + ")";
            else
                m_partDateFilter = " (frd.t_date - 1) < " + getAnticipatoryRepudiationDate();
            end;

            m_partDateFilter = m_partDateFilter + "\n" + "AND " + hasAssignedCategory();
        end;
        initTDataSourceFilter(balanceMasks, category);
    end;
end;

class (TApplicationRow342_3__1_1__1_3) TApplicationRow342_3__1_1__1_3_3115(applicationName : String)
    initTApplicationRow342_3__1_1__1_3(applicationName);

    /*Существует хотябы один досрочный возврат*/
    class (TDataSourceFilter_3115) TDataSourceFilter3_F1_3115(balanceMasks : String, category : String)
        macro makePartDateFilter()
            m_partDateFilter = " " + isExistsAnticipatedPayment("account.t_account", "account.t_fiId", "account.t_chapter")
            ;
        end;

        macro makePartFilter()
            m_partFilter = " " + isSatisfiesToBalancesMasks("account.t_balance")
            ;
        end;
        initTDataSourceFilter_3115(balanceMasks, category);
    end;

    /*Фильтр суммы 1*/
    class (TDataSourceFilter) TDataSourceFilter3_F2_3115(balanceMasks : String, category : String)
        macro makePartFilter()
            m_partFilter = " " + isSatisfiesToBalancesMasks("account.t_balance")
                ;
        end;

        macro makePartDateFilter()
            var isPaidCancellation = global.parameters.isPaidCancellation();

            m_partDateFilter = " " + hasAssignedCategory()
                +"\n"+ "      AND (   (    " + getAnticipatoryRepudiationDate() + " IS NULL"
                +"\n"+ "               AND " + getPayingSharesDate() + " IS NULL AND " + getPartialRepaymentDate() + " IS NULL)"
                +"\n"+ "           OR (    (   " + getPayingSharesDate() + " IS NULL"
                +"\n"+ "                    OR rcb_for.getWorkDayCount(" + getAnticipatoryRepudiationDate() + "," + getPayingSharesDate() + ") > 5)"
                +"\n"+ "               AND (t_date - 1) < " + getAnticipatoryRepudiationDate() + ")"
                +"\n"+ "           OR (    rcb_for.getWorkDayCount(" + getAnticipatoryRepudiationDate() + "," + getPayingSharesDate() + ") <= 5"
                +"\n"+ "               " + ternary(isPaidCancellation, "OR", "AND") + " (t_date - 1) < " + getAnticipatoryRepudiationDate() + ")"
                +"\n"+ "           OR  " + getPartialRepaymentDate() + " IS NOT NULL"
                +"\n"+ "          )";
        end;

        initTDataSourceFilter(balanceMasks, category);
    end;

    /*Фильтр для суммы 3*/
    class (TDataSourceFilter) TDataSourceFilter3_F4_3115(balanceMasks : String, category : String)
        macro makePartFilter()
            m_partFilter = " " + isSatisfiesToBalancesMasks("account.t_balance")
                ;
        end;

        macro makePartDateFilter()
            if (global.parameters.isPaidCancellation())
                m_partDateFilter = "  ( rcb_for.getWorkDayCount(" + getAnticipatoryRepudiationDate() + "," + getPayingSharesDate() + ") <= 5 AND " + getPartialRepaymentDate() + " IS NULL)";
            else
                m_partDateFilter = " (frd.t_date - 1) < " + getAnticipatoryRepudiationDate();
            end;

            m_partDateFilter = "( " + m_partDateFilter + " OR " + getPartialRepaymentDate() + " IS NOT NULL OR " + getAnticipatoryRepudiationDate() + " IS NULL)" + "\n" + "AND " + hasAssignedCategory();
        end;
        initTDataSourceFilter(balanceMasks, category);
    end;

    /*Фильтр для суммы 3 по 3654-У*/
    class (TDataSourceFilter) TDataSourceFilter3_F4_3654(balanceMasks : String, category : String)
        macro makePartFilter()
            m_partFilter = " " + isSatisfiesToBalancesMasks("account.t_balance")
                ;
        end;

        macro makePartDateFilter()
            if (global.parameters.isPaidCancellation())
                m_partDateFilter = "  ( rcb_for.getWorkDayCount(" + getAnticipatoryRepudiationDate() + "," + getPayingSharesDate() + ") <= 5 AND " + getPartialRepaymentDate() + " IS NULL)";
            else
                m_partDateFilter = " (frd.t_date - 1) < " + getAnticipatoryRepudiationDate();
            end;

            m_partDateFilter = "( " + m_partDateFilter + " OR " + getPartialRepaymentDate() + " IS NOT NULL OR " + hasAssignedCategory("ДР") + " OR "
                                    + getAnticipatoryRepudiationDate() + " IS NULL)" + "\n" + "AND "
                                    + hasAssignedCategory();
        end;

        initTDataSourceFilter(balanceMasks, category);
    end;

end;

/***************************************************************************************************
 *  Класc строки 1.1 приложения3
 **************************************************************************************************/
class (TApplicationRow342_3__1_1__1_3) TApplicationRow342_3_1_1(applicationName : String)
    initTApplicationRow342_3__1_1__1_3(applicationName);

    private macro constructor()
        m_code = "1.1";
    end;

    macro getBalanceMasks()
        return getBalanceMasksForRow(m_code);
    end;

    macro fillTempTable(tempTable : TTempTable)
        var dataSet = TrsbDataSet(TBalanceDataSource(TDataSourceFilter3_F1(getBalanceMasksForRow(m_code) + "," + getBalanceMasksForRow("1.3")), m_code, m_applicationName, "ПривлЮЛ_Нерез", true).getQuery());

        if (dataSet.moveNext())
            tempTable.fill(TBalanceDataSource(TDataSourceFilter3_F2(getBalanceMasksForRow(m_code), "СубКредит"), m_code, m_applicationName, "ПривлЮЛ_Нерез"));
        else
            tempTable.fill(TBalanceDataSource(TDataSourceFilter3_F3(getBalanceMasksForRow(m_code), "СубКредит"), m_code, m_applicationName, "ПривлЮЛ_Нерез"));

            tempTable.fill(TBalanceDataSource(TDataSourceFilter3_F4(getBalanceMasksForRow(m_code), "СубКредит"), m_code, m_applicationName, "ПривлЮЛ_Нерез"));
        end;
    end;

    macro fillTempTableForBalanceData(tempTable : TTempTable)
        fillTempTable(tempTable);

        var dataSet = getBalanceDataSet(getBalanceMasksForRow(m_code));

        updateTempTable(dataSet, "ПривлЮЛ_Нерез");
    end;

    macro saveAttributes()
        var applicationRow     : Object = null;
        var dataSet            : Object = null;
        var roubleRest         : Money  = $0.0;
        var currencyRest       : Money  = $0.0;
        var scaledRoubleRest   : Double = 0.0;
        var scaledCurrencyRest : Double = 0.0;
        var multiplier = rcbApplication.currentReport.multiplier;
        var i = 0;

        if (not isSaved())
            m_isSaved = true;
            saveAttributes();

            dataSet = TRsbDataSet(createQueryForBalance(TBalanceId(m_applicationName, m_code, "ПривлЮЛ_Нерез")));

            while (dataSet.moveNext())
                saveAttributeValue(dataSet.balanceGroup, dataSet.balance, dataSet.date,
                                   dataSet.roubleRest, dataSet.currencyRest,
                                   dataSet.roubleScaledRest, dataSet.currencyScaledRest);
            end;
        end;
    end;

    macro print(reportWidth : Integer, beginDateInBlock, numberDatesInBlock)
        printSeparator(MIDDLE_SEPARATOR, beginDateInBlock, numberDatesInBlock);
        printDescriptionRow(" от юридических лиц-нерезидентов:", true, true, beginDateInBlock, numberDatesInBlock);
        printSeparator(MIDDLE_SEPARATOR, beginDateInBlock, numberDatesInBlock);
        var iterator = getValueIterator(NULL, beginDateInBlock, numberDatesInBlock);
        iterator.setSortOrder(SORTER_FOR_BALANCE_DATE);
        printRow(iterator, false, true, true);
    end;

    macro exportToKliko()
        exportDescriptionRow("1.1.от юридических лиц-нерезидентов");
        var iterator = getValueIterator(NULL);
        iterator.setSortOrder(SORTER_FOR_BALANCE_DATE);
        exportValueRow(iterator);
    end;

    macro exportToPtkPsd()
        TPtkPsdBalanceGroupExporter("OR3_1", this, "ПривлЮЛ_Нерез", "RV").export();
    end;

    constructor();
end;

class (TApplicationRow342_3__1_1__1_3_3115) TApplicationRow342_3_1_1_3115(applicationName : String)
    initTApplicationRow342_3__1_1__1_3_3115(applicationName);

    private macro constructor()
        m_code = "1.1";
    end;

    macro getBalanceMasks()
        return getBalanceMasksForRow(m_code);
    end;

    macro fillTempTable(tempTable : TTempTable)
        var dataSet = TrsbDataSet(TBalanceDataSource(TDataSourceFilter3_F1_3115(getBalanceMasksForRow(m_code) + "," + getBalanceMasksForRow("1.3")), m_code, m_applicationName, "ПривлЮЛ_Нерез", true).getQuery());
        var dateAnticipatedPayment = global.parameters.getDateAnticipatedPayment();
        var endDate = global.parameters.getEndDate();
        var yearDateAnticipatedPayment;
        var yearEndDate;
        datesplit(dateAnticipatedPayment, null, null, yearDateAnticipatedPayment);
        datesplit(endDate, null, null, yearEndDate);

        if ((global.parameters.getDateAnticipatedPayment() != Date("00.00.0000")) and
            ((global.parameters.getDateAnticipatedPayment() <= global.parameters.getEndDate()) and (yearDateAnticipatedPayment == yearEndDate)))

            tempTable.fill(TBalanceDataSource(TDataSourceFilter3_F2_3115(getBalanceMasksForRow(m_code), "СубКредит"), m_code, m_applicationName, "ПривлЮЛ_Нерез"));
        else
            if (dataSet.moveNext())
                tempTable.fill(TBalanceDataSource(TDataSourceFilter3_F2_3115(getBalanceMasksForRow(m_code), "СубКредит"), m_code, m_applicationName, "ПривлЮЛ_Нерез"));
            else
                tempTable.fill(TBalanceDataSource(TDataSourceFilter3_F3(getBalanceMasksForRow(m_code), "СубКредит"), m_code, m_applicationName, "ПривлЮЛ_Нерез"));

                tempTable.fill(TBalanceDataSource(TDataSourceFilter3_F4_3115(getBalanceMasksForRow(m_code), "СубКредит"), m_code, m_applicationName, "ПривлЮЛ_Нерез"));
            end;
        end;
    end;

    macro fillTempTableForBalanceData(tempTable : TTempTable)
        fillTempTable(tempTable);

        var dataSet = getBalanceDataSet(getBalanceMasksForRow(m_code));

        updateTempTable(dataSet, "ПривлЮЛ_Нерез");
    end;

    macro saveAttributes()
        var applicationRow     : Object = null;
        var dataSet            : Object = null;
        var roubleRest         : Money  = $0.0;
        var currencyRest       : Money  = $0.0;
        var scaledRoubleRest   : Double = 0.0;
        var scaledCurrencyRest : Double = 0.0;
        var multiplier = rcbApplication.currentReport.multiplier;
        var i = 0;

        if (not isSaved())
            m_isSaved = true;
            saveAttributes();

            dataSet = TRsbDataSet(createQueryForBalance(TBalanceId(m_applicationName, m_code, "ПривлЮЛ_Нерез")));

            while (dataSet.moveNext())
                saveAttributeValue(dataSet.balanceGroup, dataSet.balance, dataSet.date,
                                   dataSet.roubleRest, dataSet.currencyRest,
                                   dataSet.roubleScaledRest, dataSet.currencyScaledRest);
            end;
        end;
    end;

    macro print(reportWidth : Integer, beginDateInBlock, numberDatesInBlock)
        printSeparator(MIDDLE_SEPARATOR, beginDateInBlock, numberDatesInBlock);
        printDescriptionRow(" от юридических лиц-нерезидентов:", true, true, beginDateInBlock, numberDatesInBlock);
        printSeparator(MIDDLE_SEPARATOR, beginDateInBlock, numberDatesInBlock);
        var iterator = getValueIterator(NULL, beginDateInBlock, numberDatesInBlock);
        iterator.setSortOrder(SORTER_FOR_BALANCE_DATE);
        printRow(iterator, false, true, true);
    end;

    macro exportToKliko()
        exportDescriptionRow("1.1.от юридических лиц-нерезидентов");
        var iterator = getValueIterator(NULL);
        iterator.setSortOrder(SORTER_FOR_BALANCE_DATE);
        exportValueRow(iterator);
    end;

    macro exportToPtkPsd()
        TPtkPsdBalanceGroupExporter("OR3_1", this, "ПривлЮЛ_Нерез", "RV").export();
    end;

    constructor();
end;

class (TApplicationRow342_3_1_1_3115) TApplicationRow342_3_1_1_3654(applicationName : String)
    initTApplicationRow342_3_1_1_3115(applicationName);

    macro fillTempTable(tempTable : TTempTable)
        var dataSet = TrsbDataSet(TBalanceDataSource(TDataSourceFilter3_F1_3115(getBalanceMasksForRow(m_code) + "," + getBalanceMasksForRow("1.3")), m_code, m_applicationName, "ПривлЮЛ_Нерез", true).getQuery());
        var dateAnticipatedPayment = global.parameters.getDateAnticipatedPayment();
        var endDate = global.parameters.getEndDate();
        var yearDateAnticipatedPayment;
        var yearEndDate;
        datesplit(dateAnticipatedPayment, null, null, yearDateAnticipatedPayment);
        datesplit(endDate, null, null, yearEndDate);

        if ((global.parameters.getDateAnticipatedPayment() != Date("00.00.0000")) and
            ((global.parameters.getDateAnticipatedPayment() <= global.parameters.getEndDate()) and (yearDateAnticipatedPayment == yearEndDate)))

            tempTable.fill(TBalanceDataSource(TDataSourceFilter3_F2_3115(getBalanceMasksForRow(m_code), "СубКредит"), m_code, m_applicationName, "ПривлЮЛ_Нерез"));
        else
            if (dataSet.moveNext())
                tempTable.fill(TBalanceDataSource(TDataSourceFilter3_F2_3115(getBalanceMasksForRow(m_code), "СубКредит"), m_code, m_applicationName, "ПривлЮЛ_Нерез"));
            else
                tempTable.fill(TBalanceDataSource(TDataSourceFilter3_F3(getBalanceMasksForRow(m_code), "СубКредит"), m_code, m_applicationName, "ПривлЮЛ_Нерез"));

                tempTable.fill(TBalanceDataSource(TDataSourceFilter3_F4_3654(getBalanceMasksForRow(m_code), "СубКредит"), m_code, m_applicationName, "ПривлЮЛ_Нерез"));
            end;
        end;
    end;
end;

/***************************************************************************************************
 *  Класc строки 1.2 приложения3
 **************************************************************************************************/
class (TApplicationRow2_7) TApplicationRow342_3_1_2(applicationName : String)
    initTApplicationRow2_7(applicationName);

    private macro constructor()
        m_code = "1.2";
    end;

    macro saveAttributes()

        if (not isSaved())
            m_isSaved = true;
            saveAttributes();

            var iterator = getAttributeValueIterator(m_applicationName, NULL, NULL);
            iterator.setFilter(FILTER_FOR_APPLICATION_ROW, "1.1");
            iterator.setSortOrder(SORTER_FOR_DATE);
            summarizeAndSaveAttributeValue(iterator, "", "314440");
        end;
    end;

    macro print(reportWidth : Integer, beginDateInBlock, numberDatesInBlock)
        printSeparator(MIDDLE_SEPARATOR, beginDateInBlock, numberDatesInBlock);
        var iterator = getValueIterator(NULL, beginDateInBlock, numberDatesInBlock);
        iterator.setSortOrder(SORTER_FOR_BALANCE_DATE);
        printRow(iterator, true, true, true, "ИТОГО пассивных остатков,");
        printDescriptionRow(" подлежащих исключению из обязательств", false, true, beginDateInBlock, numberDatesInBlock);
        printDescriptionRow(" перед юридическими лицами-нерезидентами,", false, true, beginDateInBlock, numberDatesInBlock);
        printDescriptionRow(" код обозначения - 314440", false, true, beginDateInBlock, numberDatesInBlock);
    end;

    macro exportToKliko()
        var iterator = getValueIterator(NULL);
        iterator.setSortOrder(SORTER_FOR_BALANCE_DATE);
        exportValueRow(iterator, "1.2.ИТОГО пас. ост.(код 314440)");
    end;

    macro exportToPtkPsd()
        TPtkPsdRowExporter("OR3_2", this, "RV").export();
    end;

    constructor();
end;

class (TApplicationRow342_3_1_2) TApplicationRow342_3_1_2_507(applicationName : String)
    initTApplicationRow342_3_1_2(applicationName);

    macro print(reportWidth : Integer, beginDateInBlock, numberDatesInBlock)
        printSeparator(MIDDLE_SEPARATOR, beginDateInBlock, numberDatesInBlock);
        var iterator = getValueIterator(NULL, beginDateInBlock, numberDatesInBlock);
        iterator.setSortOrder(SORTER_FOR_BALANCE_DATE);
        printRow(iterator, true, true, true, "Итого пассивных остатков,");
        printDescriptionRow(" подлежащих исключению из обязательств", false, true, beginDateInBlock, numberDatesInBlock);
        printDescriptionRow(" перед юридическими лицами-нерезидентами,", false, true, beginDateInBlock, numberDatesInBlock);
        printDescriptionRow(" код обозначения - 314440", false, true, beginDateInBlock, numberDatesInBlock);
    end;

    constructor();
end;

/***************************************************************************************************
 *  Класc строки 1.3 приложения3 после 1951-У
 **************************************************************************************************/
class (TApplicationRow342_3__1_1__1_3) TApplicationRow342_3_1_3(applicationName : String)
    initTApplicationRow342_3__1_1__1_3(applicationName);

    private macro constructor()
        m_code = "1.3";
    end;

    macro fillTempTable(tempTable : TTempTable)
        var dataSet = TrsbDataSet(TBalanceDataSource(TDataSourceFilter3_F1(getBalanceMasksForRow(m_code) + "," + getBalanceMasksForRow("1.1")), m_code, m_applicationName, "ПривлЮЛ", true).getQuery());

        if (dataSet.moveNext())
            tempTable.fill(TBalanceDataSource(TDataSourceFilter3_F2(getBalanceMasksForRow(m_code), "СубКредит"), m_code, m_applicationName, "ПривлЮЛ"));
        else
            tempTable.fill(TBalanceDataSource(TDataSourceFilter3_F3(getBalanceMasksForRow(m_code), "СубКредит"), m_code, m_applicationName, "ПривлЮЛ"));

            tempTable.fill(TBalanceDataSource(TDataSourceFilter3_F4(getBalanceMasksForRow(m_code), "СубКредит"), m_code, m_applicationName, "ПривлЮЛ"));
        end;
    end;

    macro fillTempTableForBalanceData(tempTable : TTempTable)
        fillTempTable(tempTable);

        var dataSet = getBalanceDataSet(getBalanceMasksForRow(m_code));

        updateTempTable(dataSet, "ПривлЮЛ");
    end;

    macro saveAttributes()
        var applicationRow : Object = null;
        var dataSet        : Object = null;
        var roubleRest     : Money  = $0.0;
        var currencyRest   : Money  = $0.0;
        var scaledRoubleRest   : Double = 0.0;
        var scaledCurrencyRest : Double = 0.0;
        var multiplier = rcbApplication.currentReport.multiplier;
        var i = 0;

        if (not isSaved())
            m_isSaved = true;
            saveAttributes();

            dataSet = TRsbDataSet(createQueryForBalance(TBalanceId(m_applicationName, m_code, "ПривлЮЛ")));

            while (dataSet.moveNext())
                saveAttributeValue(dataSet.balanceGroup, dataSet.balance, dataSet.date,
                                   dataSet.roubleRest, dataSet.currencyRest,
                                   dataSet.roubleScaledRest, dataSet.currencyScaledRest);

            end;
        end;
    end;

    macro print(reportWidth : Integer, beginDateInBlock, numberDatesInBlock)
        printSeparator(MIDDLE_SEPARATOR, beginDateInBlock, numberDatesInBlock);
        printDescriptionRow(" от иных юридических лиц:", true, true, beginDateInBlock, numberDatesInBlock);
        printSeparator(MIDDLE_SEPARATOR, beginDateInBlock, numberDatesInBlock);
        var iterator = getValueIterator(NULL, beginDateInBlock, numberDatesInBlock);
        iterator.setSortOrder(SORTER_FOR_BALANCE_DATE);
        printRow(iterator, false, true, true);
    end;

    macro exportToKliko()
        exportDescriptionRow("1.3. от иных юридических лиц:");
        var iterator = getValueIterator(NULL);
        iterator.setSortOrder(SORTER_FOR_BALANCE_DATE);
        exportValueRow(iterator);
    end;

    macro exportToPtkPsd()
        TPtkPsdBalanceGroupExporter("OR3_3", this, "ПривлЮЛ", "RV").export();
    end;

    constructor();
end;

class (TApplicationRow342_3__1_1__1_3_3115) TApplicationRow342_3_1_3_3115(applicationName : String)
    initTApplicationRow342_3__1_1__1_3_3115(applicationName);

    private macro constructor()
        m_code = "1.3";
    end;

    macro fillTempTable(tempTable : TTempTable)
        var dataSet = TrsbDataSet(TBalanceDataSource(TDataSourceFilter3_F1_3115(getBalanceMasksForRow(m_code) + "," + getBalanceMasksForRow("1.1")), m_code, m_applicationName, "ПривлЮЛ", true).getQuery());
        var dateAnticipatedPayment = global.parameters.getDateAnticipatedPayment();
        var endDate = global.parameters.getEndDate();
        var yearDateAnticipatedPayment;
        var yearEndDate;
        datesplit(dateAnticipatedPayment, null, null, yearDateAnticipatedPayment);
        datesplit(endDate, null, null, yearEndDate);

        if ((global.parameters.getDateAnticipatedPayment() != Date("00.00.0000")) and
            ((global.parameters.getDateAnticipatedPayment() <= global.parameters.getEndDate()) and (yearDateAnticipatedPayment == yearEndDate)))

            tempTable.fill(TBalanceDataSource(TDataSourceFilter3_F2_3115(getBalanceMasksForRow(m_code), "СубКредит"), m_code, m_applicationName, "ПривлЮЛ"));
        else
            if (dataSet.moveNext())
                tempTable.fill(TBalanceDataSource(TDataSourceFilter3_F2_3115(getBalanceMasksForRow(m_code), "СубКредит"), m_code, m_applicationName, "ПривлЮЛ"));
            else
                tempTable.fill(TBalanceDataSource(TDataSourceFilter3_F3(getBalanceMasksForRow(m_code), "СубКредит"), m_code, m_applicationName, "ПривлЮЛ"));

                tempTable.fill(TBalanceDataSource(TDataSourceFilter3_F4_3115(getBalanceMasksForRow(m_code), "СубКредит"), m_code, m_applicationName, "ПривлЮЛ"));
            end;
        end;
    end;

    macro fillTempTableForBalanceData(tempTable : TTempTable)
        fillTempTable(tempTable);

        var dataSet = getBalanceDataSet(getBalanceMasksForRow(m_code));

        updateTempTable(dataSet, "ПривлЮЛ");
    end;

    macro saveAttributes()
        var applicationRow : Object = null;
        var dataSet        : Object = null;
        var roubleRest     : Money  = $0.0;
        var currencyRest   : Money  = $0.0;
        var scaledRoubleRest   : Double = 0.0;
        var scaledCurrencyRest : Double = 0.0;
        var multiplier = rcbApplication.currentReport.multiplier;
        var i = 0;

        if (not isSaved())
            m_isSaved = true;
            saveAttributes();

            dataSet = TRsbDataSet(createQueryForBalance(TBalanceId(m_applicationName, m_code, "ПривлЮЛ")));

            while (dataSet.moveNext())
                saveAttributeValue(dataSet.balanceGroup, dataSet.balance, dataSet.date,
                                   dataSet.roubleRest, dataSet.currencyRest,
                                   dataSet.roubleScaledRest, dataSet.currencyScaledRest);

            end;
        end;
    end;

    macro print(reportWidth : Integer, beginDateInBlock, numberDatesInBlock)
        printSeparator(MIDDLE_SEPARATOR, beginDateInBlock, numberDatesInBlock);
        printDescriptionRow(" от иных юридических лиц:", true, true, beginDateInBlock, numberDatesInBlock);
        printSeparator(MIDDLE_SEPARATOR, beginDateInBlock, numberDatesInBlock);
        var iterator = getValueIterator(NULL, beginDateInBlock, numberDatesInBlock);
        iterator.setSortOrder(SORTER_FOR_BALANCE_DATE);
        printRow(iterator, false, true, true);
            end;

    macro exportToKliko()
        if (global.reportingPeriodIsVror)
            exportDescriptionRow("1.3. от иных юридических лиц:");
        else
            exportDescriptionRow("1.3. от иных юридических лиц и индивидуальных предпринимателей:");
        end;

        var iterator = getValueIterator(NULL);
        iterator.setSortOrder(SORTER_FOR_BALANCE_DATE);
        exportValueRow(iterator);
        end;

    macro exportToPtkPsd()
        TPtkPsdBalanceGroupExporter("OR3_3", this, "ПривлЮЛ", "RV").export();
    end;

    constructor();
end;

class (TApplicationRow342_3_1_3_3115) TApplicationRow342_3_1_3_3654(applicationName : String)
    initTApplicationRow342_3_1_3_3115(applicationName);

    macro fillTempTable(tempTable : TTempTable)
        var dataSet = TrsbDataSet(TBalanceDataSource(TDataSourceFilter3_F1_3115(getBalanceMasksForRow(m_code) + "," + getBalanceMasksForRow("1.1")), m_code, m_applicationName, "ПривлЮЛ", true).getQuery());
        var dateAnticipatedPayment = global.parameters.getDateAnticipatedPayment();
        var endDate = global.parameters.getEndDate();
        var yearDateAnticipatedPayment;
        var yearEndDate;
        datesplit(dateAnticipatedPayment, null, null, yearDateAnticipatedPayment);
        datesplit(endDate, null, null, yearEndDate);

        if ((global.parameters.getDateAnticipatedPayment() != Date("00.00.0000")) and
            ((global.parameters.getDateAnticipatedPayment() <= global.parameters.getEndDate()) and (yearDateAnticipatedPayment == yearEndDate)))

            tempTable.fill(TBalanceDataSource(TDataSourceFilter3_F2_3115(getBalanceMasksForRow(m_code), "СубКредит"), m_code, m_applicationName, "ПривлЮЛ"));
        else
            if (dataSet.moveNext())
                tempTable.fill(TBalanceDataSource(TDataSourceFilter3_F2_3115(getBalanceMasksForRow(m_code), "СубКредит"), m_code, m_applicationName, "ПривлЮЛ"));
            else
                tempTable.fill(TBalanceDataSource(TDataSourceFilter3_F3(getBalanceMasksForRow(m_code), "СубКредит"), m_code, m_applicationName, "ПривлЮЛ"));

                tempTable.fill(TBalanceDataSource(TDataSourceFilter3_F4_3654(getBalanceMasksForRow(m_code), "СубКредит"), m_code, m_applicationName, "ПривлЮЛ"));
            end;
        end;
    end;
end;

class (TApplicationRow342_3_1_3_3654) TApplicationRow342_3_1_3_507(applicationName : String)
    initTApplicationRow342_3_1_3_3654(applicationName);

    macro print(reportWidth : Integer, beginDateInBlock, numberDatesInBlock)
        printSeparator(MIDDLE_SEPARATOR, beginDateInBlock, numberDatesInBlock);
        printDescriptionRow(" от иных юридических лиц и ", true, true, beginDateInBlock, numberDatesInBlock);
        printDescriptionRow(" индивидуальных предпринимателей:", false, true, beginDateInBlock, numberDatesInBlock);
        printSeparator(MIDDLE_SEPARATOR, beginDateInBlock, numberDatesInBlock);
        var iterator = getValueIterator(NULL, beginDateInBlock, numberDatesInBlock);
        iterator.setSortOrder(SORTER_FOR_BALANCE_DATE);
        printRow(iterator, false, true, true);
    end;
end;

/***************************************************************************************************
 *  Класc строки 1.4 приложения3
 **************************************************************************************************/
class (TApplicationRow2_7) TApplicationRow342_3_1_4(applicationName : String)
    initTApplicationRow2_7(applicationName);

    private macro constructor()
        m_code = "1.4";
    end;

    macro saveAttributes()

        if (not isSaved())
            m_isSaved = true;
            saveAttributes();

            var iterator = getAttributeValueIterator(m_applicationName, NULL, NULL);
            iterator.setFilter(FILTER_FOR_APPLICATION_ROW, "1.3");
            iterator.setSortOrder(SORTER_FOR_DATE);
            summarizeAndSaveAttributeValue(iterator, "", "410439");
        end;
    end;

    macro print(reportWidth : Integer, beginDateInBlock, numberDatesInBlock)
        printSeparator(MIDDLE_SEPARATOR, beginDateInBlock, numberDatesInBlock);
        var iterator = getValueIterator(NULL, beginDateInBlock, numberDatesInBlock);
        iterator.setSortOrder(SORTER_FOR_BALANCE_DATE);
        printRow(iterator, true, true, true, "ИТОГО пассивных остатков,");
        printDescriptionRow(" подлежащих исключению из ", false, true, beginDateInBlock, numberDatesInBlock);
        printDescriptionRow(" иных обязательств, код ", false, true, beginDateInBlock, numberDatesInBlock);
        printDescriptionRow(" обозначения - 410439", false, true, beginDateInBlock, numberDatesInBlock);
        printBottom(true, beginDateInBlock, numberDatesInBlock);
    end;

    macro exportToKliko()
        var iterator = getValueIterator(NULL);
        iterator.setSortOrder(SORTER_FOR_BALANCE_DATE);
        exportValueRow(iterator, "1.4.ИТОГО пас. ост.(код - 410439)");
    end;

    macro exportToPtkPsd()
        TPtkPsdRowExporter("OR3_4", this, "RV").export();
    end;

    constructor();
end;

class (TApplicationRow342_3_1_4) TApplicationRow342_3_1_4_507(applicationName : String)
    initTApplicationRow342_3_1_4(applicationName);

    macro print(reportWidth : Integer, beginDateInBlock, numberDatesInBlock)
        printSeparator(MIDDLE_SEPARATOR, beginDateInBlock, numberDatesInBlock);
        var iterator = getValueIterator(NULL, beginDateInBlock, numberDatesInBlock);
        iterator.setSortOrder(SORTER_FOR_BALANCE_DATE);
        printRow(iterator, true, true, true, "Итого пассивных остатков,");
        printDescriptionRow(" подлежащих исключению из ", false, true, beginDateInBlock, numberDatesInBlock);
        printDescriptionRow(" иных обязательств, код ", false, true, beginDateInBlock, numberDatesInBlock);
        printDescriptionRow(" обозначения - 410439", false, true, beginDateInBlock, numberDatesInBlock);
        printBottom(true, beginDateInBlock, numberDatesInBlock);
    end;

    constructor();
end;
