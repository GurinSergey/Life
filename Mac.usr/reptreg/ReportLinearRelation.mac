/* ──────────────────────────────────────────────────────────────────────────┐
   RS-Bank V6                                                 R-Style Softlab
   Файл подсистемы "Регламентированная отчетность"

   Класс для работы с отношением

   CREATED : 03.08.09 Radko.
└─────────────────────────────────────────────────────────────────────────- */
import rcw;
import rcbCoreInter;

const IS_CPP_NORMALIZER = false;

private class JavaReportLinearCombination(combination)
    /*
     * Java обект класса LinearCombination.
     */    
    private var linearCombination;
    /**
     * Конструктор класса.
     */    
    private macro constructorReportLinearCombination(combination)        
        linearCombination = combination;
    end;
    /*-------------------------------------------------------------------------*/
    /*Блок открытых методов*/
    /*-------------------------------------------------------------------------*/    
    /**
     * Метод реализует операцию сложения.
     */
    macro plus(coefficientOrNode, node) 
        if (node == null)
            if ((ValType(coefficientOrNode) != V_INTEGER) and (ValType(coefficientOrNode) != V_DOUBLE))
                return linearCombination.{plus@(LReportNormalizer/Node;)LReportNormalizer/LinearCombination;}(coefficientOrNode);    
            else
                return linearCombination.{plus@(D)LReportNormalizer/LinearCombination;}(Double(coefficientOrNode));    
            end;
        else
            return linearCombination.{plus@(DLReportNormalizer/Node;)LReportNormalizer/LinearCombination;}(Double(coefficientOrNode), node);        
        end;                                                                                                               
    end;
    
    /**
     * Метод реализует операцию вычитания.
     */
    macro minus(coefficientOrNode, node) 
        if ((ValType(coefficientOrNode) != V_INTEGER) and (ValType(coefficientOrNode) != V_DOUBLE))
            return linearCombination.{minus@(LReportNormalizer/Node;)LReportNormalizer/LinearCombination;}(coefficientOrNode);     
        else
            return plus( - coefficientOrNode, node);        
        end;
    end;
    /**
     * Метод реализует операцию умножения.
     */
    macro multiply(coefficient)
        linearCombination.multiply(Double(coefficient));
    end;
    /**
     * Метод выводит линейную комбинацию в виде строки.
     */
    macro toString() 
        return linearCombination.toString(); 
    end;        
    /*-------------------------------------------------------------------------*/
    /*Вызов конструктора класса*/
    /*-------------------------------------------------------------------------*/
    constructorReportLinearCombination(combination);
end;
      

private class JavaReportLinearRelation(sign : Integer) 
    /*
     * Java обект класса LinearRelation.
     */
    private var linearRelation;
    /*
     * Java обекты класса LinearCombination.
     */
    var m_lhs;
    var m_rhs;
    /**
     * Конструктор класса.
     */
    private macro constructorReportLinearRelation(sign : Integer) 
        var jvm = CreateObject ("rsjvm", "TJavaHost", "GlobalJavaHost");
        linearRelation = jvm.createJavaObject("ReportNormalizer.LinearRelation","<init>", sign);        
        m_lhs = JavaReportLinearCombination(linearRelation.getLhs());
        m_rhs = JavaReportLinearCombination(linearRelation.getRhs());
    end;

    macro lhs()
        return m_lhs;
    end;
    macro rhs()
        return m_rhs;
    end;
    /*-------------------------------------------------------------------------*/
    /*Блок открытых методов*/
    /*-------------------------------------------------------------------------*/            
    /*
     * Метод выводит линейное отношение в строковом виде.
     */
    macro toString()     
        return linearRelation.toString();
    end;    
    /* 
     * Метод проверяет выполняется ли данное условие на неокругленных значениях.
     */
    macro checkExactValue() 
        return linearRelation.checkExactValue();
    end;    
    /**
     * Метод клонирует отношение.
     */
    macro clone()
        return linearRelation.clone();    
    end;
    /**
     * Метод возвращает идентификатор отношения.
     */
    macro getId()
       return linearRelation.getId(); 
    end;
    /**
     * Метод возвращает тип отношения.
     */
    macro getSign()
        return linearRelation.getSign(); 
    end;
    /*
     * Метод возвращает Java обект класса LinearRelation.
     */
    macro getLinearRelation()
        return linearRelation;
    end;    
    /*-------------------------------------------------------------------------*/
    /*Вызов конструктора класса*/
    /*-------------------------------------------------------------------------*/
    constructorReportLinearRelation(sign) 
end;

class ReportLinearRelation(sign : Integer) 
    private var linearRelation;
    /**
     * Конструктор класса.
     */
    private macro constructorReportLinearRelation(sign : Integer) 
        if (IS_CPP_NORMALIZER)
            linearRelation = CReportLinearRelation(sign);
        else
            linearRelation = JavaReportLinearRelation(sign);
        end;
    end;

    macro lhs()
        return linearRelation.lhs();
    end;

    macro rhs()
        return linearRelation.rhs();
    end;
    /*-------------------------------------------------------------------------*/
    /*Блок открытых методов*/
    /*-------------------------------------------------------------------------*/            
    /*
     * Метод выводит линейное отношение в строковом виде.
     */
    macro toString()     
        return linearRelation.toString();
    end;    
    /* 
     * Метод проверяет выполняется ли данное условие на неокругленных значениях.
     */
    macro checkExactValue() 
        return linearRelation.checkExactValue();
    end;    
    /**
     * Метод клонирует отношение.
     */
    macro clone()
        return linearRelation.clone();    
    end;
    /**
     * Метод возвращает идентификатор отношения.
     */
    macro getId()
       return linearRelation.getId(); 
    end;
    /**
     * Метод возвращает тип отношения.
     */
    macro getSign()
        return linearRelation.getSign(); 
    end;
    /*
     * Метод возвращает Java обект класса LinearRelation.
     */
    macro getLinearRelation()
        return linearRelation;
    end;    
    /*-------------------------------------------------------------------------*/
    /*Вызов конструктора класса*/
    /*-------------------------------------------------------------------------*/
    constructorReportLinearRelation(sign) 
end;

