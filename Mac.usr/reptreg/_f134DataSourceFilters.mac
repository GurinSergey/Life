/* ──────────────────────────────────────────────────────────────────────────┐
   RS-Bank V6                                                 R-Style Softlab
   Файл подсистемы "Регламентированная отчетность"

   Форма 134. Фильтр источника данных.

   CREATED : 17.07.12 Ser.
└────────────────────────────────────────────────────────────────────────── */
class (RcbBoCbDataSourceFilter) F134CbDocumentDataSourceFillter()
    initRcbBoCbDataSourceFilter("CbDocument", "document");

    //Является документом СПОД
    macro isSpod()
        m_filter = m_filter + "document.t_isSpod = 1";

        return this;
    end;
    //Ограничение на дату проводки
    macro setDateCary(beginDate : Date, endDate : Date)
        m_filter = m_filter + "document.t_date BETWEEN " + getSqlDate(beginDate) + " AND " + getSqlDate(endDate);

        return this;
    
    end;

    //Проверяет наличие символа ОПУ
    macro isOpuSymbolEqualTo(opuSymbol : String, isDebet : Bool)
        var fiIdField    = "document.t_creditFiId";
        var accountField = "document.t_creditAccount";
        
        if (isDebet)
            fiIdField    = "document.t_debetFiId";
            accountField = "document.t_debetAccount"
        end;

        m_filter = m_filter + " EXISTS (SELECT 1"
                +"\n"+        "           FROM drepAccount_vw acc"
                +"\n"+        "          WHERE acc.t_chapter = 1"
                +"\n"+        "            AND acc.t_fiId  = " + fiIdField
                +"\n"+        "            AND acc.t_account = " + accountField 
                +"\n"+        "            AND acc.t_opuSymbol = " + getSqlString(opuSymbol) + ")";
        
        return this;

    
    end;
    
    //Удовлетворяет маске б/с
    macro isSatisfiesToBalanceMasks(masks : String, isDebet : Bool, alias : String)

        var field = ternary(isDebet, "t_debetaccount", "t_creditaccount");

        m_filter = m_filter + "(" + convertMaskToSqlFormat(masks, procesAlias(alias, field)) + ")";

        return this;
    end;

    //Дата регистрации изменения величины уставного капитала <= заданной даты
    macro paymentCapitalChangeDateLessOrEqual(date_ : Date, alias : String)
        m_filter = m_filter + procesAlias(alias, "t_paymentnote") + "<=" + getSqlDate(date_);

        return this;
    end;
end;

class (RcbBoCbDataSourceFilter) F134CbAccountDataSourceFillter()
    initRcbBoCbDataSourceFilter("CbAccount", "account");

    macro isSatisfiesToBalanceMasks(masks : String, alias : String)
        m_filter = m_filter + "(" + convertMaskToSqlFormat(strSubst(strSubst(strSubst(masks, "*", ""), " ", ""), ",", "*,") + "*", procesAlias(alias, "t_account")) + ")";

        return this;
    end;

    /**
     * Является активным
     */
    macro isActive()
        m_filter = m_filter + "account.t_kind = 'А'";
        
        return this;
    end;
    
    /**
     * Срок просрочки
     *
     * @param condition Условие для проверки срока просрочки
     */
    macro isTermDelay(condition : String)
        m_filter = m_filter + getSqlDate(global.getRcbReport().context.period.endDate) + "- t_maturityDate " + condition;
        
        return this;
    end;

    // л/с открыт(ДНОП, ДООП)
    macro isOpened(alias : String)
        m_filter = m_filter + procesAlias(alias, "t_isOpened") + " = 1";

        return this;
    end;

    /**
     * Доля УК контрагента
     *
     * @param condition Условие для проверки доли уставного капитала
     */
    macro isShareInCapital(condition : String)
        m_filter = m_filter + "rep_note.readShareInCapital(account.t_contragentId, rep_data.getEndDate()) " + condition;
        
        return this;
    end;


    /**
     * Контрагент является дочерней или зависимой организацией
     *
     */
    macro isContractorSubsidiary()
        m_filter = m_filter + "EXISTS(SELECT 1 FROM drepparty_vw pt WHERE pt.t_id = account.t_contragentId AND pt.t_isSubsidiary = 1)";
        
        return this;
    end;

    /**
     * контрагент имеет установленную категорию ОКОПФ, равную заданному параметру
     * code код ОКОПФ
     */
    //контрагент имеет установленную категорию, действующую на дату окончания периода отчета
    macro isCodeOkopfEqual(code : Integer)
        const CATEGORY_OKOPF_ID = 28;

        return hasContractorAssignedCategory(CATEGORY_OKOPF_ID, code, "account.t_contragentId");
    end;
    /**
     * Наличие категории для отчетности
     *
     * @param categoryValue значение категории
     */
    macro isReportingCategoryExists(categoryValue : String)
        m_filter = m_filter + "rsb_rep_ac.checkObjAttrPresenceByNum(4, 1," + getSqlString(categoryValue) + ",account.t_objectId," + getSqlDate(global.getRcbReport().context.period.endDate) + ") <> 0";
        
        return this;
    end;

    /**
     * Имеет ненулевой остаток
     */
    macro isExistRest()
        m_filter = m_filter + "(t_rest <> 0 OR rowNum > 0)";
        
        return this;
    end;

    /**
     * Установленно не нулевое примечание
     */
    macro isExistAccountNote(noteId : Integer)
        m_filter = m_filter + "NVL(rep_utl.castRawToMoney(rsi_rsb_kernel.getNote(rep_const.get().cb.objectTypes.account, account.t_objectId, " + noteId + "," + getSqlDate(global.getRcbReport().context.period.endDate) + ")), 0) <> 0";
        
        return this;
    end;

end;

class (RcbDataSourceFilters) F134DataSourceFilters()
    initRcbDataSourceFilters();

    macro initialize()
        m_dataSourceFiltersPool.push_back(F134CbDocumentDataSourceFillter());
        m_dataSourceFiltersPool.push_back(F134CbAccountDataSourceFillter());
    end;
end;