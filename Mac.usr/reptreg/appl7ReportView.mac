
import rcbimport;
import balanceAttribute;
import balanceReportParameters;
import "or_rep_h.mac";

/**
 * Класс представления отчетной формы.
 */
class (RcbReportView) TApplication7ReportView(withSpod: bool)
    var m_tableReport;
    var reportWidth;
    var m_planNumber;

    //  DAI 17.01.2015 - Печать в Эксель. Регламентировано настройкой "PRBB\\REPTREG\\ПРИЛ 8\\ПЕЧАТЬ В EXCEL" изначально только для ПРББ
    var m_formExcelFormat = False; //Выводить отчет в Excel
    var m_ExcelRep : CMakeReport;  //Объект для вывода отчета в Excel
    var nmob, nmtlg, obbook, obsheet;
    var m_offsetR = 2;     // Смещение по строкам
    var m_offsetC = 1;     // Смещение по столбцам
    var m_offsetRbegin;    // Смещение по строкам
    var m_offsetRend;      // Смещение по столбцам
    var m_Row =1;          // Текущая строка

    //  DAI доп колонка отчета в Excel исключительно для отчета по запросу ЦБ
    var m_DopFild = False;  // Добавлять калонку
    var m_LastMonday;       // Понедельник предыдущей недели
    var m_LastFriday;       // Пятница предыдущей недели

    private var m_withSpod:     bool = false;
    private var m_isPeriodYear: bool = false;
    private var m_isPrintSpod:  bool = false;

    /**
     * Настройка вида печати. (0 - все, 1 - по РПС, 2 - ненулевые)
     */
    private const PRINT_REGPATH = "REPTREG/REP_GROUPS/BALANCE_ACCOUNTS/ПЕЧАТЬ ФОРМЫ 101";

    /**
     * Все счета.
     */
    private const PRINT_KIND_ALL     = 0;

    /**
     * Счета по РПС.
     */
    private const PRINT_KIND_BWP     = 1;

    /**
     * Ненулевые счета.
     */
    private const PRINT_KIND_NOZ     = 2;

    /**
     * Вид печати счетов. (0 - все, 1 - по РПС, 2 - ненулевые)
     */
    private var   m_isPrintKind = PRINT_KIND_ALL;

    /**
     * Точность для главы Д.
     */
    private var m_precisionChapter5   : Integer;

    /**
     * Номер текущей главы.
     */
    private var m_chapter: Integer;
    /**
     * Получить вид печати отчета.
     * @return Значение настройки. (0 - все, 1 - по РПС, 2 - ненулевые)
     */
    private macro getPrintKind()
        var val_type = V_UNDEF,
            err_code = 0,
            value      = PRINT_KIND_ALL;

        val_type = GetRegistryValue( PRINT_REGPATH, V_INTEGER, value, err_code );

        if ( (err_code != 0) OR (val_type != V_INTEGER) )
            MsgBox( "Ошибка чтения настройки|", PRINT_REGPATH );
            Exit(1);
        else
            if ( (value < PRINT_KIND_ALL) OR (value > PRINT_KIND_NOZ) )
                MsgBox( "Некорректное значение настройки|", PRINT_REGPATH, "|будут напечатаны все счета");
                value = PRINT_KIND_ALL;
            end;
        end;

        return value;
    end;

    private macro LastWeek(bdat, edat, mon, fri)
        //debugbreak;
        var ed = edat - date(07,01,1900);
        ed = mod(ed, 7);
        var bd = bdat - date(07,01,1900);
        bd = mod(bd, 7);
        //if( wd == 0 ) wd = 7; end; // Это - воскресенье 
        mon = bdat-1;
        fri = edat;
        /*
        if( (ed == 0) and (bd == 1) )
            mon = edat-7;
            fri = edat;
        else
            mon = edat - (ed + 7);
            fri = edat - ed;
        end;
        */
        /*
        if( wd > 5) 
            mon = dat - (wd - 1);
            fri = dat - (wd - 5);
        else
        */
        /*
            mon = dat - (wd + 6);
            fri = dat - (wd + 2);
        */
        //end;
        SetParm(3,mon);
        SetParm(4,fri);
    end;

    private macro setHeadTableForExcel;
        var HeadTable;
        if (m_DopFild)
            HeadTable = 
            "┌─────────────────┬───────────────────────────┬────────────────────┬─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┬────────────────────┬────────────────────┐\n"+
            "│   Номер счета   │       Наименование        │  Входящие остатки  │                                                 Обороты за отчетный период                                                  │ Исходящие остатки  │                    │\n"+
            "│ первого(второго)│    разделов и счетов      │  на отчетную дату  ├──────────────────────────────────────────────────────────────┬──────────────────────────────────────────────────────────────┤  на отчетную дату  │                    │\n"+
            "│     порядка     │         баланса           │    (в рублях,      │                          по дебету                           │                           по кредиту                         │    (в рублях,      │    Разница между   │\n"+
            "├────────┬────────┤                           │иностранной валюте  ├────────────────────┬────────────────────┬────────────────────┼────────────────────┬────────────────────┬────────────────────┤иностранной валюте  │    исходящими и    │\n"+
            "│первого │второго │                           │   и драгоценных    │      в рублях      │ иностранная валюта │        итого       │      в рублях      │ иностранная валюта │        итого       │   и драгоценных    │входящими остатками │\n"+
            "│порядка │порядка │                           │     металлах       │                    │   и драгоценные    │                    │                    │   и драгоценные    │                    │     металлах       │    (в млн. руб.)   │\n"+
            "│        │        │                           │    в рублевом      │                    │      металлы в     │                    │                    │      металлы в     │                    │    в рублевом      │                    │\n"+
            "│        │        │                           │    эквиваленте)    │                    │рублевом эквиваленте│                    │                    │рублевом эквиваленте│                    │    эквиваленте)    │                    │\n"+
            "├────────┼────────┼───────────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┤\n"+
            "│    1   │   2    │            3              │          4         │          5         │          6         │          7         │          8         │          9         │         10         │         11         │         12         │\n"+
            "├────────┼────────┼───────────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┤";
            /*
             /----8---/----8---/------------27-------------/---------20---------/---------20---------/---------20---------/---------20---------/---------20---------/---------20---------/---------20---------/---------20---------/---------20---------/
            */
        else
            HeadTable = 
            "┌─────────────────┬───────────────────────────┬────────────────────┬─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┬────────────────────┐\n"+
            "│   Номер счета   │       Наименование        │  Входящие остатки  │                                                 Обороты за отчетный период                                                  │ Исходящие остатки  │\n"+
            "│ первого(второго)│    разделов и счетов      │  на отчетную дату  ├──────────────────────────────────────────────────────────────┬──────────────────────────────────────────────────────────────┤  на отчетную дату  │\n"+
            "│     порядка     │         баланса           │    (в рублях,      │                          по дебету                           │                           по кредиту                         │    (в рублях,      │\n"+
            "├────────┬────────┤                           │иностранной валюте  ├────────────────────┬────────────────────┬────────────────────┼────────────────────┬────────────────────┬────────────────────┤иностранной валюте  │\n"+
            "│первого │второго │                           │   и драгоценных    │      в рублях      │ иностранная валюта │        итого       │      в рублях      │ иностранная валюта │        итого       │   и драгоценных    │\n"+
            "│порядка │порядка │                           │     металлах       │                    │   и драгоценные    │                    │                    │   и драгоценные    │                    │     металлах       │\n"+
            "│        │        │                           │    в рублевом      │                    │      металлы в     │                    │                    │      металлы в     │                    │    в рублевом      │\n"+
            "│        │        │                           │    эквиваленте)    │                    │рублевом эквиваленте│                    │                    │рублевом эквиваленте│                    │    эквиваленте)    │\n"+
            "├────────┼────────┼───────────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┤\n"+
            "│    1   │   2    │            3              │          4         │          5         │          6         │          7         │          8         │          9         │         10         │         11         │\n"+
            "├────────┼────────┼───────────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┤";
            /*
             /----8---/----8---/------------27-------------/---------20---------/---------20---------/---------20---------/---------20---------/---------20---------/---------20---------/---------20---------/---------20---------/
            */
        end;
        return HeadTable;
    end;

    private macro constructorTApplication7ReportView(withSpod)
        debugbreak;
        // DAI 17.01.2015 Печать в Эксель
        var PrintExcel, stat;
        GetRegistryValue("PRBB\\REPTREG\\ПРИЛ 8\\ПЕЧАТЬ В EXCEL", V_BOOL, PrintExcel, stat );
        if  ( ( stat == 0 ) and ( PrintExcel ) )
            if (GetTrue(TRUE,"Вывести форму в Эксель?"))
                m_formExcelFormat  = True;
                /*Пока старый вариант вывода напрямую в Excel затем попробуем перейти на вариант вывода через экспортный xml файл. Часть будущей реализации оставил в коде*/
                nmob = CreateObject ("rsax","TRsAxServer",string("RsAxServer", UserNumber()),IsStandAlone());
                nmtlg = nmob.CreateComObject ("Excel.Application");
                obBook = nmtlg.Workbooks.add;
                obSheet = obBook.ActiveSheet(); 
                
                if (GetTrue(TRUE,"Вывести доп поле?"))
                    m_DopFild = True;
                    LastWeek(rcbApplication().currentReport.context.period.BeginDate,rcbApplication().currentReport.context.period.EndDate,@m_LastMonday,@m_LastFriday);
                else
                    m_DopFild = False;
                end;
                
            end;
        end;

        initRcbReportView("",
                          "",
                          RCB_PK_PERIOD,
                          DATE_IN_PERIOD_FORMAT
                         );


        m_tableReport = CTableReport( 1, TRUE, FALSE );

        m_tableReport.addColumn( "", 5  );    /* Номер счета первого порядка */
        m_tableReport.addColumn( "", 5  );    /* Номер счета второго порядка */
        m_tableReport.addColumn( "", 25 );    /* Наименование счетов баланса */
        m_tableReport.addColumn( "", 18, AL_RIGHT );    /* Входящие остатки            */
        m_tableReport.addColumn( "", 18, AL_RIGHT );    /* Обороты по дебету в рублях  */
        m_tableReport.addColumn( "", 18, AL_RIGHT );    /* Обороты по дебету в валюте  */
        m_tableReport.addColumn( "", 18, AL_RIGHT );    /* Обороты по дебету итого     */
        m_tableReport.addColumn( "", 18, AL_RIGHT );    /* Обороты по кредиту в рублях */
        m_tableReport.addColumn( "", 18, AL_RIGHT );    /* Обороты по кредиту в валюте */
        m_tableReport.addColumn( "", 18, AL_RIGHT );    /* Обороты по кредиту итого    */
        m_tableReport.addColumn( "", 18, AL_RIGHT );    /* Исходящие остатки           */
        if (m_DopFild)
            m_tableReport.addColumn( "", 18, AL_RIGHT );/* Разница между исх. и вх.    */
        end;

        reportWidth = m_tableReport.getSumLen();
        setReportWidth(reportWidth);

        m_planNumber  = balanceParameters().getPlanNumber();

        m_isPeriodYear = rcbApplication().currentReport.context.period.kind == RCB_PK_YEAR;
        m_isPrintSpod  = withSpod AND (NOT m_isPeriodYear);
        m_withSpod     = withSpod;
        m_isPrintKind  = getPrintKind();

        m_precisionChapter5   = balanceParameters().getPrecisionChapter5();
    end;

    /**
     * Указать точность для значения.
     * Количество знаков после запятой считывается из настройки реестра для главы Д.
     * @param value Значение, для которого применяем точность.
     * @return Если глава Д, то значение с изменненной точность, иначе точность не меняется.
     */
    private macro changePrecision(value)
        if (valType(value) == V_UNDEF)
            value = 0;
        end;

        if ((m_chapter == 5) AND (value != ""))
            return execExp("String(" + value + ":0:" + m_precisionChapter5 + ")");
        else
            return value;
        end;
    end;

    macro printTableHeader()
    end;

    macro printTableBottom()
    end;

    macro printFreeString(str)
        m_tableReport.printFreeString(str);
    end;

    macro printNamesZone()
    end;

    /**
     * Целочисленное деление
     */
    private macro div(a,b)
        return int(round(a/b,0));
    end;

    /**
    * Получить имя столбца
    */
    private macro getColumnName(i)
        var acode = codefor("A")+m_offsetC+i;
        if (acode > codefor("Z"))
          return       (
                        StrFor(div(acode-codefor("A"),codefor("Z")-codefor("A"))+codefor("A")-1)
                        +
                        StrFor(mod(acode-codefor("A"),codefor("Z")-codefor("A"))+codefor("A")-1)
                       );
        else
          return StrFor(acode);
        end;
    end;

    private macro StringInExcel( text, align )

        if (ValType(m_offsetR) == 0)
          m_offsetR = 2;
        end;
        if (ValType(m_offsetC) == 0)
          m_offsetC = 1;
        end;

        obSheet.Range(getColumnName(m_offsetC-1)+(m_Row + m_offsetR)+":"+
                      getColumnName(m_offsetC+9)+(m_Row + m_offsetR)).Merge;
        if   ( align == ALIGN_LEFT )
            obSheet.Range(getColumnName(m_offsetC-1)+(m_Row + m_offsetR)).HorizontalAlignment = -4131;
        elif ( align == ALIGN_CENTER )
            obSheet.Range(getColumnName(m_offsetC-1)+(m_Row + m_offsetR)).HorizontalAlignment = -4108;
        elif ( align == ALIGN_RIGHT )
            obSheet.Range(getColumnName(m_offsetC-1)+(m_Row + m_offsetR)).HorizontalAlignment = -4152;
        else
            obSheet.Range(getColumnName(m_offsetC-1)+(m_Row + m_offsetR)).HorizontalAlignment = -4131;
        end;
        obSheet.Range(getColumnName(m_offsetC-1)+(m_Row + m_offsetR)).Value = text;
        m_Row = m_Row + 1;

    end;

    macro printLendingAgencyCodeZone()
        /*_____________________________________________________________________________________*/
        var bankName = TArray();
        var i;
        PrintBankHeaderBuf(НомерПодразделения,
                     RcbOrganizationStructure,
                                 ReportWidth,
                                     bankName,
                                            0);
        var periodName = RcbReportView("", "", RcbArray().initialize(RCB_PK_DAY, RCB_PK_MONTH, RCB_PK_QUARTER, RCB_PK_HALFYEAR, RCB_PK_PERIOD), DATE_IN_PERIOD_FORMAT).getNamesZone().getPeriodName();
        /*_____________________________________________________________________________________*/

        if (not m_formExcelFormat)
            [#]( strAlign( "                              Приложение 7 ", ReportWidth, STR_ALIGN_RIGHT ) );
            [#]( strAlign( " к Правилам ведения бухгалтерского учета   ", ReportWidth, STR_ALIGN_RIGHT ) );
            [#]( strAlign( " в кредитных организациях, расположенных   ", ReportWidth, STR_ALIGN_RIGHT ) );
            [#]( strAlign( " на территории Российской Федерации        ", ReportWidth, STR_ALIGN_RIGHT ) );
            [ ];
            [#]( strAlign( " (Приложение к Положению Банка России      ", ReportWidth, STR_ALIGN_RIGHT ) );
            [#]( strAlign( " от 16 июля 2012 года N 385-П              ", ReportWidth, STR_ALIGN_RIGHT ) );
            [#]( strAlign( " \"О правилах ведения бухгалтерского учета ", ReportWidth, STR_ALIGN_RIGHT ) );
            [#]( strAlign( " в кредитных организациях, расположенных   ", ReportWidth, STR_ALIGN_RIGHT ) );
            [#]( strAlign( " на территории Российской Федерации\")     ", ReportWidth, STR_ALIGN_RIGHT ) );
            [ ];

            /*________________________________________________________________________________________*/

            i = 0;
            while(i < bankName.Size())
              [#]( strAlign(bankName[i], ReportWidth, STR_ALIGN_CENTER) );
              i = i+1;
            end;

            [ ];
            /*________________________________________________________________________________________*/

            [#]( strAlign(        "Оборотная ведомость", ReportWidth, STR_ALIGN_CENTER ) );
            [#]( strAlign( "по счетам кредитной организации", ReportWidth, STR_ALIGN_CENTER ) );
            [#]( strAlign( periodName, ReportWidth, STR_ALIGN_CENTER ) );
        else
            StringInExcel( "                              Приложение 7 ", ALIGN_RIGHT );
            StringInExcel( " к Правилам ведения бухгалтерского учета   ", ALIGN_RIGHT );
            StringInExcel( " в кредитных организациях, расположенных   ", ALIGN_RIGHT );
            StringInExcel( " на территории Российской Федерации        ", ALIGN_RIGHT );
            StringInExcel( "", ALIGN_RIGHT );
            StringInExcel( " (Приложение к Положению Банка России      ", ALIGN_RIGHT );
            StringInExcel( " от 16 июля 2012 года N 385-П              ", ALIGN_RIGHT );
            StringInExcel( " \"О правилах ведения бухгалтерского учета ", ALIGN_RIGHT );
            StringInExcel( " в кредитных организациях, расположенных   ", ALIGN_RIGHT );
            StringInExcel( " на территории Российской Федерации\")     ", ALIGN_RIGHT );
            StringInExcel( "", ALIGN_RIGHT );

            /*________________________________________________________________________________________*/

            i = 0;
            while(i < bankName.Size())
              StringInExcel(trim(bankName[i]), ALIGN_CENTER);
              i = i+1;
            end;

            StringInExcel( "", ALIGN_RIGHT );
            /*________________________________________________________________________________________*/

            StringInExcel(        "Оборотная ведомость", ALIGN_CENTER );
            StringInExcel( "по счетам кредитной организации", ALIGN_CENTER );
            StringInExcel( periodName, ALIGN_CENTER );

            /*
            m_ExcelRep = CMakeReport( setHeadTableForExcel() );
            m_ExcelRep.AddPrintCell( "                              Приложение 7 ", m_ExcelRep.GetHeaderWidth(), 0, "r", REP_ELEM_STR ); m_ExcelRep.AddStr();
            m_ExcelRep.AddPrintCell( " к Правилам ведения бухгалтерского учета   ", m_ExcelRep.GetHeaderWidth(), 0, "r", REP_ELEM_STR ); m_ExcelRep.AddStr();
            m_ExcelRep.AddPrintCell( " в кредитных организациях, расположенных   ", m_ExcelRep.GetHeaderWidth(), 0, "r", REP_ELEM_STR ); m_ExcelRep.AddStr();
            m_ExcelRep.AddPrintCell( " на территории Российской Федерации        ", m_ExcelRep.GetHeaderWidth(), 0, "r", REP_ELEM_STR ); m_ExcelRep.AddStr();
            m_ExcelRep.AddEmptyStr;
            m_ExcelRep.AddPrintCell( " (Приложение к Положению Банка России      ", m_ExcelRep.GetHeaderWidth(), 0, "r", REP_ELEM_STR ); m_ExcelRep.AddStr();
            m_ExcelRep.AddPrintCell( " от 16 июля 2012 года N 385-П              ", m_ExcelRep.GetHeaderWidth(), 0, "r", REP_ELEM_STR ); m_ExcelRep.AddStr();
            m_ExcelRep.AddPrintCell( " \"О правилах ведения бухгалтерского учета ", m_ExcelRep.GetHeaderWidth(), 0, "r", REP_ELEM_STR ); m_ExcelRep.AddStr();
            m_ExcelRep.AddPrintCell( " в кредитных организациях, расположенных   ", m_ExcelRep.GetHeaderWidth(), 0, "r", REP_ELEM_STR ); m_ExcelRep.AddStr();
            m_ExcelRep.AddPrintCell( " на территории Российской Федерации\")     ", m_ExcelRep.GetHeaderWidth(), 0, "r", REP_ELEM_STR ); m_ExcelRep.AddStr();
            m_ExcelRep.AddEmptyStr;

            /*________________________________________________________________________________________*/

            i = 0;
            while(i < bankName.Size())
              m_ExcelRep.AddPrintCell( trim(bankName[i]), m_ExcelRep.GetHeaderWidth(), 0, "c", REP_ELEM_STR ); m_ExcelRep.AddStr();
              i = i+1;
            end;

            m_ExcelRep.AddEmptyStr;
            /*________________________________________________________________________________________*/

            m_ExcelRep.AddPrintCell(        "Оборотная ведомость", m_ExcelRep.GetHeaderWidth(), 0, "c", REP_ELEM_STR ); m_ExcelRep.AddStr();
            m_ExcelRep.AddPrintCell( "по счетам кредитной организации", m_ExcelRep.GetHeaderWidth(), 0, "c", REP_ELEM_STR ); m_ExcelRep.AddStr();
            m_ExcelRep.AddPrintCell( periodName, m_ExcelRep.GetHeaderWidth(), 0, "c", REP_ELEM_STR ); m_ExcelRep.AddStr();
            m_ExcelRep.AddEmptyStr;
            */

        end;
    end;

    macro printSignatureZone()
        if (not m_formExcelFormat)
            [   #                       _____________________  #                                                 #                       _____________________  #  ]( {Name_Boss}:l, {FIO_Boss}, {Name_Book}:l, {FIO_Book} );
            [                                                     ];
            [   #                                                 ]( trim( string( {curdate}:m ) ) );
            [─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────];
            [   Примечание: по балансовым счетам, не имеющим признака ( А или П ), сальдо   ];
            [               по которым на конец рабочего дня должно быть равно нулю,        ];
            [               обороты в ежедневной оборотной ведомости показываются в разделе ];
            [               "Актив" по дебету и кредиту в равных суммах.                    ];
        else
           m_Row = m_Row + 2;
           StringInExcel( "   " + {Name_Boss} + " _____________________  " + {FIO_Boss} + "           " +
                                      {Name_Book} + " _____________________  " + {FIO_Book}, ALIGN_LEFT );
           StringInExcel( trim( string( {curdate}:m ) ), ALIGN_LEFT );
           m_Row = m_Row + 2;
           StringInExcel( "   Примечание: по балансовым счетам, не имеющим признака ( А или П ), сальдо   ", ALIGN_LEFT );
           StringInExcel( "               по которым на конец рабочего дня должно быть равно нулю,        ", ALIGN_LEFT );
           StringInExcel( "               обороты в ежедневной оборотной ведомости показываются в разделе ", ALIGN_LEFT );
           StringInExcel( "               \"Актив\" по дебету и кредиту в равных суммах.                  ", ALIGN_LEFT );

           obSheet.Range(getColumnName(-0)+":"+getColumnName(-0)).ColumnWidth = 8;
           obSheet.Range(getColumnName(+2)+":"+getColumnName(+2)).ColumnWidth = 35;
           obSheet.Range(getColumnName(+2)+":"+getColumnName(+3)).ColumnWidth = 20;
           obSheet.Range(getColumnName(+4)+":"+getColumnName(+9)).ColumnWidth = 25;
           obSheet.Range(getColumnName(10)+":"+getColumnName(10)).ColumnWidth = 20;

           if (m_DopFild)
              obSheet.Range(getColumnName(11)+":"+getColumnName(11)).ColumnWidth = 31;
           end;

           obSheet.Rows((1)+":"+(m_Row)).EntireRow.AutoFit;

           obSheet.Columns("A:A").Delete;
           obSheet.Range("A1").Select;

           nmtlg.visible = true;// KS 25.11.2011 Печать в Эксель

            /*
            m_ExcelRep.AddEmptyStr;
            m_ExcelRep.AddPrintCell("   " + {Name_Boss} + " _____________________  " + {FIO_Boss}, 80, 0, "l", REP_ELEM_STR );
            m_ExcelRep.AddPrintCell("",10,0,0, REP_ELEM_STR );
            m_ExcelRep.AddPrintCell("   " + {Name_Book} + " _____________________  " + {FIO_Book}, 80, 0, "l", REP_ELEM_STR );
            m_ExcelRep.AddStr();
            m_ExcelRep.AddEmptyStr;
            m_ExcelRep.AddPrintCell("   " + trim( string( {curdate}:m ) ) , 80, 0, "l", REP_ELEM_STR ); m_ExcelRep.AddStr();
            m_ExcelRep.AddEmptyStr;
            m_ExcelRep.AddPrintCell("   Примечание: по балансовым счетам, не имеющим признака ( А или П ), сальдо   ", 80, 0, "l", REP_ELEM_STR ); m_ExcelRep.AddStr();
            m_ExcelRep.AddPrintCell("               по которым на конец рабочего дня должно быть равно нулю,        ", 80, 0, "l", REP_ELEM_STR ); m_ExcelRep.AddStr();
            m_ExcelRep.AddPrintCell("               обороты в ежедневной оборотной ведомости показываются в разделе ", 80, 0, "l", REP_ELEM_STR ); m_ExcelRep.AddStr();
            m_ExcelRep.AddPrintCell("               \"Актив\" по дебету и кредиту в равных суммах.                    ", 80, 0, "l", REP_ELEM_STR ); m_ExcelRep.AddStr();

            m_ExcelRep.PrintWinRep();
            m_ExcelRep.ShowWinRep();
            */
        end;
    end;

    macro printChapterHeader(chapterName : String)
        if (not m_formExcelFormat)
            PrintLn(strAlign(chapterName, ReportWidth, STR_ALIGN_CENTER));
            [┌─────────────────┬───────────────────────────┬────────────────────┬─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┬────────────────────┐];
            [│   Номер счета   │       Наименование        │  Входящие остатки  │                                                 Обороты за отчетный период                                                  │ Исходящие остатки  │];
            [│ первого(второго)│    разделов и счетов      │  на отчетную дату  ├──────────────────────────────────────────────────────────────┬──────────────────────────────────────────────────────────────┤  на отчетную дату  │];
            [│     порядка     │         баланса           │    (в рублях,      │                          по дебету                           │                           по кредиту                         │    (в рублях,      │];
            [├────────┬────────┤                           │иностранной валюте  ├────────────────────┬────────────────────┬────────────────────┼────────────────────┬────────────────────┬────────────────────┤иностранной валюте  │];
            [│первого │второго │                           │   и драгоценных    │      в рублях      │ иностранная валюта │        итого       │      в рублях      │ иностранная валюта │        итого       │   и драгоценных    │];
            [│порядка │порядка │                           │     металлах       │                    │   и драгоценные    │                    │                    │   и драгоценные    │                    │     металлах       │];
            [│        │        │                           │    в рублевом      │                    │      металлы в     │                    │                    │      металлы в     │                    │    в рублевом      │];
            [│        │        │                           │    эквиваленте)    │                    │рублевом эквиваленте│                    │                    │рублевом эквиваленте│                    │    эквиваленте)    │];
            [├────────┼────────┼───────────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┤];
            [│    1   │   2    │            3              │          4         │          5         │          6         │          7         │          8         │          9         │         10         │         11         │];
            [├────────┴────────┴───────────────────────────┴────────────────────┴────────────────────┴────────────────────┴────────────────────┴────────────────────┴────────────────────┴────────────────────┴────────────────────┤];
        else
            m_Row = m_Row + 1;
            StringInExcel( chapterName, ALIGN_CENTER );
            var ek = 9;
            m_Row = m_Row + 1;
            m_offsetRbegin = m_Row + 2;
            obSheet.Range(getColumnName(m_offsetC-1)+(m_Row + m_offsetR)+":"+
                          getColumnName(m_offsetC+0)+(m_Row + m_offsetR+1)).Merge;
            obSheet.Range(getColumnName(m_offsetC-1)+(m_Row + m_offsetR)).Value = "Номер счета\n1 (2) порядка";
            obSheet.Range(getColumnName(m_offsetC+1)+(m_Row + m_offsetR)+":"+
                          getColumnName(m_offsetC+1)+(m_Row + m_offsetR+2)).Merge;
            obSheet.Range(getColumnName(m_offsetC+1)+(m_Row + m_offsetR)).Value = "Наименование\nразделов и счетов\nбаланса";
            obSheet.Range(getColumnName(m_offsetC+2)+(m_Row + m_offsetR)+":"+
                          getColumnName(m_offsetC+2)+(m_Row + m_offsetR+2)).Merge;
            obSheet.Range(getColumnName(m_offsetC+2)+(m_Row + m_offsetR)).Value = "Входящие остатки\nна отчетную дату\n(в рублях,\nин.валюта и\nдраг.металлы\nв рублевом\nэквиваленте)";
            obSheet.Range(getColumnName(m_offsetC+3)+(m_Row + m_offsetR)+":"+
                          getColumnName(m_offsetC+8)+(m_Row + m_offsetR)).Merge;
            obSheet.Range(getColumnName(m_offsetC+3)+(m_Row + m_offsetR)).Value = "Обороты за отчетный период";
            obSheet.Range(getColumnName(m_offsetC+3)+(m_Row + m_offsetR+1)+":"+
                          getColumnName(m_offsetC+5)+(m_Row + m_offsetR+1)).Merge;
            obSheet.Range(getColumnName(m_offsetC+3)+(m_Row + m_offsetR+1)).Value = "по дебету";
            obSheet.Range(getColumnName(m_offsetC+6)+(m_Row + m_offsetR+1)+":"+
                          getColumnName(m_offsetC+8)+(m_Row + m_offsetR+1)).Merge;
            obSheet.Range(getColumnName(m_offsetC+6)+(m_Row + m_offsetR+1)).Value = "по кредиту";
            obSheet.Range(getColumnName(m_offsetC+9)+(m_Row + m_offsetR)+":"+
                          getColumnName(m_offsetC+9)+(m_Row + m_offsetR+2)).Merge;
            obSheet.Range(getColumnName(m_offsetC+9)+(m_Row + m_offsetR)).Value = "Исходящие остатки\nна отчетную дату\n(в рублях,\nин.валюта и\nдраг.металлы\nв рублевом\nэквиваленте)";
            if (m_DopFild)
               ek = 10;
               obSheet.Range(getColumnName(m_offsetC+ek)+(m_Row + m_offsetR)+":"+
                             getColumnName(m_offsetC+ek)+(m_Row + m_offsetR+2)).Merge;
               obSheet.Range(getColumnName(m_offsetC+ek)+(m_Row + m_offsetR)).Value = "Разница между исходящими и\nвходящими остатками\n(в млн. руб.)\n ";
            end;
            obSheet.Range(getColumnName(m_offsetC-1)+(m_Row + m_offsetR+2)).Value = "первого\nпорядка";
            obSheet.Range(getColumnName(m_offsetC-0)+(m_Row + m_offsetR+2)).Value = "второго\nпорядка";
            obSheet.Range(getColumnName(m_offsetC+3)+(m_Row + m_offsetR+2)).Value = "в рублях";
            obSheet.Range(getColumnName(m_offsetC+4)+(m_Row + m_offsetR+2)).Value = "ин.валюта и\nдраг.металлы в\nрублевом эквиваленте";
            obSheet.Range(getColumnName(m_offsetC+5)+(m_Row + m_offsetR+2)).Value = "итого";
            obSheet.Range(getColumnName(m_offsetC+6)+(m_Row + m_offsetR+2)).Value = "в рублях";
            obSheet.Range(getColumnName(m_offsetC+7)+(m_Row + m_offsetR+2)).Value = "ин.валюта и\nдраг.металлы в\nрублевом эквиваленте";
            obSheet.Range(getColumnName(m_offsetC+8)+(m_Row + m_offsetR+2)).Value = "итого";
            obSheet.Range(getColumnName(m_offsetC-1)+(m_Row + m_offsetR+3)).Value = "1";
            obSheet.Range(getColumnName(m_offsetC-0)+(m_Row + m_offsetR+3)).Value = "2";
            obSheet.Range(getColumnName(m_offsetC+1)+(m_Row + m_offsetR+3)).Value = "3";
            obSheet.Range(getColumnName(m_offsetC+2)+(m_Row + m_offsetR+3)).Value = "4";
            obSheet.Range(getColumnName(m_offsetC+3)+(m_Row + m_offsetR+3)).Value = "5";
            obSheet.Range(getColumnName(m_offsetC+4)+(m_Row + m_offsetR+3)).Value = "6";
            obSheet.Range(getColumnName(m_offsetC+5)+(m_Row + m_offsetR+3)).Value = "7";
            obSheet.Range(getColumnName(m_offsetC+6)+(m_Row + m_offsetR+3)).Value = "8";
            obSheet.Range(getColumnName(m_offsetC+7)+(m_Row + m_offsetR+3)).Value = "9";
            obSheet.Range(getColumnName(m_offsetC+8)+(m_Row + m_offsetR+3)).Value = "10";
            obSheet.Range(getColumnName(m_offsetC+9)+(m_Row + m_offsetR+3)).Value = "11";
            if (m_DopFild)
               obSheet.Range(getColumnName(m_offsetC+ek)+(m_Row + m_offsetR+3)).Value = "12";
            end;
            obSheet.Range(getColumnName(m_offsetC-1)+(m_Row + m_offsetR)+":"+
                          getColumnName(m_offsetC+ek)+(m_Row + m_offsetR+3)).HorizontalAlignment = -4108;
            obSheet.Range(getColumnName(m_offsetC-1)+(m_Row + m_offsetR)+":"+
                          getColumnName(m_offsetC+ek)+(m_Row + m_offsetR+3)).Font.Bold = True;
            m_Row = m_Row + 4;

            /*
            m_ExcelRep.AddPrintCell(chapterName, m_ExcelRep.GetHeaderWidth(), 0, "c", REP_ELEM_STR ); m_ExcelRep.AddStr();
            m_ExcelRep.AddStr(true);
            */
        end;
    end;

    macro printSeparator()
        m_tableReport.printFreeString("─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────");
    end;

    macro PrintTableStringToExcel();
        var i, param, f = "l", len, t = REP_ELEM_STR;
        i = 1;
        while (GetParm(i, param))
            if ((i > 3) and (i < 12))
               if (ValType(param) == V_STRING)
                   param = strsubst(param,".",",");
               end;
               obSheet.Range(getColumnName(i + m_offsetC - 2)+(m_Row + m_offsetR)).NumberFormat = "0,00";
            end;
            obSheet.Range(getColumnName(i + m_offsetC - 2)+(m_Row + m_offsetR)).Value = param;
            i = i + 1;
        end;
        obSheet.Range(getColumnName(m_offsetC-1)+(m_Row + m_offsetR) + ":" +
                      getColumnName(i + m_offsetC - 3)+(m_Row + m_offsetR)).VerticalAlignment = -4160;
        obSheet.Range(getColumnName(m_offsetC-1)+(m_Row + m_offsetR) + ":" +
                      getColumnName(i + m_offsetC - 3)+(m_Row + m_offsetR)).WrapText = True;
        m_Row = m_Row + 1;
        /*
               f = "r";
               t = REP_ELEM_STR;
               if (ValType(param) == V_STRING)
                 param = Double(param); //strsubst(param,".",",");
               end;
            end;
            if (Index(param,"ИТОГО"))
                len = 20;
            else
                len = 0;
            end;
            m_ExcelRep.AddPrintCell(param, len, 0, f);
            i = i + 1;
        end;
        m_ExcelRep.AddStr();
               */

    end;

    macro RestBal(bal, dey);
        var StrSQL = "SELECT NVL ("
                  +"\n          SUM(NVL ("
                  +"\n                    rsi_rsb_account.RestA ("
                  +"\n                    account.t_Account,"
                  +"\n                    '" + dey + "'," //TO_DATE('" + dey + "','dd.mm.yyyy'),"
                  +"\n                    account.t_Chapter,"
                  +"\n                    0),"
                  +"\n                 0)),"
                  +"\n          0) restb_fordate"
                  +"\n  FROM daccblnc_dbt accblnc, daccount_dbt account"
                  +"\n WHERE     accblnc.t_Chapter = 1"
                  +"\n       AND accblnc.t_Code_Currency = 0"
                  +"\n       AND accblnc.t_Balance0 = '" + bal +"'"
                  +"\n       AND account.t_Chapter = accblnc.t_Chapter"
                  +"\n       AND account.t_Code_Currency = accblnc.t_Code_Currency"
                  +"\n       AND account.t_Account = accblnc.t_Account";
        var rs = TRsbDataset(StrSQL);
        rs.movenext;
        return Abs(rs.restb_fordate);
    end;

    macro printTableString(balanceOrder, balance, nameBalance, _inItog, _dtRub, _dtCur, _dtItog, _ktRub, _ktCur, _ktItog, _outItog, _isPrintSpod, _nameSpod, _dSpodRub, _dSpodCur, _dSpodItog, _kSpodRub, _kSpodCur, _kSpodItog)
        var balance1, balance2, PrItog;

        var inItog      = changePrecision(_inItog );
        var dtRub       = changePrecision(_dtRub  );
        var dtCur       = changePrecision(_dtCur  );
        var dtItog      = changePrecision(_dtItog );
        var ktRub       = changePrecision(_ktRub  );
        var ktCur       = changePrecision(_ktCur  );
        var ktItog      = changePrecision(_ktItog );
        var outItog     = changePrecision(_outItog);
        var isPrintSpod = _isPrintSpod;
        var nameSpod    = _nameSpod;
        var dSpodRub    = changePrecision(_dSpodRub );
        var dSpodCur    = changePrecision(_dSpodCur );
        var dSpodItog   = changePrecision(_dSpodItog);
        var kSpodRub    = changePrecision(_kSpodRub );
        var kSpodCur    = changePrecision(_kSpodCur );
        var kSpodItog   = changePrecision(_kSpodItog);
        var delta;

        if (balanceOrder == 1)
            PrItog = "ИТОГО по счету первого порядка:";
            balance1 = balance;
            balance2 = "";
        else
            PrItog = "ИТОГО по счету второго порядка:";
            balance1 = "";
            balance2 = balance;
            //debugbreak;
            if (m_DopFild)
               /*
               delta = (RestBal(balance, m_LastFriday) - 
                        RestBal(balance, m_LastMonday))/1000000;
               */
               delta = div ((_outItog - _inItog) , 1000000);
            else
               delta = "";
            end;

        end;


        if (not m_formExcelFormat)
            printFreeString(PrItog);

            m_tableReport.PrintStringTransferByWord(balance1, balance2, nameBalance, inItog, dtRub, dtCur, dtItog, ktRub, ktCur, ktItog, outItog);

            if (isPrintSpod)
                printFreeString(nameSpod);
                m_tableReport.printString("", "", "", "", dSpodRub, dSpodCur, dSpodItog, kSpodRub, kSpodCur, kSpodItog, "");
            end;
            printSeparator();
        else
            //m_ExcelRep.AddPrintCell(PrItog, m_ExcelRep.GetHeaderWidth(), 0, "l", REP_ELEM_STR ); m_ExcelRep.AddStr();
            //PrintTableStringToExcel(PrItog,  "", "", "", "", "", "", "");
            StringInExcel( PrItog, ALIGN_LEFT );
            if (m_DopFild)
                PrintTableStringToExcel(balance1, balance2, nameBalance, inItog, dtRub, dtCur, dtItog, ktRub, ktCur, ktItog, outItog, delta);
            else
                PrintTableStringToExcel(balance1, balance2, nameBalance, inItog, dtRub, dtCur, dtItog, ktRub, ktCur, ktItog, outItog);
            end;
            if (isPrintSpod)
                StringInExcel(nameSpod, ALIGN_LEFT);
                PrintTableStringToExcel("", "", "", "", dSpodRub, dSpodCur, dSpodItog, kSpodRub, kSpodCur, kSpodItog, "");
            end;
        end;
    end;

    macro printItog(nameItog, _inItog, _dtRub, _dtCur, _dtItog, _ktRub, _ktCur, _ktItog, _outItog, _isPrintSpod, _nameSpod, _dSpodRub, _dSpodCur, _dSpodItog, _kSpodRub, _kSpodCur, _kSpodItog)

        var inItog      = changePrecision(_inItog );
        var dtRub       = changePrecision(_dtRub  );
        var dtCur       = changePrecision(_dtCur  );
        var dtItog      = changePrecision(_dtItog );
        var ktRub       = changePrecision(_ktRub  );
        var ktCur       = changePrecision(_ktCur  );
        var ktItog      = changePrecision(_ktItog );
        var outItog     = changePrecision(_outItog);
        var isPrintSpod = _isPrintSpod;
        var nameSpod    = _nameSpod;
        var dSpodRub    = changePrecision(_dSpodRub );
        var dSpodCur    = changePrecision(_dSpodCur );
        var dSpodItog   = changePrecision(_dSpodItog);
        var kSpodRub    = changePrecision(_kSpodRub );
        var kSpodCur    = changePrecision(_kSpodCur );
        var kSpodItog   = changePrecision(_kSpodItog);

        if (not m_formExcelFormat)
            printFreeString(nameItog);
            m_tableReport.printString("", "", "", inItog, dtRub, dtCur, dtItog, ktRub, ktCur, ktItog, outItog);
            if (isPrintSpod)
                printFreeString(nameSpod);
                m_tableReport.printString("", "", "", "", dSpodRub, dSpodCur, dSpodItog, kSpodRub, kSpodCur, kSpodItog, "");
            end;
            printSeparator();
        else
            StringInExcel( nameItog, ALIGN_LEFT );
            //PrintTableStringToExcel(nameItog,  "", "", "", "", "", "", "");
            PrintTableStringToExcel("", "", "", inItog, dtRub, dtCur, dtItog, ktRub, ktCur, ktItog, outItog);
            if (isPrintSpod)
                StringInExcel( nameSpod, ALIGN_LEFT );
                //PrintTableStringToExcel(nameSpod,  "", "", "", "", "", "", "");
                PrintTableStringToExcel("", "", "", "", dSpodRub, dSpodCur, dSpodItog, kSpodRub, kSpodCur, kSpodItog, "");
            end;
        end;
    end;

    macro printKindHeader(kind)
        if (not m_formExcelFormat)
            printFreeString(strAlign(kind, reportWidth, STR_ALIGN_CENTER));
        else
            StringInExcel( kind, ALIGN_CENTER );
            /*
            m_ExcelRep.AddPrintCell("", 10, 0);
            m_ExcelRep.AddPrintCell(kind, m_ExcelRep.GetHeaderWidth() - 20, 0, "c");
            m_ExcelRep.AddStr();
            */
        end;
    end;

    macro getValue(value, chapter)
        if (value == NULL)
            return 0;
        end;      

        return value.exact;
    end;

    private macro GetPartitionName(chapter, partition)
        var query = " SELECT T_NAME_PART   "  +
                    "   FROM DPARTBLNC_DBT "  +
                    "  WHERE T_CHAPTER  =  " + chapter +
                    "    AND T_INUMPLAN =  " + m_planNumber +
                    "    AND T_PART     =  " + partition;

        var dataset = TRsbDataSet(query);

        dataset.moveNext();

        return dataset.name_part;
    end;

    macro printChapter(chapter, chapterName)
        m_chapter = chapter;

        var av = TBalanceAttribute("БАЛАНС");
        var currentPart;
        var sIn, sD, sDr, sDv, sK, sKr, sKv, sOut;
        var s9999_In, s9999_D, s9999_Dr, s9999_Dv, s9999_K, s9999_Kr, s9999_Kv, s9999_Out;
        var sPartIn, sPartD, sPartDr, sPartDv, sPartK, sPartKr, sPartKv, sPartOut;
        var sKindIn, sKindD, sKindDr, sKindDv, sKindK, sKindKr, sKindKv, sKindOut;
        var curIn, curD, curDr, curDv, curK, curKr, curKv, curOut;
        var balanceLevel1Debit, balanceLevel1DebitRouble, balanceLevel1DebitForeign;
        var balanceLevel1Credit, balanceLevel1CreditRouble, balanceLevel1CreditForeign;
        var balanceLevel1DebitSpod, balanceLevel1DebitRoubleSpod, balanceLevel1DebitForeignSpod;
        var balanceLevel1CreditSpod, balanceLevel1CreditRoubleSpod, balanceLevel1CreditForeignSpod;
        var balanceOrder;
        var prevBalance = "00000";

        var spod = TBalanceAttribute("СПОД");
        var spodValue;
        var spodD:      Money, spodDr:      Money, spodDv:      Money,  /* note: СПОД по БС 1 порядка */
            spodK:      Money, spodKr:      Money, spodKv:      Money,
            spodIn:     Money;

        var sSpodPartD: Money, sSpodPartDr: Money, sSpodPartDv: Money,  /* note: СПОД итоги по разделу */
            sSpodPartK: Money, sSpodPartKr: Money, sSpodPartKv: Money;

        var sSpodD:     Money, sSpodDr:     Money, sSpodDv:     Money,  /* note: СПОД итоги по активу/пассиву */
            sSpodK:     Money, sSpodKr:     Money, sSpodKv:     Money;

        printChapterHeader(chapterName);

        av.createBalanceIterator(chapter, KIND_ACTIVE, true, m_isPrintKind == PRINT_KIND_NOZ, m_isPrintKind == PRINT_KIND_BWP);
        av.sortIteratorByPart();

        sIn = 0; sD = 0; sDr = 0; sDv = 0; sK = 0; sKr = 0; sKv = 0; sOut = 0;
        sKindIn = 0; sKindD = 0; sKindDr = 0; sKindDv = 0; sKindK = 0; sKindKr = 0; sKindKv = 0; sKindOut = 0;
        sPartIn = 0; sPartD = 0; sPartDr = 0; sPartDv = 0; sPartK = 0; sPartKr = 0; sPartKv = 0; sPartOut = 0;
        currentPart = 0;

        spodD      = 0.0; spodDr      = 0.0; spodDv      = 0.0; spodK      = 0.0; spodKr      = 0.0; spodKv      = 0.0;
        sSpodPartD = 0.0; sSpodPartDr = 0.0; sSpodPartDv = 0.0; sSpodPartK = 0.0; sSpodPartKr = 0.0; sSpodPartKv = 0.0;
        sSpodD     = 0.0; sSpodDr     = 0.0; sSpodDv     = 0.0; sSpodK     = 0.0; sSpodKr     = 0.0; sSpodKv     = 0.0;
        spodIn     = 0.0;

        balanceLevel1Debit = balanceLevel1DebitRouble = balanceLevel1DebitForeign = $0;
        balanceLevel1Credit = balanceLevel1CreditRouble = balanceLevel1CreditForeign = $0;
        balanceLevel1DebitSpod = balanceLevel1DebitRoubleSpod = balanceLevel1DebitForeignSpod = $0;
        balanceLevel1CreditSpod = balanceLevel1CreditRoubleSpod = balanceLevel1CreditForeignSpod = $0;

        printKindHeader("Актив");
        while (av.next())

            /* не печатать счета ОВП */
            if (index(av.getBalance(), "ОВП") > 0)
                continue;
            end;

            curIn  = getValue(av.getInRestActive(), chapter);
            curDr  = getValue(av.getDebetNatCur(), chapter);
            curDv  = getValue(av.getDebetCur(), chapter);
            curD   = getValue(av.getDebet(), chapter);
            curKr  = getValue(av.getCreditNatCur(), chapter);
            curKv  = getValue(av.getCreditCur(), chapter);
            curK   = getValue(av.getCredit(), chapter);
            curOut = getValue(av.getOutRestActive(), chapter);

            balanceOrder = ternary(strLen(av.getBalance()) == 3, 1, 2);

            spodValue = spod.getBalanceAttribute(NULL, av.getBalance(), false);

            if (spodValue != NULL)
                if (balanceOrder == 2)
                    if ((m_isPeriodYear) AND (m_withSpod))
                        spodIn = spodValue.fieldValue("currYearDebetRouble" ).exact  + spodValue.fieldValue("currYearDebetCover" ).exact -
                                 spodValue.fieldValue("currYearCreditRouble" ).exact - spodValue.fieldValue("currYearCreditCover" ).exact;

                        curIn = curIn + spodIn;
                        
                       // DPN R-642167-2
                        
                        if ( (substr(av.getBalance(),1,3) == "706") or (substr(av.getBalance(),1,3) == "707"))
                            curDr = curDr - spodValue.fieldValue("currYearDebetRouble" ).exact - spodValue.fieldValue("currYearDebetCover"  ).exact;
                            curDv = curDv;
                            curKr = curKr - spodValue.fieldValue("currYearCreditRouble").exact - spodValue.fieldValue("currYearCreditCover" ).exact;
                            curKv = curKv;
                        else
                            curDr = curDr - spodValue.fieldValue("currYearDebetRouble" ).exact;
                            curDv = curDv - spodValue.fieldValue("currYearDebetCover"  ).exact;
                            
                            curKr = curKr - spodValue.fieldValue("currYearCreditRouble").exact;
                            curKv = curKv - spodValue.fieldValue("currYearCreditCover" ).exact;
                            
                        end;
                        
                        curD  = curD  - spodValue.fieldValue("currYearDebetRouble" ).exact - spodValue.fieldValue("currYearDebetCover").exact;
                        curK  = curK  - spodValue.fieldValue("currYearCreditRouble").exact - spodValue.fieldValue("currYearCreditCover").exact;
                    else
                        spodDr = spodValue.fieldValue("nextYearDebetRouble" ).exact;
                        spodDv = spodValue.fieldValue("nextYearDebetCover"  ).exact;
                        spodD  = spodValue.fieldValue("nextYearDebetRouble" ).exact + spodValue.fieldValue("nextYearDebetCover").exact;
                        spodKr = spodValue.fieldValue("nextYearCreditRouble").exact;
                        spodKv = spodValue.fieldValue("nextYearCreditCover" ).exact;
                        spodK  = spodValue.fieldValue("nextYearCreditRouble").exact + spodValue.fieldValue("nextYearCreditCover").exact;

                        balanceLevel1DebitSpod = balanceLevel1DebitSpod + spodD;
                        balanceLevel1DebitRoubleSpod = balanceLevel1DebitRoubleSpod + spodDr;
                        balanceLevel1DebitForeignSpod = balanceLevel1DebitForeignSpod + spodDv;

                        balanceLevel1CreditSpod = balanceLevel1CreditSpod + spodK;
                        balanceLevel1CreditRoubleSpod = balanceLevel1CreditRoubleSpod + spodKr;
                        balanceLevel1CreditForeignSpod = balanceLevel1CreditForeignSpod + spodKv;
                    end;
                end;
            else
                spodIn = 0;
                spodDr = 0;
                spodDv = 0;
                spodD  = 0;
                spodKr = 0;
                spodKv = 0;
                spodK  = 0;
            end;

            if ((av.getPart().exact != currentPart) and (balanceOrder == 2))
                if (currentPart > 0)
                    printItog("ИТОГО по разделу " + currentPart, sPartIn, sPartDr, sPartDv,  sPartD, sPartKr, sPartKv, sPartK, sPartOut,
                                m_isPrintSpod, "В том числе СПОД ", sSpodPartDr, sSpodPartDv,  sSpodPartD, sSpodPartKr, sSpodPartKv, sSpodPartK);
                end;

                if (av.getBalance() == "99998")
                    s9999_In  = curIn;
                    s9999_D   = curD;
                    s9999_Dr  = curDr;
                    s9999_Dv  = curDv;
                    s9999_K   = curK;
                    s9999_Kr  = curKr;
                    s9999_Kv  = curKv;
                    s9999_Out = curOut;
                end;
                currentPart = av.getPart().exact;
                if (not m_formExcelFormat)
                    printFreeString("                 РАЗДЕЛ " + currentPart + ". " + GetPartitionName(chapter, currentPart));
                    printSeparator();
                else
                    StringInExcel( "                 РАЗДЕЛ " + currentPart + ". " + GetPartitionName(chapter, currentPart), ALIGN_LEFT );
                    /*
                    m_ExcelRep.AddPrintCell("", 10, 0);
                    m_ExcelRep.AddPrintCell("РАЗДЕЛ " + currentPart + ". " + GetPartitionName(chapter, currentPart), m_ExcelRep.GetHeaderWidth() - 20, 0, "l");
                    m_ExcelRep.AddStr();
                    */
                end;
                sPartIn = 0; sPartD = 0; sPartDr = 0; sPartDv = 0; sPartK = 0; sPartKr = 0; sPartKv = 0; sPartOut = 0;
            end;

            if (balanceOrder == 2)
                balanceLevel1Debit = balanceLevel1Debit + curD;
                balanceLevel1DebitRouble = balanceLevel1DebitRouble + curDr;
                balanceLevel1DebitForeign = balanceLevel1DebitForeign + curDv;

                balanceLevel1Credit = balanceLevel1Credit + curK;
                balanceLevel1CreditRouble = balanceLevel1CreditRouble + curKr;
                balanceLevel1CreditForeign = balanceLevel1CreditForeign + curKv;
            end;

            /* не печатать итого по счету 999 первого порядка  */
            if (((balanceOrder != 1) and (av.getBalance() != "999")) or (av.getBalance() != "999"))
                if (balanceOrder == 1)
                    printTableString(balanceOrder, av.getBalance(), av.getBalanceName(),
                                     curIn,
                                     balanceLevel1DebitRouble,
                                     balanceLevel1DebitForeign,
                                     balanceLevel1Debit,
                                     balanceLevel1CreditRouble,
                                     balanceLevel1CreditForeign,
                                     balanceLevel1Credit,
                                     curOut,
                                     m_isPrintSpod, "В том числе СПОД ",
                                     balanceLevel1DebitRoubleSpod,
                                     balanceLevel1DebitForeignSpod,
                                     balanceLevel1DebitSpod,
                                     balanceLevel1CreditRoubleSpod,
                                     balanceLevel1CreditForeignSpod,
                                     balanceLevel1CreditSpod
                                    );
                elif ((spodDr != 0) OR (spodDv != 0) OR ( spodD != 0) OR (spodKr != 0) OR (spodKv != 0) OR (spodK != 0))
                    printTableString(balanceOrder, av.getBalance(), av.getBalanceName(), curIn, curDr, curDv, curD, curKr, curKv, curK, curOut,
                                     m_isPrintSpod, "В том числе СПОД ", spodDr, spodDv,  spodD, spodKr, spodKv, spodK);
                else
                    printTableString(balanceOrder, av.getBalance(), av.getBalanceName(), curIn, curDr, curDv, curD, curKr, curKv, curK, curOut, false);
                end;
            end;

            if (balanceOrder == 2)
                sIn  = sIn  + curIn;
                sDr  = sDr  + curDr;
                sDv  = sDv  + curDv;
                sD   = sD   + curD;
                sKr  = sKr  + curKr;
                sKv  = sKv  + curKv;
                sK   = sK   + curK;
                sOut = sOut + curOut;

                sKindIn  = sKindIn  + curIn;
                sKindDr  = sKindDr  + curDr;
                sKindDv  = sKindDv  + curDv;
                sKindD   = sKindD   + curD;
                sKindKr  = sKindKr  + curKr;
                sKindKv  = sKindKv  + curKv;
                sKindK   = sKindK   + curK;
                sKindOut = sKindOut + curOut;

                sPartIn  = sPartIn  + curIn;
                sPartDr  = sPartDr  + curDr;
                sPartDv  = sPartDv  + curDv;
                sPartD   = sPartD   + curD;
                sPartKr  = sPartKr  + curKr;
                sPartKv  = sPartKv  + curKv;
                sPartK   = sPartK   + curK;
                sPartOut = sPartOut + curOut;

                if (spodValue != NULL)

                    sSpodPartDr = sSpodPartDr + spodDr;
                    sSpodPartDv = sSpodPartDv + spodDv;
                    sSpodPartD  = sSpodPartD  + spodD;
                    sSpodPartKr = sSpodPartKr + spodKr;
                    sSpodPartKv = sSpodPartKv + spodKv;
                    sSpodPartK  = sSpodPartK  + spodK;

                    sSpodDr = sSpodDr + spodDr;
                    sSpodDv = sSpodDv + spodDv;
                    sSpodD  = sSpodD  + spodD;
                    sSpodKr = sSpodKr + spodKr;
                    sSpodKv = sSpodKv + spodKv;
                    sSpodK  = sSpodK  + spodK;
                end;

                prevBalance = av.getBalance();
            else
                balanceLevel1Debit = balanceLevel1DebitRouble = balanceLevel1DebitForeign = $0;
                balanceLevel1Credit = balanceLevel1CreditRouble = balanceLevel1CreditForeign = $0;
                balanceLevel1DebitSpod = balanceLevel1DebitRoubleSpod = balanceLevel1DebitForeignSpod = $0;
                balanceLevel1CreditSpod = balanceLevel1CreditRoubleSpod = balanceLevel1CreditForeignSpod = $0;
            end;
        end;

        if (currentPart > 0)
            printItog("ИТОГО по разделу " + currentPart, sPartIn, sPartDr, sPartDv,  sPartD, sPartKr, sPartKv, sPartK, sPartOut,
                      m_isPrintSpod, "В том числе СПОД ", sSpodPartDr, sSpodPartDv,  sSpodPartD, sSpodPartKr, sSpodPartKv, sSpodPartK);
        end;

        printItog("ИТОГО по активу: ", sIn, sDr, sDv,  sD, sKr, sKv, sK, sOut,
                  m_isPrintSpod, "В том числе СПОД ", sSpodDr, sSpodDv,  sSpodD, sSpodKr, sSpodKv, sSpodK);

        /*
        if (chapter == 3)
            printItog("ИТОГО по 99998 ", s9999_In, s9999_Dr, s9999_Dv, s9999_D, s9999_Kr, s9999_Kv, s9999_K, s9999_Out);
        end;
        */

        av.createBalanceIterator(chapter, KIND_PASSIVE, true, m_isPrintKind == PRINT_KIND_NOZ, m_isPrintKind == PRINT_KIND_BWP);
        av.sortIteratorByPart();

        sKindIn = 0; sKindD = 0; sKindDr = 0; sKindDv = 0; sKindK = 0; sKindKr = 0; sKindKv = 0; sKindOut = 0;
        sPartIn = 0; sPartD = 0; sPartDr = 0; sPartDv = 0; sPartK = 0; sPartKr = 0; sPartKv = 0; sPartOut = 0;
        currentPart = 0;
        spodD      = 0.0; spodDr      = 0.0; spodDv      = 0.0; spodK      = 0.0; spodKr      = 0.0; spodKv      = 0.0;
        sSpodPartD = 0.0; sSpodPartDr = 0.0; sSpodPartDv = 0.0; sSpodPartK = 0.0; sSpodPartKr = 0.0; sSpodPartKv = 0.0;
        sSpodD     = 0.0; sSpodDr     = 0.0; sSpodDv     = 0.0; sSpodK     = 0.0; sSpodKr     = 0.0; sSpodKv     = 0.0;

        balanceLevel1Debit = balanceLevel1DebitRouble = balanceLevel1DebitForeign = $0;
        balanceLevel1Credit = balanceLevel1CreditRouble = balanceLevel1CreditForeign = $0;
        balanceLevel1DebitSpod = balanceLevel1DebitRoubleSpod = balanceLevel1DebitForeignSpod = $0;
        balanceLevel1CreditSpod = balanceLevel1CreditRoubleSpod = balanceLevel1CreditForeignSpod = $0;

        spod = TBalanceAttribute("СПОД");
        printKindHeader("Пассив");
        while (av.next())

            /* не печатать счета ОВП */
            if (index(av.getBalance(), "ОВП") > 0)
                continue;
            end;

            curIn  = getValue(av.getInRestPassive(), chapter);
            curDr  = getValue(av.getDebetNatCur(), chapter);
            curDv  = getValue(av.getDebetCur(), chapter);
            curD   = getValue(av.getDebet(), chapter);
            curKr  = getValue(av.getCreditNatCur(), chapter);
            curKv  = getValue(av.getCreditCur(), chapter);
            curK   = getValue(av.getCredit(), chapter);
            curOut = getValue(av.getOutRestPassive(), chapter);
            balanceOrder = ternary(strLen(av.getBalance()) == 3, 1, 2);

            spodValue = spod.getBalanceAttribute(NULL, av.getBalance(), false);

            if (spodValue != NULL)
                if (balanceOrder == 2)
                    if ((m_isPeriodYear) AND (m_withSpod))

                        spodIn = - spodValue.fieldValue("currYearDebetRouble" ).exact - spodValue.fieldValue("currYearDebetCover" ).exact +
                                   spodValue.fieldValue("currYearCreditRouble").exact + spodValue.fieldValue("currYearCreditCover").exact;

                        curIn = curIn + spodIn;

                        // DPN R-642167-2
                        if ( (substr(av.getBalance(),1,3) == "706") or (substr(av.getBalance(),1,3) == "707"))
                            curDr = curDr - spodValue.fieldValue("currYearDebetRouble" ).exact - spodValue.fieldValue("currYearDebetCover"  ).exact;
                            curDv = curDv;
                            curKr = curKr - spodValue.fieldValue("currYearCreditRouble").exact - spodValue.fieldValue("currYearCreditCover" ).exact;
                            curKv = curKv;
                        else
                            curDr = curDr - spodValue.fieldValue("currYearDebetRouble" ).exact;
                            curDv = curDv - spodValue.fieldValue("currYearDebetCover"  ).exact;
                           
                            curKr = curKr - spodValue.fieldValue("currYearCreditRouble").exact;
                            curKv = curKv - spodValue.fieldValue("currYearCreditCover" ).exact;
                            
                        end;
                        
                        curD  = curD  - spodValue.fieldValue("currYearDebetRouble" ).exact - spodValue.fieldValue("currYearDebetCover").exact;
                        curK  = curK  - spodValue.fieldValue("currYearCreditRouble").exact - spodValue.fieldValue("currYearCreditCover").exact;
                    else
                        spodDr = spodValue.fieldValue("nextYearDebetRouble" ).exact;
                        spodDv = spodValue.fieldValue("nextYearDebetCover"  ).exact;
                        spodD  = spodValue.fieldValue("nextYearDebetRouble" ).exact + spodValue.fieldValue("nextYearDebetCover").exact;
                        spodKr = spodValue.fieldValue("nextYearCreditRouble").exact;
                        spodKv = spodValue.fieldValue("nextYearCreditCover" ).exact;
                        spodK  = spodValue.fieldValue("nextYearCreditRouble").exact + spodValue.fieldValue("nextYearCreditCover").exact;

                        balanceLevel1DebitSpod = balanceLevel1DebitSpod + spodD;
                        balanceLevel1DebitRoubleSpod = balanceLevel1DebitRoubleSpod + spodDr;
                        balanceLevel1DebitForeignSpod = balanceLevel1DebitForeignSpod + spodDv;

                        balanceLevel1CreditSpod = balanceLevel1CreditSpod + spodK;
                        balanceLevel1CreditRoubleSpod = balanceLevel1CreditRoubleSpod + spodKr;
                        balanceLevel1CreditForeignSpod = balanceLevel1CreditForeignSpod + spodKv;
                    end;
                end;
            else
                spodIn = 0;
                spodDr = 0;
                spodDv = 0;
                spodD  = 0;
                spodKr = 0;
                spodKv = 0;
                spodK  = 0;
            end;

            if ((av.getPart().exact != currentPart) and (balanceOrder == 2))
                if (currentPart > 0)
                    printItog("ИТОГО по разделу " + currentPart, sPartIn, sPartDr, sPartDv,  sPartD, sPartKr, sPartKv, sPartK, sPartOut,
                                m_isPrintSpod, "В том числе СПОД ", sSpodPartDr, sSpodPartDv,  sSpodPartD, sSpodPartKr, sSpodPartKv, sSpodPartK);
                end;

                if (av.getBalance() == "99999")
                    s9999_In  = curIn;
                    s9999_D   = curD;
                    s9999_Dr  = curDr;
                    s9999_Dv  = curDv;
                    s9999_K   = curK;
                    s9999_Kr  = curKr;
                    s9999_Kv  = curKv;
                    s9999_Out = curOut;
                end;
                currentPart = av.getPart().exact;
                if (not m_formExcelFormat)
                    printFreeString("                 РАЗДЕЛ " + currentPart + ". " + GetPartitionName(chapter, currentPart));
                    printSeparator();
                else
                    StringInExcel( "                 РАЗДЕЛ " + currentPart + ". " + GetPartitionName(chapter, currentPart), ALIGN_LEFT );
                    /*
                    m_ExcelRep.AddPrintCell("", 10, 0);
                    m_ExcelRep.AddPrintCell("РАЗДЕЛ " + currentPart + ". " + GetPartitionName(chapter, currentPart), m_ExcelRep.GetHeaderWidth() - 20, 0, "l");
                    m_ExcelRep.AddStr();
                    */
                end;

                sPartIn = 0; sPartD = 0; sPartDr = 0; sPartDv = 0; sPartK = 0; sPartKr = 0; sPartKv = 0; sPartOut = 0;
            end;

            if (balanceOrder == 2)
                balanceLevel1Debit = balanceLevel1Debit + curD;
                balanceLevel1DebitRouble = balanceLevel1DebitRouble + curDr;
                balanceLevel1DebitForeign = balanceLevel1DebitForeign + curDv;

                balanceLevel1Credit = balanceLevel1Credit + curK;
                balanceLevel1CreditRouble = balanceLevel1CreditRouble + curKr;
                balanceLevel1CreditForeign = balanceLevel1CreditForeign + curKv;
            end;

            /* не печатать итого по счету 999 первого порядка  */
            if (((balanceOrder != 1) and (av.getBalance() != "999")) or (av.getBalance() != "999"))
                if (balanceOrder == 1)
                    printTableString(balanceOrder, av.getBalance(), av.getBalanceName(),
                                     curIn,
                                     balanceLevel1DebitRouble,
                                     balanceLevel1DebitForeign,
                                     balanceLevel1Debit,
                                     balanceLevel1CreditRouble,
                                     balanceLevel1CreditForeign,
                                     balanceLevel1Credit,
                                     curOut,
                                     m_isPrintSpod, "В том числе СПОД ",
                                     balanceLevel1DebitRoubleSpod,
                                     balanceLevel1DebitForeignSpod,
                                     balanceLevel1DebitSpod,
                                     balanceLevel1CreditRoubleSpod,
                                     balanceLevel1CreditForeignSpod,
                                     balanceLevel1CreditSpod
                                    );
                elif ((spodDr != 0) OR (spodDv != 0) OR ( spodD != 0) OR (spodKr != 0) OR (spodKv != 0) OR (spodK != 0))
                    printTableString(balanceOrder, av.getBalance(), av.getBalanceName(), curIn, curDr, curDv, curD, curKr, curKv, curK, curOut,
                                     m_isPrintSpod, "В том числе СПОД ", spodDr, spodDv,  spodD, spodKr, spodKv, spodK);
                else
                    printTableString(balanceOrder, av.getBalance(), av.getBalanceName(), curIn, curDr, curDv, curD, curKr, curKv, curK, curOut, false);
                end;
            end;

            if (balanceOrder == 2)
                sIn  = sIn  + curIn;
                sDr  = sDr  + curDr;
                sDv  = sDv  + curDv;
                sD   = sD   + curD;
                sKr  = sKr  + curKr;
                sKv  = sKv  + curKv;
                sK   = sK   + curK;
                sOut = sOut + curOut;

                sKindIn  = sKindIn  + curIn;
                sKindDr  = sKindDr  + curDr;
                sKindDv  = sKindDv  + curDv;
                sKindD   = sKindD   + curD;
                sKindKr  = sKindKr  + curKr;
                sKindKv  = sKindKv  + curKv;
                sKindK   = sKindK   + curK;
                sKindOut = sKindOut + curOut;

                sPartIn  = sPartIn  + curIn;
                sPartDr  = sPartDr  + curDr;
                sPartDv  = sPartDv  + curDv;
                sPartD   = sPartD   + curD;
                sPartKr  = sPartKr  + curKr;
                sPartKv  = sPartKv  + curKv;
                sPartK   = sPartK   + curK;
                sPartOut = sPartOut + curOut;

                if (spodValue != NULL)

                    sSpodPartDr = sSpodPartDr + spodDr;
                    sSpodPartDv = sSpodPartDv + spodDv;
                    sSpodPartD  = sSpodPartD  + spodD;
                    sSpodPartKr = sSpodPartKr + spodKr;
                    sSpodPartKv = sSpodPartKv + spodKv;
                    sSpodPartK  = sSpodPartK  + spodK;

                    sSpodDr = sSpodDr + spodDr;
                    sSpodDv = sSpodDv + spodDv;
                    sSpodD  = sSpodD  + spodD;
                    sSpodKr = sSpodKr + spodKr;
                    sSpodKv = sSpodKv + spodKv;
                    sSpodK  = sSpodK  + spodK;
                end;

                prevBalance = av.getBalance();
            else
                balanceLevel1Debit = balanceLevel1DebitRouble = balanceLevel1DebitForeign = $0;
                balanceLevel1Credit = balanceLevel1CreditRouble = balanceLevel1CreditForeign = $0;
                balanceLevel1DebitSpod = balanceLevel1DebitRoubleSpod = balanceLevel1DebitForeignSpod = $0;
                balanceLevel1CreditSpod = balanceLevel1CreditRoubleSpod = balanceLevel1CreditForeignSpod = $0;
            end;
        end;

        if (currentPart > 0)
            printItog("ИТОГО по разделу " + currentPart, sPartIn, sPartDr, sPartDv,  sPartD, sPartKr, sPartKv, sPartK, sPartOut,
                      m_isPrintSpod, "В том числе СПОД ", sSpodPartDr, sSpodPartDv,  sSpodPartD, sSpodPartKr, sSpodPartKv, sSpodPartK);
        end;

        printItog("ИТОГО по пассиву: ", sKindIn, sKindDr, sKindDv,  sKindD, sKindKr, sKindKv, sKindK, sKindOut,
                  m_isPrintSpod, "В том числе СПОД ", sSpodDr, sSpodDv,  sSpodD, sSpodKr, sSpodKv, sSpodK);
        /*
        if (chapter == 3)
            printItog("ИТОГО по 99999 ", s9999_In, s9999_Dr, s9999_Dv, s9999_D, s9999_Kr, s9999_Kv, s9999_K, s9999_Out);
        end;
        */

        printItog("ВСЕГО ОБОРОТОВ: ", "", sDr, sDv,  sD, sKr, sKv, sK, "");

        if (m_formExcelFormat)
                 var ek = 10;
                 if (m_DopFild) ek = 11; end;
                 // Решётка
                 obSheet.Range(getColumnName(0)+(m_offsetRbegin)+":"+
                               getColumnName(ek)+(m_Row+1)
                             ).Borders(7).LineStyle = 1;
                 // Решётка
                 obSheet.Range(getColumnName(0)+(m_offsetRbegin)+":"+
                               getColumnName(ek)+(m_Row+1)
                             ).Borders(8).LineStyle = 1;
                 // Решётка
                 obSheet.Range(getColumnName(0)+(m_offsetRbegin)+":"+
                               getColumnName(ek)+(m_Row+1)
                             ).Borders(9).LineStyle = 1;
                 // Решётка
                 obSheet.Range(getColumnName(0)+(m_offsetRbegin)+":"+
                               getColumnName(ek)+(m_Row+1)
                             ).Borders(10).LineStyle = 1;
                 // Решётка
                 obSheet.Range(getColumnName(0)+(m_offsetRbegin)+":"+
                               getColumnName(ek)+(m_Row+1)
                             ).Borders(11).LineStyle = 1;
                 // Решётка
                 obSheet.Range(getColumnName(0)+(m_offsetRbegin)+":"+
                               getColumnName(ek)+(m_Row+1)
                             ).Borders(12).LineStyle = 1;

        end;

    end;

    constructorTApplication7ReportView(withSpod);
end;
