// 17.02.2010
import acc_lib;
import objconst;
import FIInter;
import CTInter;
import BankInter;
import RcbCoreInter;
import ReptcbCommon;
import DepartmentFilter;

const OBJGROUP_REPORT = 1;
/*константы для категорий отчетности/для формы 134*/
const CATEGORY2_1_1искл = "'2.1.1 искл'";
const CATEGORY2_1_2искл = "'2.1.2 искл'";
const CATEGORY2_1_5     = "'2.1.5'" ;
const CATEGORY2_2_6искл = "2.2.6 искл";
const CATEGORY2_1_10    = "'2.1.10'";
const CATEGORY2_2_8     = "'2.2.8'" ;
const CATEGORY3_7       = "'3.7'" ;
const CATEGORY3_10      = "'3.10_'";/*В базе лежит именно так, символ '_' добавлен, чтобы не нарушалась уникальность*/
const СубКредит         = "'СубКредит'";

var ub_tek_god=$0;//vihrov
const bik_for_go = "044525732";
var is_GO : bool = (bik_for_go == {MFO_BANK});
  

private const nullFilter = "";
/*

*/
private class TGlobal()
    var report   = RcbApplication().currentReport();
    var protocol = NULL;
end;
private var global = TGlobal();

private class TParameters()
    var ОПФ_КО_АО,             /*форма кредитной организации АО/ООО*/
        ДатаАудПодтв_ТекГ,     
        ДатаАуд_ТекГ,          
        ДатаАудПодтв_ПрошлыйГ, 
        ДатаАуд_ПрошлыйГ,      
        ПрибыльТекущегоГодаПодтверждена,
        ПрибыльПрошлогоГодаПодтверждена,
        ПрибыльПредшествующегоГодаНеПодтверждена,
        iRealPlan = ПолучитьРеальныйНомерПлана(ЛогическийПланСчетов, "А"),
        isCalculateACForPosting,
        unconfirmedProfitPreviousYear,
        isEndDateLess0107;


    MACRO GetRegVal(Path, Type, Val)

        GetRegistryValue(Path, Type, Val, NULL);

        if (Val == NULL)
           MsgBox("Не задано значения для настройки реестра " + Path);
           установитьФлагВозврата(STOP_PROC_FLG);
           exit(1);
        end;

        SetParm(3, Val);
    END;

    MACRO Constructor()

        var CurrYear;
        var endDate = RcbApplication().currentReport.context.period.endDate;

        DateSplit(endDate, NULL, NULL, CurrYear);

        GetRegVal("REPTREG\\REP_GROUPS\\COMMON\\ОПФ_КО_АО",                              V_BOOL,   ОПФ_КО_АО                    );
        GetRegVal("REPTREG\\REP_GROUPS\\COMMON\\ДАТААУДПОДТВ_ПРОШЛЫЙГ",                  V_DATE,   ДатаАудПодтв_ПрошлыйГ        );
        GetRegVal("REPTREG\\REP_GROUPS\\COMMON\\ДАТААУД_ПРОШЛЫЙГ",                       V_DATE,   ДатаАуд_ПрошлыйГ             );
        GetRegVal("REPTREG\\REP_GROUPS\\COMMON\\ДАТААУДПОДТВ_ТЕКГ",                      V_DATE,   ДатаАудПодтв_ТекГ            );
        GetRegVal("REPTREG\\REP_GROUPS\\COMMON\\ДАТААУД_ТЕКГ",                           V_DATE,   ДатаАуд_ТекГ                 );
        GetRegVal("REPTREG\\REP_GROUPS\\РАСЧЕТ КАПИТАЛА\\РАСЧЕТ_УК_ПО_ПРОВОДКАМ",        V_BOOL,   isCalculateACForPosting      );
        GetRegVal("REPTREG\\REP_GROUPS\\РАСЧЕТ КАПИТАЛА\\НЕПОДТВ_ПРИБЫЛЬ_ПРЕДШЕСТВ_ЛЕТ", V_STRING, unconfirmedProfitPreviousYear);

        ДатаАудПодтв_ТекГ                        = date(ДатаАудПодтв_ТекГ);     
        ДатаАуд_ТекГ                             = date(ДатаАуд_ТекГ);
        ДатаАудПодтв_ПрошлыйГ                    = date(ДатаАудПодтв_ПрошлыйГ);
        ДатаАуд_ПрошлыйГ                         = date(ДатаАуд_ПрошлыйГ);
        ПрибыльТекущегоГодаПодтверждена          = date(ПрибыльТекущегоГодаПодтверждена);
        ПрибыльПрошлогоГодаПодтверждена          = date(ПрибыльПрошлогоГодаПодтверждена);
        ПрибыльПредшествующегоГодаНеПодтверждена = date(ПрибыльПредшествующегоГодаНеПодтверждена);


        ПрибыльТекущегоГодаПодтверждена = ((Date(1, 1, CurrYear) <= ДатаАудПодтв_ТекГ) and
                                           (ДатаАудПодтв_ТекГ    <= ДатаАуд_ТекГ     ) and
                                           (ДатаАуд_ТекГ         <= (endDate + 1)    ));

        ПрибыльПрошлогоГодаПодтверждена = ((Date(1, 1, CurrYear)  <=   ДатаАудПодтв_ПрошлыйГ) and
                                           (ДатаАудПодтв_ПрошлыйГ <=   ДатаАуд_ПрошлыйГ     ) and
                                           (ДатаАуд_ПрошлыйГ      <= (endDate + 1)          ));

        ПрибыльПредшествующегоГодаНеПодтверждена = ((Date(1, 1, CurrYear)  <= ДатаАудПодтв_ПрошлыйГ ) and
                                                    (ДатаАудПодтв_ПрошлыйГ <= ДатаАуд_ПрошлыйГ      ) and
                                                    (ДатаАуд_ПрошлыйГ      <= (endDate + 1 )        ) and
                                                    (endDate               <= Date(1, 7, CurrYear)  ));
        isEndDateLess0107  = (endDate <= Date(1, 7, CurrYear));                                                 
    END;

    Constructor();
end;

private class TProtocol(report)

    private var isAttributeEmpty = true;
    var m_report = NULL;

    SetOutput(GetNameLog("134c"));

    macro PrintLine(str : String)
        [#](str);
        isAttributeEmpty = false;
    end;

    macro PrintAccountLine(str : String, sum : String)
        [###################### ####################](str, sum : r:0:2);
        isAttributeEmpty = false;
    end;

    macro printAccount(accountNumber, rest)
        if (substr(accountNumber, 1, 1) == "-")
            printAccountLine(accountNumber, String(rest:0:2) + " руб.");
        else
            printAccountLine("+" + accountNumber, String(rest:0:2) + " руб.");
        end;
        isAttributeEmpty = false;
    end;

    macro printPosting(str) 
        println(str + " руб.");
        isAttributeEmpty = false;
    end;

    macro printAccountAndReserve(accountNumber, rest, reserve, reserveLoans)
        printAccount(accountNumber, rest);
        printAccountLine("-" + " РВП", String(reserve:0:2) + " руб.");
        if (reserveLoans != null) 
            printAccountLine("-" + " РВПC", String(reserveLoans:0:2) + " руб.");
        end;
        isAttributeEmpty = false;
    end;

    macro PrintBalanceLine(str : String, sum : String)
        [###################### ####################](str, sum : r:0:2);
        isAttributeEmpty = false;
    end;

    macro PrintLineForEq3_5(account, maturityDate, rest, depreciatedCost)       
        [######################   ##########   ####################   ####################](account, String(nvl(maturityDate," ")), rest : r:0:2, depreciatedCost : r:0:2);
        isAttributeEmpty = false;
    end;

    macro PrintAttributeLine(str : String, sum : String)
        [###################### ####################](str, sum : r:0:2);
        isAttributeEmpty = false;
    end;

    macro printAttributeHeader(attributeName)
        println("--------------------------------------------------------------------------------");
        println();
        println("Переменная " + attributeName);
        println();
        isAttributeEmpty = true;
    end;

    macro printAttributeFooter(attributeValue)
        println();
//        println(String(attributeValue.attribute().id) + " = " + attributeValue.scaledAsString + " тыс. руб.");
        println(String(attributeValue.attribute().id) + " = " + attributeValue.exactAsString + " руб.");

        if (attributeValue.attribute().isManual())
            println("Пользовательский ввод.");
        elif (isAttributeEmpty)
            println("Нет данных для расчета.");
        end;
        println();
    end;

    macro Show()
        ViewFileLog(GetNameLog("134c"));
    end;

    if (m_report != NULL)
        m_report = report;
    end;
end;

/*
 *  Базовый класс "Расчета"
 */
class TNumericValue(exact, scaled)
    private var m_exact  = nvl(exact,  $0);
    private var m_scaled = nvl(scaled, rcb_floorTerm(m_exact));

    private macro makeExact(value)
        if (isEqClass("TValue", value))
            return value.getExact();
        elif (isEqClass("RcbAttributeValue", value))
            return value.exact;
        else
            runError("Невозможно преобразовать " + genClassName(value) + " в TValue");
        end;
    end;

    private macro makeScaled(value)
        if (isEqClass("TValue", value))
            return value.getScaled();
        elif (isEqClass("RcbAttributeValue", value))
            return value.scaled;
        else
            runError("Невозможно преобразовать " + genClassName(value) + " в TValue");
        end;
    end;

    macro onPlus()
    end;

    macro onMinus()
    end;

    macro getExact()
        return m_exact;
    end;

    macro getScaled()
        return m_scaled;
    end;

    macro clear()
        m_exact  = $0;
        m_scaled = 0.0;
    end;

    macro plus(value)
        if (isEqClass("TValue", value))
            value.onPlus();
        end;

        m_exact  = m_exact  + makeExact(value);
        m_scaled = m_scaled + makeScaled(value);

        return this;
    end;

    macro minus(value)
        if (isEqClass("TValue", value))
            value.onMinus();
        end;

        m_exact  = m_exact  - makeExact(value);
        m_scaled = m_scaled - makeScaled(value);

        return this;
    end;

    macro multiply(value : Double)
        m_exact  = m_exact  * value;
        m_scaled = m_scaled * value;

        return this;
    end;
end;

class (TNumericValue) TAttributeValue(attributeId : String)
    private var m_attributeValue = global.report.attributeValue(attributeId);

    initTNumericValue(m_attributeValue.exact, m_attributeValue.scaled);

    private macro printString(sign : String)
        global.protocol.printAttributeLine(sign + m_attributeValue.attribute().id(), m_attributeValue.exactAsString() + " руб.");
    end;

    macro onPlus()
        printString("+");
    end;

    macro onMinus()
        printString("-");
    end;
end;

private class TValue(parameter1, parameter2)
    private var m_impl : TNumericValue = null;

    private macro constructor(parameter1, parameter2)
        if ((valType(parameter1) == V_STRING) and (valType(parameter2) == V_UNDEF))
            m_impl = TAttributeValue(parameter1);
        else
            m_impl = TNumericValue(parameter1, parameter2);
        end;
    end;

    macro onPlus()
        m_impl.onPlus();
    end;

    macro onMinus()
        m_impl.onMinus();
    end;

    macro getExact()
        return m_impl.getExact();
    end;

    macro getScaled()
        return m_impl.getScaled();
    end;

    macro clear()
        m_impl.clear();
    end;

    macro plus(value)
        m_impl.plus(value);
        return this;
    end;

    macro minus(value)
        m_impl.minus(value);
        return this;
    end;

    macro multiply(value : Double)
        m_impl.multiply(value);
        return this;
    end;

    constructor(parameter1, parameter2);
end;


private class TCalculatorBase(protocol : TProtocol)
    var m_protocol   = protocol;
    var m_parameters = TParameters();
    var m_report     = RcbApplication().currentReport();
    var m_period     = m_report.context().period(); 

    const CATEGORY_EXIST_CONDITION = " > 0";
    const CATEGORY_NOT_EXIST_CONDITION = " = 0";


    private class (TValue) TLogValue(parameter1, parameter2)
        initTValue(parameter1, parameter2);
    end;

    private macro calculateBalanceRest(balance : String, balanceKind : String, restDate : Date, filterAccount : String)
        var query  = "";

        // 03.10.2008 ABP Криво, но допустимо.
        if (filterAccount == "")
            filterAccount = RcbAccountFilter().getAsSqlString("account");
        else
            filterAccount = filterAccount + " AND " + RcbAccountFilter().getAsSqlString("account");
        end;

        /*Старый запрос с использованием функции rsb_account.restB(). Пришлось переписать, так как при длине фильтра filterAccount*/
        /*больше 4000 символов возникала ошибка, связанная с ограничением на литерал в Oracle для SQL*/
        /*query = query + "SELECT NVL(SUM(rsb_account.restB(balance.t_chapter,"
               + "\n" + "                                 balance.t_balance,"
               + "\n" + "                                 balance.t_iNumPlan,"
               + "\n" + "                                 0,"
               + "\n" + "                                 " + getSqlDate(restDate) + ","
               + "\n" + "                                 " + filterAccount +") * DECODE(balance.t_kind_account, 'А', -1, 1)), 0.0) t_rest"
               + "\n" + "  FROM dbalance_dbt balance"
               + "\n" + " WHERE t_chapter = 1"
               + "\n" + "   AND t_bdexcludebwp >= " + getSqlDate(m_period.endDate()) 
               + "\n" + "   AND t_inumplan = " + m_parameters.iRealPlan
               + "\n" + "   AND t_balance LIKE " + getSqlString(balance + "%");*/ 

        query =  query + "SELECT NVL(SUM((SELECT NVL(SUM(NVL(rsb_account.RestA(account.t_Account,"
                + "\n" +                                                       getSqlDate(restDate) + ","
                + "\n" + "                                                     account.t_Chapter,"
                + "\n" + "                                                     account.t_R0), 0)), 0)"
                + "\n" + "                 FROM daccblnc_dbt accblnc,"
                + "\n" + "                      daccount_dbt account"                                     
                + "\n" + "                WHERE accblnc.t_Chapter  = '1'"
                + "\n" + "                  AND accblnc.t_Code_Currency = '0'"
                + "\n" + "                  AND accblnc.t_Balance" + m_parameters.iRealPlan + " = balance.t_balance"
                + "\n" + "                  AND account.t_Chapter = accblnc.t_Chapter"
                + "\n" + "                  AND account.t_Code_Currency = accblnc.t_Code_Currency"
                + "\n" + "                  AND account.t_Account = accblnc.t_Account"
                + "\n" + "                  AND (" + filterAccount+ ")) * DECODE(balance.t_kind_account, 'А', -1, 1)), 0.0) t_rest"
                + "\n" + "  FROM dbalance_dbt balance"
                + "\n" + " WHERE t_chapter = 1"
                + "\n" + "   AND t_bdexcludebwp >= " + getSqlDate(m_period.endDate()) 
                + "\n" + "   AND t_inumplan = " + m_parameters.iRealPlan
                + "\n" + "   AND t_balance LIKE " + getSqlString(balance + "%");


        if (balanceKind != "")
        query = query
               + "\n" + "   AND t_kind_account = " + getSqlString(balanceKind);
        end;

        var dataSet = TRsbDataSet(query);

        if (dataSet.moveNext())
            return Money(dataSet.rest);
        else
            return $0;
        end;
    end;

    /*Получаем дату и список балансовых с соответвтвующим знаком. Возвращаем сумму их остатков за дату*/
    private macro summarizeBalanceRests(restDate, filterAccount)
        var balance = "";
        var totalRest = $0;
        var balanceRest = $0;
        var balanceSign = "";
        var balanceKind = "";

        var iBalanceParameter = 3;
        while (getParm(iBalanceParameter, balance))

            // Определяем вид б/с (по последнему символу)
            balanceKind = substr(balance, strlen(balance));

            if ((balanceKind == "А") or (balanceKind == "П"))
                balance = substr(balance, 1, strlen(balance) - 1);
            else
                balanceKind = "";
            end;

            // Определяем знак, с которым учитывать остаток (по первому символу)
            if (substr(balance, 1, 1) == "-")
                balanceSign = "-";
                balance = subStr(balance, 2);
            else
                balanceSign = "+"
            end;

            balanceRest = calculateBalanceRest(balance, balanceKind, restDate, filterAccount);

            m_protocol.PrintBalanceLine(balanceSign + balance, balanceRest + " руб.");

            totalRest = totalRest + Int(balanceSign + "1") * balanceRest;

            iBalanceParameter = iBalanceParameter + 1;
        end;

        return TValue(totalRest);
    end;

    private macro SetAttributeValue(value : TValue, attributeName : String)
        var attributeValue = m_report.attributeValue(attributeName);

        attributeValue.exact  = Money(value.getExact());
        attributeValue.recalculateScaled();

        m_protocol.printAttributeFooter(attributeValue);
    end;

    private macro getAccountDataSourceQuery(masks : String)
        var masksCondition = "1 = 1";

        macro getBaseQuery(isCurrency : Bool)
            var suffix = "";

            if (isCurrency)
                suffix = "$";
            end;

            return        "SELECT rsb_rep_ac.rest_base(acc.t_account, "
                + "\n" +  "                                acc.t_chapter, "
                + "\n" +  "                                 acc.t_code_currency, "
                + "\n" +  "                            "  + getSqlDate(m_period.endDate()) + ","
                + "\n" +  "                                 acc.t_r0,"
                + "\n" +  "                                 acc.t_kind_account) t_rest,"
                + "\n" +  "       acc.*"
                + "\n" +  "  FROM daccount" + suffix + "_dbt acc"
                + "\n" +  "  WHERE  acc.t_Open_date <= "     + getSqlDate(m_period.endDate())
                + "\n" +  "    AND (   (acc.t_Close_Date > " + getSqlDate(m_period.endDate())+ ")"
                + "\n" +  "         OR (acc.t_Close_Date = TO_DATE('01-01-0001', 'DD-MM-YYYY')))"
                + "\n" +  "    AND " + RcbAccountFilter().getAsSqlString("acc")
                + "\n" +  "    AND INSTR(acc.t_type_account, 'П')=0 "
                + "\n" +  "    AND (" + masksCondition + ")" ;

        end;

        if (masks != NULL)
            masksCondition = convertMaskToSQLFormat(masks, "acc.t_account");
        end;

        return "(" + getBaseQuery(false) + "\nUNION ALL\n" + getBaseQuery(true) + ")";
    end;

    private macro getCategoryFilter(category : String, condition : String)
        return "rsb_rep_ac.checkObjAttrPresenceByNum(" + OBJTYPE_ACCOUNT + "," 
                                                       + OBJGROUP_REPORT + "," 
                                                       + getSqlString(category) + "," 
                                                       + "rsb_rep_ac.makeAccountId(account.t_account, account.t_code_currency, account.t_chapter, NULL), " 
                                                       + getSqlDate(m_period.endDate()) + ")" + condition;
    end;

    /*Сумма остатков л/с у которых задана/не задана соотв. категория и удовлетворяющих маске*/
    private macro summarizeAccountRests(masks : String, filter : String)
        var rest           = $0.0;
        var dataSet        = NULL;

        if (filter == NULL)
            filter = "1 = 1";
        end;
        
        dataSet = TRsbDataSet("SELECT account.t_account, account.t_rest"
            + "\n" +          "  FROM " + getAccountDataSourceQuery(masks) + " account"
            + "\n" +          " WHERE " + filter
            + "\n" +          "   AND t_rest <> 0.0");

        dataSet.setFieldType("rest", V_MONEY);

        while (dataSet.moveNext())
             rest = rest + dataSet.rest;
             m_protocol.printAccount(dataSet.account, dataSet.rest);
        end;

        return TValue(rest);
    end;

    private macro getActualReserve(chapter : Integer, account : String, fiId : Integer)
         var  reserveClassification = nvl(GetClassifReserve(chapter, fiId, account, m_period.endDate()), "");
         var reserveAccount = nvl(getAccCaseReserveAccount(chapter, fiid, account), "");

         return nvl(getFactReserve(reserveAccount, m_period.endDate(), reserveClassification), $0.0);
    end;

    private macro summarizeActualReserve(masks : String)
        var reserve = $0.0;
        var dataSet = TRsbDataSet("SELECT t_chapter, t_account, t_code_currency t_fiId"
           + "\n" +               "  FROM " + getAccountDataSourceQuery(masks));

        while (dataSet.moveNext())
            reserve = reserve + getActualReserve(dataSet.chapter, dataSet.account, dataSet.fiId);
        end;

        return TValue(reserve);
    end;

    private macro isEntered(attributeName)
        var attributeValue = m_report.attributeValue(attributeName);
        return not (attributeValue.isUndefined() or (attributeValue.exact == 0));
    end;

    private macro isLastDayInMonth(day : Date)
        var m;
        var y;
        dateSplit(day, NULL, m, y);

        if (m == 12)  
            m = 1;
            y = y + 1;
        else
            m = m + 1;
        end;

        return day == Date(1, m, y) - 1;
    end;

end;

private class (TCalculatorBase) TCalculator2055(protocol : TProtocol)
    private macro getAccountDataSourceQuery(masks : String, restDate : Date)
        var masksCondition = "1 = 1";

        if (restDate == null)
            restDate = m_period.endDate();
        end;

        macro getBaseQuery(isCurrency : Bool)
            var suffix = "";

            if (isCurrency)
                suffix = "$";
            end;

            return        "SELECT rsb_rep_ac.rest_base(acc.t_account, "
                + "\n" +  "                            acc.t_chapter, "
                + "\n" +  "                            acc.t_code_currency, "
                + "\n" +  "                       "  + getSqlDate(restDate) + ","
                + "\n" +  "                            acc.t_r0,"
                + "\n" +  "                            acc.t_kind_account) t_rest,"
                + "\n" +  "       acc.*"
                + "\n" +  "  FROM daccount" + suffix + "_dbt acc"
                + "\n" +  "  WHERE  acc.t_Open_date <= "     + getSqlDate(restDate)
                + "\n" +  "    AND (   (acc.t_Close_Date > " + getSqlDate(restDate)+ ")"
                + "\n" +  "         OR (acc.t_Close_Date = TO_DATE('01-01-0001', 'DD-MM-YYYY')))"
                + "\n" +  "    AND " + RcbAccountFilter().getAsSqlString("acc")
                + "\n" +  "    AND INSTR(acc.t_type_account, 'П')=0 "
                + "\n" +  "    AND (" + masksCondition + ")" ;

        end;

        if (masks != NULL)
            masksCondition = convertMaskToSQLFormat(masks, "acc.t_account");
        end;

        return "(" + getBaseQuery(false) + "\nUNION ALL\n" + getBaseQuery(true) + ")";
    end;

    private macro getCategoryFilter(category : String, condition : String, restDate : Date)

        if (restDate == null)
            restDate = m_period.endDate();
        end;

        return "rsb_rep_ac.checkObjAttrPresenceByNum(" + OBJTYPE_ACCOUNT + "," 
                                                       + OBJGROUP_REPORT + "," 
                                                       + getSqlString(category) + "," 
                                                       + "rsb_rep_ac.makeAccountId(account.t_account, account.t_code_currency, account.t_chapter, NULL), " 
                                                       + getSqlDate(restDate) + ")" + condition;
    end;

    private macro summarizeAccountRests(masks : String, filter : String, restDate : Date, isMinus : Bool )
        var rest           = $0.0;
        var dataSet        = NULL;

        if (filter == NULL)
            filter = "1 = 1";
        end;

        if (isMinus == NULL)
            isMinus = false;
        end;

        dataSet = TRsbDataSet("SELECT account.t_account, account.t_rest"
            + "\n" +          "  FROM " + getAccountDataSourceQuery(masks, restDate) + " account"
            + "\n" +          " WHERE " + filter
            + "\n" +          "   AND t_rest <> 0.0");

        dataSet.setFieldType("rest", V_MONEY);

        while (dataSet.moveNext())
             rest = rest + dataSet.rest;

             if (isMinus == true)
                 m_protocol.printAccount("-" + dataSet.account, dataSet.rest);
             else
                 m_protocol.printAccount(dataSet.account, dataSet.rest);
             end;
        end;

        return TValue(rest);
    end;

    private macro summarizeOnPosting(masks : String, filter : String, restDate : Date, isMinus : Bool )
        var sum           = $0.0;
        var dataSet        = NULL;
        var nameAccount = "t_debetaccount";

        if (filter == NULL)
            filter = "1 = 1";
        end;

        if ((isMinus == NULL) or (not isMinus))
            isMinus = false;           
            nameAccount = "t_creditaccount";
        end;

        var qerry = "WITH paymenttable AS"
        + "\n" +          "(SELECT /* +INLINE*/"
        + "\n" +          "        rep_note.readpaymentcapitalchangedate(doc.t_paymentid," + getSqlDate(restDate) + ") t_paymentnote,"
        + "\n" +          "        doc.t_debetaccount,"
        + "\n" +          "        doc.t_creditaccount,"
        + "\n" +          "        doc.t_incoversum AS t_sum"
        + "\n" +          "   FROM drepdocument_vw doc"
        + "\n" +          "  WHERE doc.t_paymentid IS NOT NULL"         
        + "\n" +          "    AND doc.t_incoversum <> 0)";

        qerry = qerry 
        + "\n" +          "SELECT *"
        + "\n" +          "  FROM paymenttable"
        + "\n" +          " WHERE t_paymentnote IS NOT NULL"
        + "\n" +          "   AND t_paymentnote <= " + getSqlDate(restDate)
        + "\n" +          "   AND "  + filter
        + "\n" +          "   AND " + convertMaskToSqlFormat(masks, nameAccount);



        dataSet = TRsbDataSet(qerry);

        dataSet.setFieldType("sum", V_MONEY);        

        var isFirst = true;

        while (dataSet.moveNext())
                          
             sum = sum + dataSet.sum;

             if (isFirst)
                println("           Дебет                 Кредит");
                isFirst = false;
             end;

             if (isMinus == true)
                 m_protocol.printPosting("-  " + dataSet.t_debetaccount + "  " + dataSet.t_creditaccount + "  " + String(dataSet.sum));
             else
                 m_protocol.printPosting("+  " + dataSet.t_debetaccount + "  " + dataSet.t_creditaccount + "  " + String(dataSet.sum));
             end;
        end;

        return TValue(sum);


    end;

    private macro EqК()
        m_protocol.printAttributeHeader("EqК");

        var value = TValue();
        setAttributeValue(value.plus(TValue("EqПром")).minus(TValue("Eq5_1")).minus(TValue("Eq5_2")).minus(TValue("Eq5_3")), "EqК");
    end;

    private macro Eq2_1_1__2_1_2()
        m_protocol.printAttributeHeader("Eq2_1_1__2_1_2");

        var balance;
        var excludeString;

        var value = TValue();
        if (isEntered("Eq2_1_1__2_1_2ввод"))
            value = value.plus(TValue("Eq2_1_1__2_1_2ввод"));
        else
                if (m_parameters.ОПФ_КО_АО)
                    balance       = "10207*";
                    excludeString = "2.1.1 искл";
                else
                    balance       = "10208*";
                    excludeString = "2.1.2 искл";
                end;

                if(m_parameters.isCalculateACForPosting)
                    value = summarizeOnPosting(balance, null, m_period.endDate(), false);
                    value.minus(summarizeOnPosting(balance, null, m_period.endDate(), true ));
                else
                    value = summarizeAccountRests(balance, getCategoryFilter(excludeString, CATEGORY_NOT_EXIST_CONDITION));
                end;

        end;
        setAttributeValue(value, "Eq2_1_1__2_1_2");
    end;

    private macro Eq2_1_1__2_1_2ввод()
        m_protocol.printAttributeHeader("Eq2_1_1__2_1_2ввод");
        setAttributeValue(TValue("Eq2_1_1__2_1_2ввод"), "Eq2_1_1__2_1_2ввод");
    end;

    private macro Eq2_1_3__2_1_4()  
        m_protocol.printAttributeHeader("Eq2_1_3__2_1_4");
        var value = TValue();

        if(m_parameters.isCalculateACForPosting)
            value = summarizeOnPosting("10602*", null, m_period.endDate(), false);
            value.minus(summarizeOnPosting("10602*", null, m_period.endDate(), true ));
            setAttributeValue(value, "Eq2_1_3__2_1_4");            
        else            
            setAttributeValue(summarizeBalanceRests(m_period.endDate(), nullFilter, "10602"), "Eq2_1_3__2_1_4");
        end;
    end;

    private macro Eq2_1_5()
        m_protocol.printAttributeHeader("Eq2_1_5");

        var value = summarizeAccountRests("107*", getCategoryFilter("2.1.5", CATEGORY_EXIST_CONDITION));
        value.minus(TValue("Eq2_1_7")).minus(TValue("Eq3_3"));
        setAttributeValue(value, "Eq2_1_5");
    end;

    private macro Eq2_1_6()
        m_protocol.printAttributeHeader("Eq2_1_6");

        var value = TValue();

        if (m_parameters.ПрибыльТекущегоГодаПодтверждена)
            m_protocol.PrintLine("Прибыль текущего года подтверждена.");
            m_protocol.PrintLine("В расчет входят:");
            value = summarizeBalanceRests(m_parameters.ДатаАудПодтв_ТекГ - 1, nullFilter,
                                          "70601", "70603", "70604", "70605", "61301", "61304",
                                          "-70501", "-70606", "-70608", "-70609", "-70610", "-50905", "-61401", "-61403");

            value.plus(summarizeAccountRests("10603*, 70602*", getCategoryFilter("ТСС", CATEGORY_EXIST_CONDITION, m_parameters.ДатаАудПодтв_ТекГ - 1), 
                                             m_parameters.ДатаАудПодтв_ТекГ - 1));
            value.minus(summarizeAccountRests("10605*, 70607*", getCategoryFilter("ТСС", CATEGORY_EXIST_CONDITION, m_parameters.ДатаАудПодтв_ТекГ - 1), 
                                              m_parameters.ДатаАудПодтв_ТекГ - 1, true));
            
            if (not isLastDayInMonth(m_period.endDate()))
                value.minus(TValue("Eq2_1_6ввод"));
            end;
        else
            m_protocol.printLine("Прибыль текущего года не подтверждена.");
            m_protocol.printLine("Значение переменной равно нулю.");
        end;

        if (value.getExact < 0)
            m_protocol.printLine("Сумма составляющих < 0, значение переменной равно нулю.");
            value = TValue();
        end;
        setAttributeValue(value, "Eq2_1_6");
    end;

    private macro Eq2_1_6ввод()
        m_protocol.printAttributeHeader("Eq2_1_6ввод");
        setAttributeValue(TValue("Eq2_1_6ввод"), "Eq2_1_6ввод");

        if (isLastDayInMonth(m_period.endDate()))
            m_protocol.printLine("Значение переменной в расчете не участвует, т.к. отчет выпускается не на внутримесячную дату.");
        end;
    end;

    private macro Eq2_1_6переоценка()
        m_protocol.printAttributeHeader("Eq2_1_6переоценка");

        var value = TValue();
        if (m_parameters.ПрибыльТекущегоГодаПодтверждена)
            m_protocol.PrintLine("Прибыль текущего года подтверждена.");
            value = summarizeAccountRests("10603*,70602*",
                                          getCategoryFilter("ТСС", CATEGORY_EXIST_CONDITION, m_parameters.ДатаАудПодтв_ТекГ - 1), 
                                          m_parameters.ДатаАудПодтв_ТекГ - 1);
            value.minus(summarizeAccountRests("10605*,70607*",
                                              getCategoryFilter("ТСС", CATEGORY_EXIST_CONDITION, m_parameters.ДатаАудПодтв_ТекГ - 1), 
                                              m_parameters.ДатаАудПодтв_ТекГ - 1, true));
        else
            m_protocol.PrintLine("Прибыль текущего года не подтверждена.");
            m_protocol.PrintLine("Значение переменной равно нулю.");
        end;

        if (value.getExact() < $0.0)
            value.clear();
        end;

        setAttributeValue(value, "Eq2_1_6переоценка");
    end;

    private macro Eq2_1_7()
        m_protocol.printAttributeHeader("Eq2_1_7");
        setAttributeValue(TValue("Eq2_1_7"), "Eq2_1_7");
    end;

    private macro Eq2_1_11()
        m_protocol.printAttributeHeader("Eq2_1_11");

        var value = TValue();
        if (m_parameters.ПрибыльПрошлогоГодаПодтверждена)
             m_protocol.printLine("Прибыль прошлого года подтверждена.");
             m_protocol.printLine("В расчет входят:");
            value = summarizeBalanceRests(m_period.endDate(), nullFilter,
                                          "10801", "70302", "70701", "70703", "70704", "70705", "70801",
                                          "-10901","-70402", "-70706", "-70708", "-70709", "-70710", "-70802", "-70502");
            value.plus(summarizeAccountRests("70702*", getCategoryFilter("ТСС", CATEGORY_EXIST_CONDITION)));
            value.minus(summarizeAccountRests("70707*", getCategoryFilter("ТСС", CATEGORY_EXIST_CONDITION), null, true));
        else
            m_protocol.printLine("Прибыль прошлого года не подтверждена.");
            m_protocol.printLine("Значение переменной равно нулю.");
        end;        
        if (value.getExact < 0)
            m_protocol.printLine("Сумма составляющих < 0, значение переменной равно нулю.");
            value = TValue();
        end;
        setAttributeValue(value, "Eq2_1_11");
    end;

    private macro EqИстОсн()
        m_protocol.printAttributeHeader("EqИстОсн");
        var value = TValue();
        setAttributeValue(value.plus(TValue("Eq2_1_1__2_1_2")).plus(TValue("Eq2_1_3__2_1_4")).plus(TValue("Eq2_1_5")).plus(TValue("Eq2_1_6")).plus(TValue("Eq2_1_7")).plus(TValue("Eq2_1_11")), "EqИстОсн");
    end;

    private macro Eq2_2_1()
        m_protocol.printAttributeHeader("Eq2_2_1");

        var value = summarizeAccountRests("60901*");
        value.plus(summarizeAccountRests("60701*", getCategoryFilter("НМА", CATEGORY_EXIST_CONDITION)));
        value.minus(summarizeBalanceRests(m_period.endDate(), nullFilter, "60903"));
        setAttributeValue(value, "Eq2_2_1");
    end;

    private macro Eq2_2_2__2_2_3()
        m_protocol.printAttributeHeader("Eq2_2_2__2_2_3");

        var value          = summarizeAccountRests("10501*");
        var dataSet        = NULL;
        var isExistAccount = false;

        if (value.getExact() != 0)
            value.plus(TValue("Eq2_2_2__2_2_3ввод"));
        else
            dataSet = TRsbDataSet("SELECT t_rest, t_account,"
                + "\n" +          "       NVL(rep_note.readBoughtOutCost(t_chapter, t_account, t_code_currency, " + getSqlDate(m_period.endDate()) + "), 0.0) t_noteValue"
                + "\n" +          "  FROM " + getAccountDataSourceQuery("10502*"));

            while (dataSet.moveNext())
                if (dataSet.noteValue != $0.0)
                    m_protocol.printLine("Значение примечания \"стоимость выкупленных долей\" на дату отчета = " + String(dataSet.noteValue:0:2) + " руб.");
                    m_protocol.printLine("Лицевой счет: " + dataSet.account);
                    value = TValue(dataSet.noteValue);
                else
                    m_protocol.printLine("Значение примечания \"стоимость выкупленных долей\" на дату отчета равно нулю.");
                    m_protocol.printLine("Значение переменной равно остатку на лицевом счете на дату отчета:");
                    m_protocol.printAccount(dataSet.account, dataSet.rest);
                    
                    value = TValue(dataSet.rest);
                end;
                isExistAccount = true;
            end;
            if (not isExistAccount)
                m_protocol.printLine("Нет данных для расчета.");
            end;
        end;

        setAttributeValue(value, "Eq2_2_2__2_2_3");
    end;

    private macro Eq2_2_2__2_2_3ввод()
        m_protocol.printAttributeHeader("Eq2_2_2__2_2_3ввод");
        setAttributeValue(TValue("Eq2_2_2__2_2_3ввод"), "Eq2_2_2__2_2_3ввод");
    end;


    private macro Eq2_2_4()
        m_protocol.printAttributeHeader("Eq2_2_4");

        var value = summarizeBalanceRests(m_period.endDate(), nullFilter,
                                          "10901", "70402", "70706", "70708", "70709", "70710", "70802", "70502",
                                          "-10801", "-70302", "-70701", "-70703", "-70704", "-70705", "-70801");

        value.plus(summarizeAccountRests("70707*", getCategoryFilter("ТСС", CATEGORY_EXIST_CONDITION)));
        value.minus(summarizeAccountRests("70702*", getCategoryFilter("ТСС", CATEGORY_EXIST_CONDITION), null, true));

        if (value.getExact < 0)
            m_protocol.printLine("Сумма составляющих < 0, значение переменной равно нулю.");
            value.clear();
        end;
        setAttributeValue(value, "Eq2_2_4");
    end;

    private macro Eq2_2_5()
        m_protocol.printAttributeHeader("Eq2_2_5");

        var value = summarizeBalanceRests(m_period.endDate(), nullFilter,
                                          "70501", "70606", "70608", "70609", "70610", "50905", "61401", "61403",
                                          "-70601", "-70603", "-70604", "-70605", "-61301", "-61304");

        value.plus(summarizeAccountRests("10605*, 70607*", getCategoryFilter("ТСС", CATEGORY_EXIST_CONDITION)));
        value.minus(summarizeAccountRests("10603*, 70602*", getCategoryFilter("ТСС", CATEGORY_EXIST_CONDITION), null, true));

        value.plus(TValue("Eq2_1_6"));

        if (not isLastDayInMonth(m_period.endDate()))
            value.plus(TValue("Eq2_2_5ввод"));
        end;

        if (value.getExact < 0)
            m_protocol.printLine("Сумма составляющих < 0, значение переменной равно нулю.");
            value.clear();
        end;
        setAttributeValue(value, "Eq2_2_5");
    end;

    private macro Eq2_2_5ввод()
        m_protocol.printAttributeHeader("Eq2_2_5ввод");
        setAttributeValue(TValue("Eq2_2_5ввод"), "Eq2_2_5ввод");

        if (isLastDayInMonth(m_period.endDate()))
            m_protocol.printLine("Значение переменной в расчете не участвует, т.к. отчет выпускается не на внутримесячную дату.");
        end;
    end;

    private macro Eq2_2_5переоценка()
        m_protocol.printAttributeHeader("Eq2_2_5переоценка");

/*			по запросу банка сюда должны попадать ТОЛЬКО 10605 10603 БЕЗ учета категорий
        var value = summarizeAccountRests("10605*,70607*", getCategoryFilter("ТСС", CATEGORY_EXIST_CONDITION));
        value.minus(summarizeAccountRests("10603*,70602*", getCategoryFilter("ТСС", CATEGORY_EXIST_CONDITION), null, true));

        05.05.2010 снова по запросу банка добавляю +70607 и -70602
*/
        var value = summarizeBalanceRests(m_period.endDate(), nullFilter,  "10605", "-10603","70607","-70602"); // vihrov
        //debugbreak;
        value.plus(TValue("Eq2_1_6переоценка"));

        if (value.getExact() < $0.0)
            value.clear();
        end;

        setAttributeValue(value, "Eq2_2_5переоценка");
    end;

    private macro Eq2_2_6()
        m_protocol.printAttributeHeader("Eq2_2_6");
        

        macro isReserve(account)
            return (in(substr(account, 1, 5), "50705", "50718", "60101", "60102", "60103", "60104", "60201", "60202", "60203", "60204"));
        end;

        macro getReserve(dataSet : Object)
            var reserve;

            if (isReserve(dataSet.account))
                reserve = getActualReserve(dataSet.chapter, dataSet.account, dataSet.fiId);
            else
                reserve = $0;
            end;

            return reserve;
        end;

        macro printAccountAndReserve(account, rest, reserve)
            if (isReserve(account))
               m_protocol.printAccountAndReserve(account, rest, reserve); 
            else
               m_protocol.printAccount(account, rest, reserve);
            end;
        end;

        var disa_disa:string;
        var reserve        = $0.0;
        var currentReserve = $0.0;
        var rest           = $0.0;
        var dataSet = TRsbDataSet("SELECT account.t_rest, account.t_chapter, account.t_account, account.t_code_currency t_fiId"
            + "\n" +              "  FROM " + getAccountDataSourceQuery("60101*-60104*") + " account"
            + "\n" +              " WHERE " + getCategoryFilter("ИП", CATEGORY_EXIST_CONDITION)
            + "\n" +              "   AND rep_note.readShareInCapital(account.t_client, " + getSqlDate(m_period.endDate()) + ") > 20.0"
            + "\n" +              "   AND account.t_rest <> 0.0");
        while (dataSet.moveNext())
            currentReserve = getReserve(dataSet);
            reserve = reserve + currentReserve;
            rest    = rest    + dataSet.rest;
            printAccountAndReserve(dataSet.account, dataSet.rest, reserve);
        end;

        dataSet = TRsbDataSet("SELECT account.t_rest, account.t_chapter, account.t_account, account.t_code_currency t_fiId"
            + "\n" +          "  FROM " + getAccountDataSourceQuery("50605*, 50618*, 50705*, 50718*, 60203*, 60204*, 50621*, 50721*") + " account,"
            + "\n" +          "       dpartyOwn_dbt partyOwn"
            + "\n" +          " WHERE account.t_client = partyOwn.t_partyId"
            + "\n" +          "   AND " + getCategoryFilter("ИП", CATEGORY_EXIST_CONDITION)
            + "\n" +          "   AND rep_note.readShareInCapital(partyOwn.t_partyId, " + getSqlDate(m_period.endDate()) + ") > 20.0"
            + "\n" +          "   AND partyOwn.t_partyKind = " + RCB_PTK_SUBSIDIARY
            + "\n" +          "   AND account.t_rest <> 0.0");

        while (dataSet.moveNext())
            currentReserve = getReserve(dataSet);
            reserve = reserve + currentReserve;
            rest    = rest    + dataSet.rest;
            printAccountAndReserve(dataSet.account, dataSet.rest, reserve);
        end;

        dataSet = TRsbDataSet("SELECT account.t_rest, account.t_chapter, account.t_account, account.t_code_currency t_fiId"
            + "\n" +          "  FROM " + getAccountDataSourceQuery("50620*, 50720*") + " account,"
            + "\n" +          "       dpartyOwn_dbt partyOwn"
            + "\n" +          " WHERE account.t_client = partyOwn.t_partyId"
            + "\n" +          "   AND " + getCategoryFilter("ИП", CATEGORY_EXIST_CONDITION)
            + "\n" +          "   AND rep_note.readShareInCapital(partyOwn.t_partyId, " + getSqlDate(m_period.endDate()) + ") > 20.0"
            + "\n" +          "   AND partyOwn.t_partyKind = " + RCB_PTK_SUBSIDIARY
            + "\n" +          "   AND account.t_rest <> 0.0");
        while (dataSet.moveNext())
            currentReserve = getReserve(dataSet);
            reserve = reserve + currentReserve;
            rest    = rest    - dataSet.rest;
            printAccountAndReserve("-" + dataSet.account, dataSet.rest, reserve);
        end;

        dataSet = TRsbDataSet("SELECT account.t_rest, account.t_chapter, account.t_account, account.t_code_currency t_fiId"
            + "\n" +         "  FROM " + getAccountDataSourceQuery("60201*") + " account"
            + "\n" +         " WHERE account.t_rest <> 0.0");
        while (dataSet.moveNext())
            currentReserve = getReserve(dataSet);
            reserve = reserve + currentReserve;
            rest    = rest    + dataSet.rest;
            printAccountAndReserve(dataSet.account, dataSet.rest, reserve);
        end;

/*        debugbreak;



        disa_disa=("SELECT account.t_rest, account.t_chapter, account.t_account, account.t_code_currency t_fiId"
            + "\n" +          "  FROM " + getAccountDataSourceQuery("60202*") + " account" //vihrov03.05.10 и здесь одну запятую убрал
//vihrov03.05.10            + "\n" +          "       dpartyOwn_dbt partyOwn"
            + "\n" +          " WHERE 1=1" //vihrov03.05.10 account.t_client = partyOwn.t_partyId"
            + "\n" +          "   AND " + getCategoryFilter("2.2.6 искл", CATEGORY_NOT_EXIST_CONDITION)
//vihrov03.05.10            + "\n" +          "   AND partyOwn.t_partyKind = " + RCB_PTK_BANK
            + "\n" +          "   AND account.t_rest <> 0.0");
         getstring(disa_disa);



  */

        disa_disa="SELECT account.t_rest, account.t_chapter, account.t_account, account.t_code_currency t_fiId"
            + "\n" +          "  FROM " + getAccountDataSourceQuery("60202*") + " account" //vihrov03.05.10 и здесь одну запятую убрал
//vihrov03.05.10            + "\n" +          "       dpartyOwn_dbt partyOwn"
            + "\n" +          " WHERE 1=1" //vihrov03.05.10 account.t_client = partyOwn.t_partyId"
            + "\n" +          "   AND " + getCategoryFilter("2.2.6 искл", CATEGORY_NOT_EXIST_CONDITION)
//vihrov03.05.10            + "\n" +          "   AND partyOwn.t_partyKind = " + RCB_PTK_BANK
            + "\n" +          "   AND account.t_rest <> 0.0 "; //vihrov 13.01.2011
//         getstring(disa_disa);

        dataSet = TRsbDataSet(disa_disa);

        while (dataSet.moveNext())
            currentReserve = getReserve(dataSet);
            reserve = reserve + currentReserve;
            rest    = rest    + dataSet.rest;
            printAccountAndReserve(dataSet.account, dataSet.rest, reserve);
        end;


//-----------------------------------------------------------------------------------------------------------------------------вихров костыль
        dataSet = TRsbDataSet("SELECT account.t_rest, account.t_chapter, account.t_account, account.t_code_currency t_fiId"
            + "\n" +         "  FROM " + getAccountDataSourceQuery("60202810000000021377") + " account"
            + "\n" +         " WHERE account.t_rest <> 0.0");
        while (dataSet.moveNext())
            currentReserve = getReserve(dataSet);
            reserve = reserve + currentReserve;
            rest    = rest    + dataSet.rest;
            printAccountAndReserve(dataSet.account, dataSet.rest, reserve);
        end;
//--------------------------------------------------------------------------------------------------------------------------------------------

		if  (is_GO)
			var for_go_2_2_6     = $0.0;
			var val_for_go_2_2_6 = Tvalue();
			Getmoney (for_go_2_2_6, " переменная 2_2_6", 10);
			val_for_go_2_2_6 = Tvalue(for_go_2_2_6);
        	setAttributeValue(val_for_go_2_2_6, "Eq2_2_6");
	        m_protocol.printAttributeHeader(" \nдля банка ПОЙДЕМ значение переменной установлено вручную и равняется "+for_go_2_2_6);
		else
        	setAttributeValue(TValue(rest-reserve).plus(TValue("Eq2_2_6ввод")), "Eq2_2_6");
        end;
    end;

    private macro Eq2_2_6ввод()
        m_protocol.printAttributeHeader("Eq2_2_6ввод");
        setAttributeValue(TValue("Eq2_2_6ввод"), "Eq2_2_6ввод");
    end;

    private macro Eq2_2_8()
        m_protocol.printAttributeHeader("Eq2_2_8");

        var currentReserve = $0.0;
        var reserve        = $0.0;
        var rest           = $0.0;

        var dataSet = TRsbDataSet("SELECT account.t_rest, account.t_chapter, account.t_account, account.t_code_currency t_fiId"
            + "\n" +              "  FROM " + getAccountDataSourceQuery("102*, 10602*, 107*, 108*") + " account"
            + "\n" +              " WHERE " + getCategoryFilter("2.2.8", CATEGORY_EXIST_CONDITION)
            + "\n" +              "   AND account.t_rest <> 0.0");
        while (dataSet.moveNext())
            currentReserve = getActualReserve(dataSet.chapter, dataSet.account, dataSet.fiId);
            reserve = reserve + currentReserve;
            rest    = rest + dataSet.rest;
            m_protocol.printAccountAndReserve(dataSet.account, dataSet.rest, reserve);
        end;

   		if  (is_GO)
			var for_go_2_2_8     = $0.0;
			var val_for_go_2_2_8 = Tvalue();
			Getmoney (for_go_2_2_8, " переменная 2_2_8", 10);
			val_for_go_2_2_8 = Tvalue(for_go_2_2_8);
        	setAttributeValue(val_for_go_2_2_8, "Eq2_2_8");
	        m_protocol.printAttributeHeader(" \nдля банка ПОЙДЕМ значение переменной установлено вручную и равняется "+for_go_2_2_8);
		else
	        setAttributeValue(TValue(rest-reserve).plus(TValue("Eq2_2_8ввод")), "Eq2_2_8");
	    end;
    end;

    private macro Eq2_2_8ввод()
        m_protocol.printAttributeHeader("Eq2_2_8ввод");
        setAttributeValue(TValue("Eq2_2_8ввод"), "Eq2_2_8ввод");
    end;

    private macro Eq2_2_9()
        m_protocol.printAttributeHeader("Eq2_2_9");
                
        setAttributeValue(TValue("Eq2_2_9"), "Eq2_2_9");        
    end;

    private macro EqОсн()
        m_protocol.printAttributeHeader("EqОсн");

        var value = TValue().plus(TValue("EqИстОсн")).minus(TValue("Eq2_2_1")).minus(TValue("Eq2_2_2__2_2_3")).minus(TValue("Eq2_2_4")).minus(TValue("Eq2_2_5"));
        value = value.minus(TValue("Eq2_2_6")).minus(TValue("Eq2_2_8")).minus(TValue("Eq2_2_9"));

        setAttributeValue(value, "EqОсн");
    end;

    private macro Eq3_1()
        m_protocol.printAttributeHeader("Eq3_1");

        var value = TValue();
        debugbreak;
        value = summarizeAccountRests("10601*"); //vihrov
        value.minus(summarizeAccountRests("10601810900000120000",null,null,true));  //vihrov 02.09.2010 заявка I-063431
        if (TValue("EqОсн").getExact() > $0.0)
            value = value.plus(TValue("Eq3_1ввод"));
        else
            m_protocol.printLine("переменная = 0, т.к. EqОсн (\"Основной капитал\") <=0");
        end;

        setAttributeValue(value, "Eq3_1");		//vihrov
    end;

    private macro Eq3_1ввод()
        m_protocol.printAttributeHeader("Eq3_1ввод");
        setAttributeValue(TValue("Eq3_1ввод"), "Eq3_1ввод");
    end;

    private macro Eq3_3()
        m_protocol.printAttributeHeader("Eq3_3");

        var value = TValue();
        if (TValue("EqОсн").getExact() > $0.0)
            value = value.plus(TValue("Eq3_3ввод"));
        else
            m_protocol.printLine("переменная = 0, т.к. EqОсн (\"Основной капитал\") <=0");
        end;

        setAttributeValue(value, "Eq3_3");
    end;

    private macro Eq3_3ввод()
        m_protocol.printAttributeHeader("Eq3_3ввод");
        setAttributeValue(TValue("Eq3_3ввод"), "Eq3_3ввод");
    end;

    private macro Eq3_4()
        m_protocol.printAttributeHeader("Eq3_4");

        var value = TValue();
        if (TValue("EqОсн").getExact() > $0.0)
            value = summarizeBalanceRests(m_period.endDate(), nullFilter,
                                          "70601", "70603", "70604", "70605", "61301", "61304",
                                          "-70501", "-70606", "-70608", "-70609", "-70610", "-50905", "-61401", "-61403");

            value.plus(summarizeAccountRests("10603*, 70602*", getCategoryFilter("ТСС", CATEGORY_EXIST_CONDITION)));
            value.minus(summarizeAccountRests("10605*, 70607*", getCategoryFilter("ТСС", CATEGORY_EXIST_CONDITION), null, true));

            value.minus(TValue("Eq2_1_6"));

            if (not isLastDayInMonth(m_period.endDate()))
                value.minus(TValue("Eq2_2_5ввод"));
            end;
        else
            m_protocol.printLine("переменная = 0, т.к. EqОсн (\"Основной капитал\") <=0");
        end;

        if (value.getExact < 0)
            m_protocol.printLine("Сумма составляющих < 0, значение переменной равно нулю.");
            value.clear();
        end;

        setAttributeValue(value, "Eq3_4");
    end;

    private macro Eq3_4переоценка()
        m_protocol.printAttributeHeader("Eq3_4переоценка");

        var value = TValue();
        if (TValue("EqОсн").getExact() > $0.0)

/*            value = summarizeAccountRests("10603*,70602*", getCategoryFilter("ТСС", CATEGORY_EXIST_CONDITION));

            value.minus(summarizeAccountRests("10605*,70607*", getCategoryFilter("ТСС", CATEGORY_EXIST_CONDITION), null, true));
            по запросу банка включаем в расчет только счета 10605 10603 без учета категорий

            05.05.2010 cнова по запросу банка вернем взад -70607 и +70602 вихров
*/
            value = summarizeBalanceRests(m_period.endDate(), nullFilter,  "-10605", "10603","70602","-70607"); // vihrov
           //debugbreak;

            value.minus(TValue("Eq2_1_6переоценка"));
        else
            m_protocol.printLine("переменная = 0, т.к. EqОсн (\"Основной капитал\") <=0");
        end;

        if (value.getExact() < $0.0)
            value.clear();
        end;

        setAttributeValue(value, "Eq3_4переоценка");
    end;

/* HP  добавлен вывод счетов, участвующих в расчете строки 204*/
    private macro Eq3_5()
        m_protocol.printAttributeHeader("Eq3_5");

        macro getDepreciatedCost(maturityDate : Date, rest : Money)
            var dayTerm     = 0;
            /*Банк иначе считает полные кварталы - от даты погашения */

            if (maturityDate != NULL)
                dayTerm = maturityDate - m_period.endDate();
            end;
            var monthTerm   = floatMonths(m_period.endDate() - dayTerm, m_period.endDate());
            var quarterTerm = Int(monthTerm / 3);/*требуется количество полных кварталов*/
            var yearTerm    = monthTerm / 12.0;

            if (dayTerm <= 0)
                return $0.0;
            elif (yearTerm <= 5)
                [ дней         месяцев      кварталов    лет        ];
                [############# ############ ############ ###########] (dayTerm:l, monthTerm:l, quarterTerm:l, yearTerm:l);
                return Money(rest * quarterTerm / 20.0);
            else
                [ до окончания больше 5 лет ];
                return rest;
            end;
        end;

        var depreciatedCost = $0.0;
        var masks = "20313*, 20314*, 31309*, 31409*, 31509*, 31609*, 41107*, 41207*, 41307*, 41407*,41507*,"  +
                    "41607*, 41707*, 41807*, 41907*, 42007*, 42107*, 42207*, 42507*, 42807*, 42907*, 43007*," +
                    "43107*, 43207*, 43307*, 43407*, 43507*, 43607*, 43707*, 43807*, 43907*, 44007*, 52006*";

        var PrevCost = $0.0;
        var dataSet = TRsbDataSet("SELECT NVL(rep_note.readMaturityDate(t_chapter, t_account, t_code_currency, " + getSqlDate(m_period.endDate())+ "),"
            + "\n" +              "           CASE"
            + "\n" +              "               WHEN t_operationDate <> TO_DATE('01-01-0001', 'DD-MM-YYYY')"
            + "\n" +              "                   THEN t_daysToEnd + t_operationDate"
            + "\n" +              "               WHEN t_daysToEnd <> 0"
            + "\n" +              "                   THEN t_daysToEnd + " + getSqlDate(m_period.endDate())
            + "\n" +              "               ELSE"
            + "\n" +              "                   NULL"
            + "\n" +              "           END) t_maturityDate,"
            + "\n" +              "       t_account, t_rest"
            + "\n" +              "  FROM " + getAccountDataSourceQuery(masks) + " account"
            + "\n" +              " WHERE " + getCategoryFilter("СубКредит", CATEGORY_EXIST_CONDITION)
            + "\n" +              "   AND account.t_rest <> 0.0");


            while (dataSet.moveNext())
            depreciatedCost = depreciatedCost + getDepreciatedCost(dataSet.maturityDate, dataSet.rest);
            PrevCost= getDepreciatedCost(dataSet.maturityDate, dataSet.rest);
              [#####################   ####################### ]
               (dataSet.Account,PrevCost:l);
              [------------------------------------------------]; 
        end;

        var value = TValue("EqОсн");
        if (value.getExact() > $0.0)
            if (depreciatedCost < (value.getExact() * 0.5))
                m_protocol.printLine("Вычисленное значение меньше чем 50% величины основного капитала (EqОсн = " + value.getExact() + ").");
                m_protocol.printLine("Значение переменной = " + depreciatedCost + ".");
                value = TValue(depreciatedCost);
            else
                m_protocol.printLine("Вычисленное значение больше либо равно чем 50% величины основного капитала (EqОсн = " + value.getExact() + ").");
                m_protocol.printLine("Значение переменной = 0.5*" + value.getExact() + ".");
                value = TValue(0.5 * value.getExact());
            end;
        else
            m_protocol.printLine("переменная = 0, т.к. EqОсн (\"Основной капитал\") <=0");
            value.clear();
        end;

		if  (is_GO)
			var for_go_3_5     = $0.0;
			var val_for_go_3_5 = Tvalue();
			Getmoney (for_go_3_5, " переменная 3_5", 10);
			val_for_go_3_5 = Tvalue(for_go_3_5);
        	setAttributeValue(val_for_go_3_5, "Eq3_5");
	        m_protocol.printAttributeHeader(" \nдля банка ПОЙДЕМ значение переменной установлено вручную и равняется "+for_go_3_5);
		else
	        setAttributeValue(value, "Eq3_5");
	    end;
    end;


    private macro Eq3_6()
        m_protocol.printAttributeHeader("Eq3_6");

        var value = TValue();

        if (TValue("EqОсн").getExact() > 0)
            value = value.plus(TValue("Eq3_6ввод"));
        else
            m_protocol.printLine("переменная = 0, т.к. EqОсн (\"Основной капитал\") <=0");
            value.clear();
        end;

        setAttributeValue(value, "Eq3_6");
    end;

    private macro Eq3_6ввод()
        m_protocol.printAttributeHeader("Eq3_6ввод");
        setAttributeValue(TValue("Eq3_6ввод"), "Eq3_6ввод");
    end;

    private macro Eq3_7()
        m_protocol.printAttributeHeader("Eq3_7");

        var value = TValue();

        if (TValue("EqОсн").getExact() > 0)
            value = summarizeAccountRests("10207*", getCategoryFilter("3.7", CATEGORY_EXIST_CONDITION));
        else
            m_protocol.printLine("переменная = 0, т.к. EqОсн (\"Основной капитал\") <=0");
            value.clear();
        end;

        setAttributeValue(value, "Eq3_7");
    end;

    private macro Eq3_9()
        m_protocol.printAttributeHeader("Eq3_9");

        var value = TValue();

        if (TValue("EqОсн").getExact() > 0)
            if (not m_parameters.ПрибыльПредшествующегоГодаНеПодтверждена)
                m_protocol.printLine("Прибыль предшествующего года не подтверждена и дата отчета <= 01.07 текущего года.");
                m_protocol.printLine("Значение переменной равно нулю.");
                value.clear();
            else
                m_protocol.printLine("Прибыль предшествующего года не подтверждена и дата отчета > 01.07 текущего года.");
                m_protocol.printLine("В расчет входят:");
                value = summarizeBalanceRests(m_period.endDate(), nullFilter,
                                              "10801", "70302", "70701", "70703", "70704", "70705", "70801",
                                              "-10901", "-70402", "-70706", "-70708", "-70709", "-70710", "-70802", "-70502");
                value.plus(summarizeAccountRests("70702*", getCategoryFilter("ТСС", CATEGORY_EXIST_CONDITION)));
                value.minus(summarizeAccountRests("70707*", getCategoryFilter("ТСС", CATEGORY_EXIST_CONDITION), null, true));
            end;
        else
            m_protocol.printLine("переменная = 0, т.к. EqОсн (\"Основной капитал\") <=0");
            value.clear();
        end;

        if (value.getExact < 0)
            m_protocol.printLine("Сумма составляющих < 0, значение переменной равно нулю.");
            value.clear();
        end;

        setAttributeValue(value, "Eq3_9");
    end;

    private macro Eq3_10()
        
        m_protocol.printAttributeHeader("Eq3_10");
        
        var value   = TValue();

        var masksAccount = "10207*,10603*,10801*,61301*,61304*,20313*,20314*,31309*,31409*,31509*,31609*,41107*,41207*,41307*,41407*,41507*,"
                           "41607*,41707*,41807*,41907*,42007*,42107*,42207*,42507*,42807*,42907*,43007*,43107*,43207*,43307*,43407*,43507*,"
                           "43607*,43807*,43907*,44007*,52006*,70601*,70602*,70603*,70604*,70605*,70701*,70702*,70703*,70704*,70705*,70801*";

        var masksReserve = "20321*,30126*,30226*,30410*,30607*,32015*,32115*,32211*,32311*,32403*,32505*,44115*,44215*,44315*,44415*,44515*,"
                           "44615*,44715*,44815*,44915*,45015*,45115*,45215*,45315*,45415*,45515*,45615*,45715*,45818*,45918*,46008*,46108*,"
                           "46208*,46308*,46408*,46508*,46608*,46708*,46808*,46908*,47008*,47108*,47208*,47308*,47425*,47425*,47702*,47804*,"
                           "47902*,50219*,50319*,50507*,50719*,50908*,51210*,51310*,51410*,51510*,51610*,51710*,51810*,51910*,60105*,60206*,"
                           "60324*,60405*";

        if (TValue("EqОсн").getExact() > 0)
            value = summarizeAccountRests(masksAccount, getCategoryFilter("3.10_", CATEGORY_EXIST_CONDITION));
            value.minus(summarizeAccountRests(masksReserve, getCategoryFilter("3.10_", CATEGORY_EXIST_CONDITION), null, true));
            value.plus(TValue("Eq3_10ввод"));
       else
            m_protocol.printLine("переменная = 0, т.к. EqОсн (\"Основной капитал\") <=0");
            value.clear();
        end;

        setAttributeValue(value, "Eq3_10");
    end;

    private macro Eq3_10ввод()
        m_protocol.printAttributeHeader("Eq3_10ввод");
        setAttributeValue(TValue("Eq3_10ввод"), "Eq3_10ввод");
    end;

    private macro EqИстДоп()
        m_protocol.printAttributeHeader("EqИстДоп");

        setAttributeValue(TValue().plus(TValue("Eq3_1")).plus(TValue("Eq3_3")).plus(TValue("Eq3_4")).plus(TValue("Eq3_5")).plus(TValue("Eq3_6")).plus(TValue("Eq3_7")).plus(TValue("Eq3_9")).minus(TValue("Eq3_10")), "EqИстДоп");
    end;

    private macro EqДоп()
        m_protocol.printAttributeHeader("EqДоп");

        var value = TValue();
        var eqOsnValue    = TValue("EqОсн");
        var eqIstDopValue = TValue("EqИстДоп");

        if (eqOsnValue.getExact() > 0)
            if (eqOsnValue.getExact() <= eqIstDopValue.getExact())
                m_protocol.printLine("Переменная EqОсн (\"Основной капитал\") = " + eqOsnValue.getExact() + " <= переменной EqИстДоп = " + eqIstDopValue.getExact() + ".");
                m_protocol.printLine("Значение перменной равно " + eqOsnValue.getExact());
                value = eqOsnValue;
            else
                m_protocol.PrintLine("Переменная EqОсн (\"Основной капитал\") = " + eqOsnValue.getExact() + " > переменной EqИстДоп = " + eqIstDopValue.getExact() + ".");
                m_protocol.PrintLine("Значение перменной равно " + eqIstDopValue.getExact());
                value = eqIstDopValue;
            end;
        else
            m_protocol.printLine("Переменная EqОсн (\"Основной капитал\") <= 0 значение перменной равно нулю");
        end;

        setAttributeValue(value, "EqДоп");
    end;

    private macro Eq4_1()
        m_protocol.printAttributeHeader("Eq4_1");
        setAttributeValue(TValue("Eq4_1"), "Eq4_1");
    end;

    private macro Eq4_2()
        m_protocol.printAttributeHeader("Eq4_2");
        setAttributeValue(TValue("Eq4_2"), "Eq4_2");
    end;

    private macro Eq4_3()
        m_protocol.printAttributeHeader("Eq4_3");
        setAttributeValue(TValue("Eq4_3"), "Eq4_3");
    end;

    private macro Eq4_5()
        m_protocol.printAttributeHeader("Eq4_5");

        var currentReserve = $0.0;
        var reserve        = $0.0;
        var rest           = $0.0;

        var dataSet = TRsbDataSet("SELECT account.t_rest, account.t_chapter, account.t_account, account.t_code_currency t_fiId"
            + "\n" +              "  FROM " + getAccountDataSourceQuery("474*, 603*") + " account,"
            + "\n" +              "       dbalance_dbt balance"
            + "\n" +              " WHERE account.t_kind_account = 'А'"
            + "\n" +              "   AND account.t_balance NOT IN ('47402', '47408', '47423', '47427', '60312', '60314', '60315', '60323', '60337', '60339', '60341', '60343')"
            + "\n" +              "   AND account.t_balance = balance.t_balance"
            + "\n" +              "   AND balance.t_bdexcludebwp >= " + getSqlDate(m_period.endDate()) 
            /*проверяем срок просрочки*/
            + "\n" +              "   AND (" + getSqlDate(m_period.endDate()) + " -"
            + "\n" +              "           NVL(rep_note.readMaturityDate(account.t_chapter, account.t_account, account.t_code_currency, " + getSqlDate(m_period.endDate()) + "),"
            + "\n" +              "               CASE"
            + "\n" +              "                   WHEN (account.t_operationDate <> TO_DATE('01-01-0001', 'DD-MM-YYYY')) AND (account.t_daysToEnd <> 0)"
            + "\n" +              "                       THEN account.t_daysToEnd + account.t_operationDate"
            + "\n" +              "                   ELSE"
            + "\n" +              "                       " + getSqlDate(m_period.endDate()) + ""
            + "\n" +              "               END)) > 30"
            + "\n" +              "   AND account.t_rest <> 0.0");
            
        while (dataSet.moveNext())
            currentReserve = getActualReserve(dataSet.chapter, dataSet.account, dataSet.fiId);            
            reserve = reserve + currentReserve;
            rest    = rest + dataSet.rest;
            m_protocol.printAccountAndReserve(dataSet.account, dataSet.rest, reserve);
        end;

        setAttributeValue(TValue(rest - reserve), "Eq4_5");
    end;

    private macro Eq4_6()
        m_protocol.printAttributeHeader("Eq4_6");

        var currentReserve = $0.0;
        var reserve        = $0.0;
        var rest           = $0.0;

        var dataSet = TRsbDataSet("SELECT account.t_rest, account.t_chapter, account.t_account, account.t_code_currency t_fiId"
            + "\n" +              "  FROM " + getAccountDataSourceQuery("32009*, 32209*, 50307*, 50308*, 32009*, 32209*, 50307*, 50308*") + " account"
            + "\n" +              " WHERE " + getCategoryFilter("СубКредит", CATEGORY_EXIST_CONDITION)
            + "\n" +              "   AND account.t_rest <> 0.0");

        while (dataSet.moveNext())
            currentReserve = getActualReserve(dataSet.chapter, dataSet.account, dataSet.fiId);
            reserve = reserve + currentReserve;
            rest    = rest + dataSet.rest;
            m_protocol.printAccountAndReserve(dataSet.account, dataSet.rest, reserve);
        end;

        setAttributeValue(TValue(rest - reserve), "Eq4_6");
    end;

    private macro EqПром()
        m_protocol.printAttributeHeader("EqПром");

        setAttributeValue(TValue().plus(TValue("EqОсн")).plus(TValue("EqДоп")).minus(TValue("Eq4_1")).minus(TValue("Eq4_2")).minus(TValue("Eq4_3")).minus(TValue("Eq4_5")).minus(TValue("Eq4_6")), "EqПром");
    end;

    private macro Eq5_1()
        m_protocol.printAttributeHeader("Eq5_1");
        setAttributeValue(TValue("Eq5_1"), "Eq5_1");
    end;

    private macro Eq5_2()
        m_protocol.printAttributeHeader("Eq5_2");

        m_protocol.printLine("Вычисляем ОС:");
        var ocValue = summarizeAccountRests("60401*, 60404*", getCategoryFilter("5.2 искл", CATEGORY_NOT_EXIST_CONDITION));
        ocValue.plus(summarizeAccountRests("60701*", getCategoryFilter("НМА", CATEGORY_NOT_EXIST_CONDITION)));
        ocValue.plus(summarizeAccountRests("60102*, 61008*, 61009*, 61011*"));
        ocValue.minus(summarizeBalanceRests(m_period.endDate(), nullFilter, "60601"));
        ocValue.minus(TValue("Eq5_2ввод"));

        m_protocol.printLine(" ");
        m_protocol.printLine("Вычисляем СС:");
        var ccValue = summarizeBalanceRests(m_period.endDate(), nullFilter, "60601");
        ccValue = ccValue.plus(TValue("EqОсн")).plus(TValue("Eq3_3")).plus(TValue("Eq3_4")).plus(TValue("Eq3_6")).plus(TValue("Eq3_7")).plus(TValue("Eq3_9"));
        ccValue = ccValue.minus(TValue("Eq3_10")).minus(TValue("Eq4_1")).minus(TValue("Eq4_2")).minus(TValue("Eq4_3"));

        var value = TValue();
        m_protocol.printLine(" ");
        if (ccValue.getExact() < $0.0)
            m_protocol.printLine("Величина СС < 0 значение перменной равно " + ocValue.getExact());
            value = ocValue;
        elif (ccValue.getExact() < ocValue.getExact())
            value = TValue(ocValue.getExact() - ccValue.getExact());
            m_protocol.printLine("Величина CC > 0 и CС < OC значение перменной равно " + value.getExact());
        else
            m_protocol.printLine("Величина CС > OC значение перменной равно " + value.getExact());
        end;

        setAttributeValue(value, "Eq5_2");
    end;

    private macro Eq5_2ввод()
        m_protocol.printAttributeHeader("Eq5_2ввод");
        setAttributeValue(TValue("Eq5_2ввод"), "Eq5_2ввод");
    end;

    private macro Eq5_3()
        m_protocol.printAttributeHeader("Eq5_3");
        setAttributeValue(TValue("Eq5_3"), "Eq5_3");
    end;

    macro calculate(period : RcbPeriod)
        Eq2_1_1__2_1_2ввод();
        Eq2_1_1__2_1_2();
        Eq2_1_3__2_1_4();
        Eq2_1_6ввод();
        Eq2_1_6();
        Eq2_1_6переоценка();
        Eq2_1_7();
        Eq3_3();
        Eq2_1_5();
        Eq2_1_11();
        EqИстОсн();
        Eq2_2_1();
        Eq2_2_2__2_2_3ввод();
        Eq2_2_2__2_2_3();
        Eq2_2_4();
        Eq2_2_5ввод();
        Eq2_2_5();
        Eq2_2_5переоценка();
        Eq2_2_6ввод();
        Eq2_2_6();
        Eq2_2_8ввод();
        Eq2_2_8();
        Eq2_2_9();
        EqОсн();
        Eq3_1ввод();
        Eq3_1();
        Eq3_3();
        Eq3_3ввод();
        Eq3_4();
        Eq3_4переоценка();
        Eq3_5();
        Eq3_6ввод();
        Eq3_6();
        Eq3_7();
        Eq3_9();
        Eq3_10ввод();
        Eq3_10();
        EqИстДоп();
        EqДоп();
        Eq4_1();
        Eq4_2();
        Eq4_3();
        Eq4_5();
        Eq4_6();
        EqПром();
        Eq5_1();
        Eq5_2ввод();
        Eq5_2();
        Eq5_3();
        EqК();
    end;

    initTCalculatorBase(protocol);
end;

private class (TCalculator2055) TCalculator2133_2150(protocol : TProtocol)

    private macro Eq2_1_6()
        m_protocol.printAttributeHeader("Eq2_1_6");

        var value = TValue();

        if (m_parameters.ПрибыльТекущегоГодаПодтверждена)
            m_protocol.PrintLine("Прибыль текущего года подтверждена.");
            m_protocol.PrintLine("В расчет входят:");
            value = summarizeBalanceRests(m_parameters.ДатаАудПодтв_ТекГ - 1, nullFilter,
                                          "70601", "70603", "70604", "70605", "61301", "61304",
                                          "-70606", "-70608", "-70609", "-70610", "-70611", "-70612", "-50905", "-61401", "-61403");

            value.plus(summarizeAccountRests("10603*, 70602*", getCategoryFilter("ТСС", CATEGORY_EXIST_CONDITION, m_parameters.ДатаАудПодтв_ТекГ - 1), 
                                             m_parameters.ДатаАудПодтв_ТекГ - 1));
            value.minus(summarizeAccountRests("10605*, 70607*", getCategoryFilter("ТСС", CATEGORY_EXIST_CONDITION, m_parameters.ДатаАудПодтв_ТекГ - 1), 
                                              m_parameters.ДатаАудПодтв_ТекГ - 1, true));
            
            if (not isLastDayInMonth(m_period.endDate()))
                value.minus(TValue("Eq2_1_6ввод"));
            end;
        else
            m_protocol.printLine("Прибыль текущего года не подтверждена.");
            m_protocol.printLine("Значение переменной равно нулю.");
        end;

        if (value.getExact < 0)
            m_protocol.printLine("Сумма составляющих < 0, значение переменной равно нулю.");
            value = TValue();
        end;
        setAttributeValue(value, "Eq2_1_6");
    end;

    private macro Eq2_1_11()
//        msgboX("www");
debugbreak;
        m_protocol.printAttributeHeader("Eq2_1_11");
        var NoAcsMon =$0;

        private macro calcA()
            var calcValue = TValue();
        /*HP Необходимо вычесть неподтвержденную прибыль */
         NoAcsMon=$1409399000;
        Getmoney (NoAcsMon, "Подтвержд. прибыль, руб", 10);
            /*
            calcValue = summarizeBalanceRests(m_period.endDate(), nullFilter,
                                          "10801", "70302", "70701", "70703", "70704", "70705", "70801",
                                          "-10901","-70402", "-70706", "-70708", "-70709", "-70710", "-70711", "-70712", "-70802");
            calcValue.plus(summarizeAccountRests("70702*", getCategoryFilter("ТСС", CATEGORY_EXIST_CONDITION)));
            calcValue.minus(summarizeAccountRests("70707*", getCategoryFilter("ТСС", CATEGORY_EXIST_CONDITION), null, true));
            CalcValue=Tvalue(calcValue.getExact - NoAcsMon);
            */
             calcValue =Tvalue (NoAcsMon);
//            m_protocol.printline("минус неподтвержденная прибыль "+ string (NoAcsMon) + " руб.");
            if (calcValue.getExact < 0)
                m_protocol.printLine("Сумма составляющих < 0, значение переменной равно нулю.");
                calcValue = TValue();
            end;
            return calcValue; 
        end;

        var value = TValue();
        var previousValueEq2_1_6;  
        var previousReport;

	m_parameters.ПрибыльПрошлогоГодаПодтверждена=true; //vihrov 18.01.2011
        if (m_parameters.ПрибыльПрошлогоГодаПодтверждена)
             m_protocol.printLine("Прибыль прошлого года подтверждена.");
             m_protocol.printLine("В расчет входят:");
            value = calcA();
        else
            m_protocol.printLine("Прибыль прошлого года не подтверждена.");
            if (m_parameters.unconfirmedProfitPreviousYear == "2.1.11")
                m_protocol.printLine("Настройка реестра 'НЕПОДТВ. ПРИБЫЛЬ ПРЕДШЕСТВ. ЛЕТ' имеет значение '2.1.11'");
                m_protocol.printLine("Рассчитаем А:");
                value = calcA();
                previousReport = m_report.createPreviousReport();
                m_protocol.printLine("Рассчитаем B:");
                if (previousReport.isCalculated())
                    previousValueEq2_1_6 =  previousReport.attributeValue("Eq2_1_6");
                    if (previousValueEq2_1_6.isUndefined())
                        m_protocol.printLine("Т.к. значение переменной Eq2_1_6 не определено, то по умолчанию ей присвоено значение 0.");
                        value = TValue(min(value.getExact(), $0));
                    else
                        m_protocol.printLine("Eq2_1_6(пред. период) = " + previousValueEq2_1_6.exactAsString + " руб.");
                        println();
                        m_protocol.printLine("Eq2_1_11 = min(" + previousValueEq2_1_6.exactAsString + ", " + value.getExact() +")");
                        value = TValue(min(value.getExact(), previousValueEq2_1_6.exact));
                    end;
                else
                    m_protocol.printLine("Т.к. нет рассчитанного отчета за период " + String(previousReport.context.period.beginDate) + " - " + String(previousReport.context.period.endDate) + ", то значению переменной Eq2_1_6 по умолчанию присвоено значение 0.");
                    value = TValue(min(value.getExact(), $0));
                end;
                    
            else
                m_protocol.printLine("Настройка реестра 'НЕПОДТВ. ПРИБЫЛЬ ПРЕДШЕСТВ. ЛЕТ' имеет значение '3.9'");
                m_protocol.printLine("Значение переменной равно нулю."); 
            end;            
            
        end;
                     
        setAttributeValue(value, "Eq2_1_11");
    end;

    private macro Eq2_2_1()
        m_protocol.printAttributeHeader("Eq2_2_1");

        var value = summarizeAccountRests("60901*");
        value.plus(summarizeAccountRests("60905*"));
        value.plus(summarizeAccountRests("60701*", getCategoryFilter("НМА", CATEGORY_EXIST_CONDITION)));
        value.minus(summarizeBalanceRests(m_period.endDate(), nullFilter, "60903"));
        setAttributeValue(value, "Eq2_2_1");
    end;
/*
    private macro Eq2_2_4()
        m_protocol.printAttributeHeader("Eq2_2_4");

        var value = summarizeBalanceRests(m_period.endDate(), nullFilter,
                                          "10901", "70402", "70706", "70708", "70709", "70710", "70711", "70712", "70802",
                                          "-10801", "-70302", "-70701", "-70703", "-70704", "-70705", "-70801");

        value.plus(summarizeAccountRests("70707*", getCategoryFilter("ТСС", CATEGORY_EXIST_CONDITION)));
        value.minus(summarizeAccountRests("70702*", getCategoryFilter("ТСС", CATEGORY_EXIST_CONDITION), null, true));

        if (value.getExact < 0)
            m_protocol.printLine("Сумма составляющих < 0, значение переменной равно нулю.");
            value.clear();
        end;
        setAttributeValue(value, "Eq2_2_4");
    end;
*/

    private macro Eq2_2_4()
        m_protocol.printAttributeHeader("Eq2_2_4");

        var value1 = summarizeBalanceRests(m_period.endDate(), nullFilter,"10901");
        var value2 = summarizeBalanceRests(m_period.endDate(), nullFilter,"70802"); //vihrov1


        if (value1.getExact < 0)
            m_protocol.printLine("10901 остаток");
            m_protocol.printLine("Сумма  < 0, значение переменной равно нулю.");
            value1.clear();
        end;
        if (value2.getExact < 0)
            m_protocol.printLine("70802 остаток");
            m_protocol.printLine("Сумма  < 0, значение переменной равно нулю.");
            value2.clear();
        end;
        var  value = TValue(max(value1.getExact(), value2.getExact()));
        setAttributeValue(value, "Eq2_2_4");
    end;

    private macro Eq2_2_5()
        m_protocol.printAttributeHeader("Eq2_2_5");
        var calcValue225 = TValue();//vihrov
        Getmoney (ub_tek_god, "1. Убыток текущего года, руб", 10);//vihrov
//        debugbreak;
        calcValue225 =Tvalue (ub_tek_god);//vihrov

        var value = summarizeBalanceRests(m_period.endDate(), nullFilter,
//                                          "70606", "70608", "70609", "70610", "70611", "70612", "50905", "61401", "61403",
        "10605","70606","70607","70608","70609","70610","70611","70612","61401","61403","50905",
//                                          "-70601", "-70603", "-70604", "-70605", "-61301", "-61304");
//                                          "-70601", "-70603", "-70604", "-70605", "-61301", "-61304", "10605", "-70607", "-10603", "70602");
				"-10603","-70601","-70602","-70603","-70604","-70605","-61301","-61304");

//        value.plus(summarizeAccountRests("10605*, 70607*", getCategoryFilter("ТСС", CATEGORY_EXIST_CONDITION)));
//        value.minus(summarizeAccountRests("10603*, 70602*", getCategoryFilter("ТСС", CATEGORY_EXIST_CONDITION), null, true));

//        value.plus(summarizeAccountRests("10605*, 70607*"));
//        value.minus(summarizeAccountRests("10603*, 70602*", null, null, true));

        value.plus(TValue("Eq2_1_6"));
        m_protocol.printLine(" Убыток текущего года (переменная 2_2_5)= "); //vihrov
        m_protocol.printLine(Value.getexact()); //vihrov
        m_protocol.printLine("ручной ввод: убыток текущего года "); //vihrov
        m_protocol.printLine(calcValue225.getexact()); //vihrov
        m_protocol.printLine("прибавляем к значению переменной, получаем ИТОГО "); //vihrov

                value.plus(calcValue225); //vihrov

        m_protocol.printLine(Value.getexact()); //vihrov


        if (not isLastDayInMonth(m_period.endDate()))
            value.plus(TValue("Eq2_2_5ввод"));
        end;

        if (value.getExact < 0)
            m_protocol.printLine("Сумма составляющих < 0, значение переменной равно нулю.");
            value.clear();
        end;
        setAttributeValue(value, "Eq2_2_5");
    end;

    private macro Eq3_4()
        m_protocol.printAttributeHeader("Eq3_4");

//        var ub_tek_god=$0;//vihrov
        var calcValue34 = TValue();//vihrov
//        Getmoney (ub_tek_god, "2. Убыток текущего года, руб", 10);//vihrov
        calcValue34 =Tvalue (ub_tek_god);//vihrov

        var value = TValue();
        if (TValue("EqОсн").getExact() > $0.0)
            value = summarizeBalanceRests(m_period.endDate(), nullFilter,
//                                          "70601", "70603", "70604", "70605", "61301", "61304",   // vihrov так было
                                          "70601", "70603", "70604", "70605", "61301", "61304","10603","70602","-10605","-70607", //vihrov добавил балансовые 10603 70602 10605 70607 чтобы они брались без учета категории
                                          "-70606", "-70608", "-70609", "-70610", "-70611", "-70612", "-50905", "-61401", "-61403");

//            value.plus(summarizeAccountRests("10603*, 70602*", getCategoryFilter("ТСС", CATEGORY_EXIST_CONDITION)));
//            value.minus(summarizeAccountRests("10605*, 70607*", getCategoryFilter("ТСС", CATEGORY_EXIST_CONDITION), null, true));
// vihrov две вышестоящие строки закоментил а выше эти два счета добавил чтобы они считались без учета значния категории

            value.minus(TValue("Eq2_1_6"));

            if (not isLastDayInMonth(m_period.endDate()))
                value.minus(TValue("Eq2_2_5ввод"));
            end;


        m_protocol.printLine("Нераспределенная прибыль текущего года, строка 203 (переменная 3_4)= "); //vihrov
        m_protocol.printLine(Value.getexact()); //vihrov
        m_protocol.printLine("ручной ввод: убыток текущего года "); //vihrov
        m_protocol.printLine(calcValue34.getexact()); //vihrov
        m_protocol.printLine("убавляем от значения переменной, получаем "); //vihrov
       value.minus(calcValue34); //vihrov

        m_protocol.printLine(Value.getexact()); //vihrov




        else
            m_protocol.printLine("переменная = 0, т.к. EqОсн (\"Основной капитал\") <=0");
        end;

        if (value.getExact < 0)
            m_protocol.printLine("Сумма составляющих < 0, значение переменной равно нулю.");
            value.clear();
        end;

        setAttributeValue(value, "Eq3_4");
    end;
    /*метка*/
    private macro Eq3_9()
        /* HP из 10801 надо вычесть подтвержденную прибыль */
        var AcsMon = $4591000;
        GetMoney (AcsMon, "Неподтвержденн. прибыль, руб.",10);
        private macro calcA()

            var calcValue = TValue();
        /*
            calcValue = summarizeBalanceRests(m_period.endDate(), nullFilter,
                                          "10801", "70302", "70701", "70703", "70704", "70705", "70801",
                                          "-10901","-70402", "-70706", "-70708", "-70709", "-70710", "-70711", "-70712", "-70802");
            calcValue.plus(summarizeAccountRests("70702*", getCategoryFilter("ТСС", CATEGORY_EXIST_CONDITION)));
            calcValue.minus(summarizeAccountRests("70707*", getCategoryFilter("ТСС", CATEGORY_EXIST_CONDITION), null, true));
            CalcValue=Tvalue(calcValue.getExact - AcsMon);
        */
               CalcValue=Tvalue(AcsMon);

        //    m_protocol.printline("минус подтвержденная прибыль "+ string (AcsMon) + " руб.");
            if (calcValue.getExact < 0)
                m_protocol.printLine("Сумма составляющих < 0, значение переменной равно нулю.");
                calcValue = TValue();
            end;
            return calcValue; 
        end;

        m_protocol.printAttributeHeader("Eq3_9");

        var value = TValue();
        var valueEq2_1_11;

        if (TValue("EqОсн").getExact() > 0)
            if (m_parameters.ПрибыльПрошлогоГодаПодтверждена)
               if (AcsMon>$0)
                 m_protocol.printLine("Прибыль предшествующего года подтверждена частично.");
                 value         = calcA();

               else
                m_protocol.printLine("Прибыль предшествующего года подтверждена полностью.");
                m_protocol.printLine("Значение переменной равно нулю.");
                value.clear();
               end; 
            else
                if (m_parameters.isEndDateLess0107)
                    m_protocol.printLine("Прибыль предшествующего года не подтверждена и дата отчета <= 01.07 текущего года.");
                    m_protocol.printLine("Рассчитаем А:");
                    value         = calcA();
                    valueEq2_1_11 = TValue("Eq2_1_11"); 
                    println();
                    m_protocol.printLine("Eq3_9 = max(" + String(value.getExact()) + " - " + String(valueEq2_1_11.getExact()) + ", 0)");
                    value = TValue(max(value.getExact() - valueEq2_1_11.getExact(), $0));
                else
                    m_protocol.printLine("Прибыль предшествующего года не подтверждена и дата отчета > 01.07 текущего года.");
                    m_protocol.printLine("Значение переменной равно нулю.");
                    value.clear();
                end;
            end;
        else
            m_protocol.printLine("переменная = 0, т.к. EqОсн (\"Основной капитал\") <=0");
            value.clear();
        end;
                
        setAttributeValue(value, "Eq3_9");
    end;

    initTCalculator2055(protocol);
end;

private class (TCalculator2133_2150) TCalculator2332(protocol : TProtocol)
    
    private macro getActualReserveLoans(chapter : Integer, account : String, fiId : Integer)
    
         var reserveClassification = nvl(GetClassifReserveLoans(chapter, fiId, account, m_period.endDate()), "");
         var reserveAccount = nvl(getAccCaseReserveAccount(chapter, fiid, account), "");

         return nvl(getFactReserveLoans(reserveAccount, m_period.endDate(), reserveClassification), $0.0);
    end;

    private macro Eq2_1_12()
        m_protocol.printAttributeHeader("Eq2_1_12");
        m_protocol.printLine("Рассчитаем А:");
        var valueA = TValue();
        valueA = summarizeAccountRests("31309*, 31409*, 31509*, 31609*, 41107*, 41207*, 41307*, 41407*, 41507*,"
                                    + "41607*, 41707*, 41807*, 41907*, 42007*, 42107*, 42207*, 42507*, 42807*,"
                                    + "42907*, 43007*, 43107*, 43207*, 43307*, 43407*, 43507*, 43607*, 43707*,"
                                    + "43807*, 43907*, 44007*, 52006*", 
                                    getCategoryFilter("Субкредит 2.1.12", CATEGORY_EXIST_CONDITION));

        m_protocol.printLine("А = " + valueA.getExact());

        m_protocol.printLine("Рассчитаем B:");
        var valueB = TValue(0.15 * TValue("Eq2_1_1__2_1_2").getExact() + TValue("Eq2_1_3__2_1_4").getExact() + TValue("Eq2_1_5").getExact()
                                 + TValue("Eq2_1_6").getExact() + TValue("Eq2_1_7").getExact() + TValue("Eq2_1_11").getExact()
                                 - (  TValue("Eq2_2_1").getExact() + TValue("Eq2_2_2__2_2_3").getExact() + TValue("Eq2_2_4").getExact()
                                    + TValue("Eq2_2_5").getExact() + TValue("Eq2_2_6").getExact() + TValue("Eq2_2_8").getExact()  
                                    + TValue("Eq2_2_9").getExact()));
        m_protocol.printLine("B = " + valueB.getExact());

        if (valueB.getExact()<0) valueb.clear(); end; // vihrov без этой строки в отчете отрицательное значение

        var  value = TValue(min(valueA.getExact(), valueB.getExact()));
                     
        setAttributeValue(value, "Eq2_1_12");
    end;

    private macro EqИстОсн()
        m_protocol.printAttributeHeader("EqИстОсн");
        var value = TValue();
        setAttributeValue(value.plus(TValue("Eq2_1_1__2_1_2")).plus(TValue("Eq2_1_3__2_1_4")).plus(TValue("Eq2_1_5")).plus(TValue("Eq2_1_6")).plus(TValue("Eq2_1_7")).plus(TValue("Eq2_1_11").plus(TValue("Eq2_1_12"))), "EqИстОсн");
    end;

    private macro Eq4_6() // ----------------------------
        m_protocol.printAttributeHeader("Eq4_6");

        var currentReserve      = $0.0;
        var currentReserveLoans = $0.0;
        var reserve             = $0.0;
        var reserveLoans        = $0.0;
        var rest                = $0.0;

        var dataSet = TRsbDataSet("SELECT account.t_rest, account.t_chapter, account.t_account, account.t_code_currency t_fiId"
            + "\n" +              "  FROM " + getAccountDataSourceQuery("32009*, 32209*, 47802*, 50106*, 50107*, 50110*, 50207*, 50208*, 50211*, 50307*, 50308*, 50311*") + " account"
            + "\n" +              " WHERE " + getCategoryFilter("СубКредит", CATEGORY_EXIST_CONDITION)
            + "\n" +              "   AND account.t_rest <> 0.0");

        while (dataSet.moveNext())
            /*РВП*/
            currentReserve      = getActualReserve(dataSet.chapter, dataSet.account, dataSet.fiId);
            /*РВПС*/
            currentReserveLoans = getActualReserveLoans(dataSet.chapter, dataSet.account, dataSet.fiId);
            reserve      = reserve + currentReserve;
            reserveLoans = reserveLoans + currentReserveLoans;
            rest    = rest + dataSet.rest;
            m_protocol.printAccountAndReserve(dataSet.account, dataSet.rest, reserve, reserveLoans);
        end;

        setAttributeValue(TValue(rest - reserve - reserveLoans), "Eq4_6");
    end;

    macro calculate(period : RcbPeriod)
        Eq2_1_1__2_1_2ввод();
        Eq2_1_1__2_1_2();
        Eq2_1_3__2_1_4();
        Eq2_1_6ввод();
        Eq2_1_6();
        Eq2_1_6переоценка();
        Eq2_1_7();
        Eq3_3();
        Eq2_1_5();
        Eq2_1_11();        
        Eq2_2_1();
        Eq2_2_2__2_2_3ввод();
        Eq2_2_2__2_2_3();
        Eq2_2_4();
        Eq2_2_5ввод();
        Eq2_2_5();
        Eq2_2_5переоценка();
        Eq2_2_6ввод();
        Eq2_2_6();
        Eq2_2_8ввод();
        Eq2_2_8();
        Eq2_2_9();
        Eq2_1_12();
        EqИстОсн();
        EqОсн();
        Eq3_1ввод();
        Eq3_1();
        Eq3_3();
        Eq3_3ввод();
        Eq3_4();
        Eq3_4переоценка();
        Eq3_5();
        Eq3_6ввод();
        Eq3_6();
        Eq3_7();
        Eq3_9();
        Eq3_10ввод();
        Eq3_10();
        EqИстДоп();
        EqДоп();
        Eq4_1();
        Eq4_2();
        Eq4_3();
        Eq4_5();
        Eq4_6();
        EqПром();
        Eq5_1();
        Eq5_2ввод();
        Eq5_2();
        Eq5_3();
        EqК();
    end; 

    initTCalculator2133_2150(protocol);
end;

private class (TCalculatorBase) TCalculator1881(protocol : TProtocol)
    private macro getAccountDataSourceQuery(masks : String, restDate : Date)
        var masksCondition = "1 = 1";

        if (restDate == null)
            restDate = m_period.endDate();
        end;

        macro getBaseQuery(isCurrency : Bool)
            var suffix = "";

            if (isCurrency)
                suffix = "$";
            end;

            return        "SELECT rsb_rep_ac.rest_base(acc.t_account, "
                + "\n" +  "                            acc.t_chapter, "
                + "\n" +  "                            acc.t_code_currency, "
                + "\n" +  "                       "  + getSqlDate(restDate) + ","
                + "\n" +  "                            acc.t_r0,"
                + "\n" +  "                            acc.t_kind_account) t_rest,"
                + "\n" +  "       acc.*"
                + "\n" +  "  FROM daccount" + suffix + "_dbt acc"
                + "\n" +  "  WHERE  acc.t_Open_date <= "     + getSqlDate(restDate)
                + "\n" +  "    AND (   (acc.t_Close_Date > " + getSqlDate(restDate)+ ")"
                + "\n" +  "         OR (acc.t_Close_Date = TO_DATE('01-01-0001', 'DD-MM-YYYY')))"
                + "\n" +  "    AND " + RcbAccountFilter().getAsSqlString("acc")
                + "\n" +  "    AND INSTR(acc.t_type_account, 'П')=0 "
                + "\n" +  "    AND (" + masksCondition + ")" ;

        end;

        if (masks != NULL)
            masksCondition = convertMaskToSQLFormat(masks, "acc.t_account");
        end;

        return "(" + getBaseQuery(false) + "\nUNION ALL\n" + getBaseQuery(true) + ")";
    end;

    private macro getCategoryFilter(category : String, condition : String, restDate : Date)

        if (restDate == null)
            restDate = m_period.endDate();
        end;

        return "rsb_rep_ac.checkObjAttrPresenceByNum(" + OBJTYPE_ACCOUNT + "," 
                                                       + OBJGROUP_REPORT + "," 
                                                       + getSqlString(category) + "," 
                                                       + "rsb_rep_ac.makeAccountId(account.t_account, account.t_code_currency, account.t_chapter, NULL), " 
                                                       + getSqlDate(restDate) + ")" + condition;
    end;

    private macro summarizeAccountRests(masks : String, filter : String, restDate : Date, isMinus : Bool )
        var rest           = $0.0;
        var dataSet        = NULL;

        if (filter == NULL)
            filter = "1 = 1";
        end;

        if (isMinus == NULL)
            isMinus = false;
        end;

        dataSet = TRsbDataSet("SELECT account.t_account, account.t_rest"
            + "\n" +          "  FROM " + getAccountDataSourceQuery(masks, restDate) + " account"
            + "\n" +          " WHERE " + filter
            + "\n" +          "   AND t_rest <> 0.0");

        dataSet.setFieldType("rest", V_MONEY);

        while (dataSet.moveNext())
             rest = rest + dataSet.rest;

             if (isMinus == true)
                 m_protocol.printAccount("-" + dataSet.account, dataSet.rest);
             else
                 m_protocol.printAccount(dataSet.account, dataSet.rest);
             end;
        end;

        return TValue(rest);
    end;

    private macro EqК()
        m_protocol.printAttributeHeader("EqК");

        var value = TValue();
        setAttributeValue(value.plus(TValue("EqПром")).minus(TValue("Eq5_1")).minus(TValue("Eq5_2")).minus(TValue("Eq5_3")), "EqК");
    end;

    private macro Eq2_1_1__2_1_2()
        m_protocol.printAttributeHeader("Eq2_1_1__2_1_2");

        var value = TValue();
        if (isEntered("Eq2_1_1__2_1_2ввод"))
            value = value.plus(TValue("Eq2_1_1__2_1_2ввод"));
        else
            value = summarizeAccountRests("10207*", getCategoryFilter("2.1.1 искл", CATEGORY_NOT_EXIST_CONDITION));
            value.plus(summarizeAccountRests("10208*", getCategoryFilter("2.1.2 искл", CATEGORY_NOT_EXIST_CONDITION)));
        end;
        setAttributeValue(value, "Eq2_1_1__2_1_2");
    end;

    private macro Eq2_1_1__2_1_2ввод()
        m_protocol.printAttributeHeader("Eq2_1_1__2_1_2ввод");
        setAttributeValue(TValue("Eq2_1_1__2_1_2ввод"), "Eq2_1_1__2_1_2ввод");
    end;

    private macro Eq2_1_3__2_1_4()
        m_protocol.printAttributeHeader("Eq2_1_3__2_1_4");
        setAttributeValue(summarizeBalanceRests(m_period.endDate(), nullFilter, "10602"), "Eq2_1_3__2_1_4");
    end;

    private macro Eq2_1_5()
        m_protocol.printAttributeHeader("Eq2_1_5");

        var value = summarizeAccountRests("107*", getCategoryFilter("2.1.5", CATEGORY_EXIST_CONDITION));
        value.minus(TValue("Eq2_1_7")).minus(TValue("Eq3_3"));
        setAttributeValue(value, "Eq2_1_5");
    end;

    private macro Eq2_1_6()
        m_protocol.printAttributeHeader("Eq2_1_6");

        var value = TValue();

        if (m_parameters.ПрибыльТекущегоГодаПодтверждена)
            m_protocol.PrintLine("Прибыль текущего года подтверждена.");
            m_protocol.PrintLine("В расчет входят:");
            value = summarizeBalanceRests(m_parameters.ДатаАудПодтв_ТекГ - 1, nullFilter,
                                          "70601", "70603", "70604", "70605", "61301", "61304",
                                          "-70501", "-70606", "-70608", "-70609", "-70610", "-50905", "-61401", "-61403");

            value.plus(summarizeAccountRests("10603*, 70602*", getCategoryFilter("ТСС", CATEGORY_EXIST_CONDITION, m_parameters.ДатаАудПодтв_ТекГ - 1), 
                                             m_parameters.ДатаАудПодтв_ТекГ - 1));
            value.minus(summarizeAccountRests("10605*, 70607*", getCategoryFilter("ТСС", CATEGORY_EXIST_CONDITION, m_parameters.ДатаАудПодтв_ТекГ - 1), 
                                              m_parameters.ДатаАудПодтв_ТекГ - 1, true));
            
            if (not isLastDayInMonth(m_period.endDate()))
                value.minus(TValue("Eq2_1_6ввод"));
            end;
        else
            m_protocol.printLine("Прибыль текущего года не подтверждена.");
            m_protocol.printLine("Значение переменной равно нулю.");
        end;

        if (value.getExact < 0)
            m_protocol.printLine("Сумма составляющих < 0, значение переменной равно нулю.");
            value = TValue();
        end;
        setAttributeValue(value, "Eq2_1_6");
    end;

    private macro Eq2_1_6ввод()
        m_protocol.printAttributeHeader("Eq2_1_6ввод");
        setAttributeValue(TValue("Eq2_1_6ввод"), "Eq2_1_6ввод");

        if (isLastDayInMonth(m_period.endDate()))
            m_protocol.printLine("Значение переменной в расчете не участвует, т.к. отчет выпускается не на внутримесячную дату.");
        end;
    end;

    private macro Eq2_1_6переоценка()
        m_protocol.printAttributeHeader("Eq2_1_6переоценка");

        var value = TValue();
        if (m_parameters.ПрибыльТекущегоГодаПодтверждена)
            m_protocol.PrintLine("Прибыль текущего года подтверждена.");
            value = summarizeAccountRests("10603*", getCategoryFilter("ТСС", CATEGORY_EXIST_CONDITION, m_parameters.ДатаАудПодтв_ТекГ - 1), 
                                          m_parameters.ДатаАудПодтв_ТекГ - 1);
            value.minus(summarizeAccountRests("10605*", getCategoryFilter("ТСС", CATEGORY_EXIST_CONDITION, m_parameters.ДатаАудПодтв_ТекГ - 1), 
                                              m_parameters.ДатаАудПодтв_ТекГ - 1, true));
        else
            m_protocol.PrintLine("Прибыль текущего года не подтверждена.");
            m_protocol.PrintLine("Значение переменной равно нулю.");
        end;

        setAttributeValue(value, "Eq2_1_6переоценка");
    end;

    private macro Eq2_1_7()
        m_protocol.printAttributeHeader("Eq2_1_7");
        setAttributeValue(TValue("Eq2_1_7"), "Eq2_1_7");
    end;

    private macro Eq2_1_11()
        m_protocol.printAttributeHeader("Eq2_1_11");

        var value = TValue();
        if (m_parameters.ПрибыльПрошлогоГодаПодтверждена)
             m_protocol.printLine("Прибыль прошлого года подтверждена.");
             m_protocol.printLine("В расчет входят:");
            value = summarizeBalanceRests(m_period.endDate(), nullFilter,
                                          "10801", "70302", "70701", "70703", "70704", "70705", "70801",
                                          "-10901","-70402", "-70706", "-70708", "-70709", "-70710", "-70802", "-70502");
            value.plus(summarizeAccountRests("70702*", getCategoryFilter("ТСС", CATEGORY_EXIST_CONDITION)));
            value.minus(summarizeAccountRests("70707*", getCategoryFilter("ТСС", CATEGORY_EXIST_CONDITION), null, true));
        else
            m_protocol.printLine("Прибыль прошлого года не подтверждена.");
            m_protocol.printLine("Значение переменной равно нулю.");
        end;

        if (value.getExact < 0)
            m_protocol.printLine("Сумма составляющих < 0, значение переменной равно нулю.");
            value = TValue();
        end;
        setAttributeValue(value, "Eq2_1_11");
    end;

    private macro EqИстОсн()
        m_protocol.printAttributeHeader("EqИстОсн");
        var value = TValue();
        setAttributeValue(value.plus(TValue("Eq2_1_1__2_1_2")).plus(TValue("Eq2_1_3__2_1_4")).plus(TValue("Eq2_1_5")).plus(TValue("Eq2_1_6")).plus(TValue("Eq2_1_7")).plus(TValue("Eq2_1_11")), "EqИстОсн");
    end;

    private macro Eq2_2_1()
        m_protocol.printAttributeHeader("Eq2_2_1");

        var value = summarizeAccountRests("60901*");
        value.plus(summarizeAccountRests("60701*", getCategoryFilter("НМА", CATEGORY_EXIST_CONDITION)));
        value.minus(summarizeBalanceRests(m_period.endDate(), nullFilter, "60903"));
        setAttributeValue(value, "Eq2_2_1");
    end;

    private macro Eq2_2_2__2_2_3()
        m_protocol.printAttributeHeader("Eq2_2_2__2_2_3");

        var value          = summarizeAccountRests("10501*");
        var dataSet        = NULL;
        var isExistAccount = false;

        if (value.getExact() != 0)
            value.plus(TValue("Eq2_2_2__2_2_3ввод"));
        else
            dataSet = TRsbDataSet("SELECT t_rest, t_account,"
                + "\n" +          "       NVL(rep_note.readBoughtOutCost(t_chapter, t_account, t_code_currency, " + getSqlDate(m_period.endDate()) + "), 0.0) t_noteValue"
                + "\n" +          "  FROM " + getAccountDataSourceQuery("10502*"));

            while (dataSet.moveNext())
                if (dataSet.noteValue != $0.0)
                    m_protocol.printLine("Значение примечания \"стоимость выкупленных долей\" на дату отчета = " + String(dataSet.noteValue:0:2) + " руб.");
                    m_protocol.printLine("Лицевой счет: " + dataSet.account);
                    value = TValue(dataSet.noteValue);
                else
                    m_protocol.printLine("Значение примечания \"стоимость выкупленных долей\" на дату отчета равно нулю.");
                    m_protocol.printLine("Значение переменной равно остатку на лицевом счете на дату отчета:");
                    m_protocol.printAccount(dataSet.account, dataSet.rest);
                    
                    value = TValue(dataSet.rest);
                end;
                isExistAccount = true;
            end;
            if (not isExistAccount)
                m_protocol.printLine("Нет данных для расчета.");
            end;
        end;

        setAttributeValue(value, "Eq2_2_2__2_2_3");
    end;

    private macro Eq2_2_2__2_2_3ввод()
        m_protocol.printAttributeHeader("Eq2_2_2__2_2_3ввод");
        setAttributeValue(TValue("Eq2_2_2__2_2_3ввод"), "Eq2_2_2__2_2_3ввод");
    end;


    private macro Eq2_2_4()
        m_protocol.printAttributeHeader("Eq2_2_4");

        var value = summarizeBalanceRests(m_period.endDate(), nullFilter,
                                          "10901", "70402", "70706", "70708", "70709", "70710", "70802", "70502",
                                          "-10801", "-70302", "-70701", "-70703", "-70704", "-70705", "-70801");

        value.plus(summarizeAccountRests("70707*", getCategoryFilter("ТСС", CATEGORY_EXIST_CONDITION)));
        value.minus(summarizeAccountRests("70702*", getCategoryFilter("ТСС", CATEGORY_EXIST_CONDITION), null, true));

        if (value.getExact < 0)
            m_protocol.printLine("Сумма составляющих < 0, значение переменной равно нулю.");
            value.clear();
        end;
        setAttributeValue(value, "Eq2_2_4");
    end;

    private macro Eq2_2_5()
        m_protocol.printAttributeHeader("Eq2_2_5");

        var value = summarizeBalanceRests(m_period.endDate() - 1, nullFilter,
                                          "70501", "70606", "70608", "70609", "70610", "50905", "61401", "61403",
                                          "-70601", "-70603", "-70604", "-70605", "-61301", "-61304");

        value.plus(summarizeAccountRests("10605*, 70607*", getCategoryFilter("ТСС", CATEGORY_EXIST_CONDITION)));
        value.minus(summarizeAccountRests("10603*, 70602*", getCategoryFilter("ТСС", CATEGORY_EXIST_CONDITION), null, true));

        value.plus(TValue("Eq2_1_6"));

        if (not isLastDayInMonth(m_period.endDate()))
            value.plus(TValue("Eq2_2_5ввод"));
        end;

        if (value.getExact < 0)
            m_protocol.printLine("Сумма составляющих < 0, значение переменной равно нулю.");
            value.clear();
        end;
        setAttributeValue(value, "Eq2_2_5");
    end;

    private macro Eq2_2_5ввод()
        m_protocol.printAttributeHeader("Eq2_2_5ввод");
        setAttributeValue(TValue("Eq2_2_5ввод"), "Eq2_2_5ввод");

        if (isLastDayInMonth(m_period.endDate()))
            m_protocol.printLine("Значение переменной в расчете не участвует, т.к. отчет выпускается не на внутримесячную дату.");
        end;
    end;

    private macro Eq2_2_5переоценка()
        m_protocol.printAttributeHeader("Eq2_2_5переоценка");

        var value = summarizeAccountRests("10605*", getCategoryFilter("ТСС", CATEGORY_EXIST_CONDITION));

        value.minus(summarizeAccountRests("10603*", getCategoryFilter("ТСС", CATEGORY_EXIST_CONDITION), null, true));

        value.plus(TValue("Eq2_1_6переоценка"));

        setAttributeValue(value.multiply(-1.0), "Eq2_2_5переоценка");
    end;

    private macro Eq2_2_6()
        m_protocol.printAttributeHeader("Eq2_2_6");

        macro isReserve(account)
            return (in(substr(account, 1, 5), "50705", "50718", "60101", "60102", "60103", "60104", "60201", "60202", "60203", "60204"));
        end;

        macro getReserve(dataSet : Object)
            var reserve;

            if (isReserve(dataSet.account))
                reserve = getActualReserve(dataSet.chapter, dataSet.account, dataSet.fiId);
            else
                reserve = $0;
            end;

            return reserve;
        end;

        macro printAccountAndReserve(account, rest, reserve)
            if (isReserve(account))
               m_protocol.printAccountAndReserve(account, rest, reserve); 
            else
               m_protocol.printAccount(account, rest, reserve);
            end;
        end;

        var reserve        = $0.0;
        var currentReserve = $0.0;
        var rest           = $0.0;
        var dataSet = TRsbDataSet("SELECT account.t_rest, account.t_chapter, account.t_account, account.t_code_currency t_fiId"
            + "\n" +              "  FROM " + getAccountDataSourceQuery("60101*-60104*") + " account"
            + "\n" +              " WHERE " + getCategoryFilter("ИП", CATEGORY_EXIST_CONDITION)
            + "\n" +              "   AND rep_note.readShareInCapital(account.t_client, " + getSqlDate(m_period.endDate()) + ") > 20.0"
            + "\n" +              "   AND account.t_rest <> 0.0");
        while (dataSet.moveNext())
            currentReserve = getReserve(dataSet);
            reserve = reserve + currentReserve;
            rest    = rest    + dataSet.rest;
            printAccountAndReserve(dataSet.account, dataSet.rest, reserve);
        end;

        dataSet = TRsbDataSet("SELECT account.t_rest, account.t_chapter, account.t_account, account.t_code_currency t_fiId"
            + "\n" +          "  FROM " + getAccountDataSourceQuery("50605*, 50618*, 50705*, 50718*, 60203*, 60204*, 50621*, 50721*") + " account,"
            + "\n" +          "       dpartyOwn_dbt partyOwn"
            + "\n" +          " WHERE account.t_client = partyOwn.t_partyId"
            + "\n" +          "   AND " + getCategoryFilter("ИП", CATEGORY_EXIST_CONDITION)
            + "\n" +          "   AND rep_note.readShareInCapital(partyOwn.t_partyId, " + getSqlDate(m_period.endDate()) + ") > 20.0"
            + "\n" +          "   AND partyOwn.t_partyKind = " + RCB_PTK_SUBSIDIARY
            + "\n" +          "   AND account.t_rest <> 0.0");

        while (dataSet.moveNext())
            currentReserve = getReserve(dataSet);
            reserve = reserve + currentReserve;
            rest    = rest    + dataSet.rest;
            printAccountAndReserve(dataSet.account, dataSet.rest, reserve);
        end;

        dataSet = TRsbDataSet("SELECT account.t_rest, account.t_chapter, account.t_account, account.t_code_currency t_fiId"
            + "\n" +          "  FROM " + getAccountDataSourceQuery("50620*, 50720*") + " account,"
            + "\n" +          "       dpartyOwn_dbt partyOwn"
            + "\n" +          " WHERE account.t_client = partyOwn.t_partyId"
            + "\n" +          "   AND " + getCategoryFilter("ИП", CATEGORY_EXIST_CONDITION)
            + "\n" +          "   AND rep_note.readShareInCapital(partyOwn.t_partyId, " + getSqlDate(m_period.endDate()) + ") > 20.0"
            + "\n" +          "   AND partyOwn.t_partyKind = " + RCB_PTK_SUBSIDIARY
            + "\n" +          "   AND account.t_rest <> 0.0");
        while (dataSet.moveNext())
            currentReserve = getReserve(dataSet);
            reserve = reserve + currentReserve;
            rest    = rest    - dataSet.rest;
            printAccountAndReserve("-" + dataSet.account, dataSet.rest, reserve);
        end;

        dataSet = TRsbDataSet("SELECT account.t_rest, account.t_chapter, account.t_account, account.t_code_currency t_fiId"
            + "\n" +         "  FROM " + getAccountDataSourceQuery("60201*") + " account"
            + "\n" +         " WHERE account.t_rest <> 0.0");
        while (dataSet.moveNext())
            currentReserve = getReserve(dataSet);
            reserve = reserve + currentReserve;
            rest    = rest    + dataSet.rest;
            printAccountAndReserve(dataSet.account, dataSet.rest, reserve);
        end;

        dataSet = TRsbDataSet("SELECT account.t_rest, account.t_chapter, account.t_account, account.t_code_currency t_fiId"
            + "\n" +          "  FROM " + getAccountDataSourceQuery("60202*") + " account,"
            + "\n" +          "       dpartyOwn_dbt partyOwn"
            + "\n" +          " WHERE account.t_client = partyOwn.t_partyId"
            + "\n" +          "   AND " + getCategoryFilter("2.2.6 искл", CATEGORY_NOT_EXIST_CONDITION)
            + "\n" +          "   AND partyOwn.t_partyKind = " + RCB_PTK_BANK
            + "\n" +          "   AND account.t_rest <> 0.0");
        while (dataSet.moveNext())
            currentReserve = getReserve(dataSet);
            reserve = reserve + currentReserve;
            rest    = rest    + dataSet.rest;
            printAccountAndReserve(dataSet.account, dataSet.rest, reserve);
        end;

        setAttributeValue(TValue(rest-reserve).plus(TValue("Eq2_2_6ввод")), "Eq2_2_6");
    end;

    private macro Eq2_2_6ввод()
        m_protocol.printAttributeHeader("Eq2_2_6ввод");
        setAttributeValue(TValue("Eq2_2_6ввод"), "Eq2_2_6ввод");
    end;

    private macro Eq2_2_8()
        m_protocol.printAttributeHeader("Eq2_2_8");

        var currentReserve = $0.0;
        var reserve        = $0.0;
        var rest           = $0.0;

        var dataSet = TRsbDataSet("SELECT account.t_rest, account.t_chapter, account.t_account, account.t_code_currency t_fiId"
            + "\n" +              "  FROM " + getAccountDataSourceQuery("102*, 10602*, 107*, 108*") + " account"
            + "\n" +              " WHERE " + getCategoryFilter("2.2.8", CATEGORY_EXIST_CONDITION)
            + "\n" +              "   AND account.t_rest <> 0.0");
        while (dataSet.moveNext())
            currentReserve = getActualReserve(dataSet.chapter, dataSet.account, dataSet.fiId);
            reserve = reserve + currentReserve;
            rest    = rest + dataSet.rest;
            m_protocol.printAccountAndReserve(dataSet.account, dataSet.rest, reserve);
        end;

        setAttributeValue(TValue(rest-reserve).plus(TValue("Eq2_2_8ввод")), "Eq2_2_8");
    end;

    private macro Eq2_2_8ввод()
        m_protocol.printAttributeHeader("Eq2_2_8ввод");
        setAttributeValue(TValue("Eq2_2_8ввод"), "Eq2_2_8ввод");
    end;

    private macro Eq2_2_9()
        m_protocol.printAttributeHeader("Eq2_2_9");

        var value = TValue();
        value.plus(TValue("EqИстДоп"));
        if (value.getExact() < $0.0)
            value.multyply(-1.0);
        end;

        setAttributeValue(value, "Eq2_2_9");
    end;

    private macro EqОсн()
        m_protocol.printAttributeHeader("EqОсн");

        var value = TValue().plus(TValue("EqИстОсн")).minus(TValue("Eq2_2_1")).minus(TValue("Eq2_2_2__2_2_3")).minus(TValue("Eq2_2_4")).minus(TValue("Eq2_2_5"));
        value = value.minus(TValue("Eq2_2_6")).minus(TValue("Eq2_2_8")).minus(TValue("Eq2_2_9"));

        setAttributeValue(value, "EqОсн");
    end;

    private macro Eq3_1()
        m_protocol.printAttributeHeader("Eq3_1");

        var value = TValue();
        if (TValue("EqОсн").getExact() > $0.0)
            value = value.plus(TValue("Eq3_1ввод"));
        else
            m_protocol.printLine("переменная = 0, т.к. EqОсн (\"Основной капитал\") <=0");
        end;

        setAttributeValue(value, "Eq3_1");
    end;

    private macro Eq3_1ввод()
        m_protocol.printAttributeHeader("Eq3_1ввод");
        setAttributeValue(TValue("Eq3_1ввод"), "Eq3_1ввод");
    end;

    private macro Eq3_3()
        m_protocol.printAttributeHeader("Eq3_3");

        var value = TValue();
        if (TValue("EqОсн").getExact() > $0.0)
            value = value.plus(TValue("Eq3_3ввод"));
        else
            m_protocol.printLine("переменная = 0, т.к. EqОсн (\"Основной капитал\") <=0");
        end;

        setAttributeValue(value, "Eq3_3");
    end;

    private macro Eq3_3ввод()
        m_protocol.printAttributeHeader("Eq3_3ввод");
        setAttributeValue(TValue("Eq3_3ввод"), "Eq3_3ввод");
    end;

    private macro Eq3_4()
        m_protocol.printAttributeHeader("Eq3_4");

        var value = TValue();
        if (TValue("EqОсн").getExact() > $0.0)
            value = summarizeBalanceRests(m_period.endDate(), nullFilter,
                                          "70601", "70603", "70604", "70605", "61301", "61304",
                                          "-70501", "-70606", "-70608", "-70609", "-70610", "-50905", "-61401", "-61403");

            value.plus(summarizeAccountRests("10603*, 70602*", getCategoryFilter("ТСС", CATEGORY_EXIST_CONDITION)));
            value.minus(summarizeAccountRests("10605*, 70607*", getCategoryFilter("ТСС", CATEGORY_EXIST_CONDITION), null, true));

            value.minus(TValue("Eq2_1_6"));

            if (not isLastDayInMonth(m_period.endDate()))
                value.minus(TValue("Eq2_2_5ввод"));
            end;
        else
            m_protocol.printLine("переменная = 0, т.к. EqОсн (\"Основной капитал\") <=0");
        end;

        if (value.getExact < 0)
            m_protocol.printLine("Сумма составляющих < 0, значение переменной равно нулю.");
            value.clear();
        end;

        setAttributeValue(value, "Eq3_4");
    end;

    private macro Eq3_4переоценка()
        m_protocol.printAttributeHeader("Eq3_4переоценка");

        var value = TValue();
        if (TValue("EqОсн").getExact() > $0.0)
            value = summarizeAccountRests("10603*", getCategoryFilter("ТСС", CATEGORY_EXIST_CONDITION));
            value.minus(summarizeAccountRests("10605*", getCategoryFilter("ТСС", CATEGORY_EXIST_CONDITION), null, true));
            value.minus(TValue("Eq2_1_6переоценка"));
        else
            m_protocol.printLine("переменная = 0, т.к. EqОсн (\"Основной капитал\") <=0");
        end;

        setAttributeValue(value, "Eq3_4переоценка");
    end;

    private macro Eq3_5()
        
        m_protocol.printAttributeHeader("Eq3_5");

        macro getDepreciatedCost(maturityDate : Date, rest : Money)
            var dayTerm     = 0;

            if (maturityDate != NULL)
                dayTerm = maturityDate - m_period.endDate();
            end;

            var monthTerm   = floatMonths(m_period.endDate() - dayTerm, m_period.endDate());
            var quarterTerm = Int(monthTerm / 3);/*требуется количество полных кварталов*/
            var yearTerm    = monthTerm / 12.0;

            if (dayTerm <= 0)
                return $0.0;
            elif (yearTerm <= 5)
                return Money(rest * quarterTerm / 20.0);
            else
                return rest;
            end;
        end;

        var depreciatedCost = $0.0;
        var masks = "20313*, 20314*, 31309*, 31409*, 31509*, 31609*, 41107*, 41207*, 41307*, 41407*,41507*,"  +
                    "41607*, 41707*, 41807*, 41907*, 42007*, 42107*, 42207*, 42507*, 42807*, 42907*, 43007*," +
                    "43107*, 43207*, 43307*, 43407*, 43507*, 43607*, 43707*, 43807*, 43907*, 44007*, 52006*";

        var dataSet = TRsbDataSet("SELECT NVL(rep_note.readMaturityDate(t_chapter, t_account, t_code_currency, " + getSqlDate(m_period.endDate())+ "),"
            + "\n" +              "           CASE"
            + "\n" +              "               WHEN t_operationDate <> TO_DATE('01-01-0001', 'DD-MM-YYYY')"
            + "\n" +              "                   THEN t_daysToEnd + t_operationDate"
            + "\n" +              "               WHEN t_daysToEnd <> 0"
            + "\n" +              "                   THEN t_daysToEnd + " + getSqlDate(m_period.endDate())
            + "\n" +              "               ELSE"
            + "\n" +              "                   NULL"
            + "\n" +              "           END) t_maturityDate,"
            + "\n" +              "       t_account, t_rest"
            + "\n" +              "  FROM " + getAccountDataSourceQuery(masks) + " account"
            + "\n" +              " WHERE " + getCategoryFilter("СубКредит", CATEGORY_EXIST_CONDITION)
            + "\n" +              "   AND account.t_rest <> 0.0");

        while (dataSet.moveNext())
            depreciatedCost = depreciatedCost + getDepreciatedCost(dataSet.maturityDate, dataSet.rest);
        end;

        var value = TValue("EqОсн");
        if (value.getExact() > $0.0)
            if (depreciatedCost < (value.getExact() * 0.5))
                m_protocol.printLine("Вычисленное значение меньше чем 50% величины основного капитала (EqОсн = " + value.getExact() + ").");
                m_protocol.printLine("Значение переменной = " + depreciatedCost + ".");
                value = TValue(depreciatedCost);
            else
                m_protocol.printLine("Вычисленное значение больше либо равно чем 50% величины основного капитала (EqОсн = " + value.getExact() + ").");
                m_protocol.printLine("Значение переменной = 0.5*" + value.getExact() + ".");
                value = TValue(0.5 * value.getExact());
            end;
        else
            m_protocol.printLine("переменная = 0, т.к. EqОсн (\"Основной капитал\") <=0");
            value.clear();
        end;


        setAttributeValue(value, "Eq3_5");
    end;

    private macro Eq3_6()
        m_protocol.printAttributeHeader("Eq3_6");

        var value = TValue();

        if (TValue("EqОсн").getExact() > 0)
            value = value.plus(TValue("Eq3_6ввод"));
        else
            m_protocol.printLine("переменная = 0, т.к. EqОсн (\"Основной капитал\") <=0");
            value.clear();
        end;

        setAttributeValue(value, "Eq3_6");
    end;

    private macro Eq3_6ввод()
        m_protocol.printAttributeHeader("Eq3_6ввод");
        setAttributeValue(TValue("Eq3_6ввод"), "Eq3_6ввод");
    end;

    private macro Eq3_7()
        m_protocol.printAttributeHeader("Eq3_7");

        var value = TValue();

        if (TValue("EqОсн").getExact() > 0)
            value = summarizeAccountRests("10207*", getCategoryFilter("3.7", CATEGORY_EXIST_CONDITION));
        else
            m_protocol.printLine("переменная = 0, т.к. EqОсн (\"Основной капитал\") <=0");
            value.clear();
        end;

        setAttributeValue(value, "Eq3_7");
    end;

    private macro Eq3_9()
        m_protocol.printAttributeHeader("Eq3_9");

        var value = TValue();

        if (TValue("EqОсн").getExact() > 0)
            if (not m_parameters.ПрибыльПредшествующегоГодаНеПодтверждена)
                m_protocol.printLine("Прибыль предшествующего года не подтверждена и дата отчета <= 01.07 текущего года.");
                m_protocol.printLine("Значение переменной равно нулю.");
                value.clear();
            else
                m_protocol.printLine("Прибыль предшествующего года не подтверждена и дата отчета > 01.07 текущего года.");
                m_protocol.printLine("В расчет входят:");
                value = summarizeBalanceRests(m_period.endDate(), nullFilter,
                                              "10801", "70302", "70701", "70703", "70704", "70705", "70801",
                                              "-10901", "-70402", "-70706", "-70708", "-70709", "-70710", "-70802", "-70502");
                value.plus(summarizeAccountRests("70702*", getCategoryFilter("ТСС", CATEGORY_EXIST_CONDITION)));
                value.minus(summarizeAccountRests("70707*", getCategoryFilter("ТСС", CATEGORY_EXIST_CONDITION), null, true));
            end;
        else
            m_protocol.printLine("переменная = 0, т.к. EqОсн (\"Основной капитал\") <=0");
            value.clear();
        end;

        if (value.getExact < 0)
            m_protocol.printLine("Сумма составляющих < 0, значение переменной равно нулю.");
            value.clear();
        end;

        setAttributeValue(value, "Eq3_9");
    end;

    private macro Eq3_10()
        m_protocol.printAttributeHeader("Eq3_10");
        
        var currentReserve = $0.0;
        var reserve        = $0.0;
        var rest           = $0.0;
        var dataSet        = NULL;
        var value   = TValue();
        var masks   = "10207*, 10603*, 10801*, 61301*, 61304*, 20313*, 20314*, 31309*, 31409*, 31509*, 31609*, 41107*, 41207*, 41307*, 41407*, 41507*,"
                      "41607*, 41707*, 41807*, 41907*, 42007*, 42107*, 42207*, 42507*, 42807*, 42907*, 43007*, 43107*, 43207*, 43307*, 43407*, 43507*,"
                      "43607*, 43807*, 43907*, 44007*, 52006*, 70601*, 70602*, 70603*, 70604*, 70605*, 70701*, 70702*, 70703*, 70704*, 70705*, 70801*";


        if (TValue("EqОсн").getExact() > 0)
            dataSet = TRsbDataSet("SELECT account.t_rest, account.t_chapter, account.t_account, account.t_code_currency t_fiId"
                + "\n" +          "  FROM " + getAccountDataSourceQuery(masks) + " account"
                + "\n" +          " WHERE " + getCategoryFilter("3.10_", CATEGORY_EXIST_CONDITION)
                + "\n" +          "   AND account.t_rest <> 0.0");
            while (dataSet.moveNext())
                currentReserve = getActualReserve(dataSet.chapter, dataSet.account, dataSet.fiId);
                reserve = reserve + currentReserve;
                rest    = rest + dataSet.rest;
                m_protocol.printAccountAndReserve(dataSet.account, dataSet.rest, reserve);
            end;
            value = TValue(rest - reserve).plus(TValue("Eq3_10ввод"));
       else
            m_protocol.printLine("переменная = 0, т.к. EqОсн (\"Основной капитал\") <=0");
            value.clear();
        end;

        setAttributeValue(value, "Eq3_10");
    end;

    private macro Eq3_10ввод()
        m_protocol.printAttributeHeader("Eq3_10ввод");
        setAttributeValue(TValue("Eq3_10ввод"), "Eq3_10ввод");
    end;

    private macro EqИстДоп()
        m_protocol.printAttributeHeader("EqИстДоп");

        setAttributeValue(TValue().plus(TValue("Eq3_1")).plus(TValue("Eq3_3")).plus(TValue("Eq3_4")).plus(TValue("Eq3_5")).plus(TValue("Eq3_6")).plus(TValue("Eq3_7")).plus(TValue("Eq3_9")).minus(TValue("Eq3_10")), "EqИстДоп");
    end;

    private macro EqДоп()
        m_protocol.printAttributeHeader("EqДоп");

        var value = TValue();
        var eqOsnValue    = TValue("EqОсн");
        var eqIstDopValue = TValue("EqИстДоп");

        if (eqOsnValue.getExact() > 0)
            if (eqOsnValue.getExact() <= eqIstDopValue.getExact())
                m_protocol.printLine("Переменная EqОсн (\"Основной капитал\") = " + eqOsnValue.getExact() + " <= переменной EqИстДоп = " + eqIstDopValue.getExact() + ".");
                m_protocol.printLine("Значение перменной равно " + eqOsnValue.getExact());
                value = eqOsnValue;
            else
                m_protocol.PrintLine("Переменная EqОсн (\"Основной капитал\") = " + eqOsnValue.getExact() + " > переменной EqИстДоп = " + eqIstDopValue.getExact() + ".");
                m_protocol.PrintLine("Значение перменной равно " + eqIstDopValue.getExact());
                value = eqIstDopValue;
            end;
        else
            m_protocol.printLine("Переменная EqОсн (\"Основной капитал\") <= 0 значение перменной равно нулю");
        end;

        setAttributeValue(value, "EqДоп");
    end;

    private macro Eq4_1()
        m_protocol.printAttributeHeader("Eq4_1");
        setAttributeValue(TValue("Eq4_1"), "Eq4_1");
    end;

    private macro Eq4_2()
        m_protocol.printAttributeHeader("Eq4_2");
        setAttributeValue(TValue("Eq4_2"), "Eq4_2");
    end;

    private macro Eq4_3()
        m_protocol.printAttributeHeader("Eq4_3");
        setAttributeValue(TValue("Eq4_3"), "Eq4_3");
    end;

    private macro Eq4_5()
        m_protocol.printAttributeHeader("Eq4_5");

        var currentReserve = $0.0;
        var reserve        = $0.0;
        var rest           = $0.0;

        var dataSet = TRsbDataSet("SELECT account.t_rest, account.t_chapter, account.t_account, account.t_code_currency t_fiId"
            + "\n" +              "  FROM " + getAccountDataSourceQuery("474*, 603*") + " account"
            + "\n" +              " WHERE t_kind_account = 'А'"
            + "\n" +              "   AND SUBSTR(t_account, 1, 5) NOT IN ('47402', '47408', '47423', '47427', '60312', '60314', '60315', '60323', '60337', '60339', '60341', '60343')"
            /*проверяем срок просрочки*/
            + "\n" +              "   AND (" + getSqlDate(m_period.endDate()) + " -"
            + "\n" +              "           NVL(rep_note.readMaturityDate(t_chapter, t_account, t_code_currency, " + getSqlDate(m_period.endDate()) + "),"
            + "\n" +              "               CASE"
            + "\n" +              "                   WHEN (t_operationDate <> TO_DATE('01-01-0001', 'DD-MM-YYYY')) AND (t_daysToEnd <> 0)"
            + "\n" +              "                       THEN t_daysToEnd + t_operationDate"
            + "\n" +              "                   ELSE"
            + "\n" +              "                       " + getSqlDate(m_period.endDate()) + ""
            + "\n" +              "               END)) > 30"
            + "\n" +              "   AND account.t_rest <> 0.0");

        while (dataSet.moveNext())
            currentReserve = getActualReserve(dataSet.chapter, dataSet.account, dataSet.fiId);
            reserve = reserve + currentReserve;
            rest    = rest + dataSet.rest;
            m_protocol.printAccountAndReserve(dataSet.account, dataSet.rest, reserve);
        end;

        setAttributeValue(TValue(rest - reserve), "Eq4_5");
    end;

    private macro Eq4_6()
        m_protocol.printAttributeHeader("Eq4_6");

        var currentReserve = $0.0;
        var reserve        = $0.0;
        var rest           = $0.0;

        var dataSet = TRsbDataSet("SELECT account.t_rest, account.t_chapter, account.t_account, account.t_code_currency t_fiId"
            + "\n" +              "  FROM " + getAccountDataSourceQuery("32009*, 32209*, 50307*, 50308*, 32009*, 32209*, 50307*, 50308*") + " account"
            + "\n" +              " WHERE " + getCategoryFilter("СубКредит", CATEGORY_EXIST_CONDITION)
            + "\n" +              "   AND account.t_rest <> 0.0");

        while (dataSet.moveNext())
            currentReserve = getActualReserve(dataSet.chapter, dataSet.account, dataSet.fiId);
            reserve = reserve + currentReserve;
            rest    = rest + dataSet.rest;
            m_protocol.printAccountAndReserve(dataSet.account, dataSet.rest, reserve);
        end;

        setAttributeValue(TValue(rest - reserve), "Eq4_6");
    end;

    private macro EqПром()
        m_protocol.printAttributeHeader("EqПром");

        setAttributeValue(TValue().plus(TValue("EqОсн")).plus(TValue("EqДоп")).minus(TValue("Eq4_1")).minus(TValue("Eq4_2")).minus(TValue("Eq4_3")).minus(TValue("Eq4_5")).minus(TValue("Eq4_6")), "EqПром");
    end;

    private macro Eq5_1()
        m_protocol.printAttributeHeader("Eq5_1");
        setAttributeValue(TValue("Eq5_1"), "Eq5_1");
    end;

    private macro Eq5_2()
        m_protocol.printAttributeHeader("Eq5_2");

        m_protocol.printLine("Вычисляем ОС:");
        var ocValue = summarizeAccountRests("60401*, 60404*", getCategoryFilter("5.2 искл", CATEGORY_NOT_EXIST_CONDITION));
        ocValue.plus(summarizeAccountRests("60701*", getCategoryFilter("НМА", CATEGORY_NOT_EXIST_CONDITION)));
        ocValue.plus(summarizeAccountRests("60102*, 61008*, 61009*, 61011*"));
        ocValue.minus(summarizeBalanceRests(m_period.endDate(), nullFilter, "60601"));
        ocValue.minus(TValue("Eq5_2ввод"));

        m_protocol.printLine(" ");
        m_protocol.printLine("Вычисляем СС:");
        var ccValue = summarizeBalanceRests(m_period.endDate(), nullFilter, "60601");
        ccValue = ccValue.plus(TValue("EqОсн")).plus(TValue("Eq3_3")).plus(TValue("Eq3_4")).plus(TValue("Eq3_6")).plus(TValue("Eq3_7")).plus(TValue("Eq3_9"));
        ccValue = ccValue.minus(TValue("Eq3_10")).minus(TValue("Eq4_1")).minus(TValue("Eq4_2")).minus(TValue("Eq4_3"));

        var value = TValue();
        m_protocol.printLine(" ");
        if (ccValue.getExact() < $0.0)
            m_protocol.printLine("Величина СС < 0 значение перменной равно " + ocValue.getExact());
            value = ocValue;
        elif (ccValue.getExact() < ocValue.getExact())
            value = TValue(ocValue.getExact() - ccValue.getExact());
            m_protocol.printLine("Величина CC > 0 и CС < OC значение перменной равно " + value.getExact());
        else
            m_protocol.printLine("Величина CС > OC значение перменной равно " + value.getExact());
        end;

        setAttributeValue(value, "Eq5_2");
    end;

    private macro Eq5_2ввод()
        m_protocol.printAttributeHeader("Eq5_2ввод");
        setAttributeValue(TValue("Eq5_2ввод"), "Eq5_2ввод");
    end;

    private macro Eq5_3()
        m_protocol.printAttributeHeader("Eq5_3");
        setAttributeValue(TValue("Eq5_3"), "Eq5_3");
    end;

    macro calculate(period : RcbPeriod)
        Eq2_1_1__2_1_2ввод();
        Eq2_1_1__2_1_2();
        Eq2_1_3__2_1_4();
        Eq2_1_6ввод();
        Eq2_1_6();
        Eq2_1_6переоценка();
        Eq2_1_7();
        Eq3_3();
        Eq2_1_5();
        Eq2_1_11();
        EqИстОсн();
        Eq2_2_1();
        Eq2_2_2__2_2_3ввод();
        Eq2_2_2__2_2_3();
        Eq2_2_4();
        Eq2_2_5ввод();
        Eq2_2_5();
        Eq2_2_5переоценка();
        Eq2_2_6ввод();
        Eq2_2_6();
        Eq2_2_8ввод();
        Eq2_2_8();
        Eq2_2_9();
        EqОсн();
        Eq3_1ввод();
        Eq3_1();
        Eq3_3();
        Eq3_3ввод();
        Eq3_4();
        Eq3_4переоценка();
        Eq3_5();
        Eq3_6ввод();
        Eq3_6();
        Eq3_7();
        Eq3_9();
        Eq3_10ввод();
        Eq3_10();
        EqИстДоп();
        EqДоп();
        Eq4_1();
        Eq4_2();
        Eq4_3();
        Eq4_5();
        Eq4_6();
        EqПром();
        Eq5_1();
        Eq5_2ввод();
        Eq5_2();
        Eq5_3();
        EqК();
    end;

    initTCalculatorBase(protocol);
end;


private class (TCalculatorBase) TCalculator(Report_ : RcbReport, Protocol_ : TProtocol, Parameters_ : TParameters)
    
    private var report = Report_;
    private var protocol = Protocol_;
    private var parameters = Parameters_;

/*Общие функции для всех атрибутов*/

    private macro AddToProtocolAttributeName(attributeName)
        m_protocol.PrintLine("--------------------------------------------------------------------------------");
        m_protocol.PrintLine(" ");
        m_protocol.PrintLine("Переменная " + attributeName);
        m_protocol.PrintLine(" ");
    end;

    macro SetAttributeValue(value : TValue, attributeName : String)
        var attributeValue = report.attributeValue(attributeName);

        attributeValue.exact  = Money(value.getExact());
        attributeValue.scaled = Double(value.getScaled());

        protocol.PrintLine(" ");
        protocol.PrintLine(string(attributeName) + " = " + attributeValue.scaledAsString + " тыс. руб.");
        protocol.PrintLine(" ");
    end;

    macro AddToProtocolUserVar(attributeName)
        protocol.PrintLine("Пользовательский ввод.");
        protocol.PrintLine(" ");
        protocol.PrintLine(attributeName  + " = " + report.AttributeValue(attributeName).scaledAsString + " тыс. руб.");
        protocol.PrintLine(" ");
    end;

    macro SetValueUserVar(attributeName)
        AddToProtocolAttributeName(attributeName);

        if (report.AttributeValue(attributeName).IsUndefined)

            protocol.PrintLine("Пользовательский ввод.");
            SetAttributeValue(TValue(), attributeName);

        else
            AddToProtocolUserVar(attributeName);
        end;
    end;

    /*Сумма остатков л/с у которых задана/не задана соотв. категория и удовлетворяющих маске*/
    macro summarizeAccountRests(EqualCategory, Category, mask)

          var rest = $0, data, Query, Cond, ExistAccount = FALSE;

          if (EqualCategory == "!")
             Cond = "=0";
          else
             Cond = ">0";
          end;

          Query = " SELECT acc.t_account, DECODE(acc.t_kind_account, 'А', -1, 1) * rsb_rep_ac.resta(acc.t_account, " + GetSQLDate(report.context.period.endDate) + ", acc.t_chapter, acc.t_r0) rest" + 
                  " FROM daccount_dbt acc" + 
                  " WHERE  acc.t_Open_date <= " + GetSQLDate(report.context.period.endDate) +
                  " AND ((acc.t_Close_Date > " + GetSQLDate(report.context.period.endDate)+ ")" +
                  "     OR(acc.t_Close_Date = " + GetSQLDate(date(0,0,0))+ ")) " + 
                  " AND " + RcbAccountFilter().GetAsSqlString("acc") +
                  " AND INSTR(acc.t_type_account, 'П')=0 " +
                  " AND rsb_rep_ac.resta(acc.t_account, " + GetSQLDate(report.context.period.endDate) + ", acc.t_chapter, acc.t_r0)!=0" +
                  " AND (" + ConvertMaskToSQLFormat(mask, "acc.t_account") + ")" +
                  " AND rsb_rep_ac.CheckObjAttrPresenceByNum(" + OBJTYPE_ACCOUNT + "," 
                                                          + OBJGROUP_REPORT + "," 
                                                          + Category + "," 
                                                          +  " rsb_rep_ac.MakeAccountId(acc.t_Account, acc.t_Code_Currency, acc.t_Chapter, NULL), " 
                                                          + GetSQLDate(report.context.period.endDate) + ")" + Cond +
                  " UNION " +
                  " SELECT acnt.t_account, rsb_rep_ac.resta(acnt.t_connect_account, " + GetSQLDate(report.context.period.endDate) + ", acnt.t_connect_chapter, acnt.t_r0) rest" + 
                  " FROM daccount$_dbt acnt" + 
                  " WHERE  acnt.t_Open_date <= " + GetSQLDate(report.context.period.endDate) +
                  " AND ((acnt.t_Close_Date > " + GetSQLDate(report.context.period.endDate)+ ")" +
                  "     OR(acnt.t_Close_Date = " + GetSQLDate(date(0,0,0))+ ")) " + 
                  " AND " + RcbAccountFilter().GetAsSqlString("acnt") +
                  " AND rsb_rep_ac.restac(acnt.t_account, acnt.t_code_currency," + GetSQLDate(report.context.period.endDate) + ", acnt.t_chapter, acnt.t_r0)!=0" +
                  " AND (" + ConvertMaskToSQLFormat(mask, "acnt.t_account") + ")" +
                  " AND rsb_rep_ac.CheckObjAttrPresenceByNum(" + OBJTYPE_ACCOUNT + "," 
                                                          + OBJGROUP_REPORT + "," 
                                                          + Category + "," 
                                                          +  " rsb_rep_ac.MakeAccountId(acnt.t_Account, acnt.t_Code_Currency, acnt.t_Chapter, NULL), " 
                                                          + GetSQLDate(report.context.period.endDate) + ")" + Cond;

         data = TRsbDataSet(query);

         data.setFieldType("rest", V_MONEY);

         while (data.Next())

              rest = rest + data.rest;

              protocol.PrintAccountLine("+" + data.t_account, data.rest + " руб.");

              ExistAccount = TRUE;
         end;

         if (not ExistAccount)
            protocol.PrintLine("Нет данных для расчета по л/с.");
         end;

         return TValue(rest);
    end;

    /*Получаем список атрибутов со знаками - возвращаем их сумму*/
    macro summarizeAttributeValues()

        var attributeName = "";
        var sign = "";

        var exact  = $0;
        var scaled = 0.0;
        
        var iAttributeNameParameter = 1;
        while (getParm(iAttributeNameParameter, attributeName))

            if (substr(attributeName, 1, 1) == "-")
                sign = "-";
                attributeName = SubStr(attributeName, 2);    
            else
                sign = "+";
            end;

            exact  = exact  + Int(sign + "1") * report.AttributeValue(attributeName).exact;
            scaled = scaled + Int(sign + "1") * report.AttributeValue(attributeName).scaled;

            protocol.PrintAttributeLine(sign + attributeName, report.AttributeValue(attributeName).exactAsString + " руб.");
          
            iAttributeNameParameter = iAttributeNameParameter + 1;
        end;

        protocol.PrintAttributeLine("ИТОГО:", string(exact:0:2) + " руб.");

        return TValue(exact, scaled);
    end;

/*расчет атрибутов*/
    macro Eq2_1_1()
        AddToProtocolAttributeName("Eq2_1_1");

        if (parameters.ОПФ_КО_АО)
            if (not report.form.Attribute("Eq2_1_1").isManual)
               SetAttributeValue(summarizeAccountRests("!", CATEGORY2_1_1искл, "102*, 103*"), "Eq2_1_1");
            else
                if (report.AttributeValue("Eq2_1_1").IsUndefined)
                    SetAttributeValue(TValue(), "Eq2_1_1");
                    protocol.PrintLine("Пользовательский ввод. Переменная является константой.");
                end;
            end;
        else
            protocol.PrintLine("ОПФ кредитной организации - ООО, значение переменной равно нулю.");
            SetAttributeValue(TValue(), "Eq2_1_1");
        end;
    end;

    macro Eq2_1_2()

          AddToProtocolAttributeName("Eq2_1_2");

          if (not parameters.ОПФ_КО_АО)

              if (not report.form.Attribute("Eq2_1_2").isManual)

                 SetAttributeValue(summarizeAccountRests("!", CATEGORY2_1_2искл, "102*, 103*"), "Eq2_1_2");

              else
                  if (report.AttributeValue("Eq2_1_2").IsUndefined)
                  
                      SetAttributeValue(TValue(), "Eq2_1_2");
                      protocol.PrintLine("Пользовательский ввод. Переменная является константой.");
                  end;
              end;
          else

               protocol.PrintLine("ОПФ кредитной организации - АО, значение переменной равно нулю.");
               SetAttributeValue(TValue(), "Eq2_1_2");
          end;

    end;

    macro Eq2_1_3()

          AddToProtocolAttributeName("Eq2_1_3");

          if (parameters.ОПФ_КО_АО)

              SetAttributeValue(summarizeBalanceRests(report.context.period.endDate, nullFilter, "10602"), "Eq2_1_3");

          else
              protocol.PrintLine("ОПФ кредитной организации - ООО, значение переменной равно нулю.");
              SetAttributeValue(TValue(), "Eq2_1_3");
          end;

    end;

    macro Eq2_1_4()

          AddToProtocolAttributeName("Eq2_1_4");

          if (parameters.ОПФ_КО_АО)

              protocol.PrintLine("ОПФ кредитной организации - АО, значение переменной равно нулю.");
              SetAttributeValue(TValue(), "Eq2_1_4");

          else

              SetAttributeValue(summarizeBalanceRests(report.context.period.endDate, nullFilter, "10602"), "Eq2_1_4");

          end;

    end;

    macro Eq2_1_5()

          AddToProtocolAttributeName("Eq2_1_5");

          var value = summarizeAccountRests(NULL, CATEGORY2_1_5, "107*");

          value.minus(report.AttributeValue("Eq2_1_7")).minus(report.AttributeValue("Eq3_3ввод"));

          protocol.PrintAccountLine("-Eq2_1_7",   report.AttributeValue("Eq2_1_7").exactAsString + " руб.");
          protocol.PrintAccountLine("-Eq3_3ввод", report.AttributeValue("Eq3_3ввод").exactAsString + " руб.");

          SetAttributeValue(value, "Eq2_1_5");
    end;

    macro Eq2_1_6()

          AddToProtocolAttributeName("Eq2_1_6");

          var value = TValue();

          if (parameters.ПрибыльТекущегоГодаПодтверждена)

               protocol.PrintLine("Прибыль текущего года подтверждена.");
               protocol.PrintLine("В расчет входят:");

               value = summarizeBalanceRests(parameters.ДатаАудПодтв_ТекГ, nullFilter, "701", "70301", "61306", "61308", 
                                                                           "-702", "-70401", "-70501", "-50905",
                                                                           "-61406", "-61408");

               value.minus(report.AttributeValue("Eq2_1_6ввод"));

               protocol.PrintBalanceLine("-Eq2_1_6ввод", report.AttributeValue("Eq2_1_6ввод").exactAsString + " руб.");

               if (value.getExact() < $0) 
                   value.clear();
                   protocol.PrintLine("Сумма составляющих < 0, значение переменной равно нулю.");
               end;

          else
               protocol.PrintLine("Прибыль текущего года не подтверждена.");
               protocol.PrintLine("Значение переменной равно нулю.");
               value.clear();
          end;

          SetAttributeValue(value, "Eq2_1_6");
    end;

    macro Eq2_1_6ввод()

          SetValueUserVar("Eq2_1_6ввод");

    end;

    macro Eq2_1_7()

          SetValueUserVar("Eq2_1_7");

    end;

    macro Eq2_1_8()

          AddToProtocolAttributeName("Eq2_1_8");

          if (parameters.ОПФ_КО_АО)
    
            if (report.AttributeValue("Eq2_1_8").IsUndefined)

                protocol.PrintLine("Пользовательский ввод.");
                SetAttributeValue(TValue(), "Eq2_1_8");
            else
                AddToProtocolUserVar("Eq2_1_8");
            end;

          else

            protocol.PrintLine("ОПФ кредитной организации - ООО, значение переменной равно нулю.");
            SetAttributeValue(TValue(), "Eq2_1_8");

          end;

    end;

    macro Eq2_1_9()

          AddToProtocolAttributeName("Eq2_1_9");

          if (parameters.ОПФ_КО_АО)

            protocol.PrintLine("ОПФ кредитной организации - АО, значение переменной равно нулю.");
            SetAttributeValue(TValue(), "Eq2_1_9");

          else

            SetAttributeValue(summarizeBalanceRests(report.context.period.endDate, nullFilter, "10604"), "Eq2_1_9");

          end;

    end;

    macro Eq2_1_10()

          AddToProtocolAttributeName("Eq2_1_10");

          SetAttributeValue(summarizeAccountRests(NULL, CATEGORY2_1_10, "10704*"), "Eq2_1_10");

    end;

    macro Eq2_1_11()

          AddToProtocolAttributeName("Eq2_1_11");
 
          var value = TValue();

          if (parameters.ПрибыльПрошлогоГодаПодтверждена)

             protocol.PrintLine("Прибыль прошлого года подтверждена.");
             protocol.PrintLine("В расчет входят:");

             value = summarizeBalanceRests(report.context.period.endDate, nullFilter, "70302", "-70402", "-70502");

             if (value.getExact() < 0) 
                 value.clear(); 
                 protocol.PrintLine("Сумма составляющих < 0, значение переменной равно нулю.");
             end;

          else 
               protocol.PrintLine("Прибыль прошлого года не подтверждена.");
               protocol.PrintLine("Значение переменной равно нулю.");

               value.clear();
          end;

          SetAttributeValue(value, "Eq2_1_11");
    end;

    macro EqИстОсн()
        AddToProtocolAttributeName("EqИстОсн");

        SetAttributeValue(summarizeAttributeValues("Eq2_1_1", "Eq2_1_2", "Eq2_1_3", "Eq2_1_4", "Eq2_1_5", "Eq2_1_6",
                                                   "Eq2_1_7", "Eq2_1_8", "Eq2_1_9", "Eq2_1_10", "Eq2_1_11"), "EqИстОсн");
    end;

    macro Eq2_2_1()
        AddToProtocolAttributeName("Eq2_2_1");

        /*#111227 по балансовому 60701 включаются лицевые счета, которые относятся к нематериальным активам.*/
        var filter =  " NOT(account.t_balance = ''60701'' "
                 + "\n" + " AND nvl(rcb_objattr.getobjattr (4, 1,"
                 + "\n" + "   rsb_rep_ac.MakeAccountID(account.t_Account, "
                 + "\n" + "                            account.t_Code_Currency, "
                 + "\n" + "                            account.t_Chapter, "
                 + "\n" + "                            DECODE(INSTR(account.t_type_account, ''П''), 0, NULL, ''X'')), "
                 + "\n" + "   TO_DATE(''" + report.context.period.endDate + "'',''DD.MM.YYYY'') ),chr(0)) <> ''НМА'')";


        SetAttributeValue(summarizeBalanceRests(report.context.period.endDate, filter, "60901", "60701", "-60903"), "Eq2_2_1");
    end;

    macro Eq2_2_2()
        AddToProtocolAttributeName("Eq2_2_2");

        SetAttributeValue(summarizeBalanceRests(report.context.period.endDate, nullFilter, "10501"), "Eq2_2_2");
    end;

    macro Eq2_2_3()
            
        macro getQuery(isCurrency)
            var accountTableName;
            var accblncTableName;

            if (isCurrency)
                accountTableName = "daccount_dbt";
                accblncTableName = "daccblnc_dbt";
            else
                accountTableName = "daccount$_dbt";
                accblncTableName = "daccblnc$_dbt";
            end;
            
            return          "SELECT *"
                   + "\n" + "  FROM (SELECT account.*,"
                   + "\n" + "               DECODE(account.t_kind_account, 'А', -1, 1) * rsb_account.restAll(account.t_account, account.t_chapter, account.t_code_currency, " + getSqlDate(report.context.period.endDate) + ") t_rest"
                   + "\n" + "          FROM " + accountTableName + " account,"
                   + "\n" + "               " + accblncTableName + " accblnc "
                   + "\n" + "         WHERE account.t_chapter = accblnc.t_chapter"
                   + "\n" + "           AND account.t_account = accblnc.t_account"
                   + "\n" + "           AND accblnc.t_chapter = 1"
                   + "\n" + "           AND accblnc.t_balance" + логическийПланСчетов + " = '10502'"
                   + "\n" + "           AND INSTR(account.t_type_account, 'П') = 0"
                   + "\n" + "           AND " + rcbAccountFilter().getAsSqlString("account") + ")"
                   + "\n" + " WHERE t_rest <> 0";
        end;

        AddToProtocolAttributeName("Eq2_2_3");

        record account("account.dbt");
        var    accountRecord = TRecHandler("account.dbt");
        var    value = TValue(), cost, noteEndDate, isManyAcc = FALSE;

        var accountsQuery = getQuery(false) + "\nUNION ALL\n" + getQuery(true);

        var dataSet = TRsbDataSet(accountsQuery);

        if (sql_getNRecs(accountsQuery) > 1)
            protocol.PrintLine("Cуществует несколько счетов, открытых на б/с 10502");
            isManyAcc = TRUE;
        end;

        if (dataSet.Next()) 
           value.clear();

           dataSet.GetRecord().CopyTo(accountRecord.rec);
           Copy(account, accountRecord);

           cost = readNoteForObject(OBJTYPE_ACCOUNT, UniID(account, OBJTYPE_ACCOUNT),
                                     NOTEKIND_COST_PART, report.context.period.endDate, noteEndDate);

           if (isManyAcc)
               protocol.PrintLine("Обрабатываем счет " + dataSet.account);
           end;

           if ((noteEndDate != NULL) and (noteEndDate <= report.context.period.endDate) and (cost != NULL))
               value = TValue(cost);
               protocol.PrintLine("Значение примечания \"Стоимость выкупленных долей\" на " + report.context.period.endDate + " = " + cost);
           else
               value = TValue(dataSet.rest);
               protocol.PrintLine("Значение примечания \"Стоимость выкупленных долей\" на " + report.context.period.endDate + " равно нулю.");
               protocol.PrintLine("Значение переменной равно остатку на лицевом счете " + account.account + " на " + report.context.period.endDate + ".");
           end;

        else
           value.clear();
        end;

        SetAttributeValue(value, "Eq2_2_3");
    end;

    macro Eq2_2_4()

          AddToProtocolAttributeName("Eq2_2_4");

          var value = summarizeBalanceRests(report.context.period.endDate, nullFilter, "70402", "70502", "-70302");

          if (value.getExact() < 0) 
              value.clear(); 
              protocol.PrintLine("Сумма составляющих < 0, значение переменной равно нулю.");
          end;

          SetAttributeValue(value, "Eq2_2_4");
    end;

    macro Eq2_2_5()

          AddToProtocolAttributeName("Eq2_2_5");

          var value = summarizeBalanceRests(report.context.period.endDate, nullFilter, "702", "70401", "70501", "50905", "32802", "47502", "61402", "61403", "61406", "61408",
                                                                           "-701", "-70301", "-32801", "-47501", "-61302", "-61303", "-61304", "-61306", "-61308");

          value.plus(report.AttributeValue("Eq2_2_5ввод")).plus(report.AttributeValue("Eq2_2_5ввод1")).plus(report.AttributeValue("Eq2_1_6"));

          protocol.PrintBalanceLine("+Eq2_2_5ввод",  report.AttributeValue("Eq2_2_5ввод").exactAsString + " руб.");
          protocol.PrintBalanceLine("+Eq2_2_5ввод1", report.AttributeValue("Eq2_2_5ввод1").exactAsString + " руб.");
          protocol.PrintBalanceLine("+Eq2_1_6",      report.AttributeValue("Eq2_1_6").exactAsString + " руб.");

          if (value.getExact() < 0) 
              value.clear();
              protocol.PrintLine("Сумма составляющих < 0, значение переменной равно нулю.");
          end;

          SetAttributeValue(value, "Eq2_2_5");
    end;

    macro Eq2_2_5ввод()
          SetValueUserVar("Eq2_2_5ввод");
    end;

    macro Eq2_2_5ввод1()
          SetValueUserVar("Eq2_2_5ввод1");
    end;

    macro Eq2_2_6()
          AddToProtocolAttributeName("Eq2_2_6");

          macro AccountList(mask)

            var QueryAccount;

            return QueryAccount = " SELECT acc.t_account, acc.t_chapter, acc.t_code_currency, acc.t_client, DECODE(acc.t_kind_account, 'А', -1, 1) * rsb_rep_ac.resta(acc.t_account, " + GetSQLDate(report.context.period.endDate) + ", acc.t_chapter, acc.t_r0) rest " + 
                                  " FROM daccount_dbt acc" + 
                                  " WHERE  acc.t_Open_date <= " + GetSQLDate(report.context.period.endDate) +
                                  " AND ((acc.t_Close_Date > " + GetSQLDate(report.context.period.endDate)+ ")" +
                                  "     OR(acc.t_Close_Date = " + GetSQLDate(date(0,0,0))+ ")) " + 
                                  " AND " + RcbAccountFilter().GetAsSqlString("acc") +
                                  " AND INSTR(acc.t_type_account, 'П')=0 " +
                                  " AND (" + ConvertMaskToSQLFormat(mask, "acc.t_account") + ")" +
                                  " AND rsb_rep_ac.resta(acc.t_account, " + GetSQLDate(report.context.period.endDate) + ", acc.t_chapter, acc.t_r0)!=0" +
                                  " UNION " +
                                  " SELECT acnt.t_account, acnt.t_chapter, acnt.t_code_currency, acnt.t_client, rsb_rep_ac.resta(acnt.t_connect_account, " + GetSQLDate(report.context.period.endDate) + ", acnt.t_connect_chapter, acnt.t_r0) rest "+ 
                                  " FROM daccount$_dbt acnt" + 
                                  " WHERE  acnt.t_Open_date <= " + GetSQLDate(report.context.period.endDate) +
                                  " AND ((acnt.t_Close_Date > " + GetSQLDate(report.context.period.endDate)+ ")" +
                                  "     OR(acnt.t_Close_Date = " + GetSQLDate(date(0,0,0))+ ")) " + 
                                  " AND " + RcbAccountFilter().GetAsSqlString("acnt") +
                                  " AND rsb_rep_ac.restac(acnt.t_account, acnt.t_code_currency," + GetSQLDate(report.context.period.endDate) + ", acnt.t_chapter, acnt.t_r0)!=0" +
                                  " AND (" + ConvertMaskToSQLFormat(mask, "acnt.t_account") + ")";
                
          end;
                
          var Rez = $0, data, ExistAccount = FALSE, rvp;
          var obj = КЛицевойСчет;
          var prt = КСубъект;

          data = TRsbDataSet(AccountList("50706*, 50707*, 50708*"));

          data.setFieldType("rest", V_MONEY);

          while (data.Next)
             if (obj.ИнициализацияАльтернативная(data.t_Account, data.t_Code_Currency, data.t_Chapter) 
                and prt.Инициализация(data.t_client))

                if (obj.ЦельПриобретенияЦб("ИП", report.context.period.endDate) /*инвестиционный портфель*/
                   and (prt.ДоляУК(report.context.period.endDate) > 20))

                   Rez = Rez + data.rest;
                   rvp = obj.ФактРезервРВП(report.context.period.endDate);
                   Rez = Rez - rvp;

                   protocol.PrintAccountLine("+" + data.t_account, data.rest + " руб.");
                   protocol.PrintAccountLine("-РВП", rvp + " руб.");

                   ExistAccount = TRUE;

                end;
             end;
          end;

          data = TRsbDataSet(AccountList("50806*, 50807*, 50808*, 60102*, 60103*, 60104*, 60202*, 60303*, 60204*"));
          
          data.setFieldType("rest", V_MONEY);

          while (data.Next)
             if (prt.Инициализация(data.t_client))

                if (prt.ДоляУК(report.context.period.endDate) > 20)

                   Rez = Rez + data.rest;
                   rvp = obj.ФактРезервРВП(report.context.period.endDate);
                   Rez = Rez - rvp;

                   protocol.PrintAccountLine("+" + data.t_account, data.rest + " руб.");
                   protocol.PrintAccountLine("-РВП", rvp + " руб.");

                   ExistAccount = TRUE;                   

                end;
             end;
          end;

          data = TRsbDataSet(AccountList("50605*, 50705*, 50805*, 60101*, 60201*"));

          data.setFieldType("rest", V_MONEY);
          
          while (data.Next)

             Rez = Rez + data.rest;
             protocol.PrintAccountLine("+" + data.t_account, data.rest + " руб.");

             if (obj.ИнициализацияАльтернативная(data.t_Account, data.t_Code_Currency, data.t_Chapter))

                 rvp = obj.ФактРезервРВП(report.context.period.endDate);
                 Rez = Rez - rvp;

                 protocol.PrintAccountLine("-РВП", rvp + " руб.");


             end;

             ExistAccount = TRUE;             

          end;

          if (not ExistAccount)
             protocol.PrintLine("Нет данных для расчета по л/с.");
          end;

          var value = TValue(Rez);

          value.plus(report.AttributeValue("Eq2_2_6ввод"));

          protocol.PrintAccountLine("+Eq2_2_6ввод", report.AttributeValue("Eq2_2_6ввод").exactAsString + " руб.");

          SetAttributeValue(value, "Eq2_2_6");
    end;

    macro Eq2_2_6ввод()
          SetValueUserVar("Eq2_2_6ввод");
    end;

    macro Eq2_2_7()
          SetValueUserVar("Eq2_2_7");
    end;

    macro Eq2_2_8()

          AddToProtocolAttributeName("Eq2_2_8");

          var obj = КЛицевойСчет;
          var Rez = $0, data, Query, rvp;
          var mask = "102*, 103*, 104*, 10602*, 10604*, 107*, 613*, 701*, 703*";

          Query = " SELECT acc.t_account, acc.t_code_currency, acc.t_chapter, DECODE(acc.t_kind_account, 'А', -1, 1) * rsb_rep_ac.resta(acc.t_account, " + GetSQLDate(report.context.period.endDate) + ", acc.t_chapter, acc.t_r0) rest " + 
                  " FROM daccount_dbt acc" + 
                  " WHERE  acc.t_Open_date <= " + GetSQLDate(report.context.period.endDate) +
                  " AND ((acc.t_Close_Date > " + GetSQLDate(report.context.period.endDate)+ ")" +
                  "     OR(acc.t_Close_Date = " + GetSQLDate(date(0,0,0))+ ")) " + 
                  " AND " + RcbAccountFilter().GetAsSqlString("acc") +
                  " AND INSTR(acc.t_type_account, 'П')=0 " +
                  " AND rsb_rep_ac.resta(acc.t_account, " + GetSQLDate(report.context.period.endDate) + ", acc.t_chapter, acc.t_r0)!=0" +
                  " AND (" + ConvertMaskToSQLFormat(mask, "acc.t_account") + ")"+
                  " AND rsb_rep_ac.CheckObjAttrPresenceByNum(" + OBJTYPE_ACCOUNT + "," 
                                                          + OBJGROUP_REPORT + "," 
                                                          + CATEGORY2_2_8 + "," 
                                                          +  " rsb_rep_ac.MakeAccountId(acc.t_Account, acc.t_Code_Currency, acc.t_Chapter, NULL), " 
                                                          + GetSQLDate(report.context.period.endDate) + ")>0" +
                  " UNION " +
                  " SELECT acnt.t_account, acnt.t_code_currency, acnt.t_chapter, rsb_rep_ac.resta(acnt.t_connect_account, " + GetSQLDate(report.context.period.endDate) + ", acnt.t_connect_chapter, acnt.t_r0) rest " +
                  " FROM daccount$_dbt acnt" + 
                  " WHERE  acnt.t_Open_date <= " + GetSQLDate(report.context.period.endDate) +
                  " AND ((acnt.t_Close_Date > " + GetSQLDate(report.context.period.endDate)+ ")" +
                  "     OR(acnt.t_Close_Date = " + GetSQLDate(date(0,0,0))+ ")) " + 
                  " AND " + RcbAccountFilter().GetAsSqlString("acnt") +
                  " AND rsb_rep_ac.restac(acnt.t_account, acnt.t_code_currency," + GetSQLDate(report.context.period.endDate) + ", acnt.t_chapter, acnt.t_r0)!=0" +
                  " AND (" + ConvertMaskToSQLFormat(mask, "acnt.t_account") + ")"+
                  " AND rsb_rep_ac.CheckObjAttrPresenceByNum(" + OBJTYPE_ACCOUNT + "," 
                                                          + OBJGROUP_REPORT + "," 
                                                          + CATEGORY2_2_8 + "," 
                                                          +  " rsb_rep_ac.MakeAccountId(acnt.t_Account, acnt.t_Code_Currency, acnt.t_Chapter, NULL), " 
                                                          + GetSQLDate(report.context.period.endDate) + ")>0";


         data = TRsbDataSet(Query);

         data.setFieldType("rest", V_MONEY);

         while (data.Next())

             Rez = Rez + data.rest;
             protocol.PrintAccountLine("+" + data.t_account, data.rest + " руб.");

             if (obj.ИнициализацияАльтернативная(data.t_Account, data.t_Code_Currency, data.t_Chapter))

                rvp = obj.ФактРезервРВП(report.context.period.endDate);
                Rez = Rez - rvp;
                protocol.PrintAccountLine("-РВП", rvp + " руб.");

             end;

         end;
         SetAttributeValue(TValue(Rez), "Eq2_2_8");
    end;

    macro EqОсн()
          AddToProtocolAttributeName("EqОсн");

          SetAttributeValue(summarizeAttributeValues("EqИстОсн", "-Eq2_2_1", "-Eq2_2_2", "-Eq2_2_3", "-Eq2_2_4",
                                                     "-Eq2_2_5", "-Eq2_2_6", "-Eq2_2_7", "-Eq2_2_8"), "EqОсн");
    end;

    macro Eq3_1()

          AddToProtocolAttributeName("Eq3_1");

          if (report.AttributeValue("EqОсн").exact <= 0) 

              protocol.PrintLine("Переменная EqОсн (\"Основной капитал\") <= 0 значение перменной равно нулю");
              SetAttributeValue(TValue($0), "Eq3_1");

          elif (report.AttributeValue("Eq3_1").IsUndefined)

              protocol.PrintLine("Пользовательский ввод.");
              SetAttributeValue(TValue($0), "Eq3_1");
          else
              AddToProtocolUserVar("Eq3_1");
          end;

    end;

    macro Eq3_3()

          AddToProtocolAttributeName("Eq3_3");

          if (report.AttributeValue("EqОсн").exact <= 0) 

              protocol.PrintLine("Переменная EqОсн (\"Основной капитал\") <= 0 значение перменной равно нулю");
              SetAttributeValue(TValue($0), "Eq3_3");

          elif (report.AttributeValue("Eq3_3").IsUndefined)

              protocol.PrintLine("Пользовательский ввод.");
              SetAttributeValue(TValue($0), "Eq3_3");
          else
              AddToProtocolUserVar("Eq3_3");
          end;

    end;

    macro Eq3_3ввод()
          SetValueUserVar("Eq3_3ввод");
    end;

    macro Eq3_4()

          AddToProtocolAttributeName("Eq3_4");

          var value = TValue();

          if (report.AttributeValue("EqОсн").exact <= 0)

              value.clear();
              protocol.PrintLine("Переменная EqОсн (\"Основной капитал\") <= 0 значение перменной равно нулю");

          else

              value = summarizeBalanceRests(report.context.period.endDate, nullFilter, "701", "70301", "32801", "47501", "61302", "61303", "61304", "61306", "61308",
                                                                           "-702", "-70401", "-70501", "-32802", "-47502", "-61402", "-61403", "-61406", "-61408", "-50905");

              value.minus(report.AttributeValue("Eq2_2_5ввод")).minus(report.AttributeValue("Eq2_2_5ввод1")).minus(report.AttributeValue("Eq2_1_6"));

              protocol.PrintAttributeLine("-Eq2_2_5ввод",  report.AttributeValue("Eq2_2_5ввод").exactAsString + " руб.");
              protocol.PrintAttributeLine("-Eq2_2_5ввод1", report.AttributeValue("Eq2_2_5ввод1").exactAsString + " руб.");
              protocol.PrintAttributeLine("-Eq2_1_6",      report.AttributeValue("Eq2_1_6").exactAsString + " руб.");

              if (value.getExact() < 0) 
                 value.clear(); 
                 protocol.PrintLine("Сумма составляющих < 0, значение переменной равно нулю.");
              end;

          end;

          SetAttributeValue(value, "Eq3_4");
    end;

    macro Eq3_5()
          
          AddToProtocolAttributeName("Eq3_5");

          macro СуммаОстаточныхСтоимостейСубКредитов(account, currcode, chapter)

                var obj = КЛицевойСчет, CountDay, CountYear, CountMonth, CountQuart:integer;

                if (obj.ИнициализацияАльтернативная(account, currcode, chapter))

                    CountDay   = obj.ОстатокСрокаДо(report.context.period.endDate);
                    CountMonth = FloatMonths(report.context.period.endDate - CountDay, report.context.period.endDate);
                    CountYear  = CountMonth/12;

                    if (CountDay <= 0)

                       return $0;

                    elif (CountYear > 5) 

                       return (obj.Остаток(report.context.period.endDate, currcode));

                    elif ((CountDay > 0) and (CountYear <= 5))

                       CountQuart = CountMonth/3;/*без дробной части, т.к. integer;*/

                       return (obj.Остаток(report.context.period.endDate, currcode)*CountQuart/20);

                    end;

                else
                    return $0;
                end;
          end;

          var Rez = $0, data, Query, val;
          var mask = "31309*, 31409*, 31509*, 31609*, 41107*, 41207*, 41307*, 41407*, 41507*, 41607*, 41707*, 41807*, 41907*, 42007*, 42107*, 42207*, 42507*, 42807*, 42907*, 43007*, 43107*, 43207*, 43307*, 43407*, 43507*, 43607*, 43707*, 43807*, 43907*, 44007*";

          if (report.AttributeValue("EqОсн").exact <= 0)
  
              Rez = $0;
              protocol.PrintLine("Переменная EqОсн (\"Основной капитал\") <= 0 значение перменной равно нулю");
          else

              Query = " SELECT acc.t_account, acc.t_chapter, acc.t_code_currency FROM daccount_dbt acc" + 
                      " WHERE  acc.t_Open_date <= " + GetSQLDate(report.context.period.endDate) +
                      " AND ((acc.t_Close_Date > " + GetSQLDate(report.context.period.endDate)+ ")" +
                      "     OR(acc.t_Close_Date = " + GetSQLDate(date(0,0,0))+ ")) " + 
                      " AND " + RcbAccountFilter().GetAsSqlString("acc") +
                      " AND INSTR(acc.t_type_account, 'П')=0 " +
                      " AND rsb_rep_ac.resta(acc.t_account, " + GetSQLDate(report.context.period.endDate) + ", acc.t_chapter, acc.t_r0)!=0" +
                      " AND (" + ConvertMaskToSQLFormat(mask, "acc.t_account") + ")"+
                      " AND rsb_rep_ac.CheckObjAttrPresenceByNum(" + OBJTYPE_ACCOUNT + "," 
                                                              + OBJGROUP_REPORT + "," 
                                                              + СубКредит + "," 
                                                              +  " rsb_rep_ac.MakeAccountId(acc.t_Account, acc.t_Code_Currency, acc.t_Chapter, NULL), " 
                                                              + GetSQLDate(report.context.period.endDate) + ")>0" +
                      " UNION " +
                      " SELECT acnt.t_account, acnt.t_chapter, acnt.t_code_currency FROM daccount$_dbt acnt" + 
                      " WHERE  acnt.t_Open_date <= " + GetSQLDate(report.context.period.endDate) +
                      " AND ((acnt.t_Close_Date > " + GetSQLDate(report.context.period.endDate)+ ")" +
                      "     OR(acnt.t_Close_Date = " + GetSQLDate(date(0,0,0))+ ")) " + 
                      " AND " + RcbAccountFilter().GetAsSqlString("acnt") +
                      " AND rsb_rep_ac.restac(acnt.t_account, acnt.t_code_currency," + GetSQLDate(report.context.period.endDate) + ", acnt.t_chapter, acnt.t_r0)!=0" +
                      " AND (" + ConvertMaskToSQLFormat(mask, "acnt.t_account") + ")"+
                      " AND rsb_rep_ac.CheckObjAttrPresenceByNum(" + OBJTYPE_ACCOUNT + "," 
                                                              + OBJGROUP_REPORT + "," 
                                                              + СубКредит + "," 
                                                              +  " rsb_rep_ac.MakeAccountId(acnt.t_Account, acnt.t_Code_Currency, acnt.t_Chapter, NULL), " 
                                                              + GetSQLDate(report.context.period.endDate) + ")>0";

              data = TRsbDataSet(Query);
     
              while (data.Next())
     
                  Rez = Rez + СуммаОстаточныхСтоимостейСубКредитов(data.t_account, data.t_code_currency, data.t_chapter);
     
              end;

              val = report.AttributeValue("EqОсн").exact/2;

              if (Rez <= val ) 

                   protocol.PrintLine("Вычисленное значение меньше чем 50% величины основного капитала (EqОсн = " + report.AttributeValue("EqОсн").exact + ").");
                   protocol.PrintLine("Значение переменной = " + Rez + ".");
              else

                   Rez = val; 
                   protocol.PrintLine("Вычисленное значение больше либо равно чем 50% величины основного капитала (EqОсн = " + report.AttributeValue("EqОсн").exact + ").");
                   protocol.PrintLine("Значение переменной = 0.5*" + report.AttributeValue("EqОсн").exact + ".");
              end;
     
           end;

           SetAttributeValue(TValue(Rez), "Eq3_5");
    end;

    macro Eq3_6()

          AddToProtocolAttributeName("Eq3_6");

          if (report.AttributeValue("EqОсн").exact <= 0) 

              protocol.PrintLine("Переменная EqОсн (\"Основной капитал\") <= 0 значение перменной равно нулю");
              SetAttributeValue(TValue($0), "Eq3_6");

          elif (report.AttributeValue("Eq3_6").IsUndefined)

              protocol.PrintLine("Пользовательский ввод.");
              SetAttributeValue(TValue($0), "Eq3_6");
          else
              AddToProtocolUserVar("Eq3_6");
          end;

    end;

    macro Eq3_7()

          AddToProtocolAttributeName("Eq3_7");

          var value = TValue();

          if (report.AttributeValue("EqОсн").exact <= 0)
              value.clear();
              protocol.PrintLine("Переменная EqОсн (\"Основной капитал\") <= 0 значение перменной равно нулю");
          else
              if (parameters.ОПФ_КО_АО)
                  value = summarizeAccountRests(NULL, CATEGORY3_7, "103*");
              else
                  value.clear();
                  protocol.PrintLine("ОПФ кредитной организации - ООО, значение переменной равно нулю.");
              end;
          end;

          SetAttributeValue(value, "Eq3_7");
    end;

    macro Eq3_8()
          AddToProtocolAttributeName("Eq3_8");

          var value = TValue();

          if (report.AttributeValue("EqОсн").exact <= 0)
              value.clear();
              protocol.PrintLine("Переменная EqОсн (\"Основной капитал\") <= 0 значение перменной равно нулю");
          else
              if (parameters.ОПФ_КО_АО)
                  value = summarizeBalanceRests(report.context.period.endDate, nullFilter, "10604");
                  value.minus(report.AttributeValue("Eq2_1_8"));

                  protocol.PrintBalanceLine("-Eq2_1_8", report.AttributeValue("Eq2_1_8").exactAsString + " руб.");
              else
                  value.clear();
                  protocol.PrintLine("ОПФ кредитной организации - ООО, значение переменной равно нулю.");
              end;
          end;

          SetAttributeValue(value, "Eq3_8");
    end;

    macro Eq3_9()

          AddToProtocolAttributeName("Eq3_9");

          var value = TValue();

          if (report.AttributeValue("EqОсн").exact <= 0)
              value.clear();
              protocol.PrintLine("Переменная EqОсн (\"Основной капитал\") <= 0 значение перменной равно нулю");
          else
              if (parameters.ПрибыльПредшествующегоГодаНеПодтверждена)
                 protocol.PrintLine("Прибыль предшествующего года не подтверждена и дата отчета <= 01.07 текущего года.");
                 protocol.PrintLine("Значение переменной равно нулю.");

                 value.clear();
              else
                  protocol.PrintLine("Прибыль предшествующего года не подтверждена и дата отчета > 01.07 текущего года.");
                  protocol.PrintLine("В расчет входят:");
            
                  value = summarizeBalanceRests(report.context.period.endDate, nullFilter, "70302", "-70402", "-70502");
       
                  if (value.getExact() < $0) 
                      value.clear();
                      protocol.PrintLine("Сумма составляющих < 0, значение переменной равно нулю.");
                  end;
              end;
          end;

          SetAttributeValue(value, "Eq3_9");
    end;

    macro Eq3_10()

          AddToProtocolAttributeName("Eq3_10");

          var obj = КЛицевойСчет;
          var Rez = $0, data, Query, rvp, ExistAccount = FALSE; 
          var mask = "102*, 103*, 104*, 10602*, 10604*, 107*, 613*, 701*, 703*, 31309*, 31409*, 31509*, 31609*, 41107*, 41207*, 41307*, 41407*, 41507*, 41607*, 41707*, 41807*, 41907*, 42007*, 42107*, 42207*, 42507*, 42807*, 42907*, 43007*, 43107*, 43207*, 43307*, 43407*, 43507*, 43607*, 43807*, 43907*, 44007*";

          if (report.AttributeValue("EqОсн").exact <= 0)

              Rez = $0;
              protocol.PrintLine("Переменная EqОсн (\"Основной капитал\") <= 0 значение перменной равно нулю");
          else

               Query = " SELECT acc.t_account, DECODE(acc.t_kind_account, 'А', -1, 1) * rsb_rep_ac.resta(acc.t_account, " + GetSQLDate(report.context.period.endDate) + ", acc.t_chapter, acc.t_r0) rest " + 
                       " FROM daccount_dbt acc" + 
                       " WHERE  acc.t_Open_date <= " + GetSQLDate(report.context.period.endDate) +
                       " AND ((acc.t_Close_Date > " + GetSQLDate(report.context.period.endDate)+ ")" +
                       "     OR(acc.t_Close_Date = " + GetSQLDate(date(0,0,0))+ ")) " + 
                       " AND " + RcbAccountFilter().GetAsSqlString("acc") +
                       " AND INSTR(acc.t_type_account, 'П')=0 " +
                       " AND rsb_rep_ac.resta(acc.t_account, " + GetSQLDate(report.context.period.endDate) + ", acc.t_chapter, acc.t_r0)!=0" +
                       " AND (" + ConvertMaskToSQLFormat(mask, "acc.t_account") + ")"+
                       " AND rsb_rep_ac.CheckObjAttrPresenceByNum(" + OBJTYPE_ACCOUNT + "," 
                                                                      + OBJGROUP_REPORT + "," 
                                                                      + CATEGORY3_10 + "," 
                                                                      +  " rsb_rep_ac.MakeAccountId(acc.t_Account, acc.t_Code_Currency, acc.t_Chapter, NULL), " 
                                                                      + GetSQLDate(report.context.period.endDate) + ")>0" +
                       " UNION " +
                       " SELECT acnt.t_account, rsb_rep_ac.resta(acnt.t_account, " + GetSQLDate(report.context.period.endDate) + ", acnt.t_chapter, acnt.t_r0) rest " + 
                       " FROM daccount$_dbt acnt" + 
                       " WHERE  acnt.t_Open_date <= " + GetSQLDate(report.context.period.endDate) +
                       " AND ((acnt.t_Close_Date > " + GetSQLDate(report.context.period.endDate)+ ")" +
                       "     OR(acnt.t_Close_Date = " + GetSQLDate(date(0,0,0))+ ")) " + 
                       " AND " + RcbAccountFilter().GetAsSqlString("acnt") +
                       " AND rsb_rep_ac.restac(acnt.t_account, acnt.t_code_currency," + GetSQLDate(report.context.period.endDate) + ", acnt.t_chapter, acnt.t_r0)!=0" +
                       " AND (" + ConvertMaskToSQLFormat(mask, "acnt.t_account") + ")"+
                       " AND rsb_rep_ac.CheckObjAttrPresenceByNum(" + OBJTYPE_ACCOUNT + "," 
                                                                      + OBJGROUP_REPORT + "," 
                                                                      + CATEGORY3_10 + "," 
                                                                      +  " rsb_rep_ac.MakeAccountId(acnt.t_Account, acnt.t_Code_Currency, acnt.t_Chapter, NULL), " 
                                                                      + GetSQLDate(report.context.period.endDate) + ")>0";

     
              data = TRsbDataSet(Query);
     
              data.setFieldType("rest", V_MONEY);
 
              while (data.Next())
     
                  Rez = Rez + data.rest;
                  protocol.PrintAccountLine("+" + data.t_account, data.rest + " руб.");
     
                  if (obj.ИнициализацияАльтернативная(data.t_Account, data.t_Code_Currency, data.t_Chapter))

                     rvp = obj.ФактРезервРВП(report.context.period.endDate);
                     Rez = Rez - rvp;
                     protocol.PrintAccountLine("-РВП", rvp + " руб.");

                  end;

                  ExistAccount = TRUE;

              end;

              if (not ExistAccount)
                 protocol.PrintLine("Нет данных для расчета по л/с.");
              end;

         end;

         SetAttributeValue(TValue(Rez), "Eq3_10");
    end;

    macro EqИстДоп()
        AddToProtocolAttributeName("EqИстДоп");

        SetAttributeValue(summarizeAttributeValues("Eq3_1", "Eq3_3", "Eq3_4", "Eq3_5", "Eq3_6",
                                                   "Eq3_7", "Eq3_8", "Eq3_9", "-Eq3_10"), "EqИстДоп");
    end;

    macro EqДоп()

          AddToProtocolAttributeName("EqДоп");

          var value = TValue();

          if (report.AttributeValue("EqОсн").exact <= 0)
              value.clear();
              protocol.PrintLine("Переменная EqОсн (\"Основной капитал\") <= 0 значение перменной равно нулю");
          else
              if (report.AttributeValue("EqОсн").exact <= report.AttributeValue("EqИстДоп").exact)
                  value.plus(report.AttributeValue("EqОсн"));
                  protocol.PrintLine("Переменная EqОсн (\"Основной капитал\") = " + report.AttributeValue("EqОсн").exact + " <= переменной EqИстДоп = " + report.AttributeValue("EqИстДоп").exact + ".");
                  protocol.PrintLine("Значение перменной равно " + report.AttributeValue("EqОсн").exact);
              else
                  value.plus(report.AttributeValue("EqИстДоп"));
                  protocol.PrintLine("Переменная EqОсн (\"Основной капитал\") = " + report.AttributeValue("EqОсн").exact + " >= переменной EqИстДоп = " + report.AttributeValue("EqИстДоп").exact + ".");
                  protocol.PrintLine("Значение перменной равно " + report.AttributeValue("EqИстДоп").exact);
              end;
          end;

          SetAttributeValue(value, "EqДоп");
    end;

    macro Eq4_1()
          SetValueUserVar("Eq4_1");
    end;

    macro Eq4_2()
          SetValueUserVar("Eq4_2");
    end;

    macro Eq4_3()
          SetValueUserVar("Eq4_3");
    end;

    macro Eq4_5()

          AddToProtocolAttributeName("Eq4_5");

          macro СрокПросрочки(account)

                /*ДатаПогашения*/
                var date_paying = readNoteForObject(OBJTYPE_ACCOUNT, UniID(account, OBJTYPE_ACCOUNT),
                                                     NOTEKIND_DATE_PAYING, report.context.period.endDate);
                if (date_paying != NULL) 

                    if (    (date_paying < report.context.period.endDate) 
                        and (restA(account.account, report.context.period.endDate) != $0))

                        return (report.context.period.endDate - date_paying);
                    else
                        return 0;
                    end;

                else        /*Дата начала операции*/             /*Срок в днях до погашения*/
                     if ((account.t_OperationDate != NULL) and (account.t_DaysToEnd != NULL))
                         if (    ((account.t_OperationDate + account.t_DaysToEnd) < report.context.period.endDate) 
                             and (restA(account.account, report.context.period.endDate) != $0))
     
                             return (report.context.period.endDate - (account.t_OperationDate + account.t_DaysToEnd));
                         else
                             return 0;
                         end;

                     else
                         return 0;
                     end;
                end;
          end;

          var obj = КЛицевойСчет;
          var Rez = $0, data, Query, rest, rvp, ExistAccount = FALSE;          
          var MaskLikeA = "474*, 603*";
          var MaskLike  = "61202*"; 
          var MaskNotLike = " 47402*, 47408*, 47423*, 47427*, 60312*, 60314*, 60315*, 60323*, 60337*, 60339*, 60341*, 60343*";
          record account("account.dbt");
          var accountRecord = TRecHandler("account.dbt");
          record accountc("account$.dbt");
          var accountRecordc = TRecHandler("account$.dbt");

          Query = " SELECT acc.*, DECODE(acc.t_kind_account, 'А', -1, 1) t_sign FROM daccount_dbt acc" + 
                  " WHERE  acc.t_Open_date <= " + GetSQLDate(report.context.period.endDate) +
                  " AND ((acc.t_Close_Date > " + GetSQLDate(report.context.period.endDate)+ ")" +
                  "     OR(acc.t_Close_Date = " + GetSQLDate(date(0,0,0))+ ")) " + 
                  " AND " + RcbAccountFilter().GetAsSqlString("acc") +
                  " AND INSTR(acc.t_type_account, 'П')=0 " +
                  " AND rsb_rep_ac.resta(acc.t_account, " + GetSQLDate(report.context.period.endDate) + ", acc.t_chapter, acc.t_r0)!=0" +
                  " AND ("     + ConvertMaskToSQLFormat(MaskLike, "acc.t_account") +     
                  "       OR " + 
                  "         ((" + ConvertMaskToSQLFormat(MaskLikeA, "acc.t_account") + ") AND acc.t_kind_account =  'А' ) "+
                  "      )"+
                  " AND NOT(" + ConvertMaskToSQLFormat(MaskNotLike, "acc.t_account") + ")";
     
          data = TRsbDataSet(Query);
     
          while (data.Next())

              data.GetRecord().CopyTo(accountRecord.rec);
              Copy(account, accountRecord);
     
              if (СрокПросрочки(account) > 30) 

                  rest = restA(data.t_Account, report.context.period.endDate) * data.sign;
                  Rez  = Rez + rest;
                  protocol.PrintAccountLine("+" + data.t_account, rest + " руб.");
         
                  if (obj.ИнициализацияАльтернативная(data.t_Account, data.t_Code_Currency, data.t_Chapter))

                     rvp = obj.ФактРезервРВП(report.context.period.endDate);
                     Rez = Rez - rvp;
                     protocol.PrintAccountLine("-РВП", rvp + " руб.");
         
                  end;
                  ExistAccount = TRUE;
              end;
          end;

          Query = " SELECT acc.*, DECODE(acc.t_kind_account, 'А', -1, 1) t_sign FROM daccount$_dbt acc" + 
                  " WHERE  acc.t_Open_date <= " + GetSQLDate(report.context.period.endDate) +
                  " AND ((acc.t_Close_Date > " + GetSQLDate(report.context.period.endDate)+ ")" +
                  "     OR(acc.t_Close_Date = " + GetSQLDate(date(0,0,0))+ ")) " + 
                  " AND " + RcbAccountFilter().GetAsSqlString("acc") +
                  " AND rsb_rep_ac.restac(acc.t_account, acc.t_code_currency," + GetSQLDate(report.context.period.endDate) + ", acc.t_chapter, acc.t_r0)!=0" +
                  " AND ("     + ConvertMaskToSQLFormat(MaskLike, "acc.t_account") +     
                  "       OR " + 
                  "         ((" + ConvertMaskToSQLFormat(MaskLikeA, "acc.t_account") + ") AND acc.t_kind_account =  'А' ) "+
                  "      )"+

                  " AND NOT(" + ConvertMaskToSQLFormat(MaskNotLike, "acc.t_account") + ")";
     
          data = TRsbDataSet(Query);
     
          while (data.Next())

              data.GetRecord().CopyTo(accountRecordc.rec);
              Copy(accountc, accountRecordc);
     
              if (СрокПросрочки(account) > 30) 

                  rest = restAC(data.t_Account, data.t_code_currency, report.context.period.endDate) * data.sign;
                  Rez  = Rez + rest;
                  protocol.PrintLine("+" + data.t_account, rest + " руб.");
         
                  if (obj.ИнициализацияАльтернативная(data.t_Account, data.t_Code_Currency, data.t_Chapter))

                     rvp = obj.ФактРезервРВП(report.context.period.endDate);
                     Rez = Rez - rvp;
                     protocol.PrintAccountLine("-РВП", rvp + " руб.");
         
                  end;
                  ExistAccount = TRUE;
              end;
          end;

          if (not ExistAccount)
             protocol.PrintLine("Нет данных для расчета по л/с.");
          end;

          SetAttributeValue(TValue(Rez), "Eq4_5");
    end;

    macro Eq4_6()
          AddToProtocolAttributeName("Eq4_6");

          SetAttributeValue(summarizeAccountRests(NULL, СубКредит, "32009*, 32209*"), "Eq4_6");
    end;

    macro EqПром()
        AddToProtocolAttributeName("EqПром");

        SetAttributeValue(summarizeAttributeValues("EqОсн", "EqДоп", "-Eq4_1", "-Eq4_2", "-Eq4_3", "-Eq4_5",
                                                   "-Eq4_6"), "EqПром");
    end;

    macro Eq5_1()
          SetValueUserVar("Eq5_1");
    end;

    macro Eq5_2()
        AddToProtocolAttributeName("Eq5_2");

        var value = TValue(), OC = TValue(), CC = TValue();

        protocol.PrintLine("Вычисляем ОС:");

        /*#111227 по балансовому 60701 не включаются лицевые счета, которые относятся к нематериальным активам.*/
        var filter =  " NOT(account.t_balance = ''60701'' "
                 + "\n" + " AND nvl(rcb_objattr.getobjattr (4, 1,"
                 + "\n" + "   rsb_rep_ac.MakeAccountID(account.t_Account, "
                 + "\n" + "                            account.t_Code_Currency, "
                 + "\n" + "                            account.t_Chapter, "
                 + "\n" + "                            DECODE(INSTR(account.t_type_account, ''П''), 0, NULL, ''X'')), "
                 + "\n" + "   TO_DATE(''" + report.context.period.endDate + "'',''DD.MM.YYYY'') ), chr(0)) = ''НМА'')";

        OC.plus(summarizeBalanceRests(report.context.period.endDate, filter, "60401", "60404", "61002", "61008", "61009", "61011", "60701", "-60601"));

        OC.minus(report.AttributeValue("Eq5_2ввод"));

        protocol.PrintLine("Вычисляем СС:");
        CC.plus(summarizeAttributeValues("EqОсн", "Eq3_3", "Eq3_4", "Eq3_6", "Eq3_7", "Eq3_8", "Eq3_9", "-Eq3_10", "-Eq4_1", "-Eq4_2", "-Eq4_3"));
        CC.plus(summarizeBalanceRests(report.context.period.endDate, nullFilter, "10601"));

        if (CC.getExact() < $0)
            value = OC;
            protocol.PrintLine("Величина ОС < 0 значение перменной равно " + value.getExact());
        elif ((CC.getExact() > $0) and (CC.getExact() < OC.getExact()))
            value.clear();
            value.plus(OC).minus(CC);
            protocol.PrintLine("Величина CC > 0 и CС < OC значение перменной равно " + value.getExact());
        elif (CC.getExact() > OC.getExact())
            value.clear();
            protocol.PrintLine("Величина CС > OC значение перменной равно " + value.getExact());
        end;

        SetAttributeValue(value, "Eq5_2");
    end;

    macro Eq5_2ввод()
        SetValueUserVar("Eq5_2ввод");
    end;

    macro Eq5_3()
        SetValueUserVar("Eq5_3");
    end;

    macro EqК()
        AddToProtocolAttributeName("EqК");

        SetAttributeValue(summarizeAttributeValues("EqПром", "-Eq5_1", "-Eq5_2", "-Eq5_3"), "EqК");
    end;

    macro Calculate(period : RcbPeriod)
   /*Порядок расчета атрибутов менять нельзя, т.к. расчет одних зависит от значения других*/
          Eq2_1_1();
          Eq2_1_2();
          Eq2_1_3();
          Eq2_1_4();
          Eq2_1_6ввод();
          Eq2_1_6();
          Eq2_1_7();
          Eq3_3ввод();
          Eq2_1_5();
          Eq2_1_8();
          Eq2_1_9();
          Eq2_1_10();
          Eq2_1_11();
          EqИстОсн();
          Eq2_2_1();
          Eq2_2_2();
          Eq2_2_3();
          Eq2_2_4();
          Eq2_2_5ввод();
          Eq2_2_5ввод1();
          Eq2_2_5();
          Eq2_2_6ввод();
          Eq2_2_6();
          Eq2_2_7();
          Eq2_2_8();
          EqОсн();
          Eq3_1();
          Eq3_3();
          Eq3_4();
          Eq3_5();
          Eq3_6();
          Eq3_7();
          Eq3_8();
          Eq3_9();
          Eq3_10();
          EqИстДоп();
          EqДоп();
          Eq4_1();
          Eq4_2();
          Eq4_3();
          Eq4_5();
          Eq4_6();
          EqПром();
          Eq5_1();
          Eq5_2ввод();
          Eq5_2();
          Eq5_3();
          EqК();
    end;

    initTCalculatorBase(protocol);
end;

private class (TCalculator) TCalculator1757(report_ : RcbReport, protocol_ : TProtocol, parameters_ : TParameters)

    macro Eq2_1_2()

          AddToProtocolAttributeName("Eq2_1_2");

          if (not parameters.ОПФ_КО_АО)

              if (not report.form.Attribute("Eq2_1_2").isManual)

                  SetAttributeValue(summarizeAccountRests("!", CATEGORY2_1_2искл, "104*, 10208*"), "Eq2_1_2");

              else
                  if (report.AttributeValue("Eq2_1_2").IsUndefined)
                  
                      SetAttributeValue(TValue(), "Eq2_1_2");
                      protocol.PrintLine("Пользовательский ввод. Переменная является константой.");
                  end;
              end;
          else

               protocol.PrintLine("ОПФ кредитной организации - АО, значение переменной равно нулю.");
               SetAttributeValue(TValue(), "Eq2_1_2");
          end;

    end;

    macro Eq3_7()

          AddToProtocolAttributeName("Eq3_7");

          var value = TValue();

          if (report.AttributeValue("EqОсн").exact <= 0)
              value.clear();
              protocol.PrintLine("Переменная EqОсн (\"Основной капитал\") <= 0 значение перменной равно нулю");
          else
              if (parameters.ОПФ_КО_АО)
                  value = summarizeAccountRests(NULL, CATEGORY3_7, "103*, 10207*");
              else
                  value.clear();
                  protocol.PrintLine("ОПФ кредитной организации - ООО, значение переменной равно нулю.");
              end;
          end;

          SetAttributeValue(value, "Eq3_7");
    end;

    initTCalculator(report_, protocol_, parameters_);

end;

private class (TCalculator1757) TCalculator1793(report_ : RcbReport, protocol_ : TProtocol, parameters_ : TParameters)

    macro Eq2_1_1()

        AddToProtocolAttributeName("Eq2_1_1");

        if (parameters.ОПФ_КО_АО)
            if (not report.form.Attribute("Eq2_1_1").isManual)
                SetAttributeValue(summarizeAccountRests("!", CATEGORY2_1_1искл, "10207*"), "Eq2_1_1");
            else
                if (report.AttributeValue("Eq2_1_1").IsUndefined)
                    SetAttributeValue(TValue(), "Eq2_1_1");
                    protocol.PrintLine("Пользовательский ввод. Переменная является константой.");
                end;
            end;
        else
            protocol.PrintLine("ОПФ кредитной организации - ООО, значение переменной равно нулю.");
            SetAttributeValue(TValue(), "Eq2_1_1");
        end;
    end;

    macro Eq2_1_2()

          AddToProtocolAttributeName("Eq2_1_2");

          if (not parameters.ОПФ_КО_АО)

              if (not report.form.Attribute("Eq2_1_2").isManual)

                  SetAttributeValue(summarizeAccountRests("!", CATEGORY2_1_2искл, "10208*"), "Eq2_1_2");

              else
                  if (report.AttributeValue("Eq2_1_2").IsUndefined)
                  
                      SetAttributeValue(TValue(), "Eq2_1_2");
                      protocol.PrintLine("Пользовательский ввод. Переменная является константой.");
                  end;
              end;
          else

               protocol.PrintLine("ОПФ кредитной организации - АО, значение переменной равно нулю.");
               SetAttributeValue(TValue(), "Eq2_1_2");
          end;

    end;

    macro Eq2_2_6()

          AddToProtocolAttributeName("Eq2_2_6");

          macro AccountList(mask)

            var QueryAccount;

                return QueryAccount = " SELECT acc.t_account, acc.t_chapter, acc.t_code_currency, acc.t_client, DECODE(acc.t_kind_account, 'А', -1, 1) * rsb_rep_ac.resta(acc.t_account, " + GetSQLDate(report.context.period.endDate) + ", acc.t_chapter, acc.t_r0) rest " + 
                                      " FROM daccount_dbt acc" + 
                                      " WHERE  acc.t_Open_date <= " + GetSQLDate(report.context.period.endDate) +
                                      " AND ((acc.t_Close_Date > " + GetSQLDate(report.context.period.endDate)+ ")" +
                                      "     OR(acc.t_Close_Date = " + GetSQLDate(date(0,0,0))+ ")) " + 
                                      " AND " + RcbAccountFilter().GetAsSqlString("acc") +
                                      " AND INSTR(acc.t_type_account, 'П')=0 " +
                                      " AND (" + ConvertMaskToSQLFormat(mask, "acc.t_account") + ")" +
                                      " AND rsb_rep_ac.resta(acc.t_account, " + GetSQLDate(report.context.period.endDate) + ", acc.t_chapter, acc.t_r0)!=0" +
                                      " UNION " +
                                      " SELECT acnt.t_account, acnt.t_chapter, acnt.t_code_currency, acnt.t_client, rsb_rep_ac.resta(acnt.t_connect_account, " + GetSQLDate(report.context.period.endDate) + ", acnt.t_connect_chapter, acnt.t_r0) rest "+ 
                                      " FROM daccount$_dbt acnt" + 
                                      " WHERE  acnt.t_Open_date <= " + GetSQLDate(report.context.period.endDate) +
                                      " AND ((acnt.t_Close_Date > " + GetSQLDate(report.context.period.endDate)+ ")" +
                                      "     OR(acnt.t_Close_Date = " + GetSQLDate(date(0,0,0))+ ")) " + 
                                      " AND " + RcbAccountFilter().GetAsSqlString("acnt") +
                                      " AND rsb_rep_ac.restac(acnt.t_account, acnt.t_code_currency," + GetSQLDate(report.context.period.endDate) + ", acnt.t_chapter, acnt.t_r0)!=0" +
                                      " AND (" + ConvertMaskToSQLFormat(mask, "acnt.t_account") + ")";
            
          end;
                
          var Rez = $0, data, ExistAccount = FALSE, rvp;
          var obj = КЛицевойСчет;
          var prt = КСубъект;

          data = TRsbDataSet(AccountList("60101*, 60102*, 60103*, 60104*"));

          data.setFieldType("rest", V_MONEY);

          while (data.Next)
             if (obj.ИнициализацияАльтернативная(data.t_Account, data.t_Code_Currency, data.t_Chapter) 
                and prt.Инициализация(data.t_client))

                if (   obj.ЦельПриобретенияЦб("ИП", report.context.period.endDate) /*инвестиционный портфель*/
                   and (prt.ДоляУК(report.context.period.endDate) > 20))

                   Rez = Rez + data.rest;
                   rvp = obj.ФактРезервРВП(report.context.period.endDate);
                   Rez = Rez - rvp;

                   protocol.PrintAccountLine("+" + data.t_account, data.rest + " руб.");
                   protocol.PrintAccountLine("-РВП", rvp + " руб.");

                   ExistAccount = TRUE;

                end;
             end;
          end;

          data = TRsbDataSet(AccountList("50805*, 50806*, 50807*, 50808*"));
          
          data.setFieldType("rest", V_MONEY);

          while (data.Next)
             if (prt.Инициализация(data.t_client))

                if (prt.Является(RCB_PTK_BANK) and (prt.ДоляУК(report.context.period.endDate) > 20))

                   Rez = Rez + data.rest;
                   rvp = obj.ФактРезервРВП(report.context.period.endDate);
                   Rez = Rez - rvp;

                   protocol.PrintAccountLine("+" + data.t_account, data.rest + " руб.");
                   protocol.PrintAccountLine("-РВП", rvp + " руб.");

                   ExistAccount = TRUE;                   

                end;
             end;
          end;

          data = TRsbDataSet(AccountList("50605*, 50705*, 50706*, 50707*, 50708*, 60203*, 60204*"));

          data.setFieldType("rest", V_MONEY);

          while (data.Next)
             if (obj.ИнициализацияАльтернативная(data.t_Account, data.t_Code_Currency, data.t_Chapter) 
                and prt.Инициализация(data.t_client))

                if (obj.ЦельПриобретенияЦб("ИП", report.context.period.endDate) /*инвестиционный портфель*/
                   and prt.Является(RCB_PTK_SUBSIDIARY) and (prt.ДоляУК(report.context.period.endDate) > 20))

                   Rez = Rez + data.rest;
                   rvp = obj.ФактРезервРВП(report.context.period.endDate);
                   Rez = Rez - rvp;

                   protocol.PrintAccountLine("+" + data.t_account, data.rest + " руб.");
                   protocol.PrintAccountLine("-РВП", rvp + " руб.");

                   ExistAccount = TRUE;

                end;
             end;
          end;

          data = TRsbDataSet(AccountList("60201*"));

          data.setFieldType("rest", V_MONEY);
          
          while (data.Next)

             Rez = Rez + data.rest;
             protocol.PrintAccountLine("+" + data.t_account, data.rest + " руб.");

             if (obj.ИнициализацияАльтернативная(data.t_Account, data.t_Code_Currency, data.t_Chapter))

                 rvp = obj.ФактРезервРВП(report.context.period.endDate);
                 Rez = Rez - rvp;

                 protocol.PrintAccountLine("-РВП", rvp + " руб.");


             end;

             ExistAccount = TRUE;             

          end;

          data = TRsbDataSet(AccountList("60202*"));

          data.setFieldType("rest", V_MONEY);

          record account("account.dbt");
          var    accountRecord = TRecHandler("account.dbt");
          var    hasCategory;

          while (data.Next)

             if (obj.ИнициализацияАльтернативная(data.t_Account, data.t_Code_Currency, data.t_Chapter) 
                and prt.Инициализация(data.t_client));

                data.GetRecord().CopyTo(accountRecord.rec);
                Copy(account, accountRecord);
                
                if (CheckObjAttrPresence(hasCategory, OBJTYPE_ACCOUNT, UniID(account, OBJTYPE_ACCOUNT), OBJGROUP_REPORT, null, "", CATEGORY2_2_6искл) 
                    and not(hasCategory) and prt.Является(RCB_PTK_BANK))
                   Rez = Rez + data.rest;
                   rvp = obj.ФактРезервРВП(report.context.period.endDate);
                   Rez = Rez - rvp;

                   protocol.PrintAccountLine("+" + data.t_account, data.rest + " руб.");
                   protocol.PrintAccountLine("-РВП", rvp + " руб.");

                   ExistAccount = TRUE;                   

                end;
             end;
          end;

          if (not ExistAccount)
             protocol.PrintLine("Нет данных для расчета по л/с.");
          end;

          var value = TValue(Rez);

          value.plus(report.AttributeValue("Eq2_2_6ввод"));

          protocol.PrintAccountLine("+Eq2_2_6ввод", report.AttributeValue("Eq2_2_6ввод").exactAsString + " руб.");

          SetAttributeValue(value, "Eq2_2_6");
    end;

    macro Eq3_5()
    
          AddToProtocolAttributeName("Eq3_5");

          macro СуммаОстаточныхСтоимостейСубКредитов(account, currcode, chapter)

                var obj = КЛицевойСчет, CountDay, CountYear, CountMonth, CountQuart:integer;

                if (obj.ИнициализацияАльтернативная(account, currcode, chapter))

                    CountDay   = obj.ОстатокСрокаДо(report.context.period.endDate);
                    CountMonth = FloatMonths(report.context.period.endDate - CountDay, report.context.period.endDate);
                    CountYear  = CountMonth/12;

                    if (CountDay <= 0)

                       return $0;

                    elif (CountYear > 5) 

                       return (obj.Остаток(report.context.period.endDate, currcode));

                    elif ((CountDay > 0) and (CountYear <= 5))

                       CountQuart = CountMonth/3;/*без дробной части, т.к. integer;*/

                       return (obj.Остаток(report.context.period.endDate, currcode)*CountQuart/20);

                    end;

                else
                    return $0;
                end;
          end;

          var Rez = $0, data, Query, val;
          var mask = "20313*, 20314*, 31309*, 31409*, 31509*, 31609*, 41107*, 41207*, 41307*, 41407*, 41507*, 41607*, " + 
                     "41707*, 41807*, 41907*, 42007*, 42107*, 42207*, 42507*, 42807*, 42907*, 43007*, 43107*, 43207*, " + 
                     "43307*, 43407*, 43507*, 43607*, 43707*, 43807*, 43907*, 44007*, 52006*";

          if (report.AttributeValue("EqОсн").exact <= 0)
  
              Rez = $0;
              protocol.PrintLine("Переменная EqОсн (\"Основной капитал\") <= 0 значение перменной равно нулю");
          else

              Query = " SELECT acc.t_account, acc.t_chapter, acc.t_code_currency FROM daccount_dbt acc" + 
                      " WHERE  acc.t_Open_date <= " + GetSQLDate(report.context.period.endDate) +
                      " AND ((acc.t_Close_Date > " + GetSQLDate(report.context.period.endDate)+ ")" +
                      "     OR(acc.t_Close_Date = " + GetSQLDate(date(0,0,0))+ ")) " + 
                      " AND " + RcbAccountFilter().GetAsSqlString("acc") +
                      " AND INSTR(acc.t_type_account, 'П')=0 " +
                      " AND rsb_rep_ac.resta(acc.t_account, " + GetSQLDate(report.context.period.endDate) + ", acc.t_chapter, acc.t_r0)!=0" +
                      " AND (" + ConvertMaskToSQLFormat(mask, "acc.t_account") + ")"+
                      " AND rsb_rep_ac.CheckObjAttrPresenceByNum(" + OBJTYPE_ACCOUNT + "," 
                                                              + OBJGROUP_REPORT + "," 
                                                              + СубКредит + "," 
                                                              +  " rsb_rep_ac.MakeAccountId(acc.t_Account, acc.t_Code_Currency, acc.t_Chapter, NULL), " 
                                                              + GetSQLDate(report.context.period.endDate) + ")>0" +
                      " UNION " +
                      " SELECT acnt.t_account, acnt.t_chapter, acnt.t_code_currency FROM daccount$_dbt acnt" + 
                      " WHERE  acnt.t_Open_date <= " + GetSQLDate(report.context.period.endDate) +
                      " AND ((acnt.t_Close_Date > " + GetSQLDate(report.context.period.endDate)+ ")" +
                      "     OR(acnt.t_Close_Date = " + GetSQLDate(date(0,0,0))+ ")) " + 
                      " AND " + RcbAccountFilter().GetAsSqlString("acnt") +
                      " AND rsb_rep_ac.restac(acnt.t_account, acnt.t_code_currency," + GetSQLDate(report.context.period.endDate) + ", acnt.t_chapter, acnt.t_r0)!=0" +
                      " AND (" + ConvertMaskToSQLFormat(mask, "acnt.t_account") + ")"+
                      " AND rsb_rep_ac.CheckObjAttrPresenceByNum(" + OBJTYPE_ACCOUNT + "," 
                                                              + OBJGROUP_REPORT + "," 
                                                              + СубКредит + "," 
                                                              +  " rsb_rep_ac.MakeAccountId(acnt.t_Account, acnt.t_Code_Currency, acnt.t_Chapter, NULL), " 
                                                              + GetSQLDate(report.context.period.endDate) + ")>0";

              data = TRsbDataSet(Query);
                   
              while (data.Next())
     
                  Rez = Rez + СуммаОстаточныхСтоимостейСубКредитов(data.t_account, data.t_code_currency, data.t_chapter);
     
              end;

              val = report.AttributeValue("EqОсн").exact/2;

              if (Rez <= val ) 

                   protocol.PrintLine("Вычисленное значение меньше чем 50% величины основного капитала (EqОсн = " + report.AttributeValue("EqОсн").exact + ").");
                   protocol.PrintLine("Значение переменной = " + Rez + ".");
              else

                   Rez = val; 
                   protocol.PrintLine("Вычисленное значение больше либо равно чем 50% величины основного капитала (EqОсн = " + report.AttributeValue("EqОсн").exact + ").");
                   protocol.PrintLine("Значение переменной = 0.5*" + report.AttributeValue("EqОсн").exact + ".");
              end;
     
           end;

           SetAttributeValue(TValue(Rez), "Eq3_5");
    end;

    macro Eq3_7()

          AddToProtocolAttributeName("Eq3_7");

          var value = TValue();

          if (report.AttributeValue("EqОсн").exact <= 0)
              value.clear();
              protocol.PrintLine("Переменная EqОсн (\"Основной капитал\") <= 0 значение перменной равно нулю");
          else
              if (parameters.ОПФ_КО_АО)
                  value = summarizeAccountRests(NULL, CATEGORY3_7, "10207*");
              else
                  value.clear();
                  protocol.PrintLine("ОПФ кредитной организации - ООО, значение переменной равно нулю.");
              end;
          end;

          SetAttributeValue(value, "Eq3_7");
    end;

    macro Eq4_6()

        AddToProtocolAttributeName("Eq4_6");

        SetAttributeValue(summarizeAccountRests(NULL, СубКредит, "32009*, 32209*, 50307*, 50308*"), "Eq4_6");

    end;

    initTCalculator1757(report_, protocol_, parameters_);

end;

/*
 *  Контроллер печати отчета
 */
private class TCalculatorController()

    private var m_report = RcbApplication().currentReport;

    private macro Calculate(parameters : TParameters, protocol : TProtocol)

        if   (ДатаОтчета < RCB_I1757_DATE)
            TCalculator(m_report, protocol, parameters).Calculate(m_report.context.period);
        elif (ДатаОтчета < RCB_I1793_DATE)
            TCalculator1757(m_report, protocol, parameters).Calculate(m_report.context.period);
        elif (ДатаОтчета < RCB_I1881_DATE)
            TCalculator1793(m_report, protocol, parameters).Calculate(m_report.context.period);
        elif (ДатаОтчета < RCB_I2055_DATE)
            TCalculator1881(protocol).calculate();
        elif (ДатаОтчета < RCB_I2133_DATE)
            TCalculator2055(protocol).calculate();
        elif (ДатаОтчета < RCB_I2332_DATE)
            TCalculator2133_2150(protocol).calculate();
        else
            TCalculator2332(protocol).calculate();
        end;
    end;

    private MACRO getNameOper()
          FILE pers (person); /* Справочник операционистов */
          pers.Oper = {oper};
          if (getEQ(pers))
             return trim(pers.Name);
          end;
          return "";
    END;

    macro initializeRepDataPackage(report : RcbReport)
        defaultParm(report, rcbApplication.currentReport);

        sql_truncate("drepdepartment_tmp");

        sql_execute("CALL rep_data.setBalancePlanNumber(" + rcbApplication.parameters.balancePlanNumber + ")");

        /*при добавлении инициализации начальной даты отвалится расчет для переменных Eq2_1_1(Eq2_1_2) и Eq2_1_3(Eq2_1_4)*/
        
        sql_execute("CALL rep_data.setEndDate("   + getSqlDate(report.context.period.endDate)   + ")");

        sql_execute("CALL rep_data.setDepartmentCode(" + getSqlString(rcbDepartmentList.getAsSqlSetFilial()) + ", "
                                                       + getSqlString(rcbDepartmentList.getAsSqlSetVsp()) + ")");
    end;

    macro Execute(parameters : TParameters)
        
        initializeRepDataPackage(m_report);

        var protocol    = TProtocol(m_report);
        global.protocol = protocol;

        protocol.PrintLine("Форма 134. Расчет собственных средств (капитала).");
        protocol.PrintLine("Протокол расчета");
        protocol.PrintLine(" ");
        protocol.PrintLine("   Период отчета  с " + m_report.context.period.beginDate + " по " + m_report.context.period.endDate);
        protocol.PrintLine("   Исполнитель " + getNameOper());
        protocol.PrintLine("   Дата и время выпуска отчета " + date + " " + time);
        protocol.PrintLine(" ");
        protocol.PrintLine("Значения настроек, используемых при расчете:");
        if (ДатаОтчета < RCB_I1881_DATE)
            protocol.PrintLine("   ОПФ_КО_АО              " + string(parameters.ОПФ_КО_АО           ));
        end;
        protocol.PrintLine("   ДатаАудПодтв_ТекГ      " + string(parameters.ДатаАудПодтв_ТекГ   ));
        protocol.PrintLine("   ДатаАуд_ТекГ           " + string(parameters.ДатаАуд_ТекГ        ));
        protocol.PrintLine("   ДатаАудПодтв_ПрошлыйГ  " + string(parameters.ДатаАудПодтв_ПрошлыйГ));
        protocol.PrintLine("   ДатаАуд_ПрошлыйГ       " + string(parameters.ДатаАуд_ПрошлыйГ    ));

        Calculate(parameters, protocol);

        RcbApplication().transactionManager.Commit();

        protocol.PrintLine("");

        protocol.Show();        
    end;
end;

/*
 *  Основная функция
 */
private macro Main()
    TCalculatorController().Execute(TParameters());
    return 0;
end;

/*
 *  Точка входа (и выхода)
 */
Main();
установитьФлагВозврата(OK_MACRO_FLAG);
Exit(1);
