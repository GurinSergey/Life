/* vv
 *  Общебанковские интеры и модули
 */
import RsbDataSet;

import cb_sql;

import globals;/* 29.08.2007 Malakhova 105850*/

/*
 *  Интеры и модели подсистемы
 */
import RcbCoreInter;
import ReptcbInter;
import departmentFilter;
import rcbconst;
/***************************************************************************************************
 *  Блок обработки ошибок
 **************************************************************************************************/

/*
 *  Базовый класс исключений
 */
private class TException(errorMessage : String)
    private var m_errorMessage : String = errorMessage;

    macro what()
        return m_errorMessage;
    end;
end;

/*
 *  Функция-генератор исключений
 */
private macro throw(exception : TException)
    runError(exception.what(), exception);
end;


/***************************************************************************************************
 *  Параметры отчета
 **************************************************************************************************/
private class TParameters(report)
    
    private var m_report = report;

    private var m_currBeginDate = report.context.period.beginDate;
    private var m_currEndDate   = report.context.period.endDate;

    private var m_nextBeginDate = Date(0, 0, 0);
    private var m_nextEndDate   = Date(0, 0, 0);

    private var m_balancePlanNumber = RcbApplication().parameters.balancePlanNumber;


    macro getBeginDate()
        return m_currBeginDate;
    end;

    macro getEndDate()
        return m_currEndDate;
    end;

    macro getCurrBeginDate()
        return m_currBeginDate;
    end;        

    macro getCurrEndDate()
        return m_currEndDate;
    end;

    macro getNextBeginDate()
        return m_nextBeginDate;
    end;

    macro getNextEndDate()
        return m_nextEndDate;
    end;

    macro getBalancePlanNumber()
        return m_balancePlanNumber;
    end;

    macro getReport()
        return m_report;
    end;

    private macro getNextDate(currDate)
        var day   = 0;
        var month = 0;
        var year  = 0;

        dateSplit(currDate, day, month, year);
        if  ((day == 29) and (month == 2))
        	return Date((day-1), month, year + 1);
        else
        	return Date(day, month, year + 1);
        end;
    end;

    m_nextBeginDate = getNextDate(m_currBeginDate);
    m_nextEndDate   = getNextDate(m_currEndDate);
end;

 /***************************************************************************************************
 *  Контроллеры расчета
 **************************************************************************************************/
private class TCalculator(parameters : TParameters)

    private var m_parameters = parameters;

    private macro getQuery()
        var periodKind = RcbApplication().currentReport.context.period.kind;

        var queryText = null;

        queryText =  "SELECT accblnc.t_chapter  AS chapter,"
            + "\n" + "       SUBSTR(accblnc.t_balance" + m_parameters.getBalancePlanNumber() + ", 1, 5) AS balance,"
            + "\n" + "       SUM(DECODE(INSTR(account.t_type_account, 'П'), 0, t_currYearDebet,  0)) currYearDebetRouble,"
            + "\n" + "       SUM(DECODE(INSTR(account.t_type_account, 'П'), 0, 0,  t_currYearDebet)) currYearDebetCover,"
            + "\n" + "       SUM(DECODE(INSTR(account.t_type_account, 'П'), 0, t_currYearCredit, 0)) currYearCreditRouble,"
            + "\n" + "       SUM(DECODE(INSTR(account.t_type_account, 'П'), 0, 0, t_currYearCredit)) currYearCreditCover,"
            + "\n" + "       SUM(DECODE(INSTR(account.t_type_account, 'П'), 0, t_nextYearDebet,  0)) nextYearDebetRouble,"
            + "\n" + "       SUM(DECODE(INSTR(account.t_type_account, 'П'), 0, 0,  t_nextYearDebet)) nextYearDebetCover,"
            + "\n" + "       SUM(DECODE(INSTR(account.t_type_account, 'П'), 0, t_nextYearCredit, 0)) nextYearCreditRouble,"
            + "\n" + "       SUM(DECODE(INSTR(account.t_type_account, 'П'), 0, 0, t_nextYearCredit)) nextYearCreditCover"
            + "\n" + "  FROM (WITH document AS"
            + "\n" + "        ("
            + "\n" + "            SELECT *"
            + "\n" + "              FROM darhdoc_dbt"
            + "\n" + "             WHERE CASE WHEN INSTR(t_typedocument, 'З') > 0 THEN 1 ELSE NULL END = 1";
        if (periodKind != RCB_PK_YEAR)
        queryText = queryText
            + "\n" + "               AND t_date_carry BETWEEN " + getSqlDate(m_parameters.getBeginDate())
            + "\n" + "                                    AND " + getSqlDate(m_parameters.getEndDate());
        end;
        queryText = queryText
            + "\n" + "        )";
        if (periodKind == RCB_PK_YEAR)
        queryText = queryText
            + "\n" + "        SELECT t_chapter AS t_chapter,"
            + "\n" + "               t_account_payer AS t_account,"
            + "\n" + "               SUM(t_sum) AS t_currYearDebet,"
            + "\n" + "               0 AS t_currYearCredit,"
            + "\n" + "               0 AS t_nextYearDebet,"
            + "\n" + "               0 AS t_nextYearCredit"
            + "\n" + "          FROM document"
            + "\n" + "         WHERE t_date_carry BETWEEN " + getSqlDate(m_parameters.getCurrBeginDate())
            + "\n" + "                                AND " + getSqlDate(m_parameters.getCurrEndDate())
            + "\n" + "         GROUP BY t_chapter, t_account_payer"
            + "\n" + "        UNION ALL"
            + "\n" + "        SELECT t_chapter AS t_chapter,"
            + "\n" + "               t_account_receiver AS t_account,"
            + "\n" + "               0 AS t_currYearDebet,"
            + "\n" + "               SUM(t_sum) AS t_currYearCredit,"
            + "\n" + "               0 AS t_nextYearDebet,"
            + "\n" + "               0 AS t_nextYearCredit"
            + "\n" + "          FROM document"
            + "\n" + "         WHERE t_date_carry BETWEEN " + getSqlDate(m_parameters.getCurrBeginDate())
            + "\n" + "                                AND " + getSqlDate(m_parameters.getCurrEndDate())
            + "\n" + "         GROUP BY t_chapter, t_account_receiver"
            + "\n" + "        UNION ALL";
        end;
        queryText = queryText
            + "\n" + "        SELECT t_chapter AS t_chapter,"
            + "\n" + "               t_account_payer AS t_account,"
            + "\n" + "               0 AS t_currYearDebet,"
            + "\n" + "               0 AS t_currYearCredit,"
            + "\n" + "               SUM(t_sum) AS t_nextYearDebet,"
            + "\n" + "               0 AS t_nextYearCredit"
            + "\n" + "          FROM document";
        if (periodKind == RCB_PK_YEAR)
        queryText = queryText
            + "\n" + "         WHERE t_date_carry BETWEEN " + getSqlDate(m_parameters.getNextBeginDate())
            + "\n" + "                                AND " + getSqlDate(m_parameters.getNextEndDate());
        end;
        queryText = queryText
            + "\n" + "         GROUP BY t_chapter, t_account_payer"
            + "\n" + "        UNION ALL"
            + "\n" + "        SELECT t_chapter AS t_chapter,"
            + "\n" + "               t_account_receiver AS t_account,"
            + "\n" + "               0 AS t_currYearDebet,"
            + "\n" + "               0 AS t_currYearCredit,"
            + "\n" + "               0 AS t_nextYearDebet,"
            + "\n" + "               SUM(t_sum) AS t_nextYearCredit"
            + "\n" + "          FROM document";
        if (periodKind == RCB_PK_YEAR)
        queryText = queryText
            + "\n" + "         WHERE t_date_carry BETWEEN " + getSqlDate(m_parameters.getNextBeginDate())
            + "\n" + "                                AND " + getSqlDate(m_parameters.getNextEndDate());
        end;
        queryText = queryText
            + "\n" + "         GROUP BY t_chapter, t_account_receiver) document,"
            + "\n" + "       daccblnc_dbt accblnc,"
            + "\n" + "       daccount_dbt account"
            + "\n" + " WHERE accblnc.t_chapter = document.t_chapter"
            + "\n" + "   AND accblnc.t_account = document.t_account"
            + "\n" + "   AND account.t_chapter = accblnc.t_chapter"
            + "\n" + "   AND account.t_account = accblnc.t_account"
            + "\n" + " GROUP BY accblnc.t_chapter, accblnc.t_balance" + m_parameters.getBalancePlanNumber()
            + "\n" + " ORDER BY chapter, balance";

        return queryText;
    end;

    macro calculate()
        var spodAttributeValue = m_parameters.getReport().attributeValue("БнСПОД_СП");

        /**
         *  Функция рекурсивно создает значения для б/с до уровня главы
         */
        macro createBalanceValue(chapter, balance)

            macro getCompositeValue(root, balance)
                var iterator = root.createValueIterator();

                iterator.moveFirst();
                while (not iterator.isDone())
                    if (iterator.currentItem.fieldValue("balance").exact == balance)
                        return iterator.currentItem;
                    end;

                    iterator.moveNext();
                end;

                var result = root.addValue();
                result.fieldValue("balance").exact = balance;

                return result;
            end;

            const PART_LEVEL_BALANCE = 1;

            var parentCompositeValue = NULL;
            var iterator = NULL;

            if (ПорядокБалансовогоСчета(balance) > PART_LEVEL_BALANCE)
                parentCompositeValue = createBalanceValue(chapter, БалансовыйПредыдущегоПорядка(balance, chapter));
            else
                // Если б/с - раздел, то создаем родительское значение в корне для главы
                parentCompositeValue = getCompositeValue(spodAttributeValue, БалансовыйПредыдущегоПорядка(balance, chapter));
            end;

            return getCompositeValue(parentCompositeValue, balance);
        end;

        spodAttributeValue.removeAllValues();

        rcbApplication.transactionManager.commit();

        var dataSet = TRsbDataSet(getQuery());

        dataSet.setFieldType("currYearDebetRouble",  V_MONEY);
        dataSet.setFieldType("currYearDebetCover",   V_MONEY);
        dataSet.setFieldType("currYearCreditRouble", V_MONEY);
        dataSet.setFieldType("currYearCreditCover",  V_MONEY);
        dataSet.setFieldType("nextYearDebetRouble",  V_MONEY);
        dataSet.setFieldType("nextYearDebetCover",   V_MONEY);
        dataSet.setFieldType("nextYearCreditRouble", V_MONEY);
        dataSet.setFieldType("nextYearCreditCover",  V_MONEY);

        var balanceValue = NULL;

        while (dataSet.moveNext())
            balanceValue = createBalanceValue(dataSet.chapter, dataSet.balance);

            balanceValue.fieldValue("currYearDebetRouble").exact  = dataSet.currYearDebetRouble;
            balanceValue.fieldValue("currYearDebetCover").exact   = dataSet.currYearDebetCover;
            balanceValue.fieldValue("currYearCreditRouble").exact = dataSet.currYearCreditRouble;
            balanceValue.fieldValue("currYearCreditCover").exact  = dataSet.currYearCreditCover;
            balanceValue.fieldValue("nextYearDebetRouble").exact  = dataSet.nextYearDebetRouble;
            balanceValue.fieldValue("nextYearDebetCover").exact   = dataSet.nextYearDebetCover;
            balanceValue.fieldValue("nextYearCreditRouble").exact = dataSet.nextYearCreditRouble;
            balanceValue.fieldValue("nextYearCreditCover").exact  = dataSet.nextYearCreditCover;
        end;
    
    end;

end;

/***************************************************************************************************
 *  Основная функция
 **************************************************************************************************/

private macro main()
    var application = RcbApplication();
    var report      = application.currentReport;

    TCalculator(TParameters(report)).calculate();

    application.transactionManager.commit();

    установитьФлагВозврата(OK_MACRO_FLAG);

    return;
end;

main();
exit(1);