/**
 * Класс TPrintOperation.
 * 
 * @since   09.11.2007
 * @author  Ivkina Olga
 * @version 6.00.004.24
 */

import RcbCoreInter;
import repException;


import CFGlobal;
import CFReport;
import CFOkatoPart;
import CFSymbol;
import CFOkatoCodesBuilder;

/**
 * Класс для фильтров итераторов. 
 */
private class TReportNotEmptyFilter()
    macro isSuitable(value : Object)
        return (     (value.fieldValue("Код ОКАТО").currentAsString == globalInstance().getPart1OkatoCode())
                 and (value.fieldValue("Значение").scaled != $0)
                 and (value.fieldValue("Код символа").isDefined()));
    end;
end;          
/**
 * Класс для фильтров итераторов. 
 */
private class TIssueNotEmptyFilter()
    macro isSuitable(value : Object)
        return (      (value.fieldValue("Код ОКАТО").currentAsString != globalInstance().getPart1OkatoCode())
                  and (value.fieldValue("Код ОКАТО").currentAsString != "Серв.")
                  and (value.fieldValue("Значение").scaled != $0));
    end;
end;  

/**
 * Операция печати отчета.
 */
class TPrintOperation()

    // KS 23.11.2011 Печать в Эксель
    //  m_formFormat = 0 - печать как обычно
    //  m_formFormat = 1 - печать как обычно + Excel
    var m_formFormat : Integer;
    var nmob, nmtlg, obbook, obsheet;
    var m_offsetR;     // Смещение по строкам
    var m_offsetRin;   // Смещение по строкам для прихода
    var m_offsetRout;  // Смещение по строкам для расхода
    var m_offsetC;     // Смещение по столбцам
    var m_offsetChead; // Смещение по столбцам для головного ОКАТО
    var m_headOKATO;   // Головное ОКАТО
    var m_symbolsHead = TArray; // Значения по символам для головного ОКАТО
    var m_Column;      // Колонка, в которую выводим
    var m_okatoPartsSize; // Количество ОКАТО

    /**
     * Целочисленное деление
     */
    private macro div(a,b)
        return int(round(a/b,0));
    end;

    /**
     * Получить имя столбца
     */
    private macro getColumnName(i)
        var acode = codefor("A")+m_offsetC+i;
        if (acode > codefor("Z"))
          return       (
                        StrFor(div(acode-codefor("A"),codefor("Z")-codefor("A"))+codefor("A")-1)
                        +
                        StrFor(mod(acode-codefor("A"),codefor("Z")-codefor("A"))+codefor("A")-1)
                       );
        else
          return StrFor(acode);
        end;
    end;

    /**
     * Получить имя символа
     */
    private macro getSymbolName(symb,i,obSheet)
      var sqlStr;
      var rs;
      sqlStr = "select l.t_name from dlistsymb_dbt l where l.t_symb_cash = lpad('"+symb+"', 3, ' ')";
      rs = RsdRecordset(sqlStr);
      if (rs.movenext)
        return rs.value(0);
      elif (symb == "35")
        obSheet.Range(getColumnName(-2)                +(i+m_offsetR+1)+":"+
                      getColumnName(m_okatoPartsSize+4)+(i+m_offsetR+1)
                     ).Interior.ColorIndex = 43;
        return "Остаток в кассе кредитной организации на начало отчетного месяца";
      elif (symb == "70")
        return "Остаток в кассе кредитной организации на конец отчетного месяца";
      elif (symb == "80")
        return "Поступления наличных денег через банкоматы и платежные терминалы кредитных организаций";
      elif (symb == "81")
        return "Выдачи наличных денег через банкоматы кредитных организаций";
      elif (symb == "02_39")
        m_offsetRin  = i;
        obSheet.Range(getColumnName(-2)                +(i+m_offsetR+1)+":"+
                      getColumnName(m_okatoPartsSize+4)+(i+m_offsetR+1)
                     ).Interior.ColorIndex = 6;
        return "Баланс: итог символов 02 - 39 = итогу символов 40 - 77";
      elif (symb == "40_77")
        m_offsetRout = i;
        obSheet.Range(getColumnName(-2)                +(i+m_offsetR+1)+":"+
                      getColumnName(m_okatoPartsSize+4)+(i+m_offsetR+1)
                     ).Interior.ColorIndex = 6;
        return "Баланс: итог символов 40 - 77 = итогу символов 02 - 39";
      else
        obSheet.Range(getColumnName(-2)                +(i+m_offsetR+1)+":"+
                      getColumnName(m_okatoPartsSize+4)+(i+m_offsetR+1)
                     ).Interior.ColorIndex = 35;
        return "Итого по символам "+strsubst(symb,"_"," - ");
      end;
    end;

    /**
     * Конструктор.
     */
    private macro constructorTPrintOperation()
        // KS 23.11.2011 Печать в Эксель
        var PrintExcel, stat;
        m_formFormat = 0;
        GetRegistryValue("PRBB\\REPTREG\\202\\ПЕЧАТЬ В EXCEL", V_BOOL, PrintExcel, stat );
        if( ( stat == 0 ) and ( PrintExcel ) )
          if (GetTrue(TRUE,"Вывести форму в Эксель?"))
             m_formFormat  = 1;
             m_offsetR     = 2;
             m_offsetC     = 2;
             m_offsetChead = -1;
             nmob = CreateObject ("rsax","TRsAxServer",string("RsAxServer", UserNumber()),IsStandAlone());
             nmtlg = nmob.CreateComObject ("Excel.Application");
             obBook = nmtlg.Workbooks.add;
             obSheet = obBook.ActiveSheet(); 
          end;
        end;
    end;
    
    /**
     * Генерировать имя поля представления по символу.
     * 
     * @param     symbol
     */
    macro generateFieldName(symbol : TSymbol)
        return strSubst(symbol.getCode(), "-", "_");
    end;
    
    /**
     * Напечатать часть отчета по ОКАТО.
     * 
     * @param     okatoPart  часть отчета по ОКАТО
     */
    macro printOkatoPart(okatoPart : TOkatoPart, view : Object)
        var okatoCode : String;
        var getSymbols : String;
        var fieldName : String;
        var symbolsSize : Integer;
        var symbols = TArray;
        var i = 0;

        view.beginOkatoPart(); 
        okatoCode = okatoPart.getOkatoCode();

        if (strLen(okatoCode) < 5)
            okatoCode = strRPad(okatoCode, 5, "0");
        end;

        view.setFieldValue("OKATO", okatoCode);

        symbols = okatoPart.getSymbols();
        symbolsSize = symbols.size;

        while (i < symbolsSize)
            fieldName = generateFieldName(symbols(i));
            view.setFieldValue(fieldName, symbols(i).getValue().current);

            // KS 23.11.2011 Печать в Эксель
            if(m_formFormat == 1)
               if(getColumnName(0) == m_Column) // Символа при первом выводе
                 m_symbolsHead[i] = symbols(i).getValue().current;
                 obSheet.Range(getColumnName(-1)+(i+m_offsetR+1)).Value = Ternary(strlen(fieldName)<4,fieldName,"");
                 obSheet.Range(getColumnName(-2)+(i+m_offsetR+1)).Value = getSymbolName(fieldName,i,obSheet);
                 // ИТОГО
                 obSheet.Range(getColumnName(m_okatoPartsSize+1)+(i+m_offsetR+1)).Value =
                   "=СУММ("+getColumnName(1)               +(i+m_offsetR+1)+":"
                           +getColumnName(m_okatoPartsSize)+(i+m_offsetR+1)+")"; // Значение
                 // TOTAL
                 obSheet.Range(getColumnName(m_okatoPartsSize+2)+(i+m_offsetR+1)).Value =
                   symbols(i).getValue().current; // Значение
                 obSheet.Range(getColumnName(m_okatoPartsSize+3)+(i+m_offsetR+1)).Value =
                   symbols(i).getValue().current; // Значение
                 // Разность
                 obSheet.Range(getColumnName(m_okatoPartsSize+4)+(i+m_offsetR+1)).Value =
                   "="+getColumnName(m_okatoPartsSize+1)+(i+m_offsetR+1)+"-"
                      +getColumnName(m_okatoPartsSize+2)+(i+m_offsetR+1);
                 // Решётка
                 obSheet.Range(getColumnName( -2)+(1)+":"+
                               getColumnName(m_okatoPartsSize+4)+(i+m_offsetR+1)
                             ).Borders(7).LineStyle = 1;
                 // Решётка
                 obSheet.Range(getColumnName( -2)+(1)+":"+
                               getColumnName(m_okatoPartsSize+4)+(i+m_offsetR+1)
                             ).Borders(8).LineStyle = 1;
                 // Решётка
                 obSheet.Range(getColumnName( -2)+(1)+":"+
                               getColumnName(m_okatoPartsSize+4)+(i+m_offsetR+1)
                             ).Borders(9).LineStyle = 1;
                 // Решётка
                 obSheet.Range(getColumnName( -2)+(1)+":"+
                               getColumnName(m_okatoPartsSize+4)+(i+m_offsetR+1)
                             ).Borders(10).LineStyle = 1;
                 // Решётка
                 obSheet.Range(getColumnName( -2)+(1)+":"+
                               getColumnName(m_okatoPartsSize+4)+(i+m_offsetR+1)
                             ).Borders(11).LineStyle = 1;
                 // Решётка
                 obSheet.Range(getColumnName( -2)+(1)+":"+
                               getColumnName(m_okatoPartsSize+4)+(i+m_offsetR+1)
                             ).Borders(12).LineStyle = 1;
               else
                 m_symbolsHead[i] = m_symbolsHead[i] - symbols(i).getValue().current;
               end;

               obSheet.Range(m_Column+(i+m_offsetR+1)).Value = symbols(i).getValue().current; // Значение
            end;

            i = i +1;
        end;

        // KS 23.11.2011 Печать в Эксель
        if(m_formFormat == 1)
           if(getColumnName(0) == m_Column)
             // Выделим жирным свод
             obSheet.Range(getColumnName( 0)+(  m_offsetR-1)+":"+
                           getColumnName( 0)+(i+m_offsetR)
                          ).Font.Bold   = True;
             obSheet.Range(getColumnName( 0)+(  m_offsetR-1)+":"+
                           getColumnName( 0)+(i+m_offsetR)
                          ).Font.Italic = True;
             // голубым свод
             obSheet.Range(getColumnName( 0)+(  m_offsetR-1)+":"+
                           getColumnName( 0)+(i+m_offsetR)
                          ).Interior.ColorIndex = 37;
             // Выделим ИТОГО
             obSheet.Range(getColumnName( m_okatoPartsSize+1)+(  m_offsetR-1)+":"+
                           getColumnName( m_okatoPartsSize+1)+(i+m_offsetR)
                          ).Interior.ColorIndex = 40;
             // Выделим TOTAL
             obSheet.Range(getColumnName( m_okatoPartsSize+3)+(  m_offsetR-1)+":"+
                           getColumnName( m_okatoPartsSize+3)+(i+m_offsetR)
                          ).Interior.ColorIndex = 44;
             // символа по центру
             obSheet.Range(getColumnName(-1)+(  m_offsetR)+":"+
                           getColumnName(-1)+(i+m_offsetR)
                          ).HorizontalAlignment = 3;
           end;
           // Баланс
           obSheet.Range(m_Column+(i+m_offsetR+2)).Value = "="+m_Column+(m_offsetR+m_offsetRin +1)+"-"+
                                                               m_Column+(m_offsetR+m_offsetRout+1);
        end;

        view.endOkatoPart();

    end;

    /**
     * Нет данных в отчете попадающих под фильтр?
     */
    private macro isEmpty(filter)
        var empty : Bool = true;
        var iterator; 
        var i = 0;
        var symbolIterator;

 
        iterator = globalInstance().getRcbReport().attributeValue("Символы").createValueIterator();
        iterator.setFilter(filter);        
        iterator.moveFirst();

        while (empty and (not iterator.isDone()))
            symbolIterator = iterator.currentItem.createValueIterator();
            symbolIterator.setFilter(filter);        
            if (symbolIterator.count() > 0)
                empty = false;
            end;
            iterator.moveNext();
        end;
                  
        return empty;
    end;  
    
    /**
     * Пуст ли отчет?
     */
    private macro isReportEmpty()
        return isEmpty(TReportNotEmptyFilter());
    end;

    /**
     * Пуст ли раздел2?
     */
    private macro isIssue2Empty()
        return isEmpty(TIssueNotEmptyFilter());
    end;

    /**
     * Напечатать тело отчета, который содержит нулевые данные.
     * 
     * @param     report отчет
     * @param     view   представление
     */
    private macro printReportEmpty()
    end;

    /**
     * Напечатать первый раздел отчета.
     * 
     * @param     report отчет
     * @param     view   представление
     */
    private macro printReportIssue1(report : TReport, view : Object)
        var okatoPart;

        view.beginPart1();
        okatoPart = report.getTotalPart();

        // KS 23.11.2011 Печать в Эксель
        if(m_formFormat == 1)
           m_headOKATO = okatoPart.getOkatoCode();
           m_Column = getColumnName(0);
           m_okatoPartsSize = report.getOutsideDomainOkatoParts().size;
           obSheet.Range(m_Column+m_offsetR).Value = okatoPart.getOkatoCode();
        end;

        printOkatoPart(okatoPart, view);
        view.endPart1();
    end;

    /**
     * Напечатать второй раздел отчета.
     * 
     * @param     report отчет
     * @param     view   представление
     */
    private macro printReportIssue2(report : TReport, view : Object)
        var i = 0;
        var okatoParts;
        var okatoPartsSize : Integer;

        view.beginPart2();
        okatoParts = report.getOutsideDomainOkatoParts();
        okatoPartsSize = okatoParts.size;
        
        while (i < okatoPartsSize)

            // KS 23.11.2011 Печать в Эксель
            if(m_formFormat == 1)
               m_Column = getColumnName(i+1);
               obSheet.Range(m_Column+m_offsetR).Value = okatoParts(i).getOkatoCode();
               if ((m_offsetChead == -1) and (okatoParts(i).getOkatoCode() > m_headOKATO))// Запомним головное ОКАТО
                 m_offsetChead = i + 1;
               end;
            end;

            printOkatoPart(okatoParts(i), view);

            i = i + 1;
        end;

        view.endPart2();

        // KS 23.11.2011 Печать в Эксель
        if(m_formFormat == 1)
          // Форматирование
          // Текстовки
          obSheet.Range(getColumnName(-2)+(m_offsetR-1)).Value = "Статьи прихода и расхода";
          obSheet.Range(getColumnName(-2)+(m_offsetR-1)).HorizontalAlignment = 3;
          obSheet.Range(getColumnName(-1)+(m_offsetR-1)).Value = "Символы";
          obSheet.Range(getColumnName( 0)+(m_offsetR-1)).Value = "Сводная";
          obSheet.Range(getColumnName(m_okatoPartsSize+1)+(m_offsetR)).Value = "ИТОГО";
          obSheet.Range(getColumnName(m_okatoPartsSize+2)+(m_offsetR)).Value = "TOTAL";
          // Первый столбец
          obSheet.Range(getColumnName(-2)+":"+getColumnName(-2)).ColumnWidth = 90;
          // Выделим голубым ОКАТО
          obSheet.Range(getColumnName( -2)+(m_offsetR)+":"+
                        getColumnName(i+4)+(m_offsetR)
                       ).Interior.ColorIndex = 37;
          // По головному ОКАТО
          obSheet.Range(getColumnName(m_offsetChead)+("1")).EntireColumn.Insert;
          i = 0;
          obSheet.Range(getColumnName(m_offsetChead)+(m_offsetR)).Value = m_headOKATO;
          while (i < m_symbolsHead.size)
              obSheet.Range(getColumnName(m_offsetChead)+(m_offsetR+i+1)).Value = m_symbolsHead[i];
              i = i + 1;
          end;
          // Пару новых строк
          obSheet.Range(getColumnName(-2)+(m_offsetR+1            )).EntireRow.Insert;
          obSheet.Range(getColumnName(-2)+(m_offsetR+3+m_offsetRin)).EntireRow.Insert;
          obSheet.Range(getColumnName(-2)+(m_offsetR+1            )).Value = "Приход";
          obSheet.Range(getColumnName(-2)+(m_offsetR+3+m_offsetRin)).Value = "Расход";
          // Показать
          nmtlg.visible = true;// KS 23.11.2011 Печать в Эксель
        end;
    end;
 
    /**
     * Напечатать отчет.
     * 
     * @param     report отчет
     * @param     view   представление
     */
    private macro printReport(report : TReport, view : Object)
        var isEmpty : Bool = false;
        var isCalculated : Bool;

        isCalculated = RcbApplication.currentReport.isCalculated();
        
        if (isReportEmpty())
            isEmpty = true;
        end;

        view.setReportWidth(95);

        view.beginReport(isEmpty);

        if (isCalculated == true)
            if (isEmpty)
                printReportEmpty();
            else
                printReportIssue1(report, view);
                if (not isIssue2Empty())
                    printReportIssue2(report, view);
                end;
            end;
        end;
        view.endReport();
    end;

    /**
     * @param     view   представление отчета
     */
    macro execute(view : Object)
        var okatoCodes;
        var report;

        okatoCodes = okatoCodesBuilderInstance().getSortedOkatoCodes();
        report = objectFactoryInstance().createReport(rcbApplication.currentReport, okatoCodes);

        printReport(report, view);
    end; 

    constructorTPrintOperation();
end;