// -------------------------------------------------------------------------------------------------
// @filename: vk_router.mac
// @author  : 2013-08-26 zip_z. 
// @desc    : маршрутизатор на шаг валютного контроля
// @changes : none
// -------------------------------------------------------------------------------------------------

import paymInter;
import lib_sqltools, lib_registry, keycodes, op_lib; //TAM 25.09.2013 R-255374-2

const VK_ROUTE_KIND_ALLOW = 1; // разрешающее правило
const VK_ROUTE_KIND_DENY  = 2; // запрещающее правило

/** действия для правил (используются в панели) **/
const VK_ACTION_ALLOW = "Выполнить шаг ВК";
const VK_ACTION_DENY  = "Запретить шаг ВК";

/** коды для распространенных символов (используются в панели и скроллинге) **/
const CHAR_ANY   = "*";
const CHAR_EMPTY = "";

private const CHAR_UNSET = strfor (0);
private const CHAR_SET   = strfor (88);

/** коды для состояния платежей (внешний, транзитный, невыясненный) - используются в панели **/
const CHAR_YES     = "Y"; // да
const CHAR_NO      = "N"; // нет
const CHAR_UNKNOWN = "0"; // не учитывать

// @desc: класс-контейнер для определения маршрута платежа - всё придумано ради того, чтобы позвать VK_RouteParm::isVkPayment ()
 class VK_RouteParm (pm:RSBPayment)

    // @desc: преобразуем boolean в string явным образом
    private macro convertToDBChar (val:bool):string
        return iif ((val == true), CHAR_SET, CHAR_UNSET);
    end;
    
    // @desc  : проверка существования правила маршрутизации
    // @return: V_BOOL (true, если правило найдено)
    private macro checkRoute (ruleKind:integer):bool
        var sql = " SELECT 1 FROM usr_vk_route_parm WHERE " +
                  " RSI_Rsb_Mask.compareStringWithMask (accountPayer     ,:m_accountPayer     ) = 1 AND" +
                  " RSI_Rsb_Mask.compareStringWithMask (accountReceiver  ,:m_accountReceiver  ) = 1 AND" +
                  " RSI_Rsb_Mask.compareStringWithMask (baseFiidISO      ,:m_baseFiidISO      ) = 1 AND" +
                  " RSI_Rsb_Mask.compareStringWithMask (codeBankPayer    ,:m_codeBankPayer    ) = 1 AND" +
                  " RSI_Rsb_Mask.compareStringWithMask (codeBankReceiver ,:m_codeBankReceiver ) = 1 AND" +
                  " RSI_Rsb_Mask.compareStringWithMask (docKind          ,:m_docKind          ) = 1 AND" +
                  " RSI_Rsb_Mask.compareStringWithMask (docOrigin        ,:m_docOrigin        ) = 1 AND" +
                  " RSI_Rsb_Mask.compareStringWithMask (paymentGround    ,:m_paymentGround    ) = 1 AND" +
                  " isExternal = ANY ('0', :m_is_external) AND isTransit = ANY ('0', :m_is_transit) AND " +
                  " isUnknown  = ANY ('0', :m_is_unknown ) AND Rule_isActive = chr (88) AND Rule_Kind = :m_rule_kind";
        var parm = makeArray (SqlParam ("m_accountPayer"    ,this.accountPayer    ), SqlParam ("m_accountReceiver" ,this.accountReceiver)
                             ,SqlParam ("m_baseFiidISO"     ,this.baseFiidISO     ), SqlParam ("m_codeBankPayer"   ,this.codeBankPayer  )
                             ,SqlParam ("m_codeBankReceiver",this.codeBankReceiver), SqlParam ("m_docKind"         ,this.docKind        )
                             ,SqlParam ("m_docOrigin"       ,this.docOrigin       ), SqlParam ("m_paymentGround"   ,this.paymentGround  )
                             ,SqlParam ("m_is_external"     ,this.isExternal      ), SqlParam ("m_is_transit"      ,this.isTransit      )
                             ,SqlParam ("m_is_unknown"      ,this.isUnknown       ), SqlParam ("m_rule_kind"       ,ruleKind            ));
        sql = execSqlSelect (sql, parm, true);
        return (sql.moveNext ());
    end;
    
    // @desc  : получить ISO-код валюты
    // @return: V_STRING
    private macro getIsoCode (code_currency:integer):string
        if (code_currency == -1) return "XXX"; end;
        
        var sql = "select t_fi_code from dfininstr_dbt where t_fiid = :m_fiid";
        sql = execSqlSelect (sql,makeArray (SqlParam ("m_fiid", code_currency)));
        if (sql.moveNext ())
            return sql.value ("t_fi_code", null, V_STRING);
        end;
    end;
    
    // @desc: пойдёт ли платёж на ВК? Платёж идёт на ВК, если в таблице маршрутизации есть включающая маска и нет исключающей
    // @return: V_BOOL (true, если должен случиться ВК)
    macro isVkPayment ():bool
        return ((not checkRoute (VK_ROUTE_KIND_DENY)) and (checkRoute (VK_ROUTE_KIND_ALLOW)));
    end;
    
    
    macro explainRouteRule (ruleKind:integer):string
        var ret = "";
        var sql = "SELECT decode ( rule_kind, 1, 'VK_ROUTE_KIND_ALLOW', 'VK_ROUTE_KIND_DENY' ) rule_kind, rule_description"
            + "\n" + "FROM usr_vk_route_parm"
            + "\n" + "WHERE RSI_Rsb_Mask.compareStringWithMask ( accountPayer, :m_accountPayer ) = 1"
            + "\n" + "  AND RSI_Rsb_Mask.compareStringWithMask ( accountReceiver, :m_accountReceiver ) = 1"
            + "\n" + "  AND RSI_Rsb_Mask.compareStringWithMask ( baseFiidISO, :m_baseFiidISO ) = 1"
            + "\n" + "  AND RSI_Rsb_Mask.compareStringWithMask ( codeBankPayer, :m_codeBankPayer ) = 1"
            + "\n" + "  AND RSI_Rsb_Mask.compareStringWithMask ( codeBankReceiver, :m_codeBankReceiver ) = 1"
            + "\n" + "  AND RSI_Rsb_Mask.compareStringWithMask ( docKind, :m_docKind ) = 1"
            + "\n" + "  AND RSI_Rsb_Mask.compareStringWithMask ( docOrigin, :m_docOrigin ) = 1"
            + "\n" + "  AND RSI_Rsb_Mask.compareStringWithMask ( paymentGround, :m_paymentGround ) = 1"
            + "\n" + "  AND isExternal = ANY ('0', :m_is_external)"
            + "\n" + "  AND isTransit = ANY ('0', :m_is_transit)"
            + "\n" + "  AND isUnknown = ANY ('0', :m_is_unknown)"
            + "\n" + "  AND Rule_isActive = chr ( 88 )"
            + "\n" + "  AND Rule_Kind = :m_rule_kind";
        var parm = makeArray (SqlParam ("m_accountPayer"    ,this.accountPayer    ), SqlParam ("m_accountReceiver" ,this.accountReceiver)
                             ,SqlParam ("m_baseFiidISO"     ,this.baseFiidISO     ), SqlParam ("m_codeBankPayer"   ,this.codeBankPayer  )
                             ,SqlParam ("m_codeBankReceiver",this.codeBankReceiver), SqlParam ("m_docKind"         ,this.docKind        )
                             ,SqlParam ("m_docOrigin"       ,this.docOrigin       ), SqlParam ("m_paymentGround"   ,this.paymentGround  )
                             ,SqlParam ("m_is_external"     ,this.isExternal      ), SqlParam ("m_is_transit"      ,this.isTransit      )
                             ,SqlParam ("m_is_unknown"      ,this.isUnknown       ), SqlParam ("m_rule_kind"       ,ruleKind            ));
        sql = execSqlSelect (sql, parm, true);
        while (sql.moveNext () )
            ret = ret + "     - " + sql.value ("rule_description") + "\n";
        end;
        if (strlen (ret) == 0)
            ret = "     - правила отсутствуют";
        end;
        return ret;
    end;
    
    // Конструктор здесь. Да, так на RSL тоже можно :)
    var accountPayer     :string  = pm.payerAccount;                                    // счет плательщика
    var accountReceiver  :string  = pm.receiverAccount;                                 // счет получателя
    var baseFiidISO      :string  = getIsoCode (pm.baseFiid);                           // базовая валюта платежа (ISO !)
    var codeBankPayer    :string  = pm.payerBankCode;                                   // код банка плательщика
    var codeBankReceiver :string  = pm.receiverBankCode;                                // код банка получателя
    var docKind          :integer = pm.docKind;                                         // вид документа
    //TAM 25.09.2013 R-255374-2
    var docOrigin        :integer = GetPrimObj(pm).Origin;                              // происхождение документа
    var paymentGround    :string  = pm.ground;                                          // основание платежа
    var isExternal       :string  = convertToDBChar (pm.isExternal);                    // внешний ? "X" = да
    var isTransit        :string  = convertToDBChar (pm.isTransit);                     // транзитный ? "X" = да
    var isUnknown        :string  = convertToDBChar (pm.propStatus == PM_PROP_UNKNOWN); // невыясненный? "X" = да
 end; 
