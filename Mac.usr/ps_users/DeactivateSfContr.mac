/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

   EVG Макрос выполнения процедуры "Деактивация ДО по счетам СКС и др."

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/

import cb_sql, or_rep_h;


 var sql, rs, rs1, {CurDate};

 const FontAdd = "ex_FZ(6):ex_FN(Arial Cyr)"; //"ex_FS(i)";
 const FontBold   = "ex_FS(b)";
 const FontTitle  = "ex_FS(b):ex_FN(Arial):ex_FZ(12)";

 var Table = "┌─────────────────────────────────────────┬──────────────────┬────────────────────┬─────────────┬─────────────────┬────────────────────┬───────────────┐\n"+
             "│ Номер счёта                             │ Номер договора   │ Название договора  │ Дата начала │ Дата заключения │ Привязаны комиссии │ Тарифный план │\n"+
             "├─────────────────────────────────────────┼──────────────────┼────────────────────┼─────────────┼─────────────────┼────────────────────┼───────────────┤";

 var Rep = CMakeReport( Table );
     Rep.GetCurSheet().SetSheetName("Отчёт");



 
 
 
 MACRO MakeReportHeader()

    Rep.AddPrintCell( "Протокол выполнения процедуры деактивации договоров обслуживания", Rep.GetHeaderWidth(), 0, "c:" + FontTitle, REP_ELEM_STR);
    Rep.AddStr();
    Rep.AddEmptyStr();
    Rep.AddEmptyStr();
    Rep.AddEmptyStr();
 
 END;


 MACRO MakeReportLine( {New/Old}, Account, Number, Name, begDate, cncDate, HasComm, PlanNumber, PlanName, Comment )

    var PlanTxt, PlanAlign, HasCommTxt = "Нет", StringLex;
    const AccountLex = ":ex_B(rlt)",
          CurrLex    = ":ex_B(rl)",
          NewLex     = ":ex_B(rlb)";

    if ( HasComm )
       HasCommTxt = "Да";
    end;

    PlanAlign = "l";
    PlanTxt = PlanNumber + " " + PlanName;
    if ( PlanNumber == 0 )
       PlanAlign = "c";
       PlanTxt   = "-";
    end;

    if ( strLen(trim(Number)) == 0 )
       Number = "-";
    end;
    if ( strLen(trim(Name)) == 0 )
       Name = "-";
    end;
    
    if ( begDate == date(0,0,0) )
       begDate = "-";
    end;

    if ( cncDate == date(0,0,0) )
       cncDate = "-";
    end;



    if ( not {New/Old} )
       Rep.AddPrintCell( Account, 0, NULL, "l" + AccountLex );
       Rep.AddPrintCell( "", 0, NULL, "l" + AccountLex );
       Rep.AddPrintCell( "", 0, NULL, "l" + AccountLex );
       Rep.AddPrintCell( "", 0, NULL, "l" + AccountLex );
       Rep.AddPrintCell( "", 0, NULL, "l" + AccountLex );
       Rep.AddPrintCell( "", 0, NULL, "l" + AccountLex );
       Rep.AddPrintCell( "", 0, NULL, "l" + AccountLex );
       Rep.AddStr();
    end;


    if ( {New/Old} )
       StringLex = NewLex;
       Rep.AddPrintCell( "новые параметры: ", 0, NULL, "r" + StringLex );
    else
       StringLex = CurrLex;
       Rep.AddPrintCell( "текущие параметры: ", 0, NULL, "r" + StringLex );
    end;
    
    Rep.AddPrintCell( Number,     0, NULL, "c" + StringLex );
    Rep.AddPrintCell( Name,       0, NULL, "l" + StringLex );
    Rep.AddPrintCell( begDate,    0, NULL, "c" + StringLex );
    Rep.AddPrintCell( cncDate,    0, NULL, "c" + StringLex );
    Rep.AddPrintCell( HasCommTxt, 0, NULL, "c" + StringLex );
    Rep.AddPrintCell( PlanTxt,    0, NULL, PlanAlign + StringLex );
    if ( ValType( Comment ) != V_UNDEF )
       Rep.AddPrintCell( Comment, 100, NULL, "l:ex_B()" );
    end;
    Rep.AddStr();
  
  
 END;





 MACRO GeneralProcedure()
 
   var i = 0, sign = "-", count = 0, clClause;
   var sfcId,
       sfcAccount,
       sfcNumber,
       sfcName,
       sfcDateBegin,
       sfcDateConc,
       sfcHasComm,
       sfcPlanNumber,
       sfcPlanName;
   var ProcessClosed = false,
       Deactivate = false,
       DeactComment;

    
    macro AddComment( comm )

       if ( strLen(DeactComment) > 0 )
          DeactComment = DeactComment + "\n";
       end;
       DeactComment = DeactComment + comm;

    end;
    
    
    GetTrue( Deactivate, "Выполнять деактивацию договоров?\n(нет - только отчёт)" );
    
    GetTrue( ProcessClosed, "Обрабатывать закрытые договора?" );

    clClause = "";
    if ( not ProcessClosed )
       clClause = " AND ( t.t_dateclose = TO_DATE('01.01.0001','dd.mm.rrrr') " +
                  "       or t.t_dateclose > " + GetSQLDate( {CurDate} ) + ") ";
    end;
    
    SQL =      " SELECT   count(0) ";
    SQL = SQL + "  FROM   dsfcontr_dbt t ";
    SQL = SQL + " WHERE   EXISTS ";
    SQL = SQL + "            (SELECT   t_account ";
    SQL = SQL + "               FROM   daccount_dbt ";
    SQL = SQL + "              WHERE     ( INSTR (t_type_account, 'L') > 0 ";      // накопительный
    SQL = SQL + "                       OR INSTR (t_type_account, 'Я') > 0 ";      // специальный
    SQL = SQL + "                       OR INSTR (t_usertypeaccount, '5') > 0  ";  // V6-не взимать РКО
    SQL = SQL + "                       OR INSTR (t_usertypeaccount, 'D') > 0 )";  // СКС
    SQL = SQL + "                      AND t_account = t.t_object ";
    SQL = SQL + "                      AND t_chapter = 1) ";
    SQL = SQL + clClause;
    SQL = SQL + "UNION ALL ";
    SQL = SQL + "SELECT   count(0) ";
    SQL = SQL + "  FROM   dsfcontr_dbt t ";
    SQL = SQL + " WHERE   EXISTS ";
    SQL = SQL + "            (SELECT   t_account ";
    SQL = SQL + "               FROM   daccount$_dbt ";
    SQL = SQL + "              WHERE     ( INSTR (t_type_account, 'Y') > 0  ";     // транзитный
    SQL = SQL + "                       OR INSTR (t_type_account, 'L') > 0  ";     // накопительный
    SQL = SQL + "                       OR INSTR (t_type_account, 'Я') > 0 )";     // специальный
    SQL = SQL + "                      AND t_account = t.t_object ";
    SQL = SQL + "                      AND t_chapter = 1) ";
    SQL = SQL + clClause;
    rs = rsdRecordSet( SQL );
    //msgbox (sql);
    while( rs and rs.moveNext() )
       count = count + rs.Value( 0, null, V_INTEGER );
    end;


    initProgress(count, "Пожалуйста, подождите...", "Договора обслуживания");
    
    SQL =      " SELECT   t_id, t_Object, t_number, t_name, t_datebegin, t_dateconc ";
    SQL = SQL + "  FROM   dsfcontr_dbt t ";
    SQL = SQL + " WHERE   EXISTS ";
    SQL = SQL + "            (SELECT   t_account ";
    SQL = SQL + "               FROM   daccount_dbt ";
    SQL = SQL + "              WHERE     ( INSTR (t_type_account, 'L') > 0 ";      // накопительный
    SQL = SQL + "                       OR INSTR (t_type_account, 'Я') > 0 ";      // специальный
    SQL = SQL + "                       OR INSTR (t_usertypeaccount, '5') > 0  ";  // V6-не взимать РКО
    SQL = SQL + "                       OR INSTR (t_usertypeaccount, 'D') > 0 )";  // СКС
    SQL = SQL + "                      AND t_account = t.t_object ";
    SQL = SQL + "                      AND t_chapter = 1) ";
    SQL = SQL + clClause;
    SQL = SQL + "UNION ALL ";
    SQL = SQL + "SELECT   t_id, t_Object, t_number, t_name, t_datebegin, t_dateconc ";
    SQL = SQL + "  FROM   dsfcontr_dbt t ";
    SQL = SQL + " WHERE   EXISTS ";
    SQL = SQL + "            (SELECT   t_account ";
    SQL = SQL + "               FROM   daccount$_dbt ";
    SQL = SQL + "              WHERE     ( INSTR (t_type_account, 'Y') > 0  ";     // транзитный
    SQL = SQL + "                       OR INSTR (t_type_account, 'L') > 0  ";     // накопительный
    SQL = SQL + "                       OR INSTR (t_type_account, 'Я') > 0 )";     // специальный
    SQL = SQL + "                      AND t_account = t.t_object ";
    SQL = SQL + "                      AND t_chapter = 1) ";
    SQL = SQL + clClause;
    rs = rsdRecordSet( SQL );
    while( rs and rs.moveNext() )

       i = i + 1;
       useProgress( i );

       message ("Пожалуйста, подождите... " + sign);
       if ( sign == "-" )
          sign = "\\";
       elif ( sign == "\\" )
          sign = "|";
       elif ( sign == "|" )
          sign = "/";
       elif ( sign == "/" )
          sign = "-";
       end;

       
       /* Обнуление */
       sfcId = 0; sfcAccount = ""; sfcNumber = ""; sfcName = ""; sfcDateBegin = date(0,0,0); sfcDateConc = date(0,0,0);
       sfcPlanNumber = 0; sfcPlanName = "";

       /* Параметры ДО */
       sfcId        = rs.Value( "t_id",        null, V_INTEGER );
       sfcAccount   = rs.Value( "t_object",    null, V_STRING  );
       sfcNumber    = rs.Value( "t_number",    null, V_STRING  );
       sfcName      = rs.Value( "t_name",      null, V_STRING  );
       sfcDateBegin = SQL_ConvTypeDate( rs.Value( "t_datebegin", null, V_DATE ) );
       sfcDateConc  = SQL_ConvTypeDate( rs.Value( "t_dateconc",  null, V_DATE ) );
        //msgbox (sfcDateConc, "|", valtype(sfcDateConc), " - ", genclassname(sfcDateConc), "|", (sfcDateConc == date(0,0,0)));

       /* Определим, есть ли у договора комиссии */
       sfcHasComm = false;

       SQL =      " SELECT Count(1) FROM dsfconcom_dbt ";
       SQL = SQL + " WHERE t_objecttype = 659 AND t_objectid = " + sfcId;
       rs1 = rsdRecordSet( SQL );
       if ( rs1 and rs1.moveNext() )
          if ( rs1.Value( 0, null, V_INTEGER ) > 0 )
             sfcHasComm = true;
          end;
       end;


       /* Определим тарифный план по договору */
       SQL =      " SELECT NVL(pl.t_Num, 0), NVL(pl.t_Name, '-') ";
       SQL = SQL + "  FROM dsfplan_dbt pl, dsfcontrplan_dbt cpl ";
       SQL = SQL + " WHERE cpl.t_sfcontrid = " + sfcId;
       SQL = SQL + "   AND pl.t_SfPlanId   = cpl.t_SfPlanId ";
       rs1 = rsdRecordSet( SQL );
       if ( rs1 and rs1.moveNext() )
          sfcPlanNumber = rs1.Value( 0, null, V_INTEGER );
          sfcPlanName   = rs1.Value( 1, null, V_STRING );
       end;

       MakeReportLine( false, sfcAccount, sfcNumber, sfcName, sfcDateBegin, sfcDateConc, sfcHasComm, sfcPlanNumber, sfcPlanName );


       /* Действия, выполняемые, когда выбран режим деактивации */
       if ( Deactivate )

          DeactComment = "";


          /* Если не нулевые какие-либо из обнуляемых параметров ДО, обнуляем их */
          if (    (trim(sfcNumber) != "")
               or (trim(sfcName)   != "")
               or (sfcDateBegin    != date(0,0,0))
               or (sfcDateConc     != date(0,0,0))
             )

             SQL =      " UPDATE   dsfcontr_dbt s ";
             SQL = SQL + "   SET   s.t_number  = ' ', ";
             SQL = SQL + "         s.t_name    = ' ', ";
             SQL = SQL + "         t_datebegin = TO_DATE ('01.01.0001', 'dd.mm.yyyy'), ";
             SQL = SQL + "         t_dateconc  = TO_DATE ('01.01.0001', 'dd.mm.yyyy')  ";
             SQL = SQL + " WHERE   t_id = " + sfcId;
             SQL_Execute( SQL );

             sfcNumber = sfcName = "-";
             sfcDateBegin = sfcDateConc = "-";

             AddComment( "Обнулены параметры договора" );
          end;


          /* Удаляем комиссии договора, если они привязаны */
          if ( sfcHasComm )

             SQL =    "   DELETE ";
             SQL = SQL + "  FROM dsfconcom_dbt ";
             SQL = SQL + " WHERE t_objecttype = 659 ";
             SQL = SQL + "   AND t_objectid   = " + sfcId;
             SQL_Execute( SQL );

             sfcHasComm = false;

             AddComment( "Удалены комиссии договора" );
          end;


          /* Убираем тарифный план */
          if ( sfcPlanNumber > 0 )

             SQL = "      UPDATE dsfcontrplan_dbt c ";
             SQL = SQL + "   SET c.t_sfplanid  = 0 ";
             SQL = SQL + " WHERE c.t_sfcontrid = " + sfcId;
             SQL_Execute( SQL );

             sfcPlanNumber = 0; sfcPlanName = "";

             AddComment( "Убран тарифный план" );
          end;

          MakeReportLine( true, sfcAccount, sfcNumber, sfcName, sfcDateBegin, sfcDateConc, sfcHasComm, sfcPlanNumber, sfcPlanName, DeactComment );
       end;

    end;

    /* Вставляем строчку, чтобы нарисовать обрамление снизу таблицы */
    Rep.AddPrintCell( "", 0, NULL, "ex_B(t)" );
    Rep.AddPrintCell( "", 0, NULL, "ex_B(t)" );
    Rep.AddPrintCell( "", 0, NULL, "ex_B(t)" );
    Rep.AddPrintCell( "", 0, NULL, "ex_B(t)" );
    Rep.AddPrintCell( "", 0, NULL, "ex_B(t)" );
    Rep.AddPrintCell( "", 0, NULL, "ex_B(t)" );
    Rep.AddPrintCell( "", 0, NULL, "ex_B(t)" );
    Rep.AddStr();

 END;


 MakeReportHeader();
 GeneralProcedure();

 remProgress();

 Rep.PrintWinRep();
 Rep.SetZoomType( ZOOM_TYPE_A4L );// альбомная ориентация
 Rep.SetWinRepOutput( );
 Rep.ShowWinRep();
 Exit(1);