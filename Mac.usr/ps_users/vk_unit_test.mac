// -------------------------------------------------------------------------------------------------
// @filename: vk_unit_test.mac
// @author  : 2013-08-26 zip_z. 
// @desc    : маршрутизатор на шаг валютного контроля - Unit test
// @changes : none
// -------------------------------------------------------------------------------------------------

import payminter, bankinter, ctinter, globals, lib_sqltools, vk_router;

/*--------------------------------------------------------------------------------------------------
    "../mac.usr/ps_users/naVK.mac"
    "../mac.usr/mac.exv/naVK.mac"
    "../mac.usr/mac.geb/naVK.mac"
    "../mac.usr/mac.life/naVK.mac"
    "../mac.usr/mac.go/naVK.mac"
--------------------------------------------------------------------------------------------------*/

const macro_new = "../mac.usr/DebugMacro/zip_z/naVK.mac";
const macro_old = "../mac.usr/DebugMacro/zip_z/naVK_old.mac";


macro explainRouteForPayment (pid:integer)
    var rt = VK_RouteParm (RSBPayment (pid));
    [
    Запрещающие правила:
    #
    
    Разрешающие правила:
    #
    
    Ответ маршрутизатора:
    #
    ]
    (rt.explainRouteRule (VK_ROUTE_KIND_DENY), rt.explainRouteRule (VK_ROUTE_KIND_ALLOW), rt.isVkPayment ());
end;


// @desc: проверка единичного платежа на соответствие старой (macro_old) и новой (macro_new) реализации 
// documentID - ID платежа
// expected   - ожидаемый результат (0 - не идёт на ВК, !0 - идёт на ВК)
macro checkPayment (documentID:integer, expected:integer)
    var ret = execMacroFile (macro_new, "naVK", RSBPayment (documentID));

    if (ret != expected)
        [############ return = ## expected = ## ] (documentID, ret, expected);
        explainRouteForPayment (documentID);
        println ("-------------------------------------------------------------------------");
        println ("\n\n");
    end;
onError
    [############ runtimeError] (documentID);
end;

// @desc: массовая проверка соответствия старой (macro_old) и новой (macro_new) реализации
macro testOperarion ()
    var dateBegin = {curdate}; getDate (dateBegin, "Дата начала");
    var dateEnd   = {curdate}; getDate (dateEnd, "Дата окончания");
    
    
    var sql = "       SELECT count ( 1 ) OVER (PARTITION BY NULL) n, p.t_dockind" 
            + "\n" + "     , p.t_documentid"  
            + "\n" + "     , nvl ("  
            + "\n" + "             ( SELECT count ( 1 )"  
            + "\n" + "              FROM doprstep_dbt s, doproper_dbt o"  
            + "\n" + "              WHERE S.T_KIND_OPERATION = O.T_KIND_OPERATION"  
            + "\n" + "                AND S.T_ID_OPERATION = O.T_ID_OPERATION"  
            + "\n" + "                AND O.T_DOCKIND = p.t_dockind"  
            + "\n" + "                AND o.t_documentid = lpad ( to_char ( t_paymentid ), 34, '0' )"  
            + "\n" + "                AND S.T_SYMBOL = '7' )"  
            + "\n" + "           , 0"  
            + "\n" + "       )"  
            + "\n" + "           isVk"  
            + "\n" + "FROM dpmpaym_dbt p"  
            + "\n" + "WHERE t_valuedate BETWEEN :m_dateBegin AND :m_dateEnd AND t_dockind IN (201, 202, 16, 27, 320)";
    var param = makeArray (SQLParam ("m_dateBegin", dateBegin), SQLParam ("m_dateEnd", dateEnd));
    sql = execSqlSelect (sql, param, true);
    if (sql.movenext ())
        InitProgress (sql.value ("n", null, V_INTEGER), "Проверка платежей с " + dateBegin + " по " + dateEnd);
        var i = 1;
        UseProgress (i);
        checkPayment (sql.value ("t_documentid", null, V_INTEGER), sql.value ("isVk", null, V_INTEGER));
        while (sql.movenext ())
            i = i + 1;
            UseProgress (i);
            checkPayment (sql.value ("t_documentid", null, V_INTEGER), sql.value ("isVk", null, V_INTEGER));
        end;
        RemProgress ();
    end;
    
end;


// массовый запуск проверки
testOperarion ();


// проверить один платёж
// checkPayment (99894297, 1);

// почему платёж пошёл/не пошёл на ВК ?
// explainRouteForPayment (99894297);