// -------------------------------------------------------------------------------------------------
// @filename: autoKOR_K2_common.mac
// @author  : 19.06.2013 Gurin S. C-12896
// @desc    : Общие функции
// @changes : none
// -------------------------------------------------------------------------------------------------
import RSD, TReport;

// @desc    : Вставка цепочки в документ
// @return  : V_BOOL
macro InsertChain(id, step, blockid, num_step)                                       
    var cmd;
    cmd = RsdCommand(" DECLARE "
                     "   a   NUMBER; "
                     "   b   NUMBER; "
                     " BEGIN "
                     "   :a := RSI_RsbOperation.InsertBranchTrn (b, :id, :step, 'R', :blockid, :num_step, rsbsessiondata.curdate, 0, 0); "
                     " END; ");
    cmd.AddParam("a",        RSDBP_RETVAL, V_INTEGER);
    cmd.AddParam("id",       RSDBP_IN, id);
    cmd.AddParam("step",     RSDBP_IN, step);
    cmd.AddParam("blockid",  RSDBP_IN, blockid);
    cmd.AddParam("num_step", RSDBP_IN, num_step);
    cmd.execute ();

    return (cmd.value("a") == 0);

end;

// @desc    : Проверка счета на наличие претензии вида частичный арест налоговых органов
// @return  : V_BOOL
macro IsAccWithNalogAcclaim(acc)
    var cmd, rs;
    cmd = RsdCommand(" SELECT   1 "
                     "   FROM   dacclaim_dbt claim, dacclaimstate_dbt clst "
                     "  WHERE       claim.t_account = :acc "
                     "          AND claim.t_claimid = clst.t_claimid "
                     "          AND (claim.t_initiator = 1 or claim.t_initiator = 100)"
                     "          AND claim.t_claimkind = 1 "
                     "          AND claim.t_restkind = 2 "
                     "          AND clst.t_state = 1 "
                     "          AND clst.t_stateid = (SELECT   MAX (t_stateid) "
                     "                                  FROM   dacclaimstate_dbt "
                     "                                 WHERE   t_claimid = claim.t_claimid) ");
    cmd.AddParam("acc", RSDBP_IN, acc);
    cmd.execute ();
    rs = RsdRecordset (cmd);

    return (rs and rs.movenext())

end;

// @desc    : Логирование процедуры автоматического списания с КОР и К2.
// @return  : none
macro LogProcedure(id, fromO, fromK2, fromKOR, flag)
    var cmd;
    /*cmd = RsdCommand (" MERGE INTO   usr_auto_k2_kor a "
                     "      USING   (    SELECT   1 FROM DUAL) b "             
                     "         ON   (a.t_id = :id1) "
                     " WHEN MATCHED "
                     " THEN "
                     "    UPDATE SET "
                     "      a.t_fromK2 = DECODE (a.t_fromK2, NULL, :fromK21, a.t_fromK2),"
                     "      a.t_fromKOR = DECODE (a.t_fromKOR, NULL, :fromKOR1, a.t_fromKOR),"
                     "      a.t_fromO = DECODE (a.t_fromO, NULL, :fromO1, a.t_fromO)"
                     " WHEN NOT MATCHED "
                     " THEN "
                     "    INSERT              (a.t_id, a.t_fromK2, a.t_fromKOR, a.t_fromO) "
                     "        VALUES   (:id2, :fromK22, :fromKOR2, :fromO2)" );
    cmd.AddParam("id1",      RSDBP_IN, id);
    cmd.AddParam("fromK21",  RSDBP_IN, fromK2);
    cmd.AddParam("fromKOP1", RSDBP_IN, fromKOR);
    cmd.AddParam("fromO1",   RSDBP_IN, fromO);
    cmd.AddParam("id2",      RSDBP_IN, id);
    cmd.AddParam("fromK22",  RSDBP_IN, fromK2);
    cmd.AddParam("fromKOP2", RSDBP_IN, fromKOR);
    cmd.AddParam("fromO2",   RSDBP_IN, fromO);
    cmd.execute();*/

    cmd = RsdCommand (" INSERT INTO   usr_auto_k2_kor (T_ID, T_FROMO, T_FROMK2, T_FROMKOR, T_FLAG) "
                     "    VALUES   (:id, :fromO, :fromK2, :fromKOR, :flag)" );
    cmd.AddParam("id"     , RSDBP_IN, id);
    cmd.AddParam("fromO"  , RSDBP_IN, fromO);
    cmd.AddParam("fromK2" , RSDBP_IN, fromK2);
    cmd.AddParam("fromKOR", RSDBP_IN, fromKOR);
    cmd.AddParam("flag"   , RSDBP_IN, flag);
    cmd.execute();
end;

// @desc    : Местоположение платежа
// @return  : none
macro NamePaymStep (id)
    var cmd, rs;
    cmd = RsdCommand (" SELECT   LISTAGG (DOPST.T_NAME, ',') WITHIN GROUP (ORDER BY DOPST.T_NAME) stepname "
                      "   FROM   dpmpaym_dbt dpm, doprstep_dbt dstep, doproper_dbt dopr, doprostep_dbt dopst "
                      "  WHERE      DOPR.T_DOCKIND = DPM.T_DOCKIND "
                      "         AND DOPR.T_DOCUMENTID = LPAD (dpm.T_PAYMENTID, 34, '0')"
                      "         AND DOPR.T_ID_OPERATION = DSTEP.T_ID_OPERATION "
                      "         AND DSTEP.T_ISEXECUTE = 'R' "
                      "         AND dpm.t_paymentid = :id "
                      "         AND DOPST.T_BLOCKID = DSTEP.T_BLOCKID "
                      "         AND DOPST.T_NUMBER_STEP = DSTEP.T_NUMBER_STEP ");
    cmd.AddParam("id", RSDBP_IN, id);
    cmd.execute();
    rs = RSDRecordset(cmd);
    if (rs and rs.movenext())
        return rs.value("stepname");
    end;
    return "";
end;

