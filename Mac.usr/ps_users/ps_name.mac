/****************************************************************************/
/*                   R-Style SoftWare Lab, RS-Bank v6.0                     */
/****************************************************************************/
/*                  Подсистема "АРМ-Позиционера"                            */
/*   Сравнение наименований и ИНН из базы и документа                       */
/*                                                                          */
/*  Имя файла: ps_name построен на rmcmptl.mac                              */
/*  Создан:    27.01.04                                     Панов А.Б.      */
/*  Переработан:    10.09.10                                Тихомиров       */
/****************************************************************************/
import PTInter, BankInter, likepy;

/*
  Для отладки\настройки можно раскоментарить строки после //Раскоментарить для отладки
*/

/* //Раскоментарить для отладки
var nnn;
*/
PRIVATE CONST SYMB_QUOTE = "\x22";
PRIVATE CONST SYMB_COMMA = "\x2C";

PRIVATE CONST LatSet   = "AaBbCcEeHKkMmOoPpTuXxYy";
PRIVATE CONST CyrSet   = "ААВЪССЕЕНККМТООРРТИХХУУ";
PRIVATE CONST NumSet   = "0123456789";
PRIVATE CONST ValidSet = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюяЁё";

PRIVATE CONST ПутьКНастройке_ПроверятьИНН              = "COMMON\\НАИМЕНОВАНИЕ ПОЛУЧАТЕЛЯ\\ПРОВЕРЯТЬ ИНН";
PRIVATE CONST ПутьКНастройке_ЗачислитьПриСовпаденииИНН = "COMMON\\НАИМЕНОВАНИЕ ПОЛУЧАТЕЛЯ\\ЗАЧИСЛИТЬ ПРИ СОВПАДЕНИИ ИНН";
PRIVATE CONST ПутьКНастройке_НастрПроверки             = "COMMON\\НАИМЕНОВАНИЕ ПОЛУЧАТЕЛЯ\\НАСТРАИВАЕМЫЕ ПРОВЕРКИ\\";
PRIVATE CONST ПутьКНастройке_ФормыСобственности        = "COMMON\\НАИМЕНОВАНИЕ ПОЛУЧАТЕЛЯ\\ФОРМЫ СОБСТВЕННОСТИ\\";
PRIVATE CONST ПЕРЕМЕННЫЕ          = "ПЕРЕМЕННЫЕ\\";
PRIVATE CONST НАЗВАНИЯ_ФОРМ       = "НАЗВАНИЯ ФОРМ";
PRIVATE CONST НАЗВАНИЯ_ПЕРЕМЕННЫХ = "НАЗВАНИЯ ПЕРЕМЕННЫХ";

PRIVATE VAR CustCompVars  :TArray = TArray();
PRIVATE VAR OwnerFormVars :TArray = TArray();
PRIVATE VAR OwnerFormNames:TArray = TArray();

//----------------------------------------------------------------------------
// Прочитать значение настройки ПРОВЕРЯТЬ ИНН
//----------------------------------------------------------------------------
PRIVATE MACRO NeedCheckINN():bool
  
  var err      :integer = 0;
  var NeedCheck:bool    = 0;
    
  GetRegistryValue( ПутьКНастройке_ПроверятьИНН, V_BOOL, NeedCheck, err );
  if( err )
    return false; // По умолчанию ИНН не проверяется
  end;
  return NeedCheck;

END;

//----------------------------------------------------------------------------
// Прочитать значение настройки ЗАЧИСЛИТЬ ПРИ СОВПАДЕНИИ ИНН
//----------------------------------------------------------------------------
PRIVATE MACRO NeedImpotantINN():bool
  
  var err      :integer = 0;
  var NeedCheck:bool    = 0;
    
  GetRegistryValue( ПутьКНастройке_ЗачислитьПриСовпаденииИНН, V_BOOL, NeedCheck, err );
  if( err )
    return false;
  end;
  return NeedCheck;

END;

//----------------------------------------------------------------------------
// Инициализация переменных
//----------------------------------------------------------------------------
PRIVATE MACRO ИнициализацияПеременных()

  var stat, str;

  CustCompVars.Size = 0;
  GetRegistryValue( string(ПутьКНастройке_НастрПроверки, НАЗВАНИЯ_ПЕРЕМЕННЫХ), V_STRING, str, stat );
  if( not stat )
    CustCompVars = filter( split( str, SYMB_COMMA ) );
  end;

  OwnerFormVars.Size = 0;
  GetRegistryValue( string(ПутьКНастройке_ФормыСобственности, НАЗВАНИЯ_ПЕРЕМЕННЫХ), V_STRING, str, stat);
  if( not stat )
    OwnerFormVars = filter( split( str, SYMB_COMMA ) );
  end;

  OwnerFormNames.Size = 0;
  GetRegistryValue( string(ПутьКНастройке_ФормыСобственности, НАЗВАНИЯ_ФОРМ), V_STRING, str, stat);
  if( not stat )
    OwnerFormNames = filter( split( str, SYMB_COMMA ) );
  end;

END;

//----------------------------------------------------------------------------
// Удалить КПП
//----------------------------------------------------------------------------
PRIVATE MACRO УдалитьКПП( INN:string ):string

  var ind_slash = Index(INN,"/");
  if( ind_slash != 0 ) 
    return SubStr(INN, 1, ind_slash-1); 
  end;
  return INN;

END;

//----------------------------------------------------------------------------
// Сравнить ИНН
//----------------------------------------------------------------------------
PRIVATE MACRO СравнитьИНН( DocINN:string, INNAccountOwner:string ):bool
  
  var DocINNNormal:string = trim( УдалитьКПП(DocINN) );
  var SysINNNormal:string = trim( УдалитьКПП(INNAccountOwner) );
  
  /* //Раскоментарить для отладки
  msgbox("1. Сравнение ИНН",
         "|Нормализованное наим. из документа: ", nnn,
         "|ИНН из документа: ", DocINN,
         "|Норм. ИНН из документа: ", DocINNNormal,
         "|Норм. ИНН эталон: ", SysINNNormal);
*/
  return ( (DocINNNormal == SysINNNormal) OR (string("00", SysINNNormal) == DocINNNormal) );
END;

//----------------------------------------------------------------------------
// ValidateSymb
//----------------------------------------------------------------------------
PRIVATE MACRO ValidateSymb( ch, CharSet )
  var i = 1, chset = "";
  while(i <= strlen(CharSet))
    chset = SubStr(CharSet, i, 1);
    if( ch == chset)
      return TRUE;
    end;
    i = i + 1;
  end;
  return FALSE;
END;

//----------------------------------------------------------------------------
// Замена одинаковых по написанию символов латиницы на кириллицу
//----------------------------------------------------------------------------
PRIVATE MACRO StrChangeLatToCyr(srcStr)
 /* поиск символа в чарсете */
 private macro InCharset(ch, CharSet, n)
   n = index(CharSet, ch);

   if( n > 0 )
     SetParm(2, n);    /* передаем позицию символа в чарсете */
     return TRUE;        /* символ найден в чарсете */
   else
     return FALSE; /* символ не найден в чарсете */
   end;
 end;

 var i, ch, srcLen, dstSetlen, n, dstStr;

  dstStr = "";
  srcLen = strlen(srcStr);
  dstSetlen = strlen(CyrSet);
  n = 0;
  i = 1;

  while(i <= srcLen)
    ch = SubStr(srcStr, i, 1);
    if (InCharset(ch, LatSet, n))
      dstStr = dstStr + SubStr(CyrSet,n,1);
    else
      dstStr = dstStr + ch;
    end;
    i = i + 1;
  end;

  return dstStr;
END;

//----------------------------------------------------------------------------
// Замена невалидных символов пробелом
//----------------------------------------------------------------------------
PRIVATE MACRO StrChangeNotValid(srcStr)
  var i, Len, curSymb, dstStr = "";

  Len = strlen(srcStr);
  i = 1;
  while(i <= Len)
    curSymb = substr(srcStr, i, 1);
    if (ValidateSymb(curSymb, ValidSet) == false)
      dstStr = dstStr + " ";
    else
      dstStr = dstStr + curSymb;
    end;
    i = i+1;
  end;

  return dstStr;
END;

//----------------------------------------------------------------------------
// Исключение лишних пробелов
//----------------------------------------------------------------------------
PRIVATE MACRO DeleteExcessSpaces(srcStr)
  var i, Len, curSymb, dstStr = "";

  srcStr = Trim(srcStr);
  Len = strlen(srcStr);
  i = 1;
  while(i <= Len)
    curSymb = substr(srcStr, i, 1);
    if (curSymb == " ")
      while(substr(srcStr, i, 1) == " ")
        i = i+1;
      end;
      //Seleznev
      //dstStr = dstStr + " ";
      curSymb = substr(srcStr, i, 1);
    end;
    dstStr = dstStr + curSymb;
    i = i+1;
  end;

  dstStr = trim(dstStr);
  return dstStr;
END;

//----------------------------------------------------------------------------
// QSortCmp
//----------------------------------------------------------------------------
PRIVATE MACRO QSortCmp(str1, str2):integer
  if (strlen(str1) > strlen(str2))
    return -1;
  elif (strlen(str1) < strlen(str2))
    return +1;
  end;
  return 0;     
END;

//----------------------------------------------------------------------------
// SearchAndReplaceString
//----------------------------------------------------------------------------
PRIVATE MACRO SearchAndReplaceString(srcStr, Template, iSort)
  var dstStr, i, size, pos, str,
      StrArr = TArray;

  /* Шаблон хранится в виде: "<строка замены>","<поиск 1>","<поиск 2>",...,"<поиск N>" */
  /* Ищем первую лексему - строку замены */
  Template = substr(Template, 2);
  pos = index(Template, SYMB_QUOTE);
  if (not pos)
    return srcStr;/* Ошибка - ничего не заменяем */
  elif (pos == 1)
    str = "";
  elif (pos > 1)
    str = substr(Template, 1, pos-1);
  end;

  /* Ищем остальные лексемы - заменяемые строки */
  i = 0;
  pos = pos+index(substr(Template, pos+1), SYMB_QUOTE)+1;
  while(pos != 0)
    Template = substr(Template, pos);
    pos = index(Template, SYMB_QUOTE);
    if (pos)
      StrArr(i) = substr(Template, 1, pos-1);
      pos = pos+index(substr(Template, pos+1), SYMB_QUOTE)+1;
      i = i+1;
    end;
  end;

  size = StrArr.Size;
  if (size == 0)
    return srcStr; //какая-то ошибка - ничего не меняем
  end;

  if (iSort == true)
    qsort(StrArr, "QSortCmp");
  end;

  dstStr = srcStr;
  i = 0;
  while(i < size)
    dstStr = strsubst(dstStr, StrArr(i), str);
    i = i+1;
  end;

  return dstStr;
END;

//----------------------------------------------------------------------------
// SearchAndReplace
//----------------------------------------------------------------------------
PRIVATE MACRO SearchAndReplace(srcStr, Path, iSort)
  var Template, stat;

  GetRegistryValue(Path, V_STRING, Template, stat);
  if( stat != 0 )
    return srcStr;
  end;

  return SearchAndReplaceString(srcStr, Template, iSort);
END;

//----------------------------------------------------------------------------
// Нормализация строки
//----------------------------------------------------------------------------
PRIVATE MACRO NormalizeName( src:string ):string

  var dst:string = StrChangeLatToCyr(src);
  dst = StrChangeNotValid(dst);
  dst = StrUpr(dst);
  dst = " " + dst;
  dst = SearchAndReplaceString(dst, string(SYMB_QUOTE," ООО ",SYMB_QUOTE,",",SYMB_QUOTE," 000 ",SYMB_QUOTE));
  dst = SearchAndReplaceString(dst, string(SYMB_QUOTE," ЗАО ",SYMB_QUOTE,",",SYMB_QUOTE," 3АО ",SYMB_QUOTE));
  return DeleteExcessSpaces(dst);

END;

//----------------------------------------------------------------------------
// Поиск КПП
//----------------------------------------------------------------------------
PRIVATE MACRO ПоискКПП( src:string, len:integer ):integer
  var pos     :integer = 0, 
      i       :integer = 0,
      slen    :integer = 0, 
      save_pos:integer = 0;

  pos = index(src, "КПП");
  if( pos )
    slen = strlen(src);
    // Проверим мин. длину
    if( (slen-pos+1) < 12 ) // это не КПП - длина меньше минимальной
      return 0;
    end;
    // 9 символов после "КПП" должны быть цифрами
    i = 4;
    while( (i <= 12) and (ValidateSymb(substr(src, pos+i-1, 1), NumSet)) )
      i = i+1;
    end;
    if( i <= 12 ) // это не КПП
      if( (pos+i-1) <= slen ) // строка не кончилась - можно еще поискать
        save_pos = pos+i-1;
        pos = ПоискКПП(substr(src, pos+i-1), len);
        if (pos != 0)
          SetParm(1, len);
          return save_pos+pos-1;
        else
          return 0;
        end;
      else
        return 0;
      end;
    end;
    // ищем окончание КПП
    while( (i <= 17) and ((pos+i-1) <= slen) )
      if (substr(src, pos+i-1, 1) == " ")
        SetParm(1, i-1);
        return pos;
      end;
      
      // это не КПП и строка не кончилась - ищем дальше
      if( ValidateSymb(substr(src, pos+i-1, 1), NumSet) == false )
        save_pos = pos+i-1;
        pos = ПоискКПП(substr(src, pos+i-1), len);
        if (pos != 0)
          SetParm(1, len);
          return save_pos+pos-1;
        else
          return 0;
        end;
      end;
      i = i+1;
    end;
    
    if( (pos+i-1 <= slen) and (substr(src, pos+i-1, 1) != " ") )
      save_pos = pos+i-1;
      pos = ПоискКПП(substr(src, pos+i-1), len);
      if (pos != 0)
        SetParm(1, len);
        return save_pos+pos-1;
      else
        return 0;
      end;
    else
      SetParm(1, i-1);
    end;
  end;
              
  return pos;
END;

//----------------------------------------------------------------------------
// Поиск ИНН
//----------------------------------------------------------------------------
PRIVATE MACRO ПоискИНН( src:string, len:integer ):integer

  var i, slen, save_pos, sym;

  var pos:integer = index(src, "ИНН");
  if( pos )
    slen = strlen(src);
    if( (pos > 1) and (substr(src, pos-1, 1) != " ") ) // это не ИНН
      save_pos = pos;
      pos = ПоискИНН(substr(src, pos+3), len);
      if (pos != 0)
        SetParm(1, len);
        return save_pos+pos+3;
      else
        return 0;
      end;
    end;
      
    sym = substr(src, pos+3, 1);
    if( (sym != " ") and (ValidateSymb(sym, NumSet) == false) ) // это не ИНН
      save_pos = pos;
      pos = ПоискИНН(substr(src, pos+3), len);
      if (pos != 0)
        SetParm(1, len);
        return save_pos+pos+3;
      else
        return 0;
      end;
    end;

    i = 4;
    while( (pos+i-1 <= slen) and 
           (substr(src, pos+i-1, 1) != " ") and 
           (ValidateSymb(substr(src, pos+i-1, 1), NumSet) == true) )
      i = i+1;
    end;

    if( (i == 4) and (substr(src, pos+i-1, 1) == " ") )
      i = i+1;
      while( (pos+i-1 <= slen) and 
             (substr(src, pos+i-1, 1) != " ") and 
             (ValidateSymb(substr(src, pos+i-1, 1), NumSet) == true) )
        i = i+1;
      end;
    end;    
    SetParm(1, i-1);
  end;
              
  return pos;
END;

//----------------------------------------------------------------------------
// Настраиваемые проверки
//----------------------------------------------------------------------------
PRIVATE MACRO НастраиваемыеПроверки( src:string ):string
  var i:integer = 0, 
      dst:string = src;

  while( i < CustCompVars.Size )
    dst = SearchAndReplace(dst, string(ПутьКНастройке_НастрПроверки, ПЕРЕМЕННЫЕ, CustCompVars.Value(i)), true);
    i = i + 1;
  end;

  return dst;
END;

//----------------------------------------------------------------------------
// Подготовка к сравнению
//----------------------------------------------------------------------------
PRIVATE MACRO ПодготовкаКСравнению( src:string ):string
  var dst, pos, len;

  dst = src;

  // Удаляем КПП
  pos = ПоискКПП(dst, len);
  if( pos != 0 )
    dst = substr(dst, 1, pos-1) + substr(dst, pos+len);
  end;
  // Удаляем ИНН
  pos = ПоискИНН(dst, len);
  if (pos != 0)
    dst = substr(dst, 1, pos-1) + substr(dst, pos+len);
  end;

  // Настраиваемые проверки
  dst = НастраиваемыеПроверки(dst);

  // Удалим лишние пробелы
  dst = DeleteExcessSpaces(dst);

  return dst;
END;

//----------------------------------------------------------------------------
// Дополнительное сравнение
//----------------------------------------------------------------------------
PRIVATE MACRO ДополнительноеСравнение( Name:string, DocNameNormal:string ):bool
  var tmp, tmpDocNameNormal;

  var i:integer = 0;
  while( i < OwnerFormVars.Size )
    if( index(Name, OwnerFormVars(i)) != 0 )
      DocNameNormal = SearchAndReplace( DocNameNormal, string(ПутьКНастройке_ФормыСобственности,ПЕРЕМЕННЫЕ,OwnerFormVars.Value(i)), true );
    end;
    i = i + 1;
  end;

  // Удалим лишние пробелы
  DocNameNormal = DeleteExcessSpaces( DocNameNormal );
  tmpDocNameNormal = DocNameNormal;
/* //Раскоментарить для отладки
  msgbox(
          "Дополнительное сравнение 1 с", nnn,
          "|Эталон: ", Name,
          "|Из документа: ", DocNameNormal
        );
*/
  DocNameNormal = StrSubst(DocNameNormal, Name, "");
  if( DocNameNormal == "" )
    return true;
  end;
  DocNameNormal = tmpDocNameNormal;

  // В наименовании (из документа) ищем форму собственности и переставляем в начало строки
  i = 0;
  while( i < OwnerFormNames.Size )
    tmp = StrSubst( DocNameNormal, string(" ", OwnerFormNames.Value(i)), "" );
    if( strlen(tmp) != strlen(DocNameNormal) )
      DocNameNormal = string(OwnerFormNames(i), " ", tmp);
    end;
    i = i + 1;
  end;

  // Удалим лишние пробелы
  DocNameNormal = DeleteExcessSpaces(DocNameNormal);
 
/* //Раскоментарить для отладки
  msgbox(
          "Дополнительное сравнение 2 с", nnn,
          "|Эталон: ", Name,
          "|Из документа: ", DocNameNormal
        );
*/
  // Удалим эталон из тестируемой строки
  DocNameNormal = StrSubst(DocNameNormal, Name, "");

  if( DocNameNormal == "" )
    return true;
  end;

  return false;
END;

//----------------------------------------------------------------------------
// Исключить содержимое скобок
//----------------------------------------------------------------------------
PRIVATE MACRO ИсключитьСодержимоеСкобок( DocName:string ):string
  var StrRes:string = "",
      smb   :string = "";
  var count:integer = 0, 
      i    :integer = 1, 
      len  :integer = strlen(DocName);

  while( i <= len )
    smb = substr(DocName, i, 1);
    if( smb == "(" )
      count = count + 1;
    end;
    if( count == 0 )
      StrRes = StrRes + smb;
    end;
    if( (smb == ")") and (count > 0) )
      count = count - 1;
    end;
    i = i + 1;
  end;

  return StrRes;
END;


private macro PartyAliesList1(partyid)

var arr = tarray();
var rsd, cmd;
cmd = rsdcommand("select * from dparty_dbt where t_partyid = ?");
cmd.addparam("id",RSDBP_IN,partyid);
cmd.execute();
rsd = rsdrecordset(cmd);
 if(rsd.movenext())
  if (rsd.value("t_shortname") != strfor(1))
   arr(arr.size) = rsd.value("t_shortname");
  end;
  if (rsd.value("t_latname") != strfor(1))
   arr(arr.size) = rsd.value("t_latname");
  end;
  if (rsd.value("t_name") != strfor(1))
   arr(arr.size) = rsd.value("t_name");
  end;
  if (rsd.value("t_addname") != strfor(1))
   arr(arr.size) = rsd.value("t_addname");
  end;
 end;
return arr;

end;

//----------------------------------------------------------------------------
// Клиент физ.лицо
//----------------------------------------------------------------------------
PRIVATE MACRO IsEmployer( ClientID:integer ):bool
  PRIVATE FILE persn(persn) key 0;
  persn.PersonID = ClientID;
  if( getEQ(persn) )
    return ( persn.IsEmployer == "X" );
  end;
  return false;
END;

//----------------------------------------------------------------------------
// Счет клиентский
//----------------------------------------------------------------------------
PRIVATE MACRO ЭтоСчетКлиентский( Account:string ):bool
  return PM_FindBalanceInReg_117( "PS\\REQOPENACC\\Счета клиентов", Account, 1 );
END;


//----------------------------------------------------------------------------
// Сравнение наименований получателей
//----------------------------------------------------------------------------
MACRO СравнитьНаименованияPS( DocName, Account, DocINN, AccountFIID, CoincidStr )
  debugbreak;

  var pos          :integer = 0, 
      len          :integer = 0, 
      DocNameNormal:string  = "",
      ИННВладСчета :string  = "",
      СчетФК       :bool    = false,
      ПроверитьИНН :bool    = NeedCheckINN(),
      iNormalized  :bool    = false;

  var fAccount:TBFile;

  if( AccountFIID == 0 )
    fAccount = TBFile( "account.dbt",  "R", 0, "account.dbt",  "bank.def" );
  else
    fAccount = TBFile( "account$.dbt", "R", 0, "account$.dbt", "bank.def" );
  end;
  
  fAccount.rec.Chapter       = 1;
  fAccount.rec.Account       = Account;
  fAccount.rec.Code_Currency = AccountFIID;
  if( fAccount.GetEQ() /*AND (ПолучитьСубъекта( fAccount.rec.Client, pt_cmp ) == 0)*/ )
    ;
  else
    return false; // Счет не найден -> считаем, что проверка не прошла
  end;

  // Получить список наименований владельца счета
  var NamePartyList:TArray = PartyAliesList1( fAccount.rec.Client, IfThenElse(AccountFIID == 0, 0, 1) );

//Добавляем всегда
    NamePartyList.Value( NamePartyList.Size ) = fAccount.rec.NameAccount;
        SetParm(4, fAccount.rec.NameAccount);

  // Инициализация переменных для настраеваемых проверок и дополнительного сравнения
  ИнициализацияПеременных();

  // Выделение счета казначейства
  if( (AccountFIID == 0) AND (substr(Account, 1 ,5) == "40105") )
    СчетФК = true;
    DocName = ИсключитьСодержимоеСкобок( DocName );
  end;
  
  if( ( ПроверитьИНН ) and ( NOT СчетФК) )

    ИННВладСчета = ПолучитьКодСубъекта( fAccount.rec.Client, PTCK_INN );

    if( ValType(DocINN) == V_UNDEF )
      DocINN = "";
    end;

/*  //Раскоментарить для отладки    
    nnn = DocName;
*/    
    if( (DocINN == "") AND (AccountFIID == 0) )
      // В pmrmprop.ReceiverINN пусто или не передали в функцию это значение.
      // Попытаемся достать ИНН из наименования получателя
      DocNameNormal = NormalizeName(DocName);
/*  //Раскоментарить для отладки
      nnn = DocNameNormal;
*/
      iNormalized = true;
      pos = ПоискИНН( DocNameNormal, len );
      if( pos != 0 )
        DocINN = substr( DocNameNormal, pos+3, len-3 );
      end;
    end;

    if( СравнитьИНН( DocINN, ИННВладСчета ) )
      if( NeedImpotantINN() )
//        SetParm(4, DocINN);
        return true;
      end;
    else
      return false;
    end;
  end;

  // Сравнить <DocName> со списком наименований владельца счета <Account>
  var i:integer = find( NamePartyList, DocName );
  if( i != -1 )
    PartyNameFreqIncr( NamePartyList[i], fAccount.rec.Client );
//    SetParm(4, NamePartyList[i]);
    return true;
  end;
  
  if( NOT iNormalized )
    // Нормализовать <DocName>. Далее работать с нормализованным наименованием.
    // Сравнить <DocName> со списком наименований владельца счета <Account>
    DocNameNormal = NormalizeName( DocName );
    i = find( NamePartyList, DocNameNormal );
    if( i != -1 )
      PartyNameFreqIncr(NamePartyList[i], fAccount.rec.Client);
//      SetParm(4, NamePartyList[i]);
      return true;
    end;
  end;

  // Нормализовать каждое из списка наименований владельца счета
  // Сравнить <DocName> со списком наименований владельца счета <Account>
  var NormalNamePartyList:TArray = map(NamePartyList, @NormalizeName);
  i = find( NormalNamePartyList, DocNameNormal );
  if( i != -1 )
    PartyNameFreqIncr(NamePartyList[i], fAccount.rec.Client);
//    SetParm(4, NamePartyList[i]);
    return true;
  end;


  if( AccountFIID == 0 )

    // Подготовить к сравнению <DocName>. 
    DocNameNormal = ПодготовкаКСравнению(DocNameNormal);
    // Сравнить <DocName> со списком наименований владельца счета <Account>
    i = find( NormalNamePartyList, DocNameNormal );
    if( i != -1 )
      PartyNameFreqIncr(NamePartyList[i], fAccount.rec.Client);
//      SetParm(4, NamePartyList[i]);
      return true;
    end;

    // Подготовить к сравнению список наименований владельца счета
    NormalNamePartyList = map(NormalNamePartyList, @ПодготовкаКСравнению);
    // Сравнить <DocName> со списком наименований владельца счета <Account>
    i = find( NormalNamePartyList, DocNameNormal );
    if( i != -1 )
      PartyNameFreqIncr(NamePartyList[i], fAccount.rec.Client);
//      SetParm(4, NamePartyList[i]);
      return true;
    end;

    // Для каждого наименования из списка наименований владельца счета выполнить процедуру дополнительного сравнения
    i = 0;
    while( i < NormalNamePartyList.size )
      if( ДополнительноеСравнение( NormalNamePartyList[i], DocNameNormal ) )
        PartyNameFreqIncr(NamePartyList[i], fAccount.rec.Client);
//        SetParm(4, NamePartyList[i]);
        return true;
      end;
      i = i + 1;
    end;

  end;

  return false;
END;