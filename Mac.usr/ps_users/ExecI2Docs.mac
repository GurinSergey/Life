/*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

   Гуцу Е.В.

   Имя файла: ExecI2Docs.mac

   Создан:    11.04.2016

   Описание:  Процедура погашения картотеки 2

   ChangeLog:
-----------------------------------------------------------------------------------------------------------------------------------------------------
--/--/---- Е.Гуцу 


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
import globals, rsexts, activex, rsd, PaymInter;

const  KEY_F1       = 315,
       KEY_F2       = 316,
       KEY_F3       = 317,
       KEY_F6       = 320,
       KEY_F9       = 323,
       KEY_ESC      = 27,
       KEY_SPACE    = 32,
       KEY_ENTER    = 13;

var nameout = "..\\txtfile\\ExecI2Docs_" + random();
var repDate = {CurDate};

setOutput(nameout);

/* Библиотека диалогов */
var DlgLbrPath, DlgLbrName;
GetRegistryValue( "BANK_INI\\ОБЩИЕ ПАРАМЕТРЫ\\ДИРЕКТОРИИ\\LBRDIR", V_STRING, DlgLbrPath );
DlgLbrName = "ExecI2.lbr";

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//DlgLbrPath = "\\\\172.16.22.180\\C$\\RSB_Exv\\mac.usr\\DebugMacro\\EVG\\" + DlgLbrName;
DlgLbrPath = FindPath(DlgLbrName, DlgLbrPath);

var dlg = tRecHandler( "InpData", DlgLbrPath, true );


// Значения полей диалоговой панели по умолчанию
var DEF_DateBegin    = {CurDate},
    DEF_DateEnd      = {CurDate},
    DEF_ReceiverMasc = "40101*",
    DEF_Priority     = 0;

//DEF_DateBegin = date(25,12,2015);
//DEF_DateEnd   = date(25,12,2015);
//DEF_Priority  = 0;



/* Класс для работы с Excel, заимствован из rep_corschem.mac */
PRIVATE CLASS myExcelReport

  private var myWorkBook;
  private var myWorkExcel;
  private var myWorkSheet;
  var numSheet = 1;

  private var myRecord = null;
 
  var cntRecord = 0;
  var amountRecord = $0.0;

  macro ClearSymble(str, split_char)
      str = StrSubst(str, strfor(13), "" );
      str = StrSubst(str, strfor(10), "" );
      str = StrSubst(str, split_char, " ");
      return string(str);   
  end;

  private macro SetTypeColumns();
      var result_arr = TArray(true), i;
 
      for(i, 1, 4)
        var templs_arr = TArray(true);         
        templs_arr(0) = i;
        templs_arr(1) = 2;
        if( i == 4 )
           templs_arr(1) = 1;
        end;

        result_arr(i - 1) = templs_arr;
      end; 

      return result_arr;
  end;

  private macro GetWorkDirName() : string
      var DirName:string = "", 
          StrErr :string = "";

      GetRegistryValue( "BANK_INI\\ОБЩИЕ ПАРАМЕТРЫ\\ДИРЕКТОРИИ\\TEXTDIR", V_STRING, DirName, StrErr );        
      if( DirName )     
        if( SubStr(DirName, 1, 1) == "." ) DirName = "$" + GetCurDir(TRUE) + strSubst (DirName, "..",""); end;     
        if (existFile(DirName))  return DirName;  end;
      end;

      DirName = "$" + GetEnv("TEMP");

      if( NOT DirName ) DirName = "$" + GetEnv("TMP"); end;
      if (existFile(DirName)) return DirName; end;

      msgbox("Ошибка поиска папки для временных файлов на терминале");

      return "";
  end;

  private macro myCopyFile (Name_file)
      var Templs_Dir_Term = GetWorkDirName();

      var TermFileName = toAnsi(Name_file);
      var SPFileName;

      if ( Templs_Dir_Term == "" )  return "";  end;
      SPFileName = "..\\txtfile\\" + Name_file; 

      if (not existFile(SPFileName)) MsgBox(string("Транспортный временный файл не найден: |", SPFileName)); return ""; end;
      if( not CopyFile(SPFileName, Templs_Dir_Term + "\\" + TermFileName) ) RunError("Ошибка при передаче файла на терминал\n" + Templs_Dir_Term + "\\" + TermFileName); end;

      return subStr(Templs_Dir_Term + "\\" + TermFileName, 2);      
  end;

  private macro OpenExcel()
      private var objectXls, WorkExcel;

      objectXls = CreateObject ("rsax", "TRsAxServer", string("RsAxServer", UserNumber()), IsStandAlone());
      WorkExcel = objectXls.CreateComObject ("Excel.Application"); 

      myWorkExcel = WorkExcel;

      return true;

  OnError(er)
      msgbox(er.Message); 
      return false;
  end;

  private macro SetHeaderExcelTable()
      var i; 
      myWorkBook.Sheets(numSheet);
      myWorkSheet = myWorkBook.ActiveSheet();

      myWorkSheet.Cells(1, 1).Value  = "Протокол процедуры оплаты документов картотеки 2 \n" + 
                                       "период с " + dlg.rec.fBegDate + " по " + dlg.rec.fEndDate;
      myWorkSheet.Cells(1, 1).HorizontalAlignment = 3;
      myWorkSheet.Cells(1, 1).VerticalAlignment = 2;

      myWorkSheet.Range("A1:M1").merge;
      myWorkSheet.Rows("1:1").RowHeight = 40;
      myWorkSheet.Range("A1:M1").font.size = 13;

      myWorkSheet.Cells(3, 1).Value   = "№ п/п";
      myWorkSheet.Cells(3, 2).Value   = "Номер";
      myWorkSheet.Cells(3, 3).Value   = "Дата платежа";
      myWorkSheet.Cells(3, 4).Value   = "Счет плательщика";
      myWorkSheet.Cells(3, 5).Value   = "Счет получателя";
      myWorkSheet.Cells(3, 6).Value   = "Сумма платежа";
      myWorkSheet.Cells(3, 7).Value   = "Сумма оплаты";
      myWorkSheet.Cells(3, 8).Value   = "Неоплаченный остаток";
      myWorkSheet.Cells(3, 9).Value   = "Очередность";
      myWorkSheet.Cells(3, 10).Value  = "Наименование плательщика";
      myWorkSheet.Cells(3, 11).Value  = "Происхождение";
      myWorkSheet.Cells(3, 12).Value  = "Результат обработки";
      myWorkSheet.Cells(3, 13).Value  = "Состояние платежа / Комментарий";

      for (i, 1, 13)
        myWorkSheet.Cells(3, i).HorizontalAlignment = 3;
        myWorkSheet.Cells(3, i).Font.Bold = true; 

        if( ( i != 10 ) and ( i != 13 ) )
           myWorkSheet.Columns(i).EntireColumn.AutoFit;
        else
           myWorkSheet.Columns(i).ColumnWidth = 50;
           myWorkSheet.Columns(i).WrapText = true;
        end;
      end;

      //myWorkSheet.Range("A" + (cntRecord + 3) + ":D" + (cntRecord + 3)).Font.Bold = true; 
      myWorkSheet.Range("A3:M" + (cntRecord+3) ).Borders.Weight = 2;  
      myWorkSheet.Range("A3:M3").Interior.Color = #B5B5B5; 

      myWorkSheet.Columns(6).HorizontalAlignment = 4;

      myWorkSheet.columns(4).Entirecolumn.NumberFormat = "@";
      myWorkSheet.columns(5).Entirecolumn.NumberFormat = "@";
      myWorkSheet.columns(6).Entirecolumn.NumberFormat = "# ##0,00р.";
      myWorkSheet.columns(7).Entirecolumn.NumberFormat = "# ##0,00р.";
      myWorkSheet.columns(8).Entirecolumn.NumberFormat = "# ##0,00р.";

      return true;

   OnError
       return false;
   end;     

   macro CopyValueToExcel(myFileName)
       initprogress(-1, "", "Подготовка файла Excel");
       myFileName = myCopyFile(myFileName); 

       if ( OpenExcel() and  myFileName != "")      
        
         myWorkExcel.Workbooks.OpenText (myFileName, 866, 1, 1, 2, false, false, false, false, false, true, ";", SetTypeColumns(), 1, "."," ", true, false);
         myWorkBook = myWorkExcel.Workbooks.Application;

         SetHeaderExcelTable();

         remprogress;
         //MsgBox("Файл успешно записан");
         myWorkExcel.Visible = true;

         var wb = myWorkExcel.Workbooks.item(1);
         //wb.SaveAs( myFileName, 56 );         // xls
         wb.SaveAs( myFileName, 51 );           // xlsx

       end;                
   OnError(er)
       msgBox(er.Message);
   end;     

END;


/* Формирование рекордсета / подсчёт записей */
MACRO CriarRecordSet( isCount )

  var sql, cmd, rs;
  var SelectClause, RecCount;
  var vAccMasc = ConvertMaskToSQLFormat( dlg.rec.fReceiverMasc, "pm.t_receiveraccount" );
  var vPriorityClause = "";


  if( dlg.rec.fPriority )
     vPriorityClause = " AND rm.t_priority = ? ";
  end;

  RecCount = 0;

  SelectClause = " SELECT pm.t_dockind, pm.t_documentid, pm.t_payeraccount, pm.t_receiveraccount,    "+
                 "        pm.t_amount, pm.t_valuedate, rm.t_number, rm.t_priority, pm.t_fiid,        "+
                 "        rm.t_payername,                                                            "+
                 "        DECODE( pm.t_DocKind, 201,                                                 "+
                 "                PM_SCRHLP.GetPSPayOrderOriginName( ord.t_Origin ),                 "+
                 "                PM_SCRHLP.GetLLValuesCode( 1674, pm.t_PrimDocOrigin ) ) t_origin   "+
                 "   FROM dpmpaym_dbt pm, dpmrmprop_dbt rm, dpspayord_dbt ord                        "+
                 "  WHERE rm.t_paymentid  = pm.t_paymentid                                           "+
                 "    AND ord.t_orderid   = pm.t_paymentid                                           "+
                 "    AND pm.t_paymstatus = 2000                                                     "+
                 "    AND pm.t_valuedate between ? and ?                                             "+
                 "    AND "+ ConvertMaskToSQLFormat( dlg.rec.fReceiverMasc, "pm.t_receiveraccount" )  +
                 vPriorityClause +
                 // !!!!!!!!!
                 //"    AND pm.t_payeraccount = '40802810700000053527' "+
                 "  ORDER BY pm.t_valuedate, pm.t_payeraccount, rm.t_priority                        ";
        
  sql = SelectClause;
  if( isCount )
     sql = " SELECT count(0) FROM ( " + SelectClause + " ) ";
  end;

  cmd = rsdCommand( sql );
  cmd.addParam( "", RSDBP_IN, dlg.rec.fBegDate  );
  cmd.addParam( "", RSDBP_IN, dlg.rec.fEndDate  );
  if( dlg.rec.fPriority )
     cmd.addParam( "", RSDBP_IN, dlg.rec.fPriority );
  end;
  rs = rsdRecordSet( cmd );

  if( not isCount )
     return rs;
  end;

  if( rs and rs.moveNext() )
     RecCount = rs.value( 0, null, V_INTEGER );
  end;

  return RecCount;

END;


MACRO CalculatePayments()

  var vCount = CriarRecordSet( true );
  msgbox( "Количество платежей к обработке: " + vCount );

END;

/*
/* Проверка наличия счёта в массиве */
MACRO VerifiqueMatriz( pAccount )
  var n = 0;

  while( n < IwpAccountsArray.Size )

     if( IwpAccountsArray( n ) == pAccount )
        return true;
     end;
     n = n + 1;

  end;

  return false;
END;
*/


MACRO EventHandler( _dlg, cmd, id, key )
  var st;

  if ( cmd == DLG_INIT )

      dlg.rec.fBegDate      = DEF_DateBegin;
      dlg.rec.fEndDate      = DEF_DateEnd;
      dlg.rec.fReceiverMasc = DEF_ReceiverMasc;
      dlg.rec.fPriority     = DEF_Priority;

      UpdateFields(_dlg);
      message ("~Esc~ - Выход ~F2~ - Выполнить ~F6~ - Посчитать платежи");

  elif( cmd == DLG_KEY ) //Проверки на нажатие клавиш

     if (KEY == KEY_ESC)
        //return CM_CANCEL;
        exit(1);

     elif( key == KEY_ENTER )

        /* При нажатии Enter в последнем поле не закрывать окно */
        if (id == dlg.fldNumber()-1)
           SetFocus(dlg, 0);
           return CM_IGNORE;
        end;

     elif( key == KEY_F2 )

        return CM_SAVE;

     elif( key == KEY_F6 )

        CalculatePayments();
        return CM_IGNORE;

     end;

  end;
  return CM_DEFAULT;
END;



MACRO MainProcedureExecute( pFileName )

  var sql, cmd, rs, rs1;

  var my_report = myExcelReport();
  var separator = ";", i = 1, amount = $0.0, text = "", vCount, ind = 1;
  var rpNumber, rpDate, rpAccPayer, rpAccReceiver, prPayerName, rpAmount, rpPriority, rpOrigin, rpResult, rpProcAmount, rpAmountRest, rpPaymState;
  var prcDocKind, prcPaymentId, prcAccPayer, prcPayerFiid, prcFreeAmount;
  var DlgFlag, stat;
  var stpState, stpName;

  if( RunDialog(dlg, "EventHandler") )


     /* Протокол начинаем с 3 строки */
     println(separator);println(separator);println(separator);

     
     vCount = CriarRecordSet( true );

     initprogress( vCount, "Выполнение процедуры...", "Обрабатываем платежи" );

     rs = CriarRecordSet( false );
     while( rs and rs.moveNext() )

        prcDocKind    = rs.value( "t_dockind",      NULL, V_INTEGER );
        prcPaymentId  = rs.value( "t_documentid",   NULL, V_INTEGER );
        prcPayerFiid  = rs.value( "t_fiid",         NULL, V_INTEGER );
        prcAccPayer   = rs.value( "t_payeraccount", NULL, V_STRING  );

        rpNumber      = rs.value( "t_number",    NULL, V_STRING  );
        rpDate        = rs.value( "t_valuedate", NULL, V_DATE    );
        rpAmount      = rs.value( "t_amount",    NULL, V_MONEY   );
        prPayerName   = rs.value( "t_payername", NULL, V_STRING  );
        rpPriority    = rs.value( "t_priority",  NULL, V_INTEGER );
        rpOrigin      = rs.value( "t_origin",    NULL, V_STRING  );

        rpAccPayer    = string(rs.value( "t_payeraccount",    NULL, V_STRING  ):f);
        rpAccReceiver = string(rs.value( "t_receiveraccount", NULL, V_STRING  ):f);


        // Свободный остаток
        AccGetFreeAmount( prcFreeAmount, null, prcAccPayer, 1/*CHAPT1*/, prcPayerFiid, rpDate, rpPriority, 0 );

        if( prcFreeAmount > $0 )

           DlgFlag = setDialogFlag( 0 );
           stat    = PM_ExecuteOperation( prcPaymentId, prcDocKind );
           setDialogFlag( DlgFlag );

           if( stat ) 

              var vIsPartPayment = false;

              // Сумма оплаты
              if( prcFreeAmount > rpAmount )
                 rpProcAmount = rpAmount;
              else
                 rpProcAmount = prcFreeAmount;
                 vIsPartPayment = true;
              end;

              // Остаток суммы документа
              rpAmountRest = rpAmount - prcFreeAmount;
              if( rpAmountRest < $0 )
                 rpAmountRest = $0;
              end;

              rpResult = "Успешно";


              /* Не надо, пока в каммент
              // В случае частичной оплаты, мы должны найти и толкнуть сформированный платёж
              if( vIsPartPayment )

                 cmd = rsdCommand( " Select sd.t_name, st.t_isexecute       
                                   "   From doproper_dbt op, doprdosc_dbt od
                                   "  Where op.t_dockind      = ?
                                   "    and op.t_documentid   = lpad( ?, 34, '0' )
                                   "    and od.t_id_operation = op.t_id_operation
                                   "    and 
              end;
              */


              // Определим, на каком шаге остановился платёж
              stpName = ""; stpState = "";
              cmd = rsdCommand( " Select sd.t_name, st.t_isexecute                                               "
                                "   From doproper_dbt op, doprstep_dbt st, doprostep_dbt sd                      "
                                "  Where op.t_dockind      = ?                                                   "
                                "    and op.t_documentid   = lpad( ?, 34, '0' )                                  "
                                "    and st.t_id_operation = op.t_id_operation                                   "
                                "    and st.t_id_step      = ( Select max( st1.t_id_step ) From doprstep_dbt st1 "
                                "                               Where st1.t_id_operation = st.t_id_operation     "
                                "                                 and st1.t_isexecute in( 'X', 'R' ) )           "
                                "    and sd.t_blockid      = st.t_blockid                                        "
                                "    and sd.t_number_step  = st.t_number_step                                    " );
              cmd.AddParam( "", RSDBP_IN, prcDocKind   );
              cmd.AddParam( "", RSDBP_IN, prcPaymentId );
              rs1 = rsdRecordSet( cmd );
              if( rs1 and rs1.movenext() )
                 stpName  = rs1.value( 0, null, V_STRING );
                 stpState = rs1.value( 1, null, V_STRING );

                 if( stpState == "R" )
                    rpPaymState = "Платеж помещен на шаг \"" + stpName + "\".";
                 elif( stpState == "X" )
                    rpPaymState = "Платеж закрыт.";
                 else
                    rpPaymState = "Состояние платежа неизвестно.";
                 end;

              end;

           else
              rpResult = "Ошибка"; 
              rpPaymState = getErrMsg;
              rpProcAmount = $0;
              rpAmountRest = rpAmount;
           end;

           text = my_report.ClearSymble(string( ind           ), ";") + separator +
                  my_report.ClearSymble(string( rpNumber      ), ";") + separator +
                  my_report.ClearSymble(string( rpDate        ), ";") + separator +
                  my_report.ClearSymble(string( rpAccPayer    ), ";") + separator +
                  my_report.ClearSymble(string( rpAccReceiver ), ";") + separator +
                  my_report.ClearSymble(string( rpAmount      ), ";") + separator +
                  my_report.ClearSymble(string( rpProcAmount  ), ";") + separator +
                  my_report.ClearSymble(string( rpAmountRest  ), ";") + separator +
                  my_report.ClearSymble(string( rpPriority    ), ";") + separator +
                  my_report.ClearSymble(string( prPayerName   ), ";") + separator +
                  my_report.ClearSymble(string( rpOrigin      ), ";") + separator +
                  my_report.ClearSymble(string( rpResult      ), ";") + separator +
                  my_report.ClearSymble(string( rpPaymState   ), ";") + separator ;

           println(text);        
           ind = ind + 1;

        end;

        useProgress( i );
        i = i + 1;      


/*
Отработанная процедура должна выдавать отчет: 

1.      № документа 

2.      Номер счета 

3.      Филиал 

4.      Наименование клиента 

5.      Сумма оплаты 

6.      Остаток  суммы неоплаченного документа ( если документ оплачен полностью, то проставляется ноль) 
*/


     end;

     remProgress();

     setoutput(null, true);                 
     my_report.cntRecord = ind-1;
     my_report.CopyValueToExcel( pFileName );


  end;

END;



MainProcedureExecute( nameout );

exit( 1 );