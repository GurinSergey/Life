/*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

   Гуцу Е.В.

   Имя файла: NewIndAccounts.mac

   Создан:    25.05.2016

   Описание:  Процедура открытия новых лицевых счетов картотек 2 / ОР для клиентов, у которых один внебалансовый счёт используется для нескольких
              клиентских счетов.

   ChangeLog:
-----------------------------------------------------------------------------------------------------------------------------------------------------
--/--/---- Е.Гуцу 


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
import globals, rsexts, activex, rsd, PaymInter, OprInter;
import "keycodes.mac";

const NEWACCOUNT_BeginningSymbol = 2;

/* EVG 2/6/2016 Заменил на импорт keycodes.mac
const  KEY_F1       = 315,
       KEY_F2       = 316,
       KEY_F3       = 317,
       KEY_F6       = 320,
       KEY_F9       = 323,
       KEY_ESC      = 27,
       KEY_SPACE    = 32,
       KEY_ENTER    = 13;*/

var nameout = "..\\txtfile\\NewIndAccounts_" + random();
setOutput(nameout);

var glProcedureDate = {CurDate};

var Total_RowCount,
    Total_ProcessedAccounts,
    Total_I2AccountsOpened,
    Total_IWPAccountsOpened,
    Total_DocumentsCreated,
    Total_DocumentsI2Created,
    Total_DocumentsIWPCreated,
    Total_SumI2Transfered,
    Total_SumIWPTransfered;


/* Библиотека диалогов */
var DlgLbrPath, DlgLbrName;
GetRegistryValue( "BANK_INI\\ОБЩИЕ ПАРАМЕТРЫ\\ДИРЕКТОРИИ\\LBRDIR", V_STRING, DlgLbrPath );
DlgLbrName = "ExecI2.lbr";

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//DlgLbrPath = "\\\\172.16.22.180\\C$\\RSB_Vuz\\mac.usr\\DebugMacro\\EVG\\" + DlgLbrName;
DlgLbrPath = FindPath(DlgLbrName, DlgLbrPath);

var dlgPanel = tRecHandler( "IndAcc", DlgLbrPath, true );


// Значения полей диалоговой панели по умолчанию
var DEF_Date    = {CurDate},
    DEF_ProcI2  = "X",
    DEF_ProcIWP = "X";


var ind = 1;
var separator = ";", text = "";

// Виды картотеки
const INDEX_TYPE_I2 = 0,
      INDEX_TYPE_IWP = 1;

// Виды обработки
const PROC_TYPE_I2 = "Картотека 2",
      PROC_TYPE_IWP = "Картотека ОР";


const TEST_MODE = false,
      TEST_Iterations = 4;


/* Класс для работы с Excel, заимствован из rep_corschem.mac */
PRIVATE CLASS myExcelReport

  var myWorkBook;
  var myWorkExcel;
  var myWorkSheet;
  var numSheet = 1;

  private var myRecord = null;
 
  var cntRecord = 0;
  var amountRecord = $0.0;

  macro ClearSymble(str, split_char)
      str = StrSubst(str, strfor(13), "" );
      str = StrSubst(str, strfor(10), "" );
      str = StrSubst(str, split_char, " ");
      return string(str);   
  end;

  private macro SetTypeColumns();
      var result_arr = TArray(true), i;
 
      for(i, 1, 4)
        var templs_arr = TArray(true);         
        templs_arr(0) = i;
        templs_arr(1) = 2;
        if( i == 4 )
           templs_arr(1) = 1;
        end;

        result_arr(i - 1) = templs_arr;
      end; 

      return result_arr;
  end;

  private macro GetWorkDirName() : string
      var DirName:string = "", 
          StrErr :string = "";

      GetRegistryValue( "BANK_INI\\ОБЩИЕ ПАРАМЕТРЫ\\ДИРЕКТОРИИ\\TEXTDIR", V_STRING, DirName, StrErr );        
      if( DirName )     
        if( SubStr(DirName, 1, 1) == "." ) DirName = "$" + GetCurDir(TRUE) + strSubst (DirName, "..",""); end;     
        if (existFile(DirName))  return DirName;  end;
      end;

      DirName = "$" + GetEnv("TEMP");

      if( NOT DirName ) DirName = "$" + GetEnv("TMP"); end;
      if (existFile(DirName)) return DirName; end;

      msgbox("Ошибка поиска папки для временных файлов на терминале");

      return "";
  end;

  private macro myCopyFile (Name_file)
      var Templs_Dir_Term = GetWorkDirName();

      var TermFileName = toAnsi(Name_file);
      var SPFileName;

      if ( Templs_Dir_Term == "" )  return "";  end;
      SPFileName = "..\\txtfile\\" + Name_file; 

      if (not existFile(SPFileName)) MsgBox(string("Транспортный временный файл не найден: |", SPFileName)); return ""; end;
      if( not CopyFile(SPFileName, Templs_Dir_Term + "\\" + TermFileName) ) RunError("Ошибка при передаче файла на терминал\n" + Templs_Dir_Term + "\\" + TermFileName); end;

      return subStr(Templs_Dir_Term + "\\" + TermFileName, 2);      
  end;

  private macro OpenExcel()
      private var objectXls, WorkExcel;

      objectXls = CreateObject ("rsax", "TRsAxServer", string("RsAxServer", UserNumber()), IsStandAlone());
      WorkExcel = objectXls.CreateComObject ("Excel.Application"); 

      myWorkExcel = WorkExcel;

      return true;

  OnError(er)
      msgbox(er.Message); 
      return false;
  end;

  private macro SetHeaderExcelTable()
      var i; 
      myWorkBook.Sheets(numSheet);
      myWorkSheet = myWorkBook.ActiveSheet();

      myWorkSheet.Cells(1, 1).Value  = "Протокол процедуры открытия новых лицевых счетов картотек 2 / ОР \n" + 
                                       "от " + glProcedureDate;
      myWorkSheet.Cells(1, 1).HorizontalAlignment = 3;
      myWorkSheet.Cells(1, 1).VerticalAlignment = 2;

      myWorkSheet.Range("A1:K1").merge;
      myWorkSheet.Rows("1:1").RowHeight = 40;
      myWorkSheet.Range("A1:K1").font.size = 13;

      myWorkSheet.Cells(3, 1).Value   = "№ п/п";
      myWorkSheet.Cells(3, 2).Value   = "Вид обработки";
      myWorkSheet.Cells(3, 3).Value   = "Расчётный счёт";
      myWorkSheet.Cells(3, 4).Value   = "Счёт картотеки";
      myWorkSheet.Cells(3, 5).Value   = "Остаток до переноса";
      myWorkSheet.Cells(3, 6).Value   = "Остаток после переноса";
      myWorkSheet.Cells(3, 7).Value   = "Новый счёт картотеки";
      myWorkSheet.Cells(3, 8).Value   = "Сумма переноса";
      myWorkSheet.Cells(3, 9).Value   = "Номер документа";
      myWorkSheet.Cells(3, 10).Value  = "Дата операции";
      myWorkSheet.Cells(3, 11).Value  = "Комментарий";

      for (i, 1, 11)
        myWorkSheet.Cells(3, i).HorizontalAlignment = 3;
        myWorkSheet.Cells(3, i).Font.Bold = true; 

        if( ( i != 11 ) and ( i != 1 ) )
           myWorkSheet.Columns(i).EntireColumn.AutoFit;
        elif( i == 11 )
           myWorkSheet.Columns(i).ColumnWidth = 50;
           myWorkSheet.Columns(i).WrapText = true;
        elif( i == 1 )
           myWorkSheet.Columns(i).ColumnWidth = 5;
           myWorkSheet.Columns(i).WrapText = false;
        end;

      end;

      //myWorkSheet.Range("A" + (cntRecord + 3) + ":D" + (cntRecord + 3)).Font.Bold = true; 
      myWorkSheet.Range("A3:K" + (cntRecord+3) ).Borders.Weight = 2;  
      myWorkSheet.Range("A3:K3").Interior.Color = #B5B5B5; 

      //myWorkSheet.Columns(6).HorizontalAlignment = 4;

      myWorkSheet.columns(3).Entirecolumn.NumberFormat = "@";
      myWorkSheet.columns(4).Entirecolumn.NumberFormat = "@";
      myWorkSheet.columns(7).Entirecolumn.NumberFormat = "@";

      myWorkSheet.columns(5).Entirecolumn.NumberFormat = "# ##0,00р.";
      myWorkSheet.columns(6).Entirecolumn.NumberFormat = "# ##0,00р.";
      myWorkSheet.columns(8).Entirecolumn.NumberFormat = "# ##0,00р.";

      return true;

   OnError
       return false;
   end;     

   macro CopyValueToExcel(myFileName)
       initprogress(-1, "", "Подготовка файла Excel");
       myFileName = myCopyFile(myFileName); 

       if ( OpenExcel() and  myFileName != "")      
        
         myWorkExcel.Workbooks.OpenText (myFileName, 866, 1, 1, 2, false, false, false, false, false, true, ";", SetTypeColumns(), 1, "."," ", true, false);
         myWorkBook = myWorkExcel.Workbooks.Application;

         SetHeaderExcelTable();

         remprogress;
         //MsgBox("Файл успешно записан");
         myWorkExcel.Visible = true;

         var wb = myWorkExcel.Workbooks.item(1);
         //wb.SaveAs( myFileName, 56 );         // xls
         wb.SaveAs( myFileName, 51 );           // xlsx

       end;                
   OnError(er)
       msgBox(er.Message);
   end;     

END;

var my_report = myExcelReport();



MACRO MakeReportLine( pType, pClientAcc, pOldIndexAcc, pIndexRestBefore, pIndexRestAfter, pNewIndexAcc, pTransferSum, pDocNumber, pDate, pProcResult )

  text = my_report.ClearSymble(string( ind              ), ";") + separator +
         my_report.ClearSymble(string( pType            ), ";") + separator +
         my_report.ClearSymble(string( pClientAcc       ), ";") + separator +
         my_report.ClearSymble(string( pOldIndexAcc     ), ";") + separator +
         my_report.ClearSymble(string( pIndexRestBefore ), ";") + separator +
         my_report.ClearSymble(string( pIndexRestAfter  ), ";") + separator +
         my_report.ClearSymble(string( pNewIndexAcc     ), ";") + separator +
         my_report.ClearSymble(string( pTransferSum     ), ";") + separator +
         my_report.ClearSymble(string( pDocNumber       ), ";") + separator +
         my_report.ClearSymble(string( pDate            ), ";") + separator +
         my_report.ClearSymble(string( pProcResult      ), ";") + separator ;

  println(text);        
  ind = ind + 1;

  Total_RowCount = Total_RowCount + 1;

END;



/*
/* Проверка наличия счёта в массиве */
MACRO VerifiqueMatriz( pAccount )
  var n = 0;

  while( n < IwpAccountsArray.Size )

     if( IwpAccountsArray( n ) == pAccount )
        return true;
     end;
     n = n + 1;

  end;

  return false;
END;
*/


MACRO CreateView()

 var SQL, cmd;

   SQL = " CREATE OR REPLACE FORCE VIEW V_DMCACCDOC_IWP                                                 ";
   SQL = SQL + "(                                                                                       ";
   SQL = SQL + "   T_CHAPTER,                                                                           ";
   SQL = SQL + "   T_CURRENCY,                                                                          ";
   SQL = SQL + "   T_ACCOUNT,                                                                           ";
   SQL = SQL + "   T_CLIENTCONTRID                                                                      ";
   SQL = SQL + ")                                                                                       ";
   SQL = SQL + "AS                                                                                      ";
   SQL = SQL + "     SELECT   t_chapter,                                                                ";
   SQL = SQL + "              t_currency,                                                               ";
   SQL = SQL + "              t_account,                                                                ";
   SQL = SQL + "              t_clientcontrid                                                           ";
   SQL = SQL + "       FROM   dmcaccdoc_dbt mc                                                          ";
   SQL = SQL + "      WHERE       mc.t_catid = 405                                                      ";
   SQL = SQL + "              AND mc.t_disablingdate = TO_DATE ('01-01-0001', 'dd-mm-rrrr')             ";
   SQL = SQL + "              AND mc.t_clientcontrid IS NOT NULL                                        ";
   SQL = SQL + "   GROUP BY   t_chapter,                                                                ";
   SQL = SQL + "              t_currency,                                                               ";
   SQL = SQL + "              t_account,                                                                ";
   SQL = SQL + "              t_clientcontrid                                                           ";
   SQL = SQL + "   ORDER BY   mc.t_account;                                                             ";

   cmd = RsdCommand( SQL );
   cmd.Execute();

END;


MACRO CalcIndexSum( pIndexType, pAccount )

  var vPaymStatus;
  var cmd, rs;
  var IndexSum = $0;

  if( pIndexType == INDEX_TYPE_I2 )
     vPaymStatus = 2000;
  elif( pIndexType == INDEX_TYPE_IWP )
     vPaymStatus = 2100;
  end;

  // Условия из штатных представлений DPSINDACC_DBT и DPSIWPACC_DBT
  cmd = RsdCommand( " Select nvl( sum(t_futurepayeramount), 0 ) From dpmpaym_dbt "
                    "  where t_paymstatus   = ?                                 "
                    "    and t_dockind     in ( 201, 286 )                      "
                    "    and t_purpose     <> 69                                "
                    "    and t_i2placedate <= ?                                 "
                    "    and t_payeraccount = ?                                 " );
  cmd.AddParam( "", RSDBP_IN, vPaymStatus     );
  cmd.AddParam( "", RSDBP_IN, glProcedureDate );
  cmd.AddParam( "", RSDBP_IN, pAccount        );
  rs = rsdRecordSet( cmd );
  if( rs and rs.MoveNext() )
     IndexSum = rs.value( 0, NULL, V_MONEY );
  end;

  return IndexSum;
END;



MACRO AccountClose( pChapter, pFiid, pAccount )

  var cmd = RsdCommand( " Update daccount_dbt Set t_open_close = 'З', t_close_date = ?   "
                        "  Where t_chapter = ? and t_code_currency = ? and t_account = ? " );
  cmd.AddParam( "", RSDBP_IN, glProcedureDate );
  cmd.AddParam( "", RSDBP_IN, pChapter        );
  cmd.AddParam( "", RSDBP_IN, pFiid           );
  cmd.AddParam( "", RSDBP_IN, pAccount        );
  cmd.Execute();

END;



MACRO AccountOpen( pChapter, pFiid, pOldAccount, pNewAccount )

 var SQL, cmd;


   SQL = " DECLARE                                                                                                       ";
   SQL = SQL +"      Account_rec      daccount_dbt%ROWTYPE;                                                              ";
   SQL = SQL +"      Accblnc_rec      daccblnc_dbt%ROWTYPE;                                                              ";
   SQL = SQL +"                                                                                                          ";
   SQL = SQL +"      OldAcc_rec       daccount_dbt%ROWTYPE;                                                              ";
   SQL = SQL +"BEGIN                                                                                                     ";
   SQL = SQL +"                                                                                                          ";
   SQL = SQL +"     BEGIN                                                                                                ";
   SQL = SQL +"        SELECT * INTO OldAcc_rec FROM daccount_dbt                                                        ";
   SQL = SQL +"         WHERE t_chapter = ? and t_code_currency = ? and t_account = ?;                                   ";
   SQL = SQL +"     END;                                                                                                 ";
   SQL = SQL +"                                                                                                          ";
   SQL = SQL +"     -- Заполнение структуры daccount_dbt \n                                                              ";
   SQL = SQL +"     Account_rec := NULL;                                                                                 ";
   SQL = SQL +"     Account_rec.t_open_close            := CHR(0);                                                       ";
   SQL = SQL +"     Account_rec.t_code_currency         := ?;                                                            ";
   SQL = SQL +"     Account_rec.t_account               := ?;                                                            ";
   SQL = SQL +"     Account_rec.t_client                := OldAcc_rec.t_client;                                          ";
   SQL = SQL +"     Account_rec.t_oper                  := OldAcc_rec.t_oper;                                            ";
   SQL = SQL +"     Account_rec.t_balance               := OldAcc_rec.t_balance;                                         ";
   SQL = SQL +"     Account_rec.t_sort                  := SubStr( Account_rec.t_account, 1, 8 ) ||                      ";
   SQL = SQL +"                                            SubStr( Account_rec.t_account, 10 );                          ";
   SQL = SQL +"     Account_rec.t_index2                := CHR(0);                                                       ";
   SQL = SQL +"     Account_rec.t_index3                := CHR(0);                                                       ";
   SQL = SQL +"     Account_rec.t_kind_account          := OldAcc_rec.t_kind_account;                                    ";
   SQL = SQL +"     Account_rec.t_type_account          := OldAcc_rec.t_type_account;                                    ";
   SQL = SQL +"     Account_rec.t_etype_account         := CHR(1);                                                       ";
   SQL = SQL +"     Account_rec.t_usertypeaccount       := OldAcc_rec.t_usertypeaccount;                                 ";
   SQL = SQL +"     Account_rec.t_final_date            := TO_DATE('01-01-0001','dd-mm-rrrr');                           ";
   SQL = SQL +"     Account_rec.t_datenochange          := TO_DATE('01-01-0001','dd-mm-rrrr');                           ";
   SQL = SQL +"     Account_rec.t_symbol                := 0;                                                            ";
   SQL = SQL +"     Account_rec.t_open_date             := ?;                                                            ";
   SQL = SQL +"     Account_rec.t_close_date            := TO_DATE('01-01-0001','dd-mm-rrrr');                           ";
   SQL = SQL +"     Account_rec.t_nameaccount           := OldAcc_rec.t_nameaccount;                                     ";
   SQL = SQL +"     Account_rec.t_change_date           := TO_DATE('01-01-0001','dd-mm-rrrr');                           ";
   SQL = SQL +"     Account_rec.t_change_dateprev       := TO_DATE('01-01-0001','dd-mm-rrrr');                           ";
   SQL = SQL +"     Account_rec.t_pairaccount           := CHR(1);                                                       ";
   SQL = SQL +"     Account_rec.t_userfield1            := CHR(1);                                                       ";
   SQL = SQL +"     Account_rec.t_userfield2            := CHR(1);                                                       ";
   SQL = SQL +"     Account_rec.t_userfield3            := CHR(1);                                                       ";
   SQL = SQL +"     Account_rec.t_userfield4            := CHR(1);                                                       ";
   SQL = SQL +"     Account_rec.t_operationdate         := TO_DATE('01-01-0001','dd-mm-rrrr');                           ";
   SQL = SQL +"     Account_rec.t_daystoend             := 0;                                                            ";
   SQL = SQL +"     Account_rec.t_chapter               := ?;                                                            ";
   SQL = SQL +"     Account_rec.t_department            := 1;                                                            ";
   SQL = SQL +"     Account_rec.t_orscheme              := 0;                                                            ";
   SQL = SQL +"     Account_rec.t_contractrko           := 0;                                                            ";
   SQL = SQL +"     Account_rec.t_officeid              := 0;                                                            ";
   SQL = SQL +"     Account_rec.t_depoacc               := 0;                                                            ";
   SQL = SQL +"     Account_rec.t_deporoot              := 0;                                                            ";
   SQL = SQL +"     Account_rec.t_havesubaccounts       := CHR(0);                                                       ";
   SQL = SQL +"     Account_rec.t_branch                := OldAcc_rec.t_branch;                                          ";
   SQL = SQL +"     Account_rec.t_controloper           := OldAcc_rec.t_oper;                                            ";
   SQL = SQL +"     Account_rec.t_currencyeq            := -1;                                                           ";
   SQL = SQL +"     Account_rec.t_currencyeq_ratedate   := 0;                                                            ";
   SQL = SQL +"     Account_rec.t_currencyeq_ratetype   := 0;                                                            ";
   SQL = SQL +"     Account_rec.t_currencyeq_rateextra  := 0;                                                            ";
   SQL = SQL +"     Account_rec.t_accountid             := 0;                                                            ";
   SQL = SQL +"     Account_rec.t_opucode               := CHR(1);                                                       ";
   SQL = SQL +"     Account_rec.t_contragent            := 0;                                                            ";
   SQL = SQL +"     Account_rec.t_ofrrecid              := 0;                                                            ";
   SQL = SQL +"                                                                                                          ";
   SQL = SQL +"     IF Account_rec.t_type_account IS NULL                                                                ";
   SQL = SQL +"     THEN Account_rec.t_type_account := CHR(1);                                                           ";
   SQL = SQL +"     END IF;                                                                                              ";
   SQL = SQL +"     IF Account_rec.t_usertypeaccount IS NULL                                                             ";
   SQL = SQL +"     THEN Account_rec.t_usertypeaccount := CHR(1);                                                        ";
   SQL = SQL +"     END IF;                                                                                              ";
   SQL = SQL +"                                                                                                          ";
   SQL = SQL +"     BEGIN                                                                                                ";
   SQL = SQL +"        INSERT INTO daccount_dbt VALUES Account_rec                                                       ";
   SQL = SQL +"        RETURNING t_accountid INTO Account_rec.t_accountid;                                               ";
   SQL = SQL +"        --dbms_output.put_line( OldAcc_rec.t_newaccount ); \n                                             ";
   SQL = SQL +"     EXCEPTION WHEN DUP_VAL_ON_INDEX                                                                      ";
   SQL = SQL +"        THEN NULL;                                                                                        ";
   SQL = SQL +"     END;                                                                                                 ";
   SQL = SQL +"                                                                                                          ";
   SQL = SQL +"     -- Заполнение структуры daccblnc_dbt \n                                                              ";
   SQL = SQL +"     Accblnc_rec := NULL;                                                                                 ";
   SQL = SQL +"     Accblnc_rec.t_account        := Account_rec.t_account;                                               ";
   SQL = SQL +"     Accblnc_rec.t_code_currency  := Account_rec.t_code_currency;                                         ";
   SQL = SQL +"     Accblnc_rec.t_balance0       := Account_rec.t_balance;                                               ";
   SQL = SQL +"     Accblnc_rec.t_balance1       := CHR(1);                                                              ";
   SQL = SQL +"     Accblnc_rec.t_balance2       := CHR(1);                                                              ";
   SQL = SQL +"     Accblnc_rec.t_balance3       := CHR(1);                                                              ";
   SQL = SQL +"     Accblnc_rec.t_balance4       := CHR(1);                                                              ";
   SQL = SQL +"     Accblnc_rec.t_balance5       := CHR(1);                                                              ";
   SQL = SQL +"     Accblnc_rec.t_balance6       := CHR(1);                                                              ";
   SQL = SQL +"     Accblnc_rec.t_balance7       := CHR(1);                                                              ";
   SQL = SQL +"     Accblnc_rec.t_balance8       := CHR(1);                                                              ";
   SQL = SQL +"     Accblnc_rec.t_balance9       := CHR(1);                                                              ";
   SQL = SQL +"     Accblnc_rec.t_balance10      := CHR(1);                                                              ";
   SQL = SQL +"     Accblnc_rec.t_balance11      := CHR(1);                                                              ";
   SQL = SQL +"     Accblnc_rec.t_chapter        := Account_rec.t_chapter;                                               ";
   SQL = SQL +"     Accblnc_rec.t_accountid      := Account_rec.t_accountid;                                             ";
   SQL = SQL +"                                                                                                          ";
   SQL = SQL +"     BEGIN                                                                                                ";
   SQL = SQL +"        INSERT INTO daccblnc_dbt VALUES Accblnc_rec;                                                      ";
   SQL = SQL +"        --dbms_output.put_line( '    ' || Account_rec.t_balance ); \n                                     ";
   SQL = SQL +"     EXCEPTION WHEN OTHERS                                                                                ";
   SQL = SQL +"        THEN NULL;                                                                                        ";
   SQL = SQL +"     END;                                                                                                 ";
   SQL = SQL +"                                                                                                          ";
   SQL = SQL +"END;                                                                                                      ";

   cmd = RsdCommand( SQL );
   cmd.AddParam( "", RSDBP_IN, pChapter           );
   cmd.AddParam( "", RSDBP_IN, pFiid              );
   cmd.AddParam( "", RSDBP_IN, pOldAccount        );
   cmd.AddParam( "", RSDBP_IN, pFiid              );
   cmd.AddParam( "", RSDBP_IN, pNewAccount        );
   cmd.AddParam( "", RSDBP_IN, glProcedureDate    );
   cmd.AddParam( "", RSDBP_IN, pChapter           );

   cmd.Execute();

END;



MACRO CheckAccountOpen( pAccount, pFiid, pChapter )
 var cmd, rs;

   cmd = RsdCommand( "Select 1 from daccount_dbt Where t_code_currency = ? and t_chapter = ? and t_account = ? and t_open_close = chr(0) " );
   cmd.AddParam( "", RSDBP_IN, pFiid    );
   cmd.AddParam( "", RSDBP_IN, pChapter );
   cmd.AddParam( "", RSDBP_IN, pAccount );
   rs = RsdRecordSet( cmd );
   if( rs and rs.MoveNext() )  return true;  end;

   return false;
END;



MACRO MakeNewAccountNumber( pCurrentAccount, pFiid, pChapter, pIterator )

  var vLength = StrLen( string(pIterator) );
  var NewAccountNumber = GetKey( SubStr( pCurrentAccount, 1, 13 ) + string(pIterator) + SubStr( pCurrentAccount, 15 ) );

  while( CheckAccountOpen( NewAccountNumber, pFiid, pChapter ) )

     pIterator = pIterator + 1;
     vLength = StrLen( string(pIterator) );

     if( vLength == 1 )
        NewAccountNumber = GetKey( SubStr( pCurrentAccount, 1, 13 ) + string(pIterator) + SubStr( pCurrentAccount, 15 ) );
     elif( vLength == 2 )
        NewAccountNumber = GetKey( SubStr( pCurrentAccount, 1, 12 ) + string(pIterator) + SubStr( pCurrentAccount, 15 ) );
     elif( vLength == 3 )
        NewAccountNumber = GetKey( SubStr( pCurrentAccount, 1, 11 ) + string(pIterator) + SubStr( pCurrentAccount, 15 ) );
     end;

  end;

  return NewAccountNumber;

END;


MACRO MyDebugbreak()
   return;
END;


MACRO TransferAccountRest( pAccountFrom, pAccountTo, pFiid, pChapter, pRest, pGround, retDocNumber:@string )

  var Payment:object;
  var Memorial:object;
  var stat, vCreateResult;

  Memorial = GenObject( "RsbMemorialOrder", 0 );
  Payment  = Memorial.Payment();

  Memorial.State         = 0; /*CB_DOC_STATE_DEFERRED*/;
  Memorial.Oper          = {oper};
  Memorial.Chapter       = pChapter;
  Memorial.Code_Currency = pFiid;

  Memorial.Kind_Oper     = " 6";
  
  Memorial.Origin        = CB_DOC_ORIGIN_AUTO;

  Memorial.LaunchOper    = true;
  Memorial.Kind_Operation= 24001;     // "Платёжный документ"

  Payment.DocKind        = DLDOC_MEMORIALORDER;
  Payment.Purpose        = PM_PURP_MEMORDER;
  Payment.ShifrOper      = "09";

  Payment.IsPlanPaym     = "X";
  Payment.PaymentKind    = "Э";

  Payment.receivername   = {Name_Bank};
  Payment.receiverinn    = {INN_Bank};

  Payment.Priority       = 5;

  Payment.Ground         = pGround;

  Payment.BaseFIID       = pFiid;


  Payment.SetPayerAccount( pFiid, pChapter, pAccountTo );
  Payment.SetReceiverAccount( pFiid, pChapter, pAccountFrom );
  
  //Payment.CryptoAction( string("Автоматическое_формирование_платежей") ); 

  Payment.BaseAmount = Payment.PayerAmount = Payment.ReceiverAmount = pRest;

  Payment.ValueDate = Payment.Date = glProcedureDate;
  Payment.PayerBankEnterDate = Payment.ClientDate = {curdate};


  // Референс 1000001 "ПРББ: формирование номеров внутрибанковских документов"
  if( GenerateReference( 1000001, Payment.Number ) )
     Payment.Number = "000";
  end;
  retDocNumber = Payment.Number;

  vCreateResult = "Перенос оатстка выполнен успешно";


  stat = Memorial.Update();


  if( stat )
     vCreateResult = getErrMsg;
  else
     ReplaceMacro( "DebugBreak", "MyDebugbreak" );
     stat = PM_ExecuteOperation( Memorial.DocumentID, Payment.DocKind );
     ReplaceMacro( "DebugBreak" );
  end;

  return vCreateResult;

END;



MACRO CriarRecordSet_I2( isCount )

  var sql, rs;
  var SelectClause, RecCount;


  SelectClause = " Select ac1.t_chapter ClChapter, ac1.t_code_currency ClFiid, ac1.t_account ClAccount, " +
                 "        ac3.t_chapter ObChapter, ac3.t_code_currency ObFiid, ac3.t_account ObAccount, " +
                 "        ln.t_linkid lnId, ac1.t_open_close State                                      " +
                 "   From daccount_dbt ac1, daccount_dbt ac3, dobjlink_dbt ln                           " +
                 "  Where ln.t_objecttype  = 4                                                          " +
                 "    and ln.t_groupid     = 2                                                          " +
                 "    and ln.t_attrtype    = 4                                                          " +
                 "    and ln.t_validtodate = to_date( '31-12-9999', 'dd-mm-rrrr' )                      " +
                 "    and ac1.t_chapter       = to_number( subStr( ln.t_objectid, 1, 2 ) )              " +
                 "    and ac1.t_code_currency = to_number( subStr( ln.t_objectid, 3, 7 ) )              " +
                 "    and ac1.t_account       = subStr( ln.t_objectid, 10 )                             " +
                 "    and ac3.t_chapter       = to_number( subStr( ln.t_attrid, 1, 2 ) )                " +
                 "    and ac3.t_code_currency = to_number( subStr( ln.t_attrid, 3, 7 ) )                " +
                 "    and ac3.t_account       = subStr( ln.t_attrid, 10 )                               " +
                 "    and ( Select count(0) From dobjlink_dbt ln1                                       " +
                 "           Where ln1.t_attrtype = ln.t_attrtype                                       " +
                 "             and ln1.t_attrid   = ln.t_attrid ) > 1                                   " +
                 "  Order by ac3.t_account, ac1.t_index2 desc                                           ";

  sql = SelectClause;
  if( isCount )
     sql = " SELECT count(0) FROM ( " + SelectClause + " ) ";
  end;

  rs = rsdRecordSet( sql );

  if( not isCount )
     return rs;
  end;

  RecCount = 0;
  if( rs and rs.moveNext() )
     RecCount = rs.value( 0, null, V_INTEGER );
  end;

  return RecCount;

END;



MACRO CriarRecordSet_IWP( isCount )

  var sql, rs;
  var SelectClause, RecCount;


  SelectClause = " Select ac1.t_chapter ClChapter, ac1.t_code_currency ClFiid, ac1.t_account ClAccount, " +
                 "        ac3.t_chapter ObChapter, ac3.t_code_currency ObFiid, ac3.t_account ObAccount, " +
                 "        v_mc.t_clientcontrid SfContrId, ac1.t_open_close State                        " +
                 "   From daccount_dbt ac1, daccount_dbt ac3, dsfcontr_dbt cn, v_dmcaccdoc_iwp v_mc     " +
                 "  Where cn.t_id             = v_mc.t_clientcontrid                                    " +
                 "    and ac1.t_chapter       = 1                                                       " +
                 "    and ac1.t_code_currency = cn.t_fiid                                               " +
                 "    and ac1.t_account       = cn.t_object                                             " +
                 "    and ac3.t_chapter       = v_mc.t_chapter                                          " +
                 "    and ac3.t_code_currency = v_mc.t_currency                                         " +
                 "    and ac3.t_account       = v_mc.t_account                                          " +
                 "    and exists ( Select 1                                                             " +
                 "                   From v_dmcaccdoc_iwp s2                                            " +
                 "                  Where s2.t_chapter        = v_mc.t_chapter                          " +
                 "                    and s2.t_currency       = v_mc.t_currency                         " +
                 "                    and s2.t_account        = v_mc.t_account                          " +
                 "                    and s2.t_clientcontrid <> v_mc.t_clientcontrid )                  " +
                 "  Order by ac3.t_account, ac1.t_open_date                                             ";

  sql = SelectClause;
  if( isCount )
     sql = " SELECT count(0) FROM ( " + SelectClause + " ) ";
  end;

  rs = rsdRecordSet( sql );

  if( not isCount )
     return rs;
  end;

  RecCount = 0;
  if( rs and rs.moveNext() )
     RecCount = rs.value( 0, null, V_INTEGER );
  end;

  return RecCount;

END;


MACRO ProcessI2Accounts()

  var cmd, rs;
  var PrevObAccount = "", NewAccountNumber = "", i = 1;
  var vChapter, vFiid, vIndexAcc, vClientAcc, vIndexRest, vGround, 
      vCount, vProcResult, vDocNumber, vState, vIndexRestBef, vIndexRestAft;
  var TransferSum;
  var vProcessLimit;

  vProcessLimit = 0;
  if( TEST_MODE )
     vProcessLimit = TEST_Iterations;
  end;

  vCount = CriarRecordSet_I2( true );

  initprogress( vCount, "Выполнение процедуры...", "Обрабатываем счета картотеки 2" );

  rs = CriarRecordSet_I2( false );
  while( rs and rs.moveNext() and ( not vProcessLimit or ( i <= vProcessLimit ) ) )

     vIndexAcc = rs.Value( "ObAccount", null, V_STRING );
     vState = rs.Value( "State", null, V_STRING );

     if( vState == "З" )
        continue;
     end;

     if( vIndexAcc == PrevObAccount )

        Total_ProcessedAccounts = Total_ProcessedAccounts + 1;
        Total_I2AccountsOpened  = Total_I2AccountsOpened  + 1;

        vFiid      = rs.Value( "ObFiid", null, V_INTEGER );
        vChapter   = rs.Value( "ObChapter", null, V_INTEGER );
        vClientAcc     = rs.Value( "ClAccount", null, V_STRING  );

        vDocNumber = "";

        // Сформировать новый номер счёта
        NewAccountNumber = MakeNewAccountNumber( PrevObAccount, vFiid, vChapter, NEWACCOUNT_BeginningSymbol );

        // Открыть новый счёт
        AccountOpen( vChapter, vFiid, PrevObAccount, NewAccountNumber );

        // Проверить остаток картотеки 2 по р/сч клиента
        TransferSum = CalcIndexSum( INDEX_TYPE_I2, vClientAcc );

        // Остаток до переноса
        vIndexRestBef = ABS( RestA( PrevObAccount, glProcedureDate, glProcedureDate, vChapter ) );

        if( TransferSum )

           // Сформировать документ переноса остатка картотеки на новый счёт и выполнить операцию
           vGround = "Перенос учета картотеки по счету № " + vClientAcc;
           vProcResult = TransferAccountRest( PrevObAccount, NewAccountNumber, vFiid, vChapter, TransferSum, vGround, @vDocNumber );

           // Остаток после переноса
           vIndexRestAft = ABS( RestA( PrevObAccount, glProcedureDate, glProcedureDate, vChapter ) );

           Total_DocumentsCreated   = Total_DocumentsCreated   + 1;
           Total_DocumentsI2Created = Total_DocumentsI2Created + 1;

           Total_SumI2Transfered = Total_SumI2Transfered + TransferSum;

        else
           vProcResult = "Документы на картотеке отсутствуют";
           vIndexRestAft = vIndexRestBef;
        end;


        // Скорректировать связанный счёт картотеки 2
        cmd = RsdCommand( " Update dobjlink_dbt Set t_attrid = lpad( ?, 2, '0' ) || lpad( ?, 7, '0' ) || ?  Where t_linkid = ? " );
        cmd.AddParam( "", RSDBP_IN, vChapter                            );
        cmd.AddParam( "", RSDBP_IN, vFiid                               );
        cmd.AddParam( "", RSDBP_IN, NewAccountNumber                    );
        cmd.AddParam( "", RSDBP_IN, rs.Value( "lnId", null, V_INTEGER ) );
        cmd.Execute();

        /* Не нужно.
        // Закрыть старый счёт
        AccountClose( vChapter, vFiid, PrevObAccount );*/


        MakeReportLine( PROC_TYPE_I2, string(vClientAcc:f), string(vIndexAcc:f), vIndexRestBef, vIndexRestAft, string(NewAccountNumber:f), TransferSum, vDocNumber, glProcedureDate, vProcResult );

     else
        PrevObAccount = vIndexAcc;
     end;

     useProgress( i );
     i = i + 1;      

  end;
  remProgress();

END;




MACRO ProcessIWPAccounts()

  var cmd, rs;
  var PrevObAccount = "", NewAccountNumber = "", i = 1;
  var vChapter, vFiid, vIndexAcc, vClientAcc, vGround, vCount, vProcResult, vDocNumber,
      vState, vClientFiid, vClientChapter, vSfContrId, vIndexRestBef, vIndexRestAft;
  var TransferSum;
  var vProcessLimit;

  vProcessLimit = 0;
  if( TEST_MODE )
     vProcessLimit = TEST_Iterations;
  end;

  vCount = CriarRecordSet_IWP( true );

  initprogress( vCount, "Выполнение процедуры...", "Обрабатываем счета картотеки ОР" );

  rs = CriarRecordSet_IWP( false );
  while( rs and rs.moveNext() and ( not vProcessLimit or ( i <= vProcessLimit ) ) )

     vIndexAcc = rs.Value( "ObAccount", null, V_STRING );
     vState = rs.Value( "State", null, V_STRING );

     if( vState == "З" )
        continue;
     end;

     if( vIndexAcc == PrevObAccount )

        Total_ProcessedAccounts = Total_ProcessedAccounts + 1;
        Total_IWPAccountsOpened = Total_IWPAccountsOpened + 1;

        vFiid      = rs.Value( "ObFiid", null, V_INTEGER );
        vChapter   = rs.Value( "ObChapter", null, V_INTEGER );

        vClientAcc     = rs.Value( "ClAccount", null, V_STRING );
        vClientFiid    = rs.Value( "ClFiid",    null, V_INTEGER );
        vClientChapter = rs.Value( "ClChapter", null, V_INTEGER );

        vSfContrId = rs.Value( "SfContrId", null, V_INTEGER );

        vDocNumber = "";

        // Сформировать новый номер счёта
        NewAccountNumber = MakeNewAccountNumber( PrevObAccount, vFiid, vChapter, NEWACCOUNT_BeginningSymbol );

        // Открыть новый счёт
        AccountOpen( vChapter, vFiid, PrevObAccount, NewAccountNumber );

        // Проверить остаток картотеки ОР по р/сч клиента
        TransferSum = CalcIndexSum( INDEX_TYPE_IWP, vClientAcc );

        // Остаток до переноса
        vIndexRestBef = ABS( RestA( PrevObAccount, glProcedureDate, glProcedureDate, vChapter ) );

        if( TransferSum )

           // Сформировать документ переноса остатка картотеки на новый счёт и выполнить операцию
           vGround = "Перенос учета картотеки по счету № " + vClientAcc;
           vProcResult = TransferAccountRest( PrevObAccount, NewAccountNumber, vFiid, vChapter, TransferSum, vGround, @vDocNumber );

           // Остаток после переноса
           vIndexRestAft = ABS( RestA( PrevObAccount, glProcedureDate, glProcedureDate, vChapter ) );

           Total_DocumentsCreated    = Total_DocumentsCreated    + 1;
           Total_DocumentsIWPCreated = Total_DocumentsIWPCreated + 1;

           Total_SumIWPTransfered = Total_SumIWPTransfered + TransferSum;

        else
           vProcResult = "Документы на картотеке отсутствуют";
           vIndexRestAft = vIndexRestBef;
        end;


        // Скорректировать счёт по категории 112 "Карт ОР"
        cmd = RsdCommand( " Update dmcaccdoc_dbt Set t_account = ? "
                          "  Where t_catid         = 405           "
                          "    and t_clientcontrid = ?             "
                          "    and t_account       = ?             " );
        cmd.AddParam( "", RSDBP_IN, NewAccountNumber );
        cmd.AddParam( "", RSDBP_IN, vSfContrId       );
        cmd.AddParam( "", RSDBP_IN, PrevObAccount    );
        cmd.Execute();

        // Скорректировать связанный счёт картотеки ОР
        cmd = RsdCommand( " Update dobjlink_dbt Set t_attrid = lpad( ?, 2, '0' ) || lpad( ?, 7, '0' ) || ? "
                          "  Where t_objecttype = 4 and t_groupid = 49                                     "
                          "    and t_objectid   = lpad( ?, 2, '0' ) || lpad( ?, 7, '0' ) || ?              " );
        cmd.AddParam( "", RSDBP_IN, vChapter          );
        cmd.AddParam( "", RSDBP_IN, vFiid             );
        cmd.AddParam( "", RSDBP_IN, NewAccountNumber  );
        cmd.AddParam( "", RSDBP_IN, vClientChapter    );
        cmd.AddParam( "", RSDBP_IN, vClientFiid       );
        cmd.AddParam( "", RSDBP_IN, vClientAcc        );
        cmd.Execute();


        MakeReportLine( PROC_TYPE_IWP, string(vClientAcc:f), string(vIndexAcc:f), vIndexRestBef, vIndexRestAft, string(NewAccountNumber:f), TransferSum, vDocNumber, glProcedureDate, vProcResult );

     else
        PrevObAccount = vIndexAcc;
     end;

     useProgress( i );
     i = i + 1;      

  end;
  remProgress();

END;



MACRO EventHandler( dlg, cmd, id, key )
  var st;

  if ( cmd == DLG_INIT )

      dlg.rec.fDate       = DEF_Date;
      dlg.rec.fProcessI2  = DEF_ProcI2;
      dlg.rec.fProcessIWP = DEF_ProcIWP;

      UpdateFields(dlg);
      message ("~Esc~ - Выход ~F2~ - Выполнить");

  elif( cmd == DLG_KEY ) //Проверки на нажатие клавиш

     if (KEY == KEY_ESC)
        //return CM_CANCEL;
        exit(1);

     elif( key == KEY_ENTER )

        /* При нажатии Enter в последнем поле не закрывать окно */
        if (id == dlg.fldNumber()-1)
           SetFocus(dlg, 0);
           return CM_IGNORE;
        end;

     elif( key == KEY_F2 )

        glProcedureDate = dlg.rec.fDate;

        return CM_SAVE;

     elif( key == KEY_SPACE )

        if( FldName(dlg, id) == "fProcessI2" )

           if( dlg.rec.fProcessI2 == "" )
              dlg.rec.fProcessI2 = "X";
           else
              dlg.rec.fProcessI2 = "";
           end;

        elif( FldName(dlg, id) == "fProcessIWP" )

           if( dlg.rec.fProcessIWP == "" )
              dlg.rec.fProcessIWP = "X";
           else
              dlg.rec.fProcessIWP = "";
           end;

        end;
        UpdateFields(dlg);

     end;

  end;
  return CM_DEFAULT;
END;



MACRO MainProcedureExecute( pFileName )

  var separator = ";", i = 1, amount = $0.0, text = "", vCount, ind = 1;
  var rpNumber, rpDate, rpAccPayer, rpAccReceiver, prPayerName, rpAmount, rpPriority, rpOrigin, rpResult, rpProcAmount, rpAmountRest, rpPaymState;
  var prcDocKind, prcPaymentId, prcAccPayer, prcPayerFiid, prcFreeAmount;
  var DlgFlag, stat;
  var stpState, stpName;

  Total_ProcessedAccounts   = 0;
  Total_I2AccountsOpened    = 0;
  Total_IWPAccountsOpened   = 0;
  Total_DocumentsCreated    = 0;
  Total_DocumentsI2Created  = 0;
  Total_DocumentsIWPCreated = 0;
  Total_SumI2Transfered     = $0;
  Total_SumIWPTransfered    = $0;

  if( RunDialog(dlgPanel, "EventHandler") )

     // Протокол начинаем с 3 строки
     Total_RowCount = 3;
     println(separator);println(separator);println(separator);

     if( dlgPanel.rec.fProcessI2 )
        ProcessI2Accounts();
     end;

     if( dlgPanel.rec.fProcessIWP )
        ProcessIWPAccounts();
     end;

     // Итоги
     println(separator);println(separator);println(separator);
     println("Всего обработано расчётных счетов: ", separator, separator, separator, separator, Total_ProcessedAccounts, separator);
     println("Открыто счетов картотеки 2: ", separator, separator, separator, separator, Total_I2AccountsOpened, separator);
     println("Открыто счетов картотеки ОР: ", separator, separator, separator, separator, Total_IWPAccountsOpened, separator);
     println(separator);
     println("Сформировано документов переноса остатка: ", separator, separator, separator, separator, Total_DocumentsCreated, separator);
     println("     - из них по картотеке 2: ", separator, separator, separator, separator, Total_DocumentsI2Created, separator);
     println("     - из них по картотеке ОР: ", separator, separator, separator, separator, Total_DocumentsIWPCreated, separator);
     println(separator);
     println("Общая сумма перенесенных остатков по картотеке 2: ", separator, separator, separator, separator, Total_SumI2Transfered, separator);
     println("Общая сумма перенесенных остатков по картотеке ОР: ", separator, separator, separator, separator, Total_SumIWPTransfered, separator);

     setoutput(null, true);                 
     my_report.cntRecord = ind-1;
     my_report.CopyValueToExcel( pFileName );

     //my_report.myWorkBook.visible = true;

     my_report.myWorkSheet.Range("A"+Total_RowCount+":K"+Total_RowCount).Borders(9).Weight = 2;           // xlEdgeBottom, xlThin
     my_report.myWorkSheet.Range("A"+Total_RowCount+":K"+Total_RowCount).Borders(9).LineStyle = 1;        // xlEdgeBottom, xlContinuous

     Total_RowCount = Total_RowCount + 4;
     my_report.myWorkSheet.Range("E"+Total_RowCount+":E"+Total_RowCount+6).NumberFormat = "0";
     Total_RowCount = Total_RowCount + 8;
     my_report.myWorkSheet.Range("E"+Total_RowCount+":E"+Total_RowCount+2).NumberFormat = "# ##0,00р.";

  end;

END;


CreateView();
MainProcedureExecute( nameout );

exit( 1 );