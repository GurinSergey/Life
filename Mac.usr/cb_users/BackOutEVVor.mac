/*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

   Гуцу Е.В.

   Имя файла: BackOutEVVor.mac

   Создан:    29.12.2015

   Описание:  ---

   ChangeLog:
-----------------------------------------------------------------------------------------------------------------------------------------------------

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
import "activex.mac", "cb_sql.mac";



VAR vTemplateName = "Полная таблица-111.xlsx",
    vTemplateDir  = "\\\\172.16.22.116\\Export";


VAR vVisible  = false,
    vReadOnly = false;


CONST COLUMNCODE_Account = "O";         // ЭВ-Саратов - Счет
CONST COLUMNCODE_Client  = "B";         // Наименование


CONST NewCarryDate   = date( 21, 12, 2015 ),
      BadPeriodBegin = date( 19, 12, 2015 );




MACRO SetDateAccountOpen( pAccountId, pDate, pCurrentDate:@date )

  var cmd, rs;

  // Сохраняем текущую дату
  cmd = rsdCommand( " Select t_open_date From daccount_dbt Where t_accountid = ? " );
  cmd.AddParam( "", RSDBP_IN, pAccountId );
  rs = rsdRecordSet( cmd );
  if( rs and rs.MoveNext() )
     pCurrentDate = rs.value( 0, null, V_DATE );
  end;

  // Устанавливаем дату
  if( pCurrentDate != pDate )
     cmd = rsdCommand( " Update daccount_dbt Set t_open_date = ? Where t_accountid = ? " );
     cmd.AddParam( "", RSDBP_IN, pDate );
     cmd.AddParam( "", RSDBP_IN, pAccountId );
     cmd.Execute();
  end;

END;


MACRO CorrectTypeAccount( pAccountId, pCurrentTypes:@string, pSetTypes )

  var cmd, rs;

  // Текущие типы
  cmd = rsdCommand( " Select t_type_account From daccount_dbt Where t_accountid = ? " );
  cmd.AddParam( "", RSDBP_IN, pAccountId );
  rs = rsdRecordSet( cmd );
  if( rs and rs.MoveNext() )
     pCurrentTypes = rs.value( 0, null, V_STRING );
  end;

  if( ValType( pSetTypes ) == V_UNDEF )

     // Очищаем типы
     cmd = rsdCommand( " Update daccount_dbt Set t_type_account = chr(1) Where t_accountid = ? " );
     cmd.AddParam( "", RSDBP_IN, pAccountId );
     cmd.Execute();

  else

     // Устанавливаем
     cmd = rsdCommand( " Update daccount_dbt Set t_type_account = ? Where t_accountid = ? " );
     cmd.AddParam( "", RSDBP_IN, pSetTypes  );
     cmd.AddParam( "", RSDBP_IN, pAccountId );
     cmd.Execute();

  end;

END;


MACRO CorrectLimit( pChapter, pCodeCur, pAccount, pCurrentLimit:@money, pCurLimDate:@date, pSetLimit, pSetLimDate )

  var cmd, rs;
  var isLimit = false;


  // Если функция вызывается для возврата первоначального лимита
  if( ValType(pCurrentLimit) == V_UNDEF )

     // Если первоначальный лимит вообще был, то устанавливаем его
     if( pSetLimit > $0.00 )

        cmd = rsdCommand( " Update dacclimit_dbt Set t_limit = ?                                               "
                          "  Where t_account = ? and t_chapter = ? and t_code_currency = ? and t_limitdate = ? " );
        cmd.AddParam( "", RSDBP_IN, pSetLimit   );
        cmd.AddParam( "", RSDBP_IN, pAccount    );
        cmd.AddParam( "", RSDBP_IN, pChapter    );
        cmd.AddParam( "", RSDBP_IN, pCodeCur    );
        cmd.AddParam( "", RSDBP_IN, pSetLimDate );
        cmd.Execute();

     // Иначе, если лимита по счёту не было, удаляем добавленный ранее лимит
     else

        cmd = rsdCommand( " Delete From dacclimit_dbt                                                               "
                          "  Where t_account = ? and t_chapter = ? and t_code_currency = ? and t_limitdate = ? " );
        cmd.AddParam( "", RSDBP_IN, pAccount    );
        cmd.AddParam( "", RSDBP_IN, pChapter    );
        cmd.AddParam( "", RSDBP_IN, pCodeCur    );
        cmd.AddParam( "", RSDBP_IN, pSetLimDate );
        cmd.Execute();

     end;

     return;
  end;


  // Текущий лимит
  cmd = rsdCommand( " Select t.t_limit, t.t_limitdate From dacclimit_dbt t                        "
                    "  Where t.t_account = ? and t.t_chapter = ? and t.t_code_currency = ?        "
                    "    and t.t_limitdate = ( Select max( t1.t_limitdate ) from dacclimit_dbt t1 "
                    "                           Where t1.t_account       = t.t_account            "
                    "                             and t1.t_chapter       = t.t_chapter            "
                    "                             and t1.t_code_currency = t.t_code_currency      "
                    "                             and t1.t_limitdate    <= ? )                    " );
  cmd.AddParam( "", RSDBP_IN, pAccount    );
  cmd.AddParam( "", RSDBP_IN, pChapter    );
  cmd.AddParam( "", RSDBP_IN, pCodeCur    );
  cmd.AddParam( "", RSDBP_IN, pSetLimDate );
  rs = rsdRecordSet( cmd );
  if( rs and rs.MoveNext() )
     isLimit = true;

     pCurrentLimit = rs.value( 0, null, V_MONEY );
     pCurLimDate   = rs.value( 1, null, V_DATE  );
  end;

  // Лимит уже установлен, нужно увеличить
  if( isLimit )

     cmd = rsdCommand( " Update dacclimit_dbt Set t_limit = ?                                               "
                       "  Where t_account = ? and t_chapter = ? and t_code_currency = ? and t_limitdate = ? " );
     cmd.AddParam( "", RSDBP_IN, pSetLimit   );
     cmd.AddParam( "", RSDBP_IN, pAccount    );
     cmd.AddParam( "", RSDBP_IN, pChapter    );
     cmd.AddParam( "", RSDBP_IN, pCodeCur    );
     cmd.AddParam( "", RSDBP_IN, pCurLimDate );
     cmd.Execute();

  // Записи лимита нет, добавляем
  else

     cmd = rsdCommand( " Insert Into dacclimit_dbt Values( ?, ?, ?, ?, ? ) " );
     cmd.AddParam( "", RSDBP_IN, pAccount    );
     cmd.AddParam( "", RSDBP_IN, pChapter    );
     cmd.AddParam( "", RSDBP_IN, pCodeCur    );
     cmd.AddParam( "", RSDBP_IN, pSetLimDate );
     cmd.AddParam( "", RSDBP_IN, pSetLimit   );
     cmd.Execute();

  end;

END;



MACRO RemakeCarries( pAccount, pClientName )

  var cmd, rs, er, vAccId, vCurrentDate, vCurrentTypes, vCurrentLimit, vCurLimDate;
  var vNBmasc = "9090%" + SubStr( pAccount, StrLen(pAccount)-6 ),
      vDTmasc = "4742%" + SubStr( pAccount, StrLen(pAccount)-6 );

  var vCarry:object = RsbAccTransaction();
  var vChapter, vCodeCur;

  var first = true;

  cmd = rsdCommand( " Select t.t_acctrnid id, t.* From dacctrn_dbt t Where ( t_account_payer = ? or t_account_receiver = ? )          "
                    "                                                  and t_state = 1 and t_chapter = 1 and t_date_carry >= ?        "
                    "                                                  and t_date_carry < ?                                           "
                    " Union                                                                                                           "
                    " Select t.t_acctrnid id, t.* From dacctrn_dbt t Where ( t_account_payer like ? or t_account_receiver like ? )    "
                    "                                                  and t_state = 1 and t_chapter = 3 and t_date_carry >= ?        "
                    "                                                  and t_date_carry < ?                                           "
                    "  Order by id                                                                                                    " );
  cmd.AddParam( "", RSDBP_IN, pAccount       );
  cmd.AddParam( "", RSDBP_IN, pAccount       );
  cmd.AddParam( "", RSDBP_IN, BadPeriodBegin );
  cmd.AddParam( "", RSDBP_IN, NewCarryDate   );
  cmd.AddParam( "", RSDBP_IN, vNBmasc        );
  cmd.AddParam( "", RSDBP_IN, vNBmasc        );
  cmd.AddParam( "", RSDBP_IN, BadPeriodBegin );
  cmd.AddParam( "", RSDBP_IN, NewCarryDate   );
  rs = RsdRecordSet( cmd );
  while( rs and rs.MoveNext() )

    if( first )
       [     Обрабатываем проводки по счёту клиента: #]( pClientName + ", номер: " + pAccount + "\n");
       first = false;
    end;

    if( vCarry.Find( rs.value( "t_acctrnid", null, V_INTEGER ) ) == 0 )

       [         Обрабатываем проводку: Дт. #################### - Кт. #################### Сумма: ############## Дата: ##########... ]
       ( rs.value( "t_account_payer",    null, V_STRING ), 
         rs.value( "t_account_receiver", null, V_STRING ),
         rs.value( "t_sum_payer",        null, V_MONEY  ),
         rs.value( "t_date_carry",       null, V_DATE   ) );

       vChapter = rs.value( "t_chapter",         null, V_INTEGER );
       vAccId   = rs.value( "t_accountid_payer", null, V_INTEGER );
       vCodeCur = rs.value( "t_fiid_payer",      null, V_INTEGER );
       if( pAccount == vCarry.AccountReceiver )
          vAccId   = rs.value( "t_accountid_receiver", null, V_INTEGER );
          vCodeCur = rs.value( "t_fiid_receiver",      null, V_INTEGER );
       end;


       // Заменим существующие типы счёта на "Овердрафт" - для возможности отката
       vCurrentTypes = "";
       CorrectTypeAccount( vAccId, @vCurrentTypes, "О" );

       // Добавим лимит овердрафта
       vCurrentLimit = $0.00; vCurLimDate = date(0,0,0);
       CorrectLimit( vChapter, vCodeCur, pAccount, @vCurrentLimit, @vCurLimDate, $9999999999999999.00, BadPeriodBegin );

       // Меняем дату открытия на BadPeriodBegin (19.12.2015), если она больше (анализ внутри)
       vCurrentDate = date(0,0,0);
       SetDateAccountOpen( vAccId, BadPeriodBegin, @vCurrentDate );

       // Модифицируем дату проводки и сохраняем
       vCarry.Date_Carry = NewCarryDate;
       if( vCarry.Update( er ) )
          [            Изменение даты проводки выполнено успешно. Новая дата: ##########.]( vCarry.Date_Carry );
       else
          [!           При изменении даты проводки возникла ошибка: #.
                       Проводка не изменена.                 ]( er );
       end;

       // Возвращаем тип счёта
       CorrectTypeAccount( vAccId, null, vCurrentTypes );

       // Возвращаем лимит
       if( vCurLimDate == date(0,0,0) ) vCurLimDate = BadPeriodBegin; end;
       CorrectLimit( vChapter, vCodeCur, pAccount, null, null, vCurrentLimit, vCurLimDate );

       // Возвращаем дату открытия
       if( vCurrentDate != BadPeriodBegin )
          SetDateAccountOpen( vAccId, vCurrentDate );
       end;

    end;

  end;
  
END;


MACRO CorrectPaymentsInformation( pAccount, pClientName )

  var cmd, rs, vErr;

  var vPaymentId, vAmount;

  var vValueDate,               // Дата значения
      vI2PlaceDate,             // Дата помещения в картотеку 2
      vPayerbankEnterDate,      // Дата поступления в банк плательщик
      vPartpaymDatemain,        // Дата основного документа част опл
      vCloseDate,               // Дата закрытия операции
      vDate,                    // Дата
      vPayDate,                 // Срок платежа
      vPayerChargeoffDate,      // Дата списания со счета плательщика
      vClientDate;              // Дата приема от клиента

  var NeedUpdate_pmpaym,
      NeedUpdate_pmrmprop;

  var New_ValueDate,         
      New_I2PlaceDate,       
      New_PayerbankEnterDate,
      New_PartpaymDatemain,  
      New_CloseDate,         
      New_Date,              
      New_PayDate,           
      New_PayerChargeoffDate,
      New_ClientDate;

  var txReport_pm, txReport_rm;

  var first = true;

  var vAccountDebtMasc = "4742%" + SubStr( pAccount, StrLen(pAccount)-6 );


  cmd = rsdCommand( " Select pm.t_paymentid, pm.t_valuedate, pm.t_i2placedate, pm.t_payerbankenterdate, pm.t_partpaymdatemain, pm.t_closedate, "
                    "                        rm.t_date, rm.t_paydate, rm.t_payerchargeoffdate, rm.t_clientdate,                                "
                    "                        pm.t_amount                                                                                       "
                    "   From dpmpaym_dbt pm, dpmrmprop_dbt rm                                                                                  "
                    "  Where ? in ( pm.t_payeraccount, pm.t_receiveraccount )                                                                  "
                    "    and (   ( pm.t_valuedate >= ? and pm.t_valuedate < ? )                                                                "
                    "         or ( rm.t_date      >= ? and rm.t_date      < ? ) )                                                              "
                    "    and rm.t_paymentid = pm.t_paymentid                                                                                   " 
                    "  Order by pm.t_paymentid                                                                                                 " );
  cmd.AddParam( "", RSDBP_IN, pAccount          );
  cmd.AddParam( "", RSDBP_IN, BadPeriodBegin    );
  cmd.AddParam( "", RSDBP_IN, NewCarryDate      );
  cmd.AddParam( "", RSDBP_IN, BadPeriodBegin    );
  cmd.AddParam( "", RSDBP_IN, NewCarryDate      );
  rs = RsdRecordSet( cmd );
  while( rs and rs.MoveNext() )

     if( first )
        [     Обрабатываем платежи по счёту клиента: #]( pClientName + ", номер: " + pAccount + "\n");
        first = false;
     end;

     vErr = 0;

     NeedUpdate_pmpaym   = false;
     NeedUpdate_pmrmprop = false;
     
     vPaymentId          = rs.value(0);
     vAmount             = rs.value(10);

     vValueDate          = rs.value( 1, null, V_DATE );
     vI2PlaceDate        = rs.value( 2, null, V_DATE );
     vPayerbankEnterDate = rs.value( 3, null, V_DATE );
     vPartpaymDatemain   = rs.value( 4, null, V_DATE );
     vCloseDate          = rs.value( 5, null, V_DATE );
     vDate               = rs.value( 6, null, V_DATE );
     vPayDate            = rs.value( 7, null, V_DATE );
     vPayerChargeoffDate = rs.value( 8, null, V_DATE );
     vClientDate         = rs.value( 9, null, V_DATE );

     New_ValueDate          = vValueDate         ;
     New_I2PlaceDate        = vI2PlaceDate       ;
     New_PayerbankEnterDate = vPayerbankEnterDate;
     New_PartpaymDatemain   = vPartpaymDatemain  ;
     New_CloseDate          = vCloseDate         ;
     New_Date               = vDate              ;
     New_PayDate            = vPayDate           ;
     New_PayerChargeoffDate = vPayerChargeoffDate;
     New_ClientDate         = vClientDate        ;
     
     [         Обрабатываем платёж с ИД ########## от ########## на сумму ##############. ]
     ( vPaymentId, vValueDate, vAmount );

     txReport_pm = "            Скорректированы даты (dpmpaym_dbt):\n";
                                              
                                              
     // Дата значения
     if( ( vValueDate >= BadPeriodBegin) and
         ( vValueDate <  NewCarryDate  ) )
         
        New_ValueDate = NewCarryDate;
        NeedUpdate_pmpaym = true;

        txReport_pm = txReport_pm + "            - Дата значения:\t\t\t\t" + vValueDate + " --> " + New_ValueDate + ";\n";
     end;                                                                                                            
     
     // Дата помещения в картотеку 2
     if( ( vI2PlaceDate >= BadPeriodBegin) and
         ( vI2PlaceDate <  NewCarryDate  ) )

        New_I2PlaceDate = NewCarryDate;
        NeedUpdate_pmpaym = true;

        txReport_pm = txReport_pm + "            - Дата помещения в K2:\t\t\t\t" + vI2PlaceDate + " --> " + New_I2PlaceDate + ";\n";
     end;                                                                               

     // Дата поступления в банк плательщик
     if( ( vPayerbankEnterDate >= BadPeriodBegin) and
         ( vPayerbankEnterDate <  NewCarryDate  ) )

        New_PayerbankEnterDate = NewCarryDate;
        NeedUpdate_pmpaym = true;

        txReport_pm = txReport_pm + "            - Дата поступления в банк:\t\t\t" + vPayerbankEnterDate + " --> " + New_PayerbankEnterDate + ";\n";
     end;                                                                                                  

     // Дата основного документа част опл
     if( ( vPartpaymDatemain >= BadPeriodBegin) and
         ( vPartpaymDatemain <  NewCarryDate  ) )

        New_PartpaymDatemain = NewCarryDate;
        NeedUpdate_pmpaym = true;

        txReport_pm = txReport_pm + "            - Дата част опл:\t\t\t\t" + vPartpaymDatemain + " --> " + New_PartpaymDatemain + ";\n";
     end;                                                                               

     /*
     // Дата закрытия операции
     if( ( vCloseDate >= BadPeriodBegin) and
         ( vCloseDate <  NewCarryDate  ) )

        New_CloseDate = NewCarryDate;
        NeedUpdate_pmpaym = true;
     end;*/

     txReport_rm = "            Скорректированы даты (dpmrmprop_dbt):\n";

     // Дата
     if( ( vDate >= BadPeriodBegin) and
         ( vDate <  NewCarryDate  ) )

        New_Date = NewCarryDate;
        NeedUpdate_pmrmprop = true;

        txReport_rm = txReport_rm + "            - Дата:\t\t\t\t\t" + vDate + " --> " + New_Date + ";\n";
     end;                                                                               

     // Срок платежа
     if( ( vPayDate >= BadPeriodBegin) and
         ( vPayDate <  NewCarryDate  ) )

        New_PayDate = NewCarryDate;
        NeedUpdate_pmrmprop = true;

        txReport_rm = txReport_rm + "            - Срок платежа:\t\t\t\t" + vPayDate + " --> " + New_PayDate + ";\n";
     end;                                                                               

     // Дата списания со счета плательщика
     if( ( vPayerChargeoffDate >= BadPeriodBegin) and
         ( vPayerChargeoffDate <  NewCarryDate  ) )

        New_PayerChargeoffDate = NewCarryDate;
        NeedUpdate_pmrmprop = true;

        txReport_rm = txReport_rm + "            - Дата списания со счета плательщика:\t" + vPayerChargeoffDate + " --> " + New_PayerChargeoffDate + ";\n";
     end;                                                                                       

     // Дата приема от клиента
     if( ( vClientDate >= BadPeriodBegin) and
         ( vClientDate <  NewCarryDate  ) )

        New_ClientDate = NewCarryDate;
        NeedUpdate_pmrmprop = true;

        txReport_rm = txReport_rm + "            - Дата приема от клиента:\t\t\t" + vClientDate + " --> " + New_ClientDate + ";\n";
     end;                                                                               


     vErr = 0;
     if( NeedUpdate_pmpaym )

        cmd = RsdCommand( " BEGIN                                            "
                          " Update dpmpaym_dbt Set t_valuedate          = ?, "
                          "                        t_i2placedate        = ?, "
                          "                        t_payerbankenterdate = ?, "
                          "                        t_partpaymdatemain   = ?, "
                          "                        t_closedate          = ?  "
                          "  Where t_paymentid = ?;                          "
                          " EXCEPTION WHEN OTHERS                            "
                          "    THEN ? := 8888;                               "
                          " END;                                             " );
        cmd.AddParam( "", RSDBP_IN, New_ValueDate          );
        cmd.AddParam( "", RSDBP_IN, New_I2PlaceDate        );
        cmd.AddParam( "", RSDBP_IN, New_PayerbankEnterDate );
        cmd.AddParam( "", RSDBP_IN, New_PartpaymDatemain   );
        cmd.AddParam( "", RSDBP_IN, New_CloseDate          );
        cmd.AddParam( "", RSDBP_IN, vPaymentId             );
        cmd.AddParam( "vErr", RSDBP_OUT, V_INTEGER         );
        cmd.execute();

        vErr = cmd.value( "vErr" );

        if( vErr == 8888 )
           [!            Ошибка при изменении дат платежа в таблице dpmpaym_dbt (Дата значения, Дата помещения в K2, Дата поступления в банк, Дата част опл).];
        else
           println( txReport_pm );
        end;

     end;



     vErr = 0;
     if( NeedUpdate_pmrmprop )

        cmd = RsdCommand( " BEGIN                                              "
                          " Update dpmrmprop_dbt Set t_date               = ?, "
                          "                          t_paydate            = ?, "
                          "                          t_payerchargeoffdate = ?, "
                          "                          t_clientdate         = ?  "
                          "  Where t_paymentid = ?;                            "
                          " EXCEPTION WHEN OTHERS                              "
                          "    THEN ? := 9999;                                 "
                          " END;                                               " );
        cmd.AddParam( "", RSDBP_IN, New_Date               );
        cmd.AddParam( "", RSDBP_IN, New_PayDate            );
        cmd.AddParam( "", RSDBP_IN, New_PayerChargeoffDate );
        cmd.AddParam( "", RSDBP_IN, New_ClientDate         );
        cmd.AddParam( "", RSDBP_IN, vPaymentId             );
        cmd.AddParam( "vErr", RSDBP_OUT, V_INTEGER         );
        cmd.execute();

        vErr = cmd.value( "vErr" );

        if( vErr == 9999 )
           [!            Ошибка при изменении дат платежа в таблице dpmrmprop_dbt (Дата, Срок платежа, Дата списания со счета плательщика, Дата приема от клиента).];
        else
           println( txReport_rm );
        end;

     end;

  end;


  OnError( er ) /* Обработка ошибок времени выполонения */
     [!           При изменении платежа возникла ошибка.
                  - Сообщение: #
                  - Модуль:    #
                  - Строка:    #
     ]( er.Message, er.Module, er.Line );
    
END;

     
     
     


MACRO ProcessTemplateFile()

 var CurRow, ErrCode, tmp;
 var TotalRowCount = 0;

 var cmd;

 var vClientName, vNewAccount;


   //TotalRowCount = int( ActiveSheet.rows.count() );
   //TotalRowCount = 500;

   // Посчитаем строчки
   CurRow = 3;
   while( true )

      vNewAccount = ActiveSheet.Cells( CurRow, COLUMNCODE_Account ).Value;
      if( not vNewAccount )
         CurRow = CurRow - 1;
         break;
      end;

      CurRow = CurRow + 1;
   end;
   TotalRowCount = CurRow - 2;


   //BegAction( 500, "Обрабатывается файл\n" + vTemplateName_AC );
   initProgress( TotalRowCount, null, "Обрабатывается файл " + vTemplateName );

   //debugbreak;

   tmp = 1;
   CurRow = 3;
   while( tmp <= TotalRowCount )

      vClientName = ActiveSheet.Cells( CurRow, COLUMNCODE_Client  ).Value;
      vNewAccount = ActiveSheet.Cells( CurRow, COLUMNCODE_Account ).Value;

      if( vNewAccount )

         //[     Обрабатываем счёт клиента: #]( vClientName + ", номер: " + vNewAccount + "\n");

         RemakeCarries( vNewAccount, vClientName );

         CorrectPaymentsInformation( vNewAccount, vClientName );


      // Таблица закончилась
      else
         break;
      end;

      useProgress( tmp );

      tmp = tmp + 1;
      CurRow = CurRow + 1;
   end;

   //EndAction();
   remProgress();


END;



// Открытие файла с информацией о клиентах и счетах
if( OpenExcelFile( vTemplateName, vVisible, vReadOnly, vTemplateDir ) )

   [   
   
       Протокол выполнения процедуры переноса проводок из ########## в ##########   

       Обрабатывается файл #


   ]
   ( BadPeriodBegin, NewCarryDate, vTemplateName );


   ProcessTemplateFile();


   ExcelApplication.Quit;
   ExcelApplication = null;

end;

