// -------------------------------------------------------------------------------------------------
// @filename: dkb_constr_update.mac v.1
// @author  : 2012-08-25 zip_z. C-12958
// @desc    : Конструктор ТП. Обновление информации по клиенту
// @changes : none
// -------------------------------------------------------------------------------------------------

import ldmklbr, globals, oralib, frontCommon, likepy, diver, lib_registry, lib_front;

private const RC_NAME_PANEL = "DKB", 
              RC_PATH = "zResLib.lbr";


// @desc      : класс-описатель панели
private class (TRecHandler) TPanelDescriptor (LbrName)
    InitTRecHandler (RC_NAME_PANEL, LbrName, true);
    private var TotalProc,DistinctProc, TotalFlag, DistinctFlag, TotalClient, StClient;
    
    private const CODE_IN_LIST = 6002;
    private const SET_CHAR     = strFor (88);
    private const UNSET_CHAR   = strFor (0);
    
    // @desc: динамическое формирование и выполнение Update для обновления информации по клиенту 
    //        согласно параметрам, указанным в панели при запуске процедуры
    private macro ExecuteUpdateProc (front_parm)
        var params = TArray ();
        var sql = "update   dconstrcom_dbt t Set   $sqlSetsum$ $comma$ $sqlSetKoeff$  WHERE   $sqlwhere$";

        if ((this.rec.DistinctFlag == SET_CHAR) and (this.rec.DistinctProc == SET_CHAR)) 
            sql = strsubst (sql, "$comma$", ",");
        else
            sql = strsubst (sql, "$comma$", " ");
        end;
        
         
        if (this.rec.DistinctProc == SET_CHAR) // обновление сумм
            sql = strsubst (sql, "$sqlSetsum$",
                  "         t_depositsum  = DECODE (:d, 1, :depositsum, 0),"  + "\n" + 
                  "         t_creditsum   = DECODE (:k, 1, :creditsum,  0),"  + "\n" + 
                  "         t_oversum     = DECODE (:o, 1, :oversum,    0),"  + "\n" + 
                  "         t.t_ratesum   = DECODE (:p, 1, :ratesum,    0) ");
            
            params [params.size] = SQLParam ("d",          front_parm (2)      ); // 2 - @D  - Наличие депозитного продукта (0 - отсутствует,1 - подключен) 
            params [params.size] = SQLParam ("depositsum", this.rec.depositsum ); 
            params [params.size] = SQLParam ("k",          front_parm (3)      ); // 3 - @K  - Наличие кредитного продукта
            params [params.size] = SQLParam ("creditsum",  this.rec.creditsum  );
            params [params.size] = SQLParam ("o",          front_parm (4)      ); // 4 - @O  - Наличие овердрафтного продукта 
            params [params.size] = SQLParam ("oversum",    this.rec.oversum    );
            params [params.size] = SQLParam ("p",          front_parm (5)      ); // 5 - @P  - Наличие продукта начисления процентов
            params [params.size] = SQLParam ("ratesum",    this.rec.ratesum    );
            TotalFlag = TotalFlag + 1;
            
        else
            sql = strsubst (sql, "$sqlSetsum$", " ");
        end;
        
        if (this.rec.DistinctFlag == SET_CHAR) // обновление коэффициентов
            sql = strsubst (sql, "$sqlSetKoeff$",
                  "         t_depositflag = DECODE (:depositflag, '+', 1, '-', -1, 0)," + "\n" + 
                  "         t_creditflag  = DECODE (:creditflag,  '+', 1, '-', -1, 0)," + "\n" + 
                  "         t_overflag    = DECODE (:overflag,    '+', 1, '-', -1, 0)," + "\n" + 
                  "         t_rateflag    = DECODE (:rateflag,    '+', 1, '-', -1, 0) ");
            
            params [params.size] = SQLParam ("depositflag",this.rec.depositflag);
            params [params.size] = SQLParam ("creditflag", this.rec.creditflag );
            params [params.size] = SQLParam ("overflag",   this.rec.overflag   );
            params [params.size] = SQLParam ("rateflag",   this.rec.rateflag   );

            TotalProc = TotalProc + 1;
        else 
            sql = strsubst (sql, "$sqlSetKoeff$", " ");
        end;
        
        sql = strsubst (sql, "$sqlwhere$", " t_object = :object ");
        params [params.size] = SQLParam ("obj", front_parm (0) );
        
        ExecSQL (sql, params);
        
        sql = "UPDATE   dconstrcom_dbt t"                                  + "\n" + 
              "   SET   t_DepositProduct = t_DepositFlag * t_DepositSum,"  + "\n" + 
              "         t_CreditProduct =  t_CreditFlag  * t_CreditSum,"   + "\n" + 
              "         t_OverProduct =    t_OverFlag    * t_OverSum,"     + "\n" + 
              "         t_RateProduct =    t_RateFlag    * t_RateSum"      + "\n" + 
              " WHERE   t_object = :m_object";
        ExecSQL (sql, MakeArray (SQLParam ("m_object", front_parm (0) )));
        
        if (this.rec.DistinctProc == SET_CHAR) // обновление сумм
            sql =        " UPDATE   dconstrcom_dbt t SET   "
                + "\n" + "          t.t_sumpacket ="
                + "\n" + "             (SELECT   t_sumpacket"
                + "\n" + "                FROM   ("
                + "\n" + "                         SELECT   1 AS t_typepacket, t_flag AS t_numpacket, t_note AS t_sumpacket FROM   dllvalues_dbt WHERE   t_list = 6003"
                + "\n" + "                             UNION ALL"
                + "\n" + "                         SELECT   2 AS t_typepacket, t_flag AS t_numpacket, t_note AS t_sumpacket FROM   dllvalues_dbt WHERE   t_list = 6004"
                + "\n" + "                       ) vw"
                + "\n" + "               WHERE   vw.t_typepacket = t.t_typepacket AND vw.t_numpacket = t.t_numpacket"
                + "\n" + "             ),"

                + "\n" + "          (t_sumpayment, t_sumafter16, t_sumbesp ) = "
                + "\n" + "          ( SELECT   DECODE (t.t_typepacket, 1, (SELECT   t_note FROM   dllvalues_dbt WHERE   t_list = 6002 AND t_element = 5),"
                + "\n" + "                                                (SELECT   t_note FROM   dllvalues_dbt WHERE   t_list = 6002 AND t_element = 6)) AS t_sumpayment,"
                + "\n" + "                    (SELECT t_note FROM dllvalues_dbt WHERE   t_list = 6002 AND t_element = 7)  AS t_sumafter16,"
                + "\n" + "                    (SELECT t_note FROM dllvalues_dbt WHERE   t_list = 6002 AND t_element = 8)  AS t_sumbesp"
                + "\n" + "  FROM   DUAL )"
                + "\n" + "  WHERE   t_object = :object";
            ExecSQL (sql, MakeArray (SQLParam ("m_object", front_parm (0) )));
        end;
    onError (e)
    end;
    
    // @desc: получение параметров клиента из Фронта
    private macro GetFrontClientParams (_acc, _conn)
        // ------- входящие параметры ---------------
        array param;
        param [0] = string (_acc); //   @T_OBJECT      - Расчётный счёт Клиента
        param [1] = {MFO_BANK};    //   @MFO_BANK      - БИК Банка, константа

        // ------- исходящие параметры --------------
        array Out;
        out [0] = string (_acc); 
        out [1] = {MFO_BANK};
        out [2] = 0;
        out [3] = 0;
        out [4] = 0;
        out [5] = 0;

        var rs = RSADORecordset (ExecuteFrontProcEx ("rsb6_get_f_contr_client_prod", param, _conn, 26, Out));
        if (rs.movenext ())
            out [0] = rs.m_value[0]; // 0 -  @T_OBJECT - Расчётный счёт Клиента
            out [1] = rs.m_value[1]; // 1 -  @MFO_BANK - БИК Банка, константа
            out [2] = rs.m_value[2]; // 2 -  @D        - Наличие депозитного продукта (0 - отсутствует,1 - подключен) 
            out [3] = rs.m_value[3]; // 3 -  @K        - Наличие кредитного продукта
            out [4] = rs.m_value[4]; // 4 -  @O        - Наличие овердрафтного продукта 
            out [5] = rs.m_value[5]; // 5 -  @P        - Наличие продукта начисления процентов 
        end;
        ExecuteUpdateProc (Out);
        return Out;
    end;
    
    // @desc: подготовка "курсора" для обновления информации по клиентам.
    //        Само обновление производится в ExecuteUpdateProc (см. выше) по данным, которые возвращает
    //        из Фронта функция GetFrontClientParams ()
    private macro UpdateClientInfo ()
        array a;
        var sql = "SELECT   COUNT (1) OVER (PARTITION BY NULL) n, " + "\n" + 
                  "         t_object, (SELECT   t_code" + "\n" + 
                  "                      FROM   dobjcode_dbt" + "\n" + 
                  "                     WHERE   t_objecttype = 3 AND t_codekind = 3 AND t_objectid = rsbsessiondata.ourbank AND t_state = 0)" + "\n" + 
                  "                      t_mfo" + "\n" + 
                  "  FROM   dconstrcom_dbt t" + "\n" + 
                  " WHERE   t_state = 0 AND (t_dateclose >= RSBSessionData.CurDate OR t_dateclose = TO_DATE ('01.01.0001', 'dd.mm.yyyy'))"; 
        if (this.rec.DistinctProc == SET_CHAR) sql = sql + " AND NVL (t_distinctproc, CHR(0)) = CHR (0) " + "\n"; end;
        if (this.rec.DistinctFlag == SET_CHAR) sql = sql + " AND NVL (t_distinctflag, CHR(0)) = CHR (0) " + "\n"; end;

        sql = ExecSQLSelect (sql);
        var c    = FR_GlobalConnection (FR_LEGAL, "RS-Bank::Обновление информации по клиентам");
        var conn = c.StartPooling (); 
        var i = 0;
        
        if (sql.MoveNext ())
            InitProgress (sql.Value ("n"));
            a = GetFrontClientParams (sql.Value ("t_object"), conn);
            i = i + 1;
            UseProgress (i);
            while (sql.MoveNext ())
                a = GetFrontClientParams (sql.Value ("t_object"), conn);
                i = i + 1;
                UseProgress (i);
            end;
        end;
        c.endPooling (); 
        c = null; 
    end;
    
    // @desc: печать протокола
    private macro PrintProtocol ()
        var fname = GetTxtFileName ("ClientProcUpdate");
        file fp () txt;
        SetOutput (fname);
        [ Результаты массовой обработки клиентов при обновлении параметров Конструктора ТП
               Обновление коэффициентов
                  Обновлено клиентов          : ######
                  С индивидуальными значениями: ######
               Обновление сумм
                  Обновлено клиентов          : ######
                  С индивидуальными значениями: ######
               Всего активных клиентов        : ######
               Всего неактивных клиентов      : ###### ] (TotalProc, DistinctProc, TotalFlag, DistinctFlag, TotalClient, StClient);
        SetOutput (NULL, true);
        if (open (fp, fname)) viewFile (fp); else MsgBox ("Не удалось открыть файл протокола"); end;
    end;
    
    // @desc: обработчик панели диалога
    macro handler (dlg, cmd, id, key)
        var sql, rs, f, log_string;
        if (cmd == DLG_Init)
            this.rec.RateFlag = this.rec.DepositFlag = this.rec.CreditFlag = this.rec.OverFlag =  "+";
            sql = "select (select to_number (t_note) from dllValues_dbt where t_List = " + CODE_IN_LIST + " and t_code = 1) DepositSum,"
                  "       (select to_number (t_note) from dllValues_dbt where t_List = " + CODE_IN_LIST + " and t_code = 2) CreditSum,"
                  "       (select to_number (t_note) from dllValues_dbt where t_List = " + CODE_IN_LIST + " and t_code = 3) OverSum,"
                  "       (select to_number (t_note) from dllValues_dbt where t_List = " + CODE_IN_LIST + " and t_code = 4) RateSum "
                  " from dual";
            rs = ExecSQLSelect (sql);
            if (rs.MoveNext ())
                this.rec.DepositSum = rs.Value ("DepositSum");
                this.rec.CreditSum  = rs.Value ("CreditSum");
                this.rec.OverSum    = rs.Value ("OverSum");
                this.rec.RateSum    = rs.Value ("RateSum");
            else
                this.rec.DepositSum = this.rec.CreditSum  = this.rec.OverSum = this.rec.RateSum  = 0;
            end;
            this.rec.DistinctFlag = this.rec.DistinctProc = strFor (0);

        elif (cmd == DLG_KEY)
            if (key == 32) // пробел
                f = strUpr (trim (fldName(id)));
                if ((f == "DEPOSITFLAG") or (f == "CREDITFLAG") or (f == "OVERFLAG") or (f == "RATEFLAG"))
                    if   (dlg.(f) == "0") dlg.(f) = "+";
                    elif (dlg.(f) == "+") dlg.(f) = "-";
                    elif (dlg.(f) == "-") dlg.(f) = "0";
                    end;
                elif ((f == "DISTINCTFLAG") or (f == "DISTINCTPROC"))
                    dlg.(f) = strfor (abs (88 - codefor (dlg.(f)))); // chr (0) или chr (88)
                end;
                UpdateFields (dlg);
            elif (key == 316) // F2
                if ((this.rec.DistinctFlag == UNSET_CHAR) and (this.rec.DistinctProc == UNSET_CHAR))
                    MsgBox ("Параметры процедуры обновления заданы неверно|(коэффициенты и суммы продуктов не будут обновлены)");
                else
                    log_string = " *** КОНСТРУКТОР ТП: ОБНОВЛЕНИЕ ИНФОРМАЦИИ ПО КЛИЕНТАМ *** " + "\n" +
                                 " Депозитный продукт  : " + this.rec.depositflag  + "(" + this.rec.depositsum + ")" + "\n" +
                                 " Кредитный продукт   : " + this.rec.creditflag   + "(" + this.rec.creditsum  + ")" + "\n" +
                                 " Овердрафт           : " + this.rec.overflag     + "(" + this.rec.oversum    + ")" + "\n" +
                                 " Продукт начисления%%: " + this.rec.rateflag     + "(" + this.rec.ratesum    + ")" + "\n" +
                                 "\n" +                                                                            
                                 " Обновлять значения коэффициентов:  [" + this.rec.DistinctFlag + "]" + "\n" + 
                                 " Обновлять стоимость продуктов   :  [" + this.rec.DistinctProc + "]" + "\n";
                    
                    if (not WriteFiscLog (OLSTRPROC, log_string))
                        MsgBox ("Не удалась попытка записи в фискальный журнал");
                    end;
                    
                    UpdateClientInfo ();
                    PrintProtocol ();
                    return CM_SELECT;
                end;
            end;
            return CM_DEFAULT;
        end;
        UpdateFields (dlg);
    end;
    
    // @desc: вызов панели диалога
    macro Show
        // 1. инициализируем счетчики
        var sql = "SELECT   0 AS totalproc," + "\n" + 
                  "         NVL ((SELECT   COUNT (1) FROM   dconstrcom_dbt WHERE   t_distinctproc != CHR (0)), 0) AS distinctproc," + "\n" + 
                  "         0 AS totalflag," + "\n" + 
                  "         NVL((SELECT   COUNT (1) FROM   dconstrcom_dbt WHERE   t_distinctflag != CHR (0)), 0) AS distinctflag," + "\n" + 
                  "         NVL((SELECT   COUNT (1) FROM   dconstrcom_dbt " + "\n" + 
                  "           WHERE   t_state = 0 " + "\n" + 
                  "             AND (t_dateclose >= rsbsessiondata.curdate OR " + "\n" + 
                  "                  t_dateclose = TO_DATE ('01.01.0001', 'dd.mm.yyyy'))), 0) AS totalclient," + "\n" + 
                  "         NVL((SELECT   COUNT (1) FROM   dconstrcom_dbt WHERE   t_state = 1), 0) AS stclient" + "\n" + 
                  "  FROM   DUAL";
        sql = ExecSQLSelect (sql);
        sql.MoveNext ();
        TotalProc     = sql.Value ("TotalProc"    ,NULL, V_INTEGER);
        DistinctProc  = sql.Value ("DistinctProc" ,NULL, V_INTEGER);
        TotalFlag     = sql.Value ("TotalFlag"    ,NULL, V_INTEGER);
        DistinctFlag  = sql.Value ("DistinctFlag" ,NULL, V_INTEGER);
        TotalClient   = sql.Value ("TotalClient"  ,NULL, V_INTEGER);
        StClient      = sql.Value ("StClient"     ,NULL, V_INTEGER);
        
        // 2. покажем панель параметров
        return runDialog (this, R2M (this, "Handler"));
    end;
end;

// -------------------------------------------------------------------------------------------------
// точка входа
// -------------------------------------------------------------------------------------------------
if (not (ВходитВГруппу ({oper}, 202)))
    MsgBox ("Вы не включены в группу \"Конструктор тарифных планов\" (202)");
else
    var parm = TPanelDescriptor (RSL_GetLbrPath (RC_PATH, true));
    var hwnd = TRecHandler (RC_NAME_PANEL, parm, true);
    parm.Show ();
end;
    
exit (1);