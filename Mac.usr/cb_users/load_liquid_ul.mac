/************************************************************************/
/* ЗАГРУЗКА СПРАВОЧНИКА ЛИКВЮЛ ЦБ                                       */    
/*                                                                      */
/* Дунаев Аркадий                                                       */
/* Начато 13.03.2013                                                    */
/*                                                                      */
/* C-17537                                                              */
/*                                                                      */
/************************************************************************/

Import BankInter, PTInter, rsd, rsexts, "timestat.mac";

File CSV_File("") txt 4000;

var stat : bool;
var ImportStringArray : TArray;   
var FullCount = 0;
var DirOnSP : string = ExecMacroFile("lib_registry.mac","RSL_GetRegistryValue","BANK_INI/ОБЩИЕ ПАРАМЕТРЫ/ДИРЕКТОРИИ/TEXTDIR",True);
var LocalFullPathFile : string = "$C:\\egrul\\"; 
var NameFileLikvUL : string = "UL_LIQUIDATION.csv";
var NameFileStatus : string = "DICT_UL_LIQUIDATION_STATUS.CSV";

// Очистка временной таблицы БД для загрузки данных из файла в варианте как есть без разбора по полям
macro ClearTempTable(TablName : string) : bool
var cmd : RsdCommand;
  cmd = RsdCommand("TRUNCATE TABLE "+TablName);
  cmd.execute();
end;

// Размещаем очередную строку в массиве, служащим буфером, для последующей множественной вставки в таблицу БД
macro AddToTempArray( ImportString : String )
  ImportStringArray(ImportStringArray.Size) = ImportString;
end;

// Переносим записи из буферного массива в таблицу БД по 5000 записей за один прием. Остаток записей может быть и меньше.
macro InsertIntoTempTable( TablName : string, Flush : bool ) : bool
var ins : RsbSQLInsert;
var stat = true;
  if( Flush == null ) 
    Flush = false; 
  end;
  if( (ImportStringArray.Size == 5000) or ((Flush) and (ImportStringArray.Size > 0)) )
    ins = RsbSQLInsert("INSERT INTO "+TablName+" (t_rec) VALUES (?)", 1, ImportStringArray.Size );
    ins.AddParam( V_STRING, ImportStringArray, 4000 );
    stat = ins.Insert();
    ImportStringArray.Size = 0;
  end;
  return stat;
end;

// Заливка подготовленных данных в итоговую пользовательскую таблицу с добавлением новых записей и не меняя уже существующих. Уникальность по ОГРН
macro TextRequest(ul : bool) : string
var t : string;
  if (ul)
    t = "MERGE INTO USR_UL_LIQUIDATION US USING " +
        "(select  " +
        "    substr(t_rec,                            1, instr(t_rec, chr(9), 1, 1)-1)                            as inn, "+
        "    substr(t_rec, instr(t_rec, chr(9), 1, 1)+1, instr(t_rec, chr(9), 1, 2)-instr(t_rec, chr(9), 1, 1)-1) as ogrn, "+
        "    substr(t_rec, instr(t_rec, chr(9), 1, 2)+1, instr(t_rec, chr(9), 1, 3)-instr(t_rec, chr(9), 1, 2)-1) as kpp, "+
        "    substr(t_rec, instr(t_rec, chr(9), 1, 3)+1, instr(t_rec, chr(9), 1, 4)-instr(t_rec, chr(9), 1, 3)-1) as namep, "+
        "    substr(t_rec, instr(t_rec, chr(9), 1, 4)+1, instr(t_rec, chr(9), 1, 5)-instr(t_rec, chr(9), 1, 4)-1) as names, "+
        "    to_number( "+
        "    substr(t_rec, instr(t_rec, chr(9), 1, 5)+1, instr(t_rec, chr(9), 1, 6)-instr(t_rec, chr(9), 1, 5)-1) "+
        "    ) "+
        "      as status_liquidation_inner_id, "+
        "    to_date( "+
        "    substr(t_rec, instr(t_rec, chr(9), 1, 6)+1, instr(t_rec, chr(9), 1, 7)-instr(t_rec, chr(9), 1, 6)-1), "+
        "           'dd.mm.yyyy')                                                                                 as dtstart, "+
        "    substr(t_rec, instr(t_rec, chr(9), 1, 7)+1, instr(t_rec, chr(9), 1, 8)-instr(t_rec, chr(9), 1, 7)-1) as okato, "+
        "    substr(t_rec, instr(t_rec, chr(9), 1, 8)+1, instr(t_rec, chr(9), 1, 9)-instr(t_rec, chr(9), 1, 8)-1) as indeks, "+
        "    substr(t_rec, instr(t_rec, chr(9), 1, 9)+1, instr(t_rec, chr(9), 1,10)-instr(t_rec, chr(9), 1, 9)-1) as region_name, "+
        "    substr(t_rec, instr(t_rec, chr(9), 1,10)+1, instr(t_rec, chr(9), 1,11)-instr(t_rec, chr(9), 1,10)-1) as raion_name, "+
        "    substr(t_rec, instr(t_rec, chr(9), 1,11)+1, instr(t_rec, chr(9), 1,12)-instr(t_rec, chr(9), 1,11)-1) as gorod_name, "+
        "    substr(t_rec, instr(t_rec, chr(9), 1,12)+1, instr(t_rec, chr(9), 1,13)-instr(t_rec, chr(9), 1,12)-1) as naspunkt_name, "+
        "    substr(t_rec, instr(t_rec, chr(9), 1,13)+1, instr(t_rec, chr(9), 1,14)-instr(t_rec, chr(9), 1,13)-1) as street_name, "+
        "    substr(t_rec, instr(t_rec, chr(9), 1,14)+1, instr(t_rec, chr(9), 1,15)-instr(t_rec, chr(9), 1,14)-1) as dom, "+
        "    substr(t_rec, instr(t_rec, chr(9), 1,15)+1, instr(t_rec, chr(9), 1,16)-instr(t_rec, chr(9), 1,15)-1) as korp, "+
        "    substr(t_rec, instr(t_rec, chr(9), 1,16)+1, instr(t_rec, chr(9), 1,17)-instr(t_rec, chr(9), 1,16)-1) as kvart "+
        "from (select max(t_rec) as t_rec from usr_liquid_ul_tmp  "+
        "      group by substr(t_rec, instr(t_rec, chr(9), 1, 1)+1, instr(t_rec, chr(9), 1, 2)-instr(t_rec, chr(9), 1, 1)-1))) temp_usr "+
        "        ON   (temp_usr.OGRN = US.OGRN) "+
        "WHEN NOT MATCHED "+
        "THEN "+
        " INSERT (US.INN,                 US.OGRN,              US.KPP,          US.NAMES,             US.NAMEP,            US.STATUS_LIQUIDATION_INNER_ID,       "+
        "         US.DTSTART,             US.OKATO,             US.INDEKS,       US.REGION_NAME,       US.RAION_NAME,       US.GOROD_NAME,       "+
        "         US.NASPUNKT_NAME,       US.STREET_NAME,       US.DOM,          US.KORP,              US.KVART) "+
        " VALUES (temp_usr.INN,           temp_usr.OGRN,        temp_usr.KPP,    temp_usr.NAMES,       temp_usr.NAMEP,      temp_usr.STATUS_LIQUIDATION_INNER_ID, "+
        "         temp_usr.DTSTART,       temp_usr.OKATO,       temp_usr.INDEKS, temp_usr.REGION_NAME, temp_usr.RAION_NAME, temp_usr.GOROD_NAME, "+
        "         temp_usr.NASPUNKT_NAME, temp_usr.STREET_NAME, temp_usr.DOM,    temp_usr.KORP,        temp_usr.KVART)";
  else
    t = "insert into USR_DICT_UL_LIQUIDATION_STATUS (STATUS_LIQUIDATION_INNER_ID, id, name) "+
        "SELECT                                                                             "+
        "   SUBSTR (t_rec, 1, INSTR(t_rec, CHR(9), 1, 1)-1) AS STATUS_LIQUIDATION_INNER_ID, "+
        "   SUBSTR (t_rec, instr(t_rec, chr(9), 1, 1)+1, instr(t_rec, chr(9), 1, 2)-instr(t_rec, chr(9), 1, 1)-1) AS ID, "+
        "   SUBSTR (t_rec, INSTR(t_rec, CHR(9), 1, 2)+1) AS NAME "+
        "FROM   USR_DICT_UL_LIQUID_STATUS_TMP";
  end;
  return t;
end;

macro FillingTotalInUserTable(TextRequest1) : bool
var cmd : RsdCommand;
  cmd = RsdCommand(TextRequest1);
  cmd.execute();
end;

macro Filds (ul : bool) : string
var s : string;
  if (ul)
    s = "inn"+StrFor(9)+"ogrn"+StrFor(9)+"kpp"+StrFor(9)+"namep"+StrFor(9)+"names"+StrFor(9)+"status_liquidation_inner_id"+StrFor(9)+"dtstart"+StrFor(9)+
        "okato"+StrFor(9)+"indeks"+StrFor(9)+"region_name"+StrFor(9)+"raion_name"+StrFor(9)+"gorod_name"+StrFor(9)+"naspunkt_name"+StrFor(9)+
        "street_name"+StrFor(9)+"dom"+StrFor(9)+"korp"+StrFor(9)+"kvart";
  else
    s = "STATUS_LIQUIDATION_INNER_ID"+StrFor(9)+"ID"+StrFor(9)+"NAME";
  end;
  return s;
end;

macro processing(ul : bool );
var fName, lName : string;
var nCount : integer;
var NameTempTable : string;
var Comment : string;
  if (ul) 
    Comment = "ЛИКВЮЛ - UL_LIQUIDATION.CSV"; 
    fName = DirOnSP + "\\" + NameFileLikvUL;
    NameTempTable = "usr_liquid_ul_tmp";
    lName = LocalFullPathFile+NameFileLikvUL;
  else 
    Comment = "состояний - DICT_UL_LIQUIDATION_STATUS.CSV"; 
    fName = DirOnSP + "\\" + NameFileStatus;
    NameTempTable = "USR_DICT_UL_LIQUID_STATUS_TMP";
    lName = LocalFullPathFile+NameFileStatus;
  end;
  stat = copyfile(lName, fName, true, "Копирование файла "+Comment);
  if( stat )
    stat = Open( CSV_File, fName, "lcansi" );
    if( not stat )
      msgbox( "Ошибка открытия файла импорта " + fName );
    else
      next(CSV_File);
      if (StrUpr(CSV_File.str) != StrUpr(Filds(ul))) 
        stat = false;
        msgbox( "Не верный формат файла " + fName );
      else
        ImportStringArray = TArray;
        ClearTempTable(NameTempTable);
        if (not ul)
          ClearTempTable("USR_DICT_UL_LIQUIDATION_STATUS");
        end;
        nCount = 0;
        InitProgress( -1, " ~Ctrl-Brk~ Прервать", "Обработка файла "+Comment );
        stat = next(CSV_File);
        while (stat)
          nCount = nCount + 1;
          AddToTempArray( CSV_File.str );
          stat = InsertIntoTempTable(NameTempTable);
          UseProgress( nCount );
          stat = next(CSV_File);
        end;
        stat = InsertIntoTempTable(NameTempTable, true);
        RemProgress();
        BegAction (1, "Завершение загрузки", false);
        FillingTotalInUserTable(TextRequest(ul));
        ClearTempTable(NameTempTable);
        EndAction();
        FullCount = FullCount + nCount;
      end;
    end;
    Close(CSV_File);
  end;
end;

WriteFiscLog(OLstrproc,"load_liquid_ul.mac");
private var filen = ExecMacroFile("lib_windows_system.mac","RSI_SelectFile",",*.CSV");

if (filen != "")
  LocalFullPathFile = "$" + SplitFile(filen); //SubStr(filen,1,Index(filen,NameFileLikvUL)-1);
/*
private var LOG_ENTRY : string = "load_liquid_ul.mac::begin";
private var OperationNumberForLog = 14;

ExecMacroFile ("lib_log.mac", "LogProcedure", LOG_ENTRY);
SaveBeginTime();
*/
// Начало обработки
  processing(true); //Обработка ЛИКВЮЛ
  processing(false); //Обработка справочника состояний
else
  msgbox("Файл не выбран. Импортировать нечего.");
  stat = false;
end;

if (stat)
  //LOG_ENTRY = "load_liquid_ul.mac::end";
  //ExecMacroFile ("lib_log.mac", "LogProcedure", LOG_ENTRY);
  //SaveAmount(FullCount);
  //SaveEndTime(OperationNumberForLog);
  WriteFiscLog(OLfinproc,"load_liquid_ul.mac");
  exit(1);
else
  //SaveAmount(0);
  //SaveEndTime(OperationNumberForLog);
end;

