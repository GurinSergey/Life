/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

   EVG Макрос вызова процедуры удаления тестовых документов системы Фронт.

   Банк: все банки

   Создан: Гуцу Е.В. 17/01/2013

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
// EVG 13/02/2013 Добавлена проверка длины заголовка и текста письма. Если длина больше 100 и 2048 соответственно,
//                заголовок / текст письма обрезаются.
// EVG 13/02/2013 Реализована печать даты / времени ввода документа в случае, если по нему нет выполненных шагов
//                (документ находится в отложенных или в открытых, но без выполненных шагов).
// EVG 15/02/2013 Реализована отправка письма-уведопления в Lotus без участия Фронт.
//
// EVG 21/02/2013 Добавлено заполнения поля "SendTo" документа Lotus адресом получателя письма (ранее адрес указывался
//                в методе Send() при отправке письма).
// EVG 22/02/2013 Перенёс извлечение даты / времени платежа (доработка #2 от 13/02/2013) на момент ДО удаления этого
//                платежа :). Вернул псевдографику.

import PaymInter, FIInter, Cb_SQL, globals, Календарь, rsexts;

const  KEY_F1       = 315,
       KEY_F2       = 316,
       KEY_F3       = 317,
       KEY_F9       = 323,
       KEY_ESC      = 27,
       KEY_SPACE    = 32,
       KEY_ENTER    = 13;

var Filter_TypeDoc  = 70,
    Filter_Date     = {CurDate}           ,
    Filter_Oper     = 22222               ,
//    Filter_Oper     = 10199               ,
    Filter_Pack     = 13                  ,
    Filter_SumFrom  = $0.01               ,
    Filter_SumTo    = $0.01               ,
    Filter_MascDt   = "706*"              ,
    Filter_MascCt   = "706*"              ;

var DocCount_All = 0,
    DocCount_Del = 0,
    DocCount_Err = 0;

var DeleteMode = true;
var d, m, y;

    
/* Т.к. диалог ввода параметров не используется, поиск библиотеки отключаем.
/* Библиотека диалогов */
var DlgLbrPath, DlgLbrName;
GetRegistryValue("BANK_INI\\ОБЩИЕ ПАРАМЕТРЫ\\ДИРЕКТОРИИ\\LBRDIR", V_STRING, DlgLbrPath);
DlgLbrName = "reprobots.lbr";


/* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
DlgLbrPath = "D:\\TEST_exv_2030\\mac.usr\\DebugMacro\\EVG\\" + DlgLbrName;*/
DlgLbrPath = FindPath(DlgLbrName, DlgLbrPath);


var dlg = tRecHandler("DELTSTDC", DlgLbrPath, true);
*/

/* Файл вывода */
var ReportPath = "", ErrCode = 0,
    RepFileName, ReportPath_term;
GetRegistryValue("BANK_INI\\ОБЩИЕ ПАРАМЕТРЫ\\ДИРЕКТОРИИ\\TEXTDIR", V_STRING, ReportPath, ErrCode);
if (ErrCode > 0)
   ReportPath = "..\\TXTFILE";
end;
DateSplit( {CurDate}, d, m, y );
RepFileName = "Del_Robot_" + d + "_" + m + "_" + substr(string(y),3,2) + "." + UserNumber;

ReportPath = ReportPath + "\\" + RepFileName;
ReportPath_term = MergeFile( GetCurDir( true ), "TxtFile\\" + RepFileName );





/* Найдем имя по Partyid */
MACRO GetClientName(id)

 var  sl=string(" select t_name from dparty_dbt t where t.t_PartyID=",id);
 var  DataS=TRsbDataSet(sl);

  if( DataS.moveNext())
    return DataS.name;
  else
    msgbox("Субъект не найден в party.dbt");
    return "-";
  end;

END;



MACRO EventHandler (dlg, cmd, id, key) 

   var const_mess = "~ESC~ Выход ~F2~ Выполнить ~F3~ Список ~SPACE~ Установить ";

   /*Первоначальная инициализация полей*/
   if(cmd == DLG_INIT)
      dlg.rec.dTypeDoc = "Мемориальный ордер";
      dlg.rec.dDate    = Filter_Date;
      dlg.rec.dOper    = Filter_Oper;
      dlg.rec.dPack    = Filter_Pack;
      dlg.rec.dSumFrom = Filter_SumFrom;
      dlg.rec.dSumTo   = Filter_SumTo;
      dlg.rec.dMascDt  = Filter_MascDt;
      dlg.rec.dMascCt  = Filter_MascCt;

      message( const_mess );
      UpdateFields(dlg); 
      SetFocus(dlg, 0)
   end;
   
   

   if (cmd == DLG_REMFOCUS)

      /*
      /* Проверка корректности дат */
      if (FldName(dlg,id) == "dDate")
         if ( dlg.rec.dDate > {curdate} )
            MsgBox("");
            return CM_CANCEL;
         end;
      end;*/

      UpdateFields(dlg); 
   end;


   
   if (cmd == DLG_KEY)

     /*Выход из диалогового окна формирования отчета*/
     if (KEY == KEY_ESC)
       return exit(1);//CM_CANCEL;

     /*Выбор данных из списка*/
     elif ( KEY == KEY_F3)

        /*Выбор даты из календаря*/
        if (FldName(dlg,id) == "dDate")
           dlg.rec.dDate = GetDateByCalendar( dlg.rec.dDate );
        end;
        
     elif ( KEY == KEY_F2 )          //Проверки при вводе

        Filter_TypeDoc = 70;                    // Мемориальный ордер
        Filter_Date    = dlg.rec.dDate    ;
        Filter_Oper    = dlg.rec.dOper    ;
        Filter_Pack    = dlg.rec.dPack    ;
        Filter_SumFrom = dlg.rec.dSumFrom ;
        Filter_SumTo   = dlg.rec.dSumTo   ;
        Filter_MascDt  = dlg.rec.dMascDt  ;
        Filter_MascCt  = dlg.rec.dMascCt  ;

        return CM_SAVE;

     //elif ( KEY == KEY_ENTER )

     elif ( KEY == KEY_F9 )
        return CM_IGNORE;

     end;
   
   end;
        
END;




MACRO PrintHead( pDate )

 /*
 [
        Тестовые документы за #

        ┌───┬───────────────────────────────┬───────────────────────────────────────────┐
        │   │    Документ                   │     Шаг                                   │
        │ № ├───────┬───────────┬───────────┼──────────────────┬────────────┬───────────┤
        │   │ Номер │     ID    │ Состояние │ Последний        │    Дата    │  Время    │
        │   │       │           │           │ исполненный      │            │           │
        ├───┼───────┼───────────┼───────────┼──────────────────┼────────────┼───────────┤
 ](pDate) ;*/

 [
        Тестовые документы за #
        Банк: #

        ┌───┬───────────────────────────────┬───────────────────────────────────────────┬────────────────────────────────────────┐
        │   │    Документ                   │     Шаг                                   │                                        │
        │ № ├───────┬───────────┬───────────┼──────────────────┬────────────┬───────────┤ Результат                              │
        │   │ Номер │     ID    │ Состояние │ Последний        │    Дата    │  Время    │ удаления документа                     │
        │   │       │           │           │ исполненный      │            │           │                                        │
        ├───┼───────┼───────────┼───────────┼──────────────────┼────────────┼───────────┼────────────────────────────────────────┤
 ](pDate, {Name_Bank});

 /*
 [
        Тестовые документы за #
        Банк: #

        ----+-------+-----------+-----------+-------------------------------------------+----------------------------------------+
        |   |    Документ                   |     Шаг                                   |                                        |
        | № +-------+-----------+-----------+------------------+------------+-----------+ Результат                              |
        |   | Номер |     ID    | Состояние | Последний        |    Дата    |  Время    | удаления документа                     |
        |   |       |           |           | исполненный      |            |           |                                        |
        +---+-------+-----------+-----------+------------------+------------+-----------+----------------------------------------+
 ](pDate, {Name_Bank});
 */

END;


MACRO PrintLine( pLine, pNumb, pId, pState, pName, pDate, pTime, pStat )

 if( pDate == date(0,0,0) )
    pDate = "-";
 end;
 if( pTime == time(0,0,0) )
    pTime = "-";
 end;

 /*
 [      │###│ ##### │ ######### │ ######### │ ################ │ ########## │ ######### │]
 ( pLine, pNumb, pId, pState, pName, pDate, pTime );*/

 [      │###│ ##### │ ######### │ ######### │ ################ │ ########## │ ######### │ ###################################### │]
 ( pLine, pNumb, pId, pState, pName, pDate, pTime, pStat:w );

 /*
 [      |###| ##### | ######### | ######### | ################ | ########## | ######### | ###################################### |]
 ( pLine, pNumb, pId, pState, pName, pDate, pTime, pStat:w );
 */

END;



MACRO PrintFooter()

 /*
 [      └───┴───────┴───────────┴───────────┴──────────────────┴────────────┴───────────┘
         ИТОГО: #
 ]( RowCount );*/

 /*
 [      +---+-------+-----------+-----------+------------------+------------+-----------+----------------------------------------+
 */

 [      └───┴───────┴───────────┴───────────┴──────────────────┴────────────┴───────────┴────────────────────────────────────────┘
         ИТОГО документов:
                           - всего:   #
                           - удалено: #
                           - ошибок:  #
 ]( DocCount_All, DocCount_Del, DocCount_Err )

END;



MACRO ShowReport()

  file rep () txt;

  SetOutPut(null, true);
  Open(rep, ReportPath);

  ViewFile(rep);

  Exit(1);

END;



MACRO SendReportByLotus( pDate, pLetterRecipient )

  var LetterHeader = "Протокол процедуры удаления тестовых документов за " + pDate + ", банк: " + {Name_Bank},
      LetterText   = "";

  file rep () txt;

  SetOutPut(null, true);
  Open(rep, ReportPath);

  debugbreak;

  /* Файл копируется на терминал для того, чтобы можно было приаттачить его к письму */
  //msgbox (ReportPath, "|", ReportPath_term, "|", CopyFile( ReportPath, "$" + ReportPath_term ));
  CopyFile( ReportPath, "$" + ReportPath_term );


  var n = 0;
  while( next(rep) )
     n = n + 1;
     //msgbox (rep.str);
     LetterText = LetterText + rep.str + "\n";
  end;


  /* EVG 15/02/2013 Реализована отправка письма с вложением через Lotus Notes
     (связь с LN напрямую через ActiveX, без использования Фронта). */
  var NotesSession, 
      NotesDb,
      NotesDir,
      NotesDoc,
      NotesRTItem,
      NotesRTStyle;

  var startAX;  


  if (isStandAlone())
     NotesSession = ActiveX("Lotus.Notessession", null, true);
  else
     if (startAX == null)
        startAX = CreateObject("rsax", "TRsAxServer", "MailAxServer", isStandalone());
     end;
     NotesSession = startAX.CreateComObject("Lotus.Notessession");
  end;

  //msgbox (getcurdir() + ReportPath);
  if( NotesSession )

     NotesSession.Initialize("");
     //NotesSession.Initialize("qwertyu");

     NotesDir     = NotesSession.GetDBDirectory("");
     NotesDb      = NotesDir.OpenMailDatabase;
     NotesDoc     = NotesDb.CreateDocument;
     NotesRTItem  = NotesDoc.CreateRichTextItem("body");
     NotesRTStyle = NotesSession.CreateRichTextStyle;

     NotesRTStyle.NotesFont = 4;      // FONT_COURIER
     NotesRTItem.AppendStyle( NotesRTStyle );

     NotesDoc.AppendItemValue( "Subject", LetterHeader );
     NotesDoc.AppendItemValue( "SendTo",  pLetterRecipient );

     NotesRTItem.AppendText( LetterText );
     NotesRTItem.AddNewLine( );

     NotesRTItem.EmbedObject( 1454,     // EMBED_ATTACHMENT
                              "", 
                              ReportPath_term );

     NotesDoc.SaveMessageOnSend = True;

     //NotesDoc.Send( False, pLetterRecipient );
     NotesDoc.Send( False );


  end;



  /* EVG 15/02/2013 Старый вариант - отправка через Фронт.

  /* EVG 13/02/2013 Проверка длины заголовка и текста письма */
  if( strLen(LetterHeader) > 100 )
     LetterHeader = subStr( LetterHeader, 1, 100 );
  end;
  if( strLen(LetterText) > 2048 )
     LetterText = subStr( LetterText, 1, 2048 );
  end;


  Send_l( LetterHeader, LetterText, 85, pLetterRecipient );
  */

  Exit(1);

ONERROR
  EXIT(1);

END;


MACRO ExecuteBackoutProc( paymentId )
   var error, statusText,
       DeleteDocuments = true;
   var cmd;


   /* Откат операции */
   statusText = "Попытка отката операции... ";
   setdialogflag(0);
     error = PM_RollbackOperation( paymentId );
   setdialogflag(1);
   /* Если документ отложен (т.е. по нему нечего откатывать), то это не считаем ошибкой */
   if( error == 1353 )  // Отсутствуют операции для первичного документа
      statusText = statusText + "Операция по документу не выполнялась.\n";
   /* При возникновении ошибок, возвращаемся в основную процедуру */
   elif( error > 0 )
      DocCount_Err = DocCount_Err + 1;
      return statusText + "Ошибка, код " + error + ".";
   else
      statusText = statusText + "Успешно.\n ";
   end;


   /* Удаление платежа и первичного документа */
   if( DeleteDocuments )
      statusText = statusText + "Удаление документа... ";

      cmd = rsdCommand( " DECLARE stat NUMBER := 0;                                             " +
                        " BEGIN                                                                 " +
                        "    :stat := pm_common.DeletePayment( :PaymentID );                    " +
                        "    DELETE FROM dcb_doc_dbt t WHERE t.t_documentid = :PaymentID;       " +
                        "    EXCEPTION WHEN OTHERS THEN :stat := 1;                             " +
                        " END;                                                                  " );
      cmd.AddParam("stat",      RSDBP_RETVAL, V_INTEGER);
      cmd.AddParam("PaymentId", RSDBP_IN,     paymentId);
      cmd.execute ();

      error = cmd.param("stat").value;
      if( error )
         DocCount_Err = DocCount_Err + 1;
         return statusText + "Ошибка при удалении документа, код " + error;
      end;

      statusText = statusText + "Успешно.";
   end;


   DocCount_Del = DocCount_Del + 1;

   return statusText;
END;


MACRO MakeReport( BranchID, RepDate, Priority )

 var SQL, rs;
 var n, state;

 SQL =       " SELECT info.docNumb            outNumb,                                             ";
 SQL = SQL + "        info.pmId               outId,                                               ";
 SQL = SQL + "        info.docState           outState,                                            ";
 SQL = SQL + "        NVL( ost.t_name, '-' )  outStName,                                           ";
 SQL = SQL + "        st.t_syst_date          outstDate,                                           ";
 SQL = SQL + "        st.t_syst_time          outStTime,                                           ";
 SQL = SQL + "        info.opId               outOpId,                                             ";
 SQL = SQL + "        info.stId               outStId                                              ";
 SQL = SQL + "   FROM (  SELECT rm.t_Number                                   docNumb,             ";
 SQL = SQL + "                  pm.t_PaymentID                                pmId,                ";
 SQL = SQL + "                  PM_SCRHLP.GetMemorderStatusName (cb.t_State)  docState,            ";
 SQL = SQL + "                  op.t_ID_Operation                             opId,                ";
 SQL = SQL + "                  MAX (step.t_id_step)                          stId                 ";
 SQL = SQL + "             FROM dpmpaym_dbt pm,                                                    ";
 SQL = SQL + "                  dpmrmprop_dbt rm,                                                  ";
 SQL = SQL + "                  dcb_doc_dbt cb,                                                    ";
 SQL = SQL + "                  doproper_dbt op,                                                   ";
 SQL = SQL + "                  doprstep_dbt step                                                  ";
 SQL = SQL + "            WHERE rm.t_PaymentID         = pm.t_PaymentID                            ";
 SQL = SQL + "              AND cb.t_DocumentID        = pm.t_PaymentID                            ";
 SQL = SQL + "              AND op.t_DocKind           = pm.t_DocKind                              ";
 SQL = SQL + "              AND op.t_DocumentID        = LPAD (pm.t_PaymentID, 34, '0')            ";
 SQL = SQL + "              AND step.t_ID_Operation(+) = op.t_ID_Operation                         ";
 SQL = SQL + "              AND step.t_IsExecute(+)    = CHR (88)                                  ";
 SQL = SQL + "              AND pm.t_Fiid              = " + NATCUR                                 ;
 SQL = SQL + "              AND pm.t_DocKind           = " + Filter_TypeDoc                         ;
 SQL = SQL + "              AND pm.t_ValueDate         = " + GetSQLDate( Filter_Date )              ;
 SQL = SQL + "              AND cb.t_Oper              = " + Filter_Oper                            ;
 SQL = SQL + "              AND pm.t_NumberPack        = " + Filter_Pack                            ;
 SQL = SQL + "              AND pm.t_Amount      BETWEEN " + Filter_SumFrom                         ;
 SQL = SQL + "                                       AND " + Filter_SumTo                           ;
 SQL = SQL + "              AND " + ConvertMaskToSQLFormat( Filter_MascDt, "pm.t_PayerAccount" )    ;
 SQL = SQL + "              AND " + ConvertMaskToSQLFormat( Filter_MascCt, "pm.t_ReceiverAccount" ) ;
 SQL = SQL + "         GROUP BY rm.t_Number,                                                       ";
 SQL = SQL + "                  pm.t_PaymentID,                                                    ";
 SQL = SQL + "                  op.t_ID_Operation,                                                 ";
 SQL = SQL + "                  cb.t_State) info,                                                  ";
 SQL = SQL + "         doprstep_dbt st,                                                            ";
 SQL = SQL + "         doprostep_dbt ost                                                           ";
 SQL = SQL + " WHERE st.t_ID_Operation  (+)= info.opId                                             ";
 SQL = SQL + "   AND st.t_id_step       (+)= info.stId                                             ";
 SQL = SQL + "   AND ost.t_BlockID      (+)= st.t_BlockID                                          ";
 SQL = SQL + "   AND ost.t_Number_Step  (+)= st.t_Number_Step                                      ";
 SQL = SQL + " ORDER BY info.pmId                                                                  ";


 /*
 query = " Select rm.t_Number docNumb, pm.t_PaymentID pmId, PM_SCRHLP.GetMemorderStatusName( cb.t_State ) docState, " +
         "        ostep.t_Name stName, step.t_Fact_Date stDate, step.t_Syst_Time stTime                             " +
         "   From dpmpaym_dbt pm, dpmrmprop_dbt rm, dcb_doc_dbt cb,                                                 " +
         "        doproper_dbt op, doprstep_dbt step, doprostep_dbt ostep                                           " +
         "  Where rm.t_PaymentID      = pm.t_PaymentID                                                              " +
         "    and cb.t_DocumentID     = pm.t_PaymentID                                                              " +
         "    and op.t_DocKind        = pm.t_DocKind                                                                " +
         "    and op.t_DocumentID     = lpad( pm.t_PaymentID, 34, '0' )                                             " +
         "    and step.t_ID_Operation = op.t_ID_Operation                                                           " +
         "    and step.t_ID_Step      = ( Select max( t_ID_Step ) From doprstep_dbt                                 " +
         "                                 Where t_ID_Operation = op.t_ID_Operation                                 " +
         "                                   and t_IsExecute    = chr(88) )                                         " +
         "    and ostep.t_BlockID     = step.t_BlockID                                                              " +
         "    and ostep.t_Number_Step = step.t_Number_Step                                                          " +

         /* Фильтр - умышленно без параметризации */
         "    and pm.t_DocKind             = " + Filter_TypeDoc +
         "    and pm.t_ValueDate           = " + GetSQLDate( Filter_Date ) +
         "    and cb.t_Oper                = " + Filter_Oper +
         "    and pm.t_NumberPack          = " + Filter_Pack +
         "    and pm.t_Amount        between " + Filter_SumFrom +
         "                               and " + Filter_SumTo +
         "    and " + ConvertMaskToSQLFormat( Filter_MascDt, "pm.t_PayerAccount" ) +
         "    and " + ConvertMaskToSQLFormat( Filter_MascCt, "pm.t_ReceiverAccount" ) ;
         /*
         "    and pm.t_PayerAccount     like " + SQL_Mask( Filter_MascDt ) +
         "    and pm.t_ReceiverAccount  like " + SQL_Mask( Filter_MascCt ) ;*/
         */
     //println(SQL);

 BegAction( 1, "Подсчёт количества записей..." );
    n = 0;
    rs = rsdREcordSet( SQL );
    while( rs and rs.moveNext() )
       n = n + 1;
    end;
    rs = null;
 EndAction( 1 );


 initProgress( n, null, "Обработка тестовых документов" );

 rs = rsdREcordSet( SQL );
 while( rs and rs.moveNext() )
    DocCount_All = DocCount_All + 1;


    /* EVG 13/02/2013 Если шага нет, то найдём время ввода платежа и покажем его в отчёте */
    var query, rs1, paymentId, stepTime, stepDate;

    paymentId = rs.value( "outId", null, V_INTEGER );
    stepDate  = SQL_ConvTypeDate( rs.value( "outstDate", null, V_DATE ) );
    stepTime  = SQL_ConvTypeTime( rs.value( "outStTime", null, V_DTTM ) );

    if( stepTime == time(0,0,0) )
       query = " Select t_CreationDate, t_CreationTime From dpmpaym_dbt Where t_PaymentID = " + paymentId;
       rs1 = rsdRecordSet( query );
       if( rs1 and rs1.moveNext() )
          stepDate = SQL_ConvTypeDate( rs1.value( 0, null, V_DATE ) );
          stepTime = SQL_ConvTypeTime( rs1.value( 1, null, V_DTTM ) );
       end;
    end;
    /* EVG 13/02/2013 end */



    if( DeleteMode )
       state = ExecuteBackoutProc( rs.value( "outId", null, V_INTEGER ) );
    else
       state = "Удаление не выполнялось";
    end;

    PrintLine(  DocCount_All,
                rs.value( "outNumb",   null, V_STRING ),
                paymentId,
                rs.value( "outState",  null, V_STRING ),
                rs.value( "outStName", null, V_STRING ),
                stepDate,
                stepTime,
                state );

    useProgress( DocCount_All );
    //msgbox (SQL_ConvTypeDate( rs.value( "outstDate", null, V_DATE ) ), "|", StepTyme);
 end;
 remProgress;

END;



/*Точка входа в макрос*/


//if (RunDialog(dlg, "EventHandler"))

  //GetTrue( DeleteMode, "Удалять тестовые документы?" );
  DeleteMode = true; //false; TAM 07.02.13

  SetOutPut (ReportPath, true);

  PrintHead( Filter_Date );

  MakeReport();

  PrintFooter();

//  ShowReport();

//  SendReportByLotus( Filter_Date, "Evgeniy V Gucu/IT/Probusiness Bank" );
//  SendReportByLotus( Filter_Date, "MishinYury@Moon.R-Style.RU" );
  SendReportByLotus( Filter_Date, "Evgeniy A Varaksin/IT/Probusiness Bank" );
ONERROR
exit(1);

//end;









