/*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

   Гуцу Е.В.

   Имя файла: ImporAccountsFromExcel.mac

   Создан:    9.12.2015

   Описание:  Загрузка Excel-файла с информацией о счетах доходов,
              открываемых в соответствии с 446-П

   ChangeLog:
-----------------------------------------------------------------------------------------------------------------------------------------------------

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
import PTInter, FIInter, rsd, cb_sql, "or_const.mac";
import "activex.mac";
                                                                                                
// !!!!!!!!!!!!!!!!!! //
var TEST_MODE = FALSE; 


VAR vTemplateName_SI = "Настроечная таблица ТП_НБС комиссии.xls",
    vTemplateName_AC = "Счета.xls",
    vTemplateDir     = "\\\\172.16.22.129\\C$\\RSB\\Mac.usr\\DEBUGMACRO\\";



CONST HEADER_SI_CommType        = "ТИП_КОМИССИИ",
      HEADER_SI_CommCode        = "КОД_КОМИСИИ",
      HEADER_SI_OldAccount      = "ДОХОДНЫЙ_СЧЕТ",
      HEADER_SI_SymbolJour      = "ОФР ЮР",
      HEADER_SI_AccountJour     = "Маска (ю/л)",
      HEADER_SI_SymbolAntr      = "ОФР ИП",
      HEADER_SI_AccountAntr     = "Маска (ИП)",
      HEADER_SI_AccountCurrency = "Валюта счета",
      HEADER_SI_AccountClient   = "Код клиента из RS-Bank",
      HEADER_SI_AccountBranch   = "Подразделение ТС из RS-Bank",
      HEADER_SI_AccountOwner    = "Владелец счета из RS-Bank",
      HEADER_SI_AccountOpenDate = "Дата Открытия";

CONST HEADER_AC_OldAccount      = "Старый счет",                                                  
      HEADER_AC_NewAccount      = "Новый счет",                                                   
      HEADER_AC_Balance         = "Бал счет",                                                   
      HEADER_AC_OPUCode         = "символ ОФР",                                                  
      HEADER_AC_NameAccount     = "Новое наименование счета",                                     
      HEADER_AC_Client          = "Код клиента из RS-Bank",                                       
      HEADER_AC_Branch          = "Подразделение ТС для RS",                                      
      HEADER_AC_Type_Account    = "Тип счета для RS",                                             
      HEADER_AC_UserTypeAcc     = "Пользовательский тип для RS",                                  
      HEADER_AC_Open_Date       = "Дата открытия счета",                                          
      HEADER_AC_Code_currency   = "Валюта счета",                                                 
      HEADER_AC_Oper            = "Владелец счета - код опер-та за которым закрепляется это л/сч";


CLASS ClsColumnCodes()
 VAR Column_SI_CommType,
     Column_SI_CommCode,
     Column_SI_OldAccount,
     Column_SI_SymbolJour,
     Column_SI_AccountJour,
     Column_SI_SymbolAntr,     
     Column_SI_AccountAntr,
     Column_SI_AccountCurrency,
     Column_SI_AccountClient,   
     Column_SI_AccountBranch,   
     Column_SI_AccountOwner,    
     Column_SI_AccountOpenDate; 

 VAR Column_AC_OldAccount,
     Column_AC_NewAccount,
     Column_AC_Balance,
     Column_AC_OPUCode,
     Column_AC_NameAccount,
     Column_AC_Client,
     Column_AC_Branch,
     Column_AC_Type_Account,
     Column_AC_UserTypeAcc,
     Column_AC_Open_Date,
     Column_AC_Code_currency,
     Column_AC_Oper;
END;
VAR ColumnCodes = ClsColumnCodes();


VAR vVisible  = false,
    vReadOnly = false;


// Класс для сохранения информации по счетам комиссии
CLASS CommAccountRecord( pCommCode, 
                         pIncAccOld,
                         pSymbolJour,
                         pIncAccJour,
                         pSymbolAntr,
                         pIncAccAntr,
                         pIncAccCurrency,
                         pIncAccClient,
                         pIncAccBranch,
                         pIncAccOwner,
                         pIncAccOpenDate )

 var vCommCode:string        = pCommCode,
     vIncAccOld:string       = pIncAccOld,

     vSymbolJour:integer     = pSymbolJour,
     vIncAccJour:string      = pIncAccJour,
     vSumbolAntr:integer     = pSymbolAntr,
     vIncAccAntr:string      = pIncAccAntr,

     vIncAccCurrency:integer = pIncAccCurrency, 
     vIncAccClient:integer   = pIncAccClient,   
     vIncAccBranch:string    = pIncAccBranch,   
     vIncAccOwner:integer    = pIncAccOwner,    
     vIncAccOpenDate:date    = pIncAccOpenDate;

END;
// Массив
VAR ArrCommAccounts = TArray();


MACRO CreateDBObjects()

  var cmd;

  cmd = rsdCommand( "  DECLARE                                                                          "+
                    "      E_OBJECT_EXISTS EXCEPTION;                                                   "+
                    "      PRAGMA EXCEPTION_INIT( E_OBJECT_EXISTS, -955);                               "+
                    "  BEGIN                                                                            "+
                    "                                                                                   "+
                    "      BEGIN                                                                        "+
                    "                                                                                   "+
                    "          EXECUTE IMMEDIATE                                                        "+
                    "                ' CREATE TABLE USER_ACCOUNTS_FOR_OPEN_446P                         "+
                    "                  (                                                                "+
                    "                    T_OLDACCOUNT      VARCHAR2(25 BYTE),                           "+
                    "                    T_NEWACCOUNT      VARCHAR2(25 BYTE),                           "+
                    "                    T_BALANCE         VARCHAR2(25 BYTE),                           "+
                    "                    T_OPUCODE         VARCHAR2(11 BYTE),                           "+
                    "                    T_NAMEACCOUNT     VARCHAR2(120 BYTE),                          "+
                    "                    T_CLIENT          NUMBER(10),                                  "+
                    "                    T_BRANCH          NUMBER(5),                                   "+
                    "                    T_TYPE_ACCOUNT    VARCHAR2(16 BYTE)   DEFAULT CHR(1),          "+
                    "                    T_USERTYPEACCOUNT VARCHAR2(16 BYTE)   DEFAULT CHR(1),          "+
                    "                    T_OPEN_DATE       DATE,                                        "+
                    "                    T_CODE_CURRENCY   NUMBER(10),                                  "+
                    "                    T_OPER            NUMBER(5) )';                                "+
                    "      EXCEPTION                                                                    "+
                    "         WHEN E_OBJECT_EXISTS THEN null;                                           "+
                    "      END;                                                                         "+
                    "                                                                                   "+
                    "      BEGIN                                                                        "+
                    "          EXECUTE IMMEDIATE                                                        "+
                    "                ' CREATE INDEX USR_ACC_446P_IDX0 ON USER_ACCOUNTS_FOR_OPEN_446P    "+
                    "                  (T_OLDACCOUNT)';                                                 "+
                    "      EXCEPTION                                                                    "+
                    "         WHEN E_OBJECT_EXISTS THEN null;                                           "+
                    "      END;                                                                         "+
                    "                                                                                   "+
                    "      BEGIN                                                                        "+
                    "          EXECUTE IMMEDIATE                                                        "+
                    "                ' CREATE INDEX USR_ACC_446P_IDX1 ON USER_ACCOUNTS_FOR_OPEN_446P    "+
                    "                  (T_NEWACCOUNT)';                                                 "+
                    "      EXCEPTION                                                                    "+
                    "         WHEN E_OBJECT_EXISTS THEN null;                                           "+
                    "      END;                                                                         "+
                    "  END;                                                                             " );
  cmd.execute();
       
END;   


MACRO ClearTable()

  var cmd;

  cmd = rsdCommand( " TRUNCATE TABLE USER_ACCOUNTS_FOR_OPEN_446P " );
  cmd.execute();

END;




MACRO AnalyzeTemplateStructure( pTemplateName, pCheckNeeded )

 var Col, ind;
 var CurrentColHeader;

 var ColNames = TArray();
 var Suffix;

   macro SetValueToColumnVar( ColVarName:@variant, pValue )
      ColVarName = pValue;
   end;


   if( pTemplateName == vTemplateName_SI )

      ColNames(0)  = "CommType";
      ColNames(1)  = "CommCode";
      ColNames(2)  = "OldAccount";
      ColNames(3)  = "SymbolJour";
      ColNames(4)  = "AccountJour";
      ColNames(5)  = "SymbolAntr";
      ColNames(6)  = "AccountAntr";
      ColNames(7)  = "AccountCurrency";
      ColNames(8)  = "AccountClient";
      ColNames(9)  = "AccountBranch";
      ColNames(10)  = "AccountOwner";
      ColNames(11) = "AccountOpenDate";

      Suffix = "SI_";

   elif( pTemplateName == vTemplateName_AC )

      ColNames(0)  = "OldAccount";
      ColNames(1)  = "NewAccount";
      ColNames(2)  = "Balance";
      ColNames(3)  = "OPUCode";
      ColNames(4)  = "NameAccount";
      ColNames(5)  = "Client";
      ColNames(6)  = "Branch";
      ColNames(7)  = "Type_Account";
      ColNames(8)  = "UserTypeAcc";
      ColNames(9)  = "Open_Date";
      ColNames(10) = "Code_currency";
      ColNames(11) = "Oper";

      Suffix = "AC_";

   end;

   // Находим нужные для процедуры столбцы
   Col = 65;            // Начинаем с 65 (А)
   while( Col < 90 )    // Заканчиваем Z

      CurrentColHeader = strSubst( trim( ActiveSheet.Cells( 1, Strfor(Col) ).Value ), "  ", " " );

      ind = 0;
      while( ind < ColNames.Size() )

         if  ( CurrentColHeader == ExecExp( "HEADER_" + Suffix + ColNames(ind) ) )

            GenSetProp( ColumnCodes, "Column_" + Suffix + ColNames(ind), StrFor( Col ) );

         end;

         ind = ind + 1;
      end;

      Col = Col + 1;
   end;


   // Проверка
   var ErrCode = 0,
       ErrText = "Ошибка анализа структуры шаблона.\n\n";
   // Чтобы не проверялось до того, как разобраны все шаблоны
   if( pCheckNeeded)
      ind = 0;
      /*
      while( ind < GenNumProps( ColumnCodes ) )

         if( ValType( ColumnCodes( ind ) ) == V_UNDEF )
            ErrCode = 1;
            ErrText = ErrText + "Не определена колонка для " + ColNames(ind) + ". Искомый заголовок \"" + ExecExp( "HEADER_" + Suffix + ColNames(ind) ) + "\"\n\n";
         end;

         ind = ind + 1;
      end;*/
      while( ind < ColNames.Size() )

         if( ValType( GenGetProp( ColumnCodes, "Column_" + Suffix + ColNames(ind) ) ) == V_UNDEF )
            ErrCode = 1;
            ErrText = ErrText + "Не определена колонка для " + ColNames(ind) + ". Искомый заголовок \"" + ExecExp( "HEADER_" + Suffix + ColNames(ind) ) + "\"\n\n";
         end;

         ind = ind + 1;
      end;


      SetParm( 2, ErrText );
   end;

   return ErrCode;

END;


MACRO CorrectVal( pVal )
/*
 var vType = ValType( pVal );

 if(   vType == V_STRING )
    return trim( pVal );
 elif( vType == V_INTEGER )
    return pVal ;
 elif( vType == V_DOUBLE )
    return trim( string( int( pVal ) ) );
 elif( vType == V_DATE )
    return  pVal;
 elif( vType == V_UNDEF )
    return "";
 end;
*/
 return pVal
ENd;


MACRO OpenAccounts()

 var SQL, cmd;

 var vAccountTableName, vAccBlncTableName;

   vAccountTableName = "daccount_dbt";
   vAccBlncTableName = "daccblnc_dbt";
   if( TEST_MODE )
      vAccountTableName = "daccount_tst";
      vAccBlncTableName = "daccblnc_tst";
   end;


   SQL = " DECLARE                                                                                                       ";
   SQL = SQL +"      Account_rec      daccount_dbt%ROWTYPE;                                                              ";
   SQL = SQL +"      Accblnc_rec      daccblnc_dbt%ROWTYPE;                                                              ";
   SQL = SQL +"                                                                                                          ";
   SQL = SQL +"      vAccountKind     dbalance_dbt.t_kind_account%TYPE;                                                  ";
   SQL = SQL +"      vOPUcontragent   daccount_dbt.t_contragent%TYPE;                                                    ";
   SQL = SQL +"                                                                                                          ";
   SQL = SQL +"      CURSOR AccountsForOpen                                                                              ";
   SQL = SQL +"      IS                                                                                                  ";
   SQL = SQL +"         SELECT t_oldaccount, t_newaccount, t_balance, t_opucode, t_nameaccount, t_client,                ";
   SQL = SQL +"                t_branch, t_type_account, t_usertypeaccount, t_open_date, t_code_currency, t_oper         ";  
   SQL = SQL +"           FROM USER_ACCOUNTS_FOR_OPEN_446P;                                                              ";
   SQL = SQL +"      AccountsForOpen_rec  AccountsForOpen%ROWTYPE;                                                       ";
   SQL = SQL +"                                                                                                          ";
   SQL = SQL +"BEGIN                                                                                                     ";
   SQL = SQL +"   FOR AccountsForOpen_rec IN AccountsForOpen                                                             ";
   SQL = SQL +"   LOOP                                                                                                   ";
   SQL = SQL +"                                                                                                          ";
   SQL = SQL +"     SELECT t_kind_account INTO vAccountKind FROM dbalance_dbt                                            ";
   SQL = SQL +"      WHERE t_chapter = 1 AND t_inumplan = 0 AND t_balance =  AccountsForOpen_rec.t_balance;              ";
   SQL = SQL +"                                                                                                          ";
   SQL = SQL +"     BEGIN                                                                                                ";
   SQL = SQL +"        SELECT NVL( MAX(s.t_recid), 0 ) INTO vOPUcontragent FROM dopusymb_dbt s                           "; //Gurin S. 28.12.2015 добавил MAX, потому что NVL, если запрос ничего не возвращает, не срабатывает!
   SQL = SQL +"         WHERE s.t_balance like '%'||AccountsForOpen_rec.t_balance||'%'                                   ";
   SQL = SQL +"           AND s.t_code       = AccountsForOpen_rec.t_opucode                                             ";
   SQL = SQL +"           AND s.t_opendate   = ( SELECT MAX( s.t_opendate ) FROM dopusymb_dbt t                          ";
   SQL = SQL +"                                   WHERE t.t_balance = s.t_balance AND t.t_code = s.t_code                ";
   SQL = SQL +"                                     AND AccountsForOpen_rec.t_open_date                                  ";
   SQL = SQL +"                                         BETWEEN s.t_opendate                                             ";
   SQL = SQL +"                                             AND DECODE( s.t_closedate,                                   ";
   SQL = SQL +"                                                         TO_DATE( '01-01-0001','dd-mm-rrrr' ),            ";
   SQL = SQL +"                                                         TO_DATE( '31-12-9999','dd-mm-rrrr' ),            ";
   SQL = SQL +"                                                         s.t_closedate ) );                               ";
   SQL = SQL +"     -- EVG Вообще условия запроса вполне достаточные. Поэтому как-либо скрывать неверный результат \n    ";
   SQL = SQL +"     -- считаю нецелесообразным. Сделаем -1, чтобы было видно, что в базе косяк с символами.        \n    ";
   SQL = SQL +"     EXCEPTION WHEN TOO_MANY_ROWS                                                                         ";
   SQL = SQL +"        THEN vOPUcontragent := -1;                                                                        ";
   SQL = SQL +"     END;                                                                                                 ";
   SQL = SQL +"                                                                                                          ";
   SQL = SQL +"     -- Заполнение структуры daccount_dbt \n                                                              ";
   SQL = SQL +"     Account_rec := NULL;                                                                                 ";
   SQL = SQL +"     Account_rec.t_open_close            := CHR(0);                                                       ";
   SQL = SQL +"     Account_rec.t_code_currency         := AccountsForOpen_rec.t_code_currency;                          ";
   SQL = SQL +"     Account_rec.t_account               := AccountsForOpen_rec.t_newaccount;                             ";
   SQL = SQL +"     Account_rec.t_client                := AccountsForOpen_rec.t_client;                                 ";
   SQL = SQL +"     Account_rec.t_oper                  := AccountsForOpen_rec.t_oper;                                   ";
   SQL = SQL +"     Account_rec.t_balance               := AccountsForOpen_rec.t_balance;                                ";
   SQL = SQL +"     Account_rec.t_sort                  := AccountsForOpen_rec.t_newaccount;                             ";
   SQL = SQL +"     Account_rec.t_index2                := CHR(0);                                                       ";
   SQL = SQL +"     Account_rec.t_index3                := CHR(0);                                                       ";
   SQL = SQL +"     Account_rec.t_kind_account          := vAccountKind;                                                 ";
   SQL = SQL +"     Account_rec.t_type_account          := AccountsForOpen_rec.t_type_account;                           ";
   SQL = SQL +"     Account_rec.t_etype_account         := CHR(1);                                                       ";
   SQL = SQL +"     Account_rec.t_usertypeaccount       := AccountsForOpen_rec.t_usertypeaccount;                        ";
   SQL = SQL +"     Account_rec.t_final_date            := TO_DATE('01-01-0001','dd-mm-rrrr');                           ";
   SQL = SQL +"     Account_rec.t_datenochange          := AccountsForOpen_rec.t_open_date;                              ";
   SQL = SQL +"     Account_rec.t_symbol                := 0;                                                            ";
   SQL = SQL +"     Account_rec.t_open_date             := AccountsForOpen_rec.t_open_date;                              ";
   SQL = SQL +"     Account_rec.t_close_date            := TO_DATE('01-01-0001','dd-mm-rrrr');                           ";
   SQL = SQL +"     Account_rec.t_nameaccount           := AccountsForOpen_rec.t_nameaccount;                            ";
   SQL = SQL +"     Account_rec.t_change_date           := TO_DATE('01-01-0001','dd-mm-rrrr');                           ";
   SQL = SQL +"     Account_rec.t_change_dateprev       := TO_DATE('01-01-0001','dd-mm-rrrr');                           ";
   SQL = SQL +"     Account_rec.t_pairaccount           := CHR(1);                                                       ";
   SQL = SQL +"     Account_rec.t_userfield1            := CHR(1);                                                       ";
   SQL = SQL +"     Account_rec.t_userfield2            := CHR(1);                                                       ";
   SQL = SQL +"     Account_rec.t_userfield3            := CHR(1);                                                       ";
   SQL = SQL +"     Account_rec.t_userfield4            := CHR(1);                                                       ";
   SQL = SQL +"     Account_rec.t_operationdate         := TO_DATE('01-01-0001','dd-mm-rrrr');                           ";
   SQL = SQL +"     Account_rec.t_daystoend             := 0;                                                            ";
   SQL = SQL +"     Account_rec.t_chapter               := 1;                                                            ";
   SQL = SQL +"     Account_rec.t_department            := 1;                                                            ";
   SQL = SQL +"     Account_rec.t_orscheme              := 0;                                                            ";
   SQL = SQL +"     Account_rec.t_contractrko           := 0;                                                            ";
   SQL = SQL +"     Account_rec.t_officeid              := 0;                                                            ";
   SQL = SQL +"     Account_rec.t_depoacc               := 0;                                                            ";
   SQL = SQL +"     Account_rec.t_deporoot              := 0;                                                            ";
   SQL = SQL +"     Account_rec.t_havesubaccounts       := CHR(0);                                                       ";
   SQL = SQL +"     Account_rec.t_branch                := AccountsForOpen_rec.t_branch;                                 ";
   SQL = SQL +"     Account_rec.t_controloper           := AccountsForOpen_rec.t_oper;                                   ";
   SQL = SQL +"     Account_rec.t_currencyeq            := -1;                                                           ";
   SQL = SQL +"     Account_rec.t_currencyeq_ratedate   := 0;                                                            ";
   SQL = SQL +"     Account_rec.t_currencyeq_ratetype   := 0;                                                            ";
   SQL = SQL +"     Account_rec.t_currencyeq_rateextra  := 0;                                                            ";
   SQL = SQL +"     Account_rec.t_accountid             := 0;                                                            ";
   SQL = SQL +"     Account_rec.t_opucode               := AccountsForOpen_rec.t_opucode;                                ";
   SQL = SQL +"     Account_rec.t_contragent            := vOPUcontragent;                                               ";
   SQL = SQL +"     Account_rec.t_ofrrecid              := 0;                                                            ";
   SQL = SQL +"                                                                                                          ";
   SQL = SQL +"     IF Account_rec.t_type_account IS NULL                                                                ";
   SQL = SQL +"     THEN Account_rec.t_type_account := CHR(1);                                                           ";
   SQL = SQL +"     END IF;                                                                                              ";
   SQL = SQL +"     IF Account_rec.t_usertypeaccount IS NULL                                                             ";
   SQL = SQL +"     THEN Account_rec.t_usertypeaccount := CHR(1);                                                        ";
   SQL = SQL +"     END IF;                                                                                              ";
   SQL = SQL +"                                                                                                          ";
   SQL = SQL +"     BEGIN                                                                                                ";
   SQL = SQL +"        INSERT INTO " + vAccountTableName + " VALUES Account_rec                                          ";
   SQL = SQL +"        RETURNING t_accountid INTO Account_rec.t_accountid;                                               ";
   SQL = SQL +"        --dbms_output.put_line( AccountsForOpen_rec.t_newaccount ); \n                                    ";
   SQL = SQL +"     EXCEPTION WHEN DUP_VAL_ON_INDEX                                                                      ";
   SQL = SQL +"        THEN NULL;                                                                                        ";
   SQL = SQL +"     END;                                                                                                 ";
   SQL = SQL +"                                                                                                          ";
   SQL = SQL +"     -- Заполнение структуры daccblnc_dbt \n                                                              ";
   SQL = SQL +"     Accblnc_rec := NULL;                                                                                 ";
   SQL = SQL +"     Accblnc_rec.t_account        := Account_rec.t_account;                                               ";
   SQL = SQL +"     Accblnc_rec.t_code_currency  := Account_rec.t_code_currency;                                         ";
   SQL = SQL +"     Accblnc_rec.t_balance0       := Account_rec.t_balance;                                               ";
   SQL = SQL +"     Accblnc_rec.t_balance1       := CHR(1);                                                              ";
   SQL = SQL +"     Accblnc_rec.t_balance2       := CHR(1);                                                              ";
   SQL = SQL +"     Accblnc_rec.t_balance3       := CHR(1);                                                              ";
   SQL = SQL +"     Accblnc_rec.t_balance4       := CHR(1);                                                              ";
   SQL = SQL +"     Accblnc_rec.t_balance5       := CHR(1);                                                              ";
   SQL = SQL +"     Accblnc_rec.t_balance6       := CHR(1);                                                              ";
   SQL = SQL +"     Accblnc_rec.t_balance7       := CHR(1);                                                              ";
   SQL = SQL +"     Accblnc_rec.t_balance8       := CHR(1);                                                              ";
   SQL = SQL +"     Accblnc_rec.t_balance9       := CHR(1);                                                              ";
   SQL = SQL +"     Accblnc_rec.t_balance10      := CHR(1);                                                              ";
   SQL = SQL +"     Accblnc_rec.t_balance11      := CHR(1);                                                              ";
   SQL = SQL +"     Accblnc_rec.t_chapter        := Account_rec.t_chapter;                                               ";
   SQL = SQL +"     Accblnc_rec.t_accountid      := Account_rec.t_accountid;                                             ";
   SQL = SQL +"                                                                                                          ";
   SQL = SQL +"     BEGIN                                                                                                ";
   SQL = SQL +"        INSERT INTO " + vAccBlncTableName + " VALUES Accblnc_rec;                                         ";
   SQL = SQL +"        --dbms_output.put_line( '    ' || Account_rec.t_balance ); \n                                     ";
   SQL = SQL +"     EXCEPTION WHEN OTHERS                                                                                ";
   SQL = SQL +"        THEN NULL;                                                                                        ";
   SQL = SQL +"     END;                                                                                                 ";
   SQL = SQL +"                                                                                                          ";
   SQL = SQL +"   END LOOP;                                                                                              ";
   SQL = SQL +"END;                                                                                                      ";


   cmd = RsdCommand( SQL );
   cmd.Execute();


END;


MACRO CheckAccountOpen( pAccount )
 var cmd, rs;

   var vAccountTableName = "daccount_dbt";
   if( TEST_MODE )
      vAccountTableName = "daccount_tst";
   end;

   // Ограничение: счета только в нац. валюте!
   cmd = RsdCommand( "Select 1 from " + vAccountTableName + " Where t_chapter = 1 and t_code_currency = 0 and t_open_close = chr(0) and t_account = ?" );
   cmd.AddParam( "", RSDBP_IN, pAccount );
   rs = RsdRecordSet( cmd );
   if( rs and rs.MoveNext() )  return true;  end;

   return false;
END;




MACRO CreatePaymentInstruction( pCommType, pCommCode, pAccount, pMasc, pShortNAme );

 var cmd;
 var {OurBank}, {MFO_Bank}, {CurDate}, {Name_Bank}, {Oper};
 //debugbreak;

   Macro InsertPMA( pSettaccid )

      cmd = rsdCommand( " DECLARE                                                                "
                        "    c_party       NUMBER(10) := ?;                                      "
                        "    c_fiid        NUMBER(10) := 0;                                      "
                        "    c_kindoper    NUMBER(5)  := 0;                                      "
                        "    c_purpose     NUMBER(5)  := 0;                                      "
                        "    c_settaccid   NUMBER(10) := ?;                                      "
                        "    c_fikind      NUMBER(5)  := 1;                                      "
                        "    c_servicekind NUMBER(5)  := 3;                                      "
                        "    c_order       NUMBER(10) := 0;                                      "
                        " BEGIN                                                                  "
                        "                                                                        "
                        "    Select nvl( max( t_order ), 0 ) +1  Into c_order From dpmautoac_dbt "
                        "     Where t_partyid     = c_party                                      "
                        "       and t_fiid        = c_fiid                                       "
                        "       and t_purpose     = c_purpose                                    "
                        "       and t_fikind      = c_fikind                                     "
                        "       and t_servicekind = c_servicekind;                               "
                        "                                                                        "
                        "    Insert Into dpmautoac_dbt( t_partyid, t_fiid, t_kindoper, t_purpose, t_settaccid, t_fikind, t_servicekind, t_order, t_account, t_reserve )  "
                        "                       Values( c_party,   c_fiid, c_kindoper, c_purpose, c_settaccid, c_fikind, c_servicekind, c_order, CHR(1),    CHR(1)    ); " 
                        " END;" );
      cmd.AddParam( "", RSDBP_IN, {OurBank}  );
      cmd.AddParam( "", RSDBP_IN, pSettaccid );
      cmd.Execute();
       
   end;


   Macro InsertSSI( pSettaccid )

      cmd = rsdCommand( " DECLARE                                                                    "+
                        "    vComType      NUMBER(5)   := ?;                                         "+
                        "    vComCode      VARCHAR(30) := ?;                                         "+
                        "    c_objecttype  NUMBER(5)   := 650;                                       "+
                        "    c_objectid    VARCHAR(35) := CHR(0);                                    "+
                        "    c_setaccid    NUMBER(10)   := ?;                                        "+
                        "    c_fikind      NUMBER(5)   := 1;                                         "+
                        "    c_fiid        NUMBER(10)  := 0;                                         "+
                        "    c_order       NUMBER(10)  := 0;                                         "+
                        "    c_oper        NUMBER(5)   := ?;                                         "+
                        "    c_operdate    DATE        := ?;                                         "+
                        "    c_sysdate     DATE        := SysDate;                                   "+
                        "    c_systime     DATE        := SysDate;                                   "+
                        "    c_feetype     NUMBER(5)   := 0;                                         "+
                        "    c_feenumber   NUMBER(5)   := 0;                                         "+
                        "    c_branch      NUMBER(5)   := 0;                                         "+
                        " BEGIN                                                                      "+
                        "                                                                            "+
                        "    Select lpad( t_feetype, 5, '0')||lpad(t_number, 5, '0') Into c_objectid "+
                        "      From dsfcomiss_dbt Where t_feetype = vComType and t_code = vComCode;  "+
                        "                                                                            "+
                        "    Select nvl( max( t_order ), 0 ) +1  Into c_order From dsfssi_dbt        "+
                        "     Where t_objecttype  = c_objecttype                                     "+
                        "       and t_objectid    = c_objectid                                       "+
                        "       and t_fikind      = c_fikind                                         "+
                        "       and t_fiid        = c_fiid;                                          "+
                        "                                                                            "+
                        "    Insert Into dsfssi_dbt( t_objecttype, t_objectid, t_setaccid, t_fikind, t_fiid, t_order, t_operdate, t_sysdate, t_systime, t_oper, t_feetype, t_feenumber, t_branch )  "+
                        "                    Values( c_objecttype, c_objectid, c_setaccid, c_fikind, c_fiid, c_order, c_operdate, c_sysdate, c_systime, c_oper, c_feetype, c_feenumber, c_branch ); "+
                        " END;" );
      cmd.AddParam( "", RSDBP_IN, pCommType  );
      cmd.AddParam( "", RSDBP_IN, pCommCode  );
      cmd.AddParam( "", RSDBP_IN, pSettaccid );
      cmd.AddParam( "", RSDBP_IN, {Oper}     );
      cmd.AddParam( "", RSDBP_IN, {CurDate}  );
      cmd.Execute();
       
   end;

   

   var vOutSettaccid;

   cmd = rsdCommand( " DECLARE                                                                                                                                                  "+
                     "   v_InReceiverId        NUMBER(10)      := :OurBank;                                                                                                     "+
                     "   c_insSettaccid        NUMBER(10)      := 0;                                                                                                            "+
                     "   c_insFiid             NUMBER(10)      := 0;                                                                                                            "+
                     "   c_insChapter          NUMBER(5)       := 1;                                                                                                            "+
                     "   c_insBankCodeKind     NUMBER(5)       := 3;                                                                                                            "+
                     "   c_insBankCode         VARCHAR(35)     := :MFO_Bank;                                                                                                       "+
                     "   c_insBankCorrId       NUMBER(10)      := -1;                                                                                                           "+
                     "   c_insBankcorrCodeKind NUMBER(5)       := 3;                                                                                                            "+
                     "   c_insBankcorrCode     VARCHAR(35)     := CHR(1);                                                                                                       "+
                     "   c_insBankcorrName     VARCHAR(320)    := CHR(1);                                                                                                       "+
                     "   c_insCorrAcc          VARCHAR(35)     := CHR(1);                                                                                                       "+
                     "   c_insFikind           NUMBER(5)       := 1;                                                                                                            "+
                     "   c_insCodekind         NUMBER(5)       := 1;                                                                                                            "+
                     "   c_insOrder            NUMBER(10)      := 4;                                                                                                            "+
                     "   c_insNoaccept         CHAR(1)         := CHR(0);                                                                                                       "+
                     "   c_insKzpartyCode      VARCHAR(2)      := CHR(1);                                                                                                       "+

                     "   v_ReceiverInn         VARCHAR(35);                                                                                                                     "+
                     "   v_ReceiverCode        VARCHAR(35);                                                                                                                     "+
                     " BEGIN                                                                                                                                                    "+

                     "    Select nvl(cod16.t_code, CHR(0)), nvl(cod01.t_code, CHR(0))                                                                                           "+
                     "      Into v_ReceiverInn, v_ReceiverCode                                                                                                                  "+
                     "      From dobjcode_dbt cod01, dobjcode_dbt cod16                                                                                                         "+
                     "     Where cod01.t_objecttype = 3 and cod01.t_objectid = v_InReceiverId and cod01.t_codekind = 1  and cod01.t_state = 0                                   "+
                     "       and cod16.t_objecttype = 3 and cod16.t_objectid = v_InReceiverId and cod16.t_codekind = 16 and cod16.t_state = 0;                                  "+

                     "   SELECT NVL( MAX( t_order ), 0 ) + 1                                                                                                                    "+
                     "     INTO c_insorder                                                                                                                                      "+
                     "     FROM dsettacc_dbt                                                                                                                                    "+
                     "    WHERE t_fikind = c_insfikind AND t_fiid = c_insFiid AND t_partyid = v_inreceiverid;                                                                   "+

                     "    Insert Into Dsettacc_dbt( t_settaccid, t_partyid, t_bankid, t_fiid, t_chapter, t_inn, t_bankcodekind, t_bankcode,                                     "+
                     "                              t_bankcorrid, t_bankcorrcodekind, t_bankcorrcode, t_bankcorrname, t_corracc, t_fikind,                                      "+
                     "                              t_beneficiaryid, t_codekind, t_code, t_order, t_noaccept, t_kzpartycode,                                                    "+
                     "                              t_account,                                                                                                                  "+
                     "                              t_recname,                                                                                                                  "+
                     "                              t_bankname,                                                                                                                 "+
                     "                              t_description,                                                                                                              "+
                     "                              t_shortname )                                                                                                               "+

                     "                      Values( c_insSettaccid, v_InReceiverId, v_InReceiverId, c_insFiid, c_insChapter, v_ReceiverInn, c_insBankCodeKind, c_insBankCode,   "+
                     "                              c_insBankCorrId, c_insBankcorrCodeKind, c_insBankcorrCode, c_insBankcorrName, c_insCorrAcc, c_insFikind,                    "+
                     "                              v_InReceiverId, c_insCodekind, v_ReceiverCode, c_insOrder, c_insNoaccept, c_insKzpartyCode,                                 "+
                     "                              :t_account,                                                                                                                 "+
                     "                              :t_recname,                                                                                                                 "+
                     "                              :t_bankname,                                                                                                                "+
                     "                              :t_description,                                                                                                             "+
                     "                              :t_shortname )                                                                                                              "+
                     
                     "    Returning t_settaccid Into ?;                                                                                                                         "+

                     " END;                                                                                                                                                     " );
                     
   cmd.AddParam( ":OurBank",       RSDBP_IN, {OurBank}  );
   cmd.AddParam( ":MFO_Bank",      RSDBP_IN, {MFO_Bank} );
   cmd.AddParam( ":t_account",     RSDBP_IN, pAccount   );
   cmd.AddParam( ":t_recname",     RSDBP_IN, {Name_Bank} );
   cmd.AddParam( ":t_bankname",    RSDBP_IN, {Name_Bank} );
   cmd.AddParam( ":t_description", RSDBP_IN, pMasc      );
   cmd.AddParam( ":t_shortname",   RSDBP_IN, pShortNAme );

   cmd.AddParam( "v_OutSettaccid", RSDBP_OUT, V_INTEGER );

   cmd.Execute();
   vOutSettaccid = cmd.value( "v_OutSettaccid" );

   if( vOutSettaccid )
      InsertPMA( vOutSettaccid );
      InsertSSI( vOutSettaccid );
   end;

END;




MACRO UploadAccountsFile

 var CurRow, ErrCode, tmp;
 var TotalRowCount = 0;

 var cmd;

 var vOldAccount, vNewAccount, vBalance, vOPUCode, vNameAccount, vClient, vBranch, vTypeAcc, vUserTypeAcc, vOpenDate, vCodeCur, vOper;


   macro GetBranch( pCodeDep, pError:@integer )
    var cmd, rs;

    cmd = rsdCommand( " Select t_code from ddp_dep_dbt where t_name = ? " );
    cmd.AddParam( "", RSDBP_IN, pCodeDep );
    rs = rsdRecordSet( cmd );
    if( rs and rs.MoveNext() )
       pError = 0;
       return rs.value( 0, null, V_INTEGER );
    end;

    pError = 1;
    return pCodeDep;
   end;


   TotalRowCount = int( ActiveSheet.rows.count() );
   //TotalRowCount = 500;

   BegAction( 500, "Обрабатывается файл\n" + vTemplateName_AC );
   //debugbreak;
   
   CurRow = 2;
   while( CurRow <= TotalRowCount )

      vOldAccount  = ActiveSheet.Cells( CurRow, ColumnCodes.Column_AC_OldAccount    ).Value;
      vNewAccount  = ActiveSheet.Cells( CurRow, ColumnCodes.Column_AC_NewAccount    ).Value;
      vBalance     = ActiveSheet.Cells( CurRow, ColumnCodes.Column_AC_Balance       ).Value;
      vOPUCode     = ActiveSheet.Cells( CurRow, ColumnCodes.Column_AC_OPUCode       ).Value;
      vNameAccount = ActiveSheet.Cells( CurRow, ColumnCodes.Column_AC_NameAccount   ).Value;
      vClient      = ActiveSheet.Cells( CurRow, ColumnCodes.Column_AC_Client        ).Value;
      vBranch      = ActiveSheet.Cells( CurRow, ColumnCodes.Column_AC_Branch        ).Value;
      vTypeAcc     = ActiveSheet.Cells( CurRow, ColumnCodes.Column_AC_Type_Account  ).Value;
      vUserTypeAcc = ActiveSheet.Cells( CurRow, ColumnCodes.Column_AC_UserTypeAcc   ).Value;
      vOpenDate    = ActiveSheet.Cells( CurRow, ColumnCodes.Column_AC_Open_Date     ).Value;
      vCodeCur     = ActiveSheet.Cells( CurRow, ColumnCodes.Column_AC_Code_currency ).Value;
      vOper        = ActiveSheet.Cells( CurRow, ColumnCodes.Column_AC_Oper          ).Value;


      // Необходимо проключевать счета, т.к. в таблице они без ключей
      vNewAccount = GetKey( vNewAccount );
//if(trim(vOper) == "") vOper = 9999 end;
if(ValType(vOPUCode) == 0)  vOPUCode = 0 end;

      /* В файле ЭВ нет колонки "Бал счет". Так как тема не критичная, в случае, когда бал. сч.
         не указан напрямую, возьмем его из номера лицевого счёта. */
      if( ValType( vBalance ) == V_UNDEF )
         vBalance = SubStr( vNewAccount, 1, 5 );
      end;

      if( vNewAccount )

         vNewAccount = GetKey( vNewAccount );

         vBalance = string( int( vBalance ) );
         vOPUCode = string( int( vOPUCode ) );
         vOper    = int( vOper );

/* Для ВУЗ (Захарова) у которого vOoper = "010000070000" */
       vClient = ПолучитьКодСубъекта( vClient, 1, ErrCode );
         if( ErrCode ) println( "Не найден субъект с кодом вида 1 \"" + tmp + "\". Код ошибки: " + ErrCode + "." ); end;
/*

         /* Для предотвращения floating point error при приведении типов */
         if( vClient <= 2147483647 )
            vClient  = string( int( vClient  ) );
         else
            vClient = string( vClient );
            vClient = SubStr( vClient, 1, index( vClient, "." )-1 );
         end;

         ErrCode = 0; tmp = vClient;
         vClient = ПолучитьКодСубъекта( vClient, 101, ErrCode );
         // Если код 101 найти не удалось, попробуем найти код вида 1 (в файлах ЭВ используется он)
         if( ErrCode )
            vClient = ПолучитьКодСубъекта( tmp, 1, ErrCode );
         end;
         // Если снова не нашли, попробуем добавить перед кодом 0 (в ЭВ ошибка, код указан без первого нуля)
         if( ErrCode )
            vClient = ПолучитьКодСубъекта( "0"+tmp, 1, ErrCode );
         end;
         if( ErrCode ) println( "Не найден субъект с кодом вида 101 \"" + tmp + "\". Код ошибки: " + ErrCode + "." ); end;
*/

         ErrCode = 0; tmp = vBranch;
         vBranch = GetBranch( vBranch, @ErrCode );
         if( ErrCode ) println( "Не найдено подразделение. Счёт: " + vOldAccount + ", код подразделения: " + tmp + "." ); end;

         vTypeAcc = StrSubst( vTypeAcc, "не заполнено", "" );

         //Gurin S. 28.12.2015 так не работает
         //vUserTypeAcc = StrSubst( UserTypeAcc, "не заполнено", "" );
         if (ValType(vUserTypeAcc) == V_Double)
             vUserTypeAcc = int(vUserTypeAcc);
         end;

         if (ValType(vUserTypeAcc) == V_Undef)
             vUserTypeAcc = "";
         end;

         vUserTypeAcc = StrSubst( string(vUserTypeAcc), "не заполнено", "" );
             
         vCodeCur = string( int( vCodeCur ) );
         ErrCode  = 0; tmp = vCodeCur;
         vCodeCur = ПолучитьКодФинИн( string(trim( vCodeCur )), ErrCode );
         if( ErrCode ) println( "Не найдена валюта. Счёт: " + vOldAccount + ", код валюты: " + tmp + ". Код ошибки: " + ErrCode + "." ); end;

         // Контролируем длину наименования счёта - не более 120 символов
         vNameAccount = SubStr( vNameAccount, 1, 120 );

         cmd = rsdCommand( " Insert into USER_ACCOUNTS_FOR_OPEN_446P Values( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) " );
         cmd.AddParam( "", RSDBP_IN, vOldAccount  );
         cmd.AddParam( "", RSDBP_IN, vNewAccount  );
         cmd.AddParam( "", RSDBP_IN, vBalance     );
         cmd.AddParam( "", RSDBP_IN, vOPUCode     );
         cmd.AddParam( "", RSDBP_IN, vNameAccount );
         cmd.AddParam( "", RSDBP_IN, vClient      );
         cmd.AddParam( "", RSDBP_IN, vBranch      );
         cmd.AddParam( "", RSDBP_IN, vTypeAcc     );
         cmd.AddParam( "", RSDBP_IN, vUserTypeAcc );
         cmd.AddParam( "", RSDBP_IN, vOpenDate    );
         cmd.AddParam( "", RSDBP_IN, vCodeCur     );
         cmd.AddParam( "", RSDBP_IN, vOper        );
         cmd.execute();
         cmd = null;

      // Таблица закончилась
      elif( not ( vOldAccount and vBalance and vOPUCode ) )
         break;
      end;

      CurRow = CurRow + 1;
   end;

   EndAction();


END;



MACRO ProcessPaymentInstructionsFile()

 var CurRow, CurAccount;
 var TotalRowCount = 0;

 var vCommTypeStr, vCommType, vCommCode, vAccountJour, vAccountAntr;

 var vMascJour = "401*-407*,40807*",
     vMascAntr = "40802*,ИП40807*";
 var vPINameJour = "Счёт доходов для ЮЛ",
     vPINameAntr = "Счёт доходов для ИП";

   //TotalRowCount = int( ActiveSheet.rows.count() );
   TotalRowCount = 500;

   initProgress( TotalRowCount, null, "Обрабатывается файл " + vTemplateName_SI );
   //debugbreak;

   CurRow = 2;
   while( CurRow <= TotalRowCount )

      useProgress( CurRow );

      vCommTypeStr = ActiveSheet.Cells( CurRow, ColumnCodes.Column_SI_CommType    ).Value;
      vCommCode    = ActiveSheet.Cells( CurRow, ColumnCodes.Column_SI_CommCode    ).Value;
      vAccountJour = ActiveSheet.Cells( CurRow, ColumnCodes.Column_SI_AccountJour ).Value;
      vAccountAntr = ActiveSheet.Cells( CurRow, ColumnCodes.Column_SI_AccountAntr ).Value;

      vCommType = 0;
      if(   strlwr(vCommTypeStr) == "периодическая" )
         vCommType = 1;
      elif( strlwr(vCommTypeStr) == "единовременная" )
         vCommType = 3;
      elif( strlwr(vCommTypeStr) == "разовая" )
         vCommType = 6;
      end;

      // Необходимо проключевать счета, т.к. в таблице они без ключей
      vAccountJour = GetKey( vAccountJour );
      vAccountAntr = GetKey( vAccountAntr );

      // Таблица закончилась
      if( not ( vAccountJour and vAccountAntr ) )
         break;
      end;



      if( CheckAccountOpen( vAccountJour ) )
         CreatePaymentInstruction( vCommType, vCommCode, vAccountJour, vMascJour, vPINameJour );
      else
         println( "  Ошибка! Счёт не открыт: " + vAccountJour );
      end;

      if( CheckAccountOpen( vAccountAntr ) )
         CreatePaymentInstruction( vCommType, vCommCode, vAccountAntr, vMascAntr, vPINameAntr );
      else
         println( "  Ошибка! Счёт не открыт: " + vAccountAntr );
      end;



      /*
      CurAccount = String( Trim( ActiveSheet.Cells( CurRow, ColumnCodes.Column_SI_OldAccount ).Value ) );
      if( CurAccount != V_UNDEF )

         ArrCommAccounts( ArrCommAccounts.Size ) = CommAccountRecord( CorrectVal( ActiveSheet.Cells( CurRow, ColumnCodes.Column_SI_CommCode        ).Value ),
                                                                      CorrectVal( ActiveSheet.Cells( CurRow, ColumnCodes.Column_SI_OldAccount      ).Value ),
                                                                      CorrectVal( ActiveSheet.Cells( CurRow, ColumnCodes.Column_SI_SymbolJour      ).Value ),
                                                                      CorrectVal( ActiveSheet.Cells( CurRow, ColumnCodes.Column_SI_AccountJour     ).Value ),
                                                                      CorrectVal( ActiveSheet.Cells( CurRow, ColumnCodes.Column_SI_SymbolAntr      ).Value ),
                                                                      CorrectVal( ActiveSheet.Cells( CurRow, ColumnCodes.Column_SI_AccountAntr     ).Value ),
                                                                      CorrectVal( ActiveSheet.Cells( CurRow, ColumnCodes.Column_SI_AccountCurrency ).Value ),
                                                                      CorrectVal( ActiveSheet.Cells( CurRow, ColumnCodes.Column_SI_AccountClient   ).Value ),
                                                                      CorrectVal( ActiveSheet.Cells( CurRow, ColumnCodes.Column_SI_AccountBranch   ).Value ),
                                                                      CorrectVal( ActiveSheet.Cells( CurRow, ColumnCodes.Column_SI_AccountOwner    ).Value ),
                                                                      CorrectVal( ActiveSheet.Cells( CurRow, ColumnCodes.Column_SI_AccountOpenDate ).Value ) );

      end;
      */

      CurRow = CurRow + 1;
   end;

   remProgress();


END;




var retError:string;


CreateDBObjects();
ClearTable();


// Загрузка файла с информацией об открываемых счетах
if( OpenExcelFile( vTemplateName_AC, vVisible, vReadOnly, vTemplateDir ) )

   if( not AnalyzeTemplateStructure( vTemplateName_AC, true, @retError ) )
      UploadAccountsFile();
   else
      println( retError );
      exit(0);
   end;


   ExcelApplication.Quit;
   ExcelApplication = null;

end;

//debugbreak;

// Открытие счетов
OpenAccounts();

//debugbreak;

// Обработка файла комиссий
if( OpenExcelFile( vTemplateName_SI, vVisible, vReadOnly, vTemplateDir ) )

   if( not AnalyzeTemplateStructure( vTemplateName_SI, true, @retError ) )
      ProcessPaymentInstructionsFile();
   else
      println( retError );
      exit(0);
   end;

   ExcelApplication.Quit;
   ExcelApplication = null;

end;

