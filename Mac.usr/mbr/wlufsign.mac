/****************************************************************************/
/*                   R-Style SoftWare Lab, RS-Bank 5.1                      */
/****************************************************************************/
/*                  Подсистема "Межбанковские расчеты"                      */
/* Общие константы и вспомогательные функции для работы с УФЭБС             */
/*                                                                          */
/*  Имя файла: wlufsign.mac                                                 */
/*  Создан:  01.12.04                                              BARS     */
/****************************************************************************/
import MesInter, "wluftool.mac", "wlglobal.mac", "wltools.mac", cryptdlm;

FILE XmlTmpFile() txt write; /* Временный файл для избавления от проблем с кодировкой */

macro DetermitPrefixByNamespace( node:object, namespace )
   var i, child:object;
   i=0;
   while( i < node.attributes.length )
     child = node.attributes.item(i);
     if( child and (child.nodeType==ATTR_NODE) )        
        if ( (substr(child.NodeName(),1,5)=="xmlns") and (child.nodeValue==namespace) )
           return substr(child.NodeName(),7);
        end; 
     end;
     i=i+1;
   end;
   return "";
end;

macro DetermitNamespaceByPrefix( node:object, prefix )
   var i, child:object;
   i=0;
   while( i < node.attributes.length )
     child = node.attributes.item(i);
     if( child and (child.nodeType==ATTR_NODE) )
        if ( child.NodeName()==("xmlns:"+prefix) )
           return child.nodeValue;
        end; 
     end;
     i=i+1;
   end;
   return "";
end;

macro deleteAttrByNamespace( node:object, namespace, prefix )
   var i, child:object, nodeID, curNamespace;

   if ( valtype(prefix)==V_UNDEF )
      prefix="";
   end;

   if ( node.NodeType==DOCUMENT_NODE )
      i=0;
      while( i < node.childNodes.length )
        child = node.childNodes.item(i);
        if( child and (child.nodeType==CHILD_NODE) )
           return deleteAttrByNamespace( child, namespace, prefix );
        end;
        i = i+1;
      end;
      return;
   end;

   if ( prefix=="" )
      /* Префикс пространства имени не определен, определяем */
      prefix = DetermitPrefixByNamespace(node, namespace);
   else
      /* Префикс пространства имени определен, проверяем переопределили его или нет */
      curNamespace = DetermitNamespaceByPrefix(node, prefix);
      if ( (curNamespace!="") and (curNamespace!=namespace) )
         /* Его переопределили, значит определяем префикс заного */
         prefix = DetermitPrefixByNamespace(node, namespace);
      end;
   end;

   /* Сначала удаляем все атрибуты пространства имен */
   if ( prefix!="" )
      i=0;
      while( i < node.attributes.length )
        child = node.attributes.item(i);
        if( child and (child.nodeType==ATTR_NODE) )                
           if ( substr(child.NodeName(),1,strlen(prefix)+1)==(prefix+":")  )
              /* Удаляем такой атрибут */
              nodeID = node.getAttributeNode(child.NodeName());
              node.removeAttributeNode( nodeID );
           end; 
        end;
        i=i+1;
      end;
   end;

   /* Потом удаляем объявление пространства имени */
   i=0;
   while( i < node.attributes.length )
     child = node.attributes.item(i);
     if( child and (child.nodeType==ATTR_NODE) )                
        if (  ( (substr(child.NodeName(),1,5)=="xmlns") and 
                (child.nodeValue==namespace) ) )
           /* Удаляем такой атрибут */
           nodeID = node.getAttributeNode(child.NodeName());
           node.removeAttributeNode( nodeID );
        end; 
     end;
     i=i+1;
   end;

   i=0;
   while( i < node.childNodes.length )
     child = node.childNodes.item(i);
     if( child and (child.nodeType==CHILD_NODE) )
          deleteAttrByNamespace( child, namespace, prefix );
     end;
     i=i+1;
   end;
end;

macro GetPrefix( name )
   if ( Index(name,":") )
       return substr(name,1,Index(name,":")-1);
   end;
   return "";
end;

class Attributes
  var Name = TArray;
  var Value = TArray;

  macro Lenght()
      return Name.size;
  end;

  macro Add( arrt_name, arrt_value )
     Value[Name.Size] = arrt_value;
     Name[Name.Size] = arrt_name;
  end;

  /* Сортируем атрибуты в порядке возрастания, причем атрибуты без префикса ставим впереди */
  macro SortAttr()
     var i = 0, j, tmpstr;
     while( i<Lenght()-1 )
       j=i+1;       
       while( j<Lenght() )
          if ( (GetPrefix(Name[i])>GetPrefix(Name[j])) OR
               ((GetPrefix(Name[i])==GetPrefix(Name[j])) and (Name[i]>Name[j])) )
             tmpstr  = Name[i];
             Name[i] = Name[j];
             Name[j] = tmpstr;
             tmpstr  = Value[i];
             Value[i] = Value[j];
             Value[j] = tmpstr;
          end;
          j=j+1;
       end;
       i=i+1;
     end;
  end;

  macro InsertAttributes( item: object )
     var i = 0;

     while( i<Lenght() )
        item.setAttribute( Name[i], Value[i] );
        i = i + 1;
     end;
  end;  

  macro Clear()
     Name.size = 0;
  end; 

  macro Construct()
     Clear();
  end; 

  Construct();
end;

class Namespaces
  var URI = TArray;
  var prefix = TArray;
  var newPrefix = TArray;

  macro Lenght()
      return URI.size;
  end;

  macro Add( uri_name, prefix_name )
      prefix[ URI.size ] = prefix_name;
      URI[URI.size] = uri_name;
  end;

  macro Update( i, uri_name, prefix_name )
     prefix[ i ] = prefix_name;
     URI[ i ] = uri_name;
  end;

  macro FindByPrefix( prefix_name )
      var i = 0;
      while( i<Lenght() )
         if ( prefix[i]==prefix_name )
            return i;
         end;
         i=i+1;
      end;
      return -1;
  end;

  /* Добавить новый или обновить существующий */
  /* div_nmsp (необязательный) - список отличающихся пространст имен */
  macro ConditionAdd( uri_name, prefix_name, div_nmsp )
     var i = FindByPrefix(prefix_name);
     if ( i<0 )
         Add( uri_name, prefix_name );
         if ( valtype(div_nmsp)!=V_UNDEF )
            div_nmsp.Add( uri_name, prefix_name );
         end;
     else
         if ( (uri_name!=URI[i]) and (valtype(div_nmsp)!=V_UNDEF) )
            div_nmsp.Add( uri_name, prefix_name );
         end;
         Update(i, uri_name, prefix_name );
     end;
  end;

  macro Copy( from:Namespaces, ind, unCond )
     if ( ind>=0 )
        if ( (valtype(unCond)==V_UNDEF) OR (unCond==false) )
           ConditionAdd( from.URI[ind],  from.prefix[ind] );
        else
           Add( from.URI[ind],  from.prefix[ind] );
        end;
     end;
  end;

  /* Отсортировать по пространству имен */
  macro SortByURI()
     var i = 0, j, tmpstr;
     while( i<Lenght()-1 )
       j=i+1;
       while( j<Lenght() )
          if ( URI[i]>URI[j] )
             tmpstr = URI[i];
             URI[i] = URI[j];
             URI[j] = tmpstr;
             tmpstr = prefix[i];
             prefix[i] = prefix[j];
             prefix[j] = tmpstr;
          end;
          j=j+1;
       end;
       i=i+1;
     end;
  end;

  macro SortByPrefix()
     var i = 0, j, tmpstr;
     while( i<Lenght()-1 )
       j=i+1;
       while( j<Lenght() )
          if ( prefix[i]>prefix[j] )
             tmpstr = URI[i];
             URI[i] = URI[j];
             URI[j] = tmpstr;
             tmpstr = prefix[i];
             prefix[i] = prefix[j];
             prefix[j] = tmpstr;
          end;
          j=j+1;
       end;
       i=i+1;
     end;
  end;

  /* Создать новые префиксы */
  macro CreateNewPrefix()
     var i = 0, count;
     while( i<Lenght() )
        if ( i==0 )
           count = 1;
        else
           if ( URI[i]!=URI[i-1] )
              count = count + 1;
           end;
        end;

        newPrefix[i] = string("n",count);

        i = i+1;
     end;
  end;  

  macro TakeNewPrefix()
     var i = 0, count;
     while( i<Lenght() )
        newPrefix[i] = prefix[i];
        i = i+1;
     end;
  end;  

  /* Создает полный список пространств имен для узла */
  /* div_nmsp (необязательный) - список изменившихся пространств имен */
  macro CreateGlobal(parent_nmsp, node:object, div_nmsp)
     var child:object, i;

     URI.size = 0;
     if ( valtype(div_nmsp)!=V_UNDEF )
        div_nmsp.URI.size = 0;
     end;

     i=0;
     while( i<parent_nmsp.Lenght() )
        copy( parent_nmsp, i, true );
        i = i+1;
     end;

     i=0;
     while( i < node.attributes.length )
       child = node.attributes.item(i);
       if( child and (child.nodeType==ATTR_NODE) )
          if ( (substr(child.NodeName(),1,5)=="xmlns") )
             if ( child.NodeName()=="xmlns" )
                ConditionAdd( child.NodeValue, "", div_nmsp );
             else
                ConditionAdd( child.NodeValue, substr(child.NodeName(),7), div_nmsp );
             end;
          end;
       end;
       i=i+1;
     end;

     if ( valtype(div_nmsp)!=V_UNDEF )
        div_nmsp.SortByPrefix();
        div_nmsp.TakeNewPrefix();
     end;
  end;  

  /* Создает список пространств имен для актуальных только для текущего узла (не считая дочерних) */
  macro CreateLocal(current_nmsp, node)
     var child:object, i, pref;

     URI.size = 0;

     pref = GetPrefix(node.NodeName());
     copy( current_nmsp, current_nmsp.FindByPrefix(pref) );

     i=0;
     while( i < node.attributes.length )
       child = node.attributes.item(i);
       if( child and (child.nodeType==ATTR_NODE) )
          pref = GetPrefix(child.NodeName());
          /* На атрибуты действует пространство имени узла, а не пространство имен по умолчанию */
          if ( pref!="" )
             copy( current_nmsp, current_nmsp.FindByPrefix(pref) );
          end;
       end;
       i=i+1;
     end;

     SortByURI();
     CreateNewPrefix();

  end;

  /* Вставляем описания пространств имен в узел */
  macro InsertNamespaces( item: object )
     var i = 0;
     while( i<Lenght() )
        if ( (i==0) OR (newPrefix[i]!=newPrefix[i-1]) )
           item.setAttribute( "xmlns:"+newPrefix[i], URI[i] );
        end;
        i = i + 1;
     end;
  end;

  /* Получить имя узла в соответствии с требованиями нормализации */
  macro TrueNameNode( name )
     var pref = GetPrefix(name), ind;
     ind = FindByPrefix(pref);
     if ( ind<0 )
        if ( pref!="" )
           RunError("Существуют неизвестные префиксы пространств имен");
        else
           return name;
        end;
     end;
     return newPrefix[ind]+":"+GetNodeName(name);
  end;

  /* Получить имя атрибута в соответствии с требованиями нормализации */
  macro TrueNameAttr( name )
     var pref = GetPrefix(name), ind;
     if ( pref!="" )
        ind = FindByPrefix(pref);
        if ( ind<0 )
           RunError("Существуют неизвестные префиксы пространств имен");
        end;
        return newPrefix[ind]+":"+GetNodeName(name);
     else
        return name;
     end;
  end;

  macro Construct()
     URI.size = 0;
  end;

  Construct();
end;               

/* Проверяет содержит ли строка не пробельные символы */
macro IsFill( str )
   var i = 0, len = strlen(str), smb;
   while( i<len )
      smb = substr(str, i, 1);
      if ( (smb!=" ") and (smb!=strfor(10)) and 
           (smb!=strfor(13)) and (smb!=strfor(9)) )
        return true;
      end;
      i = i+1;
   end;
   return false;
end;

macro SortNamespacesNode( IsDelComment, node:object, xml:object, parent_nmsp:Namespaces, parentNode:object )
   var cur_nmsp = Namespaces;
   var child_nmsp = Namespaces;
   var child:object, item:object, i;
   var IsNeedCloseNode = true;

   child_nmsp.CreateGlobal(parent_nmsp, node);
   cur_nmsp.CreateLocal(child_nmsp, node);

   item = xml.createElement( cur_nmsp.TrueNameNode(node.NodeName()) );

   cur_nmsp.InsertNamespaces(item);

   i=0;
   while( i < node.attributes.length )
     child = node.attributes.item(i);
     if( child and (child.nodeType==ATTR_NODE) )
        if ( substr(child.NodeName(),1,5)!="xmlns" )
           item.setAttribute( cur_nmsp.TrueNameAttr(child.NodeName()), child.NodeValue);
        end;
     end;
     i=i+1;
   end;

   i=0;
   while( i < node.childNodes.length )
     child = node.childNodes.item(i);
     if( child and (child.nodeType==CHILD_NODE) )
        SortNamespacesNode( IsDelComment, child, xml, child_nmsp, item );
        IsNeedCloseNode = false;
     elif ( child and (child.nodeType==TEXT_NODE) )
        if ( IsFill(child.nodeValue) )
           item.appendChild( xml.createTextNode(child.nodeValue) );
           IsNeedCloseNode = false;
        end;
     elif ( child and (child.nodeType==COMMENT_NODE) and (not IsDelComment) )
        item.appendChild( xml.createComment(child.nodeValue) );
     /* Использование этих блоков в УФЭБС запрещен */
     /*elif ( child and (child.nodeType==CDATA_SECTION_NODE) )
        item.appendChild( xml.createCDATASection(child.nodeValue) );
     elif ( child and (child.nodeType==ENTITY_REFERENCE_NODE) )
        item.appendChild( xml.createEntityReference(child.nodeValue) );*/
     end;
     i=i+1;
   end;

   /* Насильно закрываем тег */
   if ( IsNeedCloseNode )
      item.appendChild(xml.createTextNode(""));
   end;

   if ( valtype(parentNode)==V_UNDEF )
      xml.appendChild( item );
   else
      parentNode.appendChild( item );
   end;
end;

macro SortNamespaces( node:object, xml:object, IsDelComment )
   var arr_nmsp = Namespaces, i, child:object;

   if ( node.NodeType==DOCUMENT_NODE )
      i=0;
      while( i < node.childNodes.length )
        child = node.childNodes.item(i);
        if( child and (child.nodeType==CHILD_NODE) )
           SortNamespacesNode( IsDelComment, child, xml, arr_nmsp );
        elif ( child and (child.nodeType==COMMENT_NODE) and (not IsDelComment) )
           xml.appendChild( xml.createComment(child.nodeValue) );
        /* Использование этих блоков в УФЭБС запрещен */
        /*elif ( child and (child.nodeType==CDATA_SECTION_NODE) )
           xml.appendChild( xml.createCDATASection(child.nodeValue) );
        elif ( child and (child.nodeType==ENTITY_REFERENCE_NODE) )
           xml.appendChild( xml.createEntityReference(child.nodeValue) );*/
        end;
        i = i+1;
      end;
      return;
   end;

   SortNamespacesNode( IsDelComment, node, xml, arr_nmsp );
end;

/* Выполняет нормализацию документа */
macro Normalization( xmlIni:object, IsDelComment )
    var xml_tmp:object = ActiveX( "MSXML.DOMDocument" );
    var xml:object = ActiveX( "MSXML.DOMDocument" );
    var xml_style:object = ActiveX( "MSXML.DOMDocument" );
    var i;

    if ( valtype(IsDelComment)==V_UNDEF )
       IsDelComment = true;
    end;

    xml_tmp = xmlIni;

    /* Удаляем аттрибуты, определяющие XML-схему */
    deleteAttrByNamespace(xml_tmp, "http://www.w3.org/2001/XMLSchema-instance");

    /* Сортируем пространства имен */
    SortNamespaces( xml_tmp, xml, IsDelComment );

    return xml;
end;

/*************************************************************************/

macro CanonizationFirstPassNode( IsDelComment, node:object, xml:object, parent_nmsp:Namespaces, parentNode:object )
   var attr = Attributes;
   var div_nmsp = Namespaces;
   var child_nmsp = Namespaces;
   var child:object, item:object, i;
   var IsNeedCloseNode = true;

   child_nmsp.CreateGlobal(parent_nmsp, node, div_nmsp);

   item = xml.createElement( node.NodeName() );

   div_nmsp.InsertNamespaces(item);

   i=0;
   while( i < node.attributes.length )
     child = node.attributes.item(i);
     if( child and (child.nodeType==ATTR_NODE) )
        if ( substr(child.NodeName(),1,5)!="xmlns" )
           attr.Add( child.NodeName(), child.NodeValue);
        end;
     end;
     i=i+1;
   end;

   attr.SortAttr();
   attr.InsertAttributes(item);

   i=0;
   while( i < node.childNodes.length )
     child = node.childNodes.item(i);
     if( child and (child.nodeType==CHILD_NODE) )
        CanonizationFirstPassNode( IsDelComment, child, xml, child_nmsp, item );
        IsNeedCloseNode = false;
     elif ( child and (child.nodeType==TEXT_NODE) )
        if ( IsFill(child.nodeValue) )
           item.appendChild( xml.createTextNode(child.nodeValue) );
           IsNeedCloseNode = false;
        end;
     elif ( child and (child.nodeType==COMMENT_NODE) and (not IsDelComment) )
        item.appendChild( xml.createComment(child.nodeValue) );
     /* Все это запретили в УФЭБС */
     /*elif ( child and (child.nodeType==CDATA_SECTION_NODE) )
        item.appendChild( xml.createCDATASection(child.nodeValue) );
     elif ( child and (child.nodeType==ENTITY_REFERENCE_NODE) )
        item.appendChild( xml.createEntityReference(child.nodeValue) );*/
     end;
     i=i+1;
   end;

   /* Насильно закрываем тег */
   if ( IsNeedCloseNode )
      item.appendChild(xml.createTextNode(""));
   end;

   if ( valtype(parentNode)==V_UNDEF )
      xml.appendChild( item );
   else
      parentNode.appendChild( item );
   end;
end;

/* Удяляем избыточные пространства имен и сортируем аттрибуты */
macro CanonizationFirstPass( node:object, xml:object, IsDelComment )
   var arr_nmsp = Namespaces, i, child:object;

   if ( node.NodeType==DOCUMENT_NODE )
      i=0;
      while( i < node.childNodes.length )
        child = node.childNodes.item(i);
        if( child and (child.nodeType==CHILD_NODE) )
           CanonizationFirstPassNode( IsDelComment, child, xml, arr_nmsp );
        elif ( child and (child.nodeType==COMMENT_NODE) and (not IsDelComment) )
           xml.appendChild( xml.createComment(child.nodeValue) );
        /* Все это запретили в УФЭБС */
        /*elif ( child and (child.nodeType==CDATA_SECTION_NODE) )
           xml.appendChild( xml.createTextNode(child.nodeValue) );
        elif ( child and (child.nodeType==ENTITY_REFERENCE_NODE) )
           xml.appendChild( xml.createEntityReference(child.nodeValue) );*/
        end;
        i = i+1;
      end;
      return;
   end;

   CanonizationFirstPassNode( IsDelComment, node, xml, arr_nmsp );
end;

/* Выполняет канонизацию документа */
macro Canonization( xmlIni:object, IsDelComment )
   var xml:object = ActiveX( "MSXML.DOMDocument" ), sign;

   if ( valtype(IsDelComment)==V_UNDEF )
       IsDelComment = true;
   end;

   /* Выполняем первый проход канонизации (второй сделает Си-код перед вычислением подписи) */
    CanonizationFirstPass( xmlIni, xml, IsDelComment );    

    return xml;
end;

/* Выполняет нормализацию и канонизацию */
macro TransformXMLObj( xmlIni:object, IsDelComment )
   if ( valtype(IsDelComment)==V_UNDEF )
      IsDelComment = true;
   end;
   return Canonization( Normalization( xmlIni, IsDelComment ), IsDelComment );
end;


/* Проверяет является ли имя узла узлом документа */
macro IsDocument( name )
   var onlyName = GetNodeName( name ), i;

   if ( substr(onlyName,1,2)!="ED" )
      return false;
   end;

   i = 3;
   while( i<=strlen(onlyName) )
      if ( (substr(onlyName,i,1)<"0") OR (substr(onlyName,i,1)>"9") )
         return false;
      end;
      i = i+1;
   end;

   return true;
end;

/* Возвращает true, если подпись успешна */
macro ПодписаниеЗК( Context, XmlIni:Object )
  var xml:object;
  var doc:object = ActiveX( "MSXML.DOMDocument" );
  var xmlStr, Signature;
  var signNode:object, node:object;
  var CryptoAPI = RsCryptoAPI(); 

  xml = XmlIni; 
  TransformXMLObj(xml).Save( getTxtFileName("fstcnnzc") );

  /*доканонизировать остальное*/
  if ( not Canonization2(getTxtFileName("fstcnnzc"), xmlStr))
     return false;
     end;

  if(not CryptoAPI.SignBuffer(Context, xmlStr, Signature))
            return false;
        end;
     
  if(not EncodeBase64(Signature, Signature))
         return false;
     end;

  /*Здесь надо вставить подпись*/

  signNode = doc.createElement("dsig:SigValue");
  signNode.setAttribute("xmlns:dsig", "urn:cbr-ru:dsig:v1.1");
  signNode.appendChild( doc.createTextNode(Signature) );

  XmlIni.InsertBefore(signNode, XmlIni.childNodes.item(0));

  SetParm(1, XmlIni);
  return true;

  OnError(er) /* обработка ошибок */
    ExeptionMessage(er);
    return false;
end;

/* Возвращает true, если подпись успешна */
macro ПодписаниеЭЦП( Context, XmlIni:Object )
  var xml:object = ActiveX( "MSXML.DOMDocument" );
  var envelope:object, body:object;
  var Signature, strXml;
  var signNode:object, sign:object;
  var CryptoAPI = RsCryptoAPI(); 
  var i;


  if(not CryptoAPI.SignBuffer(Context, XmlIni.Xml, Signature))
    return false;
  end;

  if(not EncodeBase64(Signature, Signature))
    return false;
  end;
  if(not EncodeBase64(XmlIni.Xml, strXml))
    return false;
end;

  /*Здесь надо вставить подпись*/
/*  xml.appendChild( xml.createProcessingInstruction("xml",
                                  " version='1.0' encoding='UTF-8'") );  
*/
  xml.appendChild( xml.createProcessingInstruction("xml",
                                  " version='1.0' encoding='WINDOWS-1251'") );  
  envelope = xml.createElement("sen:SigEnvelope");
  envelope.setAttribute("xmlns:sen", "urn:cbr-ru:dsig:env:v1.1");
  signNode = xml.createElement("sen:SigContainer");
  sign     = xml.createElement("dsig:MACValue");
  sign.setAttribute("xmlns:dsig", "urn:cbr-ru:dsig:v1.1");
  sign.appendChild( xml.createTextNode(Signature) );
  signNode.appendChild(sign);
  envelope.appendChild(signNode);
  body = xml.createElement("sen:Object");  
  body.appendChild( xml.createTextNode(strXml) );
  envelope.appendChild(body);
  xml.appendChild(envelope);

  setParm(1,xml);
              return true;

  OnError(er) /* обработка ошибок */
    ExeptionMessage(er);
   return false;      
end;

/* Возвращает true, если подпись успешна */
macro ПроверкаЗК( Context, XmlIni:Object )
  var xml:object = ActiveX( "MSXML.DOMDocument" );
  var xmlStr, Signature, i;
  var signNode:object, remNode:object;
  var CryptoAPI = RsCryptoAPI(); 

  xml = XmlIni;

  Signature = ReadNodeText(xml,"SigValue");
   i=0;
  while( i < xml.childNodes.length )
     remNode = xml.childNodes.item(i);
     if( remNode and (remNode.nodeType==CHILD_NODE) and ( GetNodeName(remNode.nodeName)=="SigValue"))
           xml.removeChild(remNode);
           break;
     end;
     i = i+1;
   end;

  TransformXMLObj(xml).Save( getTxtFileName("fstcnnzc") );

  /*доканонизировать остальное*/
  if( not Canonization2(getTxtFileName("fstcnnzc"), xmlStr))
    return false;
  end;

  return true;
end;

/* Возвращает true, если подпись верна */
/* xmlIni - узел SigEnvelope */
macro ПроверкаЭЦП( Context:string, XmlIni:Object )
 
  /* var CryptoAPI = RsCryptoAPI(); */
 
  /* На данный момент мы не можем корректно проверить ЭЦП, за нас это делает УАРМ КБР */
  /*
  var Signature:string = ReadNodeText(XmlIni, "SigContainer/MACValue");
  if( not DecodeBase64(Signature, Signature ))
    return false;
  end;

  if( not CryptoAPI.CheckBufferSign(Context, xmlStr + Signature) )
    return false;
  end;
  */

  var node_Object:object = XmlIni.selectSingleNode("//sen:Object");
  if( not node_Object )
    std.msg("Не найден узел 'Object' импортируемого xml-документа");
    return false;
  end;

  var xmlStr:string = node_Object.firstChild.data;
  if( not xmlStr )
    std.msg("Узел 'Object' импортируемого xml-документа не содержит информации");
    return false;
  end;

  var toXmlStr:string = "";
  if( not DecodeBase64(xmlStr, toXmlStr) )
    std.msg("Ошибка при выполнении преобразования Base64 над тегом 'Object' импортируемого xml-документа");
    return false;
  end;
  
  /* После получения исходного xml-сообщения в виде строки можно воспользоваться xml.loadXML(),
     однако возникают ошибки кодировки, т.к. RSL перед тем, как отдать строку ActiveX объекту,
     делает преобразование ->1251->UNICODE, это приводит к необратимым последствиям.
     В этой ситуации проще сохранить строку во временном файле и загрузить xml-документ из файла */

  /* Создаем временный файл и перенаправляем в него вывод */
  var XmlTmpFileName:string = GetTxtFileName("tmpxml");
  var OldName       :string = SetOutPut( XmlTmpFileName, false ); /* Все данные из файла удаляем */

  if( not open( XmlTmpFile, XmlTmpFileName ) )
    std.msg( String( "Ошибка при открытии временного файла:|", XmlTmpFileName ) );
    return false;
  end;

  /* Записываем строку xml-сообщения во временный файл */
  println( toXmlStr ); 

  close(XmlTmpFile);
  SetOutPut( OldName, true );/*Перенаправляем вывод обратно*/

  /* Загружаем xml-объект из файла */
  var xml:object = ActiveX( "MSXML.DOMDocument" );
  if( not xml.load( XmlTmpFileName ) )
    std.msg( string( "Невозможно загрузить xml-документ, полученый преобразованием Base64 тега 'Object'" ) );
    return false;
  end;

  SetParm( 1, xml.DocumentElement );
   
  return true;

  OnError(er) /* обработка ошибок */
    ExeptionMessage(er);
    return false;
end;
