/****************************************************************************/
/*                   R-Style SoftWare Lab, RS-Bank 5.1                      */
/****************************************************************************/
/*                  Подсистема "Межбанковские расчеты"                      */
/* Генерация выписок по сообщениям УФЭБС ED211                              */
/*                                                                          */
/* Имя файла: ufgd211.mac                                                   */
/* Создан:    24.10.05                                      Фомченкова Л.Н. */
/* Изменен:   10.04.12 Chesnokov D.S. по заявке С-9530 проверка на группу   */
/****************************************************************************/
import "ufgendoc.mac", "diver.mac";

var ver_st = 1;

macro GenDoc( addrMes )

  if (not ВходитВГруппу({oper},198))
    msgBox("Вы не включены в группу \"198 - Генерация сообщений УФЭБС\"");
    return false;
  end;

  var xml:object  = ActiveX( "MSXML.DOMDocument" );
  var Node:object = ActiveX( "MSXML.DOMDocument" );
  var Строка, Сумма, Corschem, Currency, Error, Cancel, Sums, field_name;
  var StatusCode, i = 0, Page, EDDate, j = 0;
  var relRef = NULL;
  var WlPmID = 0;
  var PaymentID = 0;
  
  SetBuff( wlmes, addrMes );

  PrintLog( 2, "Генерация выписки по ED211" );

  ClearRecord( wlhead );

  while( СчитатьПоле( field_name, Строка ) )
    if( field_name == XMLField )
      if ( not xml.loadXML(Строка) )
         println( string( "Неверный формат сообщения по форме ED211" ) );
         return false;
      end;

      Cancel = KVIT_NORMAL;

      /* Заполнение учетных буферов */
      if( ver_st == 1 )
         wlhead.Number       = int(ReadAttribute(xml,"EDDayNo"));
         Page = ReadOptinalAttribute(xml,"MessageNo");
         if (Page)
            wlhead.Page     = int(Page);
         end;
      else
         ПроверитьЭлелементPartInfoНаНаличие(xml, wlhead.PartAggregateID, wlhead.Page );
      end;

      wlhead.SubKind      = int(ReadAttribute(xml,"AbstractKind"));
      Sums = ReadOptinalAttribute(xml,"ReservedSum");
      if (Sums)
          wlhead.SumReserve  = money(Sums)/100;
      end;
      Sums = ReadOptinalAttribute(xml,"CreditLimitSum");
      if (Sums)
          wlhead.OverNightLimit  = money(Sums)/100;
      end;
      Sums = ReadOptinalAttribute(xml,"CreditSum");
      if (Sums)
          wlhead.CreditTurn  = money(Sums)/100;
      end;
      Sums = ReadOptinalAttribute(xml,"DebetSum");
      if (Sums)
          wlhead.DebetTurn  = money(Sums)/100;
      end;
      Sums = ReadOptinalAttribute(xml,"OutBal");
      if (Sums)
          wlhead.RestOut = money(Sums)/100;
      end;
      Sums = ReadOptinalAttribute(xml,"EnterBal");
      if (Sums)
          wlhead.RestIn = money(Sums)/100;
      end;
      wlhead.Account = ReadAttribute(xml,"Acc"); 
      wlhead.DateIn       = ToDate_(ReadAttribute(xml,"AbstractDate"));//TAM 02.08.12
      wlhead.DateOut      = wlhead.DateIn;
      wlhead.FIID = 0;
      if( not ОпределитьСхемуРасчетовПоКорсчету( wlhead.Corschem, wlmes.OutsideAbonentID, wlhead.Account, wlhead.FIID ) )
        return FALSE;
      end;    

      //Gurin S. 26.03.2015 HF2031_19_25_148
      Sums = ReadOptinalAttribute(xml, "ArrestSum");
      if (Sums)
        wlhead.SumArest = money(Sums)/100;
      end;

      if( not ВставитьЗаголовокВыписки( wlhead ) )
        std.msg("Ошибка при вставке заголовка выписки");
        return FALSE;
      end;
    elif( field_name == UFBSDocExtField )   
      /* Вставляем документы выписки */

      if( not node.loadXML(Строка) )
        println( string( "Неверный формат сообщения по форме ED211" ) );
        return false;
      end;

      ClearRecord(wlconf);
      
      Sums = ReadAttribute(Node,"Sum");
      wlconf.Sum        = money(Sums)/100;
      wlconf.Number     = ReadOptinalAttribute(Node,"AccDocNo");
      if( (ver_st == 2) and (wlconf.Number == "") )
        wlconf.Number   = ReadOptinalAttribute(Node,"CashDocNo");
      end;
      
      wlconf.CodeKind   = PTCK_BIC;
      wlconf.CodeValue  = ReadAttribute(Node, "BICCorr");
      wlconf.BankID     = ПолучитьКодСубъекта( wlconf.CodeValue, wlconf.CodeKind, Error ) ;
      wlconf.FIID       = wlhead.FIID;                            
      wlconf.Cancel     = Cancel;
      wlconf.DKFlag     = UF_GetDKFlag(ReadAttribute(Node, "DC"));
      wlconf.ShifrOper  = ReadAttribute(Node,"TransKind");
      wlconf.TransferDate = wlhead.DateIn; //#118037  

      relRef = EDNoDateAuthor();
      relRef.EDNo   = ReadAttribute(Node,"EDNo", "EDRefID");
      relRef.EDDate = ToDate_(ReadAttribute(Node,"EDDate", "EDRefID")); //TAM 02.08.12
      relRef.EDAuthor = ReadAttribute(Node, "EDAuthor", "EDRefID");

      wlconf.DateValue = relRef.EDDate;
      wlconf.RelatedRef = relRef.GetTrn();
      
      /*ЗАП.№ 110292*/
      if(ver_st == 2)
         ReadAttribute(Node,"PayerPersonalAcc");
         ReadAttribute(Node,"PayeePersonalAcc");
      end;
      
      /* Количество документов в выриске */
      if( wlconf.DKFlag == WL_DEBET )
        wlhead.DebetNumDoc = wlhead.DebetNumDoc + 1;
      else
        wlhead.CreditNumDoc = wlhead.CreditNumDoc + 1;
      end;

      /* Вставляем документ выписки */
      if( not ВставитьДокументВыписки( wlconf ) )
        std.msg("Ошибка при сохранении документа выписки");
        return FALSE;
      end;

    else
      std.msg( string( "Неизвестный код поля: ", field_name) );
      return FALSE;
    end;
  end;

  /* Обновим выписку */  
  if( not ОбновитьЗаголовокВыписки( wlhead ) )
    std.msg("Ошибка при обновлении заголовка выписки");
    return FALSE;
  end;

  return TRUE;

  OnError(er) /* Обработка ошибок времени выполнения */
    std.msg(String(er.Message, "|Модуль: ", er.Module, " Строка: ", er.Line));
    return FALSE;
end;

macro GenDocV2( addrMes )
   ver_st = 2;
   return GenDoc( addrMes );
end;
