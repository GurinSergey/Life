/****************************************************************************/
/*                   R-Style SoftWare Lab, RS-Bank 5.1                      */
/****************************************************************************/
/*                  Подсистема "Межбанковские расчеты"                      */
/*  Макрос для подключения при использовании модуля Сообщений не только     */
/*  из МБР, а еще из прикладных бэк-офисов (МБК, Депозитарий), которые      */
/*  _не_подключают_ модуль WldInter                                         */
/*                                                                          */
/*  Имя файла: wlglobal.mac                                                 */
/*  Создан:  24.01.00                                        Алешин А.В.    */
/*  Gurin S. 26.03.2015 HF2031_19_25_148                                    */
/****************************************************************************/

import rsd, MesInter, PTInter, PaymInter, CTInter, "globals.mac", "wllog.mac", "rsberror.mac",
       "oralib.mac", "likepy.mac", "cb_sql.mac";

RECORD route        ( pmroute );   
RECORD sndroute     ( pmroute );   
RECORD wlfininstr   ( fininstr ); 
RECORD wlpm         ( wlpm  );    
RECORD wlpmpaym     ( pmpaym );   
RECORD wlpmprop     ( pmprop );   
RECORD wlpmpropdeb  ( pmprop );   
RECORD wlpmpropcred ( pmprop );   
RECORD wlpmrmprop   ( pmrmprop ); 
RECORD wlhead       ( wlhead );   
RECORD wlconf       ( wlconf );   
RECORD wlreq        ( wlreq  );   
RECORD wlmes        ( wlmes  );   
RECORD wlinfo       ( wlinfo );   
RECORD wlrest       ( wlrest );   
RECORD wldlmm       ( wldlmm );   
RECORD wldeal       ( dl_tick );  
RECORD wlnett       ( dl_nett );
RECORD wlsess       ( wlsess );  
RECORD wlparty      ( party );  
RECORD wladdress    ( adress );  
RECORD wlpmdemand   ( pmdemand );
RECORD wlacclnk     ( wlacclnk );
RECORD wlregdec     ( wlregdec );
RECORD wlresprm     ( wlresprm );
RECORD wlerror      ( wlerror );

FILE f_wltpshem     ( wltpshem ) key 0;
FILE f_wltpfrmt     ( wltpfrmt ) key 0;
FILE f_wltransp     ( wltransp ) key 0;
FILE f_wlfininstr   ( fininstr ) key 0;
FILE f_wlmes        ( wlmes )    key 0;
FILE f_wlsess       ( wlsess )   key 0;
FILE f_wlmesrls     ( wlmesrls ) key 0;
FILE f_wlmesfrm     ( wlmesfrm ) key 0;
FILE f_wlmeslnk     ( wlmeslnk ) key 0;
FILE f_wlpm         ( wlpm )     key 0;
FILE f_wlpmpaym     ( pmpaym )   key 0;
FILE f_wldprt       ( bankdprt ) key 0;
FILE f_wlreq        ( wlreq )    key 0;
FILE f_wlcors       ( corschem ) key 0;
FILE f_wlobjcode    ( objcode ) key 0;

var tbf_wlmes    = TBFile( "wlmes",    "r", 0 ); // для посегментной оптимизации
var tbf_wlmeslnk = TBFile( "wlmeslnk", "r", 0 ); // для посегментной оптимизации
var tbf_wlpm     = TBFile( "wlpm",     "r", 0 ); // для посегментной оптимизации

/* Виды платежей */
const WL_DEBET   =  1, /*'Д' - дебетовый  */ 
      WL_CREDIT  =  2, /*'К' - кредитовый */
      WL_DKUNDEF = -1; /* Неопределен */

const WLD_ERR_FLD_NOT_FOUND_BLOCK : integer = 4744, // В блоке %s не найдено поле %s
      WLD_ERR_FLD_NOT_FOUND_RLS : integer   = 4745; // В релизе формы не найдено поле %s

/* Определить форму сообщения */
macro WlDefineForm( RlsFormID:integer )
  var rs:object;
  var select:string;
  var params:TArray;

  select = "select wlmesfrm.t_Name, wlmesfrm.t_Description, wlmesrls.t_Name "+
          "from dwlmesfrm_dbt wlmesfrm, dwlmesrls_dbt wlmesrls where wlmesrls.t_RlsFormID =:RlsFormID "+
          " AND wlmesfrm.t_FormID = wlmesrls.t_FormID";
  params = makeArray( SQLParam("RlsFormID", RlsFormID));
  rs = execSQLselect( select, params, FALSE );
  if( rs.MoveNext() )
    f_wlmesfrm.Name        = rs.value(0);
    f_wlmesfrm.Description = rs.value(1);
    f_wlmesrls.Name        = rs.value(2);
    return true;
  end;

  return false;
end;

/* Определить наименованием и ID формата транспорта по умолчанию в разрезе филиалов */
macro ОпределитьФорматТранспорта( TpID:integer, Name:string, FormatFile:integer, MaxMes:integer, GroupSessByPacketType : bool ):integer
  var TpFrmtID:integer = 0;
  var rs:object;
  var select:string;
  var params:TArray;

  select = "select tpfrmt.t_tpfrmtid, upper(tpfrmt.t_name) as t_TpFrmtName, tpfrmt.t_FormatFile, tpfrmt.t_MaxExpNumMes, tpfrmt.t_GroupSessByPacketType "+ 
           " from dwltpfrmt_dbt tpfrmt where tpfrmt.t_tpid = :TPID"+
           " and tpfrmt.t_state = 1 and tpfrmt.t_department = :OperD";
  params = makeArray( SQLParam("TPID",TpID), SQLParam("OperD",{OperDprt}));
  rs = execSQLselect( select, params, FALSE );
  if( rs.MoveNext() )
    TpFrmtID = rs.value(0);
    if( GetParm(1, Name ) )
      SetParm(1, rs.value(1));
    end;     
    if( GetParm(2, FormatFile ) )
      SetParm(2, rs.value(2));
    end;     
    if( GetParm(3, MaxMes ) )
      SetParm(3, rs.value(3));
    end; 
    if( GetParm(4, GroupSessByPacketType ) )
      SetParm(4, ( rs.value("t_GroupSessByPacketType") == "X" ));
    end;    
  end;
  return TpFrmtID;
end;

/* Определить параметры формата транспорта для транспортной схемы */
macro ОпределитьФорматТранспортаДляТранспортнойСхемы( TpSchemID:integer, Name:string, FormatFile:integer, MaxMes:integer, GroupSessByPacketType : bool ):integer
  var TpFrmtID:integer = 0, foundName:string, foundFormatFile:integer, foundMaxMes:integer, foundGroupSessByPacketType : bool = false;
  
  var FWlTpShem : Tbfile = Tbfile("wltpshem.dbt");
  FWlTpShem.rec.TpShemID = TpSchemID;
  
  if( FWlTpShem.GetEQ() )
    if( FWlTpShem.rec.DefaultTpFrmtID > 0 ) // в трансп. схеме формат не по умолчанию
      var rs:object, select:string, params:TArray;

      select = "Select tpfrmt.t_TpFrmtId, upper(tpfrmt.t_Name) as t_TpFrmtName, tpfrmt.t_FormatFile, tpfrmt.t_MaxExpNumMes, tpfrmt.t_GroupSessByPacketType " + 
               "  from dwltpfrmt_dbt tpfrmt, dwltpshem_dbt tps " +
               " where tpfrmt.t_TpFrmtId = tps.t_DefaultTpFrmtID " +
               "   and tps.t_TpShemID = :TpShemID";
      params = makeArray( SQLParam("TpShemID", TpSchemID) );
      rs = execSQLselect( select, params, FALSE );
      if( rs.MoveNext() )
        TpFrmtID = rs.value("t_TpFrmtId");
        foundName = rs.value("t_TpFrmtName");
        foundFormatFile = rs.value("t_FormatFile");
        foundMaxMes = rs.value("t_MaxExpNumMes");
        foundGroupSessByPacketType = ( rs.value("t_GroupSessByPacketType") == "X" );
      end;
    else // в трансп. схеме задан формат транспорта по умолчанию
      TpFrmtID = ОпределитьФорматТранспорта(FWlTpShem.rec.TpID, foundName, foundFormatFile, foundMaxMes, foundGroupSessByPacketType );
    end;

    if(TpFrmtID > 0)
      if( GetParm(1, Name ) )
        SetParm(1, foundName);
      end;     
      if( GetParm(2, FormatFile ) )
        SetParm(2, foundFormatFile);
      end;     
      if( GetParm(3, MaxMes ) )
        SetParm(3, foundMaxMes);
      end;
      if( GetParm(4, GroupSessByPacketType ) )
        SetParm(4, foundGroupSessByPacketType);
      end;
    end;
  end;

  return TpFrmtID;
end;

/* Обработка exception (ошибок времени выполнения) */
macro ExeptionMessage(er)
  //RsbShowError(er);
  // zmp 29.12.2014 I-00542643
  if(index(er.message, "неверное значение параметра EntityCode") != 0)
       msgBox("Необходимо установить признак ИП для клиента");
  else MsgBox( String(RsbGetError(er), "|Модуль: ", er.Module, " Строка: ", er.Line) );
  end;
end;

/* Проверяет был ли платеж помещен на счет незавершенных */
macro IsPlacedInUnclosed( PaymentID )
  var rs:object;
  var select:string;
  var params:TArray;

  select = "select COUNT(oproper.t_ID_Operation) "+
                             "from doproper_dbt oproper, doprstep_dbt oprstep "+
                             "where oproper.t_DocKind=310 "+
                             "AND oproper.t_DocumentID=LPAD(:PaymentID, 34, '0') "+
                             "AND oprstep.t_ID_Operation=oproper.t_ID_Operation "+
                             "AND oprstep.t_IsExecute='X' "+
                             "AND oprstep.t_Kind_Action=312 "+
                             "AND not exists(select oprstep2.t_ID_Step "+
                                              "from doprstep_dbt oprstep2 "+
                                             "where oprstep2.t_ID_Operation=oprstep.t_ID_Operation "+
                                               "and oprstep2.t_Kind_Action=17 "+
                                               "and oprstep2.t_ID_Step>oprstep.t_ID_Step "+
                                               "and oprstep2.t_IsExecute='X')";  
  params = makeArray( SQLParam("PaymentID", PaymentID));
  rs = execSQLselect( select, params, FALSE );

  rs.moveNext();
  if ( rs.value(0)==0 )
     return false;
  end;
  return true;
end;

/* Проверяет был ли платеж редактирован */
macro IsEditPayment( ID_Operation )
  var rs:object;
  var select:string;
  var params:TArray;

  select = "select COUNT(oproper.t_ID_Operation) "+
                             "from doproper_dbt oproper, doprstep_dbt oprstep "+
                             "where oproper.t_ID_Operation=:ID_Operation " +
                             "AND oprstep.t_ID_Operation=oproper.t_ID_Operation "+
                             "AND oprstep.t_IsExecute='X' "+
                             "AND oprstep.t_BlockID=29044 ";
  params = makeArray( SQLParam("ID_Operation", ID_Operation));
  rs = execSQLselect( select, params, FALSE );

  rs.moveNext();
  if ( rs.value(0)==0 )
     return false;
  end;
  return true;
end;

macro ExistsExternalInProp( RsPaym )
  if ( not RsPaym.PaymentID)
    return false;
  end;
  if ( (RsPaym.PayerIsSender=="X") and     (RsPaym.PayerGroup == PAYMENTS_GROUP_EXTERNAL) )
       return true;
  elif ( (RsPaym.ReceiverIsSender=="X") and  (RsPaym.ReceiverGroup == PAYMENTS_GROUP_EXTERNAL) )
       return true;
    else
       return false;
    end;
end;

macro ExistsExternalOutProp( RsPaym )
  if ( not RsPaym.PaymentID)
     return false;
  end;
  if ( (RsPaym.PayerIsSender!="X")      and (RsPaym.PayerGroup==PAYMENTS_GROUP_EXTERNAL) )
       return true;
  elif ( (RsPaym.ReceiverIsSender!="X") and (RsPaym.ReceiverGroup==PAYMENTS_GROUP_EXTERNAL) )
       return true;
    else
       return false;
    end;
end;

/* Является ли платеж транзитным (без обращения к БД) */
macro IsTransitPayment( RsPaym )
    return (ExistsExternalInProp( RsPaym) and
            ExistsExternalOutProp(RsPaym));
end;

/* Определить тип дебета/кредита для платежа (с обращением с БД) */
macro WldFindDK( PaymentID:integer ):integer
  var rs:object;
  var select:string;
  var params:TArray;
  var DK:integer = WL_DKUNDEF;

  select = "select Decode(pmprop.t_IsSender, 'X', Decode(pmprop.t_DebetCredit, 0," + WL_CREDIT + "," + WL_DEBET + ")," +
                                                " Decode(pmprop.t_DebetCredit, 1," + WL_CREDIT + "," + WL_DEBET + "))" +
            " from dpmprop_dbt pmprop" + 
            " where pmprop.t_PaymentID = :PaymentID and pmprop.T_GROUP = 1";

  params = makeArray( SQLParam("PaymentID", PaymentID));

  rs = execSQLselect( select, params, FALSE );

  if( rs.moveNext() )
    DK = rs.value(0);
  end;

  return DK;
end;

/* Является ли платеж дебетовым (без обращения к БД) */
macro IsDebetPaym( RsPaym )
  if (not RsPaym.PaymentID)
    return false;
  end;
  if( RsPaym.PayerGroup == PAYMENTS_GROUP_EXTERNAL )
      if( RsPaym.PayerIsSender != "X" )
         return true;
      end;
  elif ( RsPaym.ReceiverGroup == PAYMENTS_GROUP_EXTERNAL )
      if( RsPaym.ReceiverIsSender == "X" )
         return true;
      end;
   end; 
   return false;
end;

/* Является ли платеж кредитовым (без обращения к БД) */
macro IsCreditPaym( RsPaym )
  if (not RsPaym.PaymentID)
    return false;
  end; 
  if( RsPaym.PayerGroup == PAYMENTS_GROUP_EXTERNAL )
     if( RsPaym.PayerIsSender == "X" )
         return true;
      end;
  elif ( RsPaym.ReceiverGroup == PAYMENTS_GROUP_EXTERNAL )
     if( RsPaym.ReceiverIsSender != "X" )
         return true;
      end;
   end; 
   return false;
end;  

/* Является ли платеж дебетовым, через буферы свойств платежа*/
macro IsDebetPaymBuff( deb, cred )
   if( (deb.PaymentID!=0) and (deb.group==PAYMENTS_GROUP_EXTERNAL) )
      if( deb.IsSender != "X" )
         return true;
      end;
   elif ( (cred.PaymentID!=0) and (cred.group==PAYMENTS_GROUP_EXTERNAL) )
      if( cred.IsSender == "X" )
         return true;
      end;
   end; 

   return false;
end;

/* Является ли платеж кредитовым, через буферы свойств платежа*/
macro IsCreditPaymBuff( deb, cred )
   if( (deb.PaymentID!=0) and (deb.group==PAYMENTS_GROUP_EXTERNAL) )
      if( deb.IsSender == "X" )
         return true;
      end;
   elif ( (cred.PaymentID!=0) and (cred.group==PAYMENTS_GROUP_EXTERNAL) )
      if( cred.IsSender != "X" )
         return true;
      end;
   end; 

   return false;
end;

/* возвращает наименование месяца в родительном падеже */
macro Месяца (НомерМесяца)
   array Mes;
   Mes(12) = "декабря";  Mes(1)  = "января";   Mes(2)  = "февраля";
   Mes(3)  = "марта";    Mes(4)  = "апреля";   Mes(5)  = "мая";
   Mes(6)  = "июня";     Mes(7)  = "июля";     Mes(8)  = "августа";
   Mes(9)  = "сентября"; Mes(10) = "октября";  Mes(11) = "ноября";
   return Mes(НомерМесяца);
end;

// Получить референс сообщения по учетному объекту
// Direct = ""  - искать исходящее сообщение
// Direct = "X" - искать входящее сообщение
macro GetTrnByMesLnk(ObjID:integer, ObjKind:integer, Direct:string) : string
  var select = "Select wlmes.t_Trn " +
               "  from dwlmes_dbt wlmes, dwlmeslnk_dbt lnk " +
               " where wlmes.t_MesID = lnk.t_MesID " +
               "   and lnk.t_ObjID = :ObjID " +
               "   and lnk.t_ObjKind = :ObjKind ";
  if(Direct == "")
    select = select + 
               "   and lnk.t_Direct = chr(0) ";
  elif(Direct == "X")
    select = select + 
               "   and lnk.t_Direct = 'X' ";
  end;
  select = select + " order by wlmes.t_MesID DESC ";

  var params = makeArray( SQLParam("ObjID", ObjID),
                          SQLParam("ObjKind", ObjKind) );
  var rs : RsdRecordset = execSQLselect(select, params);
  if(rs and rs.moveNext)
    return rs.value("t_Trn");
  end;

  return "";
end;

