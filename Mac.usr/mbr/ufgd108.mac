/****************************************************************************/
/*                   R-Style SoftLab, RS-Bank 6.0                           */
/****************************************************************************/
/*                  Подсистема "Межбанковские расчеты"                      */
/* Генерация платежей по сообщениям УФЭБС ED108                             */
/*                                                                          */
/*  Имя файла: ufgd108.mac                                                  */
/*  Создан:    13.06.12                                Chukina T.           */
/****************************************************************************/
import "ufgendoc.mac";

private class TCommonSideInfo
  var Account_FromXmlField : string = "",
      IsAccountInReestr    : bool = false,

      INN_FromXmlField     : string = "",
      IsINNInReestr        : bool = false,

      Name_FromXmlField    : string = "",
      IsNameInReestr       : bool = false,

      BankCode             : string = "",
      CorrAccNostro        : string = "";
end;

private class TCommonPmInfo
  var ValueDate                   : date = date(0, 0, 0),
      PaymentKind                 : string = "",
      Payer                       : TCommonSideInfo = TCommonSideInfo(),
      Payee                       : TCommonSideInfo = TCommonSideInfo(),
      ShifrOper                   : string = "",
      Priority                    : integer = 0,
      PayerBankEnterDate          : string = "",
      I2PlaceDate                 : string = "",
      PayerChargeOffDate          : string = "",

      Purpose_FromXmlField        : string = "",
      IsPurposeInReestr           : bool = false,
      
      TaxAuthorState_FromXmlField : string = "",
      IsTaxAuthorStateInReestr    : bool = false,
      BttTICode                   : string = "",
      OKATOCode                   : string = "";
end;

private class TPmSideInfo
  var Account : string = "",
      INN     : string = "",
      Name    : string = "",
      Addr    : string = "";
end;

private class TSinglePmInfo
  var IsMultyPayment        : bool = false,
      DocNo                 : string = "",
      Reference             : string = "",
      DocDate               : string = "",
      BaseAmount            : money = $0,
      Purpose               : string = "",
      UIN                   : string = "", //DAI Hotfix HF2031_19_25_12
      
      Payer                 : TPmSideInfo = TPmSideInfo(),
      Payee                 : TPmSideInfo = TPmSideInfo(),

      TaxAuthorState        : string = "",
      TaxPmGround           : string = "",
      TaxPmPeriod           : string = "",
      TaxPmNumber           : string = "",
      TaxPmDate             : string = "",
      TaxPmType             : string = "",

      OperationID           : string = "",
      DocIndex              : string = "",
      PayerPersonalID       : string = "",
      PayeePersonalID       : string = "",
      RemittanceInfo        : string = "",
      OFKAccount            : string = "",
      BudgetReceiverAccount : string = "";
end;

private macro GetDateFromAttrUFBS(AttrValue : string, DefaultDate) : date
  if(AttrValue)
    //Gurin S. 24.01.2015
    return ToDate_(AttrValue);
  elif( ValType(DefaultDate) == V_DATE )
    return DefaultDate;
  else
    return date(0, 0, 0);
  end;
end;

private macro ReadPmSide( xml : object, IsXmlField : bool, SideTag : string, 
                          PmInfo : TPmSideInfo, CommonInfo : TCommonSideInfo )

  var TransactionSideTag : string = "Transaction" + SideTag + "Info",
      tmpstr : string = "";

  // INN
  if(IsXMLField)
    PmInfo.INN = ConstructINN( ReadOptinalAttribute(xml, "INN", SideTag), ReadOptinalAttribute(xml, "KPP", SideTag) );
    CommonInfo.INN_FromXmlField = PmInfo.INN;
  else
    PmInfo.INN = ReadOptinalAttribute( xml, "INN", TransactionSideTag );

    if(PmInfo.INN)
      CommonInfo.IsINNInReestr = true;
    end;
  end;

  // Name
  if(IsXMLField)
    PmInfo.Name = ReadNodeText(xml, SideTag + "/Name");
    CommonInfo.Name_FromXmlField = PmInfo.Name;
  else
    tmpstr = ReadNodeText(xml, TransactionSideTag + "/PersonName", false);
    if(tmpstr)
      PmInfo.Name = tmpstr;
    else
      PmInfo.Name = ReadNodeText(xml, TransactionSideTag + "/TradeName", false);
    end;
    PmInfo.Addr = ReadNodeText(xml, TransactionSideTag + "/PersonAddress", false);

    if(PmInfo.Name)
      CommonInfo.IsNameInReestr = true;
    end;
  end;

  // Account
  if(IsXMLField)
    PmInfo.Account = ReadOptinalAttribute(xml, "PersonalAcc", SideTag);
    CommonInfo.Account_FromXmlField = PmInfo.Account;
  else
    PmInfo.Account = ReadOptinalAttribute( xml, "Acc", TransactionSideTag );

    if(PmInfo.Account)
      CommonInfo.IsAccountInReestr = true;
    end;
  end;

  // "Bank"
  if(IsXMLField)
    CommonInfo.BankCode = ReadAttribute( xml, "BIC", SideTag + "/Bank" );
    CommonInfo.CorrAccNostro = ReadOptinalAttribute( xml, "CorrespAcc", SideTag + "/Bank" );
  end;

end;

private macro FillSideBuffers( IsMultyPayment : bool, DebetCredit : integer, 
                               PmInfo : TPmSideInfo, CommonInfo : TCommonSideInfo,
                               pmprop, Account : @string, INN : @string, Name : @string,
                               CorrAccNostro : @string, ValueDate : date 
                             )
  if(IsMultyPayment or not CommonInfo.IsINNInReestr)
    INN = CommonInfo.INN_FromXmlField;
  else
    INN = PmInfo.INN;
  end;

  if(IsMultyPayment or not CommonInfo.IsNameInReestr)
    Name = CommonInfo.Name_FromXmlField;
  else
    Name = PmInfo.Name;
  end;
  if(PmInfo.Addr)
    Name = Name + "//" + PmInfo.Addr + "//";
  end;

  if(IsMultyPayment or not CommonInfo.IsAccountInReestr)
    Account = CommonInfo.Account_FromXmlField;
  else
    Account = PmInfo.Account;
  end;

  InitPMPROP( pmprop );
  pmprop.DebetCredit = DebetCredit;
  if( ValueDate == date(0, 0, 0) )
    pmprop.TransferDate = {curdate};
  else
    pmprop.TransferDate = ValueDate;
  end;

  if(DebetCredit == PRT_Credit)
    pmprop.IsSender = "X";
  end;

  pmprop.CodeKind = PTCK_BIC;
  pmprop.BankCode = CommonInfo.BankCode;

  CorrAccNostro = CommonInfo.CorrAccNostro;
end;

private macro ReadPmInfo( xml : object, IsXMLField : bool, 
                          PaymentsInfo : TArray, CommonInfo : TCommonPmInfo )

  var PmInfo : TSinglePmInfo = TSinglePmInfo(), tmpstr : string = "";

  PmInfo.IsMultyPayment = IsXMLField;

  if(IsXMLField)
    PmInfo.DocNo = ReadAttribute( xml, "AccDocNo", "AccDoc" ); // Pmrmprop.Number
    PmInfo.Reference = wlmes.Trn; // Pmrmprop.reference
    PmInfo.DocDate = ReadAttribute( xml, "AccDocDate", "AccDoc" ); // pmrmprop.Date
  else
    PmInfo.DocNo = ReadOptinalAttribute( xml, "PayerDocNo" ); // Pmrmprop.Number
    PmInfo.Reference = ReadOptinalAttribute( xml, "TransactionID" ); // Pmrmprop.reference
    PmInfo.DocDate = ReadOptinalAttribute( xml, "PayerDocDate" ); // pmrmprop.Date
  end;

  // Pmpaym.BaseAmount
  if(IsXMLField)
    tmpstr = ReadAttribute( xml, "Sum" );
  else
    tmpstr = ReadAttribute( xml, "TransactionSum" );
  end;
  PmInfo.BaseAmount = moneyL( tmpstr )/100;

  ReadPmSide( xml, IsXMLField, "Payer", PmInfo.Payer, CommonInfo.Payer );
  ReadPmSide( xml, IsXMLField, "Payee", PmInfo.Payee, CommonInfo.Payee );

  // Pmrmprop.Ground
  if(IsXMLField)
    PmInfo.Purpose = ReadNodeText(xml, "Purpose");
    CommonInfo.Purpose_FromXmlField = PmInfo.Purpose;
  else
    PmInfo.Purpose = ReadNodeText(xml, "TransactionPurpose", false);

    if(PmInfo.Purpose)
      CommonInfo.IsPurposeInReestr = true;
    end;
  end;

  if(IsXMLField)
    var PaytKind = int(ReadOptinalAttribute(xml, "PaytKind"));
    CommonInfo.PaymentKind = PaytKindToPaymentKind(PaytKind);
    CommonInfo.ShifrOper = ReadAttribute( xml, "TransKind" );
    CommonInfo.Priority = ReadAttribute(xml, "Priority");
    CommonInfo.PayerBankEnterDate = ReadOptinalAttribute( xml, "ReceiptDate" );
    CommonInfo.I2PlaceDate = ReadOptinalAttribute( xml, "FileDate" );
    CommonInfo.PayerChargeOffDate = ReadOptinalAttribute( xml, "ChargeOffDate" );
    CommonInfo.BttTICode = ReadOptinalAttribute( xml, "CBC", "DepartmentalInfo" );
    CommonInfo.OKATOCode = ReadOptinalAttribute( xml, "OKATO", "DepartmentalInfo" );
  end;

  // Pmrmprop.TaxAuthorState
  if(IsXMLField)
    PmInfo.TaxAuthorState = ReadOptinalAttribute( xml, "DrawerStatus", "DepartmentalInfo" );
    CommonInfo.TaxAuthorState_FromXmlField = PmInfo.TaxAuthorState;
  else
    PmInfo.TaxAuthorState = ReadOptinalAttribute( xml, "F101R", "CTTDepartmentalInfo" );

    if(PmInfo.TaxAuthorState)
      CommonInfo.IsTaxAuthorStateInReestr = true;
    end;
  end;

  if(IsXMLField)
    PmInfo.TaxPmGround = ReadOptinalAttribute( xml, "PaytReason", "DepartmentalInfo" );
    PmInfo.TaxPmPeriod = ReadOptinalAttribute( xml, "TaxPeriod",  "DepartmentalInfo" );
    PmInfo.TaxPmNumber = ReadOptinalAttribute( xml, "DocNo",      "DepartmentalInfo" );
    PmInfo.TaxPmDate   = ReadOptinalAttribute( xml, "DocDate",    "DepartmentalInfo" );
    PmInfo.TaxPmType   = ReadOptinalAttribute( xml, "TaxPaytKind","DepartmentalInfo" );
  else
    PmInfo.TaxPmGround = ReadOptinalAttribute( xml, "F106R", "CTTDepartmentalInfo" );
    PmInfo.TaxPmPeriod = ReadOptinalAttribute( xml, "F107R", "CTTDepartmentalInfo" );
    PmInfo.TaxPmNumber = ReadOptinalAttribute( xml, "F108R", "CTTDepartmentalInfo" );
    PmInfo.TaxPmDate   = ReadOptinalAttribute( xml, "F109R", "CTTDepartmentalInfo" );
    PmInfo.TaxPmType   = ReadOptinalAttribute( xml, "F110R", "CTTDepartmentalInfo" );

    PmInfo.OperationID = ReadOptinalAttribute( xml, "OperationID" );
    PmInfo.DocIndex    = ReadOptinalAttribute( xml, "DocIndex" );
    PmInfo.PayerPersonalID = ReadOptinalAttribute( xml, "PersonalID", "TransactionPayerInfo" );
    PmInfo.RemittanceInfo = ReadNodeText(xml, "RemittanceInfo", false);
    PmInfo.OFKAccount = ReadOptinalAttribute( xml, "F111R", "CTTDepartmentalInfo" );
    PmInfo.BudgetReceiverAccount = ReadOptinalAttribute( xml, "F112R", "CTTDepartmentalInfo" );
  end;

  PmInfo.UIN = ReadOptinalAttribute( xml, "PaymentID" ); //DAI Hotfix HF2031_19_25_12

  PaymentsInfo[ PaymentsInfo.size ] = PmInfo;
end;

private macro FillPaymentBuffers(pm, db, cr, rm, PmInfo : TSinglePmInfo, CommonInfo : TCommonPmInfo, MultyPayment : RsbPayment)
  ClearRecord( pm );
  ClearRecord( rm );
  ClearRecord( db );
  ClearRecord( cr );

  pm.DocKind = pm.PrimDocKind = WL_INDOC;
  if(PmInfo.IsMultyPayment)
    pm.Purpose = PM_PURP_MULTI;
  else
    pm.Purpose = PM_PURP_RCDOC;
  end;

  rm.Number = PmInfo.DocNo;
  rm.Reference = PmInfo.Reference;
  rm.UIN = PmInfo.UIN; //DAI Hotfix HF2031_19_25_12
  rm.Date = GetDateFromAttrUFBS(PmInfo.DocDate);
  pm.ValueDate = CommonInfo.ValueDate;
  rm.PaymentKind = CommonInfo.PaymentKind;
  pm.BaseFIID = NATCUR;
  pm.BaseAmount = PmInfo.BaseAmount;

  FillSideBuffers( PmInfo.IsMultyPayment, PRT_Debet, PmInfo.Payer, CommonInfo.Payer, 
                   db, @pm.PayerAccount, @rm.PayerINN, @rm.PayerName, 
                   @rm.PayerCorrAccNostro, pm.ValueDate );

  FillSideBuffers( PmInfo.IsMultyPayment, PRT_Credit, PmInfo.Payee, CommonInfo.Payee, 
                   cr, @pm.ReceiverAccount, @rm.ReceiverINN, @rm.ReceiverName, 
                   @rm.ReceiverCorrAccNostro, pm.ValueDate );

  rm.ShifrOper = CommonInfo.ShifrOper;

  if(PmInfo.IsMultyPayment or not CommonInfo.IsPurposeInReestr)
    rm.Ground = CommonInfo.Purpose_FromXmlField;
  else
    rm.Ground = PmInfo.Purpose;
  end;

  rm.Priority = CommonInfo.Priority;
  pm.PayerBankEnterDate = GetDateFromAttrUFBS(CommonInfo.PayerBankEnterDate);
  pm.I2PlaceDate = GetDateFromAttrUFBS(CommonInfo.I2PlaceDate);
  rm.PayerChargeOffDate = GetDateFromAttrUFBS(CommonInfo.PayerChargeOffDate);

  if( PmInfo.IsMultyPayment 
      or 
      // При формировании индивидуального платежа в составе сводного записывается в реквизит "Составителя", 
      // если во всех записях реестра отсутствует реквизит F101R блока CTTDepartmentalInfo, 
      // при этом сам блок в текущей записи реестра присутствует и в нем заполнен 
      // хотя бы один атрибут.
      not CommonInfo.IsTaxAuthorStateInReestr and
      (PmInfo.TaxPmGround or PmInfo.TaxPmPeriod or PmInfo.TaxPmNumber or 
       PmInfo.TaxPmDate or PmInfo.TaxPmType)
    )
    rm.TaxAuthorState = CommonInfo.TaxAuthorState_FromXmlField;
  else
    rm.TaxAuthorState = PmInfo.TaxAuthorState;
  end;
  rm.BttTICode = CommonInfo.BttTICode;
  rm.OKATOCode = CommonInfo.OKATOCode;
  rm.TaxPmGround = PmInfo.TaxPmGround;
  rm.TaxPmPeriod = PmInfo.TaxPmPeriod;
  rm.TaxPmNumber = PmInfo.TaxPmNumber;
  rm.TaxPmDate   = PmInfo.TaxPmDate;
  rm.TaxPmType   = PmInfo.TaxPmType;
end;

private macro ReadFields(PaymentsInfo : TArray, CommonInfo : TCommonPmInfo) : bool
  var field_name : string = "", field_value : string = "";
  var xml : object = ActiveX( "MSXML.DOMDocument" );

  if( not СчитатьПоле(field_name, field_value) )
    return FALSE;
  end;

  // Первое поле в релизе - "xml" (информация о сводном платеже)
  if( not xml.loadXML(field_value) )
    std.msg( "Неверный формат сообщения по форме ED108" );
    return false;
  end;

  ReadPmInfo(xml, true/*IsXMLField*/, PaymentsInfo, CommonInfo);

  // Второе поле в сообщении - "PacketDate" или "CreditTransferTrans" (если PacketDate отсутствует)
  var IsReadField : bool = СчитатьПоле(field_name, field_value);
  if( IsReadField and (field_name == NodePacketDate) and (field_value != "") )
    //Gurin S. 24.01.2015
    CommonInfo.ValueDate = ToDate_(field_value);
  else
    CommonInfo.ValueDate = wlmes.OutsideAbonentDate;
  end;

  // Оставшиеся поля "CreditTransferTrans" (информация о платежах в составе сводного)
  if(IsReadField)
    while( (field_name == UFBSCreditTransferTransField) // если второе поле оказалось "CreditTransferTrans"
           or
           СчитатьПоле(field_name, field_value) 
         )

      if( not xml.loadXML(field_value) )
        std.msg( "Неверный формат сообщения по форме ED108" );
        return false;
      end;

      ReadPmInfo(xml, false/*IsXMLField*/, PaymentsInfo, CommonInfo);

      field_name = ""; // чтобы сработала СчитатьПоле на следующей итерации цикла
    end;
  end;

  return TRUE;
end;

private macro AddPmNote(PaymentObj : RsbPayment, NoteKind : integer, NoteValue)
  if(NoteValue)
    if( PaymentObj.Notes.AddNote( NoteKind, NoteValue ) != 0 )
      RunError( "Ошибка при вставке примечания платежа" );
    end;
  end;
end;

private macro CreatePayment( MultyPayment : @RsbPayment, 
                             PmInfo       : TSinglePmInfo, 
                             CommonInfo   : TCommonPmInfo ) : bool

  // Заполнение учетных буферов
  FillPaymentBuffers(wlpmpaym, wlpmpropdeb, wlpmpropcred, wlpmrmprop, PmInfo, CommonInfo, MultyPayment);

  ПользовательскаяДоработкаПлатежа( wlmes, wlpmpaym, wlpmpropdeb, wlpmpropcred, wlpmrmprop );
    
  if( not ВставитьПлатеж( wlpmpaym, wlpmpropdeb, wlpmpropcred, wlpmrmprop ) )
    std.msg("Ошибка при сохранении платежа");
    return FALSE;
  end;

  if(PmInfo.IsMultyPayment)
    MultyPayment = RsbPayment(wlpmpaym.PaymentID);
  else
    var PaymentObj = RsbPayment(wlpmpaym.PaymentID);

    AddPmNote(PaymentObj, PM_NOTEKIND_PAYM_UNI_OPERATIONID, PmInfo.OperationID);
    //AddPmNote(PaymentObj, PM_NOTEKIND_PAYM_DOCINDEX, PmInfo.DocIndex); //DAI Hotfix HF2031_19_25_12
    AddPmNote(PaymentObj, PM_NOTEKIND_PAYM_PAYERID, PmInfo.PayerPersonalID);
    AddPmNote(PaymentObj, PM_NOTEKIND_PAYM_PAYEEID, PmInfo.PayeePersonalID);
    AddPmNote(PaymentObj, PM_NOTEKIND_PAYM_ED108_INFO, PmInfo.RemittanceInfo);
    AddPmNote(PaymentObj, PM_NOTEKIND_PAYM_OFK_ACCOUNT, PmInfo.OFKAccount);
    AddPmNote(PaymentObj, PM_NOTEKIND_PAYM_BUDGETRECEIVER_ACC, PmInfo.BudgetReceiverAccount);

    if( MultyPayment.LinkPayment(PaymentObj, PMLINK_KIND_MULTYPM) )
      std.msg("Ошибка при создании связи платежа");
      return FALSE;
    end;

    if( PaymentObj.Update() )
      std.msg("Ошибка при сохранении платежа");
      return FALSE;
    end;
  end;

  return TRUE;
end;

macro GenDoc( addrMes, type, ver_st )
  SetBuff( wlmes, addrMes );

  PrintLog( 2, "Генерация платежей по ED108" );

  var CommonPmInfo : TCommonPmInfo = TCommonPmInfo(),
      PaymentsInfo : TArray = TArray();

  if(not ReadFields(PaymentsInfo, CommonPmInfo) )
    return FALSE;
  end;

  var MultyPayment : RsbPayment = null;

  for(var SinglePmInfo, PaymentsInfo)
    if(not CreatePayment(@MultyPayment, SinglePmInfo, CommonPmInfo))
      return FALSE;
    end;
  end;

  if( MultyPayment.Update() )
    std.msg("Ошибка при сохранении сводного платежа");
    return FALSE;
  end;

  return TRUE;

  OnError(er) /* Обработка ошибок времени выполонения */
    std.msg(String(er.Message, "|Модуль: ", er.Module, " Строка: ", er.Line));
    return FALSE;
end;
