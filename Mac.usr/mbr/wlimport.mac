/****************************************************************************/
/*                   R-Style SoftWare Lab, RS-Bank 5.1                      */
/****************************************************************************/
/*                  Подсистема "Межбанковские расчеты"                      */
/*                   Импорт  сообщений (общая часть)                        */
/*                                                                          */
/*  Имя файла: wlimport.mac                                                 */
/*  Создан:  03.03.00                                         AAV           */
/*  Изменен: Gurin S. 10.12.2013 C-20624-6 (работа с планировщиком)         */
/****************************************************************************/

import "wltools.mac", "wldoc.mac", "pmcaches.mac", "wlcaches.mac";
import Oprinter;

var Транспорт, ВидКодаТранспорта;

FILE TpShem(wltpshem);
FILE ПоляТранспорта( wltpfld );
FILE ПоляСообщения( wlmesfld );
FILE Релизы( wlmesrls ) key 0;

private var PtIdCache  :TPartyIdsByCode = TPartyIdsByCode();
private var PtCodeCache:TPartyCodesByID = TPartyCodesByID();
private var FormsCache :TFormsByName = TFormsByName();

const КонецФайла = -1;

const SET_CHAR = "X";

const SORT_MESFRM_ID   = 0,
      SORT_MESFRM_NAME = 1;

const SORT_TPFLD_ID   = 0,
      SORT_TPFLD_NAME = 1;

const SORT_MESFLD_ID   = 0,
      SORT_MESFLD_RMG  = 1,
      SORT_MESFLD_RMBB = 2,
      SORT_MESFLD_RMT  = 3;

var ImpReport = TArray;

/* Статистика отчета по импорту */
class TRepElem
 var 
  MesKind  :integer,   /* Вид сообщения */
  Number   :integer,   /* Количество */
  Currency :string,    /* Код валюты */
  Amount   :moneyl,    /* Сумма */
  FormName :string;    /* Имя формы сообщения */

  MesKind  = 0;
  Number   = 1;
  Currency = "";
  Amount   = $0;
  FormName = "";
   
end;

class CDataField( val0, val1, val2, val3, val4, val5, val6 )
   var t_Master, t_GroupIndex, t_FieldID, t_TpFieldID, t_BlockFlag, t_BlockName, t_BlockNumQnt;
   t_Master = val0;
   t_GroupIndex = val1;
   t_FieldID = val2;
   t_TpFieldID = val3;
   t_BlockFlag = val4;
   t_BlockName = val5;
   t_BlockNumQnt = val6;
end;

class CMasterInfo
    var Master = TArray, Ind = TArray;
    macro Init
        Master.size = 0;
        Ind.size = 0;
    end;
    macro Add( _Master, _Ind )
       var size = Master.size, i = 0;
       while( i < size )
           if ( Master(i)==_Master )
              return;
           end;
           i = i+1;
       end;
       Master( size ) = _Master;
       Ind(size) = _Ind;
    end;

    macro Get( _Master )
       var size = Master.size, i = 0;
       while( i < size )
           if ( Master(i)==_Master )
              return Ind(i);
           end;
           i = i+1;
       end;
       return -1;
    end;
end;

class CReleaseContext( TpID, RlsFormID )  
  var Master, GroupIndex, IsExistMFields, РелизФормы;
  var rs:object;
  var select:string;
  var params:TArray;
  var t_Master, t_GroupIndex, t_FieldID, t_TpFieldID, t_BlockFlag, t_BlockName, t_BlockNumQnt;
  var rsArray = TArray, MasterInfo = CMasterInfo, curPos;

  macro GetResultQuery()
      t_Master = rsArray(curPos).t_Master; 
      t_GroupIndex = rsArray(curPos).t_GroupIndex; 
      t_FieldID = rsArray(curPos).t_FieldID; 
      t_TpFieldID = rsArray(curPos).t_TpFieldID; 
      t_BlockFlag = rsArray(curPos).t_BlockFlag; 
      t_BlockName = rsArray(curPos).t_BlockName; 
      t_BlockNumQnt = rsArray(curPos).t_BlockNumQnt;
  end;

  macro moveFirst()      
      curPos = 0;
      if ( curPos>=rsArray.size )         
         return false;
      end;
      GetResultQuery();
      return true;
  end;

  macro moveNext()
      curPos = curPos + 1;
      if ( curPos>=rsArray.size )         
         curPos = curPos - 1;
         return false;
      end;
      GetResultQuery();
      return true;
  end;

  macro movePrev()
      curPos = curPos - 1;
      if ( curPos<0 )
         curPos = curPos + 1; 
         return false;
      end;
      GetResultQuery();
      return true;
  end;

  macro moveOnMaster( PrevGroupIndex )
      var stat = true;
      curPos = MasterInfo.Get(Master);      
      if ( curPos==-1 )
         stat = false;
      else
         GetResultQuery()
      end;
      while( stat and ( (Master!=t_Master) OR (PrevGroupIndex>=t_GroupIndex)) )
          stat = moveNext();
      end;
      return stat;
  end;

  macro moveNextField() /* Следующее поле текущего блока */
     var stat;
     stat = moveNext();
     while( stat and (Master!=t_Master) )
         stat = moveNext();
     end;
     return stat;
  end;

  macro Init( TpID, RlsFormID )
      var oldkey, oldkeyTp, count;      
      Master = 0; 
      GroupIndex = 0;
      IsExistMFields = false;
      if ( РелизФормы!=RlsFormID )
         РелизФормы = RlsFormID;
         oldkeyTp = KeyNum( ПоляТранспорта, SORT_TPFLD_NAME );
         ПоляТранспорта.TpID = TpID;
         ПоляТранспорта.Name = "MFIELDS";
         if ( GetEQ(ПоляТранспорта) )
             oldkey = KeyNum( ПоляСообщения, SORT_MESFLD_RMT );
             ПоляСообщения.RlsFormID = RlsFormID;
             ПоляСообщения.Master = 0;
             ПоляСообщения.TpFieldID = ПоляТранспорта.TpFieldID;
             if ( GetEQ(ПоляСообщения) )
                IsExistMFields = true;
             end;
             KeyNum( ПоляСообщения, oldkey );
         end;
         KeyNum( ПоляТранспорта, oldkeyTp );

         select = "select t_Master, t_GroupIndex, t_FieldID, t_TpFieldID, t_BlockFlag, t_BlockName, t_BlockNumQnt from dwlmesfld_dbt "+ 
                                   "start with t_RlsFormID=:RlsFormID and t_Master=0 "+
                                   "connect by t_RlsFormID=:RlsFormID and t_Master=prior t_FieldID "+
                                   "order siblings by t_Master, t_GroupIndex";
         params = makeArray( SQLParam("RlsFormID", RlsFormID));
         rs = execSQLselect( select, params, FALSE );

         rsArray.size = 0;
         MasterInfo.Init();
         count = 0;
         while( rs.moveNext() )
             rsArray( count ) = CDataField( rs.Value(0), rs.Value(1), rs.Value(2),
                                            rs.Value(3), rs.Value(4), rs.Value(5), rs.Value(6) );
             MasterInfo.Add( rsArray( count ).t_Master, count );
             count = count+1;
         end;
      end;      
      curPos = -1;
      t_Master = 0; 
      t_GroupIndex = 0; 
      t_FieldID = 0; 
      t_TpFieldID = 0; 
      t_BlockFlag = ""; 
      t_BlockName = ""; 
      t_BlockNumQnt = 0;
  end;

  macro SetContext( TpFieldID, BlockNameStart, BlockNameEnd, error, PrivateFlag )
      var continue0, ПолеНайдено = 0, ВходитьВоВсеБлоки=0;
      var OldGroupIndex, OldMaster, IsBlockTrue = true, tmpval;

      if ( valtype(BlockNameStart)==V_UNDEF )
         BlockNameStart = "";
      end;

      if ( valtype(BlockNameEnd)==V_UNDEF )
         BlockNameEnd = "";
      end;
      
      if ( valtype(PrivateFlag)==V_UNDEF )
         /* Этот флаг разрешает искать за пределами данного блока */
         PrivateFlag = 1;
      end;      

      if ( (GroupIndex==-1) and Master )
         /* Вернуться на уровень вверх */
         if ( (not moveOnMaster(0)) OR (not movePrev()) )
            error = 1;
            SetParm( 3, error );
            return FALSE;
         end;
         GroupIndex = t_GroupIndex;
         Master = t_Master;
         if ( not УстановитьКонтекстБлока( ".." ) )
            error = 1;
            SetParm( 3, error );
            return FALSE;
         end;
         
         continue0 = true;
      else
         if ( (Master==t_Master) and (GroupIndex==t_GroupIndex) )
            continue0 = moveNextField();
         else
            if ( (t_FieldID!=0) and (Master==t_FieldID) and (GroupIndex==0) )
               continue0 = moveNext();
               if ( (Master!=t_Master) OR (not continue0) )
                  continue0 = moveOnMaster(0);
               end;
            else
               continue0 = moveOnMaster(GroupIndex);
            end;         
         end;
      end;

      if ( BlockNameStart!="" )
         IsBlockTrue = false;
      end;
      
      /* Перебираем поля данного блока после установленного GroupIndex */
      /* Есть резон выше не устанавливать GroupIndex, а при установке  */
      /* флага "ВходитьВоВсеБлоки" - установить.                       */
      while( continue0 )         
         if ( IsBlockTrue and (t_TpFieldID == TpFieldID) )
            /* В текущем блоке поле найдено */
            ПолеНайдено = 1;
            tmpval = t_GroupIndex;

            if ( BlockNameEnd=="" )
               if ( Master )
                  if ( (not moveOnMaster(0)) OR (not movePrev()) )
                     error = 1;
                     SetParm( 3, error );
                     return FALSE;
                  end;
                  if ( t_BlockNumQnt!=1 )
                     /* Текущий блок может повторяться - переходим на его начало */
                     GroupIndex = 0;
                  else
                     GroupIndex = tmpval;
                     moveOnMaster(GroupIndex);
                  end;
               else
                  GroupIndex = tmpval;
               end;
            else
               if ( Master )                  
                  GroupIndex = -1;
               else
                  GroupIndex = tmpval;
               end;
            end;
            
            continue0 = 0;
         /* При первом проходе во вложенные блоки не входим */
         elif ( (ВходитьВоВсеБлоки OR ((not IsBlockTrue) and (BlockNameStart==t_BlockName)) ) AND 
               (t_BlockFlag == SET_CHAR) )
            if ( not УстановитьКонтекстБлока( t_BlockName ) )
               error = 1;
               SetParm( 3, error );
               continue0 = 0;
            else
               OldMaster = t_Master;
               OldGroupIndex = t_GroupIndex;
               Master = t_FieldID;
               GroupIndex = 0;
               if ( SetContext( TpFieldID, "", "", error, 0 ) )
                  ПолеНайдено = 1;
                  continue0 = 0;
               elif ( error )
                  SetParm( 3, error );
                  continue0 = 0;
               end;
               if ( continue0 )
                  if ( not УстановитьКонтекстБлока( ".." ) )
                     error = 1;
                     SetParm( 3, error );
                     continue0 = 0;
                  end;
                  Master = OldMaster;
                  continue0 = moveOnMaster(OldGroupIndex-1);
                  if ( continue0==0 )
                     error = 1;
                     SetParm( 3, error );
                  end;
               end;
            end;
         end;
         if ( continue0 AND moveNextField() )
             continue0=1;
         elif ( (continue0) AND (not ВходитьВоВсеБлоки) AND (IsBlockTrue) )
            /* Начинаем второй проход с посещением всех вложенных блоков */
            ВходитьВоВсеБлоки = 1;
            continue0 = moveOnMaster(GroupIndex);
         else
            continue0 = 0;
         end;
      end;
      if ( ПолеНайдено )
         return TRUE;
      end;
      if ( error )
         return FALSE;
      end;
      if ( (PrivateFlag) AND (Master) )
         /* Если за пределами данного блока искать разрешено, то выходим на */
         /* один уровень */
         if ( not УстановитьКонтекстБлока( ".." ) )
            error = 1;
            SetParm( 3, error );
            return FALSE;
         end;
         if ( (not moveOnMaster(0)) OR (not movePrev()) )
            error = 1;
            SetParm( 3, error );
            return FALSE;
         end;         

         Master = t_Master;
         GroupIndex = t_GroupIndex;
         if ( Master )
            if ( (not moveOnMaster(0)) OR (not movePrev()) )
               error = 1;
               SetParm( 3, error );
               return FALSE;
            end;
            if (t_BlockNumQnt!=1)
               /* Если текущий блок может повторяться, то разрешаем */
               /* искать во всем блоке, а не с текущей позиции      */
               GroupIndex = 0;
            end;
         end;
         if ( (not error) AND (SetContext( TpFieldID, BlockNameStart, BlockNameEnd, error, 1 )) )
            return TRUE;
         elif ( error )
            SetParm( 3, error );
         end;
      end;

      return FALSE;
  end;

  РелизФормы = -1;
end;

macro ErrImportNum( str, Num )
  std.out( 1, string("Ошибка: строка ",Num,": ",str) );
end;

macro ErrImport( str )
  ErrImportNum( str, ТекущаяСтрока() );
end;

macro ErrUnknownField( кодПоля )
  ErrImport(String( "Неизвестный код поля ", кодПоля ));
end;

macro ErrUnavailableField( кодПоля )
  ErrImport(String( "В сообщении не указано обязательное поле ", кодПоля ));
end;

/* Определить ID формы сообщения */

macro ОпределитьФорму( TpID:integer, ИмяФормы:string, ВидСообщения ):integer
  var form:TRecHandler;
  if( FormsCache.Get( FormsCache.Key( TpID, ИмяФормы ), @form ) )
    SetParm( 2, form.rec.KindMes );
  end;
  return form.rec.FormID;
end;

/* Заполнить вид кода субъекта сообщения по номеру транспорта */

macro FillMesCode( TpID, wlmes )
    var error;

    wlmes.InsideAbonentCodeKind = 0;
    if ( TpID==TRANSP_MCI )
       wlmes.OutsideAbonentCodeKind = PTCK_BIC;
       wlmes.AgentCodeKind = PTCK_BIC;
    elif ( TpID==TRANSP_SWIFT )
       wlmes.OutsideAbonentCodeKind = PTCK_SWIFT;
       wlmes.AgentCodeKind = PTCK_SWIFT;
    elif ( TpID==TRANSP_TELEX )
       wlmes.OutsideAbonentCodeKind = PTCK_CONTR;
       wlmes.AgentCodeKind = PTCK_CONTR;
    elif ( TpID==TRANSP_SMBR )
       wlmes.OutsideAbonentCodeKind = PTCK_SBRF;
       wlmes.AgentCodeKind = PTCK_CLIRING;
       wlmes.InsideAbonentCodeKind = PTCK_SBRF;
    elif ( TpID==TRANSP_POST )
       wlmes.OutsideAbonentCodeKind = PTCK_BIC;
       wlmes.AgentCodeKind = PTCK_BIC;
    elif ( TpID==TRANSP_TELEGRAPH )
       wlmes.OutsideAbonentCodeKind = PTCK_BIC;
       wlmes.AgentCodeKind = PTCK_BIC;
    elif ( TpID==TRANSP_SWIFTSB )
       wlmes.OutsideAbonentCodeKind = PTCK_SMFR;
       wlmes.AgentCodeKind = PTCK_SMFR;
       wlmes.InsideAbonentCodeKind = PTCK_SMFR;
    else
       wlmes.OutsideAbonentCodeKind = PTCK_CONTR;
       wlmes.AgentCodeKind = PTCK_CONTR;
    end;

    var PartyCode:string = "";
    var stat:bool = PtCodeCache.Get( PtCodeCache.Key( wlmes.AgentCodeKind, wlmes.AgentID ), @PartyCode );
    if ( not stat )
        wlmes.AgentCodeKind = PTCK_CONTR;
        PtCodeCache.Get( PtCodeCache.Key( wlmes.AgentCodeKind, wlmes.AgentID ), @PartyCode );
    end;
    wlmes.AgentCode = PartyCode;

    stat = PtCodeCache.Get( PtCodeCache.Key( wlmes.OutsideAbonentCodeKind, wlmes.OutsideAbonentID ), @PartyCode );
    if ( not stat )
        wlmes.OutsideAbonentCodeKind = PTCK_CONTR;
        PtCodeCache.Get( PtCodeCache.Key( wlmes.OutsideAbonentCodeKind, wlmes.OutsideAbonentID ), @PartyCode );
    end;
    wlmes.OutsideAbonentCode = PartyCode;

    if ( wlmes.InsideAbonentID>0 )
       if ( not wlmes.InsideAbonentCodeKind )
           wlmes.InsideAbonentCodeKind = PTCK_CONTR;
       end;
       stat = PtCodeCache.Get( PtCodeCache.Key( wlmes.InsideAbonentCodeKind, wlmes.InsideAbonentID ), @PartyCode );
       if ( not stat )
           wlmes.InsideAbonentCodeKind = PTCK_CONTR;
           PtCodeCache.Get( PtCodeCache.Key( wlmes.InsideAbonentCodeKind, wlmes.InsideAbonentID ), @PartyCode );
       end;
       wlmes.InsideAbonentCode = PartyCode;
    else 
       wlmes.InsideAbonentCodeKind = PTCK_CONTR;
       wlmes.InsideAbonentCode = "";
    end;
end;

/* Определить ID транспортной схемы и парамтры обмена */
macro ОпределитьТранспортнуюСхему( RespID, OutsideAbonentID, InsideAbonentID, TpID, FormID, РелизФормы, МакросВыбораПараметраОбмена, userData, TpFrmtID )
  var   rsstr, continue0 = true, TpShemID = -1, foundFlag = false;
  const FRM_NOTACTIVE = 2;
  const RLS_NOTACTIVE = 3;   
  const SHM_NOTACTIVE = 2;   
  var rs:object;
  var select:string;
  var params:TArray;

  if( RespID==0 )
    RespID = {OurBank};
  end;
  
  /* Незаданный внутренний абонент (либо наш банк) - это 0 */
  if( (InsideAbonentID<0) OR (InsideAbonentID=={OurBank}) )       
    InsideAbonentID = 0;
  end;

  select = "select /*+FIRST_ROWS */ tpparm.t_RlsFormID, tpshpt.t_TpShemID, rls.t_Name"+
                 " from dwltpshpt_dbt tpshpt, dwltpshem_dbt tpshem, dwltpparm_dbt tpparm, dwlmesfrm_dbt frm, dwlmesrls_dbt rls where"+ 
                 " tpshpt.t_PartyID in (:RespID, -1 )"+          /* Или заданный респондент или все (-1) */
                 " AND tpshpt.t_InsideAbonentID = :InsideAbonentID"+
                 " AND tpshem.t_TpShemID  = tpshpt.t_TpShemID"+
                 " AND tpshem.t_Department = :OperD"+
                 " AND tpshem.t_State     <> :SHM_NOTACTIVE"+
                 " AND tpshem.t_DefaultTpFrmtID in (0, :TpFrmtID)"+
                 " AND tpparm.t_TpShemID  = tpshem.t_TpShemID"+
                 " AND tpparm.t_FormID    = :FormID"+
                 " AND tpparm.t_Direction <> :WLD_DIRECT_OUT"+       /* Параметр обмена: входящие или все */
                 " AND frm.t_FormID       = tpparm.t_FormID"+
                 " AND frm.t_State        <> :FRM_NOTACTIVE"+
                 " AND rls.t_RlsFormID    = tpparm.t_RlsFormID"+
                 " AND rls.t_State        <> :RLS_NOTACTIVE"+
                 " ORDER BY tpshem.t_DefaultTpFrmtID DESC";     

  params = makeArray( SQLParam("RespID", RespID),
                      SQLParam("InsideAbonentID", InsideAbonentID),
                      SQLParam("OperD",{OperDprt}),
                      SQLParam("SHM_NOTACTIVE",SHM_NOTACTIVE),
                      SQLParam("TpFrmtID",TpFrmtID),
                      SQLParam("FormID",FormID),
                      SQLParam("WLD_DIRECT_OUT",WLD_DIRECT_OUT),
                      SQLParam("FRM_NOTACTIVE",FRM_NOTACTIVE),
                      SQLParam("RLS_NOTACTIVE",RLS_NOTACTIVE));

  /* println( select ); */
  rs = execSQLselect( select, params, FALSE );

  /* Перебираем все записи для данного респондента в wltpshpt.dbt */
  while( continue0 AND rs.MoveNext() )
    if( (valtype(МакросВыбораПараметраОбмена)!=V_UNDEF) AND (МакросВыбораПараметраОбмена!="") )
      if( ExecMacro2( МакросВыбораПараметраОбмена, rs.value(2), userData ) )
        foundFlag = true;
        continue0  = false;
        TpShemID  = int(rs.value(1));
        SetParm( 5, int(rs.value(0)) );
      end;
    else
      foundFlag = true;
      continue0  = false;
      TpShemID  = int(rs.value(1));
      SetParm( 5, int(rs.value(0)) );
    end;       
  end;

  if( foundFlag == false )
    ErrImport("Не определены параметры обмена");
  end;

  return TpShemID;
end;

macro ОпределитьТранспортнуюСхемуПоКоду( КодКонтрагента, ВидКодаКонтрагента, 
                                         КодВнешнегоАбонента, ВидКодаВнешнегоАбонента, 
                                         КодВнутреннегоАбонента, ВидКодаВнутреннегоАбонента, 
                                         TpID, FormID, РелизФормы, МакросВыбораПараметраОбмена, userData, TpFrmtID )
  var RespID, OutsideAbonentID, InsideAbonentID, error, TpShemID;

  var stat:bool = PtIdCache.Get( PtIdCache.Key( ВидКодаКонтрагента, КодКонтрагента ), @RespID );
  if( not stat )    
    ErrImport( string("Неизвестный код отправителя: ",КодКонтрагента) );
    return -1;    
  end;  

  if ( КодВнешнегоАбонента!="" )
     stat = PtIdCache.Get( PtIdCache.Key( ВидКодаВнешнегоАбонента, КодВнешнегоАбонента ), @OutsideAbonentID );
     if( not stat )
       ErrImport( string("Неизвестный код внешнего абонента: ",КодВнешнегоАбонента) );
       return -1;
     end;  
  else 
      OutsideAbonentID = -1;
  end;

  if ( КодВнутреннегоАбонента!="" )
     stat = PtIdCache.Get( PtIdCache.Key( ВидКодаВнутреннегоАбонента, КодВнутреннегоАбонента ), @InsideAbonentID );
     if( not stat )
       ErrImport( string("Неизвестный код внутреннего абонента: ",КодВнутреннегоАбонента) );
       return -1;
     end;  
  else 
      InsideAbonentID = -1;
  end;
  
  TpShemID = ОпределитьТранспортнуюСхему( RespID, OutsideAbonentID, InsideAbonentID, TpID, FormID, РелизФормы, МакросВыбораПараметраОбмена, userData, TpFrmtID);
  if( TpShemID>0 )
    SetParm( 8, РелизФормы );
  end;

  return TpShemID;
end;

/***************************************************************************/
/* Определить число строк поля                                             */
/***************************************************************************/
macro ЧислоСтрокПоля( КодПоля, TpFieldID )
   var oldkey, числоСтрок;
   oldkey = KeyNum( ПоляТранспорта, SORT_TPFLD_NAME );
   ПоляТранспорта.TpID = Транспорт;
   ПоляТранспорта.Name = КодПоля;
   if ( GetEQ( ПоляТранспорта ) )
      числоСтрок = ПоляТранспорта.NumLines;
      TpFieldID  = ПоляТранспорта.TpFieldID;
      SetParm(1,TpFieldID);
   else
      /* Неизвестное поле */
      числоСтрок = 0;
   end;
   KeyNum( ПоляТранспорта, oldkey );
   return числоСтрок;
end;

/***************************************************************************/
/*  Функция выделения подстроки из строки                                  */
/***************************************************************************/
macro SubString( str, pos, len )
   if( StrLen( str ) < pos )
      return "";
   else
      return SubStr( str, pos, len );
   end;
end;

macro cmpRepElem( elem1, elem2 )
  if( elem1.MesKind > elem2.MesKind ) return 1;  end;
  if( elem1.MesKind < elem2.MesKind ) return -1; end;

  if( elem1.FormName > elem2.FormName ) return 1;  end;
  if( elem1.FormName < elem2.FormName ) return -1; end;

  if( elem1.Currency > elem2.Currency ) return 1;  end;
  if( elem1.Currency < elem2.Currency ) return -1; end;

  return 0;
end;

/* Проверка на существование сообщения заданного вида, формы и валюты (последнее для платежей)*/
/* Если таковое нашли, то возвращаем его номер в массиве */
macro IsRepElemAlreadyExist( _MesKind:integer, _FormName:string, _Currency:string)
  var i = 0, IsFind = false;
  while( not IsFind AND (i<ImpReport.size) )
      if ( (ImpReport(i).MesKind  == _MesKind)  AND
           (ImpReport(i).FormName == _FormName) AND
           (ImpReport(i).Currency == _Currency) 
         )
         IsFind = true;
      else
         i = i+1;
      end;
  end;

  if(IsFind) 
    return i;    
  else 
    return -1;
  end;
end;

/* Добавить сообщение в отчет */
/* Если сообщение такого вида, формы уже было принято, то накапливаем статистику, */
/* иначе добавляем его в массив */
macro AddRepElem( _MesKind:integer, _FormName:string, _Currency:string, _Amount:moneyl )
  var i = 0;
  
  i = IsRepElemAlreadyExist( _MesKind, _FormName, _Currency);

  if( i == -1)
    i = ImpReport.size;
    ImpReport(i) = TRepElem;
    ImpReport(i).MesKind  = _MesKind;
    ImpReport(i).Currency = _Currency;
    ImpReport(i).Amount   = _Amount;
    ImpReport(i).FormName = _FormName;
  else
    ImpReport(i).Amount   = ImpReport(i).Amount + _Amount;
    ImpReport(i).Number   = ImpReport(i).Number + 1;
  end;
end;

/* Печать отчета по импорту с группировкой по видам сообщений, формам, валюте (для платежей) */
macro PrintImportReport()
  var i = 0, ВсегоСообщений = 0;
  var KindMes = TArray;

  KindMes(0)               = "";
  KindMes(MESKIND_PAYMENT) = "Платежи";
  KindMes(MESKIND_HEAD)    = "Выписки";
  KindMes(MESKIND_NOTICE)  = "Уведомления";
  KindMes(MESKIND_CONF)    = "Подтверждения";
  KindMes(MESKIND_REQUEST) = "Запросы";
  KindMes(MESKIND_ANSWER)  = "Ответы";
  KindMes(MESKIND_INFO)    = "Инф. сообщения";
  KindMes(MESKIND_CNFMBK)  = "Подтверждения МБК";
  KindMes(MESKIND_CNFFX)   = "Подтверждения Forex";
  KindMes(MESKIND_CNFDLVR) = "Подтв. о доставке";
  KindMes(MESKIND_CNFDFCT) = "Ошибка контроля";
  KindMes(MESKIND_MNS)     = "Сообщение МНС";
  KindMes(MESKIND_DEPOMSG) = "Сообщ. депозитария";


  qsort( ImpReport, "cmpRepElem" );

  println("");
  println(" В ходе импорта файла было успешно загружено: ");
  [+============================================================================+
   |     Вид объекта     |   Форма   | Валюта |  Кол-во  |         Сумма        |
   |                     | сообщения |        |          |                      |
   +=====================+===========+========+==========+======================+
  ];

  while( i < ImpReport.size )
    // +---------------------+-----------+--------+----------+----------------------+ 
    if( ImpReport(i).MesKind == MESKIND_PAYMENT )
      [|#################### | ######### | #######| ######## | #################### |
      ](KindMes(ImpReport(i).MesKind), ImpReport(i).FormName, ImpReport(i).Currency, ImpReport(i).Number, ImpReport(i).Amount);
    else
      [|#################### | ######### |        | ######## |                      |
      ](KindMes(ImpReport(i).MesKind), ImpReport(i).FormName, ImpReport(i).Number);
    end;
    ВсегоСообщений = ВсегоСообщений + ImpReport(i).Number;
    i = i + 1;    
  end;
      
  [==============================================================================];
  [ Всего сообщений: ######### ]( ВсегоСообщений );
  println("");

end;

array МассивПолей;

var RlsContext = CReleaseContext, ReadingCopyInitMes, IsFullCopyMessage;
var СчетчикПолей;

macro ИнициализацияМассиваПолей( РелизФормы )
   asize( МассивПолей, 0 );
   СчетчикПолей = 0;
   УстановитьКонтекстБлока("");
   ReadingCopyInitMes = false;
   IsFullCopyMessage = false;
   RlsContext.Init(Транспорт, РелизФормы);
end;

macro ЗаписаноПоле( кодПоля )
/*   МассивПолей( СчетчикПолей ) = кодПоля;
   СчетчикПолей = СчетчикПолей + 1;*/
end;

macro НайтиПолеВМассивеПолей( кодПоля )
/*   var count = 0;
   while( count<СчетчикПолей )
      if ( МассивПолей(count)==кодПоля ) return TRUE; end;
      count = count + 1;
   end;
   return FALSE;*/
end;

/* Обязательные поля в необязательных блоках пока не проверяет */
macro ПроверкаПолейСообщения( РелизФормы, Master )
    /*var continue0, oldkeyTp, GroupIndex, rs;
    var returnValue = TRUE, ExistFieldInBlock = FALSE, BlockName;

    rs = RsdRecordset( string("select fld.t_BlockFlag, fld.t_TpFieldID, ",
                              "fld.t_MandatoryFlag, fld.t_GroupIndex, ",
                              "fld.t_BlockName, fld.t_FieldID, fld.t_Master ", 
                              "from dwlmesfld_dbt fld where ",
                              "fld.t_RlsFormID = ", РелизФормы, " and ",
                              "fld.t_Master = ", Master, " order by fld.t_GroupIndex") );    

    continue0 = rs.MoveNext();
    while( continue0 )
        ПоляСообщения.BlockFlag = rs.value(0);
        ПоляСообщения.TpFieldID = rs.value(1);
        ПоляСообщения.MandatoryFlag = rs.value(2);
        ПоляСообщения.GroupIndex = rs.value(3);
        ПоляСообщения.BlockName = rs.value(4);
        if ( ПоляСообщения.BlockName=="" )
           ПоляСообщения.BlockName = "";
        end;
        ПоляСообщения.FieldID = rs.value(5);
        ПоляСообщения.Master = rs.value(6);
        if ( ПоляСообщения.BlockFlag!="X" )
            oldkeyTp = KeyNum( ПоляТранспорта, SORT_TPFLD_ID );
            ПоляТранспорта.TpFieldID = ПоляСообщения.TpFieldID;
            if ( GetEQ( ПоляТранспорта ) )
               if ( not НайтиПолеВМассивеПолей( ПоляТранспорта.Name ) )
                   if (ПоляСообщения.MandatoryFlag == "X")
                      ErrUnavailableField( ПоляТранспорта.Name );
                      returnValue = FALSE;
                      continue0 = 0;
                   end;
               else
                  ExistFieldInBlock = TRUE;
               end;
            else
               ErrImport( string("Нет соответствия полей формы ") );
               returnValue = FALSE;
               continue0 = 0;
            end;
            KeyNum( ПоляТранспорта, oldkeyTp );
        elif ( (ПоляСообщения.MandatoryFlag == "X") AND (ПоляСообщения.BlockFlag=="X") )
            GroupIndex = ПоляСообщения.GroupIndex;
            BlockName = ПоляСообщения.BlockName;
            returnValue = ПроверкаПолейСообщения( РелизФормы, ПоляСообщения.FieldID );
            if ( not returnValue )
               ErrImport( "Неверно заполнен блок "+ BlockName );
               continue0 = 0;
            else
               ExistFieldInBlock = TRUE;
               ПоляСообщения.RlsFormID = РелизФормы;
               ПоляСообщения.Master = Master;
               ПоляСообщения.GroupIndex = GroupIndex;
               if ( not GetEQ( ПоляСообщения ) )
                   ErrImport( "Не могу востановить положение в файле" );
                   continue0 = 0;
                   returnValue = FALSE;
               end;
            end;
        end;
        if ( continue0  )
             continue0 = rs.MoveNext();
        else continue0 = 0;
        end;
    end;
    if ( not ExistFieldInBlock ) returnValue = FALSE; end;
    return returnValue;*/

    /* Отключена в целях экономии времени */
    return true;
end;

/*SDA - функции работы с нумерацией рейсов */
macro GetLastNumberRace(tdate,frmid,currace); 
    var rs:object;
    var select:string;
    var params:TArray;
    var numberrace = 0;
    var NUMBERLASTRACE,TPFRMTIDLASTRACE;

    if ((isOprmultiExec()) or (IsShedulerRunning ()))  
        //если происходит массовая загрузка файлов по транспорту
        //проверяем глобальные переменные номера и формата транспорта 
        //Gurin S. 10.12.2013 C-20624-6 * или задание планировщика
        NUMBERLASTRACE   = Getglobalparameter("NUMBERLASTRACE",false);
        TPFRMTIDLASTRACE = Getglobalparameter("TPFRMTIDLASTRACE",false);
    end;

    //Gurin S. 10.12.2013 C-20624-6
    if (IsShedulerRunning ())
        if((valtype(NUMBERLASTRACE) == v_undef) or 
           (valtype(TPFRMTIDLASTRACE) == v_undef)) 
            select = "select nvl(max(WS.T_NUMBERRACE),0) from dwlsess_dbt ws "+
	            "\n where WS.T_BANKDATE = :tdate and WS.T_TPFRMTID = :frmid";
            params = makeArray( SQLParam("tdate",tdate ),
                                SQLParam("frmid", frmid));
            rs = execSQLselect( select, params, FALSE );
            if (rs.movenext())
                NUMBERLASTRACE = int(rs.value(0));
                Setglobalparameter("NUMBERLASTRACE",NUMBERLASTRACE);
                TPFRMTIDLASTRACE = frmid;
                Setglobalparameter("TPFRMTIDLASTRACE",TPFRMTIDLASTRACE);
                return NUMBERLASTRACE;
            end;
        else
            return NUMBERLASTRACE;
        end;
    elif ((not isOprmultiExec()) or 
          (valtype(NUMBERLASTRACE) == v_undef) or 
          (valtype(TPFRMTIDLASTRACE) == v_undef) or 
          (TPFRMTIDLASTRACE != frmid)) 
          /*если не пакетный режим или не определены переменные формата и номера рейса или текущий формат сменился */
          select = "select nvl(max(WS.T_NUMBERRACE),0) from dwlsess_dbt ws "+
	          "\n where WS.T_BANKDATE = :tdate and WS.T_TPFRMTID = :frmid";
          params = makeArray( SQLParam("tdate",tdate ),
                              SQLParam("frmid", frmid));
          rs = execSQLselect( select, params, FALSE );
          if (rs.movenext())
              NUMBERLASTRACE = int(rs.value(0));
              Setglobalparameter("NUMBERLASTRACE",NUMBERLASTRACE);
              TPFRMTIDLASTRACE = frmid;
              Setglobalparameter("TPFRMTIDLASTRACE",TPFRMTIDLASTRACE);
              return NUMBERLASTRACE;
          end;
    else
        return NUMBERLASTRACE;
    end;
onerror(x);
    return(numberrace);
end;

macro SetNumberRace(racenum,sessid); 
  var rs:object;
  var select:string;
  var params:TArray;
  var numberrace = 0;
	select = "update dwlsess_dbt ws SET WS.T_NUMBERRACE = :racenum"+
	         "\n where WS.T_SESSIONID = :sessid";
  params = makeArray( SQLParam("racenum",racenum ),
                      SQLParam("sessid", sessid));
  rs = execSQL( select, params, FALSE );
  return(true);
 onerror(x);
 return(false);
end;
