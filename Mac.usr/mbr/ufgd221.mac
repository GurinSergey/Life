/****************************************************************************/
/*                   R-Style SoftWare Lab, RS-Bank 5.1                      */
/****************************************************************************/
/*                  Подсистема "Межбанковские расчеты"                      */
/* Генерация выписок по сообщениям УФЭБС ED221                              */
/*                                                                          */
/* Имя файла: ufgd221.mac                                                   */
/* Создан:    25.10.05                                      Фомченкова Л.Н. */
/* Изменен:   10.04.12 Chesnokov D.S. по заявке С-9530 проверка на группу   */
/****************************************************************************/
/*SDA 06/12/2013 адаптация для 31-й */
import "ufgendoc.mac", "diver.mac";

var ver_st = 1;

macro GenDoc( addrMes )

  if (not ВходитВГруппу({oper},198))
    msgBox("Вы не включены в группу \"198 - Генерация сообщений УФЭБС\"");
    return false;
  end;

  var xml:object = ActiveX( "MSXML.DOMDocument" );
  var Node:object = ActiveX( "MSXML.DOMDocument" );
  var Строка, Сумма, Corschem, Currency, Error, Cancel, Sums, CtrlCode, Count, field_name, ErrDescription = "";
  var StatusCode, i = 0, Page, EDDate, j = 0;
  var relRef = NULL;
  var ReadFromNode = "";

  SetBuff( wlmes, addrMes );

  PrintLog( 2, "Генерация выписки по ED221" );

  ClearRecord( wlhead );

  while( СчитатьПоле( field_name, Строка ) )
     if( field_name == XMLField )  /*----------------------------------------*/

        if ( not xml.loadXML(Строка) )
           println( string( "Неверный формат сообщения по форме ED221" ) );
           return false;
        end;

        /* Заполнение учетных буферов */
        wlhead.Number       = int(ReadAttribute(xml,"EDNo"));
        wlhead.SubKind      = 4;
        Sums = ReadOptinalAttribute(xml,"ReservedSum");
        if (Sums)
            wlhead.SumReserve  = money(Sums)/100;
        end;
        Sums = ReadOptinalAttribute(xml,"CreditLimitSum");
        if (Sums)
            wlhead.OverNightLimit  = money(Sums)/100;
        end;
        Sums = ReadOptinalAttribute(xml,"CreditSum");
        if (Sums)
            wlhead.CreditTurn  = money(Sums)/100;
        end;
        Sums = ReadOptinalAttribute(xml,"DebetSum");
        if (Sums)
            wlhead.DebetTurn  = money(Sums)/100;
        end;
        Sums = ReadOptinalAttribute(xml,"OutBal");
        if (Sums)
            wlhead.RestOut = money(Sums)/100;
        end;
        Sums = ReadOptinalAttribute(xml,"EnterBal");
        if (Sums)
            wlhead.RestIn = money(Sums)/100;
        end;
        wlhead.Account = ReadAttribute(xml,"Acc"); 
        wlhead.DateIn       = ToDate(ReadAttribute(xml,"AbstractDate"));
        wlhead.DateOut      = wlhead.DateIn;
        Count = ReadOptinalAttribute(xml,"DebetQuantity");
        if(Count)
            wlhead.DebetNumDoc = int(Count);
        end;
        Count = ReadOptinalAttribute(xml,"CreditQuantity");
        if(Count)
            wlhead.CreditNumDoc = int(Count);
        end;
        wlhead.FIID = 0;
        if( not ОпределитьСхемуРасчетовПоКорсчету( wlhead.Corschem, wlmes.OutsideAbonentID, wlhead.Account, wlhead.FIID ) )
          return FALSE;
        end;    

        if( ver_st == 2 )
           ПроверитьЭлелементPartInfoНаНаличие(xml,wlhead.PartAggregateID, wlhead.Page);
        end;

        if( not ВставитьЗаголовокВыписки( wlhead ) )
          std.msg("Ошибка при вставке заголовка выписки");
          return FALSE;
        end;

     elif( field_name == UFBSDocExtField ) /*---------------------------------*/  
        /*Вставляем документы выписки*/
        if( not node.loadXML(Строка) )
           println( string( "Неверный формат сообщения по форме ED221" ) );
           return false;
        end;

        ClearRecord(wlconf);
        CtrlCode = ReadOptinalAttribute(node,"CtrlCode");
        if(CtrlCode)
           Cancel = KVIT_CANCEL;
           GetElementAndNoteLLVALUES(OBJTYPE_WLRESCODE_SMFR, CtrlCode, NULL, ErrDescription);
           wlconf.Description = ErrDescription;
        else
           Cancel = KVIT_NORMAL;
        end;

        ReadFromNode = Node.ChildNodes.Item(0).ChildNodes.Item(0).NodeName;

        relRef = EDNoDateAuthor();
 
        relRef.EDNo   = ReadAttribute(Node,"EDNo",          ReadFromNode);
        relRef.EDDate = ToDate(ReadAttribute(Node,"EDDate", ReadFromNode));
        relRef.EDAuthor = ReadAttribute(Node, "EDAuthor",   ReadFromNode);

        wlconf.RelatedRef = relRef.GetTrn();

        СформироватьДокументВыписки(wlconf, Cancel, node, "ED101");
        СформироватьДокументВыписки(wlconf, Cancel, node, "ED103");
        СформироватьДокументВыписки(wlconf, Cancel, node, "ED104");
        СформироватьДокументВыписки(wlconf, Cancel, node, "ED105");
        СформироватьДокументВыписки(wlconf, Cancel, node, "ED108");
        СформироватьДокументВыписки(wlconf, Cancel, node, "ED110");
        СформироватьДокументВыписки(wlconf, Cancel, node, "EDRefID");
        СформироватьДокументВыписки(wlconf, Cancel, node, "ED111");
     
     else /*---------------------------------------------------------------*/
        std.msg( string( "Неизвестный код поля: ", field_name) );
        return FALSE;
    
     end; /*---------------------------------------------------------------*/
  end;
      
  /* Обновим выписку */
  if( not ОбновитьЗаголовокВыписки( wlhead ) )
    std.msg("Ошибка при обновлении заголовка выписки");
    return FALSE;
  end;

  return TRUE;

  OnError(er) /* Обработка ошибок времени выполнения */
    std.msg(String(er.Message, "|Модуль: ", er.Module, " Строка: ", er.Line));
    return FALSE;
end;

macro GenDocV2( addrMes )
   ver_st = 2;
   return GenDoc( addrMes );
end;
