/****************************************************************************/
/*                   R-Style SoftWare Lab, RS-Bank 5.1                      */
/****************************************************************************/
/*                  Подсистема "Межбанковские расчеты"                      */
/* Генерация сообщения ED101 транспорта УФЭБС                               */
/*                                                                          */
/*  Имя файла: ufgm101.mac                                                  */
/*  Создан:    29.09.04                                       Бабин А.П.    */
/*  Изменен:   TAM           30.11.2011 I-00126112: для документов с шифром 01-ed101  */
/*             Chesnokov D.S.11.04.2012 заявка C-9530                                 */
/*             Gurin S.      21.12.2012 Hotfix HF2030_45_09_57                        */
/*             Gurin S.      21.06.2013 I-00387942-1                                  */
/*             RR            22.10.2013 Hotfix HF2030_45_09_95                        */
/*             TAM           19.11.2013 HF_96                                         */
/*             Gurin S.      28.01.2014 Адаптация 2031 (C-24829-6)                    */
/*             DAI           21.03.2014 Hotfix HF2031_19_25_12                        */
/*             Gurin S.      12.06.2014 HF 49                                         */
/*             Gurin S.      22.12.2015 HotFix 2031.19.25 (Life_1 1.3)_11             */
/**************************************************************************************/
/*SDA адаптация для 31-й*/
import OprInter, BankInter, "ufgenmes.mac", "wluftool.mac", "cb_sql.mac", 
       oralib, likepy, pm_tools, "pmcarfun.mac", "pmlib.mac", "pmbudg_lib.mac", Globals, pm_const;
import "diver.mac";

FILE wl_psdem  (pspaydem) key 0;
FILE wl_payord (pspayord) key 0;
FILE wl_pmdemand(pmdemand) key 0;
FILE dp_dep (dp_dep) key 0;
FILE bankdprt (bankdprt) key 0;

/*  Отдельные реквизиты ED103 не заполняются, начиная с версии Альбома УФЭБС 2.4.0 вплоть до особого распоряжения Банка России*/
private const flag_2_4_0 = true;
var SHIFR_OPER = "01";

//TAM 30.11.2011 I-00126112
/*SDA - формирование всех начальных межбанковских платежей как ED101 - для ГЭБ */
private var errCode,OutRegEDoc=false;
GetRegistryValue("PRBB\\МЕЖБАНКОВСКИЕ РАСЧЕТЫ\\ДПП_ТЕКУЩИМ_ДНЕМ\\ПОЧТОВЫЕ\\МЕЖРЕГИОН В ЭЛЕКТРОННОМ ВИДЕ", v_bool,OutRegEDoc, errCode); 
if (errCode)
    OutRegEDoc=false;
end;

const ED101 = "ED101",
      ED102 = "ED102",
      ED103 = "ED103",
      ED104 = "ED104",
      ED105 = "ED105",
      ED110 = "ED110";

/* DAI Hotfix HF2031_19_25_12
private var ResNotDialog:bool = false;

macro GetCondition( RsPaym: RsbPayment )
   var BorderDate = date("01.04.2013");
   //TAM 02.04.13 Исправления 71 ХФ согласно 30 информационному письму от МЦИ
   if ( RsPaym.Date < BorderDate )
    return 1;
  else
    return 2;
  end;
end;
*/

macro GetDateAkkr( AkkrDate:date )
   var DateAkkrStr = "";
   if ( AkkrDate!=date(0,0,0) )
      DateAkkrStr = YYYYMMDD(AkkrDate);
   end;
   return DateAkkrStr;
end;

/* Вид аккредитива - признак покрытия/депонирования. 
   (1 - покрытый/депонированный, 2 - непокрытый/гарантированный).
   В системе pmakkr.Type принимает значения:
   Н - Безотз. непокр.   
   Б - Безотз. покрытый  
   П - Отзывный непокр.  
   О - Отзывный покрытый */
macro GetReimbursement( AkkrType:string )
   if ( (AkkrType=="Н") OR (AkkrType=="П") )
      return 2;
   elif ( (AkkrType=="Б") OR (AkkrType=="О") )
      return 1;
   end;
      
   return 0;
end;

/* Вид аккредитива. (1 - отзывный, 2 - безотзывный). 
   В системе pmakkr.Type принимает значения:
   Н - Безотз. непокр.   
   Б - Безотз. покрытый  
   П - Отзывный непокр.  
   О - Отзывный покрытый */
macro GetCreditForm( AkkrType:string )
   if ( (AkkrType =="Н") OR (AkkrType =="Б") )
      return 2;
   elif((AkkrType =="П") OR (AkkrType =="О") )
      return 1;
   end;

   return 0; 
end;

macro GetAcceptPeriod( RsPaym: RsbPayment )
   //if ( GetCondition( RsPaym )==1 ) //DAI Hotfix HF2031_19_25_12
      if ( wl_psdem.AcceptPeriod<=0 )
         return 5;
      else
         return wl_psdem.AcceptPeriod;
      end;
   /* DAI Hotfix HF2031_19_25_12
   else
      return 0;
   end;
   */
end;

macro GetAcceptSum()
   if ( wl_psdem.ReqSum==wlpmpaym.PayAmount )
      return 0;
   else
      return wl_psdem.ReqSum;
   end;
end;

macro GenMes( addrMes, addrPm, type, ver_st )
   debugbreak;
  if (not ВходитВГруппу({oper},198))
    msgBox("Вы не включены в группу \"198 - Генерация сообщений УФЭБС\"");
    return false;
  end;

  /*var xml:object = ActiveX("MSXML.DOMDocument");*/
  var xml:object = ActiveX("Microsoft.XMLDOM");  
  var mes:object, elem:object, subElem:Object;
  var InitXml:object;
  var FlagTrans, IsPacket:bool;
  var DKFlag, БИКБанкаПлательщика, СсылкаНаБанк, Error, MFO_9, КорсчетБанкаПлательщика, PayerName;
  var ShifrOperation, НомерДокумента, PAYERCHARGEOFFDATE;
  var PayerINN, ReceiverINN, PayerKPP, ReceiverKPP, БИКБанкаПолучателя, IsDepartmentalInfo = false;
  var СчетБанкаПолучателя = "", oldKey, IDStr, field_value, TagPayer, TagPayee ;
  SetBuff( wlmes,  addrMes );
  SetBuff( wlpmpaym, addrPm );
  var RsPaym: RsbPayment = RsbPayment( wlpmpaym.PaymentID );
  var rs:RsdRecordset;  

  ClearRecord(wl_psdem);

  //TAM 30.11.2011 I-00126112
  if ( (RsPaym.PaymentKind == "Э") or (RsPaym.PaymentKind == "Н"))
        if ( (trim(RsPaym.ShifrOper) == "01"))
            type = ED101;
        elif ((OutRegEDoc) and (RsPaym.ShifrOper == "02"))
                type = ED103;
        elif ((OutRegEDoc) and (RsPaym.ShifrOper == "06"))
                type = ED104;
        elif ((OutRegEDoc) and (RsPaym.ShifrOper == "16"))
                type = ED105;
        end;
  end;
  
  if ( RsPaym.TaxAuthorState!="" ) 
    IsDepartmentalInfo = true;
  end;

  //DAI Hotfix HF2031_19_25_12
  var IsZeroFill : bool = ( InList(type, ED101, ED104, ED105) and
                            IsBudgetPaymWithCheckAcc( RsPaym.TaxAuthorState, 
                                                      RsPaym.ReceiverAccount, 
                                                      RsPaym.PayType )
                          );


  if( type == ED110 )
      TagPayer = "PayerBrf";
      TagPayee = "PayeeBrf";
  else
      TagPayer = "Payer";
      TagPayee = "Payee";
  end;

  if( (type != ED101) and (type != ED104 ) and (type != ED105 ) and (type != ED103 )) //TAM 03.07.2012 //TAM I-00224536-2 23.07.2012
     if( RsPaym.PaymentKind == "С" )
        RunError( "|Недопустимое значение вида платежа" );
     end;
  end;

  if ( type==ED102 ) 
     if ( RsPaym.ShifrOper != "08" )
        RunError( "|Данный ПД не является аккредитивом" );
     end;
  end;

  if ( type==ED103 ) 
     wl_psdem.OrderID=RsPaym.DocumentID;
     if ( not getEQ(wl_psdem) )
        RunError( "|Не найдена запись в таблице требований" );
     end;
  end;

  if ( IsDebetPaym(RsPaym) )
     DKFlag = WL_DEBET;
  elif ( IsCreditPaym(RsPaym) )
     DKFlag = WL_CREDIT;
  else
     DKFlag = -1;
  end;
  FlagTrans = IsTransitPayment(RsPaym);      

  if( DKFlag == -1 ) /* документ не внешний */
    RunError( "|Платеж с ID: " + string( RsPaym.PaymentID ) + "не внешний" );
  end ;

  if( DKFlag == WL_DEBET )
    if( RsbGetTrue( False, False, "Документ " + RsPaym.Number + "  - дебетовый. Выгружать его?" ) == False )
      RunError( "|Документ дебетовый" );
    end;
  end;  

  if( DKFlag == WL_CREDIT )
     PayerINN    = RemoveKPP(RsPaym.PayerINN);
     ReceiverINN = RemoveKPP(RsPaym.ReceiverINN);
     PayerKPP    = RemoveINN(RsPaym.PayerINN);
     ReceiverKPP = RemoveINN(RsPaym.ReceiverINN);
  else
     PayerINN    = RemoveKPP(RsPaym.ReceiverINN);
     ReceiverINN = RemoveKPP(RsPaym.PayerINN);
     PayerKPP    = RemoveINN(RsPaym.ReceiverINN);
     ReceiverKPP = RemoveINN(RsPaym.PayerINN);
  end;

  //DAI Hotfix HF2031_19_25_12
  PayerINN    = Str0(PayerINN,    IsZeroFill);
  PayerKPP    = Str0(PayerKPP,    IsZeroFill);
  ReceiverINN = Str0(ReceiverINN, IsZeroFill);
  ReceiverKPP = Str0(ReceiverKPP, IsZeroFill);

  dp_dep.Code = RsPaym.EndDepartment;
  if( not GetEQ( dp_dep ))
      RunError( "|Не найден конечный филиал платежа." );
  end;
  БИКБанкаПлательщика = ПолучитьКодСубъекта( dp_dep.PartyID, PTCK_BIC, Error, 1 );
  if(Error)
    RunError( "|Не найден БИК банка плательщика." );
  end;
  bankdprt.PartyID = dp_dep.PartyID;
  if( not GetEQ( bankdprt ))
      RunError( "|Не найден банк плательщика в справочнике." );
  end;
  КорсчетБанкаПлательщика = bankdprt.CorAcc;

  if( DKFlag == WL_CREDIT )
    БИКБанкаПлательщика = Свой_МФО;    

    СсылкаНаБанк = ПолучитьКодСубъекта( RsPaym.ReceiverBankCode, RsPaym.ReceiverBankCodeKind, Error ) ;
    if( Error == 0 )
      MFO_9 = ПолучитьКодСубъекта( СсылкаНаБанк, PTCK_BIC, Error ) ;
      if( Error == 0 )
        //if( ((not IsAbonentPUG(DKFlag)) OR (not IsAbonentMoskowRegion(DKFlag))) AND 
        //    (substr( MFO_9, strlen( MFO_9 )-2, 3 ) == "002") AND
        //    (MFO_9 != "044501002") AND (MFO_9 != "044536002") AND (MFO_9 != "044537002") )
        //  RunError( "|Получатель (БИК = " + RsPaym.ReceiverBankCode + ") является учреждением ЦБ РФ" );
        //end;
        БИКБанкаПолучателя = MFO_9;
      else
        RunError( "|Не найден БИК получателя" );
      end;
    else
      RunError( "|Не найдена ссылка на банк получателя" );
    end;
  else
    БИКБанкаПолучателя = Свой_МФО;

    СсылкаНаБанк = ПолучитьКодСубъекта( RsPaym.PayerBankCode, RsPaym.PayerBankCodeKind, Error ) ;
    if( Error == 0 )
      MFO_9 = ПолучитьКодСубъекта( СсылкаНаБанк, PTCK_BIC, Error ) ;
      if( Error == 0 )
        БИКБанкаПлательщика = MFO_9;
      else
        RunError( "|Не найден БИК банка плательщика" );
      end ;
    else
      RunError( "|Не найдена ссылка на банк плательщика" );
    end ;
  end;

  if ( (not Общий_Регион(DKFlag)) or (not IsAbonentPUG(DKFlag)) or (not IsAbonentMoskowRegion(DKFlag)) )
    if( DKFlag == WL_CREDIT )
      if ( (substr(MFO_9,7,3)!="000") AND (substr(MFO_9,7,3)!="001") AND (substr(MFO_9,7,3)!="002") )
         СчетБанкаПолучателя = RsPaym.ReceiverCorrAccNostro;
      end;
    else
      if ( (substr(Свой_МФО,7,3)!="000") AND (substr(Свой_МФО,7,3)!="001") AND (substr(Свой_МФО,7,3)!="002") )
         СчетБанкаПолучателя = Свой_Корсчет;
      end;
    end;
  end;

  ShifrOperation = int( substr( RsPaym.ShifrOper, 1, 2) ) ;

  НомерДокумента = int(GetLastSymbols( RsPaym.Number, PM_DOCNO_NONZERO_LEN )) ;

  if( НомерДокумента  ==  0 )
    /* Если необходимо, чтобы при нечисловом номере документа номер
    выгруженного становился нулевым автоматически -
    уберите следующие строки */

    if( RsbGetTrue( True, False, "Номер документа " + RsPaym.Number + " не числовой. Выгрузить документ с N 0 ?" ) == False )
      RunError( "|Нечисловой номер документа" );
    end;
  end;    

  mes = xml.createElement(type);

  if(ver_st == 1)
     mes.setAttribute("xmlns", "urn:cbr-ru:ed:v1.1");
  else
     mes.setAttribute("xmlns", "urn:cbr-ru:ed:v2.0");
  end;

  var ed_nda = NULL;
  
  ed_nda = EDNoDateAuthor();
  ed_nda.ConstructByTrn(wlmes.TRN);
  
  mes.setAttribute("EDNo",    ed_nda.EDNo );
  //mes.setAttribute("EDDate",  YYYYMMDD(ed_nda.EDDate) );
  mes.setAttribute("EDDate",  YYYYMMDD({curdate}) );
  mes.setAttribute("EDAuthor",ed_nda.EDAuthor );

  var PaytKind : string = "";
  if( (type == ED110) and (ver_st >= 2016) )
    PaytKind = "";
  else
    PaytKind = GetPaytKind(type, RsPaym.PaymentKind, wlmes.TpSchemID);
  end;
  if(PaytKind)
    mes.setAttribute("PaytKind", PaytKind);
  end;
  
  mes.setAttribute("Sum", double( RsPaym.ReceiverAmount )*100 );
  //SDA - неполноформатные электронно с шифром 01 
  if ((RsPaym.PaymentKind != "П") and (type == ED101))
    mes.setAttribute("TransKind", SHIFR_OPER); 
  else
    mes.setAttribute("TransKind", RsPaym.ShifrOper); 
  end;
  if ( (type==ED102) )
     if ( RsPaym.AkkrAccRealReceiver!="" )
        mes.setAttribute("BeneficiaryAccNo", TransTextField(RsPaym.AkkrAccRealReceiver) );
     else
        RunError( "|Не заполнен счет получателя аккредитива" );
     end;
  end;

  if ( type==ED103 )
     //var PaytCondition : string = GetCondition(RsPaym);
     var PaytCondition : string = GetPaytCondition(wl_psdem.AcceptTerm); //DAI Hotfix HF2031_19_25_12
     if ( PaytCondition )
        mes.setAttribute("PaytCondition", PaytCondition );
     else
        RunError( "|Не найдено условие оплаты" );
     end;
  end;

  //DAI Hotfix HF2031_19_25_12
  if ( type==ED103 )
      //TAM 02.04.2014 R-356278-2
      if(PaytCondition != 1)
      //if ( wl_psdem.PreAcptID == 0 )
        mes.setAttribute("AcptTerm", GetAcceptPeriod(RsPaym) );
      end;
  //#147965. Атрибут временно не заполняется
  //if ( type==ED103 )
  //   if ( GetAcceptPeriod( RsPaym ) and (not flag_2_4_0))
  //      mes.setAttribute("AcptTerm", GetAcceptPeriod(RsPaym) );
  //   end;
  //   if ( GetAcceptSum() )
  //      mes.setAttribute("AcptSum", double(GetAcceptSum())*100 );
  //   end;
  end;

  /* Аккредитивы */
  if ( type==ED102 )     

     /* Номер счета по учету аккредитивов к оплате (40901). 
        Указывается в случае осуществления операции по покрытому (депонированному) аккредитиву. 
        В случае непокрытого (гарантированного) аккредитива атрибут не заполняется */
     if ( GetReimbursement(RsPaym.AkkrType) == 1 )
        if( RsPaym.ReceiverAccount!="" )
           mes.setAttribute("AcptAccNo", TransTextField(RsPaym.ReceiverAccount) );
        else
           RunError( "|Не задан счет по учету аккредитива к оплате (40901)" );
        end;
     end;

     if ( GetDateAkkr(RsPaym.AkkrDate)!="" )
        mes.setAttribute( "ExpiryDate", GetDateAkkr(RsPaym.AkkrDate) );
     else
        RunError( "|Не определен срок действия аккредитива" );
     end;

     if ( GetReimbursement(RsPaym.AkkrType) )
        mes.setAttribute( "DocCreditReimbursement", GetReimbursement(RsPaym.AkkrType) );
     else
        RunError( "|Невозможно определить тип аккредитива (покрытый/непокрытый)" );
     end;

     if ( GetCreditForm(RsPaym.AkkrType) )
        mes.setAttribute( "DocCreditForm", GetCreditForm(RsPaym.AkkrType) );
     else
        RunError( "|Невозможно определить тип аккредитива (отзывный/безотзывный)" );
     end;

  end;

  if ( (type==ED101) OR (type==ED103) OR (type==ED104) )
     if ( (not IsOwnerAccOwnBank(БИКБанкаПлательщика, 0, RsPaym.PayerAccount)) )
        PayerChargeOffDate = PM_GetPayerChargeOffDate(RsPaym.PaymentID);
        if( PayerChargeOffDate == date( 0, 0, 0 ) )
          mes.setAttribute("ChargeOffDate", YYYYMMDD({curdate}) );
        else
          mes.setAttribute("ChargeOffDate", YYYYMMDD(PayerChargeOffDate) );
        end ;
     end;
  end;

  //DAI Hotfix HF2031_19_25_12
  if ( (type==ED103) and (RsPaym.DocDispatchDate!=date(0,0,0)) )
     mes.setAttribute("DocDispatchDate", YYYYMMDD(RsPaym.DocDispatchDate) );
  end;
  //#147965. Атрибут временно не заполняется
  //if ( (type==ED103) and (RsPaym.DocDispatchDate!=date(0,0,0)) and (not flag_2_4_0))
  //   mes.setAttribute("DocDispatchDate", YYYYMMDD(RsPaym.DocDispatchDate) );
  //end;

  if ( (type==ED103) OR (type==ED104) )
     if ( (not IsOwnerAccOwnBank(БИКБанкаПлательщика, 0, RsPaym.PayerAccount)) and (RsPaym.ReceiverBankMarkDate!=date(0,0,0)) )
         mes.setAttribute("ReceiptDateCollectBank", YYYYMMDD(RsPaym.ReceiverBankMarkDate) );
     end;
  end;

  //DAI Hotfix HF2031_19_25_12
  if ( (type==ED103) and (wl_psdem.PreAcptID==0) and (wl_psdem.AcceptDate!=date(0,0,0)) )
      mes.setAttribute("MaturityDate", YYYYMMDD(wl_psdem.AcceptDate) );
  end;
  //#147965. Атрибут временно не заполняется
  //if ( (type==ED103) and (GetCondition(RsPaym)==1) and (wl_psdem.AcceptDate!=date(0,0,0)) and (not flag_2_4_0))
  //    mes.setAttribute("MaturityDate", YYYYMMDD(wl_psdem.AcceptDate) );
  //end;

  if ( (type==ED101) OR (type==ED103) OR (type==ED104) )
     /* Дата помещения в картотеку */
     if ( (wlpmpaym.I2PlaceDate!=date(0,0,0)) AND (not IsOwnerAccOwnBank(БИКБанкаПлательщика, 0, RsPaym.PayerAccount)) )  
        mes.setAttribute("FileDate", YYYYMMDD(RsPaym.I2PlaceDate) );
     end;        
  end;

  if ( (type==ED101) OR (type==ED103) OR (type==ED104)  )
     if (  (not IsOwnerAccOwnBank(БИКБанкаПлательщика, 0, RsPaym.PayerAccount)) )
        if(RsPaym.PayerBankEnterDate != date( 0, 0, 0 ))
          mes.setAttribute("ReceiptDate", YYYYMMDD(RsPaym.PayerBankEnterDate) );
        elif( RsPaym.ClientDate == date( 0, 0, 0 ) )
          if ( RsPaym.I2PlaceDate!=date(0,0,0) )  
             mes.setAttribute("ReceiptDate", YYYYMMDD(RsPaym.I2PlaceDate) );
          else
             mes.setAttribute("ReceiptDate", YYYYMMDD(RsPaym.ValueDate) );
          end;
        else
          mes.setAttribute("ReceiptDate", YYYYMMDD(RsPaym.ClientDate) );
        end ;
     end;  
  end;

  if ( type!=ED102 )
     mes.setAttribute("Priority", RsPaym.Priority );  
  end;

  /* Поле "Содержание операции" (TransContent) для ED105 (платежный ордер) должно 
    содержать строку "Частичная оплата". */
  if( (type==ED105) AND (RsPaym.DocKind==PS_PAYORDER) )
    var tmp = RsPaym.GetPM_PAYM().rec.ContentOperation;
    if (tmp != "")
      if ((RsPaym.PartPaymShifrMain == "16") and (tmp == "ЧИПО"))
        tmp = tmp + " " + ДатаДДММГГГГ(RsPaym.PartPaymDateMain);
      end;
      mes.setAttribute("TransContent", tmp );
    end;
  end;

  /* Признак системы обработки SystemCode: Обязателен к заполнению для одиночных ЭПД и пакетов. 
     Не должен быть заполнен для ЭПД в составе пакета. */ 
  //Gurin S. 26.03.2015 HF2031_19_25_148
  if( not GetModePacketEPD_ESID( wlmes, @IsPacket) )
    RunError( "|Ошибка при определении режима использования пакетов ЭПД/ЭСИД" );
  end;

  //DAI Hotfix HF2031_19_25_12
  /*
    if ((RsPaym.PaymentKind == "С"))
      IsPacket = false;   
    end;
  */
  if( not IsPacket )
    mes.setAttribute("SystemCode", GetEDSystemCode( wlmes.TpSchemID ) );
  end;
  
  if(type != ED110)
    var UIN : string = RsPaym.GetPMRMPROP().rec.UIN;
    if(UIN)
      CheckUIN(RsPaym.ReceiverAccount, UIN);
      mes.setAttribute("PaymentID", UIN);
    end;
  end;

  elem = xml.createElement("AccDoc");
  elem.setAttribute("AccDocNo", НомерДокумента );
  elem.setAttribute("AccDocDate", YYYYMMDD(RsPaym.Date) );
  elem.appendChild(xml.createTextNode(""));
  mes.appendChild(elem);

  elem = xml.createElement(TagPayer);
  if ( PayerINN!="" )
     elem.setAttribute("INN", PayerINN );
  end;
  if ( (type==ED101) OR (type==ED104) OR (type==ED105) )
     if ( PayerKPP!="" )
        elem.setAttribute("KPP", PayerKPP );
     elif(IsDepartmentalInfo)
        elem.setAttribute("KPP", "0" );
     end;
  end;

  if( RsPaym.PayerBankCode == БИКБанкаПлательщика )
    if ( trim(RsPaym.PayerAccount)!="" )
       elem.setAttribute("PersonalAcc", RsPaym.PayerAccount );
    end;
    if ( type!=ED110 )
       subElem = xml.createElement("Name");
       if ( trim(RsPaym.PayerName)=="" )
          RunError( "|Не заполнено наименование плательщика" );
       end;
       subElem.appendChild(xml.createTextNode( TransTextField(substr(RsPaym.PayerName,1,160)) ));
       elem.appendChild(subElem);
    end;
  else
    if(ПолучитьВсеПроводки(RsPaym.PaymentID,@rs) and rs.moveLast())
      if( rs.value("t_ReceiverAccount") == RsPaym.FutureReceiverAccount )
        elem.setAttribute("PersonalAcc", rs.value("t_PayerAccount") );
      else
        elem.setAttribute("PersonalAcc", RsPaym.FuturePayerAccount );
      end;
    end;  
    if ( type!=ED110 )
       subElem = xml.createElement("Name");
       PayerName = RsPaym.PayerName;
       if(trim(RsPaym.PayerAccount)!="" )
         PayerName = PayerName  + " сч. " + RsPaym.PayerAccount;
       end;
       if(trim(RsPaym.PayerBankName)!="" )
         PayerName = PayerName  + ", " + RsPaym.PayerBankName;
       end;

       subElem.appendChild(xml.createTextNode( TransTextField(substr(PayerName,1,160)) ));
       elem.appendChild(subElem);
    end;

  end;

  subElem = xml.createElement("Bank");
  subElem.setAttribute("BIC", БИКБанкаПлательщика );
  subElem.setAttribute("CorrespAcc", КорсчетБанкаПлательщика );   

  subElem.appendChild(xml.createTextNode("" ));
  elem.appendChild(subElem);
  mes.appendChild(elem);

  elem = xml.createElement(TagPayee);
  if ( ReceiverINN!="" )
     //проверка на заполнение ИНН нулями
     if ( trim (strsubst(ReceiverINN, "0","")) != "" )
     elem.setAttribute("INN", ReceiverINN );
     else
        elem.setAttribute("INN", "0" );
     end;
  end;
  if ( (type==ED101) OR (type==ED104) OR (type==ED105) )
     if ( trim (strsubst(ReceiverKPP, "0","")) != "" )
        elem.setAttribute("KPP", ReceiverKPP );
     elif(IsDepartmentalInfo)
        elem.setAttribute("KPP", "0" );
     end;
  end;
  if ( type!=ED102 )
     if ( trim(strsubst(RsPaym.ReceiverAccount,"0","")) !="" )
        elem.setAttribute("PersonalAcc", RsPaym.ReceiverAccount );
     end;
  end;
  if ( type!=ED110 )
     subElem = xml.createElement("Name");
     if ( trim(RsPaym.ReceiverName)=="" )
        RunError( "|Не заполнено наименование получателя" );
     end;
     subElem.appendChild(xml.createTextNode( TransTextField(substr(RsPaym.ReceiverName,1,160)) ));
     elem.appendChild(subElem);
  end;
  subElem = xml.createElement("Bank");
  subElem.setAttribute("BIC", БИКБанкаПолучателя );
  if ( СчетБанкаПолучателя!="" )
     subElem.setAttribute("CorrespAcc", СчетБанкаПолучателя );   
  end;
  subElem.appendChild(xml.createTextNode("" ));
  elem.appendChild(subElem);
  mes.appendChild(elem);

  if ( type==ED102 )
     elem = xml.createElement("GoodsDescription");
     elem.appendChild( xml.createTextNode(substr(TransTextField(RsPaym.Ground),1,260)) );
     mes.appendChild(elem);  

     /*wl_payord.OrderID = wlpmpaym.DocumentID;*/
     field_value = RsPaym.AkkrRepresentation;
     if ( field_value!="" )
        elem = xml.createElement("DocRequired");
        elem.appendChild( xml.createTextNode(substr(TransTextField(field_value),1,170)) );
        mes.appendChild(elem);
     else
        RunError( "|Не заполнено примечание <Платежи по представлению>" );
     end;

     field_value = RsPaym.AkkrAddCondition;
     if ( field_value!="" )
        elem = xml.createElement("AdditionalConditions");
        elem.appendChild( xml.createTextNode(substr(TransTextField(field_value),1,170)) );
        mes.appendChild(elem);       
     end;
  end;

  if ( (type!=ED102) and (type!=ED110) )
     elem = xml.createElement("Purpose");
     elem.appendChild( xml.createTextNode(substr(TransTextField(RsPaym.Ground),1,210)) );
     mes.appendChild(elem);  
  end;

  if ( (type==ED101) OR (type==ED104) OR (type==ED105) )

     if( IsDepartmentalInfo )
        elem = xml.createElement("DepartmentalInfo");
        elem.setAttribute("DrawerStatus",   RsPaym.TaxAuthorState );
        
        //DAI Hotfix HF2031_19_25_12
        /*
        var IsZeroFill : bool = ( (type != ED101) or 
                                  (substr(RsPaym.ReceiverAccount, 1, 5) == "40101")
                                );
        */
         
        //Gurin S. 12.06.2014 HF 49
        if(RsPaym.BttTICode!="")
          if( (ver_st == 1) or (OnlyDigit(RsPaym.BttTICode)) )
            elem.setAttribute("CBC", RsPaym.BttTICode );
          else
            RunError( "|Недопустимое значение КБК" );
          end;
        else
          elem.setAttribute("CBC","0");
        end;

        if(RsPaym.OKATOCode!="")
          elem.setAttribute("OKATO",          RsPaym.OKATOCode );
        else
          elem.setAttribute("OKATO", "0" );
        end;
        if(RsPaym.TaxPmGround != "")
          elem.setAttribute("PaytReason",     RsPaym.TaxPmGround );
        else
          elem.setAttribute("PaytReason", "0" );
        end;
        if(RsPaym.TaxPmPeriod != "")
          elem.setAttribute("TaxPeriod",      RsPaym.TaxPmPeriod );
        elif(IsZeroFill)
          elem.setAttribute("TaxPeriod", "0" );
        end;
        if(RsPaym.TaxPmNumber != "")
          elem.setAttribute("DocNo",          TransTextField(RsPaym.TaxPmNumber) );
        else
          elem.setAttribute("DocNo", "0" );
        end;
        if(RsPaym.TaxPmDate != "")
          elem.setAttribute("DocDate",        RsPaym.TaxPmDate );
        else
          elem.setAttribute("DocDate", "0");
        end;
        if(RsPaym.TaxPmType != "") 
          elem.setAttribute("TaxPaytKind",    RsPaym.TaxPmType );
        else
          elem.setAttribute("TaxPaytKind", "0" );
        end;
        
        elem.appendChild(xml.createTextNode("" ));
        mes.appendChild(elem);
     end;
  end;

  ed_nda = EDNoDateAuthor();

  if ( (type==ED101) OR (type==ED105) )
     if ( ed_nda.ConstructByInitialPmMes_pm(RsPaym.PaymentID) )
        elem = xml.createElement("InitialED");
        elem.setAttribute("EDNo",    ed_nda.EDNo );
        elem.setAttribute("EDDate",  YYYYMMDD(ed_nda.EDDate) );
        elem.setAttribute("EDAuthor",ed_nda.EDAuthor );
        elem.appendChild(xml.createTextNode(""));
        mes.appendChild(elem);
     end;
  end;

  if ( type==ED105 )
     elem = xml.createElement("PartialPayt");
     if ( (RsPaym.DocKind==PS_PAYORDER) AND (RsPaym.PartPaymNumber>0) )
        elem.setAttribute("PaytNo", GetLastSymbols( string(RsPaym.PartPaymNumber), 3 ) );
     end;
    /*SDA - неполноформатные электронно с шифром 01 */
    if ( RsPaym.PaymentKind != "П" )
      elem.setAttribute("TransKind", SHIFR_OPER); 
    else
     elem.setAttribute("TransKind", substr(RsPaym.PartPaymShifrMain,1,2) );
    end;
     /* Сумма остатка платежа. В случае последнего частичного платежа (т.е. сумма остатка равна нулю) 
        не заполняется */
     if ( wlpmpaym.PartPaymRestAmountMain>$0 )
        elem.setAttribute("SumResidualPayt",double(RsPaym.PartPaymRestAmountMain)*100 );
     end;
     subElem = xml.createElement("AccDoc"); 
     //Gurin S. 22.11.2013 Закомментировал RunError и добавил проверку на PartPaymDateMain по C-24829-6    
     if ( (int(GetLastSymbols( RsPaym.PartPaymNumMain, PM_DOCNO_NONZERO_LEN ))!=0) and 
          (RsPaym.PartPaymDateMain!=date(0,0,0)) 
        )
        subElem.setAttribute("AccDocNo", int(GetLastSymbols( RsPaym.PartPaymNumMain, PM_DOCNO_NONZERO_LEN )) );
     else
        subElem.setAttribute("AccDocNo", int(Последние_Символы( RsPaym.Number, 6 )) );   
        //RunError( "|Неверные реквизиты исходного документа" );
     end;
     if(RsPaym.PartPaymDateMain == "")
        subElem.setAttribute("AccDocDate", YYYYMMDD(RsPaym.ValueDate) );
     else
        subElem.setAttribute("AccDocDate", YYYYMMDD(RsPaym.PartPaymDateMain) );
     end;
     subElem.appendChild(xml.createTextNode(""));
     elem.appendChild(subElem);
     mes.appendChild(elem);
  end;

  ЗаписатьПолеЛог( "xml", mes.xml, TRUE );
  
  return TRUE; /* Успешное завершение */

  OnError( er ) /* обработка ошибок */
    std.msg(String(er.Message, "|Модуль: ", er.Module, " Строка: ", er.Line));
    return FALSE; 
end;

macro GenMes101( addrMes, addrPm )
   return GenMes( addrMes, addrPm, ED101, 1 );
end;

macro GenMes102( addrMes, addrPm )
   return GenMes( addrMes, addrPm, ED102, 1 );
end;

macro GenMes103( addrMes, addrPm )
   return GenMes( addrMes, addrPm, ED103, 1 );
end;

macro GenMes104( addrMes, addrPm )
   return GenMes( addrMes, addrPm, ED104, 1 );
end;

macro GenMes105( addrMes, addrPm )
   return GenMes( addrMes, addrPm, ED105, 1 );
end;

macro GenMes110( addrMes, addrPm )
   return GenMes( addrMes, addrPm, ED110, 1 );
end;

macro GenMes101V2( addrMes, addrPm )
   return GenMes( addrMes, addrPm, ED101, 2 );
end;

macro GenMes102V2( addrMes, addrPm )
   return GenMes( addrMes, addrPm, ED102, 2 );
end;

macro GenMes103V2( addrMes, addrPm )
   return GenMes( addrMes, addrPm, ED103, 2 );
end;

macro GenMes104V2( addrMes, addrPm )
   return GenMes( addrMes, addrPm, ED104, 2 );
end;

macro GenMes105V2( addrMes, addrPm )
   return GenMes( addrMes, addrPm, ED105, 2 );
end;

macro GenMes110V2( addrMes, addrPm )
   return GenMes( addrMes, addrPm, ED110, 2 );
end;

macro GenMes110v2016( addrMes, addrPm )
   return GenMes( addrMes, addrPm, ED110, 2016 );
end;

private macro CheckPaym( addr, err_msg:@string, type):integer

  var params:TArray;
  var rs:RsdRecordset;
  var query:string;
  var err, BIC;
  var DKFlag, НомерДокумента;
  /*var Name:string, FormatFile:integer, MaxExpMes:integer;*/
  
  SetBuff( wlpmpaym,  addr );
  var RsPaym: RsbPayment = RsbPayment( wlpmpaym.PaymentID );

  if ( IsDebetPaym(RsPaym) )
     DKFlag = WL_DEBET;
  elif ( IsCreditPaym(RsPaym) )
     DKFlag = WL_CREDIT;
  else
     DKFlag = -1;
  end;

  if( not (( RsPaym.PayerGroup    == PAYMENTS_GROUP_EXTERNAL ) or
           ( RsPaym.ReceiverGroup == PAYMENTS_GROUP_EXTERNAL )) or (DKFlag == -1))
      err_msg = string("Платеж с ID ",RsPaym.PaymentID," не внешний");
      SetParm( 1, err_msg );
      return 1;                  
  end;

  query = " select objcode.T_OBJECTID " +
          " from dobjcode_dbt objcode " +
          " where objcode.T_CODEKIND = :CodeKind " +
          " and objcode.T_CODE = :Code "
          " and objcode.T_OBJECTTYPE = 3";
  
  if( DKFlag == WL_CREDIT )
     params = makeArray( SQLParam( "CodeKind", RsPaym.ReceiverBankCodeKind ),
                         SQLParam( "Code"    , RsPaym.ReceiverBankCode ) );
     rs = execSQLselect( query, params, true );
     if( not rs.moveNext() )
       err_msg = "Не найдена ссылка на банк получателя";
       SetParm( 1, err_msg );
       return 1;                  
     else
       BIC = ПолучитьКодСубъекта( rs.value(0), PTCK_BIC, err);
       if( err )
         err_msg = "Не найден БИК банка получателя";
         SetParm( 1, err_msg );
         return 1;                  
       end;

       // if( ((not IsAbonentPUG(DKFlag)) OR (not IsAbonentMoskowRegion(DKFlag))) AND 
       //     (substr( BIC, strlen( BIC )-2, 3 ) == "002") AND
       //     ( BIC != "044501002") AND ( BIC != "044536002") AND (BIC != "044537002") )
       //  err_msg = string("Получатель (БИК =",BIC,") является учреждением ЦБ РФ");
       //  SetParm( 1, err_msg );
       //  return 1;                  
       //end;
     end;
  elif(DKFlag = WL_DEBET)
     params = makeArray( SQLParam( "CodeKind", RsPaym.PayerBankCodeKind ),
                         SQLParam( "Code"    , RsPaym.PayerBankCode ) );
     rs = execSQLselect( query, params, true );
     if( not rs.moveNext() )
       err_msg = "Не найдена ссылка на банк плательщика";
       SetParm( 1, err_msg );
       return 1;                  
     else
       BIC = ПолучитьКодСубъекта( rs.value(0), PTCK_BIC, err);
       if( err )
         err_msg = "Не найден БИК банка плательщика";
         SetParm( 1, err_msg );
         return 1;                  
       end;
     end;
  end;   

  НомерДокумента = int(GetLastSymbols( RsPaym.Number, PM_DOCNO_NONZERO_LEN )) ;
  if( НомерДокумента == 0 )
     err_msg = "Хотя бы одна цифра номера документа из последних шести должна отличаться от 0";
     SetParm( 1, err_msg );
     return 1;                  
  end;

  /*if( (ОпределитьФорматТранспорта( TRANSP_UFBS, Name, FormatFile, MaxExpMes ) == 0) ) //!!!!
    err_msg = "Ошибка при определении режима использования пакетов ЭПД/ЭСИД";
    SetParm( 1, err_msg );
    return 1;                  
  end;*/

  if ( type==ED102 ) 
    if ( RsPaym.ShifrOper != "08" )
       err_msg = "|Данный ПД не является аккредитивом" ;
       SetParm( 1, err_msg );
       return 1;                  
    end;
    if ( RsPaym.AkkrAccRealReceiver == "" )
       err_msg = "Не заполнен счет получателя аккредитива" ;
       SetParm( 1, err_msg );
       return 1;                  
    end;

     if ( GetReimbursement(RsPaym.AkkrType) == 1 )
        if( RsPaym.ReceiverAccount == "" )
           err_msg = "Не задан счет по учету аккредитива к оплате (40901)" ;
           SetParm( 1, err_msg );
           return 1;                  
        end;
     end;

     if ( GetDateAkkr(RsPaym.AkkrDate) == "" )
        err_msg = "Не определен срок действия аккредитива" ;
        SetParm( 1, err_msg );
        return 1;                  
     end;

     if ( not GetReimbursement(RsPaym.AkkrType) )
        err_msg = "Невозможно определить тип аккредитива " ;
        SetParm( 1, err_msg );
        return 1;                  
     end;

     if ( RsPaym.AkkrRepresentation == "" )
        err_msg = "Не заполнено примечание <Платежи по представлению>" ;
        SetParm( 1, err_msg );
        return 1;                  
     end;
     if(strlen(RsPaym.Ground) > 260)
       err_msg = "Длина поля 'Назначение платежа' превышает 260 символов"; 
       SetParm( 1, err_msg );
       return 1;                  
     end;
  end;

  if (( type==ED103 ) and (RsPaym.ShifrOper == "02")) //Gurin S. 21.06.2013 I-00387942-1
    if( RsPaym.DocKind != DLDOC_BANKCLAIM ) //Gurin S. 21.12.2012 Hotfix HF2030_45_09_57
     ClearRecord(wl_psdem);
     wl_psdem.OrderID=RsPaym.DocumentID;
     if ( not getEQ(wl_psdem) )
        err_msg =  "Документ не является клиентским требованием";
        SetParm( 1, err_msg );
        return 1;                  
     end;
    else
       ClearRecord(wl_pmdemand);
       wl_pmdemand.PaymentID=RsPaym.DocumentID;
       if( not getEQ(wl_pmdemand))
         err_msg = "Документ не является требованием банка";
         SetParm( 1, err_msg );
         return 1;
       end;
    end;
  end;

  if( type == ED105 )
    if ( (int(GetLastSymbols( RsPaym.PartPaymNumMain, PM_DOCNO_NONZERO_LEN )) == 0) and 
         (RsPaym.PartPaymDateMain == date(0,0,0)) )

        err_msg = "Неверные реквизиты исходного документа";
        SetParm( 1, err_msg );
        return 1;                  
    end;
  end;


  if ( type!=ED110 )
     if ( trim(RsPaym.PayerName)=="" )
        err_msg = "Не заполнено наименование плательщика" ;
        SetParm( 1, err_msg );
        return 1;                  
      end;
     if ( trim(RsPaym.ReceiverName)=="" )
       err_msg = "Не заполнено наименование получателя"; 
       SetParm( 1, err_msg );
       return 1;                  
     end;

     if(strlen(RsPaym.PayerName) > 160)
       err_msg = "Длина поля 'Наименование плательщика' превышает 160 символов"; 
       SetParm( 1, err_msg );
       return 1;                  
     end;
     if(strlen(RsPaym.ReceiverName) > 160)
       err_msg = "Длина поля 'Наименование получателя' превышает 160 символов"; 
       SetParm( 1, err_msg );
       return 1;                  
     end;

     if(type!=ED102)
       if(strlen(RsPaym.Ground) > 210)
         err_msg = "Длина поля 'Назначение платежа' превышает 210 символов"; 
         SetParm( 1, err_msg );
         return 1;                  
       end;
     end;
  end;
  
  if( type == ED110 )
     if((RsPaym.PaymentKind != "") AND (RsPaym.PaymentKind != "П")  AND (RsPaym.PaymentKind != "Т"))
        err_msg =  "Недопустимое значение вида платежа" ;
        SetParm( 1, err_msg );
     end;
  elif( type != ED101 )
     if( RsPaym.PaymentKind == "С" )
        err_msg = "Недопустимое значение вида платежа" ;
        SetParm( 1, err_msg );
     end;
  end;
end;

macro CheckPaym101( addr )
  var err_msg:string = "", err;
  err = CheckPaym(addr, err_msg, ED101);
  if(err)
    MemoryError(err, err_msg);
    return false;
  end;
  return true;
end;

macro CheckPaym102( addr )
  var err_msg:string = "", err;
  err = CheckPaym(addr, err_msg, ED102);
  if(err)
    MemoryError(err, err_msg);
    return false;
  end;

  return true;
end;

macro CheckPaym103( addr )
  var err_msg:string = "", err;
  err = CheckPaym(addr, err_msg, ED103);
  if(err)
    MemoryError(err, err_msg);
    return false;
  end;
  return true;
end;

macro CheckPaym104( addr )
  var err_msg:string = "", err;
  err = CheckPaym(addr, err_msg, ED104);
  if(err)
    MemoryError(err, err_msg);
    return false;
  end;
  return true;
end;

macro CheckPaym105( addr )
  var err_msg:string = "", err;
  err = CheckPaym(addr, err_msg, ED105);
  if(err)
    MemoryError(err, err_msg);
    return false;
  end;
  return true;
end;

macro CheckPaym110( addr )
  var err_msg:string = "", err;
  err = CheckPaym(addr, err_msg, ED110);
  if(err)
    MemoryError(err, err_msg);
    return false;
  end;
  return true;
end;

private macro CheckMes( addrMes, err_msg:@string, type ):integer

  
  
  var xml:object = ActiveX( "MSXML.DOMDocument" );
  var Строка;
  
  SetBuff( wlmes, addrMes );

  if( not СчитатьПоле( XMLField, Строка ) )
    return 1;
  end;

  if( not xml.loadXML(Строка) )
    err_msg = string( "Неверный формат сообщения по форме " + type );
    SetParm( 1, err_msg );
    return 1;
  end;

  if( not OnlyDigit(ReadOptinalAttribute(xml, "CBC", "DepartmentalInfo")) )
    err_msg = string( "Недопустимое значение атрибута 'CBC'" );
    SetParm( 1, err_msg );
    return 1;
  end;

  return 0;
end;

macro CheckMes101V2( addrMes )
  var err_msg:string = "", err;
  err = CheckMes(addrMes, err_msg, ED101);
  if(err)
    MemoryError(err, err_msg);
    return false;
  end;
  return true;
end;

macro CheckMes104V2( addrMes )
  var err_msg:string = "", err;
  err = CheckMes(addrMes, err_msg, ED104);
  if(err)
    MemoryError(err, err_msg);
    return false;
  end;
  return true;
end;

macro CheckMes105V2( addrMes )
  var err_msg:string = "", err;
  err = CheckMes(addrMes, err_msg, ED105);
  if(err)
    MemoryError(err, err_msg);
    return false;
  end;
  return true;
end;
