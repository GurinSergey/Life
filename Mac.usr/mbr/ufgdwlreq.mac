/****************************************************************************/
/*                   R-Style SoftWare Lab, RS-Bank 6.0                      */
/****************************************************************************/
/*                  Подсистема "Межбанковские расчеты"                      */
/* Генерация запросов/ответов по сообщениям УФЭБС                           */
/*                                                                          */
/*  Имя файла: ufgdwlreq.mac                                                */
/*  Создан:    29.10.12                                  Chukina T.         */
/****************************************************************************/

import "likepy.mac", FIInter, "ufgendoc.mac";

class TGenDocWlreqUFEBS(p_Kind : integer, p_FormName : string, p_IsPTCK_UIS : bool)
  var Kind     : integer = p_Kind,
      FormName : string  = p_FormName,
      IsPTCK_UIS : bool  = p_IsPTCK_UIS,
      
      /*!!! заполнять в ReadFields() */
      OriginatorUIS : string = "", // УИС для заполнения wlreq.Originator
      RecipientUIS  : string = "", // УИС для заполнения wlreq.Recipient
      EDDate_InitMes: string = "", // EDDate для заполнения wlreq.InitDateMes
      PartNo        : string = "", // Номер части 
      PartAggregateID:string = "", // Уникальный идентификатор совокупности частей

      /* заполнять в FillNarrativeDescriptionCopyFields() */
      Narrative  : string = "", // в проекте называется Description. Не путать
      Description: string = "",
      CopyFields : string = "";

  macro ReadFields() : bool /*!!! переопределять в конкретных наследниках */
    return TRUE;
  end;

  //-------------------------------------------------------------------
  //Все для вставки
  //-------------------------------------------------------------------

  macro FillOriginator() : bool
    if(OriginatorUIS)
      if(IsPTCK_UIS)
        FillPartyByUIS_PTCK_UIS( OriginatorUIS, @wlreq.OriginatorID,
                                                @wlreq.OriginatorCodeKind,
                                                @wlreq.OriginatorCode,
                                                @wlreq.OriginatorName );
      else
        FillPartyByUIS( OriginatorUIS, @wlreq.OriginatorID,
                                       @wlreq.OriginatorCodeKind,
                                       @wlreq.OriginatorCode,
                                       @wlreq.OriginatorName );
      end;
    end;

    return TRUE;
  end;

  macro FillRecipient() : bool
    if(RecipientUIS)
      if(IsPTCK_UIS)
        FillPartyByUIS_PTCK_UIS( RecipientUIS, @wlreq.RecipientID,
                                               @wlreq.RecipientCodeKind,
                                               @wlreq.RecipientCode,
                                               @wlreq.RecipientName );
      else
        FillPartyByUIS( RecipientUIS, @wlreq.RecipientID,
                                      @wlreq.RecipientCodeKind,
                                      @wlreq.RecipientCode,
                                      @wlreq.RecipientName );
      end;
    else
      wlreq.RecipientCode        = {MFO_Bank};
      wlreq.RecipientCodeKind    = PTCK_BIC;
      wlreq.RecipientID          = {OurBank};
      wlreq.RecipientName        = {Name_Bank};
    end;

    return TRUE;
  end;

  macro FillCorschemFIID() : bool
    wlreq.Corschem = -1; // ALLCORSCHEMNUMBER
    wlreq.FIID     = ALLFININSTR;
    return TRUE;
  end;

  private macro ToDate( strYYYYMMDD ) 
     return date( int(substr(strYYYYMMDD, 9, 2)), int(substr(strYYYYMMDD, 6, 2)), int(substr(strYYYYMMDD, 1, 4)) );
  end;

  macro FillInitMes() : bool
    if(EDDate_InitMes)
      wlreq.InitDateMes = ToDate(EDDate_InitMes);
    end;
    if(wlreq.RelatedRef)
      wlreq.InitFormIDMes = НайтиФормуСообщенияПоРеференсу(wlreq.RelatedRef, TRANSP_UFBS);
    end;
    return TRUE;
  end;

  macro FillQueries() : bool /*!!! переопределять в конкретных наследниках */
    return TRUE;
  end;

  macro FillNarrativeDescriptionCopyFields() : bool
    return TRUE;
  end;

  macro FillOthers() : bool
    return TRUE;
  end;

  macro OnAfterInsertWlreq() : bool
    return TRUE;
  end;

  // собственно вставка УО
  private macro InternalInsertWlreq() : bool
    if(Kind == MESKIND_REQUEST)
      if(not ВставитьЗапрос( wlreq, Narrative, Description, CopyFields ) )
        std.msg("Ошибка при вводе запроса");
        return FALSE;
      end;
    elif(Kind == MESKIND_ANSWER)
      if(not ВставитьОтвет( wlreq, Narrative, Description, CopyFields ) )
        std.msg("Ошибка при вводе ответа");
        return FALSE;
      end;
    else
      std.msg("Неверный вид учетного объекта");
      return FALSE;
    end;
    return TRUE;
  end;

  macro InsertWlreq() : bool
    ClearRecord(wlreq);    

    /* Заполнение буфера учетного объекта */
    wlreq.Trn           = wlmes.Trn;
    wlreq.RelatedRef    = wlmes.RelatedRef;
    wlreq.Direct        = "X"; // WLD_MES_IN
    wlreq.Kind          = Kind;

    if(PartAggregateID)
      wlreq.PartAggregateID = PartAggregateID;
    end;

    return 
    (
      FillOriginator() and
      FillRecipient()  and
      FillCorschemFIID() and
      FillInitMes() and
      FillQueries() and
      FillNarrativeDescriptionCopyFields() and
      FillOthers() and
      InternalInsertWlreq() and
      OnAfterInsertWlreq()
    );
  end;

  //-------------------------------------------------------------------
  //Все для обновления головной части
  //-------------------------------------------------------------------

  macro ReFillQueries(p_wlreq) : bool /*!!! переопределять в конкретных наследниках */
    return TRUE;
  end;

  macro AddFillNarrativeDescriptionCopyFields(p_wlreq) : bool
    return TRUE;
  end;

  macro ReFillHeadPart(p_wlreq) : bool
    // Пока ОбновитьОтвет обновляет только 
    // wlreq.Queries (перезаписывает) и
    // Narrative, Description, CopyFields (добавляет к уже имеющимся)
    return ( ReFillQueries(p_wlreq) and
             AddFillNarrativeDescriptionCopyFields(p_wlreq)
           );
  end;

  macro OnAfterUpdateHeadPart(p_wlreq) : bool
    return TRUE;
  end;

  macro UpdateHeadPart() : bool
    FILE wlreq2 ("wlreq.dbt") key 3;
    ClearRecord( wlreq2 );
    wlreq2.PartAggregateID = PartAggregateID;
    wlreq2.Direct = "X";

    if( GetEQ(wlreq2) )
      if( ReFillHeadPart(wlreq2) )
        if( not ОбновитьОтвет(wlreq2, Narrative, Description, CopyFields ) )
          std.msg("Ошибка при обновлении ответа");
          return FALSE;
        end;
      else
        return FALSE;
      end;
    else
      std.msg("Не найдена головная часть ответа");
      return FALSE;
    end;

    if(not OnAfterUpdateHeadPart(wlreq2) )
      return FALSE;
    end;

    copy(wlreq, wlreq2); // для возможного использования в OnAfterGenWlreq()

    return TRUE;
  end;

  //-------------------------------------------------------------------
  //Общий алгоритм обработки входящего сообщения
  //-------------------------------------------------------------------

  macro OnAfterGenWlreq() : bool
    return TRUE;
  end;  

  macro GenWlreq(addrMes) : bool
    var stat : bool = TRUE;
    SetBuff( wlmes, addrMes );
  
    PrintLog(2,"Генерация " + IfThenElse(Kind == MESKIND_ANSWER, "ответа", "запроса") +
               " по " + FormName);

    if(stat)
      stat = ReadFields();
    end;

    if(stat)
      if( (PartNo == "") or (int(PartNo) == 1) )
        stat = InsertWlreq();
      else
        stat = UpdateHeadPart();
      end;
    end;

    if(stat)
      stat = OnAfterGenWlreq();
    end;

    return stat;
  end;

end;
