/****************************************************************************/
/*                   R-Style SoftWare Lab, RS-Bank 5.1                      */
/****************************************************************************/
/*                  Подсистема "Межбанковские расчеты"                      */
/* Общие константы и вспомогательные функции для работы с УФЭБС             */
/*                                                                          */
/*  Имя файла: wluftool.mac                                                 */
/*  Создан:  06.10.04                                              BARS     */
/*  Изменен: Gurin S. C-14014 16.09.2012 для ED113 и ED114 РКЦ по умолчанию */
/*           Gurin S. C-14244 15.10.2012                                    */
/*           Gurin S. I-00273265-2 23.10.2012                               */ 
/*           Gurin S. I-00274863-2 25.10.2012                               */
/*           Gurin S. 21.12.2012 Hotfix HF2030_45_09_57                     */
/*           Gurin S. 15.07.2013 C-21515                                    */
/*           RR       22.10.2013 Hotfix HF2030_45_09_95                     */
/*           Dunaev A. C-23131 01.11.2013                                   */
/*           SDA адаптация для 31-й                                         */
/*           Gurin S. 24.12.2013 Адаптация 31                               */
/*           TAM      20.03.2014 R-344690                                   */
/*           DAI      21.03.2014 Hotfix HF2031_19_25_12                     */
/****************************************************************************/

import PTInter, FIInter, wldoc, oralib, likepy, "cb_sql.mac", "pmcaches.mac", "wltools.mac",
       "xmlmestools.mac"; //TAM 04.09.2014 HF_74
import "pm_tools.mac", "lib_compare.mac", lib_fg;;

/* Введите Ваши реквизиты */
const XMLField        = "xml";

const UFBSDocExtField = "DocExt";      /* Повторяющееся поле - документ выписки ED211 */
const NodeTransInfo   = "TransInfo";   /* Узел - документы выписки ED211 */
const NodeED211       = "ED211";       
const NodeEDRefID     = "EDRefID";

const NodeEDInfo      = "EDInfo";
const NodeED207       = "ED207";       

const NodeEDCopy      = "EDCopy";
const NodeED221       = "ED221";       

const UFBSDocInfoField= "DocInfo";
const NodeCreditInfo  = "CreditInfo";
const NodeED217       = "ED217";

const UFBSRepConStrField= "RepConStr";
const NodeReportCon     = "ReportCont";
const NodeReportContent = "ReportContent";
const NodeED219         = "ED219";       

const UFBSDescrStrField = "DescrStr";
const NodeDescrCorr     = "DescrCorr";
const NodeCorrectionDescription = "CorrectionDescription";
const NodeED330         = "ED330";

const NodeEDRequisiteList = "EDRequisiteList";
const NodeEDRqstList = "EDRqstList";
const NodeED241       = "ED241";    
const NodePacketDate  = "PacketDate";

const NodeED215       = "ED215";    
//HF_81 24.06.2013 TAM
const NodeED108       = "ED108";
const UFBSCreditTransferTransField = "CreditTransferTrans";
const NodeCreditTransferTransactionInfo = "CreditTransferTransactionInfo";
const NodeCreditTransferTrans = "CreditTransferTrans";

// "сложные" формы
const NodeED374   = "ED374";    
const NodeED244   = "ED244";
const NodeED332   = "ED332";
const NodeED379   = "ED379";    
const NodeED381   = "ED381";
const NodeED375   = "ED375";

macro ToDate_( strYYYYMMDD ) //TAM 01.08.12
  return date( int(substr(strYYYYMMDD, 9, 2)), int(substr(strYYYYMMDD, 6, 2)), int(substr(strYYYYMMDD, 1, 4)) );
end;

private var PtIdCache:TPartyIdsByCode = TPartyIdsByCode();

/* По уникальному составителю документа (УИС) найти ID субъекта */
macro ToRespID( uis:string ):integer
  var ID:integer, bic_str:string, val;
  
  /* Формируем БИК ЦБ */
  bic_str = "04" + substr( uis, 1, 7);
  var stat:bool = PtIdCache.Get( PtIdCache.Key( PTCK_BIC, bic_str ), @ID );
  if( not stat )
  /*  RunError( "Не найден субъект по БИК'у " + bic_str );*/
  bic_str = {MFO_Bank};
  ID = {OurBank};
  end;
  
  /* Сыылка на "наш банк" */
  if( ID == 0 )
    ID = {OurBank};
  end;
  
  /* Возвращаем если нужно БИК ЦБ */
  if( GetParm( 1, val ) )
    SetParm( 1, bic_str );
  end;

  return ID;
end;  

/* Поиск сеанса связи по UID сеанса */
macro WldFindSessByUID( TpID:integer, SessDate:date, SessUID:string ):bool
  var select:string;
  var params:TArray;
  var rs:object;
  var result:bool = false;

  select = "select t_SessionID from dwlsess_dbt where t_TpID  = :TpID" +
           " and t_SysDate = :SessDate and t_SessUID = :SessUID and t_Direct  = chr(0)";
  
  params = makeArray( SQLParam( "TpID", TRANSP_UFBS),
                      SQLParam( "SessDate", SessDate),
                      SQLParam( "SUID",  SessUID) 
                    );

  rs = execSQLselect( select, params, true ); 
  if( rs.MoveNext() )
    result = true;
  end;

  return result;
end;

macro OnlyDigit( val:string )
  var count, len = strlen(val), symb;
  
  count = 1;
  while( count <= len )
    symb = substr(val, count, 1);
    if( (symb >= "0") and (symb <= "9") )
      count = count + 1;
    else
      return false;
    end;
  end;
  return true;
end;

macro YYMMDD( dt ):string
  var day, mon, year, str;
  DateSplit(dt, day, mon, year );
  str = string(substr(string(year),3):2, mon:2, day:2);
  str = StrSubst ( str, " ", "0" );
  return str;
end;

class EDNoDateAuthor
  var EDNo = ""; //номер сообщения
  var EDDate = date(0,0,0);
  var EDAuthor = ""; //автор сообщения (с 000 на конце)

  
  //Формат референса: YYMMDDAAAAAAA000NNNNNN, где:
  //YYMMDD - дата сообщения
  //AAAAAAAA  - автор сообщения
  //NNNNNN - номер сообщения 

  //Функция разбирает референс (по вышепривeдённому формату) и инициализирует EDNo, EDDate, EDAuthor
  macro ConstructByTrn(Trn)
    EDNo = substr(Trn, 17);
    EDDate = Date();
    //Seleznev
    //EDDate = date( (substr(Trn,5,2))+"."+(substr(Trn,3,2))+"."+(substr(Trn,1,2)) );
    EDAuthor = substr(Trn, 7, 10);
  end;

  //Ищет сообщение связанного платежа и инициализирует EDNo, EDDate, EDAuthor по сообщению связанного платежа
  //
  macro ConstructByInitialPmMes_mes(PurposePaymentMesID):bool
    var rs:object = NULL;
    var select:string = "";
    var params:TArray = NULL;
    
    select = " SELECT i_wlmes.t_Trn"
             " FROM"
             "   dwlmes_dbt p_wlmes,"       //purpose
             "   dwlmeslnk_dbt p_wlmeslnk," //purpose
             "   dwlpm_dbt p_wlpm,"         //purpose
             "   dpmlink_dbt pmlink,"
             "   dwlpm_dbt i_wlpm,"         //initial
             "   dwlmeslnk_dbt i_wlmeslnk," //initial
             "   dwlmes_dbt i_wlmes"        //initial
             " WHERE"
             "   p_wlmes.t_MesID = ? AND "
             "   p_wlmeslnk.t_MesID = p_wlmes.t_MesID AND" 
             "   p_wlmeslnk.t_ObjKind = ? AND"
             "   p_wlmeslnk.t_Direct = chr(0) AND"
             "   p_wlpm.t_WlPmID = p_wlmeslnk.ObjID AND"
             "   pmlink.t_PurposePayment = p_wlpm.t_PaymentID AND"
             "   pmlink.t_LinkKind in (?,?,?) AND" 
             "   i_wlpm.t_PaymentID = pmlink.t_InitialPayment AND"
             "   i_wlpm.t_Direct = 'X' AND"
             "   i_wlpm.t_WlPmNum = 0 AND"
             "   i_wlmeslnk.t_ObjID = i_wlpm.t_WlPmID AND"
             "   i_wlmeslnk.t_ObjKind = ? AND"
             "   i_wlmeslnk.t_Direct = 'X' AND"
             "   i_wlmes.t_MesID = i_wlmeslnk.t_MesID"
             ;
    params = makeArray( SQLParam("", PurposePaymentMesID),
                        SQLParam("", OBJTYPE_PAYMENT),
                        SQLParam("", PMLINK_KIND_RETREDIR), SQLParam("", PMLINK_KIND_CLOSACC), SQLParam("", PMLINK_KIND_PROCUNKN),
                        SQLParam("", OBJTYPE_PAYMENT)
                      );
    rs = execSQLselect( select, params, FALSE );
    if ( rs.moveNext() )
      ConstructByTrn(rs.value(0));
      return true;
    else
      return false;
    end;
  end;

  //Ищет сообщение связанного платежа и инициализирует EDNo, EDDate, EDAuthor по сообщению связанного платежа
  macro ConstructByInitialPmMes_pm(PurposePaymentID):bool
    var rs:object = NULL;
    var select:string = "";
    var params:TArray = NULL;
    
    select = " SELECT i_wlmes.t_Trn"
             " FROM"
             "   dpmlink_dbt pmlink,"
             "   dwlpm_dbt i_wlpm,"         //initial
             "   dwlmeslnk_dbt i_wlmeslnk," //initial
             "   dwlmes_dbt i_wlmes,"       //initial
             "   dwltpshem_dbt wltpshem"
             " WHERE"
             "   pmlink.t_PurposePayment = ? AND"
             "   pmlink.t_LinkKind in (?,?,?) AND" 
             "   i_wlpm.t_PaymentID = pmlink.t_InitialPayment AND"
             "   i_wlpm.t_Direct = 'X' AND"
             "   i_wlpm.t_WlPmNum = 0 AND"
             "   i_wlmeslnk.t_ObjID = i_wlpm.t_WlPmID AND"
             "   i_wlmeslnk.t_ObjKind = ? AND"
             "   i_wlmeslnk.t_Direct = 'X' AND"
             "   i_wlmes.t_MesID = i_wlmeslnk.t_MesID AND"
             "   i_wlmes.t_TpSchemID = wltpshem.t_TpShemID AND"
             "   wltpshem.t_TpID = ?"
             ;
    params = makeArray( SQLParam("", PurposePaymentID),
                        SQLParam("", PMLINK_KIND_RETREDIR), SQLParam("", PMLINK_KIND_CLOSACC), SQLParam("", PMLINK_KIND_PROCUNKN),
                        SQLParam("", OBJTYPE_PAYMENT),
                        SQLParam("", TRANSP_UFBS)
                      );
    rs = execSQLselect( select, params, FALSE );
    if ( rs.moveNext() )
      ConstructByTrn(rs.value(0));
      return true;
    else
      return false;
    end;
  end;


  //Получает референс в нужном формате из EDNo, EDDate, EDAuthor 
  macro GetTrn():string
    return YYMMDD(EDDate) + EDAuthor + EDNo;
  end;

end;

//Gurin S. C-14244
macro compareName(name1,name2)

     const OOO = "ОБЩЕСТВО С ОГРАНИЧЕННОЙ ОТВЕТСТВЕННОСТЬЮ";
     const IP = "ИНДИВИДУАЛЬНЫЙ ПРЕДПРИНИМАТЕЛЬ";
     const ZAO = "ЗАКРЫТОЕ АКЦИОНЕРНОЕ ОБЩЕСТВО";
     const OAO = "ОТКРЫТОЕ АКЦИОНЕРНОЕ ОБЩЕСТВО";
     const NPP = "НАУЧНО-ПРОИЗВОДСТВЕННОЕ ПРЕДПРИЯТИЕ";
     const RTPK = "РОССИЙСКАЯ ТОРГОВО-ПРОМЫШЛЕННАЯ КОМПАНИЯ";
     const UK = "УПРАВЛЯЮЩАЯ КОМПАНИЯ";
     
     name1 = strupr(name1); 
     name1 = strsubst(name1,"ООО",OOO);
     name1 = strsubst(name1,"ИП",IP);
     name1 = strsubst(name1,"ЗАО",ZAO);
     name1 = strsubst(name1,"ОАО",OAO);
     name1 = strsubst(name1,"НПП",NPP);
     name1 = strsubst(name1,"РТПК",RTPK);
     name1 = strsubst(name1,"УК",UK);
     name1 = strsubst(name1,"\""," ");
     name1 = strsubst(name1,"  "," ");
     name1 = strsubst(name1," - ","-");
     name1 = strsubst(name1,"№","N");
     
     name2 = strupr(name2); 
     name2 = strsubst(name2,"ООО",OOO);
     name2 = strsubst(name2,"ИП",IP);
     name2 = strsubst(name2,"ЗАО",ZAO);
     name2 = strsubst(name2,"ОАО",OAO);
     name2 = strsubst(name2,"НПП",NPP);
     name2 = strsubst(name2,"РТПК",RTPK);
     name2 = strsubst(name2,"УК",UK);
     name2 = strsubst(name2,"\""," ");
     name2 = strsubst(name2,"  "," ");
     name2 = strsubst(name2," - ","-");
     name2 = strsubst(name2,"№","N");
     return (name1 == name2);

end;

//Gurin S. C-14244
private MACRO AccountExists(acc)
  var rs, cmd, str;
  str = "SELECT t_account " +
        "  FROM daccount_dbt " +
        " WHERE t_account = :acc";
  
  cmd = RsdCommand (str);
    cmd.AddParam ("acc", RSDBP_IN, acc);     
    cmd.execute();
  rs = RsdRecordset(cmd);
  if(rs and rs.movenext())
     return true;
  else
     return false;
  end;
END;

//Gurin S. C-14244
private MACRO PayerNameBD(acc, PayerName)
  var rs, cmd, str, err;
  str = "SELECT dp.t_name " +
        "  FROM daccount_dbt da, dparty_dbt dp " +
        " WHERE da.t_account = :acc " + 
        " and da.t_client = dp.t_partyid";

  cmd = RsdCommand (str);
    cmd.AddParam ("acc", RSDBP_IN, acc);    
    cmd.execute();
  rs = RsdRecordset(cmd);
  if(rs and rs.movenext())
     if (not compareName(rs.value(0),PayerName))
        return err = "Нет соответствия наименования плательщика в базе и в сообщении. Наименование плательщика в базе '" + rs.value(0) + "', а в сообщении "+ PayerName +"; "
     else
        return err = ""; 
     end;
  else
     return err = "Нет соответствия счета плательщика и наименования плательщика в базе; ";
  end;
END;
// Получить название и значение поля из строки вида "Атрибут: Значение"
// Если задан NamesToSearch, то Атрибут проверяется на вхождение в NamesToSearch
macro getFieldFromQueriesLine(QLine : string, NamesToSearch : TArray): TMesField
  macro IsInSearchArray(s:string, SearchArray:TArray):bool
    for(var i, 0, SearchArray.size() - 1)
      if(s == SearchArray(i))
        return true;
      end;
    end;
    return false;
  end;

  var s = Trim( SubStr(QLine, 1, index(QLine, ":")-1) );
  if( s and ( (NamesToSearch == null) or IsInSearchArray(s, NamesToSearch) ) )
    return TMesField(s, Trim( SubStr(QLine, index(QLine, ":")+1) ) );
  end;
  return NULL;
end;
//Gurin S. C-14244, Dunav A. C-23131
private MACRO ConformData(PayerAcc, PayerName, PayerINN)
  var rs, cmd, str, err;
  debugbreak;
  str = " SELECT   da.t_account, "
        "          dp.t_name, " +
        "          REGEXP_SUBSTR (DO.T_CODE, '[0-9]{1,}') inn " +
        /*
        "          CASE " +
        "             WHEN (instr (do.t_code, '/') > 0) " +
        "             THEN " +
        "                SUBSTR (do.t_code, 1, instr (do.t_code, '/') - 1) " +
        "             ELSE " +
        "                do.t_code " +
        "          END inn " +
        */
        "   FROM   daccount_dbt da, dparty_dbt dp, dobjcode_dbt do " +
        "  WHERE       da.t_account =:acc " +
        "          AND da.t_client = dp.t_partyid " +
        "          AND do.t_objectid = da.t_client " +
        "          AND do.t_objecttype = 3 " +
        "          AND do.t_state = 0 " +
        "          AND do.t_codekind = 16";
  cmd = RsdCommand (str);
  cmd.AddParam ("acc", RSDBP_IN, PayerAcc);   
  cmd.execute();

  rs = RsdRecordset(cmd);
  err = "Нет соответствия счета и ИНН плательщика в базе; ";
  if (rs)
    while (rs.movenext() and (err != ""))
      if (rs.value(2)==PayerINN)
        err = "";
      end;
    end;
  end;
  return err;
  /*
  if(rs and rs.movenext())
     if (compareName(rs.value(1),PayerName) and (rs.value(2)==PayerINN))
        return err = "";
     else
        return err = "Нет соответствия счета и ИНН плательщика в базе; ";
     end;
  else
     return err = "Нет соответствия счета и ИНН плательщика в базе; ";
  end;
  */
end;

//Gurin S. C-14244
private MACRO FindFormID(trn)
 var rs, cmd, str;
  str = " SELECT   t_FormID " +
        " FROM   dwlmesrls_dbt dwr " +
        " WHERE   t_RlsFormID = " +
        "             (SELECT   t_RlsFormID " +
        "                FROM   dwlmes_dbt " +
        "               WHERE   t_Direct = 'X' AND t_Trn = :trn) ";

  cmd = RsdCommand (str);
  cmd.AddParam ("trn", RSDBP_IN, trn);    
  cmd.execute();
  rs = RsdRecordset(cmd);
  if(rs and rs.movenext())
     return rs.value(0);
  else
     return "";
  end;
end;

//TAM 18.11.2013 HF _96
// Найти в Queries подстроку AttrName и вернуть значение после AttrName до конца строки
macro getFldValFromQueries(Queries : string, AttrName) : string
  var val = ""; // значение атрибута

  var ind1 = index(Queries, AttrName);
  if(ind1)
    ind1 = ind1 + StrLen(AttrName); 
    var ind2 = index(Queries, "\n", ind1);
    val = SubStr(Queries, ind1, IfThenElse(ind2, ind2 - ind1, null));
    val = Trim(val);
  end;

  return val;
end;

macro GetRelatedRefFromWlreq(wlreq, RefLabel : string, ErrMsg : string) : string
  var ref_str = wlreq.RelatedRef;

  if( (not ref_str) and RefLabel )
    ref_str = getFldValFromQueries(wlreq.Queries, RefLabel + ":");
  end;

  if( (not ref_str) and ErrMsg )
    RunError(ErrMsg, TRsbError(null, 0, ErrMsg));
  end;

  return ref_str;
end;


//Gurin S. C-14244
private MACRO FillAnswerForMessAboutReturn(xml, err, wlmes)
  var TpID, TpSchemID, RlsFormID;
  var stat = 0;
  record wlreq("wlreq");
  record party("party.dbt");
  ClearRecord(wlreq);
  wlreq.RelatedRef = wlmes.trn; //Gurin S. N. 25.10.2012 I-00274863-2
  wlreq.Direct = ""; // WLD_MES_OUT
  wlreq.Kind = MESKIND_ANSWER;
  var PartyID = -1, PartyName = "";
  //GetDprtPartyIDandName(Payment.StartDepartment, @PartyID, @PartyName);//?
  
  wlreq.OriginatorID = {OurBank};//PartyID;
  wlreq.OriginatorCodeKind = PTCK_BIC;
  wlreq.OriginatorCode = ПолучитьКодСубъекта(wlreq.OriginatorID, wlreq.OriginatorCodeKind);
  if( ПолучитьСубъекта(wlreq.OriginatorID, party) == 0 )
     wlreq.OriginatorName = party.Name;
  else
     wlreq.OriginatorName = "";
  end;
  
  wlreq.RecipientCode = ReadAttribute(xml, "BIC", "Payee/Bank");//ReceiverBankCode;
  wlreq.RecipientCodeKind = 3; //ReceiverBankCodeKind; 
  wlreq.RecipientID = ПолучитьКодСубъекта(wlreq.RecipientCode, wlreq.RecipientCodeKind);//ReceiverBankID; //
  wlreq.RecipientName = ReadNodeText(xml, "Payee/Name"); //ReceiverBankName;
  //Gurin S. 05.12.2013 R-293346-2 (ED274 позиционируем на УФЭБС)
  TpID = 9;        //УФЭБС
  TpSchemID = 56;
  RlsFormID = 363; //Сообщение ED274
  
  wlreq.InitFormIDMes = FindFormID (wlmes.trn); 
  wlreq.InitDateMes = ToDate_(ReadOptinalAttribute(xml, "EDDate"));
  
  wlreq.Corschem = 1;
  wlreq.FIID = 0;
  wlreq.Queries = "InfoCode:2";
  var Narrative: string = err;
  var err_ = CreateQuery(wlreq, Narrative, "", RlsFormID, TpSchemID, false, null, null, TpID),
            msg = "";
     if (err_ != 0)
         var cmd = RSDCommand ("select T_CONTENTS  from dbank_msg where T_NUMBER = :num");
             cmd.addParam ("num", RSDBP_IN, err_);
             var rs = RSDRecordset(cmd);
                 if (rs and rs.movenext())
                    msgboxEx(rs.value("T_CONTENTS"),0);
                 end;
     end;
   /*if( err_ == 0 )         
     if( not IsOprMultiExec() )
       msgboxEx("Сгенерировано ED274",0)      
     else
       //runerror("Сформированно ED 274");
       std.msg ("Сформированно ED 274");
     end;
   else
     if( not IsOprMultiExec() )
        //MemoryError( err_ );                
        msg = "Произошла ошибка создания уведомления о возврате (аннулировании) " +
              "документа: " + GetErrMsg();            
        msgbox(msg);
     end;
   end;*/   
//return stat;
return err_;
end;

MACRO UpdState(id)
var sql, cmd, rs;
sql = " BEGIN " +
      "  UPDATE   dwlmes_dbt " +
      "     SET   t_state = 60 " +
      "   WHERE   t_mesid =" + id + "; " +

      " INSERT INTO dwlhistor_dbt (T_OBJID, " +
      "                        T_OBJKIND, " +
      "                        T_STATE, " +
      "                        T_BANKDATE, " +
      "                        T_SYSDATE, " +
      "                        T_SYSTIME, " +
      "                        T_USERID) " +
      " VALUES   (" + id + ", " +
      "          502, " +
      "          60, " +
      "          rsbsessiondata.curdate,"  +
      "'" +      Date + "',"  +
      "          sysdate, "  +
      "          rsbsessiondata.oper);" +
      " END;";
cmd =  RsdCommand (sql);
cmd.execute;

end;

//Gurin S. C-14244
MACRO Check_113_114(xml:object, wlmes)
  debugbreak;
  var PayerAcc, PayerINN, PayerName, err = "",val;
  debugbreak;
  //#1 Проверяем валюту счета плательщика
  PayerAcc = ReadOptinalAttribute(xml, "PersonalAcc", "Payer");
  //Gurin S. 15.07.2013 C-21515
  if (PayerAcc == "")
      return true;    
  end;
  if (substr(PayerAcc,6,3)!="810")
     err = err + "Валюта счета плательщика " + PayerAcc + " не 810; ";//Генерируем ED274
  end;
  //#2 Проверяем счет плательщика
  if (not(AccountExists(PayerAcc)))
     err = err + "Счет плательщика " + PayerAcc  + " не существует в базе; ";//Генерируем ED274 
  end;
  //#3 Проверяем ИНН плательщика
  PayerINN = ReadOptinalAttribute(xml, "INN", "Payer");
  if (CheckINN(PayerINN)!=0)
     err = err + "Ошибка в ИНН платещика "+ PayerINN + "; ";//Генерируем ED274
  end;
  PayerName = ReadNodeText(xml, "Payer/Name");
  /* Gurin 
  //#4 Проверяем наименование плательщика
  val = PayerNameBD(PayerAcc, PayerName);
  if(val!="")
     err = err + val;
  end;
  */
  //Dunaev A. C-23131
  //#4 Проверяем соответствие счета и ИНН
  val = ConformData(PayerAcc, PayerName, PayerINN);
  if (val!= "");
     err = err + val;
  end; 
  if (err!="")
     if(FillAnswerForMessAboutReturn(xml, err, wlmes) == 0) 
       // не сгенерирован ED274
       return false;         
     end;
  end;
  return true;
end;

//Gurin S. 21.12.2012 Hotfix HF2030_45_09_57
macro PaytKindToPaymentKind(PaytKind : integer, FormName : string) : string
  var PaymentKind : string = "";
  //HF_82 TAM 27.06.2013
  if ( PaytKind==0 )
    PaymentKind = "Н";
  elif( PaytKind == 1 )
    PaymentKind = "Э";
  elif( PaytKind == 2 )
    PaymentKind = "П";
  elif( PaytKind == 3 )
    PaymentKind = "Т";
  elif( (PaytKind == 4) and (FormName != "ED111") )
    PaymentKind = "С";
  end;

  return PaymentKind;
end;

macro FillPayment_113_114(xml:object, wlmes, Payment:object)
  debugbreak;
  var tmpstr = "";
  Payment.Number = ReadAttribute(xml,"AccDocNo", "AccDoc");
  Payment.Reference = wlmes.Trn;
  Payment.Date = ToDate_(ReadAttribute(xml,"AccDocDate", "AccDoc"));
  Payment.ValueDate = wlmes.OutsideAbonentDate;

  var PaytKind : integer = int(ReadOptinalAttribute(xml,"PaytKind")); //HF_81 24.06.2013 TAM
  Payment.PaymentKind = PaytKindToPaymentKind(PaytKind);
 
  Payment.BaseFIID = NATCUR;
  Payment.BaseAmount = moneyL( ReadAttribute(xml,"Sum") )/100;

  // Payer
  var ClientINN = ReadOptinalAttribute(xml, "INN", "Payer");
  tmpstr = ReadOptinalAttribute(xml, "KPP", "Payer");
  if( tmpstr )
    ClientINN = ClientINN + "/" + tmpstr;
  end;   
  var ClientName = ReadNodeText(xml, "Payer/Name");  
  Payment.SetPayerPI(
          PAYMENTS_GROUP_INTERNAL,
          -1,
          PTCK_BIC,
          ReadAttribute(xml, "BIC", "Payer/Bank"),
          "",
          ReadOptinalAttribute(xml, "CorrespAcc", "Payer/Bank"),
          NATCUR,
          1, /*CHAPT1*/
          ReadOptinalAttribute(xml, "PersonalAcc", "Payer"),
          null,
          ClientName,
          ClientINN
          );

  // Receiver
  ClientINN = ReadOptinalAttribute(xml, "INN", "Payee");
  tmpstr = ReadOptinalAttribute(xml, "KPP", "Payee");
  if( tmpstr )
    ClientINN = ClientINN + "/" + tmpstr;
  end; 
  ClientName = ReadNodeText(xml, "Payee/Name");  
  // Gurin S. C-14014 16.09.2012 РКЦ по умолчанию
  Payment.SetReceiverPI(
          PAYMENTS_GROUP_EXTERNAL,
          -1,
          PTCK_BIC,
          ReadAttribute(xml, "BIC", "Payee/Bank"),
          "",
          ReadOptinalAttribute(xml, "CorrespAcc", "Payee/Bank"),
          NATCUR,
          1, /*CHAPT1*/
          ReadOptinalAttribute(xml, "PersonalAcc", "Payee"),
          null,
          ClientName,
          ClientINN,
          null,
          null,
          1, /*РКЦ*/
          PM_CORRPOS_TYPE_USER
          );

  Payment.Ground = ReadNodeText(xml, "Purpose");
  //Payment.PayerIsSender = "X"; /*??? read-only*/
  Payment.Priority = ReadAttribute(xml, "Priority");
  Payment.UIN = ReadOptinalAttribute(xml,"PaymentID"); //DAI Hotfix HF2031_19_25_12

  tmpstr = ReadOptinalAttribute(xml, "ReceiptDateCollectBank");
  if(tmpstr)  
    Payment.ReceiverBankMarkDate = ToDate_(tmpstr);
  end;
  tmpstr = ReadOptinalAttribute(xml, "ReceiptDate");
  if(tmpstr)  
    Payment.PayerBankEnterDate = ToDate_(tmpstr);
  end;
  tmpstr = ReadOptinalAttribute(xml, "FileDate");
  if(tmpstr)  
    Payment.I2PlaceDate = ToDate_(tmpstr);
  end;
  tmpstr = ReadOptinalAttribute(xml, "ChargeOffDate");
  if(tmpstr)  
    Payment.PayerChargeOffDate = ToDate_(tmpstr);
  end;

  //TAM 26.03.13 HF_71
  Payment.Origin = PAYMENT_OR_ELECTR;
end;

macro GetRefByEDNoDateAuthor(xml : object, path : string) : string
  var ed_nda : EDNoDateAuthor = EDNoDateAuthor();
  ed_nda.EDNo     = ReadAttribute(xml, "EDNo", path);
  ed_nda.EDDate   = ToDate_(ReadAttribute(xml, "EDDate", path));
  ed_nda.EDAuthor = ReadAttribute(xml, "EDAuthor", path);
  return ed_nda.GetTrn();
end;

// Получить имя формы УФЭБС по значению wlmes.RlsFormID
macro GetUFBSMesFormName(RlsFormID : integer)
  var strSQL : string = "select frm.t_Name " +
                        "  from dwlmesfrm_dbt frm, dwlmesrls_dbt rls " +
                        " where rls.t_RlsFormID = :RlsFormID " + 
                        "   and frm.t_FormID = rls.t_FormID ";

  var rs = execSQLselect( strSQL, makeArray( SQLParam("RlsFormID", RlsFormID) ) );

  if ( rs and rs.MoveNext() )
    return substr( rs.value(0), 1, 5 ); // первые пять символов wlmesfrm.Name
  end;

  return "";
end;

macro GetPaytCondition( AcceptTerm: integer )
  if (AcceptTerm != 0)
    return 1;
  else
    return 2;
  end;
end;

macro GetAcceptTermByPaytCond(PaytCond : string) : integer
  if(PaytCond == "1")
    return PM_DEMAND_TERM_PREACCEPT;
  else
    return PM_DEMAND_TERM_ACCEPT;
  end;
end;

// sumstrUFBS - Сумма в копейках
macro StrToMoneyUFBS(sumstrUFBS : string) : moneyL
  return moneyL(sumstrUFBS) / 100;
end;
