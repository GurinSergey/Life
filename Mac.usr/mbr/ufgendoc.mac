/****************************************************************************/
/*                   R-Style SoftWare Lab, RS-Bank 5.1                      */
/****************************************************************************/
/*                  Подсистема "Межбанковские расчеты"                      */
/* Константы и вспомогательные функции для генерации документов по          */
/* сообщениям УФЭБС                                                         */
/*                                                                          */
/*  Имя файла: ufgendoc.mac                                                 */
/*  Создан:  07.10.04                                               BARS    */
/****************************************************************************/
import "wldoc.mac", "wluftool.mac", "wlgendoc.mac", "wlfindpm.mac", FIInter, RMInter, "WLTOOLS.mac";

const Свой_МФО     = {MFO_Bank};
const Свой_Корсчет = {CORAC_Bank};
const Свой_Регион  = substr( Свой_МФО, 3, 2 ); /* для России так */

macro RectoreNull( strI, len )
   var str = strI;
   if ( str!="" )
      while( strlen(str)<len )
         str = "0" + str;
      end;
   end;
   return str;
end;


macro UF_GetDKFlag( Num )
   var retChar = "";
   if(Num == "1")
       retChar = WL_DEBET;
   end;
   if(Num == "2")
       retChar = WL_CREDIT;
   end;
   return retChar;
end;


macro UF_getCancelForConf( StatusCode, ver_st )
   var Stat = KVIT_ERROR;
   if((StatusCode == "00") or 
      (StatusCode == "06") or 
      (StatusCode == "09")              
     )
       Stat = KVIT_NORMAL;
   end;
   if( (StatusCode == "02") or 
       ((ver_st == 1) and (StatusCode == "03")) or
       (StatusCode == "04") or
       (StatusCode == "20") or
       (StatusCode == "21") or
       (StatusCode == "31")
     )
       Stat = KVIT_CANCEL;
   end;
   if( (StatusCode == "08") )
       Stat = KVIT_CALL_BACK;
   end;
   return Stat;
end;

macro ОшибкаЛогическогоКонтроляСеанса( SessID, ErrCode,ErrDescription )
  var oldKey = KeyNum( f_wlmes, 1 ), continue0, IsGood = true;
  f_wlmes.SessionID = SessID;
  continue0 = getGE(f_wlmes);
  while( continue0 and (f_wlmes.SessionID==SessID) )
      if ( not ОшибкаЛогическогоКонтроляСообщения(f_wlmes.MesID, ErrCode,ErrDescription) )
         continue0 = false;
         IsGood = false;
         MsgBox( string("Ошибка при помещении отбракованные сообщения ", f_wlmes.TRN) );
      else
         continue0 =  Next(f_wlmes);
      end;
  end;

  KeyNum( f_wlmes, oldKey );
  return IsGood;
end;

/*Установить дебет-кредит платежа, дату и возможно сумму */
macro getDKFlagByPM(wlmes, wlconf, УстановитьСумму) : bool
  var PaymDKFlag, PaymentDirect;
  var resultFindPm = true;
  if(ValType(УстановитьСумму) == V_UNDEF)
     УстановитьСумму == false;
  end;
  /* Ищем платеж, на который пришло подтверждение */
  if ( not WldFindPmByTRN( true, wlconf.RelatedRef, wlmes.OutsideAbonentID, NULL, DIRECT_PAYM_OUT, NULL ,wlconf.DateValue))     
     if ( not WldFindPmByTRN( true, wlconf.RelatedRef, wlmes.OutsideAbonentID, NULL, DIRECT_PAYM_IN, wlconf.DateValue))
        /* Если ничего не нашли - подтверждение считаем кредитовым */
        wlconf.DKFlag       = WL_CREDIT;
        resultFindPm = false;
     else
        PaymentDirect = DIRECT_PAYM_IN;
        /*IsCreditPaymBuff -> IsCreditPaym при переводе на RsbPayment - c дебетом тоже*/
        if ( IsCreditPaymBuff(wlpmpropdeb,wlpmpropcred) )
           PaymDKFlag = WL_CREDIT;
        else
           PaymDKFlag = WL_DEBET;
        end;
        
        wlconf.DateValue = wlpmpaym.ValueDate;
        if(УстановитьСумму)
           wlconf.Sum = wlpmpaym.Amount;
        end;
     end;
  else
     PaymentDirect = DIRECT_PAYM_OUT;
     if ( IsCreditPaymBuff(wlpmpropdeb,wlpmpropcred) )
        PaymDKFlag = WL_CREDIT;
     else
        PaymDKFlag = WL_DEBET;
     end;
     wlconf.DateValue = wlpmpaym.ValueDate;
     if(УстановитьСумму)
        wlconf.Sum = wlpmpaym.Amount;
     end;
  end;

  if ( valtype(PaymentDirect)!=V_UNDEF )
     if ( PaymentDirect==DIRECT_PAYM_OUT )
         if ( PaymDKFlag==WL_CREDIT )
             wlconf.DKFlag  = WL_DEBET;
         else
             wlconf.DKFlag  = WL_CREDIT;
         end;
     else
         if ( PaymDKFlag==WL_CREDIT )
             wlconf.DKFlag  = WL_CREDIT;
         else
             wlconf.DKFlag  = WL_DEBET;
         end;
     end;
  end;

  return resultFindPm;
end;

/*Вынес функциональность генерации квитанции результатов контроля ЭПД
  в общий файл, т.к. некоторые сообщения способны отрабатывать как квитанции (ED205), GVR*/
macro IsUFBS(mes)
   ClearRecord(f_wltpshem);
   f_wltpshem.TpShemID = wlmes.TpSchemID;
   if ( GetEQ(f_wltpshem) )
      if ( f_wltpshem.TpID==TRANSP_UFBS )
         return true;
      end;
   end;
   return false;
end;

macro ОбработатьКакED201(RefDate:date, RefTRN:string, CtrlCode:integer)     
   var continue0, IsExists, ErrDescription:string, ErrCode;
   var rs:object;
   var select:string;
   var params:TArray;

   /* Сначала ищем сеанс */
   IsExists = false;

   if(not GetElementAndNoteLLVALUES(OBJTYPE_WLRESCODE_UFBS, CtrlCode, ErrCode, ErrDescription))
     ErrCode = 0;
     ErrDescription = CtrlCode;
   end;

   select = "select t_SessionID from dwlsess_dbt sess, dwltpfrmt_dbt tpfrmt where sess.t_TpID=:TRANSP_UFBS"+ 
                                " and sess.t_SessUID=:RefTRN"+
                                " and sess.t_TpFrmtID = tpfrmt.t_TpFrmtID"+
                                " and tpfrmt.t_Department = :OperD"+
                                " and sess.t_Direct=chr(0)";
   params = makeArray( SQLParam("TRANSP_UFBS", TRANSP_UFBS),
                        SQLParam("RefTRN", RefTRN),
                        SQLParam("OperD", {OperDprt}));
   rs = execSQLselect( select, params, FALSE );
   if ( rs.MoveNext() )
      if ( not ОшибкаЛогическогоКонтроляСеанса(rs.value(0),ErrCode,ErrDescription ))
         println( string( "Не удалось поместить в отбракованные сообщения по сеансу ID = ", rs.value(0)) );
         return false;
      end;
      IsExists = true;
   end;

   if ( not IsExists )
      select = "select mes.t_MesID from dwlmes_dbt mes, dwltpshem_dbt tpshem where mes.t_Direct=chr(0)"+
                                     " and mes.T_Department = :OperD"+
                                     " and mes.t_TRN=:RefTRN"+
                                     " and tpshem.t_TpShemID=mes.t_TpSchemID"+
                                     " and tpshem.t_TpID=:TRANSP_UFBS";
      params = makeArray( SQLParam("OperD", {OperDprt}),
                          SQLParam("RefTRN", RefTRN),
                          SQLParam("TRANSP_UFBS", TRANSP_UFBS));
      rs = execSQLselect( select, params, FALSE );

      if ( rs.MoveNext() )
         if ( not ОшибкаЛогическогоКонтроляСообщения(rs.value(0), ErrCode,ErrDescription) )
            println( string( "Не удалось поместить в отбракованные сообщение ID = ", rs.value(0)) );
            return false;
         end;
         IsExists = true;
      end;        

   end;

   if ( not IsExists )
      println( string( "Не найдено исходящего сообщения ", RefTRN, " за дату ", RefDate) );
      return false;
   end;
   return true;
end;

macro ПроверитьЭлелементPartInfoНаНаличие(xml:object, p1:string, p2:integer):bool
  
  var v = ReadOptinalAttribute(xml,"PartQuantity","PartInfo"), v2:string;
   
  if( valtype(p1) != V_UNDEF )
     SetParm(1, "");
  end;
  if( valtype(p2) != V_UNDEF )
     SetParm(2, 0 );
  end;

  p1 = ReadOptinalAttribute(xml,"PartAggregateID","PartInfo"); 
  v2 = ReadOptinalAttribute(xml,"PartNo","PartInfo");

  if( v AND p1 AND v2 )
     
     if( int(v2) > int(v) )
        RunError( "|Номер страницы превышает их количество (блок PartInfo)" );
     end;
     if( valtype(p1) != V_UNDEF )
        SetParm(1, p1);
     end;
     if( valtype(p2) != V_UNDEF )
        SetParm(2, int(v2));
     end;

     return true;
  elif( not ( v OR p1 OR v2) )
     return false;
  else            /*банзай!*/
     ReadAttribute(xml,"PartNo","PartInfo"); 
     ReadAttribute(xml,"PartQuantity","PartInfo");
     ReadAttribute(xml,"PartAggregateID","PartInfo");
     return true; /* ;) */
  end;
end;   

private macro СообщениеОДоставкеПакета( SessID )
  var oldKey = KeyNum( f_wlmes, 1 ), continue0;
  f_wlmes.SessionID = SessID;
  continue0 = getGE(f_wlmes);
  while( continue0 and (f_wlmes.SessionID==SessID) )
      if ( not ВставитьПодтверждениеОДоставке(f_wlmes.MesID) )
         MsgBox( string("Ошибка при переносе в доставленные сообшения ", f_wlmes.TRN) );
         return false;
      else
         continue0 =  Next(f_wlmes);
      end;
  end;
  KeyNum( f_wlmes, oldKey );
  return true;
end;

macro ОбработатьКакСообщениеОДоставке(RefDate:date, RefTRN:string, IsPack)     
   var oldKey, continue0, IsExists;
   var rs:object;
   var select:string;
   var params:TArray;

   IsExists = false;

   if( IsPack )
     select = "select t_SessionID from dwlsess_dbt sess, dwltpfrmt_dbt tpfrmt where sess.t_TpID=:TRANSP_UFBS"+ 
                                  " and sess.t_SessUID=:RefTRN"+
                                  " and sess.t_TpFrmtID = tpfrmt.t_TpFrmtID"+
                                  " and tpfrmt.t_Department = :OperD"+
                                  " and sess.t_Direct=chr(0)";
     params = makeArray( SQLParam("TRANSP_UFBS", TRANSP_UFBS),
                          SQLParam("RefTRN", RefTRN),
                          SQLParam("OperD", {OperDprt}));
     rs = execSQLselect( select, params, FALSE );
     if ( rs.MoveNext() )
       if( not СообщениеОДоставкеПакета( rs.value(0) ))
         std.msg( string("|Ошибка при переносе в доставленные сообщений по сеансу ID = ", rs.value(0)) ); 
         return false;
       end;
       IsExists = true;
     end;
     if ( not IsExists )
        println( string( "Не найден исходящий пакет ", RefTRN, " за дату ", RefDate) );
        return false;
     end;

   else

      select = "select mes.t_MesID from dwlmes_dbt mes, dwltpshem_dbt tpshem where mes.t_Direct=chr(0)"+
                                     " and mes.T_Department = :OperD"+
                                     " and mes.t_TRN=:RefTRN"+
                                     " and tpshem.t_TpShemID=mes.t_TpSchemID"+
                                     " and tpshem.t_TpID=:TRANSP_UFBS";
      params = makeArray( SQLParam("OperD", {OperDprt}),
                          SQLParam("RefTRN", RefTRN),                          
                          SQLParam("TRANSP_UFBS", TRANSP_UFBS));
      rs = execSQLselect( select, params, FALSE );

      if ( rs.MoveNext() )
         if ( not ВставитьПодтверждениеОДоставке(rs.value(0)) )
            std.msg( string("|Ошибка при переносе в доставленные сообшения ", RefTRN, " за дату ", RefDate) ); 
            return false;
         end;
         IsExists = true;
      end;             
      if ( not IsExists )
         println( string( "Не найдено исходящего сообщения ", RefTRN, " за дату ", RefDate) );
         return false;
      end;

   end;

   return true;

end;

private macro ToDate( strYYYYMMDD ) 
  return date( int(substr(strYYYYMMDD, 9, 2)), int(substr(strYYYYMMDD, 6, 2)), int(substr(strYYYYMMDD, 1, 4)) );
end;

private macro FillConfirmationByNode(wlconf, Cancel, Node, Path)
   var error = 0;
   var PaymentID = 0;
   
   if( ReadOptinalAttribute(Node,"Sum", Path) Or ( (Path == "EDRefID") And ReadOptinalAttribute(Node,"Sum") ) )
       wlconf.DateValue  = ToDate(ReadAttribute(Node,"EDDate", Path));
       
       if(Path == "EDRefID")
          wlconf.Sum     = moneyL( ReadAttribute(Node,"Sum" ))/100;
       else   
          wlconf.Sum     = moneyL( ReadAttribute(Node,"Sum", Path))/100;
       end;
       wlconf.Number     = ReadAttribute(Node,"EDNo", Path);
       wlconf.CodeKind   = PTCK_BIC;
       wlconf.BankID     = ToRespID(ReadAttribute(Node,"EDAuthor", Path));
       wlconf.CodeValue  = ПолучитьКодСубъекта( wlconf.BankID, wlconf.CodeKind, Error );
       wlconf.FIID       = 0;                            
       wlconf.Cancel     = Cancel;
       wlconf.DKFlag = 0;
   else
     error = 1;
   end;

   return error;
end;

macro СформироватьДокументВыписки(wlconf, Cancel, Node, Path)
   if(not FillConfirmationByNode(wlconf, Cancel, Node, Path))
     if( not ВставитьДокументВыписки( wlconf ) )
       std.msg("Ошибка при сохранении документа выписки");
       return FALSE;
     end;
   else
     return false;
   end;   
   return true;
end;

macro СформироватьПодтверждение(wlconf, Cancel, Node, Path)

   if(not FillConfirmationByNode(wlconf, Cancel, Node, Path))
     if( not ВставитьПодтверждение( wlconf ) )
       std.msg("Ошибка при сохранении подтверждения");
       return FALSE;
     end;
   else
     return false;
   end;   

   return true;
end;

macro FillPartyByUIS(uis : string, PartyID : @integer, 
                                   PartyCodeKind : @integer,
                                   PartyCode : @string,
                                   PartyName : @string )

  var bic_str = "";
  PartyID        = ToRespID(uis, bic_str);
  PartyCodeKind  = PTCK_BIC;
  PartyCode      = bic_str;

  FILE party(party) key 0;
  party.PartyID = PartyID;
  if(GetEQ(party))
    PartyName    = party.Name;
  end;
  
  OnError(er) // ToRespID не нашла субъекта
    PartyID       = -1;
    PartyCodeKind = PTCK_BIC;
    PartyCode     = "04" + substr( uis, 1, 7);
    PartyName     = "";
end;

macro FillPartyByUIS_PTCK_UIS(uis: string, PartyID : @integer, 
                                           PartyCodeKind : @integer,
                                           PartyCode : @string,
                                           PartyName : @string )

  PartyCode       = uis;
  PartyCodeKind   = PTCK_UIS;
  PartyID         = GetCodeOwnerID(PartyCodeKind, PartyCode);
  if(PartyID <= 0)
    PartyID       = ToRespID(uis, PartyCode);
    PartyCodeKind = PTCK_BIC;
  end;

  if(PartyID > 0)
    PartyName     = GetPartyName(PartyID);
  else
    PartyName = "";
  end;

  OnError(er) // Поиск субъекта "отвалился"
    PartyID       = -1;
    PartyName     = "";
end;
