//-----------------------------------------------------------------------------
// Блок      : 29057 - "Проведение исходящего платежа"
// Шаг       : 10    - "Формирование проводки по корсчету"
// Назначение: Макрос шага
// Описание  : Макрос шага
//-----------------------------------------------------------------------------
/*SDA 09/12/2013 адаптация для 31-й */
//Jushmanov 2014-02-25 C-19151 Логгирование массово выполненных шагов
import globals, oralib, likepy, PaymInter, WldInter, InsCarryDoc, OprInter, rsd, pm_tools;

var PaymentObj:RsbPayment;

macro ExecuteStep( doc, first, KindDoc )
    var stat:integer = 0;
    var paymtr:RsbPaymTransaction;
    var cmd;
    var strDate:string = "";

    /* ТЗ 1282*/
    if((PaymentObj.Dockind == DLDOC_MULTYPM) or ((PaymentObj.Dockind == DLDOC_BANKCLAIM) and (PaymentObj.DemandAcceptTerm == 0)))
        return 0;
    end;

    var KvitDate:date = execStoredFunc( "WLD_KVIT.GetKvitDate", 
                                         V_DATE, 
                                         makeArray( SQLParam( "TransferDate", PaymentObj.OutTransferDate ),
                                                    SQLParam( "Department",   PaymentObj.Department      ) ) );

    strDate = string( KvitDate );
    if( Index(strDate,"1.01.0001") ) 
        MsgBox( string( "Не найден операционный день ДПП платежа ", PaymentObj.OutTransferDate:f ) );
        return 1;
    end;

    if ( not CarryPlanDocuments(PaymentObj.PaymentID) )
        MsgBox("Ошибка при помещении планируемой проводки в проведенные");
        return 1;
    end;

    if (ПлатежЗачисленНаСНР(PaymentObj))

        PaymentObj.ValueDate = KvitDate;
        paymtr = PaymentObj.MakeTransaction();

        if( paymtr == NULL )
            MsgBox("Ошибка при создании проводки по платежу");
            return 1;
        end;

        paymtr.Chapter         = PaymentObj.Chapter;
        paymtr.Date_Carry      = PaymentObj.ValueDate;
        paymtr.Number_Pack     = PaymentObj.NumberPack;
        paymtr.Numb_Document   = PaymentObj.Number;
        paymtr.ResultCarry     = 1;
        paymtr.Kind_Oper       = " 1";

        if (PaymentObj.ShifrOper != "")
            paymtr.Shifr_Oper      = PaymentObj.ShifrOper;
        else
            paymtr.Shifr_Oper      = "09";
        end;

        paymtr.Ground          = PaymentObj.Ground;
        paymtr.Department      = PaymentObj.Department;
        paymtr.AccountPayer    = PaymentObj.FuturePayerAccount;
        paymtr.FIIDPayer       = PaymentObj.FuturePayerFIID;
        paymtr.SumPayer        = PaymentObj.FuturePayerAmount;
        paymtr.AccountReceiver = PaymentObj.FutureReceiverAccount;
        paymtr.FIIDReceiver    = PaymentObj.FutureReceiverFIID;
        paymtr.SumReceiver     = PaymentObj.FutureReceiverAmount;
        paymtr.ClaimID         = PaymentObj.ClaimID;

        if( PaymentObj.CoverAmount != $0 ) 
            paymtr.SumEquivalentCarry = PaymentObj.CoverAmount;
        end;

        if( not paymtr.Carry )
            MsgBox("Ошибка при актуализации платежа");
            return 1;
        end;  
    end;

    // Освободить все резервы по платежу
    PaymentObj.FreeReserve( PaymentObj.PayerAccount, PaymentObj.Chapter, PaymentObj.PayerFIID );
    /*VDN 25.02.2015 HF139*/
    PaymentObj.StatusInfo = "Исполнен";

    return stat;
end;


macro CheckStepAction(message)

    if( message == OP_BACKOUT_STEP )
        if (gettrue(false,"Документ уже был обработан в МБР|Вы уверены что его следует откатить?"))
            return 0;
        else
            return 1;
        end;
    end;

    return 0;
end;


/* Постобработка шага */
//Jushmanov 2014-02-25 C-19151
macro PostStepAction( message,      /* 1 - выполнение шага; 2 - откат шага;   */
                      errTrn,       /* статус выполнения шага. 0 - ошибки нет */
                      FirstDoc,     /* указатель на первичный документ        */
                      ID_Oper,      /* внутренний идентификатор операции      */
                      Number_Step,  /* Номер шага операции (из настроек)      */
                      KindOper,     /* номер вида операции                    */
                      KindDoc,      /* номер вида первичного документа        */
                      KindStep,     /* вид шага операции                      */
                      ID_Step )     /* внутренний идентификатор шага операции */
    private var logquery, idStep = ID_Step, idOper = ID_Oper;

    if(( message == OP_EXECUTE_STEP ) and (errTrn == 0) and (IsOprMultiExec))
        if ((valtype(idOper) != V_INTEGER) and (valtype(idOper) != V_STRING)) idOper = 0; end;
        if ((valtype(idStep) != V_INTEGER) and (valtype(idStep) != V_STRING)) idStep = 0; end;

        logquery = "UPDATE usr_doprstep_robot_dbt SET t_is_robot_step = chr(88)" +
                   " WHERE t_id_operation = " + idOper + " AND t_id_step = " + idStep;
        ExecSQL(logquery, null, false);
    end;

    return 0;
end;


/**
 * Массовые действия. До транзакции
 */
macro PrepMassExecuteStep() 
  
    return execStoredFunc( "WLD_CARRYSTEP.MassWldCarryStepPrepare", V_INTEGER );

end;

/**
 * Массовые действия. Транзакция
 */
macro MassExecuteStep()

    var select, rs:RsdRecordset;
    var Carry:RsbAccTransaction;
    var ReceiverAccount:string;
    var ErrorMessage = "", retval = 0;

    select = " select t.t_OrderID as t_OrderID, t.t_ID_Operation as t_ID_Operation, t.t_id_Step as t_id_Step,"+           
                  " pm.t_FuturePayerAccount    as t_FuturePayerAccount,"+
                  " pm.t_FutureReceiverAccount as t_FutureReceiverAccount,"+
                  " pm.T_FIID_FUTUREPAYACC     as T_FIID_FUTUREPAYACC,"+
                  " pm.T_FIID_FUTURERECACC     as T_FIID_FUTURERECACC,"+
                  " pm.t_FuturePayerAmount     as t_FuturePayerAmount,"+
                  " pm.t_FutureReceiverAmount  as t_FutureReceiverAmount,"+
                  " pm.t_Chapter     as t_Chapter,"+
                  " pm.t_ValueDate   as t_ValueDate,"+
                  " pm.t_NumberPack  as t_NumberPack,"
                  " rm.t_Number      as t_Number,"+
                  " rm.t_Ground      as t_Ground,"+
                  " rm.t_ShifrOper   as t_ShifrOper,"+
                  " pm.t_Department  as t_Department,"+
                  " pm.t_ClaimID     as t_ClaimID, "+
                  " nvl( nvpi.t_CoverAmount, 0 ) as t_CoverAmount,"+
                  " WLD_KVIT.GetKvitDate( pr.t_TransferDate, pm.t_Department ) as t_KvitDate"
             " from doprtemp_tmp t,"+
                  " dpmpaym_dbt pm,"+
                  " dpmprop_dbt pr,"+
                  " dpmrmprop_dbt rm,"+
                  " dpmnvpi_dbt nvpi"+
            " where t.t_ErrorStatus = 0"+
              " and t.t_SkipDocument = 0"+
              " and pm.t_PaymentID = t.t_OrderID"+
              " and rm.t_PaymentID = t.t_OrderID"+
              " and pr.t_PaymentID = t.t_OrderID"+
              " and pr.t_IsSender = CHR(0)"+
              " and pm.t_PaymentID = t.t_OrderID"+
              " and pm.t_DocKind <> 311"+
              " and nvpi.t_PaymentID(+) = pm.t_PaymentID";
    rs = execSQLselect( select, NULL, false );

    while(rs.moveNext())
        execSQL( string( "SAVEPOINT CarryDocs" ) );
        /*выполнить проводку*/    
        if( CB_CarryPlanDocuments(rs.value("t_OrderID"),date(0,0,0),rs.value("t_ID_Operation"),rs.value("t_ID_Step")) )
            /* Если проводка неудачная, откатываемся до SAVEPOINT'а */
            execSQL( string( "ROLLBACK TO SAVEPOINT CarryDocs" ) );
            /* и исключаем документ из дальнейшей обработки */
            execSQL( "update doprtemp_tmp set t_ErrorStatus = 1, t_ErrorMessage = :ErrorMessage where t_OrderID = :PaymentID",
                     makeArray( SQLParam( "ErrorMessage", "Ошибка при помещении планируемых проводок в проведенные" ),
                                SQLParam( "PaymentID",    rs.value("t_OrderID") ) ) );          
        else

            if((rs.value("t_FuturePayerAccount") != rs.value("t_FutureReceiverAccount"))
            or (rs.value("T_FIID_FUTUREPAYACC")  != rs.value("T_FIID_FUTURERECACC")))

                Carry = RsbPaymTransaction( rs.value("t_OrderID"));

                Carry.Chapter         = rs.value("t_Chapter");
                Carry.Date_Carry      = rs.value("t_KvitDate");
                Carry.Number_Pack     = rs.value("t_NumberPack");
                Carry.Numb_Document   = rs.value("t_Number");
                Carry.ResultCarry     = 1;
                Carry.Kind_Oper       = " 1";
                Carry.Shifr_Oper      = rs.value("t_ShifrOper");
                Carry.Ground          = rs.value("t_Ground");
                Carry.Department      = rs.value("t_Department");

                Carry.FIIDPayer       = rs.value("t_FIID_FuturePayAcc");
                Carry.FIIDReceiver    = rs.value("t_FIID_FutureRecAcc");
                Carry.SumPayer        = rs.value("t_FuturePayerAmount");
                Carry.SumReceiver     = rs.value("t_FutureReceiverAmount");
                Carry.AccountPayer    = rs.value("t_FuturePayerAccount");
                Carry.AccountReceiver = rs.value("t_FutureReceiverAccount");

                Carry.ID_Operation    = rs.value("t_ID_Operation");
                Carry.ID_Step         = rs.value("t_ID_Step");
                Carry.ClaimID         = rs.value("t_ClaimID" );
                Carry.Reason          = PM_CARRY_REASON_EXECUTION;

                if( rs.value("t_CoverAmount" ) != 0 )
                    Carry.SumEquivalentCarry = rs.value("t_CoverAmount");
                end;

                if( not Carry.Carry( NULL, ErrorMessage ) )
                    /* Если проводка неудачная, откатываемся до SAVEPOINT'а */
                    execSQL( string( "ROLLBACK TO SAVEPOINT CarryDocs" ) );
                    /* и исключаем документ из дальнейшей обработки */
                    execSQL( "update doprtemp_tmp set t_ErrorStatus = 1, t_ErrorMessage = :ErrorMessage where t_OrderID = :PaymentID",
                             makeArray( SQLParam( "ErrorMessage", ErrorMessage ),
                                        SQLParam( "PaymentID",    rs.value("t_OrderID") ) ) );          
                end;
            end;
        end;
    end;

    retval = execStoredFunc( "WLD_CARRYSTEP.MassWldCarryStepExecute", V_INTEGER );  

    return retval;
end;

/**
 * Массовые действия. После транзакции
 */
macro PostMassExecuteStep()
    return 0;
end;
