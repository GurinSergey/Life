/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

   EVG Макрос пользовательского алгоритма расчёта базовых сумм комиссии 3.4.1
       "Перевод средств в пользу клиентов других банков - на корсчета в Банке".

       Тип комиссии - единовременная.
   ChangeLog:
   //RR 19.02.2014 Адаптирую под 2031(darhdoc_dbt -> dacctrn_dbt)
   //joy 14.11.2014 I-00532241 в 2031 обязательно надо проверять, что t_state в проводках = 1
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/

import sfinter, cb_sql;
import CommissLib;

/*
    Если при расчете произошла ошибка, поместить в эту переменную ненулевое значение
*/
var MacroError :integer = 0;
private var FICode_calc:string = "";

  /* Тип величины
enum SfBaseTypes{*/
private const   SF_BASETYPE_SUM     = 1;      /* Сумма*/
private const   SF_BASETYPE_QUONT   = 2;      /* Количество*/

private const NATCUR = 0;
record sfbassum( "sfbassum.str" );

/*
    Расчет для периодических комиссий
*/
/* EVG Добавил приём структуры sfcontr для вызова из макроса sfacrpay.mac */
macro CalcCommissionSum( docKind/*Тип первички*/, Doc/*Буфер первички*/, sfcalcalusr_addr/*Алгоритм расчета*/, sfcontr_addr /*Договор обслуживания*/, beginDate, endDate  )
    record sfclusr( "sfclusr.str" );
    record sfcontr( sfcontr );
    record sfcalcal(sfcalcal);
    record payord(pspayord);
    SetBuff( sfcalcal, sfcalcalusr_addr );
    SetBuff( sfcontr, sfcontr_addr );
    SetBuff( payord, Doc );

    var query, rs, stat, cmd;
    var wasOperated = false,
        CommQuont   = 0;

    var МаскаКорСчетов = "'30109','30110'";

    query = " Select count(*) From DPmPaym_dbt paym " +
            "  Where paym.t_documentid = ? " +
            "    AND paym.t_dockind = ? " +
            "    AND ( paym.t_PayerAccount       = ? " + 
            "           or paym.t_ReceiverAccount = ? ) " +
            "    and ( subStr(paym.t_FuturePayerAccount, 1, 5) in ( ? ) " +
            "          or subStr(paym.t_FutureReceiverAccount, 1, 5) in ( ? ) ) " +
            "    and paym.t_PaymStatus = 32000 " +
            "    AND EXISTS (SELECT ARH.T_ACCTRNID "+
            "                  FROM dacctrn_dbt arh, dpmdocs_dbt pmd "+
            "                 WHERE AND ARH.T_ACCTRNID = PMD.T_ACCTRNID"+
            "                   AND pmd.t_paymentid = paym.t_paymentid "+
            "                   AND arh.t_chapter = 1                  "+
            "                   AND arh.t_state = 1                  "+
            "                   AND arh.t_date_carry BETWEEN ? AND ? ) ";
          cmd = rsdcommand(query);
          cmd.AddParam("", RSDBP_IN,payord.OrderID);
          cmd.AddParam("", RSDBP_IN,dockind);
          cmd.AddParam("", RSDBP_IN,sfcontr.Object);
          cmd.AddParam("", RSDBP_IN,sfcontr.Object);
          cmd.AddParam("", RSDBP_IN,МаскаКорСчетов);
          cmd.AddParam("", RSDBP_IN,МаскаКорСчетов);
          cmd.AddParam("", RSDBP_IN,BeginDate);
          cmd.AddParam("", RSDBP_IN,EndDate);

    rs = rsdRecordSet(cmd);
    if (rs and rs.moveNext())
       CommQuont = rs.value(0, null, V_INTEGER);
    end;

    
    ClearRecord(sfbassum);

    sfbassum.baseType = SF_BASETYPE_QUONT;
    sfbassum.baseQuont  = CommQuont;

    sfbassum.baseType2 = SF_BASETYPE_QUONT;
    sfbassum.baseQuont2  = CommQuont;

    stat = InsertSumList(sfbassum);

    if( stat )
      MsgBox("Ошибка при вставке базовой суммы");
    end;
    
end;/*CalcServiceSum*/

