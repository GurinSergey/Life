// 4test
/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

   EVG Банк ВУЗ

       Макрос пользовательского алгоритма расчёта базовых сумм комиссии 3.4.4
       "Прочие платежи в пользу клиентов (юр.лиц,ИП,физ.лиц в рамках зарплатных 
        проектов, подтвержденных договором) других банков, принятые до 16-00 по 
        системе "Интернет-Клиент"".

       Тип комиссии - периодическая.

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/

import sfinter, VuzComLib;
import lib_packetCommission; // 2012-09-03 zip_z. C-13674 

/*
    Если при расчете произошла ошибка, поместить в эту переменную ненулевое значение
*/
var MacroError :integer = 0;
private var FICode_calc:string = "";

  /* Тип величины
enum SfBaseTypes{*/
private const   SF_BASETYPE_SUM     = 1;      /* Сумма*/
private const   SF_BASETYPE_QUONT   = 2;      /* Количество*/

record sfbassum( "sfbassum.str" );






/*
    Расчет для периодических комиссий
*/
/* EVG Добавил приём структуры sfcontr для вызова из макроса sfacrpay.mac */
macro CalcServiceSum( sfcontr_addr/*Договор обслуживания*/, BeginDate/*Начало периода*/, EndDate/*Конец периода*/,
      sAddr /* EVG Какой-то ещё адрес */, sfcontrStruc /*Cтруктура sfcontr*/ )

    record sfcontr( sfcontr );
    var rs, stat;
    var DayEndTime, DocTime, DocDate, CommQuont = 0;


    /* EVG При вызове из sfacrpay.mac используем полученную структуру sfcontrStruc вместо адреса sfcontr_addr */
    if ( ValType (sfcontr_addr) != V_UNDEF )
       SetBuff( sfcontr, sfcontr_addr );
    else
       Copy ( sfcontr, sfcontrStruc );
    end;

    // 2012-09-03 zip_z. C-13674 Для периодической комиссии 3.4.4 (ВУЗ) при простановке категории
    // 200 на клиенте комиссия не рассчитывается. Используем lib_packetCommission::isConnectedPacketCommissionOnDate ()
    if (not (isConnectedPacketCommissionOnDate (sfcontr.object, EndDate)))
        /* EVG 03/05/2011 Чтение настройки с временем окончания опердня */
        DayEndTime = GetOperDayEndTime();
        rs = VUZ_GetCom3RecordSet( sfcontr.Object, CLB_DocOrigin, BeginDate, EndDate );
        while ( rs and rs.MoveNext() )
            // Только для внешних платежей
            if ( rs.Orientation == "ext" ) // zip_z. Ориентация - это у Моисеева. У платежей - направление.
                if (     ( ( VUZ_isAccount_Jur( rs.PayerAccount )        // Плательщик - юр. лицо                                                      (
                           or VUZ_isAccount_IP( rs.PayerAccount ) )    // Плательщик - ИП
                         and
                         ( VUZ_isAccount_Jur( rs.ReceiverAccount )     // Получатель - юр. лицо
                           or VUZ_isAccount_IP( rs.ReceiverAccount )
                           or VUZ_isAccount_Incomplete( rs.ReceiverAccount )   ) // Получатель - счёт незавершенных расчётов RR
                       )
                     or
                       ( ( ( VUZ_isAccount_Jur( rs.PayerAccount )                      // Плательщик - юр. лицо
                             or VUZ_isAccount_IP( rs.PayerAccount ) )                  // Плательщик - ИП
                            and VUZ_typeAccount_SalaryProject( rs.PayerAccount )       // Польз. тип счета плательщика содержит Z - зарплатный проект
                         )
                         and
                         ( VUZ_isAccount_Phis( rs.ReceiverAccount )                    // Получатель - физ. лицо
                           or VUZ_isAccount_Incomplete( rs.ReceiverAccount ) )         // Получатель - счёт незавершенных расчётов
                       )
                    )

                    /* Получим время платежа */
                    DocTime = gettimeP( rs.PaymentId, EndDate, @DocDate );
                    if ( ( DocTime < DayEndTime ) or ( DocDate < EndDate ) )
                        CommQuont = CommQuont + 1;
                    end;
                end;
            end;
        end;
    end;
    
    /* EVG При вызове из sfacrpay.mac возвращаем true в случае положительного результата расчёта */
    if ( ValType (sfcontrStruc) != V_UNDEF )
       if (CommQuont > 0)
          return true;
       end;
       return false;
    end;

    
    ClearRecord(sfbassum);

    sfbassum.baseType    = SF_BASETYPE_QUONT;
    sfbassum.baseQuont   = CommQuont;

    sfbassum.baseType2   = SF_BASETYPE_QUONT;
    sfbassum.baseQuont2  = CommQuont;

    stat = InsertSumList(sfbassum);

    if( stat )
      MsgBox("Ошибка при вставке базовой суммы");
    end;

    
end;/*CalcServiceSum*/








/*
    Печать заголовка подробного отчета о расчете периодической комиссии
*/
macro CalcReportPrintHeader( sfrepdet )
    FICode_calc = "";
[----------------------------------------------------------------------------------------------------------------------];
[|             Сумма                    |             Ставка                   |              Итого                   |];
[|                                      |                                      |                                      |];
[----------------------------------------------------------------------------------------------------------------------];
    return 0;
end;/*CalcReportPrintHeader*/

/*
    Печать строчки отчета подробного отчета о расчете периодической комиссии
*/
macro CalcReportPrintLine( sfrepdet )
    var FICode_base, FICOde_tariff:string;
    file fininstr( fininstr )key 0;
    
    if(sfrepdet.baseType == SF_BASETYPE_SUM )
        fininstr.FIID = sfrepdet.FIID_baseSum;
        if( not GetEQ(fininstr))
            MsgBox("Не найдена валюта ", sfrepdet.FIID_baseSum );
            return 1;
        end;
        FICode_base = fininstr.FI_code;
    else
        FICode_base = "";
    end;

    fininstr.FIID = sfrepdet.FIID_tariff;
    if( not GetEQ(fininstr))
        MsgBox("Не найдена валюта ", sfrepdet.FIID_tariff );
        return 1;
    end;
    FICOde_tariff = fininstr.FI_code;

    fininstr.FIID = sfrepdet.FIID_CalcSum;
    if( not GetEQ(fininstr))
        MsgBox("Не найдена валюта ", sfrepdet.FIID_CalcSum );
        return 1;
    end;
    FICode_calc = fininstr.FI_code;


[| ################### ################ | ################### ################ | ################### ################ |]

    ( sfrepdet.BaseSum, FICode_base,
        sfrepdet.tariff, FICOde_tariff,
        sfrepdet.CalcSum, FICode_calc );

    return 0;
end;/*CalcReportPrintLine*/

/*
    Печать окончания отчета подробного отчета о расчете периодической комиссии
*/
macro CalcReportPrintFooter( sfrepdet, TotalSum )

[----------------------------------------------------------------------------------------------------------------------];
[Итого за период                                                               | ################### ################ |]
(TotalSum, FICode_calc);
[----------------------------------------------------------------------------------------------------------------------];
    return 0;
end;/*CalcReportPrintFooter*/

