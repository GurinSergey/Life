/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

   EVG Макрос пользовательского алгоритма расчёта базовых сумм комиссии 3.1.1
       "Зачисление поступивших средств на счета клиентов - поступления от 
       физических лиц внутренним переводом, при наличии соглашения о сборе 
       платежей".

       Тип комиссии - единовременная.
       
   ChangeLog:

   //RR 20.02.2014 Адаптирую под 2031(daccount$_dbt -> NULL)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/


import sfinter;/*InsertSumList*/

/*
    Если при расчете произошла ошибка, поместить в эту переменную ненулевое значение
*/
var MacroError :integer = 0;
private var FICode_calc:string = "";

  /* Тип величины
enum SfBaseTypes{*/
private const   SF_BASETYPE_SUM     = 1;      /* Сумма*/
private const   SF_BASETYPE_QUONT   = 2;      /* Количество*/

private const NATCUR = 0;
    record sfbassum( "sfbassum.str" );


// Польз. тип "Комиссии,оплачив. ю/л, за перевод б/о счета физ. лица."
const UserTypeAccordance = "Р";


/*
    Расчет для единовременных комиссий
*/
macro CalcCommissionSum( docKind/*Тип первички*/, Doc/*Буфер первички*/, sfcalcalusr_addr/*Алгоритм расчета*/, sfcontr_addr /*Договор обслуживания*/, beginDate, endDate  )
    record sfclusr( "sfclusr.str" );
    record sfcontr( sfcontr );
    record sfcalcal(sfcalcal);
    record payord(pspayord);

    var stat:integer; 
    var query, rs;
    var CommQuont = 0,
        CommSum   = $0;
    
    SetBuff( sfcalcal, sfcalcalusr_addr );
    SetBuff( sfcontr, sfcontr_addr );
    SetBuff( payord, Doc );
   
    query = " Select acc.t_Balance, acc.t_UserTypeAccount, paym.t_Amount " +
            "   From DPmPaym_dbt paym, DAccount_dbt acc " +
            "  Where paym.t_DocKind      = " + payord.DocKind +
            "    and paym.t_DocumentID   = " + payord.OrderID +
            "    and paym.t_ValueDate between " + GetSQLDate(BeginDate) +
            "                             and " + GetSQLDate(endDate);
            "    and acc.t_Account       = paym.t_PayerAccount " +
            "    and acc.t_Code_currency = paym.t_FIID " +
            "    and acc.t_Chapter       = 1 ";
    rs = rsdRecordSet(query);
    if (rs and rs.moveNext())
       if ( 
            ( ( rs.value(0, null, V_STRING) == "42301" )
              or
              ( rs.value(0, null, V_STRING) == "40911" ) )
            and
            ( index(rs.value(1, null, V_STRING), UserTypeAccordance) > 0 )
          )

          CommQuont = 1;
          CommSum   = rs.value(3, null, V_MONEY);
       end;
    end;
    
    
    ClearRecord(sfbassum);

    sfbassum.baseType  = SF_BASETYPE_QUONT;
    sfbassum.baseQuont = CommQuont ;

    sfbassum.baseType2 = SF_BASETYPE_SUM;
    sfbassum.baseSum2  = CommSum;
    sfbassum.FIID_baseSum2 = NATCUR;

    stat = InsertSumList(sfbassum);

    if( stat )
      MsgBox("Ошибка при вставке базовой суммы: ", GetErrMsg );
    end;

    
    
    /*return integer( 1 ); -- количество*/
    
    /*return $1; -- сумма */
    
end;/*CalcCommissionSum*/
