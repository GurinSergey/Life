/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

   EVG Банк ЭВ

       Макрос пользовательского алгоритма расчёта базовых сумм комиссии 13.1.3
       "Комиссия от общей суммы перечислений, не относящихся к з/п".

       Тип комиссии - единовременная.
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    Изменения:

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/

import sfinter;
import ExvComLib, VuzComlib, lib_packetCommission;

/*
    Если при расчете произошла ошибка, поместить в эту переменную ненулевое значение
*/
var MacroError :integer = 0;
private var FICode_calc:string = "";

  /* Тип величины
enum SfBaseTypes{*/
private const   SF_BASETYPE_SUM     = 1;      /* Сумма*/
private const   SF_BASETYPE_QUONT   = 2;      /* Количество*/

record sfbassum( "sfbassum.str" );

const COM_THRESHOLD_SUM    = $100000;


/* EVG 16/5/2016 Расчёт суммы платежей из макроса exv_com1314e.mac */
macro CalculatePayments_Period( pBegDate, pEndDate, pClientID, pRecBnkId )
  var query, cmd, rs;

  query = " Select nvl( sum( paym.t_amount ), 0 )                                                       " ;
  query = query + "   From DPmPaym_dbt paym, DPmRmProp_dbt prop, dacctrn_dbt arh, dpmdocs_dbt pmd,      " ;
  query = query +    "        DAccount_dbt acc                                                          " ;
  query = query +    "  Where arh.t_date_carry BETWEEN             ? and ?                              " ;
  query = query +    "    and acc.t_Account                        = arh.t_Account_Payer                " ;
  query = query +    "    and acc.t_chapter                        = arh.t_chapter                      " ;                                   
  query = query +    "    and pmd.t_acctrnid                       = arh.t_acctrnid                     " ;
  query = query +    "    and arh.t_state                          = 1                                  " ; 
  query = query +    "    and paym.t_paymentid                     = pmd.t_paymentid                    " ;
  query = query +    "    and paym.t_dockind                       = 201                                " ;     // Рублевый клиентский платеж
  query = query +    "    and paym.t_payer                         = ?                                  " ;
  query = query +    "    and subStr(paym.t_ReceiverAccount, 1, 3) not between '401' and '404'          " ;     // Кроме бюджетных платежей
  query = query +    "    and paym.t_ReceiverBankID                = ?                                  " ;
  query = query +    "    and paym.t_PaymStatus                    = 32000                              " ;     // Только закрытые
  query = query +    "    and paym.t_PayerBankID                  <> paym.t_ReceiverBankID              " ;
  query = query +    "    and prop.t_paymentid                     = paym.t_paymentid                   " ;
  query = query +    "    and prop.t_shifroper                    <> 16                                 " ;     // Кроме платёжных ордеров оплаты картотеки 2
  cmd = rsdcommand(query);
  cmd.AddParam( "", RSDBP_IN, pBegDate  );
  cmd.AddParam( "", RSDBP_IN, pEndDate  );
  cmd.AddParam( "", RSDBP_IN, pClientID );
  cmd.AddParam( "", RSDBP_IN, pRecBnkId );
  rs = rsdRecordSet(cmd);
  if( rs and rs.moveNext() )
     return rs.value( 0, null, V_MONEY );
  end;

  return 0;
end;



/*
    Расчет для единовременных комиссий
*/
macro CalcCommissionSum( docKind/*Тип первички*/, Doc/*Буфер первички*/, sfcalcalusr_addr/*Алгоритм расчета*/, sfcontr_addr /*Договор обслуживания*/, beginDate, endDate  )
    record sfclusr( "sfclusr.str" );
    record sfcontr( sfcontr );
    record sfcalcal(sfcalcal);
    record payord(pspayord);
    record obattr(objattr);

    SetBuff( sfcalcal, sfcalcalusr_addr );
    SetBuff( sfcontr, sfcontr_addr );
    SetBuff( payord, Doc );

    var stat;
    var CommQuont = 0,
        CommSum   = $0;
    var PaymObj:object;
    var recAcc;


    // Константы BIC_SOVCOMBANK_BRANCH_CENTRAL и ZP_PRJ_GROUND берутся из CommissLib.mac


    // Исключение клиентов, у которых подключен пакет комиссий (категория 200)
    if (not isConnectedPacketCommissionOnDate( sfcontr.object, endDate ))

       PaymObj = RsbPayment( Payord.OrderID );
       recAcc  = int( subStr( PaymObj.PayerAccount, 1, 3 ) );
         
       // Комиссия берётся с платежей со счетов 405-408
       if ( ( recAcc >= 405 ) and ( recAcc <= 408 ) )

          // Только для внешних платежей на банк Совком
          if ( PaymObj.isExternal and ( PaymObj.ReceiverBankCode == BIC_SOVCOMBANK_BRANCH_CENTRAL ) )

             if( ( index( NormGround_ForZP_ProjCheck( PaymObj.Ground ), ZP_PRJ_GROUND ) > 0 )
                 and not EXV_isGround_ZP( PaymObj.Ground ) )

                CommSum = PaymObj.PayerAmount;


                // Расчёт суммы для опраделения тарифа комиссии. Результат передаётся в sfbassum.baseSum, и далее тариф определяется
                // штатным образом. Сумма текущего платежа тоже учитывается (ниже).
                var mm, yy, PaymentsSum = $0;
                DateSplit( EndDate, null, mm, yy );
                PaymentsSum = CalculatePayments_Period( date( 1, mm, yy ), EndDate, sfcontr.PartyId, PaymObj.ReceiverBankId );


                // Комиссию придётся рассчитать в макросе, т.к. штатный выбор тарифа по baseSum2 почему-то не работает

                // Порог уже был превышен ранее
                if( PaymentsSum >= COM_THRESHOLD_SUM )

                   CommSum = PaymObj.BaseAmount * 0.15;  // Повышенная ставка 15%

                // Переход порога происходит при проведении данного платежа
                elif( (PaymentsSum + PaymObj.BaseAmount) >= COM_THRESHOLD_SUM )

                   CommSum = ( COM_THRESHOLD_SUM - PaymentsSum ) * 0.01 +
                             ( PaymObj.BaseAmount - ( COM_THRESHOLD_SUM - PaymentsSum ) ) * 0.15;

                // Порог не превышен
                else

                   CommSum = PaymObj.BaseAmount * 0.01;  // Стандартная ставка 1%

                end;

             end;

          end;

       end;

    end;



    ClearRecord(sfbassum);

    sfbassum.baseType   = SF_BASETYPE_SUM;
    sfbassum.baseSum    = CommSum;

    sfbassum.baseType2  = SF_BASETYPE_SUM;
    //sfbassum.baseSum2   = PaymentsSum;
    sfbassum.baseSum2   = CommSum;

    stat = InsertSumList(sfbassum);

    if( stat )
      MsgBox("Ошибка при вставке базовой суммы");
    end;

    
end;/*CalcServiceSum*/








/*
    Печать заголовка подробного отчета о расчете периодической комиссии
*/
macro CalcReportPrintHeader( sfrepdet )
    FICode_calc = "";
[----------------------------------------------------------------------------------------------------------------------];
[|             Сумма                    |             Ставка                   |              Итого                   |];
[|                                      |                                      |                                      |];
[----------------------------------------------------------------------------------------------------------------------];
    return 0;
end;/*CalcReportPrintHeader*/

/*
    Печать строчки отчета подробного отчета о расчете периодической комиссии
*/
macro CalcReportPrintLine( sfrepdet )
    var FICode_base, FICOde_tariff:string;
    file fininstr( fininstr )key 0;
    
    if(sfrepdet.baseType == SF_BASETYPE_SUM )
        fininstr.FIID = sfrepdet.FIID_baseSum;
        if( not GetEQ(fininstr))
            MsgBox("Не найдена валюта ", sfrepdet.FIID_baseSum );
            return 1;
        end;
        FICode_base = fininstr.FI_code;
    else
        FICode_base = "";
    end;

    fininstr.FIID = sfrepdet.FIID_tariff;
    if( not GetEQ(fininstr))
        MsgBox("Не найдена валюта ", sfrepdet.FIID_tariff );
        return 1;
    end;
    FICOde_tariff = fininstr.FI_code;

    fininstr.FIID = sfrepdet.FIID_CalcSum;
    if( not GetEQ(fininstr))
        MsgBox("Не найдена валюта ", sfrepdet.FIID_CalcSum );
        return 1;
    end;
    FICode_calc = fininstr.FI_code;


[| ################### ################ | ################### ################ | ################### ################ |]

    ( sfrepdet.BaseSum, FICode_base,
        sfrepdet.tariff, FICOde_tariff,
        sfrepdet.CalcSum, FICode_calc );

    return 0;
end;/*CalcReportPrintLine*/

/*
    Печать окончания отчета подробного отчета о расчете периодической комиссии
*/
macro CalcReportPrintFooter( sfrepdet, TotalSum )

[----------------------------------------------------------------------------------------------------------------------];
[Итого за период                                                               | ################### ################ |]
(TotalSum, FICode_calc);
[----------------------------------------------------------------------------------------------------------------------];
    return 0;
end;/*CalcReportPrintFooter*/

