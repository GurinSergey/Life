/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

   EVG Макрос пользовательского алгоритма расчёта базовых сумм комиссий 3.14.1e
       "Единовременная комиссия за платежи с происхождением ПостоянПеречисл"

       Тип комиссии - единовременная.


История изменений:

EVG 2/08/2013 Добавлена проверка даты окончания договора на постоянные перечисления.
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/

import sfinter, ptinter, cb_sql;/*InsertSumList*/

/*
    Если при расчете произошла ошибка, поместить в эту переменную ненулевое значение
*/
var MacroError :integer = 0;
private var FICode_calc:string = "";

  /* Тип величины
enum SfBaseTypes{*/
private const   SF_BASETYPE_SUM     = 1;      /* Сумма*/
private const   SF_BASETYPE_QUONT   = 2;      /* Количество*/

record sfbassum( "sfbassum.str" );

// Номер счёта контрагента MyApps
const MyApps_Account = "40702810700020037446";


/*
    Расчет для единовременных комиссий
*/
macro CalcCommissionSum( docKind/*Тип первички*/, Doc/*Буфер первички*/, sfcalcalusr_addr/*Алгоритм расчета*/, sfcontr_addr /*Договор обслуживания*/, beginDate, endDate  )
    record sfclusr  ( "sfclusr.str" );
    record sfcontr  ( sfcontr       );
    record sfcalcal ( sfcalcal      );
    record payord   ( pspayord      );

    var stat:integer; 
    var query, cmd, rs;
    var CommSum   = $0;

        
    SetBuff( sfcalcal, sfcalcalusr_addr );
    SetBuff( sfcontr, sfcontr_addr );
    SetBuff( payord, Doc );


    /* Комиссия взимается при наличии в списке договоров на постоянные перечисления 
       контрагента "Мои приложения" 40702810700020037446 */
    query = " SELECT 1                     " +
            "   FROM usr_regular_contr_dbt " +
            "  WHERE t_account             = ? " +
            "    AND t_Contr_Date         <= ? " +
            // EVG 2/08/2013 Проверка на дату окончания договора
            "    AND ( t_Contr_End_Date   >= ? " +
            "          OR t_Contr_End_Date = to_date('01-01-0001','dd-mm-rrrr') ) " +
            "    AND t_Contragent_Acc      = ? ";
    cmd = RSDCommand ( query );
    cmd.AddParam     ( "account",  RSDBP_IN, sfcontr.Object );
    cmd.AddParam     ( "date",     RSDBP_IN, EndDate        );
    cmd.AddParam     ( "date1",    RSDBP_IN, EndDate        );
    cmd.AddParam     ( "contracc", RSDBP_IN, MyApps_Account );
    rs = RSDRecordset( cmd );
    if( rs and rs.moveNext() )

       var OrderObj:object = GenObject(  "RsbPsPayOrder", payord.OrderID );

       /* Комиссия рассчитывается только по п/п с происхождением ПостоянПеречисл
          и рассчитывается только по п/п  в пользу  контрагента "Мои приложения". */
       if( ( OrderObj.Origin == 3400 ) and
           ( OrderObj.Payment.ReceiverAccount == MyApps_Account ) )

          CommSum = OrderObj.Payment.BaseAmount;
       end;

    end;



    ClearRecord(sfbassum);

    sfbassum.baseType  = SF_BASETYPE_SUM;
    sfbassum.baseSum   = CommSum;

    sfbassum.baseType2  = SF_BASETYPE_SUM;
    sfbassum.baseSum2   = CommSum;

    stat = InsertSumList(sfbassum);

    if( stat )
      MsgBox("Ошибка при вставке базовой суммы: ", GetErrMsg );
    end;

    
    
    /*return integer( 1 ); -- количество*/
    
    /*return $1; -- сумма */
    
end;/*CalcCommissionSum*/

