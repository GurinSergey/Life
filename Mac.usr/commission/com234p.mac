/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

   EVG Макрос пользовательского алгоритма расчёта базовых сумм комиссии:
       * ПРБ, ГЭБ - 2.3.4;
       * ЭВ       - 3.2.3;
       * ВУЗ      - 3.2.6.
       "Комиссия за перевод денежных средств на л/сч сотрудников организации по ЗП".

       Тип комиссии - периодическая.
   ChangeLog:
   //RR 19.02.2014 Адаптирую под 2031(darhdoc_dbt -> dacctrn_dbt)
   //joy 14.11.2014 I-00532241 в 2031 обязательно надо проверять, что t_state в проводках = 1
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/

import sfinter, cb_sql, fg_life_parm, Globals;

/*
    Если при расчете произошла ошибка, поместить в эту переменную ненулевое значение
*/
var MacroError :integer = 0;
private var FICode_calc:string = "";

  /* Тип величины
enum SfBaseTypes{*/
private const   SF_BASETYPE_SUM     = 1;      /* Сумма*/
private const   SF_BASETYPE_QUONT   = 2;      /* Количество*/

private const NATCUR = 0;
record sfbassum( "sfbassum.str" );



/*
    Расчет для периодических комиссий
*/
/* EVG Добавил приём структуры sfcontr для вызова из макроса sfacrpay.mac */
macro CalcServiceSum( sfcontr_addr/*Договор обслуживания*/, BeginDate/*Начало периода*/, EndDate/*Конец периода*/,
      sAddr /* EVG Какой-то ещё адрес */, sfcontrStruc /*Cтруктура sfcontr*/ )

    record sfcontr( sfcontr );
    var query, rs, stat, cmd;
    var CommSum     = $0,
        CommQuont   = 0,
        fgBank;
    array arrRecAcc;

debugbreak;
        
    /* Определим счёт (счета) получателя для фильтра платежей.
       Так как счёт может быть один, а может быть несколько, каждый из счетов необходимо
       передавать отдельным параметром, т.к. переданную строчку sql не воспринимает. Отсутствие
       параметра или значение null - не проблема. 
       Если будет более 2 счетов, нужно добавить приём ещё одного параметра в in и его передачу
       в запрос через cmd.AddParam. */

    fgBank = fg_life_subject( {OurBank} );
    if( fgBank.is_Prbb )
       arrRecAcc(0) = "40817810809000060164";
       arrRecAcc(1) = "40820810809000060164";

    elif( fgBank.is_Exv )
       arrRecAcc(0) = "40817810200000000706";
    
    elif( fgBank.is_EXV_Volgograd )
       arrRecAcc(0) = "40817810901000000001";
       arrRecAcc(1) = "40820810901000000001";
    
    elif( fgBank.is_Geb )
       arrRecAcc(0) = "";         // Пока нет инфо

    elif( fgBank.is_Vuz )
       arrRecAcc(0) = "";         // Пока нет инфо
    end;


    /* EVG При вызове из sfacrpay.mac используем полученную структуру sfcontrStruc вместо адреса sfcontr_addr */
    if ( ValType (sfcontr_addr) != V_UNDEF )
       SetBuff( sfcontr, sfcontr_addr );
    else
       Copy ( sfcontr, sfcontrStruc );
    end;

    query = " Select nvl( sum( paym.t_Amount ), 0 ) " +
            "   From dpmpaym_dbt paym, " +
            "        dacctrn_dbt arh, " +
            "        dpmdocs_dbt pmd " +
            "  Where paym.t_Payer  = ? " + 
            "    and subStr( paym.t_PayerAccount, 1, 3 ) in ( '405', '406', '407', '408' ) " +
            "    and paym.t_ReceiverAccount in ( ?, ? ) " +
            "    and paym.t_PaymStatus = 32000 " +
            "    and arh.t_state = 1"+
            "    and paym.t_PayerBankID = paym.t_ReceiverBankID " +     // Банк получателя = наш банк (= банк плательщика)
            "    and pmd.t_paymentid = paym.t_paymentid " +
            "    AND ARH.T_ACCTRNID = PMD.T_ACCTRNID " +
            "    and arh.t_date_carry BETWEEN ? AND ? " ;
          cmd = rsdcommand(query);
          cmd.AddParam( "", RSDBP_IN,sfcontr.PartyID );
          cmd.AddParam( "", RSDBP_IN,arrRecAcc(0)    );
          cmd.AddParam( "", RSDBP_IN,arrRecAcc(1)    );
          cmd.AddParam( "", RSDBP_IN,BeginDate       );
          cmd.AddParam( "", RSDBP_IN,EndDate         );

    rs = rsdRecordSet(cmd);
    if (rs and rs.moveNext())
       
       CommSum = rs.value( 0, null, V_MONEY );

    end;


    /* EVG При вызове из sfacrpay.mac возвращаем true в случае положительного результата расчёта */
    if ( ValType (sfcontrStruc) != V_UNDEF )
       if (CommSum > 0)
          return true;
       end;
       return false;
    end;

    
    ClearRecord(sfbassum);

    sfbassum.baseType = SF_BASETYPE_SUM;
    sfbassum.baseSum  = CommSum;

    sfbassum.baseType2 = SF_BASETYPE_SUM;
    sfbassum.baseSum2  = CommSum;

    stat = InsertSumList(sfbassum);

    if( stat )
      MsgBox("Ошибка при вставке базовой суммы");
    end;

    
end;/*CalcServiceSum*/








/*
    Печать заголовка подробного отчета о расчете периодической комиссии
*/
macro CalcReportPrintHeader( sfrepdet )
    FICode_calc = "";
[----------------------------------------------------------------------------------------------------------------------];
[|             Сумма                    |             Ставка                   |              Итого                   |];
[|                                      |                                      |                                      |];
[----------------------------------------------------------------------------------------------------------------------];
    return 0;
end;/*CalcReportPrintHeader*/

/*
    Печать строчки отчета подробного отчета о расчете периодической комиссии
*/
macro CalcReportPrintLine( sfrepdet )
    var FICode_base, FICOde_tariff:string;
    file fininstr( fininstr )key 0;
    
    if(sfrepdet.baseType == SF_BASETYPE_SUM )
        fininstr.FIID = sfrepdet.FIID_baseSum;
        if( not GetEQ(fininstr))
            MsgBox("Не найдена валюта ", sfrepdet.FIID_baseSum );
            return 1;
        end;
        FICode_base = fininstr.FI_code;
    else
        FICode_base = "";
    end;

    fininstr.FIID = sfrepdet.FIID_tariff;
    if( not GetEQ(fininstr))
        MsgBox("Не найдена валюта ", sfrepdet.FIID_tariff );
        return 1;
    end;
    FICOde_tariff = fininstr.FI_code;

    fininstr.FIID = sfrepdet.FIID_CalcSum;
    if( not GetEQ(fininstr))
        MsgBox("Не найдена валюта ", sfrepdet.FIID_CalcSum );
        return 1;
    end;
    FICode_calc = fininstr.FI_code; 


[| ################### ################ | ################### ################ | ################### ################ |]

    ( sfrepdet.BaseSum, FICode_base,
        sfrepdet.tariff, FICOde_tariff,
        sfrepdet.CalcSum, FICode_calc );

    return 0;
end;/*CalcReportPrintLine*/

/*
    Печать окончания отчета подробного отчета о расчете периодической комиссии
*/
macro CalcReportPrintFooter( sfrepdet, TotalSum )

[----------------------------------------------------------------------------------------------------------------------];
[Итого за период                                                               | ################### ################ |]
(TotalSum, FICode_calc);
[----------------------------------------------------------------------------------------------------------------------];
    return 0;
end;/*CalcReportPrintFooter*/

