/*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

   ████████   ████████
   ███   ███  ███   ███
   ███  ████  ███  ████
   ███████    ███████
   ███  ███   ███  ███
   ███   ███  ███   ███

   RR Рахмедов Р.С.

   Имя файла: TPInfo_DataMining.mac

   Создан:    01.09.2014 (C-29425)

   Описание:  Процедура загрузки данных об изменении тарифных планов клиентов из ФРОНТа
              
   ChangeLog:
-----------------------------------------------------------------------------------------------------------------------------------------------------
//09.06.2015 joy Добавлена вставка связи между комиссиями и их тарифами
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/

import globals, oralib, frontCommon, likepy, lib_registry, TReport, lib_fc_corporate, lib_front, lib_const, RSD, fg_Life_parm, lib_types;

private var Bank_Name = fg_life_subject({OurBank}),
            DateU;


 PRIVATE MACRO GetFrontOutParams (_conn)
  var BTime, ETime, TotalTime, i = 0;
  array param, out;

  /*Загрузка информации о LifePad'ах*/
  var sqlQuery = " INSERT INTO USR_FRONT_TPINFO   (RS_CODE_CLIENT, " +
                 "                                 CLIENT_NAME, " +
                 "                                 INN, " +
                 "                                 TP_ID, " +
                 "                                 TP_NAME, " +
                 "                                 DATE_BEGIN_TP, " +
                 "                                 DATE_END_TP, " +
                 "                                 DATE_MINING) " +
                 "   VALUES   (CONCAT ('01', LPAD (:m_rs_code_client, 10, '0')), " +
                 "             :m_client_name, " +
                 "             :m_inn, " +
                 "             :m_tp_id, " +
                 "             :m_tp_name, " +
                 "             :m_date_begin_tp, " +
                 "             :m_date_end_tp, " +
                 "             :m_date_mining)";
     var sqlParams = TArray ();
  
   if   (Bank_Name.is_PRBB)
      param [0] = 252;
   elif (Bank_Name.is_GEB)
      param [0] = 1963;
   elif (Bank_Name.is_VUZ)
      param [0] = 2519;
   elif (Bank_Name.is_SLD)
      param [0] = 346;
   elif (Bank_Name.is_EXV_Stavropol)
      param [0] = 8484;
   elif (Bank_Name.is_EXV_Volgograd)
      param [0] = 127;
   elif (Bank_Name.is_EXV_Voronezh)
      param [0] = 9000;
   elif (Bank_Name.is_EXV_Ulyanovsk)
      param [0] = 7743;
   else
      param [0] = 133;
   end;
   
   param [1] = DateU;
   param [2] = DateU;
   
   execSQL ("DELETE FROM USR_FRONT_TPINFO");
   
  var ado = RSADORecordset (ExecuteFrontProcEx ("rsb6_ask_client_tp", param, _conn, 26, Out));
   
   begaction(100,"Получение данных из Фронта", false);
   BTime = time();
   
   RSLDefCon.BeginTrans ();
   while (ado.movenext ())
     i = 0;
     while (i < ado.m_value.size)
     
       if (    ( (i == 5) or (i == 6) ) 
           and (isNull(ado.m_value [i])) ) 
         ado.m_value [i] = date(0,0,0);
       end;
       
       if (isNull(ado.m_value [i]))
         if (i == 3)
           ado.m_value [i] = 0;
         else
           ado.m_value [i] = StrFor(1);
         end;
       end;
         
       i = i + 1;
     end;
       
     sqlParams = makeArray (SQLParam ("m_rs_code",       ado.m_value [0]),    // RS код клиента
                            SQLParam ("m_client_name",   ado.m_value [1]),    // Наименование клиента
                            SQLParam ("m_inn",           ado.m_value [2]),    // ИНН клиента
                            SQLParam ("m_tp_id",         ado.m_value [3]),    // ИД тарифного плана
                            SQLParam ("m_tp_name",       ado.m_value [4]),    // Наименование тарифного плана
                            SQLParam ("m_date_begin_tp", ado.m_value [5]),    // Дата подключения ТП
                            SQLParam ("m_date_end_tp",   ado.m_value [6]),    // Дата отключения ТП
                            SQLParam ("m_date_mining",   {curdate})       );  // Дата выгрузки
     execSQL (sqlQuery, sqlParams, true );
     
   end; 
   
   ETime = time();
   TotalTime = Etime - Btime;
   RSLDefCon.CommitTrans ();
   println("Время выполнения процедуры - " + TotalTime);
   return RSL_EXIT_SUCCESS;
 onError
   RSLDefCon.RollbackTrans ();
   return RSL_EXIT_FAILURE;
  endaction(0);
 END;

 PRIVATE MACRO initUpdateOperation ()
    var c    = FR_GlobalConnection (FR_LEGAL, "RS-Bank::Обновление информации о токена ФЮЛ");
    var conn = c.StartPooling (); 

    message ("Выполняется обновление...");

    getFrontOutParams (conn);
    c.endPooling (); 
    
    c = null; 

    message ("Обновление завершено");
 END;

 MACRO Get_Main_RS();
  var rs = RSDRecordSet(" SELECT * FROM USR_FRONT_TPINFO ORDER BY RS_CODE_CLIENT ASC ");
  return rs;
 END;

 MACRO Get_Code_RS(code);
  var rs = RSDRecordSet(" SELECT   ctr.* " +
                        "   FROM   dobjcode_dbt code, dsfcontr_dbt ctr " +
                        "  WHERE       CODE.T_OBJECTTYPE = 3 " +
                        "          AND CODE.T_CODEKIND = 1 " +
                        "          AND CODE.T_STATE = 0 " +
                        "          AND CODE.T_CODE = '"+code+"' " +
                        "          AND CTR.T_PARTYID = CODE.T_OBJECTID " +
                        "          AND (CTR.T_DATECLOSE = TO_DATE ('01.01.0001', 'dd.mm.yyyy') " +
                        "               OR CTR.T_DATECLOSE > TRUNC (SYSDATE)) ");
  return rs;
 END;

 MACRO Get_TP_RS(contrid);
  var rs = RSDRecordSet(" SELECT   PL.T_SFPLANID, PL.T_BEGIN " +
                        "   FROM   DSFCONTRPLAN_DBT PL " +
                        "  WHERE   PL.T_SFCONTRID = " + contrid +
                        "          AND PL.T_BEGIN = (SELECT   MAX (T_BEGIN) " +
                        "                              FROM   DSFCONTRPLAN_DBT " +
                        "                             WHERE   T_SFCONTRID = "+contrid+") ");
  return rs;
 END;

 MACRO ChangeTP(contrid, tp_id, begdate, enddate, old_tp_id)
  var cmd, qw;
   debugbreak;
   RSLDefCon.BeginTrans ();
   
   //Закрываем последний ТП
   cmd = RSDCommand(" UPDATE   DSFCONTRPLAN_DBT PL " +
                    "    SET   PL.T_END = '"+date(begdate)+"' " +
                    "  WHERE   PL.T_SFCONTRID = "+contrid+" " +
                    "          AND PL.T_BEGIN = (SELECT   MAX (T_BEGIN) " +
                    "                              FROM   DSFCONTRPLAN_DBT " +
                    "                             WHERE   T_SFCONTRID = PL.T_SFCONTRID ) ");
   cmd.execute();
  
   //"Вставляем" новый ТП
   cmd = RSDCommand(" INSERT INTO DSFCONTRPLAN_DBT PL (PL.T_ID, " +
                    "                                  PL.T_SFCONTRID, " +
                    "                                  PL.T_SFPLANID, " +
                    "                                  PL.T_BEGIN, " +
                    "                                  PL.T_END) " +
                    "   VALUES   (0, " +
                    "             "+contrid+", " +
                    "             "+tp_id+", " +
                    "             '"+date(begdate)+"', " +
                    "             to_date('01.01.0001')) ");
   cmd.execute();
  
   //Закрываем комиссии старого ТП
   cmd = RSDCommand(" UPDATE   dsfconcom_dbt com " +
                    "    SET   COM.T_DATEEND = '"+date(begdate)+"'" +
                    "  WHERE       COM.T_OBJECTTYPE = 659" +
                    "          AND COM.T_OBJECTID = "+contrid+" " +
                    "          AND COM.T_SFPLANID = "+old_tp_id+" ");
   cmd.execute();
  
   //"Вставляем" комиссии
   cmd = RSDCommand(" BEGIN  " +
                    " EXECUTE IMMEDIATE 'alter trigger DSFCONCOM_DBT_BEFORE_INSERT disable';  " +
                    " INSERT INTO dsfconcom_dbt (T_OBJECTID, " +
                    "                            T_FEETYPE, " +
                    "                            T_COMMNUMBER, " +
                    "                            T_STATUS, " +
                    "                            T_CALCPERIODTYPE, " +
                    "                            T_CALCPERIODNUM, " +
                    "                            T_DATE, " +
                    "                            T_GETSUMMIN, " +
                    "                            T_SUMMIN, " +
                    "                            T_SUMMAX, " +
                    "                            T_DATEBEGIN, " +
                    "                            T_DATEEND, " +
                    "                            T_OBJECTTYPE, " +
                    "                            T_ID, " +
                    "                            T_SFPLANID, " +
                    "                            T_ISFREEPERIOD, " +
                    "                            T_ISINDIVIDUAL) " +
                    "              (SELECT   "+contrid +", " +
                    "                        COM.T_FEETYPE, " +
                    "                        COM.T_COMMNUMBER, " +
                    "                        COM.T_STATUS, " +
                    "                        COM.T_CALCPERIODTYPE, " +
                    "                        COM.T_CALCPERIODNUM, " +
                    "                        COM.T_DATE, " +
                    "                        COM.T_GETSUMMIN, " +
                    "                        COM.T_SUMMIN, " +
                    "                        COM.T_SUMMAX, " +
                    "                        '"+date(begdate)+"', " +
                    "                        to_date('01.01.0001'), " +
                    "                        659, " +
                    "                        0, " +
                    "                        "+tp_id+", " +
                    "                        COM.T_ISFREEPERIOD, " +
                    "                        CHR(0) " +
                    "                 FROM   dsfconcom_dbt com " +
                    "                WHERE   COM.T_OBJECTTYPE = 57 AND COM.T_OBJECTID = "+tp_id+"); "+
                    " EXECUTE IMMEDIATE 'alter trigger DSFCONCOM_DBT_BEFORE_INSERT enable';  END;");
   cmd.execute();
  
   RSLDefCon.CommitTrans ();
   
 
    
    //09.06.2015 joy Исправляю одну большую ошибку: нужно еще вставить связь между комиссиями и их тарифами
      qw = " DELETE FROM dsfcomtarscl_dbt where t_concomid in ( " +
        "            select t_id from dsfconcom_dbt where T_OBJECTID = "+contrid+" "+
        "            AND T_OBJECTTYPE = 659) ";
    cmd = rsdCommand( qw );
    cmd.execute();
  
      qw = " INSERT INTO dsfcomtarscl_dbt (t_concomid, t_tarSclID, t_level) " +
           "  SELECT concom.t_id, tar.t_id, 3  " +
           "  FROM dsfconcom_dbt concom, dsftarscl_dbt tar, dsfconcom_dbt concomts  " +
           "  WHERE concom.t_objecttype = 659  " +
           " AND concom.t_feetype = tar.t_feetype AND concom.t_commnumber = tar.t_commnumber " +
           " AND concomts.t_ID = tar.t_ConComID " +
           " AND concomts.t_objecttype = 57 " +
           " AND concomts.t_objectid = concom.t_SfPlanID " +
           " AND concomts.t_SfPlanID = 0  " +
           " AND (" +
           "      (tar.t_begindate = to_date('01.01.0001', 'dd.mm.yyyy') AND tar.t_enddate = to_date('01.01.0001', 'dd.mm.yyyy') ) " +
           "         OR tar.t_begindate  " +
           "             BETWEEN concom.t_datebegin  " +
           "         AND DECODE(concom.t_dateend, to_date('01.01.0001', 'dd.mm.yyyy'), to_date('31.12.9999', 'dd.mm.yyyy'), concom.t_dateend) " +
           "         OR tar.t_enddate " +
           "             BETWEEN concom.t_datebegin " +
           "         AND DECODE(concom.t_dateend, to_date('01.01.0001', 'dd.mm.yyyy'), to_date('31.12.9999', 'dd.mm.yyyy'), concom.t_dateend) " +
           "         OR tar.t_enddate  = to_date('01.01.0001', 'dd.mm.yyyy') " +
           "     ) " +
           " and concom.t_id in ( " +
           "        select t_id from dsfconcom_dbt where T_OBJECTID = "+contrid+" " +
           " AND T_OBJECTTYPE = 659) " ;
        cmd = rsdCommand( qw );
        cmd.execute();
        
        
      return true;
   
   onError
    RSLDefCon.RollbackTrans ();
    cmd = RSDCommand("EXECUTE IMMEDIATE 'alter trigger DSFCONCOM_DBT_BEFORE_INSERT enable';");
    cmd.execute();
    return false;
    
 END;

 MACRO WriteChangeLog(rs, info)
  var cmd = RSDCommand(" INSERT INTO USR_FRONT_TPINFO_LOG (RS_CODE_CLIENT, " +
                       "                                   CLIENT_NAME, " +
                       "                                   INN, " +
                       "                                   TP_ID, " +
                       "                                   TP_NAME, " +
                       "                                   DATE_BEGIN_TP, " +
                       "                                   DATE_END_TP, " +
                       "                                   INFO) " +
                       "   VALUES   (:1, " +
                       "             :2, " +
                       "             :3, " +
                       "             :4, " +
                       "             :5, " +
                       "             :6, " +
                       "             :7, " +
                       "             :8) ");
      cmd.AddParam( "1", RSDBP_IN, rs.value(0) );
      cmd.AddParam( "2", RSDBP_IN, rs.value(1) );
      cmd.AddParam( "3", RSDBP_IN, rs.value(2) );
      cmd.AddParam( "4", RSDBP_IN, rs.value(3) );
      cmd.AddParam( "5", RSDBP_IN, rs.value(4) );
      cmd.AddParam( "6", RSDBP_IN, rs.value(5) );
      cmd.AddParam( "7", RSDBP_IN, rs.value(6) );
      cmd.AddParam( "8", RSDBP_IN, info );
      cmd.execute();
 END;

 MACRO initChangeTP()
 
  var main_rs, code_rs, tp_rs, info;
  var i = 0;
  
   main_rs = Get_Main_RS();
   while (main_rs and main_rs.movenext()) 
     
     info = StrFor(1);
     code_rs = Get_Code_RS(main_rs.value("RS_CODE_CLIENT"));
     while (code_rs and code_rs.movenext())
     
       info = StrFor(1);
       tp_rs = Get_TP_RS(code_rs.value("t_id"));
       tp_rs.movenext();
       if ( (tp_rs.value("T_BEGIN") < main_rs.value("DATE_BEGIN_TP")) and (tp_rs.value("T_SFPLANID") != main_rs.value("TP_ID")) )
           if ( ChangeTP(code_rs.value("t_id"), 
                  main_rs.value("TP_ID"), 
                  main_rs.value("DATE_BEGIN_TP"), 
                  main_rs.value("DATE_END_TP"), 
                  tp_rs.value("T_SFPLANID")) )
             WriteChangeLog(main_rs, "Тарифный план изменен");
           else
             info = "Не удалось установить ТП "+main_rs.value("TP_NAME")+" на договор " + code_rs.value("T_OBJECT");
             WriteChangeLog(main_rs, info);
           end;
       else
         info = "На договоре "+code_rs.value("T_OBJECT")+" действует более поздний ТП или ТП "+main_rs.value("TP_NAME")+" уже установлен";
         WriteChangeLog(main_rs, info);
       end;
       
       i = i + 1;
       if (info == StrFor(1))
         info = "Не найдено активных договоров";
         WriteChangeLog(main_rs, info);
       end;
       
     end;
     
   end;
 
 END;

 MACRO PrintReport ()
    
    var rs, table, sql;
    begaction(100,"Печать отчета", false);

    PrintLn ("ЗАГРУЖЕНА ИНФОРМАЦИЯ из ФРОНТа");
    
    table = CTableReport();
    table.addColumn ("RS-код",         12, AL_LEFT);
    table.addColumn ("Клиент",         50, AL_LEFT);
    table.addColumn ("Тарифный план",  30, AL_LEFT);
    table.addColumn ("Дата начала",    10, AL_LEFT);
    table.addColumn ("Дата окончания", 10, AL_LEFT);
    table.addColumn ("Дата загрузки",  10, AL_LEFT);
    table.printHead ();
    
    sql = execSqlSelect ("   SELECT   UFTPI.RS_CODE_CLIENT, " +
                         "            UFTPI.CLIENT_NAME, " +
                         "            UFTPI.TP_NAME, " +
                         "            UFTPI.DATE_BEGIN_TP, " +
                         "            UFTPI.DATE_END_TP, " +
                         "            UFTPI.DATE_MINING " +
                         "     FROM   USR_FRONT_TPINFO UFTPI " +
                         " ORDER BY   RS_CODE_CLIENT ASC ");
    
    while (sql.movenext)
        table.printStringTransferByWord ( sql.value ("rs_code_client", null, V_STRING  ),
                                          sql.value ("client_name",    null, V_STRING  ),
                                          sql.value ("tp_name",        null, V_STRING  ),
                                          sql.value ("DATE_BEGIN_TP",  null, V_DATE    ),
                                          sql.value ("DATE_END_TP",    null, V_DATE    ),
                                          sql.value ("DATE_MINING",    null, V_DATE    ) );
    end;
    
    table.printBottom ();

    PrintLn ("Договора для которых не удалось произвести смену тарифного плана");
    
    table = CTableReport();
    table.addColumn ("RS-код",  12, AL_LEFT);
    table.addColumn ("Клиент",  50, AL_LEFT);
    table.addColumn ("Причина", 80, AL_LEFT);
    table.printHead ();
    
    sql = execSqlSelect ("   SELECT   UFTPI.RS_CODE_CLIENT, " +
                         "            UFTPI.CLIENT_NAME, " +
                         "            UFTPI.INFO " +
                         "     FROM   USR_FRONT_TPINFO_LOG UFTPI " +
                         "    WHERE   T_DATE = TO_DATE('"+DateU+"') " +
                         " ORDER BY   RS_CODE_CLIENT ASC ");
    
    while (sql.movenext)
        table.printStringTransferByWord ( sql.value ("rs_code_client", null, V_STRING  ),
                                          sql.value ("client_name",    null, V_STRING  ),
                                          sql.value ("info",           null, V_STRING  ) );
    end;
    
    table.printBottom ();


    endaction(0);
 END;

 DateU = {CurDate};
 //if ( not GetDate( DateU, "Пожалуйста, введите дату за которую хотите сделать выгрузку:" ) )
 //   exit(1);
 //end;

initUpdateOperation ();  // обновление
initChangeTP();          // Смена ТП
//PrintReport ();           // Отчет
exit (RSL_EXIT_SUCCESS); // нормальный человеческий выход (0 = видно печатную форму отчёта)