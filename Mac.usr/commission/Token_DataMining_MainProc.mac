/*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

   ████████   ████████
   ███   ███  ███   ███
   ███  ████  ███  ████
   ███████    ███████
   ███  ███   ███  ███
   ███   ███  ███   ███

   RR Рахмедов Р.С.

   Имя файла: Token_DataMining_MainProc.mac

   Создан:    05.09.2014


   Описание:  Все содержимое переехало сюда из Token_DataMining.mac
              Процедура загрузки данных о токенах из ФРОНТа, попутно делается подключение комиссии и вывод отчета выполненных процедур(C-24152)
              
   ChangeLog:
-----------------------------------------------------------------------------------------------------------------------------------------------------
   //RR 07.11.2013 Поправил мелкие недочеты, расширил отчет
-----------------------------------------------------------------------------------------------------------------------------------------------------
   //RR 12.02.2014 При подключении исключил закрытые ДО
-----------------------------------------------------------------------------------------------------------------------------------------------------
   //RR 25.02.2014 7.1.5 более не используется, вношу корректировки
-----------------------------------------------------------------------------------------------------------------------------------------------------
   //RR 04.04.2014 Исключил из подключения валютные счета.
-----------------------------------------------------------------------------------------------------------------------------------------------------
   //RR 07.04.2014 Добавлена загрузка и обработка комиссий за услугу LifaPad(7.6.1,7.6.2) C-26775 
-----------------------------------------------------------------------------------------------------------------------------------------------------
   //RR 05.09.2014 Макрос переезжает в Token_DataMining_MainProc, нужно для того, чтобы робот мог выполнять обновление данных.
-----------------------------------------------------------------------------------------------------------------------------------------------------
   //RR 24.12.2014 Исправлены ошибки импорта
-----------------------------------------------------------------------------------------------------------------------------------------------------
   //RR 17.02.2015 Адаптировано для Пойдем
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/

import globals, oralib, frontCommon, likepy, lib_registry, TReport, lib_fc_corporate, lib_front, lib_const, RSD, fg_Life_parm, lib_types;

private var Bank_Name = fg_life_subject({OurBank});
private var DateU;

const ComissCode713    = "'7.1.3p'";
const ComissCode714    = "'7.1.4p'";
const ComissCode761    = "'7.6.1'";
const ComissCode762    = "'7.6.2'";

const TokenGOST        = "'Токен ГОСТ'";
const TokenPass        = "'Токен PASS'";
const LifePad_str      = "'LifePAD'";

const NecessaryState_1 = "ПОДКЛЮЧЕНА";
const NecessaryState_2 = "ОТКЛЮЧЕНА";

const LifePad          = 205;

 private macro GetFrontOutParams (_conn, NeedPrintLog)
  var BTime, ETime, TotalTime, i = 0;
  array param, out;
  /*Загрузка информации о токенах*/
  var sqlQuery = "   INSERT INTO USR_FRONT_TOKENINFO (F_CLIENT, RS_CODE_CLIENT,CLIENT_NAME, SERVICE_TYPE, DATE_BEGIN, STATUS, TOKEN_COUNT) "
                 "   VALUES ( :m_f_client,  "
                 "             concat ('01', lpad (:m_rs_code_client, 10, '0')),  "
                 "            :m_client_name,  "
                 "            :m_service_type,  "
                 "            :m_date_begin,  "
                 "            :m_status, "
                 "            :m_count ) ";
  var sqlParams = TArray ();
    
   param [0] = {MFO_BANK};
    
   var ado = RSADORecordset (ExecuteFrontProcEx ("rsb6_ask_client_token", param, _conn, 26, Out));
   
   begaction(100,"Получение данных из Фронта", false);
   BTime = time();
    
   RSLDefCon.BeginTrans ();
   execSQL ("delete from USR_FRONT_TOKENINFO ");
   while (ado.movenext ())
   
     if (strlen(ado.m_value [5]) > 10 )
       ado.m_value [5] = substr(ado.m_value [5], 1, index(ado.m_value [5], strfor(32)));
     end;
   
     sqlParams = makeArray (SQLParam ("m_f_client"       ,ado.m_value [0]),    // ID клиента во фронте
                            SQLParam ("m_rs_code_client" ,ado.m_value [1]),    // RS код клиента
                            SQLParam ("m_client_name"    ,ado.m_value [2]),    // Наименование клиента
                            SQLParam ("m_service_type"   ,ado.m_value [3]),    // Тип Токена
                            SQLParam ("m_date_begin"     ,ado.m_value [4]),    // Начало
                            SQLParam ("m_status"         ,ado.m_value [5]),    // Состояние
                            SQLParam ("m_count"          ,ado.m_value [6]) );  // Количество
     if (   (isNull(ado.m_value [0]))
         or (isNull(ado.m_value [1]))
         or (isNull(ado.m_value [2]))
         or (isNull(ado.m_value [3]))
         or (isNull(ado.m_value [4]))
         or (isNull(ado.m_value [5]))
         or (isNull(ado.m_value [6])) )
       if (NeedPrintLog)
         println("Запись с номером "+ado.rs.AbsolutePosition+" импортирована не будет - ошибочный тип возвращаемого значения");
       end;
     else 
       if (ado.m_value[4] == DateU)
       execSQL (sqlQuery, sqlParams, true );
       end;
     end;
     
   end; 
   /*Загрузка информации о токенах*/
   
  /*Загрузка информации о LifePad'ах*/
      sqlQuery = " INSERT INTO USR_FRONT_CLUBCARDINFO (RS_CODE_CLIENT, " +
                 "                                     CLIENT_NAME, " +
                 "                                     INN, " +
                 "                                     SERVICE_STATUS, " +
                 "                                     SERVICE_NAME, " +
                 "                                     SERVICE_TYPE, " +
                 "                                     SERVICE_KIND, " +
                 "                                     DATE_BEGIN_SERVICES, " +
                 "                                     DATE_END_SERVICES, " +
                 "                                     DATE_MINING, " +
                 "                                     SERVICE_COUNT) " +
                 "   VALUES   (CONCAT ('01', LPAD (:m_rs_code_client, 10, '0')), " +
                 "             :m_client_name, " +
                 "             :m_inn, " +
                 "             :m_stat_name, " +
                 "             :m_name, " +
                 "             :m_linktype, " +
                 "             :m_type_service, " +
                 "             :m_date_begin_services, " +
                 "             :m_date_end_services, " +
                 "             :m_date_mining, " +
                 "             :m_service_count)";
     sqlParams = TArray ();
  
   if   (Bank_Name.is_PRBB)
      param [0] = 252;
   elif (Bank_Name.is_GEB)
      param [0] = 1963;
   elif (Bank_Name.is_VUZ)
      param [0] = 2519;   
   elif (Bank_Name.is_SLD)
      param [0] = 346;
   elif (Bank_Name.is_GO)
      param [0] = 8437;
   elif (Bank_Name.is_EXV_Stavropol)
      param [0] = 8484;
   elif (Bank_Name.is_EXV_Volgograd)
      param [0] = 127;
   elif (Bank_Name.is_EXV_Voronezh)
      param [0] = 9000;
   elif (Bank_Name.is_EXV_Ulyanovsk)
      param [0] = 7743;
   else
      param [0] = 133;
   end;
   
   param [1] = DateU;
   param [2] = DateU;
   
   execSQL ("DELETE FROM USR_FRONT_CLUBCARDINFO WHERE SERVICE_TYPE = " + LifePad);
   

   param [3] = LifePad;
   ado = RSADORecordset (ExecuteFrontProcEx ("rsb6_ask_client_services", param, _conn, 26, Out));
     
   while (ado.movenext ())
    
     i = 0;
     while (i < ado.m_value.size)
     
       if ( (   (i == 7) 
             or (i == 8)) 
           and (isNull(ado.m_value [i]) ) 
          )
          ado.m_value [i] = date(0,0,0);
       end;
       
       if (isNull(ado.m_value [i]))
         if (i == 9)
           ado.m_value [i] = 0;
         else
           ado.m_value [i] = StrFor(1);
         end;
       end;
         
       i = i + 1;
     end;
  
     if (    (StrUpr(ado.m_value [3]) == NecessaryState_1) 
          or (StrUpr(ado.m_value [3]) == NecessaryState_2) )
       sqlParams = makeArray (SQLParam ("m_rs_code",             ado.m_value [0]),    // RS код клиента
                              SQLParam ("m_client_name",         ado.m_value [1]),    // Наименование клиента
                              SQLParam ("m_inn",                 ado.m_value [2]),    // ИНН клиента
                              SQLParam ("m_stat_name",           ado.m_value [3]),    // Статус услуги
                              SQLParam ("m_name",                ado.m_value [4]),    // Наименования услуги
                              SQLParam ("m_linktype",            ado.m_value [5]),    // Тип услуги
                              SQLParam ("m_type_service",        ado.m_value [6]),    // Виж услуги
                              SQLParam ("m_date_begin_services", ado.m_value [7]),    // Дата подключения услуги
                              SQLParam ("m_date_end_services",   ado.m_value [8]),    // Дата отключения услуги
                              SQLParam ("m_date_mining",         {curdate}      ),    // Дата загрузки
                              SQLParam ("m_service_count",       ado.m_value [9]) );  // Количество подключенных услуг

       if (ado.m_value[7] == DateU)
         execSQL (sqlQuery, sqlParams, true );
       end;
     end;
       
   end; 
   
   ETime = time();
   TotalTime = Etime - Btime;
   RSLDefCon.CommitTrans ();
   if (NeedPrintLog)
     println("Время выполнения процедуры - " + TotalTime);
   end;
   return RSL_EXIT_SUCCESS;
 onError
   RSLDefCon.RollbackTrans ();
   return RSL_EXIT_FAILURE;
  endaction(0);
 end;
 
 private macro DisconnectCommissions()
  message ("Отключение комиссий");
  var sql = RSDCommand( "    UPDATE   dsfconcom_dbt " +
                        "       SET   t_status = 1 " +
                        "     WHERE   t_commnumber IN (select C.T_NUMBER " +
                        "                                from dsfcomiss_dbt c " +
                        "                               where C.T_CODE in ("+ComissCode713+" , " +
                        "                                                  "+ComissCode714+" , " +
                        "                                                  "+ComissCode761+" , " +
                        "                                                  "+ComissCode762+" ) " +
                        "                                 and C.T_FEETYPE = 1) " +
                        "    AND t_feetype = 1 " +
                        "    AND t_objecttype = 659 " +
                        "    AND t_status = 0 " );
  sql.execute();
 end;

 private macro GetPartyIDRecordSet(ComCode)
  var rs;
   if (ComCode == ComissCode713)
     rs = " SELECT   O.T_OBJECTID " +
          "   FROM   dobjcode_dbt o " +
          "  WHERE   O.T_OBJECTTYPE = 3 AND O.T_CODEKIND = 1 AND O.T_STATE = 0 " +
          "          AND O.T_CODE IN " +
          "                   (SELECT   ufti.RS_CODE_CLIENT " +
          "                      FROM   usr_front_tokeninfo ufti " +
          "                     WHERE   ufti.SERVICE_TYPE = " + TokenGOST + ")";
   elif (ComCode == ComissCode714)
     rs = " SELECT   O.T_OBJECTID " +
          "   FROM   dobjcode_dbt o " +
          "  WHERE   O.T_OBJECTTYPE = 3 AND O.T_CODEKIND = 1 AND O.T_STATE = 0 " +
          "          AND O.T_CODE IN " +
          "                   (SELECT   ufti.RS_CODE_CLIENT " +
          "                      FROM   usr_front_tokeninfo ufti " +
          "                     WHERE   ufti.SERVICE_TYPE = " + TokenPass + ")";
   elif (    (ComCode == ComissCode761)
          or (ComCode == ComissCode762) )
     rs = " SELECT   O.T_OBJECTID " +
          "   FROM   dobjcode_dbt o " +
          "  WHERE       O.T_OBJECTTYPE = 3 " +
          "          AND O.T_CODEKIND = 1 AND O.T_STATE = 0 " +
          "          AND O.T_CODE IN (SELECT   DISTINCT (UFCCI.RS_CODE_CLIENT) " +
          "                             FROM   usr_front_clubcardinfo ufcci " +
          "                            WHERE   UFCCI.SERVICE_TYPE = "+ LifePad + " )";
   end;
  return rs;
 end;

 private macro GetComissNumber(ComCode)
  var rs;
   rs= RSDRecordSet("select C.T_NUMBER from dsfcomiss_dbt c where C.T_CODE = "+ComCode+" and C.T_FEETYPE = 1");
   if(rs and rs.movenext());
     return rs.value(0);
   else
     return -1;
   end;
 end;

 private macro GetCommandTextForConnect(rs)
  var cmd = RSDCommand( " UPDATE   dsfconcom_dbt con1 " +
                        "    SET   t_status = 0" +
                        "  WHERE       con1.t_objecttype = 659" +
                        "          AND con1.t_objectid in " +
                        "                (SELECT   MIN (t_id)" +
                        "                   FROM   dsfcontr_dbt" +
                        "                  WHERE       t_objecttype = 1" +
                        "                          AND t_servkind = 3" +
                        "                          AND t_fiid = 0" +
                        "                          AND substr(t_object,1,3) in ('405', '406', '407', '408')" +
                        "                          AND (T_DATECLOSE = to_date('01.01.0001','dd.mm.yyyy') or T_DATECLOSE >= trunc(sysdate))" +
                        "                          AND T_PARTYID in ("+rs+") " +
                        "                          group by T_PARTYID) " +
                        "          AND con1.t_feetype = 1" +
                        "          AND con1.t_commnumber = :1" +
                        "          AND (CON1.T_DATEEND = TO_DATE ('01.01.0001', 'dd.mm.yyyy') OR CON1.T_DATEEND >= TRUNC (SYSDATE))" +
                        "          AND con1.t_id =" +
                        "                (SELECT   MAX (con2.t_id)" +
                        "                   FROM   dsfconcom_dbt con2" +
                        "                  WHERE       con2.t_objecttype = con1.t_objecttype" +
                        "                          AND con2.t_objectid = con1.t_objectid" +
                        "                          AND con2.t_feetype = con1.t_feetype" +
                        "                          AND con2.t_commnumber = con1.t_commnumber)");
  return cmd;
 end;

 private macro ConnectComissions(NeedPrintLog)
  var BTime, ETime, TotalTime;
  var cmd, rs, cnumber;
  
   begaction(100,"Подключение комиссий", false);
   BTime = time();
   RSLDefCon.BeginTrans ();
   
   rs      = GetPartyIDRecordSet(ComissCode713);
   cnumber = GetComissNumber(ComissCode713);
   cmd     = GetCommandTextForConnect(rs);
   cmd.AddParam( "1", RSDBP_IN, cnumber );
   cmd.execute();
  
   rs      = GetPartyIDRecordSet(ComissCode714);
   cnumber = GetComissNumber(ComissCode714);
   cmd     = GetCommandTextForConnect(rs);
   cmd.AddParam( "1", RSDBP_IN, cnumber );
   cmd.execute();
  
   rs      = GetPartyIDRecordSet(ComissCode761);
   cnumber = GetComissNumber(ComissCode761);
   cmd     = GetCommandTextForConnect(rs);
   cmd.AddParam( "1", RSDBP_IN, cnumber );
   cmd.execute();
   
   rs      = GetPartyIDRecordSet(ComissCode762);
   cnumber = GetComissNumber(ComissCode762);
   cmd     = GetCommandTextForConnect(rs);
   cmd.AddParam( "1", RSDBP_IN, cnumber );
   cmd.execute();
  
   ETime = time();
   TotalTime = Etime - Btime;
   RSLDefCon.CommitTrans ();
   if (NeedPrintLog)
     println("Время выполнения подключения - " + TotalTime);
   end;
   endaction(0);
   return RSL_EXIT_SUCCESS;
  onError
   RSLDefCon.RollbackTrans ();
   endaction(0);
 end;

 private macro PrintReport (NeedPrintLog)
    begaction(100,"Печать отчета", false);
    if (NeedPrintLog)
      PrintLn ("ПОДКЛЮЧЕНЫ КОМИССИИ ПО ДОГОВОРАМ ОБСЛУЖИВАНИЯ");
    end;
              
    var sql = "     SELECT   t_object, " +
              "             (SELECT   t_code " +
              "                FROM   dobjcode_dbt " +
              "               WHERE       t_objecttype = 3 " +
              "                       AND t_codekind = 1 " +
              "                       AND t_state = 0 " +
              "                       AND t_objectid = c.t_partyid) " +
              "                m_code, " +
              "             (SELECT   t_name " +
              "                FROM   dparty_dbt " +
              "               WHERE   t_partyid = c.t_partyid) " +
              "                m_client, " +
              "             CM.T_CODE comcode, CM.T_NAME comname " +
              "      FROM   dsfcontr_dbt c, dsfconcom_dbt com, dsfcomiss_dbt cm " +
              "     WHERE   C.T_ID IN " +
              "                   (SELECT   DISTINCT (t_objectid) " +
              "                      FROM   dsfconcom_dbt " +
              "                     WHERE       t_commnumber = com.t_commnumber " +
              "                             AND t_feetype = com.t_feetype " +
              "                             AND t_objecttype = com.t_objecttype " +
              "                             AND t_status = com.t_status " +
              "                             AND (t_dateend = '01.01.0001' OR t_dateend > SYSDATE)) " +
              "       AND c.t_objectType = 1 " +
              "      AND c.t_servKind = 3 " +
              "      AND COM.T_OBJECTID = C.T_ID " +
              "      AND com.t_commnumber IN ("+GetComissNumber(ComissCode713)+","+
              "                               "+GetComissNumber(ComissCode714)+","+
              "                               "+GetComissNumber(ComissCode761)+","+
              "                               "+GetComissNumber(ComissCode762)+")"+
              "      AND com.t_feetype = 1 " +
              "      AND com.t_objecttype = 659 " +
              "      AND com.t_status = 0 " +
              "      AND CM.T_NUMBER = com.t_commnumber " +
              "      AND CM.T_FEETYPE = com.t_feetype";

    sql = execSqlSelect (sql);
    
    var table = CTableReport();
    table.addColumn ("Лицевой счет", 20, AL_LEFT);
    table.addColumn ("Код"         , 12, AL_LEFT);
    table.addColumn ("Клиент"      , 30, AL_LEFT);
    table.addColumn ("Код"         , 8 , AL_LEFT);
    table.addColumn ("Комиссия"    , 70, AL_LEFT);
    table.printHead ();
    while (sql.movenext)
        table.printStringTransferByWord ( sql.value ("t_object", null, V_STRING), 
                                          sql.value ("m_code"  , null, V_STRING), 
                                          sql.value ("m_client", null, V_STRING),
                                          sql.value ("comcode" , null, V_STRING),
                                          sql.value ("comname" , null, V_STRING));
    end;
    
    table.printBottom ();
    table = null;
    
    sql = execSqlSelect ("select rs_code_client, client_name, service_type, date_begin, status, token_count from usr_front_tokeninfo");
    
    if (NeedPrintLog)
      PrintLn ("ЗАГРУЖЕНА ИНФОРМАЦИЯ ПО ТОКЕНАМ ФРОНТ");
    end;
    
    table = CTableReport();
    table.addColumn ("RS-код",     12, AL_LEFT);
    table.addColumn ("Клиент",     50, AL_LEFT);
    table.addColumn ("Продукт",    12, AL_LEFT);
    table.addColumn ("Начало",     10, AL_LEFT);
    table.addColumn ("Статус",     20, AL_LEFT);
    table.addColumn ("Количество", 10, AL_LEFT);
    table.printHead ();
    
    while (sql.movenext)
        table.printStringTransferByWord ( sql.value ("rs_code_client", null, V_STRING  ),
                                          sql.value ("client_name"   , null, V_STRING  ),
                                          sql.value ("service_type"  , null, V_STRING  ),
                                          sql.value ("date_begin"    , null, V_DATE    ),
                                          sql.value ("status"        , null, V_STRING  ),
                                          sql.value ("token_count"   , null, V_STRING  )
                                        );                                          
    end;
    table.printBottom ();
    table = null;
    
    table = CTableReport();
    table.addColumn ("RS-код",         12, AL_LEFT);
    table.addColumn ("Клиент",         50, AL_LEFT);
    table.addColumn ("ИНН",            12, AL_LEFT);
    table.addColumn ("Статус",         10, AL_LEFT);
    table.addColumn ("Имя",            30, AL_LEFT);
    table.addColumn ("Тип",            4,  AL_LEFT);
    table.addColumn ("Вид",            20, AL_LEFT);
    table.addColumn ("Дата начала",    10, AL_LEFT);
    table.addColumn ("Дата окончания", 10, AL_LEFT);
    table.addColumn ("Дата загрузки",  10, AL_LEFT);
    table.addColumn ("Кол-во услуг",   2,  AL_LEFT);
    table.printHead ();
    
    sql = execSqlSelect (" SELECT UFCCI.RS_CODE_CLIENT, " +
                         "        UFCCI.CLIENT_NAME, " +
                         "        UFCCI.INN, " +
                         "        UFCCI.SERVICE_STATUS, " +
                         "        UFCCI.SERVICE_NAME, " +
                         "        UFCCI.SERVICE_TYPE, " +
                         "        UFCCI.SERVICE_KIND, " +
                         "        UFCCI.DATE_BEGIN_SERVICES, " +
                         "        NVL(UFCCI.DATE_END_SERVICES, TO_DATE('01.01.0001')) DATE_END_SERVICES, " +
                         "        UFCCI.DATE_MINING, " +
                         "        UFCCI.SERVICE_COUNT " +
                         "   FROM USR_FRONT_CLUBCARDINFO UFCCI" +
                         "  WHERE UFCCI.SERVICE_STATUS IN ('Подключена', 'Отключена') AND SERVICE_TYPE = " + LifePad +
                         " ORDER BY UFCCI.SERVICE_NAME, UFCCI.SERVICE_KIND ");
    
    while (sql.movenext)
        table.printStringTransferByWord ( sql.value ("rs_code_client",      null, V_STRING  ),
                                          sql.value ("client_name",         null, V_STRING  ),
                                          sql.value ("inn",                 null, V_STRING  ),
                                          sql.value ("service_status",      null, V_STRING  ),
                                          sql.value ("SERVICE_NAME",        null, V_STRING  ),
                                          sql.value ("SERVICE_TYPE",        null, V_INTEGER ),
                                          sql.value ("SERVICE_KIND",        null, V_STRING  ),
                                          sql.value ("DATE_BEGIN_SERVICES", null, V_DATE    ),
                                          sql.value ("DATE_END_SERVICES",   null, V_DATE    ),
                                          sql.value ("DATE_MINING",         null, V_DATE    ),
                                          sql.value ("SERVICE_COUNT",       null, V_INTEGER )
                                        );                                          
    end;
    
    table.printBottom ();
    
    endaction(0);
 end;


 private macro initUpdateOperation (NeedPrintLog)
    var c    = FR_GlobalConnection (FR_LEGAL, "RS-Bank::Обновление информации о токена ФЮЛ");
    var conn = c.StartPooling (); 

    message ("Выполняется обновление...");

    getFrontOutParams (conn, NeedPrintLog);
    c.endPooling (); 
    
    c = null; 

    message ("Обновление завершено");
 end;

MACRO Main_Unit(Update_Date, NeedPrintLog)

 DateU = Update_Date;
 initUpdateOperation (NeedPrintLog);  // обновление
 DisconnectCommissions(NeedPrintLog); // отключатор
 ConnectComissions(NeedPrintLog);     // подключатор
 
 if (NeedPrintLog)
   PrintReport ();          // отчет (печать полной таблицы)
   exit (RSL_EXIT_SUCCESS); // нормальный человеческий выход (0 = видно печатную форму отчёта)
 end;
 
END;