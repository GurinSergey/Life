/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

   EVG Макрос пользовательского алгоритма расчёта базовых сумм по комиссии 3.6.0 
       "Перевод денежных средств, поступивших в составе рейсов МЦИ текущего дня"

       Тип комиссии - единовременная.

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/


import sfinter, ptinter, cb_sql;/*InsertSumList*/

/*
    Если при расчете произошла ошибка, поместить в эту переменную ненулевое значение
*/
var MacroError :integer = 0;
private var FICode_calc:string = "";

  /* Тип величины
enum SfBaseTypes{*/
private const   SF_BASETYPE_SUM     = 1;      /* Сумма*/
private const   SF_BASETYPE_QUONT   = 2;      /* Количество*/

private const NATCUR = 0;
    record sfbassum( "sfbassum.str" );


/*
    Расчет для единовременных комиссий
*/
macro CalcCommissionSum( docKind/*Тип первички*/, Doc/*Буфер первички*/, sfcalcalusr_addr/*Алгоритм расчета*/, sfcontr_addr /*Договор обслуживания*/, beginDate, endDate  )
    record sfclusr( "sfclusr.str" );
    record sfcontr( sfcontr );
    record sfcalcal(sfcalcal);
    record payord(pspayord);

    var stat:integer; 
    var query, rs;
    var CommQuont = 0,
        CommSum   = $0,
        OurBIC    = "",
        error,
        PaymValueDate,
        PrevRest,
        InternalIncome,
        PaySum,
        ExternalPaymentCoverage;
    

    SetBuff( sfcalcal, sfcalcalusr_addr );
    SetBuff( sfcontr, sfcontr_addr );
    SetBuff( payord, Doc );


    PrevRest = InternalIncome = PaySum = ExternalPaymentCoverage = $0;


    /* Получаем БИК нашего банка */
    OurBIC = ПолучитьКодСубъекта( {OurBank}, PTCK_BIC, error );
    if ( error > 0 )
       msgbox ( "Расчёт комиссий 3.6.0: Ошибка получения БИК нашего банка!" );
    end;
    
    /* Найдём необходимую информацию по платежу */
    query = " Select paym.t_ValueDate " +
            "   From DPmPaym_dbt paym " +
            "  Where paym.t_DocKind    = " + docKind +
            "    and paym.t_DocumentID = " + payord.OrderID;
    rs = rsdRecordSet(query);
    if (rs and rs.moveNext())
       PaymValueDate = rs.value(0, null, V_DATE);
    end;


    /* Получим остаток по счёту на конец дня, предшествующего дате документа */
    PrevRest = RestA( sfcontr.Object, (PaymValueDate - 1) );

    
    /* Рассчитаем сумму внутреннего прихода счёта за день проводки документа */
    query = " Select nvl(sum(paym.t_Amount), 0) " +
            "   From DPmPaym_dbt paym, DPmProp_dbt propD, DPmProp_dbt propC " +
            "  Where paym.t_ReceiverAccount = " + GetSQLString(sfcontr.Object) +
            "    and paym.t_ValueDate       = " + GetSQLDate(PaymValueDate) +
            "    and propD.t_PaymentID      = paym.t_PaymentID " +
            "    and propD.t_DebetCredit    = 0 " +
            "    and propC.t_PaymentID      = paym.t_PaymentID " +
            "    and propC.t_DebetCredit    = 1 " +
            "    and propD.t_BankCode       = " + GetSQLString(OurBIC) +
            "    and propC.t_BankCode       = " + GetSQLString(OurBIC);
    rs = rsdRecordSet(query);
    if (rs and rs.moveNext())
       InternalIncome = rs.Value(0, null, V_MONEY);
    end;

    /* Определим сумму платежей за дату документа */
    query = " Select nvl(sum(paym.t_Amount), 0) " +
            "   From DPmPaym_dbt paym, DPmProp_dbt propD " +
            "  Where paym.t_PayerAccount = " + GetSQLString(sfcontr.Object) +
            "    and paym.t_ValueDate    = " + GetSQLDate(PaymValueDate) +
            "    and propD.t_PaymentID   = paym.t_PaymentID " +
            "    and propD.t_DebetCredit = 0 " +
            "    and propD.t_BankCode    = " + GetSQLString(OurBIC);
    rs = rsdRecordSet(query);
    if (rs and rs.moveNext())
       PaySum = rs.Value(0, null, V_MONEY);
    end;


    /* Определим, производится ли оплата за счёт сумм, поступивших внешним платежом */
    ExternalPaymentCoverage = PaySum - (PrevRest + InternalIncome);

    if (ExternalPaymentCoverage > $0)
       CommSum = ExternalPaymentCoverage;
    end;
    
    ClearRecord(sfbassum);

    sfbassum.baseType  = SF_BASETYPE_SUM;
    sfbassum.baseSum   = CommSum;

    sfbassum.baseType2  = SF_BASETYPE_SUM;
    sfbassum.baseSum2   = CommSum;

    stat = InsertSumList(sfbassum);

    if( stat )
      MsgBox("Ошибка при вставке базовой суммы: ", GetErrMsg );
    end;

    
    
    /*return integer( 1 ); -- количество*/
    
    /*return $1; -- сумма */
    
end;/*CalcCommissionSum*/




/*
    Печать заголовка подробного отчета о расчете периодической комиссии
*/
macro CalcReportPrintHeader( sfrepdet )
    FICode_calc = "";
[----------------------------------------------------------------------------------------------------------------------];
[|             Сумма                    |             Ставка                   |              Итого                   |];
[|                                      |                                      |                                      |];
[----------------------------------------------------------------------------------------------------------------------];
    return 0;
end;/*CalcReportPrintHeader*/

/*
    Печать строчки отчета подробного отчета о расчете периодической комиссии
*/
macro CalcReportPrintLine( sfrepdet )
    var FICode_base, FICOde_tariff:string;
    file fininstr( fininstr )key 0;
    
    if(sfrepdet.baseType == SF_BASETYPE_SUM )
        fininstr.FIID = sfrepdet.FIID_baseSum;
        if( not GetEQ(fininstr))
            MsgBox("Не найдена валюта ", sfrepdet.FIID_baseSum );
            return 1;
        end;
        FICode_base = fininstr.FI_code;
    else
        FICode_base = "";
    end;

    fininstr.FIID = sfrepdet.FIID_tariff;
    if( not GetEQ(fininstr))
        MsgBox("Не найдена валюта ", sfrepdet.FIID_tariff );
        return 1;
    end;
    FICOde_tariff = fininstr.FI_code;

    fininstr.FIID = sfrepdet.FIID_CalcSum;
    if( not GetEQ(fininstr))
        MsgBox("Не найдена валюта ", sfrepdet.FIID_CalcSum );
        return 1;
    end;
    FICode_calc = fininstr.FI_code;


[| ################### ################ | ################### ################ | ################### ################ |]

    ( sfrepdet.BaseSum, FICode_base,
        sfrepdet.tariff, FICOde_tariff,
        sfrepdet.CalcSum, FICode_calc );

    return 0;
end;/*CalcReportPrintLine*/

/*
    Печать окончания отчета подробного отчета о расчете периодической комиссии
*/
macro CalcReportPrintFooter( sfrepdet, TotalSum )

[----------------------------------------------------------------------------------------------------------------------];
[Итого за период                                                               | ################### ################ |]
(TotalSum, FICode_calc);
[----------------------------------------------------------------------------------------------------------------------];
    return 0;
end;/*CalcReportPrintFooter*/

