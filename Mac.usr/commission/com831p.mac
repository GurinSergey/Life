/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

   EVG Макрос пользовательского алгоритма расчёта базовых сумм комиссии 8.3.1
       "Аб. плата за пересчет выручки,проинкассированной за пределами МКАД".

       Тип комиссии - периодическая.

       Комментарий.
       Сумма комиссии рассчитывается как разность между тарифом, установленным по
       комиссии 8.3.1 и суммой разовых комиссий 8.3.2-8.3.6, взысканных с клиента
       за отчётный период.

       Значение тарифа по комиссии 8.3.1 задаётся в поле "Максимальная сумма" та-
       рифа с базовой суммой > 0.00. Кроме этого, обязательным является наличие 
       второго тарифа с базовой суммой > 0.01 и значением 100%, который будет 
       использоваться для получения суммы комиссии.
       
       Таким образом для расчёта комиссии, необходимо 2 тарифа:
          - первый тариф (база > 0.00) используется для указания значения тарифа 
            в графе "Макс. сумма";
          - второй тариф (база > 0.01) - реально использующийся при расчёте 
            комиссии, в котором указано значение 100% и не указано максимальной 
            суммы.

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/

import sfinter, ctinter, cb_sql;

/*
    Если при расчете произошла ошибка, поместить в эту переменную ненулевое значение
*/
var MacroError :integer = 0;
private var FICode_calc:string = "";

  /* Тип величины
enum SfBaseTypes{*/
private const   SF_BASETYPE_SUM     = 1;      /* Сумма*/
private const   SF_BASETYPE_QUONT   = 2;      /* Количество*/

private const NATCUR = 0;
record sfbassum( "sfbassum.str" );

CONST ComCodePrefix = "8.3",    // Группа комиссий
      PerComSuffix  = ".1";     // Суффикс комиссии группы, которая является периодической (!!!)

// Вид примечаний "Количество точек за пределами МКАД (для тарифа 8.3.1)"
CONST NOTEKIND_POINTCOUNT = 152;

/*
    Расчет для периодических комиссий
*/
/* EVG Добавил приём структуры sfcontr для вызова из макроса sfacrpay.mac */
macro CalcServiceSum( sfcontr_addr/*Договор обслуживания*/, BeginDate/*Начало периода*/, EndDate/*Конец периода*/,
      sAddr /* EVG Какой-то ещё адрес */, sfcontrStruc /*Cтруктура sfcontr*/ )

    record sfcontr( sfcontr );
    record acc( account );

    var query, rs, stat;
    var CommSum = $0;
    var TarifValue, SingComSum, PointsCount;


    /* EVG При вызове из sfacrpay.mac используем полученную структуру sfcontrStruc вместо адреса sfcontr_addr */
    if ( ValType (sfcontr_addr) != V_UNDEF )
       SetBuff( sfcontr, sfcontr_addr );
    else
       Copy ( sfcontr, sfcontrStruc );
    end;


    /* Определяем количество точек (из примечания к счёту) и в случае, если примечание
       определено, умножаем полученную сумму комиссии на количество точек. */
    ClearRecord(acc);
    acc.Account       = sfcontr.Object;
    acc.Chapter       = 1;
    acc.Code_currency = sfcontr.FIID;

    PointsCount = 0;
    PointsCount = readNoteForObject(OBJTYPE_ACCOUNT, UniID(acc, OBJTYPE_ACCOUNT), NOTEKIND_POINTCOUNT);

    
    /* Получим значение тарифа */
    TarifValue = $0;
    SingComSum = $0;
    query = " Select NVL(trf.t_MaxValue/10000, 0) " +
            "   From DSFTARIF_DBT trf, DSFTARSCL_DBT scl, DSFCOMISS_DBT com " +
            "  Where com.t_FeeType      = 1 " +               // Тип взимания: периодическое
            "    and com.t_Code         = " + GetSQLString(ComCodePrefix + PerComSuffix) +
            "    and scl.t_FeeType      = com.t_FeeType " +
            "    and scl.t_CommNumber   = com.t_Number " +
            "    and scl.t_BeginDate    = ( Select max(t_BeginDate) from DSFTARSCL_DBT " +
            "                                Where t_FeeType         = com.t_FeeType " +
            "                                  and t_CommNumber      = com.t_Number " +
            "                                  and t_BeginDate between " + GetSQLDate(BeginDate) +
            "                                                      and " + GetSQLDate(EndDate) +
            "                                   or t_BeginDate       = " + GetSQLDate(date(0,0,0)) + " ) " +
            "    and trf.t_TarSclID     = scl.t_ID " +
            "    and trf.t_BaseSum      = 0 ";
    rs = rsdRecordSet(query);
    if (rs and rs.moveNext())
       TarifValue = rs.value(0, null, V_DOUBLE);
       TarifValue = TarifValue * PointsCount;
    end;


    if ( TarifValue > 0 )

       /* Посчитаем сумму взысканных разовых комиссий группы */
       query = " Select NVL(sum(sing.t_Sum), 0) " +
               "   From DSFCOMISS_DBT com, DSFSINGDF_DBT sing " +
               "  Where com.t_FeeType            = 6 " +                   // Тип взимания: разовое
               "    and SubStr(com.t_Code, 1, 3) = " + GetSQLString(ComCodePrefix) +
               "    and sing.t_FeeType           = com.t_FeeType " +
               "    and sing.t_CommNumber        = com.t_Number " +
               "    and sing.t_AccountPayer      = " + GetSQLString(sfcontr.Object) +
               "    and sing.t_CommDate  between " + GetSQLDate(BeginDate) +
               "                             and " + GetSQLDate(EndDate) +
               "    and sing.t_Status            = 2";                     // Статус: закрытые
       rs = rsdRecordSet(query);
       if (rs and rs.moveNext())
          SingComSum = rs.value(0, null, V_MONEY);

          CommSum = TarifValue - SingComSum;
       end;
    end;

    if (CommSum < $0)
       CommSum = $0;
    end;


    /* EVG
    /* Если примечание не определено или равно нулю, сумму комиссии не изменяем */
    if (PointsCount > 0)
       //CommSum = CommSum * PointsCount;
    else
       msgbox ("Для лицевого счёта № \"" + sfcontr.Object + "\" не задано значение примечания вида " + NOTEKIND_POINTCOUNT + "."
               "|Количество точек принимаем равным одной.");
    end;*/
    
    
    
    /* EVG При вызове из sfacrpay.mac возвращаем true в случае положительного результата расчёта */
    if ( ValType (sfcontrStruc) != V_UNDEF )
       if (CommSum > 0)
          return true;
       end;
       return false;
    end;

    
    ClearRecord(sfbassum);

    sfbassum.baseType = SF_BASETYPE_SUM;
    sfbassum.baseSum  = CommSum;

    sfbassum.baseType2 = SF_BASETYPE_SUM;
    sfbassum.baseSum2  = CommSum;

    stat = InsertSumList(sfbassum);

    if( stat )
      MsgBox("Ошибка при вставке базовой суммы");
    end;

    
end;/*CalcServiceSum*/








/*
    Печать заголовка подробного отчета о расчете периодической комиссии
*/
macro CalcReportPrintHeader( sfrepdet )
    FICode_calc = "";
[----------------------------------------------------------------------------------------------------------------------];
[|             Сумма                    |             Ставка                   |              Итого                   |];
[|                                      |                                      |                                      |];
[----------------------------------------------------------------------------------------------------------------------];
    return 0;
end;/*CalcReportPrintHeader*/

/*
    Печать строчки отчета подробного отчета о расчете периодической комиссии
*/
macro CalcReportPrintLine( sfrepdet )
    var FICode_base, FICOde_tariff:string;
    file fininstr( fininstr )key 0;
    
    if(sfrepdet.baseType == SF_BASETYPE_SUM )
        fininstr.FIID = sfrepdet.FIID_baseSum;
        if( not GetEQ(fininstr))
            MsgBox("Не найдена валюта ", sfrepdet.FIID_baseSum );
            return 1;
        end;
        FICode_base = fininstr.FI_code;
    else
        FICode_base = "";
    end;

    fininstr.FIID = sfrepdet.FIID_tariff;
    if( not GetEQ(fininstr))
        MsgBox("Не найдена валюта ", sfrepdet.FIID_tariff );
        return 1;
    end;
    FICOde_tariff = fininstr.FI_code;

    fininstr.FIID = sfrepdet.FIID_CalcSum;
    if( not GetEQ(fininstr))
        MsgBox("Не найдена валюта ", sfrepdet.FIID_CalcSum );
        return 1;
    end;
    FICode_calc = fininstr.FI_code;


[| ################### ################ | ################### ################ | ################### ################ |]

    ( sfrepdet.BaseSum, FICode_base,
        sfrepdet.tariff, FICOde_tariff,
        sfrepdet.CalcSum, FICode_calc );

    return 0;
end;/*CalcReportPrintLine*/

/*
    Печать окончания отчета подробного отчета о расчете периодической комиссии
*/
macro CalcReportPrintFooter( sfrepdet, TotalSum )

[----------------------------------------------------------------------------------------------------------------------];
[Итого за период                                                               | ################### ################ |]
(TotalSum, FICode_calc);
[----------------------------------------------------------------------------------------------------------------------];
    return 0;
end;/*CalcReportPrintFooter*/

