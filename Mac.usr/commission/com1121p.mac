/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

   Макрос пользовательского алгоритма расчёта базовых сумм комиссии за эквайринг 
   в случае, если обороты за месяц по счетам ДБМС менее 100 тыс. руб.
   (для ПРББ)
   
   Комиссия списывается только у тех клиентов, у которых на одном из счетов стоит 
   польз. тип V. Списывается за платежи со сч. 30233* в Дебете, если общая их сумма
   за месяц составила менее 100 000 руб. (даже, если 0 руб.)
  
    Тип комиссии - периодическая.
              
    04-06-2013 Жаворонкова Н. (joy) C-20120


    Changes:
    22.11.2013 Жаворонкова Н. (joy) C-24318 Адаптация для ГЭБа
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/


import sfinter, cb_sql, CommissLib;

/*
    Если при расчете произошла ошибка, поместить в эту переменную ненулевое значение
*/
var MacroError :integer = 0;
private var FICode_calc:string = "";

  /* Тип величины
enum SfBaseTypes{*/
private const   SF_BASETYPE_SUM     = 1;      /* Сумма*/
private const   SF_BASETYPE_QUONT   = 2;      /* Количество*/

//private const NATCUR = 0;
record sfbassum( "sfbassum.str" );

/*
    Расчет для периодических комиссий
*/
/* EVG Добавил приём структуры sfcontr для вызова из макроса sfacrpay.mac */
macro CalcServiceSum( sfcontr_addr/*Договор обслуживания*/, BeginDate/*Начало периода*/, EndDate/*Конец периода*/,
      sAddr /* EVG Какой-то ещё адрес */, sfcontrStruc /*Cтруктура sfcontr*/ )

    record sfcontr( sfcontr );
    var query, rs, stat, cmd;
    var CommSum     = $0,
        CommQuont   = 0;
    var acquiring_account = "30233810609000060071"; /*Для ПРББ*/
    var flg = false;
    
    CONST CRITICAL_AMOUNT = $100000; 
    
    var mm, yy, begdate;
    dateSplit( endDate, null, mm, yy );
    BegDate = date(1, mm, yy);
debugbreak;


    /* EVG При вызове из sfacrpay.mac используем полученную структуру sfcontrStruc вместо адреса sfcontr_addr */
    if ( ValType (sfcontr_addr) != V_UNDEF )
       SetBuff( sfcontr, sfcontr_addr );
    else
       Copy ( sfcontr, sfcontrStruc );
    end;
    //debugbreak;
    
    query = " Select 1 from DUAL " +
        "  Where Exists ( Select t_UserTypeAccount From DAccount_dbt " +
        "                  Where t_Chapter       = 1 " +
        "                    and t_Client        = :client " +
        "                    and instr (t_UserTypeAccount, :usertype ) >0  " + 
        "                    and t_open_close != 'З') ";
    cmd = rsdcommand(query);
    cmd.AddParam("client", RSDBP_IN,sfcontr.partyID);
    cmd.AddParam("usertype", RSDBP_IN,"V");
    
    rs = rsdRecordSet( cmd );
    if (rs and rs.moveNext())
        flg = true;
    end;
    
    if (flg)
        GetRegistryValue ("PRBB\\ЕРЦ\\СЧЕТА ДБМС", V_STRING, acquiring_account);
        query = "select   nvl (sum (paym.t_amount), 0) as sum " +
                "  from   dpmpaym_dbt paym                    " +
                " where   paym.t_receiveraccount in           " +
                "                          (select   acc.t_account     " +
                "                             from   daccount_dbt acc  " +
                "                            where   acc.t_chapter = 1 " +
                "                             and instr (acc.t_usertypeaccount, 'V', 1) > 0 and acc.t_client = :client ) " +
                " and paym.t_paymstatus = 32000               " +
                " and RSI_RSB_Mask.compareStringWithMask (:acquiring_account, paym.t_payeraccount) > 0" +
                " and paym.t_valuedate between :begDate       " +
                "                          and :endDate       " +
                " and paym.t_receiver = :isclient             " ;
        
        cmd = rsdcommand(query);
        cmd.AddParam("client",            RSDBP_IN,sfcontr.partyID);
        cmd.AddParam("acquiring_account", RSDBP_IN,acquiring_account);
        cmd.AddParam("begdate",           RSDBP_IN,BegDate);
        cmd.AddParam("enddate",           RSDBP_IN,EndDate);
        cmd.AddParam("isclient",          RSDBP_IN,sfcontr.partyID);
        
        rs = rsdRecordSet( cmd );
        debugbreak;
        if (rs and rs.moveNext())
            if (rs.value(0, null, V_DOUBLE) < CRITICAL_AMOUNT)
                CommQuont = 1;
            end;
        end;
    end;
       

    if ( ValType (sfcontrStruc) != V_UNDEF )
       if (CommQuont > 0)
          return true;
       end;
       return false;
    end;

    debugbreak;
    ClearRecord(sfbassum);

    sfbassum.baseType = SF_BASETYPE_QUONT;
    sfbassum.baseQuont  = CommQuont;

    sfbassum.baseType2 = SF_BASETYPE_QUONT;
    sfbassum.baseQuont2  = CommQuont;

    stat = InsertSumList(sfbassum);

    if( stat )
      MsgBox("Ошибка при вставке базовой суммы");
    end;

    
end;/*CalcServiceSum*/


/*
    Печать заголовка подробного отчета о расчете периодической комиссии
*/
macro CalcReportPrintHeader( sfrepdet )
    FICode_calc = "";
[----------------------------------------------------------------------------------------------------------------------];
[|             Сумма                    |             Ставка                   |              Итого                   |];
[|                                      |                                      |                                      |];
[----------------------------------------------------------------------------------------------------------------------];
    return 0;
end;/*CalcReportPrintHeader*/

/*
    Печать строчки отчета подробного отчета о расчете периодической комиссии
*/
macro CalcReportPrintLine( sfrepdet )
    var FICode_base, FICOde_tariff:string;
    file fininstr( fininstr )key 0;
    
    if(sfrepdet.baseType == SF_BASETYPE_SUM )
        fininstr.FIID = sfrepdet.FIID_baseSum;
        if( not GetEQ(fininstr))
            MsgBox("Не найдена валюта ", sfrepdet.FIID_baseSum );
            return 1;
        end;
        FICode_base = fininstr.FI_code;
    else
        FICode_base = "";
    end;

    fininstr.FIID = sfrepdet.FIID_tariff;
    if( not GetEQ(fininstr))
        MsgBox("Не найдена валюта ", sfrepdet.FIID_tariff );
        return 1;
    end;
    FICOde_tariff = fininstr.FI_code;

    fininstr.FIID = sfrepdet.FIID_CalcSum;
    if( not GetEQ(fininstr))
        MsgBox("Не найдена валюта ", sfrepdet.FIID_CalcSum );
        return 1;
    end;
    FICode_calc = fininstr.FI_code; 


[| ################### ################ | ################### ################ | ################### ################ |]

    ( sfrepdet.BaseSum, FICode_base,
        sfrepdet.tariff, FICOde_tariff,
        sfrepdet.CalcSum, FICode_calc );

    return 0;
end;/*CalcReportPrintLine*/

/*
    Печать окончания отчета подробного отчета о расчете периодической комиссии
*/
macro CalcReportPrintFooter( sfrepdet, TotalSum )

[----------------------------------------------------------------------------------------------------------------------];
[Итого за период                                                               | ################### ################ |]
(TotalSum, FICode_calc);
[----------------------------------------------------------------------------------------------------------------------];
    return 0;
end;/*CalcReportPrintFooter*/
    
    


    
    
    
    
    