/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

   EVG Макрос пользовательского алгоритма расчёта базовых сумм комиссии 3.4.7pack
       "Прочие платежи по системе "Интернет-Клиент" до 16-00 - пакет".

       Тип комиссии - периодическая.

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/

import sfinter, cb_sql;
import CommissLib;

/*
    Если при расчете произошла ошибка, поместить в эту переменную ненулевое значение
*/
var MacroError :integer = 0;
private var FICode_calc:string = "";

  /* Тип величины
enum SfBaseTypes{*/
private const   SF_BASETYPE_SUM     = 1;      /* Сумма*/
private const   SF_BASETYPE_QUONT   = 2;      /* Количество*/

record sfbassum( "sfbassum.str" );



/*
    Расчет для периодических комиссий
*/
/* EVG Добавил приём структуры sfcontr для вызова из макроса sfacrpay.mac */
macro CalcServiceSum( sfcontr_addr/*Договор обслуживания*/, BeginDate/*Начало периода*/, EndDate/*Конец периода*/,
      sfcalcal_addr /* EVG Адрес алгоритма (sfcalcal) */, sfcontrStruc /*Cтруктура sfcontr*/, CommNumber_sfacrpay )

    record sfcontr( sfcontr );
    record calcal (sfcalcal);

    var query, rs, stat, cmd;
    var TarifValue = 0, MinValue = 0, MaxValue = 0, TarifType = 0;
    var CommNumber, CommSum = $0;


    debugbreak;
    /* EVG При вызове из sfacrpay.mac используем полученную структуру sfcontrStruc вместо адреса sfcontr_addr */
    if ( ValType (sfcontr_addr) != V_UNDEF )
       SetBuff( sfcontr, sfcontr_addr );
       SetBuff( calcal, sfcalcal_addr );

       CommNumber = calcal.CommNumber;               // CommNumber берём из алгоритма
    else
       Copy ( sfcontr, sfcontrStruc );
       CommNumber = CommNumber_sfacrpay;             // CommNumber берём тот, который пришёл из sfacrpay.mac
    end;


    /* Определим время окончания операционного дня */
    var DayEndTime = DtTm( EndDate, GetOperDayEndTime() ); 


    /* Сформируем массив платежей, превышающих лимит */
    var PaymentsOverLimit = CollectPaymentsInformation( sfcontr, BeginDate, EndDate, CommNumber, @TarifValue, @MinValue, @MaxValue, @TarifType );

    var n = 0;
    while( n < PaymentsOverLimit.Size )

       if( valtype(PaymentsOverLimit(n)) != V_UNDEF )  // На всякий случай


          /* Обрабатываются только документы, у которых счёт плательщика является объектом по ДО.
             Таким образом, комиссия по каждому документу сверх лимита будет оплачиваться в рамках того
             ДО, по счёту которого проведён документ. */
          if( PaymentsOverLimit(n).AccountPayer == sfcontr.Object )

             /* Проверки комиссии */
             if(     ( PaymentsOverLimit(n).Origin   == CLB_DocOrigin )                     // Происхождение - Клиент-банк
                 and ( PaymentsOverLimit(n).PaymTime <= DayEndTime    )          )          // Время документа (из UF1) меньше времени окончания ОД

                CommSum = CommSum + TarifValue;
             end;

          end;

       end;

       n = n + 1;
    end;



    /* EVG При вызове из sfacrpay.mac возвращаем true в случае положительного результата расчёта */
    if ( ValType (sfcontrStruc) != V_UNDEF )
       if (CommSum > $0)
          return true;
       end;
       return false;
    end;

    
    ClearRecord(sfbassum);

    sfbassum.baseType = SF_BASETYPE_SUM;
    sfbassum.baseSum  = CommSum;

    sfbassum.baseType2 = SF_BASETYPE_SUM;
    sfbassum.baseSum2  = CommSum;

    stat = InsertSumList(sfbassum);

    if( stat )
      MsgBox("Ошибка при вставке базовой суммы");
    end;

    
end;/*CalcServiceSum*/








/*
    Печать заголовка подробного отчета о расчете периодической комиссии
*/
macro CalcReportPrintHeader( sfrepdet )
    FICode_calc = "";
[----------------------------------------------------------------------------------------------------------------------];
[|             Сумма                    |             Ставка                   |              Итого                   |];
[|                                      |                                      |                                      |];
[----------------------------------------------------------------------------------------------------------------------];
    return 0;
end;/*CalcReportPrintHeader*/

/*
    Печать строчки отчета подробного отчета о расчете периодической комиссии
*/
macro CalcReportPrintLine( sfrepdet )
    var FICode_base, FICOde_tariff:string;
    file fininstr( fininstr )key 0;
    
    if(sfrepdet.baseType == SF_BASETYPE_SUM )
        fininstr.FIID = sfrepdet.FIID_baseSum;
        if( not GetEQ(fininstr))
            MsgBox("Не найдена валюта ", sfrepdet.FIID_baseSum );
            return 1;
        end;
        FICode_base = fininstr.FI_code;
    else
        FICode_base = "";
    end;

    fininstr.FIID = sfrepdet.FIID_tariff;
    if( not GetEQ(fininstr))
        MsgBox("Не найдена валюта ", sfrepdet.FIID_tariff );
        return 1;
    end;
    FICOde_tariff = fininstr.FI_code;

    fininstr.FIID = sfrepdet.FIID_CalcSum;
    if( not GetEQ(fininstr))
        MsgBox("Не найдена валюта ", sfrepdet.FIID_CalcSum );
        return 1;
    end;
    FICode_calc = fininstr.FI_code; 


[| ################### ################ | ################### ################ | ################### ################ |]

    ( sfrepdet.BaseSum, FICode_base,
        sfrepdet.tariff, FICOde_tariff,
        sfrepdet.CalcSum, FICode_calc );

    return 0;
end;/*CalcReportPrintLine*/

/*
    Печать окончания отчета подробного отчета о расчете периодической комиссии
*/
macro CalcReportPrintFooter( sfrepdet, TotalSum )

[----------------------------------------------------------------------------------------------------------------------];
[Итого за период                                                               | ################### ################ |]
(TotalSum, FICode_calc);
[----------------------------------------------------------------------------------------------------------------------];
    return 0;
end;/*CalcReportPrintFooter*/

