/*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 
                                                                                                               ██       
    ████  ████  ████  █   █  ███  ███  █  █  ███  █ █  ███       ██   ████  ████  ████  █   █  ███  ███  ███  █  █   ██ 
    █  █  █  █  █  █  ██ ██  █     █   █  █  █    █ █  █        ██    █  █  █  █  █  █  ██ ██  █     █   █    █  █    ██
    ████  ████  █  █  █ █ █  ███   █   ████  ███  █ █  ███      █     █  █  ████  █  █  █ █ █  ███   █   ███  █ ██     █
    █     █ █   █  █  █   █  █     █   █  █  █    █ █    █      ██    █  █  █     █  █  █   █  █     █   █    ██ █    ██
    █     █  █  ████  █   █  ███   █   █  █  ███  ███  ███       ██   █  █  █     ████  █   █  ███   █   ███  █  █   ██ 

   RR Рахмедов Р.С.

   Имя файла: Comiss_Agent.mac

   Создан:    02.12.2012

   Описание:  Макрос для автоматизации списание периодических комиссий, призван облегчить работу сотрудников ЕРЦ Банков 
              финансовой группы LIFE
              
   P.S.       Редактирование, рефаторинг, добавление новых функций ЗАПРЕЩЕНЫ, все делать по согласованию с автором.

   ChangeLog:
-----------------------------------------------------------------------------------------------------------------------------------------------------
   //RR 22.05.2013 Ввиду несовершенства работы с пайп каналом, перерабатываю алгоритм работы на использование
                   только конфигурационной таблицы USR_COMISS_AGENT_JOB, PIPE используется для обновления
                   списка заданий в USR_COMISS_AGENT_JOB, для этих целей используется Comiss_Agent_Send_Pipe_Message.mac
-----------------------------------------------------------------------------------------------------------------------------------------------------
   //RR 13.06.2013 Нужно сократить размер кода, путем использования рекурсивного вызова макропроцедуры
-----------------------------------------------------------------------------------------------------------------------------------------------------
   //RR 14.06.2013 В PRBB_Recursion_FirstExecute и EXV_Recursion_FirstExecute реализован механиз рекурсивного вызова,
                   сделать аналогичную реализацию в PRBB_Recursion_SubsequentLaunch и EXV_Recursion_SubsequentLaunch
                   реализовать не удалось, на первый взгляд все кажется запутанным но при ближайшем рассмотрении все становится ясно.
-----------------------------------------------------------------------------------------------------------------------------------------------------
   //RR 14.06.2013 Доработал старт сервисной операции, теперь перед ее создание будет выполнен поиск аналогичной сервисной операции,
                   если она будет найдена то робот продолжит ее оплату и не будет создавать новую, как это было раньше.
-----------------------------------------------------------------------------------------------------------------------------------------------------
   //RR 15.06.2013 Создаю ветку алгоритма, для внедрения робота в ГЭБ, попутно довожу до ума самого робота.
-----------------------------------------------------------------------------------------------------------------------------------------------------
   //RR 15.06.2013 Решена проблема с одновременным выполнением 1-го задания несколькими роботами(транзакционной целосности),
                   с помощью конструкции select...for update no wait.
-----------------------------------------------------------------------------------------------------------------------------------------------------
   //RR 21.06.2013 Создан GEB_Recursion_FirstExecute с рекурсивным вызовом, начинаю работу над GEB_Recursion_SubsequentLaunch.
-----------------------------------------------------------------------------------------------------------------------------------------------------
   //RR 27.06.2013 Внесены последние косметические правки, переношу на бой решение для ГЭБа.
-----------------------------------------------------------------------------------------------------------------------------------------------------
   //RR 01.07.2013 Добавил ClearUsrLog и ClearPayLog для очистки логов и удаления старого "хлама", исправил ошибку при которой роботы 
                   не переходили на новый операционный день.
-----------------------------------------------------------------------------------------------------------------------------------------------------
   //RR 02.07.2013 Начинаю работы по внедрению робота в ВУЗе, создана процедура VUZ_Recursion_FirstExecute.
-----------------------------------------------------------------------------------------------------------------------------------------------------
   //RR 04.07.2013 Закончил VUZ_Recursion_SubsequentLaunch, исправил страшную багу, выкладываю решение на бой.
-----------------------------------------------------------------------------------------------------------------------------------------------------
   //RR 09.07.2013 Ввиду особенностей работы ВУЗ банка(разница с МСК в +2 часа) добавлена проверка на соответсвие системной даты
                   и даты открытого опер дня, до тех пора они не станут равны робот будет ожидать, каждые 10 минут повторяя эту проверку.
-----------------------------------------------------------------------------------------------------------------------------------------------------
   //RR 16.07.2013 Добавил костыль для ВУЗа, т.к выполнение заданий завершается после перехода на новый опер. день нужно обновлять 
                   список заданий повторно, посмотрим как он себе поведет, если приживется перепишу по-человечески.
-----------------------------------------------------------------------------------------------------------------------------------------------------
   //RR 19.07.2013 Ввиду разных причин, списание комиссий завершается уже после того как планировщик 
                   обновил список заданий и часть заданий остается помеченными как завершенные для исправления этой дыры добавил 
                   WaitingAndCheckingTheTermination(), таблица USR_COMISS_AGENT_JOB дополена столбцом T_WORKMODE содержащим значение 
                   режима работы для которого будут выполнятся задания. В ПРББ время старта 01.00 ночи.
-----------------------------------------------------------------------------------------------------------------------------------------------------
   //RR 23.07.2013 Временно убираю WaitingAndCheckingTheTermination и возвращаю планировщик.
-----------------------------------------------------------------------------------------------------------------------------------------------------
   //RR 24.07.2013 При запуске подключения комиссий добавил проверку на завершенность задания, для того чтобы после перезапуска всех обработчиков
                   завершенной подключение не запускалось еще раз.
-----------------------------------------------------------------------------------------------------------------------------------------------------
   //RR 06.08.2013 Ввиду недостатка времени возвращаю костыль для ВУЗа добавленный 16.07.2013 до тех пор пока не появится время решить проблему 
                   более изящно.
-----------------------------------------------------------------------------------------------------------------------------------------------------
   //RR 12.08.2013 Убрал ВУЗовский костыль, написал нормальную проверку CheckIsNewOperDayOpened, она завязана на запись с id 9998 
                   usr_comiss_agent_job.
-----------------------------------------------------------------------------------------------------------------------------------------------------
   //RR 14.08.2013 Изменил алгоритм перехода на новый\предыдущий опер. день, теперь робот умеет переходить в операциионый день в котором не все 
                   задания были завершены и продолжает их выполнение, далее возвращается в текущий день.
-----------------------------------------------------------------------------------------------------------------------------------------------------
   //RR 22.08.2013 Добавлена проверка даты работы робота, для того чтобы функция отложенного старта работала корректно.
-----------------------------------------------------------------------------------------------------------------------------------------------------
   //RR 05.09.2013 Добавил в процедуру подключения логирование времени продления операционного дня, чтобы внести ясность.
-----------------------------------------------------------------------------------------------------------------------------------------------------
   //RR 11.09.2013 Расширены ветки PRBB_Recursion_FirstExecute и PRBB_Recursion_SubsequentLaunch, комиссии списываются дважды в 21:00 за текущий
                   операционный день и в 01:00 происходит списание за предыдущий день.
-----------------------------------------------------------------------------------------------------------------------------------------------------
   //RR 13.09.2013 Изменена параметризация CreateAndRunSrvOperation, добавлена передача параметра T_SECTION из таблицы USR_COMISS_AGENT_JOB, для
                   определения даты окончания периода, при списании ежедневных комиссий за текущий день.
-----------------------------------------------------------------------------------------------------------------------------------------------------
   //RR 26.09.2013 В ЭВ обнаружились проблемы, вернул старые режимы для 2.7.5 и 2.7.6 - 2 и 3 соотвественно
-----------------------------------------------------------------------------------------------------------------------------------------------------
   //RR 07.10.2013 Для ПРББ добавлен новый режим работы, который будет запускаться в 1 рабочий день месяца, расширены PRBB_Recursion_FirstExecute
                   и PRBB_Recursion_SubsequentLaunch
-----------------------------------------------------------------------------------------------------------------------------------------------------
   //RR 29.10.2013 Добавлена процедура SendLotusNotice(), теперь по завершении всех заданий робот будет отправлять уведомления в Lotus на указанные
                   адреса или группы. Пока только для ПРББ.
-----------------------------------------------------------------------------------------------------------------------------------------------------
   //RR 30.10.2013 SendLotusNotice() расширена, теперь письма будут отправлятся во всех остальных банках. Добавлены две константы AllJobsDoneSetting
                   и ChangeDaySetting
-----------------------------------------------------------------------------------------------------------------------------------------------------
   //RR 05.11.2013 В SendLotusNotice() добавлена возможность получать адреса из пользовательской таблицы dusr_cae_dbt. ЕЕ наполнением занимаются
                   пользователи.
-----------------------------------------------------------------------------------------------------------------------------------------------------
   //RR 06.11.2013 В Update_Client_Info будем передавать расширенную инфу, для онлайн мониторинга работы роботов.
-----------------------------------------------------------------------------------------------------------------------------------------------------
   //RR 13.11.2013 После ввода в эксплуатацию монитора, в сессию необходимо заносить информацию о завершении выполнения всех заданий.
-----------------------------------------------------------------------------------------------------------------------------------------------------
   //RR 21.11.2013 Изменен процесс определения дат окончания периода для всех комиссий, теперь используем DateShift для более точного определения.
-----------------------------------------------------------------------------------------------------------------------------------------------------
   //RR 30.01.2013 В SendLotusNotice() добавлена проверка на тип отбираемых адресов t_type_email = 0 - адреса для агента комиссий
-----------------------------------------------------------------------------------------------------------------------------------------------------
   //RR 20.03.2014 Внес правки в Get_Incomplete_Jobs, для устранения ошибки из-за которой не находилась незавершенная сервисная
                   операция и докуметы "повисали" в открытых.
-----------------------------------------------------------------------------------------------------------------------------------------------------
   //RR 25.03.2014 Добавлена процедура CheckAndRunIncompletePayments(), она будет заниматся поиском "зависших" БО и проводить их, в случае 
                   возникновения ошибки, процедура будет выполнять рекурсиный вызов самой себя, максимальное количество вызовов - 50
-----------------------------------------------------------------------------------------------------------------------------------------------------
   //RR 26.03.2014 Изменен алгоритм отправки уведомлений в SendLotusNotice(), теперь письма будут рассылатся отдельно каждому адресату.
                   Также из-за особенностей работы 31-го патча нет смысла пытаться проводить незавершенную сервисную операцию, приходится делать
                   новую, поэтому временно отключаю Get_Incomplete_Jobs.
                   Из-за возникновения deadlock'ов в секцию onerror добавлена проверка на "открытость" транзакции, если транзакция открыта, то
                   закрываем ее
-----------------------------------------------------------------------------------------------------------------------------------------------------
   //RR 28.03.2014 Для распараллеливания проведения документов процедурой CheckAndRunIncompletePayments(), был изменен алгоритм обработки:
                   CheckAndRunIncompletePayments() - находит платежи и вызвает RunIncompletePayment, которая в свою очередь занимается проведением
                   документов, блок onerror был перенесен в RunIncompletePayment
-----------------------------------------------------------------------------------------------------------------------------------------------------
   //RR 11.04.2014 В 31-й версии RS-Bank начал активно использовать Action представления v$session, теперь информация о занятости робота, будет
                   записываться в поле client_info
-----------------------------------------------------------------------------------------------------------------------------------------------------
   //RR 15.04.2014 В RunIncompletePayment пришлось отказатmся от использования транзакций, разделение потоков реализовано уникальным индексом таблицы
                   usr_comiss_agent_paym
-----------------------------------------------------------------------------------------------------------------------------------------------------
   //RR 03.07.2014 Для ВУЗа добавлены подключения комиссий 2.2.0v, 2.2.1, 2.2.2, 2.21.1, 13.1.0
-----------------------------------------------------------------------------------------------------------------------------------------------------
   //RR 08.07.2014 Добавлена процедура DisconnectCommissFromOldTP, которая будет выполнять отключение комиссий по старым ТП
-----------------------------------------------------------------------------------------------------------------------------------------------------
   //RR 15.07.2014 В рамках создания робота для банка Солидарность(C-30519-5) добавлены ветки SLD_Recursion_FirstExecute и 
                   SLD_Recursion_SubsequentLaunch
-----------------------------------------------------------------------------------------------------------------------------------------------------
   //RR 14.08.2014 Расширены ветки PRBB_Recursion_FirstExecute и PRBB_Recursion_SubsequentLaunch в соотвествии с C-32220
-----------------------------------------------------------------------------------------------------------------------------------------------------
   //RR 15.08.2014 Расширены ветки EXV_Recursion_FirstExecute и EXV_Recursion_SubsequentLaunch в соотвествии с C-32220
-----------------------------------------------------------------------------------------------------------------------------------------------------
   //RR 18.08.2014 Добавлена функция CheckDayOfWeek для определения дня недели. Добавлен режим списания комиссий за выходной день в следующие ветки
                   PRBB_Recursion_FirstExecute, PRBB_Recursion_SubsequentLaunch, EXV_Recursion_FirstExecute и EXV_Recursion_SubsequentLaunch
-----------------------------------------------------------------------------------------------------------------------------------------------------
   //RR 20.08.2014 Расширены ветки GEB_Recursion_FirstExecute и GEB_Recursion_SubsequentLaunch в соотвествии с C-32220
                   Добавлен режим списания комиссий за выходной день
-----------------------------------------------------------------------------------------------------------------------------------------------------
   //RR 28.08.2014 Расширены ветки GEB_Recursion_FirstExecute и GEB_Recursion_SubsequentLaunch в соотвествии с 29358
                   Добавлен режим списания комиссий в первый рабочий день месяца
-----------------------------------------------------------------------------------------------------------------------------------------------------
   //RR 28.08.2014 Произвел рефакторинг, добавил процедуру Waiting_to_start - унифицированная процедура реализующая ожидание требуемого времени
-----------------------------------------------------------------------------------------------------------------------------------------------------
   //RR 03.09.2014 Расширены ветки EXV_Recursion_FirstExecute и EXV_Recursion_SubsequentLaunch в соотвествии с C-31226
----------------------------------------------------------------------------------------------------------------------------------------------------
   //15.09.2014 joy В рамках С-32626 внесены изменения в CheckAndRunIncompletePayments в отбор не должны попадать платежи с категорией 
                   "Не оплаичвать за счет овердрафта" (№1051, значение аттрибута 1)
-----------------------------------------------------------------------------------------------------------------------------------------------------
   //RR 16.10.2014 Расширены ветки SLD_Recursion_FirstExecute и SLD_Recursion_SubsequentLaunch в соотвествии с C-32220
                   Добавлен режим списания комиссий за выходной день
-----------------------------------------------------------------------------------------------------------------------------------------------------
   //RR 24.10.2014 В рамках перехода ЭВ на 31 патч произвел рефакторинг, введенены следующие процедуры и функции:
                   █ Match_Job - функция будет сравнивать передаваемый параметр со значением cliet_info других сессий робота, большое количество
                   переменных-флагов удалено за дальнейшей ненадобностью.
                   █ InitializeJobsList() - функция заполняет массив элементами класса содержашими в себе информацию о порядке выполнения задания,
                   для тех случаев когда работа робота была прервана.
                   █ Run_Unfinished_Tasks() - процедура основываясь на массиве возвращаемом InitializeJobsList(), производит цикличный вызов процедуры
                   оплаты, для каждого банка своя процедура
                   По итогам рефакторинга, макрос "похудел" почти на 30%
-----------------------------------------------------------------------------------------------------------------------------------------------------
   //RR 12.12.2014 Расширены ветки EXV_Recursion_FirstExecute и EXV_Recursion_SubsequentLaunch в соотвествии с финальной версией C-31226.
                   Попутно выполнен очередной рефакоринг, параметризовано 99% запросов.
-----------------------------------------------------------------------------------------------------------------------------------------------------
   //RR 16.12.2014 Исправлены вызовы Match_Job, поправлены другие ошибки.
-----------------------------------------------------------------------------------------------------------------------------------------------------
   //RR 13.01.2015 В рамках перехода ПРББ на 31 патч произведены следующие работы:
                   █ В CheckIsNewOperDayOpened() добавлен update устанавливающий текущую дату в поле T_WORKDATE для всех заданий
                   █ Убрал процедуру SetStateOfConnect_InProgress дублирующую SetStateOfJob_InProgress
                   █ Убрал процедуру SetStateOfConnect_Done дублирующую SetStateOfJob_IsDone
-----------------------------------------------------------------------------------------------------------------------------------------------------
   //RR 11.02.2015 В рамках установки 130-ХФ в CreateAndRunSrvOperation добавлен дополнительный параметр ISCALCONEPERIOD при создании СО. 
                   Отключена процедура DisconnectCommissFromOldTP.
-----------------------------------------------------------------------------------------------------------------------------------------------------
   //RR 18.02.2015 Адаптировано для банка ПОЙДЕМ, реализована ветка GO_Recursion_SubsequentLaunch, в качестве эксперимента принято решение отказаться
                   от всех веток _FirstExecute.
-----------------------------------------------------------------------------------------------------------------------------------------------------
   //RR 20.02.2015 Удалены ветки _FirstExecute, удалена процедура DisconnectCommissFromOldTP
-----------------------------------------------------------------------------------------------------------------------------------------------------
   //RR 05.03.2015 Расширена ветка EXV_Recursion_SubsequentLaunch в соотвествии с C-34695.Попутно выполнен очередной рефакоринг:
                   █ Добавлена функция ExecuteConnect которая будет запускать подключения в соотвествии с переданными параметрами
                   █ Добавлена функция GetDescriptionJob которая возвращает наименование задания из таблицы USR_COMISS_AGENT_JOB
                   █ Добавлено проставление временных меток t_start_datetime и t_end_datetime таблицы USR_COMISS_AGENT_JOB
-----------------------------------------------------------------------------------------------------------------------------------------------------
   //RR 03.04.2015 Расширенs ветки PRBB_Recursion_SubsequentLaunch и GEB_Recursion_SubsequentLaunch в соотвествии с C-38491
-----------------------------------------------------------------------------------------------------------------------------------------------------
   //RR 03.06.2015 Расширена ветка VUZ_Recursion_SubsequentLaunch в соотвествии с C-40210
-----------------------------------------------------------------------------------------------------------------------------------------------------
   //RR 05.06.2015 Время вечернего старта в ВУЗ банке изменено с 21:00 на 20:30
-----------------------------------------------------------------------------------------------------------------------------------------------------
   //RR 25.06.2015 Все ветки *_Recursion_SubsequentLaunch расширены в соотвествии с C-39836
-----------------------------------------------------------------------------------------------------------------------------------------------------
   //RR 04.08.2015 Расширены ветки PRBB_Recursion_SubsequentLaunch и VUZ_Recursion_SubsequentLaunch в соотвествии с C-40831
                  (в свсязи с отзывом лицензии на ПРББ делать не стал)
-----------------------------------------------------------------------------------------------------------------------------------------------------
   //RR 02.12.2015 Расширена ветка EXV_Recursion_SubsequentLaunch в соотвествии с требованиями R-629798-2.
   
                   Роботу(макросу) 3 годика
                   
                                    dMP dMP  .aMMMb   dMMMMb   dMMMMb   dMP dMP
                                   dMP dMP  dMP"dMP  dMP.dMP  dMP.dMP  dMP.dMP
                                  dMMMMMP  dMMMMMP  dMMMMP"  dMMMMP"   VMMMMP
                                 dMP dMP  dMP dMP  dMP      dMP      dA .dMP
                                dMP dMP  dMP dMP  dMP      dMP       VMMMP"

                       dMMMMb   dMP  dMMMMb  dMMMMMMP  dMP dMP  dMMMMb  .aMMMb   dMP dMP
                      dMP"dMP  amr  dMP.dMP    dMP    dMP dMP  dMP VMP  dMP"dMP  dMP.dMP
                     dMMMMK"  dMP  dMMMMK"    dMP    dMMMMMP  dMP dMP  dMMMMMP   VMMMMP
                    dMP.aMF  dMP  dMP"AMF    dMP    dMP dMP  dMP.aMP  dMP dMP  dA .dMP
                   dMMMMP"  dMP  dMP dMP    dMP    dMP dMP  dMMMMP"  dMP dMP   VMMMP"
-----------------------------------------------------------------------------------------------------------------------------------------------------
   // Gurin S. 19.05.2016 R-646955-3 Determination_of_work_mode -> DayPay220 = 9;
-----------------------------------------------------------------------------------------------------------------------------------------------------
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/

Import RSD, Globals, SfInter, RSBError, Календарь, lib_rsbsession, fg_Life_parm, Send_Lotus, PaymInter;

//Режимы(для ПРББ выделен диапазон 1-10, ЭВ диапазон 21-30, ВУЗ диапазон 31-40, 
//Солидарность диапазон 41-50, Пойдем диапазон 51-60. Выделил с заделом на будущее)
const ModePayMonthComissPRBB   = 1;     //Режим запуска оплаты ежемесячных комиссий ПРББ (21 число)
const ModePayDayComissPRBB     = 2;     //Режим запуска оплаты комиссий в обычном режиме(ежедневное списание) ПРББ
const ModePayMonthComissPRBB2  = 3;     //Режим запуска оплаты ежемесячных комиссий ПРББ (первый рабочий день месяца)
const ModePayMonthComissEXV    = 11;    //Режим запуска оплаты ежемесячных комиссий ЭВ (25 число)
const ModePayDayComissEXV      = 12;    //Режим запуска оплаты комиссий в обычном режиме(ежедневное списание) ЭВ
const ModePayMonthComissEXV2   = 13;    //Режим запуска оплаты ежемесячных комиссий ЭВ (26 число)
const ModePayMonthComissEXV3   = 14;    //Режим запуска оплаты ежемесячных комиссий ЭВ первый рабочий день месяца
const ModePayMonthComissEXV4   = 15;    //Режим запуска оплаты ежемесячных комиссий ЭВ (21 число)
const ModePayMonthComissGEB    = 21;    //Режим запуска оплаты ежемесячных комиссий ГЭБ (26 число)
const ModePayDayComissGEB      = 22;    //Режим запуска оплаты комиссий в обычном режиме(ежедневное списание) ГЭБ
const ModePayMonthComissGEB2   = 23;    //Режим запуска оплаты ежемесячных комиссий ГЭБ (последний рабочий день месяца)
const ModePayMonthComissGEB3   = 24;    //Режим запуска оплаты ежемесячных комиссий ГЭБ (первый рабочий день месяца)
const ModePayMonthComissVUZ    = 31;    //Режим запуска оплаты ежемесячных комиссий ВУЗ (17 число) // Gurin S. 19.05.2016 R-646955-3 9 число
const ModePayDayComissVUZ      = 32;    //Режим запуска оплаты комиссий в обычном режиме(ежедневное списание) ВУЗ
const ModePayMonthComissVUZ2   = 33;    //Режим запуска оплаты ежемесячных комиссий ВУЗ (последний рабочий день месяца)
const ModePayMonthComissSLD    = 41;    //Режим запуска оплаты ежемесячных комиссий Солидарности (последний рабочий день месяца)
const ModePayDayComissSLD      = 42;    //Режим запуска оплаты комиссий в обычном режиме(ежедневное списание) Солидарности
const ModePayMonthComissGO     = 51;    //Режим запуска оплаты ежемесячных комиссий Пойдем (21 число)
const ModePayDayComissGO       = 52;    //Режим запуска оплаты комиссий в обычном режиме(ежедневное списание) Пойдем
const ModePayMonthComissGO2    = 53;    //Режим запуска оплаты ежемесячных комиссий Пойдем (первый рабочий день месяца)
const ComissAgentRSNumber      = 20201; //Номер агента комиссий в РС
const PauseInSeconds           = 150;   //Пауза в секундах
const AllJobsDoneSetting       = 9999;  //ID признака завершенности всех заданий
const ChangeDaySetting         = 9998;  //ID признака перехода на новый опер. день

//Время
const PRBB_StartTime1 = time(01,00,00);
const PRBB_StartTime2 = time(21,00,00);
const EXV_StartTime1  = time(01,00,00);
const EXV_StartTime2  = time(18,30,00);
const GEB_StartTime1  = time(19,30,00);
const GEB_StartTime2  = time(21,00,00);
const GEB_StartTime3  = time(22,30,00);
const GEB_StartTime4  = time(01,00,00);
const GEB_StartTime5  = time(10,00,00);
const VUZ_StartTime1  = time(20,30,00);
const VUZ_StartTime2  = time(10,00,00);
const VUZ_StartTime3  = time(01,00,00);
const SLD_StartTime1  = time(01,00,00);
const SLD_StartTime2  = time(18,00,00);
const SLD_StartTime3  = time(21,00,00);
const GO_StartTime1   = time(01,00,00);
const GO_StartTime2   = time(21,00,00);

//Нижеперечисленные констаты нужны установки значения client_info в wiev v$session
const Online                      = "Online";
const DelayedStart                = "Отложенный старт в ";
const Wait                        = "Ожидание => ";
const Pay220Com                   = "Оплата 2.2.0";
const Pay27Com                    = "Оплата 2.7.*";
const Pay323Com                   = "Оплата 3.2.3";
const Pay34Com                    = "Оплата 3.4.*";
const Pay34_1_4Com                = "Оплата 3.4.(2-4)";
const Pay349_371com               = "Оплата 3.4.9, 3.7.1";
const PayMonthCom                 = "Оплата ежемесячных комиссий";
const PayComDoNotReqConnect       = "Оплата комиссий не требующих подключения";
const Connect220Com               = "Подключение 2.2.0";
const Connect220vCom              = "Подключение 2.2.0V";
const Connect221_222Com           = "Подключение 2.2.1-2.2.2";
const Connect275Com               = "Подключение 2.7.5";
const Connect276Com               = "Подключение 2.7.6";
const Connect2211Com              = "Подключение 2.21.1";
const Connect311Com               = "Подключение 3.1.1";
const Connect323Com               = "Подключение 3.2.3";
const Connect34Com                = "Подключение 3.4.*";
const Connect342Com               = "Подключение 3.4.2";
const Connect343Com               = "Подключение 3.4.3";
const Connect344Com               = "Подключение 3.4.4";
const Connect348Com               = "Подключение 3.4.8";
const Connect349Com               = "Подключение 3.4.9";
const Connect341_8Com             = "Подключение 3.4.1-8";
const Connect3410Com              = "Подключение 3.4.10";
const Connect3411Com              = "Подключение 3.4.11";
const Connect371Com               = "Подключение 3.7.1";
const Connect39Com                = "Подключение 3.9.*";
const Connect310Com               = "Подключение 3.10.*";
const Connect3130Com              = "Подключение 3.13.0";
const Connect3141Com              = "Подключение 3.14.1";
const Connect3150Com              = "Подключение 3.15.0";
const Connect557Com               = "Подключение 5.5.7";
const Connect730Com               = "Подключение 7.3.0";
const Connect751Com               = "Подключение 7.5.1";
const Connect752Com               = "Подключение 7.5.2";
const Connect7VKCom               = "Подключение 7.*.*";
const Connect821Com               = "Подключение 8.2.1";
const Connect9VKCom               = "Подключение 9.*.*";
const Connect1310Com              = "Подключение 13.1.0";
const UpdateTokenInfo             = "Обновление информации по токенам";
const UpdateMonthInfo             = "Обновление информации по ежемесячным услугам";
const PrintNotify                 = "Печать уведомлений по транзитным счетам";
const PrintNotice                 = "Печать извещений";
const WaitForConnect220Com        = "Ожидание подключения 2.2.0";
const WaitForCon220v_221_221_2211 = "Ожидание подключения 2.2.0v,2.2.1,2.2.2,2.21.1";
const WaitForConnect27Com         = "Ожидание подключения 2.7.*";
const WaitForConnect311Com        = "Ожидание подключения 3.1.1";
const WaitForConnect323Com        = "Ожидание подключения 3.2.3";
const WaitForConnect34Com         = "Ожидание подключения 3.4.*";
const WaitForConnect34_1_4Com     = "Ожидание подключения 3.4.(2-4)";
const WaitForConnect342Com        = "Ожидание подключения 3.4.2";
const WaitForConnect343Com        = "Ожидание подключения 3.4.3";
const WaitForConnect344Com        = "Ожидание подключения 3.4.4";
const WaitForConnect348Com        = "Ожидание подключения 3.4.8";
const WaitForConnect349Com        = "Ожидание подключения 3.4.9";
const WaitForConnect349_371Com    = "Ожидание подключения 3.4.9, 3.7.1";
const WaitForConnect341_8Com      = "Ожидание подключения 3.4.1-8";
const WaitForConnect3411Com       = "Ожидание подключения 3.4.11";
const WaitForConnect3141Com       = "Ожидание подключения 3.14.1";
const WaitForConnect371Com        = "Ожидание подключения 3.7.1";
const WaitForConnect39com         = "Ожидание подключения 3.9*";
const WaitForConnect39_310com     = "Ожидание подключения 3.9* и 3.10.*";
const WaitForConnectComToPhys     = "Ожидание подключения 3.9*, 3.10.*, 3.4.10, 3.2.3";
const WaitForConnect310com        = "Ожидание подключения 3.10.*";
const WaitForConnect310_323com    = "Ожидание подключения 3.10.*, 3.2.3";
const WaitForConnect3150Com       = "Ожидание подключения 3.15.0";
const WaitForConnect3130Com       = "Ожидание подключения 3.13.0";
const WaitForConnect557Com        = "Ожидание подключения 5.5.7";
const WaitForCon730_751_752       = "Ожидание подключения 7.3.0, 7.5.1, 7.5.2";
const WaitForConnect730Com        = "Ожидание подключения 7.3.0";
const WaitForConnect751Com        = "Ожидание подключения 7.5.1";
const WaitForConnect752Com        = "Ожидание подключения 7.5.2";
const WaitConnect7VKCom           = "Ожидание подключения 7.*.*";
const WaitForConnect821Com        = "Ожидание подключения 8.2.1";
const WaitConnect9VKCom           = "Ожидание подключения 9.*.*";
const WaitForConnect1310Com       = "Ожидание подключения 13.1.0";
const WaitForConnectComiss        = "Ожидание подключения комиссий";
const WaitUpdateTokenInfo         = "Ожидание обновления информации по токенам";
const WaitUpdateMonthInfo         = "Ожидание обновления информации по ежемесячным услугам";
const WaitPrintNotify             = "Ожидание печати уведомлений по транзитным счетам";
const WaitPrintNotice             = "Ожидание печати извещений";

//Константы имен пользователей(их ввод обусловлен тем, что все филлиалы ЭВ работают на одном экземпляре БД)
const UserNamePRBB          = "RSBANK_V6_2029";
const UserNameEXV_SARATOV   = "RSBANK_EVS";
const UserNameEXV_VORONEZH  = "RSBANK_EVVOR";
const UserNameEXV_STAVROPOL = "RSBANK_EVSTA_02";
const UserNameEXV_VOLGOGRAD = "RSBANK_EVV";
const UserNameGEB           = "RSBANK_GEB";
const UserNameVUZ           = "RSBANK_VUZ";
const UserNameSLD           = "RSBANK_SLD";
const UserNameGO            = "RSBANK_GO";

private var RTime, WRKDate; //RR 11.04.2013 Без нее неверно определяется текущий момент времени
private var RDate; 
private var Bank_name             = fg_life_subject({OurBank});
private var FlagBackChangeOperDay = false;

var WRKMode,
    WRKModeString,
    Last_Oper_Day;
 
 MACRO Update_State_Of_Job_9999()
   var cmd, rs;
   cmd = RSDCommand (" SELECT 1 FROM usr_comiss_agent_job WHERE (    t_job_in_progress != CHR (1) "+ 
                     "                                            OR t_job_is_done != CHR (1) ) "+
                     "           AND NOT EXISTS (SELECT 1 FROM usr_comiss_agent_job WHERE (    t_job_in_progress != CHR (1)  "+
                     "                                                                      OR t_job_is_done != CHR (1) ) " +
                     "                                                                AND t_id = :AllJobsDoneSetting) " +
                     "           AND t_id != :ChangeDaySetting ");
   cmd.AddParam("AllJobsDoneSetting", RSDBP_IN, AllJobsDoneSetting);
   cmd.AddParam("ChangeDaySetting",   RSDBP_IN, ChangeDaySetting);
   rs = RSDRecordSet(cmd);
   if (rs and rs.movenext())
     cmd = RSDCommand("update usr_comiss_agent_job set t_job_in_progress = chr(88)  where t_id = :AllJobsDoneSetting");
     cmd.AddParam("AllJobsDoneSetting", RSDBP_IN, AllJobsDoneSetting);
     cmd.execute();
   end;
 END;
 
 MACRO Update_Client_Info(CLInfo)
   var cmd;
   cmd = RSDCommand("begin dbms_application_info.set_client_info(:CLInfo); end;");
   cmd.AddParam("CLInfo", RSDBP_IN, CLInfo);
   cmd.execute();
 END;

 MACRO Get_Client_Info(ReturnRecordSet)
  var cmd, rs, ClientStr = "", UserName;
   if   (Bank_Name.is_PRBB)
      UserName = UserNamePRBB; 
   elif (Bank_Name.is_GEB)
      UserName = UserNameGEB;
   elif (Bank_Name.is_VUZ)
      UserName = UserNameVUZ;
   elif (Bank_Name.is_SLD)
      UserName = UserNameSLD;
   elif (Bank_Name.is_GO)
      UserName = UserNameGO;
   elif (Bank_Name.is_EXV_Stavropol)
      UserName = UserNameEXV_STAVROPOL; 
   elif (Bank_Name.is_EXV_Volgograd)
      UserName = UserNameEXV_VOLGOGRAD; 
   elif (Bank_Name.is_EXV_Voronezh)
      UserName = UserNameEXV_VORONEZH; 
   else
      UserName = UserNameEXV_SARATOV;
   end;
   cmd = RSDCommand (" SELECT CASE WHEN REGEXP_LIKE (client_info, '^[[:digit:]]{1,}$') " +
                     "             THEN client_info " +
                     "             ELSE 'null' " +
                     "              END client_info " +
                     "   FROM   v$session " +
                     "  WHERE   program = 'startbnk.exe' " +
                     "    AND   USERNAME = :UserName" + 
                     "    AND   REGEXP_SUBSTR (module, '[[:digit:]]{1,}') = :ComissAgentRSNumber");
   cmd.AddParam("UserName",            RSDBP_IN, UserName);
   cmd.AddParam("ComissAgentRSNumber", RSDBP_IN, ComissAgentRSNumber);
   rs = RSDRecordSet(cmd);
   if ((ValType(ReturnRecordSet) == V_UNDEF) or (ReturnRecordSet == false))
     while(rs and rs.movenext())
       if (rs.value(0) != "null")
         if (ClientStr == "")
           ClientStr = ClientStr + rs.value(0);
         else
           ClientStr = ClientStr + " , " + rs.value(0) ;
         end;
       end;
     end;
     return ClientStr;
   else
     return rs;
   end;
 END;
 
 MACRO WriteUsrLog (msg, param)
  var cmd, RobotInfo;
  var ORA = RSL_OraSession ();
   if (ValType(param) == v_undef);
      param = "";
   end;
   RobotInfo = ora.sid + "_" + ora.serial+"$"+ora.logon_time+"$"+ora.osuser+"$"+ora.machine;
   cmd = RSDCommand("INSERT INTO USR_COMISS_AGENT_LOG (T_AGENT_INFO, T_TEXT, T_COMMAND) VALUES (:AGENT_INFO, :TEXT, :COMMAND)");
   cmd.AddParam("agent_info", RSDBP_IN, "Робот_"+ora.sid+":" +msg);
   cmd.AddParam("text",       RSDBP_IN, param);
   cmd.AddParam("command",    RSDBP_IN, RobotInfo);
   cmd.execute();
 END;
 
 MACRO ClearUsrLog ()
 var cmd;
  cmd = RSDCommand("DELETE FROM usr_comiss_agent_log WHERE t_date <= TO_DATE (:curdate, 'dd.mm.yyyy') - 30");
  cmd.AddParam("curdate", RSDBP_IN, string({curdate}));
  cmd.execute();
 END;
 
 MACRO ClearUsrPaymLog ()
 var cmd;
  cmd = RSDCommand("DELETE FROM usr_comiss_agent_paym WHERE T_PROCESSING = -1");
  cmd.execute();
 END;
 
 MACRO SetPauseInSeconds(seconds, NeedWriteLog)
 var i = 0; 
  if (NeedWriteLog)
    WriteUsrLog("Получена команда паузы в "+seconds+" секунд");
    Update_Client_Info("Пауза "+seconds+" секунд");
  end;
  InitProgress(seconds, "", "Пауза "+seconds+" секунд");
  while (i < seconds)
    testevent(1000);
    i = i + 1;
    UseProgress(i);
  end;
  RemProgress();
  if (NeedWriteLog)
    WriteUsrLog("Пауза завершена, продолжаю выполнение заданий");
    Update_Client_Info("Пауза завершена");
  end;
 END;
 
 MACRO UpdateTasks (RRDate)
  var cmd, rs;
   RslDefCon.BeginTrans();
   rs = RSDRecordSet("select * from usr_comiss_agent_job for update nowait");
   rs.movenext();
   cmd = RSDCommand(" UPDATE usr_comiss_agent_job " +
                    "    SET t_job_in_progress = CHR (1), " +
                    "        t_job_is_done     = CHR (1) " );
   cmd.execute();
   WriteUsrLog("Все задания за "+RRDate+" выполнены, журнал заданий обновлен");
   RslDefCon.CommitTrans();
  
   onerror(x)
     if (RslDefCon.isInTrans)
      RslDefCon.RollbackTrans();
     end;  
 END;
  
 MACRO CheckIsConnectionComplete (ID)
  var rs, cmd;
   cmd = RSDCommand("select 1 from USR_COMISS_AGENT_JOB where T_COMISS_NUMBER = 0 and t_job_is_done = chr(88)  and T_ID = :ID");
   cmd.AddParam("ID", RSDBP_IN, ID);
   rs = RSDRecordSet(cmd);
   if (rs and rs.movenext())
     return true;
   end;
   return false;
 END;
 
 MACRO CheckIsConnectionInProgress (ID)
  var rs, cmd;
   cmd = RSDCommand("select 1 from USR_COMISS_AGENT_JOB where T_COMISS_NUMBER = 0 and t_job_in_progress = chr(88)  and T_ID = :ID");
   cmd.AddParam("ID", RSDBP_IN, ID);
   rs = RSDRecordSet(cmd);
   if (rs and rs.movenext())
     return true;
   end;
   return false;
 END;

 MACRO SetStateOfJob_InProgress (ID, NeedBegTrans)
  var cmd, rs, CID, rrs;
   if (valtype(ID) == V_UNDEF)
      CID = 0;
   else
      CID = ID;
   end;
  
   if (NeedBegTrans)
     RslDefCon.BeginTrans();
     cmd = RSDCommand("select 1 from usr_comiss_agent_job where t_id = :id and t_job_in_progress = chr(1) for update nowait");
     cmd.AddParam("ID", RSDBP_IN, CID);
     rs = RSDRecordSet(cmd);
    
     if (not rs.movenext())      
       rrs = Get_Client_Info(true);
       while(rrs and rrs.movenext())
         if(rrs.value(0) == CID)
           RslDefCon.RollbackTrans();
           return false;
         end;
       end;
       
       cmd = RSDCommand("select 1 from usr_comiss_agent_job where t_id = :id for update nowait");
       cmd.AddParam("ID", RSDBP_IN, ID);
       rs = RSDRecordSet(cmd);
       rs.movenext();
      
     end;
    
  end;
  
    cmd = RSDCommand("update USR_COMISS_AGENT_JOB set t_job_in_progress = chr(88), t_start_datetime = sysdate where T_ID = :id");
    cmd.AddParam("ID", RSDBP_IN, CID);
    cmd.execute();
    Update_Client_Info(CID);
    
  if (NeedBegTrans)
    RslDefCon.CommitTrans();
  end;
    
    return true;
  
  onerror(x)
   if (RslDefCon.isInTrans)
    RslDefCon.RollbackTrans();
   end;  
   return false;
  
 END;
 
 MACRO CheckIsJob_InProgress (ID)
  var rs, cmd;
   cmd = RSDCommand("select 1 from USR_COMISS_AGENT_JOB where t_job_in_progress = chr(88)  and T_ID = :id");
   cmd.AddParam("ID", RSDBP_IN, ID);
   rs = RSDRecordSet(cmd);
   if (rs and rs.movenext())
     return true;
   end;
   return false;
 END;
 
 MACRO CheckIsJob_IsDone (ID)
  var rs, cmd;
   cmd = RSDCommand("select 1 from USR_COMISS_AGENT_JOB where t_job_is_done = chr(88)  and T_ID = :id");
   cmd.AddParam("ID", RSDBP_IN, ID);
   rs = RSDRecordSet(cmd);
   if (rs and rs.movenext())
     return true;
   end;
   return false;
 END;

 MACRO CheckDayOfWeek(rdate, day)
  var rs, cmd;
   cmd = RSDCommand("SELECT TO_CHAR(:1,'day','NLS_DATE_LANGUAGE=RUSSIAN') WDAY FROM DUAL");
   cmd.AddParam("1", RSDBP_IN, {curdate});
   rs = RSDRecordSet(cmd);
   rs.movenext();
   return ( StrLwr(day) == rs.value("WDAY") );
 END;

 MACRO GetWRKModesStr()
  var t_workmode;
   if   (WRKMode == ModePayMonthComissPRBB)
     t_workmode = "1,2";
   elif (WRKMode == ModePayDayComissPRBB)
     t_workmode = "2";
   elif (WRKMode == ModePayMonthComissPRBB2)
     t_workmode = "2,3";
   elif (WRKMode == ModePayMonthComissEXV)
     t_workmode = "11,12";
   elif (WRKMode == ModePayDayComissEXV)
     t_workmode = "12";
   elif (WRKMode == ModePayMonthComissEXV2)
     t_workmode = "12,13";
   elif (WRKMode == ModePayMonthComissEXV3)
     t_workmode = "12,14";
   elif (WRKMode == ModePayMonthComissEXV4)
     t_workmode = "12,15";
   elif (WRKMode == ModePayMonthComissGEB)
     t_workmode = "21,22";
   elif (WRKMode == ModePayDayComissGEB)
     t_workmode = "22";
   elif (WRKMode == ModePayMonthComissGEB2)
     t_workmode = "22,23";
   elif (WRKMode == ModePayMonthComissGEB3)
     t_workmode = "22,24";
   elif (WRKMode == ModePayMonthComissVUZ)
     t_workmode = "31,32";
   elif (WRKMode == ModePayDayComissVUZ)
     t_workmode = "32";
   elif (WRKMode == ModePayMonthComissVUZ2)
     t_workmode = "32,33";
   elif (WRKMode == ModePayMonthComissSLD)
     t_workmode = "1,2";
   elif (WRKMode == ModePayDayComissSLD)
     t_workmode = "2";
   elif (WRKMode == ModePayMonthComissGO)
     t_workmode = "1,2";
   elif (WRKMode == ModePayDayComissGO)
     t_workmode = "2";
   elif (WRKMode == ModePayMonthComissGO2)
     t_workmode = "2,3";
   end;
   //Добавляем режим списания в выходные
   if (CheckDayOfWeek({curdate}, "Понедельник"))
     if ( (Bank_Name.is_PRBB) or (Bank_Name.is_SLD) or (Bank_Name.is_SLD) )
       t_workmode = t_workmode + ",-2";
     elif (Bank_Name.is_EXV)
       t_workmode = t_workmode + ",-12";
     elif (Bank_Name.is_GEB)
       t_workmode = t_workmode + ",-22";
     end;
   end;
   return t_workmode;
 END;

 MACRO SendLotusNotice()
  var theme          = Bank_Name.BankShortName +": Отчет о списании комиссий",
      recipients     = "",
      mail_text      = Bank_Name.BankShortName +": завершено списание комиссий за "+{curdate}+".  \n   Копия письма разослана по адресам: ",
      tmp_recipients = "",
      i = 0,
      rs;
   array ArrForSend;
   ArrForSend(0) = "OKS";
   ArrForSend(1) = "ЕРЦ-ТП и комиссии";
   //ArrForSend(2) = "RRahmedov@prbb.ru";
   if (Bank_Name.is_EXV)
     ArrForSend(0) = "OlejnikNE@sovcombank.ru"; //"Nataliya E Oleinik/AHO/EXV/Probusiness Bank";
//     ArrForSend(1) = "Inna V Ruzhenkova/URN/EXV/Probusiness Bank";
//     ArrForSend(2) = "ЕРЦ-ТП и комиссии";
     //ArrForSend(3) = "RRahmedov@prbb.ru";
   end;
   rs = RSDRecordSet("select t_email from dusr_cae_dbt where t_id != 0 and t_type_email = 0");
   while (rs and rs.movenext())
     if (tmp_recipients == "")
       tmp_recipients = rs.value("t_email");
     else
       tmp_recipients = tmp_recipients + ", " + rs.value("t_email");
     end;
     ArrForSend(i) = rs.value("t_email");
     i = i + 1;
   end;
   mail_text = mail_text + tmp_recipients;
   i = 0;
   while (ASize(ArrForSend) > i)
     Send_l(theme, mail_text, 85,ArrForSend(i));
     i = i + 1;
   end;
   WriteUsrLog("Уведомление успешно отправлено в Lotus, адресаты определены автоматически.");
   
  onerror(er)
   if (RslDefCon.isInTrans)
    RslDefCon.RollbackTrans();
   end;  
   WriteUsrLog("Произошла ошибка ("+er.message+" код ошибки "+er.code+") при отправке уведомления в Lotus");
 END;

 MACRO RunIncompletePayment(PID, DocKind)
  var rs, cmd, rcmd, imode, stat;
   rcmd = RSDCommand( " SELECT   to_char(count(PAYM.T_PAYMENTID)) cnt" +
                      "   FROM   dpmpaym_dbt paym " +
                      "  WHERE       PAYM.T_VALUEDATE = TO_DATE (:curdate, 'dd.mm.yyyy') " +
                      "          AND PAYM.T_OPER = :ComissAgentRSNumber" +
                      "          AND PAYM.T_PAYMSTATUS IN (:PM_PREPARING, :PM_READIED) " +
                      "          AND (PAYM.T_PAYMENTID, PAYM.T_VALUEDATE) NOT IN " +
                      "                   (SELECT   UCA_PAYM.T_PAYMID, UCA_PAYM.T_VALUE_DATE " +
                      "                      FROM   USR_COMISS_AGENT_PAYM UCA_PAYM) " );
   rcmd.AddParam("curdate",             RSDBP_IN, string({curdate}));
   rcmd.AddParam("ComissAgentRSNumber", RSDBP_IN, ComissAgentRSNumber);
   rcmd.AddParam("PM_PREPARING",        RSDBP_IN, PM_PREPARING);
   rcmd.AddParam("PM_READIED",          RSDBP_IN, PM_READIED);
   rs = RSDRecordSet(rcmd);
       
   cmd = RSDCommand("INSERT INTO USR_COMISS_AGENT_PAYM VALUES (:PID,:rdate,:stat)");
   cmd.AddParam("PID",   RSDBP_IN, PID);
   cmd.AddParam("rdate", RSDBP_IN, {curdate});
   cmd.AddParam("stat",  RSDBP_IN, -1);
   cmd.execute();
   
   rs.movenext();
   Update_Client_Info("Оплата БО - id"+PID+" (осталось незавешенных БО - "+rs.value("cnt")+")");
   rs = null;
   cmd = null;
   
   imode = SetDialogFlag(0);
   stat = PM_ExecuteOperation(PID, DocKind);
   SetDialogFlag(imode);
   
   cmd = RSDCommand(" UPDATE USR_COMISS_AGENT_PAYM SET T_PROCESSING = :stat WHERE T_PAYMID = :PID");
   cmd.AddParam("stat", RSDBP_IN, stat);
   cmd.AddParam("PID",  RSDBP_IN, PID);
   cmd.execute();
   
   return true;
   
   onerror(x)
     return false;
 
 END;
 
 MACRO CheckAndRunIncompletePayments()
  var rs,cmd;
  //15.09.2014 joy В рамках С-32626, в отбор не должны попадать платежи с категорией "Не оплаичвать за счет овердрафта"
   cmd = RSDCommand( " SELECT   PAYM.T_PAYMENTID PID, PAYM.T_DOCKIND DocKind" +
                     "   FROM   dpmpaym_dbt paym " +
                     "  WHERE       PAYM.T_VALUEDATE = TO_DATE (:curdate, 'dd.mm.yyyy') " +
                     "          AND PAYM.T_OPER = :ComissAgentRSNumber" + 
                     "          AND PAYM.T_PAYMSTATUS IN (:PM_PREPARING, :PM_READIED) " +
                     "          AND (PAYM.T_PAYMENTID, PAYM.T_VALUEDATE) NOT IN " +
                     "                   (SELECT   UCA_PAYM.T_PAYMID, UCA_PAYM.T_VALUE_DATE " +
                     "                      FROM   USR_COMISS_AGENT_PAYM UCA_PAYM) " +
                     "          AND NOT EXISTS " +
                     "         (SELECT   1   " +
                     "            FROM   dobjatcor_dbt oc " +
                     "           WHERE       oc.t_objecttype = 501 " +
                     "                   AND oc.t_attrid = 1  " +
                     "                   AND oc.t_groupid = 1051  " +
                     "                   AND oc.t_object = LPAD(paym.t_paymentid, 10, 0))  " );
   cmd.AddParam("curdate",             RSDBP_IN, string({curdate}));
   cmd.AddParam("ComissAgentRSNumber", RSDBP_IN, ComissAgentRSNumber);
   cmd.AddParam("PM_PREPARING",        RSDBP_IN, PM_PREPARING);
   cmd.AddParam("PM_READIED",          RSDBP_IN, PM_READIED);
                      
   rs = RSDRecordSet(cmd);
   if ( rs and rs.movenext() )
    
     WriteUsrLog("Найдены незавершенные БО, будет выполнена их оплата");
     
     RunIncompletePayment(rs.value("PID"), rs.value("DocKind"));
     while (rs and rs.movenext())
       RunIncompletePayment(rs.value("PID"), rs.value("DocKind"));
     end;
     
     WriteUsrLog("Произведена оплата незавершенных БО");
     
   else
     WriteUsrLog("Незавершенных БО - не найдено");
   end;
   
 END;

 MACRO SetStateOfJob_IsDone (ID)
  
  var rs, cmd, CID, wrkstr;
  
   if (valtype(ID) == V_UNDEF)
      CID = 0;
   else
      CID = ID;
   end;
   
   if (CID == AllJobsDoneSetting) 
     wrkstr = GetWRKModesStr();
     cmd = RSDCommand(" select count(rowid) cnt " +
                      "   from USR_COMISS_AGENT_JOB " +
                      "  where t_workmode in ("+wrkstr+") " +
                      "    and (t_job_in_progress = chr(1) or t_job_is_done = chr(1))");
     rs = RSDRecordSet(cmd);
     rs.movenext();
     if ( (rs.value("cnt") == 0) and (not CheckIsJob_IsDone (CID)) )
       CheckAndRunIncompletePayments(); //Ищем и проводим зависшие БО
       RslDefCon.BeginTrans();
       
       cmd = RSDCommand("select * from usr_comiss_agent_job where t_id = :id");
       cmd.AddParam("id", RSDBP_IN, CID);
       rs = RSDRecordSet(cmd);
       rs.movenext();
       
       cmd = RSDCommand("update USR_COMISS_AGENT_JOB set t_job_is_done = chr(88), t_end_datetime = sysdate where T_ID = :id");
       cmd.AddParam("id", RSDBP_IN, CID);
       cmd.execute();
       
       SendLotusNotice(); //Отправляем уведомление в лотус
       
       RslDefCon.CommitTrans();
     end;
   else
     cmd = RSDCommand("update USR_COMISS_AGENT_JOB set t_job_is_done = chr(88), t_end_datetime = sysdate where T_ID = :id");
     cmd.AddParam("ID", RSDBP_IN, CID);
     cmd.execute();
   end;
   
  onerror(er)
    if (RslDefCon.isInTrans)
     RslDefCon.RollbackTrans();
    end;  
    WriteUsrLog("Произошла ошибка ("+er.message+" код ошибки "+er.code+")");
 END;
 
 MACRO SetStateOfJob_IsntDone (ID)
  var cmd;
  cmd = RSDCommand(" UPDATE   USR_COMISS_AGENT_JOB " +
                   "    SET   t_job_in_progress = CHR (1) " +
                   "  WHERE   T_ID = :ChangeDaySetting " +
                   "          AND EXISTS (SELECT   1 " +
                   "                        FROM   usr_comiss_agent_job " +
                   "                       WHERE   t_id = :AllJobsDoneSetting AND t_job_is_done = CHR (88))");
  cmd.AddParam("ChangeDaySetting",   RSDBP_IN, ID);
  cmd.AddParam("AllJobsDoneSetting", RSDBP_IN, AllJobsDoneSetting);
  cmd.execute();
 END;
 
 MACRO Get_Work_Date()
  var rs, cmd, dd;
  cmd = RSDCommand(" select t_workdate from usr_comiss_agent_job where t_id = :ChangeDaySetting ");
  cmd.AddParam("AllJobsDoneSetting", RSDBP_IN, ChangeDaySetting);
  rs = RSDRecordSet(cmd);
  rs.movenext();
  DtTmSplit(rs.value(0),dd,null);
  return dd;
 END;
 
 MACRO GetIntervalInSeconds (StartTime)
  var rs, cmd;
   cmd = RSDCommand("SELECT TO_NUMBER(SUBSTR(  TO_DATE(TO_CHAR(SYSDATE,'dd.mm.yyyy')||'-'||:StartTime,'dd.mm.yyyy-hh24:mi:ss') " +
                    "                        - TO_DATE(TO_CHAR(SYSTIMESTAMP,'dd.mm.yyyy-hh24:mi:ss'),'dd.mm.yyyy-hh24:mi:ss'),2,5)) " +
                    " interval_in_seconds " +
                    "   FROM DUAL");
   cmd.AddParam("StartTime", RSDBP_IN, string(StartTime));
   rs = RSDRecordSet(cmd);
   if (rs and rs.movenext())
     return rs.value(0);
   end;
   return 0;
 END;
 
 MACRO CheckJobInSectionDone (section, flag)
 var rs, cmd, str = "", act, actstr = "";
  
  if ((ValType(flag) == V_UNDEF ) or (not flag))
    str = " and t_job_in_progress = chr(1)  ";
  end;
  
  cmd = RSDCommand(" select 1 from USR_COMISS_AGENT_JOB where T_SECTION = :section"
                   "                                      and t_job_is_done = chr(1)  "+
                   "                                      and t_comiss_number != 0 " + str + actstr);
  cmd.AddParam("section", RSDBP_IN, section);
  rs = RSDRecordSet(cmd);
  if (rs and rs.movenext())
    return true;
  else
    return false;
  end;
  
 END;

 MACRO GetTaskRecordSet (WorkMode, StateFlag)
  var rs, cmd, Str, ClientStr, ClientString;
   
   if ((valType(StateFlag) == V_UNDEF) or (StateFlag == false))
      Str = " and t_job_in_progress = chr(1)  ";
   else
      Str = " and t_job_in_progress = chr(88)  "+
            " and t_job_is_done != chr(88)  ";
   end;
   
   ClientString = Get_Client_Info(); //Получаем инфу о том какое задание выполняет тот или иной робот, и пишем ее в ClientString
   
   if ((valType(ClientString) == V_UNDEF) or (ClientString == ""))
      ClientStr = "" ;
   else
      ClientStr = " and t_id not in ("+ClientString+")"  ;
   end;
   
   cmd = RSDCommand("select * from USR_COMISS_AGENT_JOB " +
                    " where T_SECTION = :WorkMode" +Str + ClientStr + 
                    "   and t_comiss_number != 0 order by t_id asc for update nowait" );
   cmd.AddParam("WorkMode", RSDBP_IN, WorkMode);
   rs = RSDRecordSet(cmd);
   return rs;
 END;
 
 MACRO RandomizePause(BigCycle, SmallCycle)
  private var x  = 0,
              xx = 0,
              BCycle,
              SCycle;
              
  if (ValType(BigCycle) == V_UNDEF)
    BCycle = 3;
  else
    BCycle = BigCycle;
  end;
  
  if (ValType(SmallCycle) == V_UNDEF)
    BCycle = 5;
  else
    BCycle = SmallCycle;
  end;
  
  while (xx <= random(BigCycle))
     while (x <= random(SmallCycle))
       testevent(1000);
       x = x + 1;
     end;
     xx = xx + 1;
  end;
 END;
 
 MACRO Get_Sessions_Info()
  var rs, cmd, UserName;
  
   if   (Bank_Name.is_PRBB)
      UserName = UserNamePRBB; 
   elif (Bank_Name.is_GEB)
      UserName = UserNameGEB;
   elif (Bank_Name.is_VUZ)
      UserName = UserNameVUZ;
   elif (Bank_Name.is_SLD)
      UserName = UserNameSLD;
   elif (Bank_Name.is_GO)
      UserName = UserNameGO;
   elif (Bank_Name.is_EXV_Stavropol)
      UserName = UserNameEXV_STAVROPOL; 
   elif (Bank_Name.is_EXV_Volgograd)
      UserName = UserNameEXV_VOLGOGRAD; 
   elif (Bank_Name.is_EXV_Voronezh)
      UserName = UserNameEXV_VORONEZH; 
   elif (Bank_Name.is_EXV)
      UserName = UserNameEXV_SARATOV;
   end;

   cmd = RSDCommand("SELECT   nvl(client_info,'null') client_info " +
                    "  FROM   v$session " +
                    " WHERE   program = 'startbnk.exe' " +
                    "     AND USERNAME = :UserName " 
                    "     AND REGEXP_SUBSTR (module, '[[:digit:]]{1,}') = :ComissAgentRSNumber ");
   cmd.AddParam("UserName",            RSDBP_IN, UserName);
   cmd.AddParam("ComissAgentRSNumber", RSDBP_IN, ComissAgentRSNumber);
   rs = RSDRecordSet(cmd);
   return rs;
 END; 

 MACRO Match_Job(client_info)
  var rs, tmp_val = false; 
   rs = Get_Sessions_Info();
   while (rs and rs.movenext())
     if (rs.value(0) == client_info)
       tmp_val = true;
     end;
   end;
   return tmp_val;
 END;
 
 MACRO GetIncompleteTasks (section, id)
 
  var rs, str;
  
   if (valtype(id) == V_UNDEF)
     str = " and t_comiss_number != 0 ";
   else
     str = " and t_id  = " + id;
   end;
   
   rs = RSDRecordSet("select count(1) from usr_comiss_agent_job where T_JOB_IN_PROGRESS = CHR(88)  "+
                     "                                            and T_JOB_IS_DONE !=CHR(88)  "+
                     "                                            and T_SECTION = " + section + str);
   if (rs and rs.movenext() and rs.value(0) != 0)
     return true;
   else
     rs = RSDRecordSet("select count(1) from usr_comiss_agent_job where T_JOB_IN_PROGRESS = CHR(1)  "+
                       "                                            and T_JOB_IS_DONE = CHR(1)  "+
                       "                                            and T_SECTION = " + section + str);
     if (rs and rs.movenext() and rs.value(0) != 0)
       return true;
     end;
     return false;
   end;
 END;
 
 MACRO Get_Incomplete_Jobs(dEnd, dPay, Kind, CommNumm, Depart)
 var rs, str;
 
 if (Depart == "000")
  str = " and SRV.T_BRANCH = 0 ";
 else
  str = " and SRV.T_BRANCH in ( select distinct(DEP.T_CODE) from  ddp_dep_dbt dep where DEP.T_NAME = "+Depart+")";
 end;
 /*
  rs = RSDRecordSet( " SELECT   nvl(MAX (SRV.T_ID),-1) T_ID " +
                     "   FROM   dsfsrvdoc_dbt srv " +
                     "  WHERE       SRV.T_SFCONTRID = -1 " +
                     "          AND SRV.T_STATUS = 1 " +
                     "          AND SRV.T_DATEPERIODEND = to_date('"+dEnd+"','dd.mm.yyyy') "+
                     "          AND SRV.T_DATEPAY = to_date('"+dPay+"','dd.mm.yyyy') "+
                     "          AND SRV.T_KIND = 2 " +
                     "          and SRV.T_COMMNUMBER = " + CommNumm +
                     "          and SRV.T_EXECUTER = " + ComissAgentRSNumber +
                     "          and SRV.T_FEETYPE = 1 " + str ); 
 */
  rs = RSDRecordSet( " SELECT -1 T_ID from dual ");
  return rs;
 
 END;
 
 MACRO ClearPayLog()
 var cmd;
  cmd = RSDCommand( " DELETE FROM usr_comiss_agent_pay_log WHERE logdate <= TO_DATE (:curdate, 'dd.mm.yyyy') - 5 ");
  cmd.AddParam("curdate", RSDBP_IN, string({curdate}));
  cmd.execute();
 END;
 
 MACRO SavePayLog()
 var cmd;
  cmd = RSDCommand( " INSERT INTO usr_comiss_agent_pay_log (LOGDATE, T_DEPARTMENT,T_DEBIT,T_CREDIT,T_BEGINDATE,T_ENDDATE, " +
                    "                                       T_COMMSUM,T_NDSSUM,T_OBJECT,T_CODE,T_COMMENT,T_ERRORCODE) " +
                    "    SELECT   TO_DATE (TO_CHAR (SYSDATE, 'dd.mm.yyyy')) logdate, " +
                    "             CASE WHEN sfra.T_DEPARTMENT = 1 THEN '000' " +
                    "             ELSE (SELECT t_name FROM ddp_dep_dbt WHERE t_code = sfra.T_DEPARTMENT) " +
                    "             END T_DEPARTMENT, " +
                    "             sfra.t_Debit, " +
                    "             sfra.t_Credit, " +
                    "             sfra.t_BeginDate, " +
                    "             sfra.t_EndDate, " +
                    "             sfdc.t_CommSum, " +
                    "             sfdc.t_NDSSum, " +
                    "             sfc.t_Object, " +
                    "             sfcm.t_Code, " +
                    "             sfra.t_Comment, " +
                    "             sfra.t_ErrorCode " +
                    "      FROM   dsfrepacc_tmp sfra, " +
                    "             dsfdefcom_dbt sfdc, " +
                    "             dsfcontr_dbt sfc, " +
                    "             dsfcomiss_dbt sfcm " +
                    "     WHERE       sfra.t_Kind = 1 " +
                    "             AND sfdc.t_ID(+) = sfra.t_SfDefComID " +
                    "             AND sfc.t_ID = sfra.t_ContrID " +
                    "             AND sfcm.t_FeeType = sfra.t_FeeType " +
                    "             AND sfcm.t_Number = sfra.t_ComissNumber " +
                    "             AND (sfra.t_InvoiceID <> 0 OR sfra.t_ErrorCode <> 0) " +
                    "   ORDER BY   sfra.t_Department, " +
                    "             sfc.t_Object, " +
                    "             sfcm.t_Code, " +
                    "             sfra.t_BeginDate ");
  cmd.execute();
 END;
 
 MACRO LastDayInMonth (ddate)
  var ret, cmd, rs;
   cmd = RSDCommand("select to_char(last_day(:ddate), 'dd.mm.yyyy') m_date from dual");
   cmd.AddParam("ddate", RSDBP_IN, ddate);
   rs = RSDRecordSet(cmd);
   if (rs and rs.movenext)
       ret = date(rs.value ("m_date", null, V_STRING));
   end;
   return ret;
 END;
 
 MACRO GetDescriptionJob(ID)
  var ret, cmd, rs;
   cmd = RSDCommand("select nvl((select t_description_job from usr_comiss_agent_job where t_id = :id), 'null') descr from dual");
   cmd.AddParam("id", RSDBP_IN, ID);
   rs = RSDRecordSet(cmd);
   rs.movenext;
   if (rs.value ("descr") == "null")
     ret = "Наименование задания -" + ID + " не найдено";
   else
     ret = rs.value ("descr");
   end;
   return ret;
 END;
 
 
 MACRO ExecuteConnect(Mode,RunDate,RunDate1,RunTime,MacroName,FuncName,Param0,Param1,Param2,Param3,Param4,Param5,Param6,Param7,Param8,Param9)
  var TimeStr = "", DateStr = "";
   if (ValType (RunTime) != V_UNDEF)
     TimeStr = "|переданное время - " + RunTime; 
   end;
   if (ValType (RunDate1) != V_UNDEF)
     DateStr = "," + RunDate1; 
   end;
   if ( (SetStateOfJob_InProgress (Mode,true)) and (not CheckIsConnectionComplete(Mode)) )
    WriteUsrLog ("Запущено задание - " + GetDescriptionJob(Mode) +"|переданная дата - " + RunDate  + DateStr + TimeStr);
    ExecMacroFile (MacroName, FuncName, Param0, Param1, Param2, Param3, Param4, Param5, Param6, Param7, Param8, Param9);
    SetStateOfJob_IsDone(Mode);
    WriteUsrLog ("Завершено выполнение задания - " + GetDescriptionJob(Mode) +"|переданная дата - " + RunDate  + DateStr + TimeStr);
   end;
 END;
 
 MACRO RunConnectionComiss (Mode)
  var dd,mm,yyyy;
  var RunDate, RunDate1, RunTime, err, Interval, x;
  var regPath = "PRBB\\СЕРВИС ГКБО\\ПРОДЛЕНИЕ ОПЕРДНЯ",
      defTime = "16:00";
  var TempRunString, TempRunMacro, TempRunFunction, TempConnectString;
      DateSplit ( {curdate}, dd, mm, yyyy );

  if (Mode == 0)

     if (  (Bank_Name.is_PRBB)
        or (Bank_Name.is_SLD)
        or (Bank_Name.is_GO) )
       RunDate = {CurDate} - 1;
       while (not (IsWorkDay(RunDate)))
        RunDate = RunDate - 1;
       end;
     elif (   (Bank_Name.is_EXV) or (Bank_Name.is_GEB) or (Bank_Name.is_VUZ) )
         RunDate = {CurDate};
     end;
  
     GetRegistryValue( regPath, V_STRING, RunTime, err );
     if ( ( err != 0 ) or ( strLen( trim( RunTime ) ) == 0 ) )
        RunTime = defTime;
     elif ( index( RunTime, ":" ) == 0 )
        RunTime = defTime;
     end;
  
     RunTime = trim(  RunTime );

     if (Bank_Name.is_PRBB)
       ExecuteConnect(Mode,RunDate,RunDate1,RunTime,"ConnectSfcontr_MainProc.mac", "RunConnect34PRBB",RunDate,true,RunTime,false);
     else
       ExecuteConnect(Mode,RunDate,RunDate1,RunTime,"ConnectSfcontr_MainProc.mac","Run_Connection_34_com",RunDate,RunTime);
     end;

  elif (    (Mode == 1) 
        and (   (Bank_Name.is_PRBB) 
             or (Bank_Name.is_SLD)
             or (Bank_Name.is_GO)) )
     
     GetRegistryValue( regPath, V_STRING, RunTime, err );
     if ( ( err != 0 ) or ( strLen( trim( RunTime ) ) == 0 ) )
        RunTime = defTime;
     elif ( index( RunTime, ":" ) == 0 )
        RunTime = defTime;
     end;
  
     RunTime = trim(  RunTime );
     RunDate = {CurDate};

     if ((Bank_Name.is_PRBB) or (Bank_Name.is_GO))
       ExecuteConnect(Mode,RunDate,RunDate1,RunTime,"ConnectSfcontr_MainProc.mac","RunConnect34PRBB",RunDate,true,RunTime,false);
     else
       ExecuteConnect(Mode,RunDate,RunDate1,RunTime,"ConnectSfcontr_MainProc.mac","Run_Connection_34_com",RunDate,RunTime);
     end;

  elif ((Mode == 1) and (Bank_Name.is_GEB))

     RunDate = {curdate};
     ExecuteConnect(Mode,RunDate,RunDate1,RunTime,"ConnectSfcontr_MainProc.mac","Run_Connection_GEB_etc_com",false,RunDate,342);
     
  elif ((Mode == 1) and (Bank_Name.is_VUZ))

     RunDate = date(String(GetDaysInMonth (date({curdate}))) + substr( string({curdate}), index(string({curdate}) ,"."), StrLen (string({curdate}))));
     ExecuteConnect(Mode,RunDate,RunDate1,RunTime,"ConnectSfcontr_MainProc.mac","RunConnection220_V_VUZ",false,RunDate);
     
  elif ((Mode == 2) and ((Bank_Name.is_PRBB) or (Bank_Name.is_GO)))

     RunDate = date (1,mm,yyyy) - 1;
     ExecuteConnect(Mode,RunDate,RunDate1,RunTime,"ConnectSfcontr_MainProc.mac","Run_Connection_etc_com",RunDate,311,"Р",false);
     
  elif ((Mode == 2) and (Bank_Name.is_EXV))

     RunDate = date(String(GetDaysInMonth (date({curdate}))) + substr( string({curdate}) , index(string({curdate}) ,".") , StrLen (string({curdate}))));
     ExecuteConnect(Mode,RunDate,RunDate1,RunTime,"ConnectSfcontr_MainProc.mac","Run_Connection_etc_com",RunDate,275,"B",false);

  elif ((Mode == 2) and (Bank_Name.is_GEB))

     RunDate = {curdate};
     ExecuteConnect(Mode,RunDate,RunDate1,RunTime,"ConnectSfcontr_MainProc.mac","Run_Connection_GEB_etc_com",false,RunDate,343);

  elif ((Mode == 2) and (Bank_Name.is_VUZ))

     RunDate = date(String(GetDaysInMonth (date({curdate}))) + substr( string({curdate}), index(string({curdate}) ,"."), StrLen (string({curdate}))));
     ExecuteConnect(Mode,RunDate,RunDate1,RunTime,"ConnectSfcontr_MainProc.mac","RunConnection221_222VUZ",false,RunDate);

  elif (   ((Mode == 2)  and (Bank_Name.is_SLD))
        or ((Mode == 12) and (Bank_Name.is_EXV))
        or ((Mode == 19) and (Bank_Name.is_PRBB)) )

     RunDate = date(String(GetDaysInMonth (date({curdate}))) + substr( string({curdate}), index(string({curdate}) ,"."), StrLen (string({curdate}))));
     if ((Bank_Name.is_SLD) or (Bank_Name.is_PRBB))
       ExecuteConnect(Mode,RunDate,RunDate1,RunTime,"ConnectSfcontr_MainProc.mac","RunConnection220PRBB",false,RunDate);
     elif (Bank_Name.is_EXV)
       ExecuteConnect(Mode,RunDate,RunDate1,RunTime,"ConnectSfcontr_MainProc.mac","RunConnection220EXV",false,RunDate);
     end;

  elif ((Mode == 3) and ((Bank_Name.is_PRBB) or (Bank_Name.is_GO)))

     RunDate = date (1,mm,yyyy) - 1;
     ExecuteConnect(Mode,RunDate,RunDate1,RunTime, "ConnectSfcontr_MainProc.mac","Run_Connection_etc_com",RunDate,821,"YourBannyWrote",false);

  elif ((Mode == 3) and (Bank_Name.is_EXV))

     RunDate = date(String(GetDaysInMonth (date({curdate}))) + substr( string({curdate}), index(string({curdate}),"."), StrLen (string({curdate}))));
     ExecuteConnect(Mode,RunDate,RunDate1,RunTime,"ConnectSfcontr_MainProc.mac","Run_Connection_etc_com",RunDate,276,"Е",false);

  elif ((Mode == 3) and (Bank_Name.is_GEB))

     RunDate = {curdate};
     ExecuteConnect(Mode,RunDate,RunDate1,RunTime,"ConnectSfcontr_MainProc.mac","Run_Connection_GEB_etc_com",false,RunDate,344);

  elif ((Mode == 3) and (Bank_Name.is_VUZ))

     RunDate = date(String(GetDaysInMonth (date({curdate}))) + substr( string({curdate}), index(string({curdate}),"."), StrLen (string({curdate}))));
     ExecuteConnect(Mode,RunDate,RunDate1,RunTime,"ConnectSfcontr_MainProc.mac","RunConnection2211VUZ",false,RunDate);

  elif (   ((Mode == 3) and (Bank_Name.is_SLD)) 
        or ((Mode == 21) and (Bank_Name.is_PRBB)) )

     RunDate = date(String(GetDaysInMonth (date({curdate}))) + substr( string({curdate}), index(string({curdate}),"."), StrLen (string({curdate}))));
     ExecuteConnect(Mode,RunDate,RunDate1,RunTime,"ConnectSfcontr_MainProc.mac","Run_Connection_etc_com",RunDate,730,"B",false);

  elif ((Mode == 4) and ((Bank_Name.is_PRBB) or (Bank_Name.is_GO)))

     RunDate = date (1,mm,yyyy) - 1;
     ExecuteConnect(Mode,RunDate,RunDate1,RunTime,"ConnectSfcontr_MainProc.mac","Run_Connection_etc_com",RunDate,1310,"YourBannyWrote",false);

  elif ((Mode == 4) and (Bank_Name.is_GEB))

     RunDate = {curdate};
     ExecuteConnect(Mode,RunDate,RunDate1,RunTime,"ConnectSfcontr_MainProc.mac","Run_Connection_GEB_etc_com",false,RunDate,349);

  elif ((Mode == 4) and (Bank_Name.is_VUZ))

     RunDate = date (1,mm,yyyy) - 1;
     ExecuteConnect(Mode,RunDate,RunDate1,RunTime,"ConnectSfcontr_MainProc.mac","Run_Connection_VUZ_etc_com",RunDate,1310,"Z",false);

  elif (   ((Mode == 4) and (Bank_Name.is_SLD))
        or ((Mode == 22) and (Bank_Name.is_PRBB)) )

     RunDate = date(String(GetDaysInMonth (date({curdate}))) + substr( string({curdate}), index(string({curdate}),"."), StrLen (string({curdate}))));
     ExecuteConnect(Mode,RunDate,RunDate1,RunTime,"ConnectSfcontr_MainProc.mac","Run_Connection_etc_com",RunDate,751,"Е",false);

  elif ((Mode == 5) and ((Bank_Name.is_PRBB) or (Bank_Name.is_GO)))

     RunDate = date (1,mm,yyyy) - 1;
     ExecuteConnect(Mode,RunDate,RunDate1,RunTime,"ConnectSfcontr_MainProc.mac","Run_Connection_etc_com",RunDate,3141,"YourBannyWrote",false);

  elif ((Mode == 5) and (Bank_Name.is_GEB))

     RunDate = {curdate};
     ExecuteConnect(Mode,RunDate,RunDate1,RunTime,"ConnectSfcontr_MainProc.mac","Run_Connection_GEB_etc_com",false,RunDate,371);

  elif (   ((Mode == 5) and (Bank_Name.is_SLD))
        or ((Mode == 23) and (Bank_Name.is_PRBB)) )

     RunDate = date(String(GetDaysInMonth (date({curdate}))) + substr( string({curdate}), index(string({curdate}),"."), StrLen (string({curdate}))));
     ExecuteConnect(Mode,RunDate,RunDate1,RunTime,"ConnectSfcontr_MainProc.mac","Run_Connection_etc_com",RunDate,752,"#",false);

  elif ((Mode == 6) and ((Bank_Name.is_PRBB) or (Bank_Name.is_GO)))

     RunDate = date (1,mm,yyyy) - 1;
     ExecuteConnect(Mode,RunDate,RunDate1,RunTime,"ConnectSfcontr_MainProc.mac","Run_Connection_etc_com",RunDate,3150,"YourBannyWrote",false);

  elif ((Mode == 6) and (Bank_Name.is_GEB))
  
     RunDate = {CurDate};
  
     GetRegistryValue( regPath, V_STRING, RunTime, err );
     if ( ( err != 0 ) or ( strLen( trim( RunTime ) ) == 0 ) )
        RunTime = defTime;
     elif ( index( RunTime, ":" ) == 0 )
        RunTime = defTime;
     end;
  
     RunTime = trim(  RunTime );
     ExecuteConnect(Mode,RunDate,RunDate1,RunTime,"ConnectSfcontr_MainProc.mac","Run_Connection_34_com",RunDate,RunTime);

  elif ((Mode == 7) and (Bank_Name.is_GEB))
  
     RunDate = {curdate};
     ExecuteConnect(Mode,RunDate,RunDate1,RunTime,"ConnectSfcontr_MainProc.mac","Run_Connection_GEB_etc_com",false,RunDate,323);

   elif (   ((Mode == 4) and (Bank_Name.is_EXV))
         or ((Mode == 5) and (Bank_Name.is_VUZ))
         or ((Mode == 6) and (Bank_Name.is_SLD))
         or ((Mode == 7) and (Bank_Name.is_PRBB))
         or ((Mode == 7) and (Bank_Name.is_GO))
         or ((Mode == 8) and (Bank_Name.is_GEB)) )

     RunDate = {CurDate} - 1;
     while (not (IsWorkDay(RunDate)))
      RunDate = RunDate - 1; 
     end;
     ExecuteConnect(Mode,RunDate,RunDate1,RunTime,"ConnectSfcontr_MainProc.mac","Run_Connection_Com_To_Phys",RunDate,390,"YourBannyWrote",false);

  elif ((Mode == 7) and (Bank_Name.is_VUZ))
  
     GetRegistryValue( regPath, V_STRING, RunTime, err );
     if ( ( err != 0 ) or ( strLen( trim( RunTime ) ) == 0 ) )
        RunTime = defTime;
     elif ( index( RunTime, ":" ) == 0 )
        RunTime = defTime;
     end;
  
     RunTime = trim(  RunTime );
     RunDate = {CurDate};
     ExecuteConnect(Mode,RunDate,RunDate1,RunTime,"ConnectSfcontr_MainProc.mac","RunConnect34VUZ",RunDate,true,RunTime,false);

  elif ( (Mode == 8) and (Bank_Name.is_EXV) )

     RunDate = {CurDate} - 1;
     while (not (IsWorkDay(RunDate)))
      RunDate = RunDate - 1; 
     end;

     GetRegistryValue( regPath, V_STRING, RunTime, err );
     if ( ( err != 0 ) or ( strLen( trim( RunTime ) ) == 0 ) )
        RunTime = defTime;
     elif ( index( RunTime, ":" ) == 0 )
        RunTime = defTime;
     end;

     RunTime = trim(  RunTime );
     ExecuteConnect(Mode,RunDate,RunDate1,RunTime,"ConnectSfcontr_MainProc.mac","Run_Connection_34_com",RunDate,RunTime);

  elif (   ( (   (Mode == 5) 
              or (Mode == 6)
              or (Mode == 7))  and (Bank_Name.is_EXV)) 
        or ( (   (Mode == 8) 
              or (Mode == 9)
              or (Mode == 10)) and (   (Bank_Name.is_PRBB) 
                                    or (Bank_Name.is_GO)) )
        or ( (   (Mode == 9) 
              or (Mode == 10)
              or (Mode == 11)) and (Bank_Name.is_GEB))
        or ( (   (Mode == 7) 
              or (Mode == 8)
              or (Mode == 9)) and (Bank_Name.is_SLD)) )

     RunDate = {CurDate} - 1;
     while (not (IsWorkDay(RunDate)))
      RunDate = RunDate - 1; 
     end;
     if (   ((Mode == 6)  and (Bank_Name.is_EXV))
         or ((Mode == 8)  and (Bank_Name.is_SLD))
         or ((Mode == 9)  and ((Bank_Name.is_PRBB) or (Bank_Name.is_GO)))
         or ((Mode == 10) and (Bank_Name.is_GEB)) )
       RunDate = RunDate + 1;
     elif (   ((Mode == 7)  and (Bank_Name.is_EXV))
           or ((Mode == 9)  and (Bank_Name.is_SLD))
           or ((Mode == 10) and ((Bank_Name.is_PRBB) or (Bank_Name.is_GO)))
           or ((Mode == 11) and (Bank_Name.is_GEB)) )
       RunDate = RunDate + 2;
     end;
     ExecuteConnect(Mode,RunDate,RunDate1,RunTime,"ConnectSfcontr_MainProc.mac","Run_Connection_Com_To_Phys",RunDate,3100,"YourBannyWrote",false);

  elif (    ((Mode == 8)  and (Bank_Name.is_VUZ))
         or ((Mode == 10) and (Bank_Name.is_SLD))
         or ((Mode == 13) and (Bank_Name.is_PRBB))
         or ((Mode == 13) and (Bank_Name.is_GEB))
         or ((Mode == 20) and (Bank_Name.is_EXV)) )

     RunDate = {CurDate} - 1;
     while (not (IsWorkDay(RunDate)))
      RunDate = RunDate - 1; 
     end;
     ExecuteConnect(Mode,RunDate,RunDate1,RunTime,"ConnectSfcontr_MainProc.mac","Run_Connection_GEB_etc_com",false,RunDate,557);

  elif ( (   (Mode == 9) 
          or (Mode == 10) ) and (Bank_Name.is_EXV) )

     if (Mode == 9)
       RunDate = {CurDate} - 1;
       while (not (IsWorkDay(RunDate)))
        RunDate = RunDate - 1; 
       end;
     elif (Mode == 10)
       RunDate = {CurDate};
       while (not (IsWorkDay(RunDate)))
        RunDate = RunDate - 1; 
       end;
     end;
     ExecuteConnect(Mode,RunDate,RunDate1,RunTime,"ConnectSfcontr_MainProc.mac","Run_Connection_GEB_etc_com",false,RunDate,3411);

  elif (    ((Mode == 9) and (Bank_Name.is_VUZ))
         or ((Mode == 11) and (Bank_Name.is_EXV))
         or ((Mode == 14) and (Bank_Name.is_PRBB)) )

     RunDate = {CurDate} - 1;
     while (not (IsWorkDay(RunDate)))
      RunDate = RunDate - 1; 
     end;
     ExecuteConnect(Mode,RunDate,RunDate1,RunTime,"Token_DataMining_MainProc.mac","Main_Unit",RunDate,false);

  elif (   ((Mode == 6) and (Bank_Name.is_VUZ))
        or (((Mode == 11) or (Mode == 12)) and (Bank_Name.is_PRBB))
        or ((Mode == 12) and (Bank_Name.is_GEB)) )
     
     if (Bank_Name.is_PRBB)
       if (Mode == 11)
         RunDate = {CurDate} - 1;
       elif (Mode == 12)
         RunDate = {CurDate};
       end;
     elif ((Bank_Name.is_GEB) or (Bank_Name.is_VUZ))
       RunDate = {CurDate};
     end;
     
     while (not (IsWorkDay(RunDate)))
      RunDate = RunDate - 1; 
     end;
     
     ExecuteConnect(Mode,RunDate,RunDate1,RunTime,"ConnectSfcontr_MainProc.mac","RunConnection3411_18",RunDate,false);

  elif (   (Mode == 13) and (Bank_Name.is_EXV)
        or (Mode == 15) and (Bank_Name.is_EXV)
        or (Mode == 25) and (Bank_Name.is_PRBB)
        or (Mode == 26) and (Bank_Name.is_PRBB) )

     if ( (Mode == 13) or (Mode == 26))
       RunDate  = DateShift(date("01" + substr( string({curdate}), index(string({curdate}),"."), StrLen (string({curdate})))),null, -1);
       RunDate1 = LastDayInMonth(RunDate);
     elif ((Mode == 15) or (Mode == 25))
       RunDate  = date(01, mm, yyyy);
       RunDate1 = date(21, mm, yyyy);
       while (not (IsWorkDay(RunDate1)))
        RunDate1 = RunDate1 + 1;
       end;
     end;
     ExecuteConnect(Mode,RunDate,RunDate1,RunTime,"ClubCard_DataMining_MainProc.mac","Main_Unit",RunDate,RunDate1,false);

  elif ( (Mode == 14) and (Bank_Name.is_EXV) )

     RunDate = DateShift(date("01" + substr( string({curdate}) , index(string({curdate}) ,".") , StrLen (string({curdate})))),null) - 1;
     ExecuteConnect(Mode,RunDate,RunDate1,RunTime,"ConnectSfcontr_MainProc.mac","Run_Connection_etc_com",RunDate,1310,V_UNDEF,false);

  elif (   ((Mode == 10) and (Bank_Name.is_VUZ)) 
        or ((Mode == 15) and (Bank_Name.is_PRBB)) 
        or ((Mode == 21) and (Bank_Name.is_EXV)) )

     RunDate = {CurDate} - 1;
     while (not (IsWorkDay(RunDate)))
      RunDate = RunDate - 1; 
     end;
     ExecuteConnect(Mode,RunDate,RunDate1,RunTime,"Print_vk.mac","ПечатьВсехУведомлений",false,RunDate,false,false);

  elif (   ((Mode == 11) and (Bank_Name.is_VUZ)) 
        or ((Mode == 16) and (Bank_Name.is_PRBB)) 
        or ((Mode == 22) and (Bank_Name.is_EXV)) )

     RunDate = {CurDate} - 1;
     while (not (IsWorkDay(RunDate)))
      RunDate = RunDate - 1; 
     end;
     ExecuteConnect(Mode,RunDate,RunDate1,RunTime,"Print_vk.mac","ПечатьВсехИзвещений",false,RunDate,false,false);

  elif ( (Mode == 16) and (Bank_Name.is_EXV) )

     RunDate = {CurDate} - 1;
     while (not (IsWorkDay(RunDate)))
      RunDate = RunDate - 1; 
     end;
     ExecuteConnect(Mode,RunDate,RunDate1,RunTime,"ConnectSfcontr_MainProc.mac","Run_Connection_Com_To_Phys",RunDate,3410,"YourBannyWrote",false);

  elif (   (((Mode == 12) or (Mode == 13)) and (Bank_Name.is_VUZ))
        or (((Mode == 17) or (Mode == 18)) and (Bank_Name.is_PRBB)) 
        or (((Mode == 23) or (Mode == 24)) and (Bank_Name.is_EXV)) )
    
     RunDate = {CurDate} - 1;
     while (not (IsWorkDay(RunDate)))
      RunDate = RunDate - 1; 
     end;
     if (   (Mode == 12) 
         or (Mode == 17) 
         or (Mode == 23) )
       ExecuteConnect(Mode,RunDate,RunDate1,RunTime,"ConnectSfContrVK_MainProc.mac","ConnectSfContrVK",RunDate,7,false);
     elif (   (Mode == 13) 
           or (Mode == 18) 
           or (Mode == 24) )
       ExecuteConnect(Mode,RunDate,RunDate1,RunTime,"ConnectSfContrVK_MainProc.mac","ConnectSfContrVK",RunDate,9,false);
     end;
    
  elif ( (   (Mode == 17) 
          or (Mode == 18)
          or (Mode == 19)) and (Bank_Name.is_EXV) )

     RunDate = {CurDate} - 1;
     while (not (IsWorkDay(RunDate)))
      RunDate = RunDate - 1; 
     end;
     if (Mode == 18)
       RunDate = RunDate + 1;
     elif (Mode == 19)
       RunDate = RunDate + 2;
     end;
     ExecuteConnect(Mode,RunDate,RunDate1,RunTime,"ConnectSfcontr_MainProc.mac","Run_Connection_Com_To_Phys",RunDate, 323,"YourBannyWrote",false);
     
  elif ( (Mode == 20) and (Bank_Name.is_PRBB) )
  
     RunDate = date(String(GetDaysInMonth (date({curdate}))) + substr( string({curdate}), index(string({curdate}),"."), StrLen (string({curdate}))));
     ExecuteConnect(Mode,RunDate,RunDate1,RunTime,"ConnectSfcontr_MainProc.mac","Run_Connection_etc_com",RunDate,720,"Ё",false);
    
  elif ( (Mode == 24) and (Bank_Name.is_PRBB) )
  
     RunDate = date(String(GetDaysInMonth (date({curdate}))) + substr( string({curdate}), index(string({curdate}),"."), StrLen (string({curdate}))));
     ExecuteConnect(Mode,RunDate,RunDate1,RunTime,"ConnectSfcontr_MainProc.mac","Run_Connection_etc_com",RunDate,810,"U",false);
    
  elif ( (Mode == 27) and (Bank_Name.is_PRBB) )
    
     RunDate = {curdate};
     ExecuteConnect(Mode,RunDate,RunDate1,RunTime,"Front_Update_MainProc.mac","Main_Unit",RunDate,false);
     
  end;

 END;
 
 MACRO GetErrorString(ErrorNumber)
 var rs, cmd;
  cmd = RSDCommand("select lower(t_contents) txt from dbank_msg where t_number = :ErrorNumber and t_page = 0");
  cmd.AddParam("ErrorNumber", RSDBP_IN, ErrorNumber);
  rs = RSDRecordSet(cmd);
  if (rs and rs.movenext())
    return "Ошибка создание сервисной операции:"+rs.value(0);
  else
    return "Ошибка создание сервисной операции";
  end;
 END;
 
 MACRO CheckIsNewOperDayOpened()
 var rs, cmd;
 
  RslDefCon.BeginTrans();
  cmd = RSDCommand("SELECT T_JOB_IN_PROGRESS, T_JOB_IS_DONE FROM USR_COMISS_AGENT_JOB WHERE T_ID = :ChangeDaySetting for update nowait");
  cmd.AddParam("ChangeDaySetting", RSDBP_IN, ChangeDaySetting);
  rs = RSDRecordSet(cmd);
  rs.movenext();
  
  if ( (rs.value(0) == strfor(1)) and (rs.value(1) == strfor(88)) )
    
    cmd = RSDCommand(" UPDATE USR_COMISS_AGENT_JOB SET T_JOB_IN_PROGRESS = CHR (88), T_JOB_IS_DONE = CHR (1), T_WORKDATE = :curdate " +
                     "  WHERE T_ID = :ChangeDaySetting");
    cmd.AddParam("curdate",          RSDBP_IN, {curdate});
    cmd.AddParam("ChangeDaySetting", RSDBP_IN, ChangeDaySetting);
    cmd.execute();
    
    cmd = RSDCommand(" UPDATE USR_COMISS_AGENT_JOB SET T_WORKDATE = :curdate WHERE T_ID != :ChangeDaySetting");
    cmd.AddParam("curdate", RSDBP_IN, {curdate});
    cmd.AddParam("ChangeDaySetting", RSDBP_IN, ChangeDaySetting);
    cmd.execute();
    
    cmd = RSDCommand(" UPDATE USR_COMISS_AGENT_JOB SET T_JOB_IN_PROGRESS = CHR (1), T_JOB_IS_DONE = CHR (1) WHERE T_ID != :ChangeDaySetting");
    cmd.AddParam("ChangeDaySetting", RSDBP_IN, ChangeDaySetting);
    cmd.execute();
    RslDefCon.CommitTrans();
    return true;
  else
    RslDefCon.CommitTrans();
    return ( (rs.value(0) == strfor(88)));
  end;
  
 onerror(x)
  if (RslDefCon.isInTrans)
   RslDefCon.RollbackTrans();
  end;  
  SetPauseInSeconds(1,false);
  return CheckIsNewOperDayOpened();
 END;
 
 MACRO SetWorkDay(Day)
  var cmd;
  cmd = RSDCommand("update usr_comiss_agent_job set t_workdate  = :Day where t_id = :ChangeDaySetting");
  cmd.AddParam("Day",              RSDBP_IN, Day);
  cmd.AddParam("ChangeDaySetting", RSDBP_IN, ChangeDaySetting);
  cmd.execute;
 END;
 
 MACRO CheckCompleteAllTasksForDay()
 var rs;
  rs = RSDRecordSet("select t_job_in_progress, t_job_is_done, t_workdate from usr_comiss_agent_job where t_id = "+ChangeDaySetting+"");
  rs.movenext();
  if ( (rs.value(0) == strfor(88)) and (rs.value(2) != {curdate}) )
    ExecMacroFile("CurDateProc.mac","SetOperDay", date(rs.value(2)));
    WriteUsrLog("Произведен переход в операционный день " + {curdate} );
    FlagBackChangeOperDay = true; //Взводим флаг, который говорит что мы перешли в предыдущий опер день
  elif ( ( rs.value(2) == {curdate} ) and (rs.value(2) < date()) )
    FlagBackChangeOperDay = true; //Взводим флаг, который говорит что мы перешли в предыдущий опер день
  end; 
  
 END;
 
 MACRO CreateAndRunSrvOperation (Dep, Curr, Opr, ComNum, ComCode, Mode)
 
  var dd,mm,yyyy;
  
  var rs,
      Agent_Param,
      DateEnd,
      R_Mode,
      retval,
      idSrvOpr,
      DatePay,
      Undef;
  
  var ErrorString        = "",
      CurOnly            = false,
      Department         = "",
      Fi                 = "",
      Accounts           = "",
      Group              = NULL,
      Oper               = "",
      CreateSrvOperation = false,
      ClientString = "",
      RepFileName = "";
  
  DateSplit ( {curdate}, dd, mm, yyyy );
  
  if (valtype(Mode) == V_UNDEF)
     R_Mode = 0;
  else
     R_Mode = Mode;
  end;
  
  if (valtype(Dep) == V_UNDEF)
     Department = "000";
  else
     Department = Dep;
   end;
     
  if (   ((Mode == 11) and (Bank_Name.is_VUZ))
      or ((Mode == 13) and (Bank_Name.is_PRBB))
      or ((Mode == 17) and (Bank_Name.is_EXV)) )
    Fi = Undef;
  else
    if (valtype(Curr) == V_UNDEF)
       Fi = "810";
    else
       Fi = Curr;
    end;
  end;

  if (valtype(Opr) == V_UNDEF)
     Oper = "ALL";
  else
     Oper = Opr;
  end;
  
  if (Bank_Name.is_PRBB)
    
    if (   (R_Mode == 1) 
        or (R_Mode == 3)
        or (R_Mode == 15)
        or (R_Mode == 16)
        or (R_Mode == 17) )
    
      if (( ComCode == "2.2.1" ) or (ComCode == "7.5.3"))
        DateEnd = DateShift(date("01" + substr( string({curdate}) , index(string({curdate}) ,".") , StrLen (string({curdate})))),null,12) - 1;
      elif ( ComCode == "2.2.2" )
        DateEnd = DateShift(date("01" + substr( string({curdate}) , index(string({curdate}) ,".") , StrLen (string({curdate})))),null,6) - 1 ;
      elif ( ComCode == "2.2.3" )
        DateEnd = DateShift(date("01" + substr( string({curdate}) , index(string({curdate}) ,".") , StrLen (string({curdate})))),null,3) - 1 ;
      elif ( ComCode == "2.2.4" )
        DateEnd = DateShift(date("01" + substr( string({curdate}) , index(string({curdate}) ,".") , StrLen (string({curdate})))),null,18) - 1 ;
      else
        DateEnd = date(String(GetDaysInMonth(date({curdate}))) + substr(string({curdate}), index(string({curdate}),"."), StrLen (string({curdate}))));
      end;
      
    elif (( R_Mode == 4 ) or ( R_Mode == 11 ))
    
      DateEnd = {curdate};
      
    elif ( (R_Mode == 5) or (R_Mode == 6) )
    
      DateEnd = date(1,mm,yyyy) - 1;
      
    else
    
      DateEnd = date({curdate}) - 1;
      while (not (IsWorkDay(DateEnd)))
       DateEnd = DateEnd - 1; 
      end;
      
      if (R_Mode == 8)
        DateEnd = DateEnd + 1; //Суббота
      elif (R_Mode == 9)
        DateEnd = DateEnd + 2; //Воскресенье
      end;
      
    end;

  elif (Bank_Name.is_EXV)
  
    if (   (R_Mode == 1) 
        or (R_Mode == 12)
        or (R_Mode == 16) )
    
      if (( ComCode == "2.2.1" )) //2.2.1
        DateEnd = DateShift(date("01" + substr( string({curdate}) , index(string({curdate}) ,".") , StrLen (string({curdate})))),null,12) - 1;
      elif ( ComCode == "2.2.2" )//2.2.2
        DateEnd = DateShift(date("01" + substr( string({curdate}) , index(string({curdate}) ,".") , StrLen (string({curdate})))),null,6) - 1;
      elif ( ComCode == "2.2.3" )//2.2.3
        DateEnd = DateShift(date("01" + substr( string({curdate}) , index(string({curdate}) ,".") , StrLen (string({curdate})))),null,3) - 1;
      elif ( ComCode == "2.2.4" )//2.2.4
        DateEnd = DateShift(date("01" + substr( string({curdate}) , index(string({curdate}) ,".") , StrLen (string({curdate})))),null,18) - 1;
      else
        DateEnd = date(String(GetDaysInMonth(date({curdate}))) + substr(string({curdate}), index(string({curdate}),"."), StrLen (string({curdate}))));
      end;
        
    elif (R_Mode == 3)
    
      if ( ComCode == "2.7.7" )
        DateEnd = DateShift(date("01" + substr(string({curdate}), index(string({curdate}),"."), StrLen(string({curdate})))),null,12) - 1;
      else
        DateEnd = date(String(GetDaysInMonth(date({curdate}))) + substr(string({curdate}), index(string({curdate}),"."), StrLen(string({curdate}))));
      end;
        
    elif (   (R_Mode == 4)
          or (R_Mode == 5)
          or (R_Mode == 6)
          or (R_Mode == 7)
          or (R_Mode == 8)
          or (R_Mode == 9)
          or (R_Mode == 11)
          or (R_Mode == 17)
          or (R_Mode == 18) )
          
      DateEnd = {curdate} - 1;
      while (not (IsWorkDay(DateEnd)))
       DateEnd = DateEnd - 1; 
      end;
        
      if (R_Mode == 5)
        DateEnd = DateEnd + 1; //Суббота
      elif (R_Mode == 6)
        DateEnd = DateEnd + 2; //Воскресенье
      end;
    
    elif (   (R_Mode == 13)
          or (R_Mode == 14)
          or (R_Mode == 15) )
    
      DateEnd = DateShift(date("01" + substr( string({curdate}) , index(string({curdate}) ,".") , StrLen (string({curdate})))),null) - 1;
      
    elif (R_Mode == 13)
    
      DateEnd = LastDayInMonth({curdate});
      
    else
    
      DateEnd = {curdate};
      while (not (IsWorkDay(DateEnd)))
       DateEnd = DateEnd - 1; 
      end;
      
    end;
  
  elif (Bank_Name.is_GEB)
  
    if   ((R_Mode == 5) or (R_Mode == 6))
    
      DateEnd = date(String(GetDaysInMonth (date({curdate}))) + substr( string({curdate}), index(string({curdate}),"."), StrLen (string({curdate}))));
    
    elif (   (R_Mode == 7)
          or (R_Mode == 8)
          or (R_Mode == 9))
     
      DateEnd = date({curdate}) - 1;
      while (not (IsWorkDay(DateEnd)))
       DateEnd = DateEnd - 1; 
      end;
      
      if (R_Mode == 8)
        DateEnd = DateEnd + 1; //Суббота
      elif (R_Mode == 9)
        DateEnd = DateEnd + 2; //Воскресенье
      end;

    elif (R_Mode == 10)
      DateEnd = {curdate} - 15; //Возвращаемся в предыдущий месяц и получаем последнюю дату предыдущего месяца
      DateEnd = date(String(GetDaysInMonth (DateEnd) + substr( string(DateEnd) , index(string(DateEnd) ,".") , StrLen (string(DateEnd)))));
    else
      DateEnd = {curdate};
    end;

  elif (Bank_Name.is_VUZ)
  
    if   (   ( ComNum == 1002 )
          or ( ComNum == 1060 )
          or ( ComNum == 1070 )
          or ( ComNum == 1068 )
          or ( ComNum == 1080 )
          or ( ComNum == 1073 ) 
          or ( ComNum == 1074 ) )
          
        DateEnd = date(String(GetDaysInMonth(date({curdate}))) + substr(string({curdate}), index(string({curdate}) ,"."), StrLen(string({curdate}))));
    
    elif (   (ComNum == 1071) 
          or (ComNum == 1072) )
          
        DateEnd = DateShift(date("01" + substr( string({curdate}) , index(string({curdate}) ,".") , StrLen (string({curdate})))),null,12) - 1;
        
    elif (   (R_Mode == 7) 
          or (R_Mode == 10)
          or (R_Mode == 11)
          or (R_Mode == 12))
      
      DateEnd = date({curdate}) - 1;
      while (not (IsWorkDay(DateEnd)))
       DateEnd = DateEnd - 1; 
      end;
      
    else
    
        DateEnd = {curdate};
        while (not (IsWorkDay(DateEnd)))
         DateEnd = DateEnd - 1; 
        end;
        
    end;

  elif (Bank_Name.is_SLD)
    
    if ( (R_Mode == 1) or (R_Mode == 2) )
    
      if ( ComCode == "2.2.1" ) //2.2.1
        DateEnd = DateShift(date("01" + substr( string({curdate}) , index(string({curdate}) ,".") , StrLen (string({curdate})))),null,12) - 1;
      elif ( ComCode == "2.2.2" )//2.2.2
        DateEnd = DateShift(date("01" + substr( string({curdate}) , index(string({curdate}) ,".") , StrLen (string({curdate})))),null,6) - 1 ;
      elif ( ComCode == "2.2.3" )//2.2.3
        DateEnd = DateShift(date("01" + substr( string({curdate}) , index(string({curdate}) ,".") , StrLen (string({curdate})))),null,3) - 1 ;
      elif ( ComCode == "2.2.4" )//2.2.4
        DateEnd = DateShift(date("01" + substr( string({curdate}) , index(string({curdate}) ,".") , StrLen (string({curdate})))),null,18) - 1 ;
      else
        DateEnd = date(String(GetDaysInMonth(date({curdate}))) + substr(string({curdate}), index(string({curdate}),"."), StrLen (string({curdate}))));
      end;
      
    elif (    (R_Mode == 3)
           or (R_Mode == 4)
           or (R_Mode == 7)
           or (R_Mode == 8)
           or (R_Mode == 9))
      
      DateEnd = date({curdate}) - 1;
      while (not (IsWorkDay(DateEnd)))
       DateEnd = DateEnd - 1; 
      end;
      
      if (R_Mode == 8)
        DateEnd = DateEnd + 1; //Суббота
      elif (R_Mode == 9)
        DateEnd = DateEnd + 2; //Воскресенье
      end;
      
    elif ( (R_Mode == 5) or (R_Mode == 6) )
    
      DateEnd = {curdate};
    
    end;
  
  elif (Bank_Name.is_GO)
    
    if ( (R_Mode == 51) or (R_Mode == 53) )
    
      if ( ComCode == "2.2.1" ) //2.2.1
        DateEnd = DateShift(date("01" + substr( string({curdate}) , index(string({curdate}) ,".") , StrLen (string({curdate})))),null,12) - 1;
      elif ( ComCode == "2.2.2" )//2.2.2
        DateEnd = DateShift(date("01" + substr( string({curdate}) , index(string({curdate}) ,".") , StrLen (string({curdate})))),null,6) - 1 ;
      elif ( ComCode == "2.2.3" )//2.2.3
        DateEnd = DateShift(date("01" + substr( string({curdate}) , index(string({curdate}) ,".") , StrLen (string({curdate})))),null,3) - 1 ;
      elif ( ComCode == "2.2.4" )//2.2.4
        DateEnd = DateShift(date("01" + substr( string({curdate}) , index(string({curdate}) ,".") , StrLen (string({curdate})))),null,18) - 1 ;
      else
        DateEnd = date(String(GetDaysInMonth(date({curdate}))) + substr(string({curdate}), index(string({curdate}),"."), StrLen (string({curdate}))));
      end;
      
    elif ( R_Mode == 54 )
    
      DateEnd = {curdate};
      
    elif ( (R_Mode == 55) or (R_Mode == 56) )
    
      DateEnd = date(1,mm,yyyy) - 1;
      
    else
    
      DateEnd = date({curdate}) - 1;
      while (not (IsWorkDay(DateEnd)))
       DateEnd = DateEnd - 1; 
      end;
      
      if (R_Mode == 58)
        DateEnd = DateEnd + 1; //Суббота
      elif (R_Mode == 59)
        DateEnd = DateEnd + 2; //Воскресенье
      end;
      
    end;
  
  end;

  datepay = {curdate};

  while (not (IsWorkDay(DatePay)))
   DatePay = DatePay + 1; 
  end;
 
  record srvdoc (sfsrvdoc);
  ClearRecord (srvdoc);
  srvdoc.ServKind        = 3;//Тип обслуживани РКО
  srvdoc.Kind            = 2;//1 - начисление, 2 - оплата
  srvdoc.CommNumber      = ComNum;
  srvdoc.DatePeriodEnd   = DateEnd;
  srvdoc.DatePay         = DatePay;
  srvdoc.ISCALCONEPERIOD = StrFor(88);
  
  if (Department == "000") 
  
    rs = Get_Incomplete_Jobs(srvdoc.DatePeriodEnd, srvdoc.DatePay, srvdoc.Kind, ComNum, Department);
    if (rs and rs.movenext())
    
      if (rs.value(0) != -1)
        retval = 0;
        srvdoc.id = rs.value(0);
      else
        retval = CreateSfSrvDoc(srvdoc, curOnly, NULL, fi, accounts, group, Oper);
        CreateSrvOperation = true;
      end;
      
    end;
    
  else
    
    rs = Get_Incomplete_Jobs(srvdoc.DatePeriodEnd, srvdoc.DatePay, srvdoc.Kind, ComNum, Department);
    if (rs and rs.movenext())
    
      if (rs.value(0) != -1)
        retval = 0;
        srvdoc.id = rs.value(0);
      else
        retval = CreateSfSrvDoc(srvdoc, curOnly, Department, fi, accounts, group, Oper);
        CreateSrvOperation = true;
      end;
      
    end;

  end;
  
  
  if ((retval == 0) and CreateSrvOperation)
     idSrvOpr = srvdoc.id;
     WriteUsrLog ("Успешно создана сервисная операция id" + idSrvOpr, 
                  " Комиссия - " + ComCode + "("+Department+")""Дата окончания периода - " + DateEnd + " Дата оплаты - " + DatePay);
  elif ((retval == 0) and not CreateSrvOperation)
     idSrvOpr = srvdoc.id;
     WriteUsrLog ("Была найдена не завершенная сервисная операция id "+idSrvOpr, 
                  " Комиссия - " + ComCode + "("+Department+")""Дата окончания периода - " + DateEnd + " Дата оплаты - " + DatePay);
  elif (retval != 0) 
     ErrorString = GetErrorString(retval);
     WriteUsrLog (ErrorString);
     RunError("Ошибка создания сервисной операции");
  end;
 
  retval = RunSfSrvDoc(idSrvOpr, RepFileName);
  
   if (retval == 0) 
     WriteUsrLog ("Произведена оплата сервисной операции id" + idSrvOpr, Agent_Param );
     SavePayLog();
     WriteUsrLog ("Лог оплаты сервисной операции id "+idSrvOpr+" сохранен");
  else
     WriteUsrLog ("Ошибка запуска сервисной операции " + idSrvOpr, Agent_Param );
  end;
  
  onerror(x)
    if (RslDefCon.isInTrans)
     RslDefCon.RollbackTrans();
    end;  
    WriteUsrLog (" Произошла ошибка, при попытке создать сервисную операцию с параметрами:" + 
                 " Комиссия - " + ComCode + "("+Department+")" +
                 " Дата окончания периода - " + DateEnd + 
                 " Дата оплаты - "+DatePay+
                 " она будет пропущена");
    return false;
  
 END;

 MACRO RunPay (mode, StateFlag) 
  
  var cmd,rs, RRMode;
//RR Для ГЭБа и ВУЗа mode состоит из самого режима 32 и номера секции 1, поэтому получается 321, во время написания ЭВ и ПРББ я до этого не додумался
//RR 27.10.2014 Как я мог такое написать - глупейшая идея
//RR 13.01.2015 Тихо, сам с собой, веду беседу

  RRMode = mode;
  
  if ((valType(StateFlag) == V_UNDEF) or (StateFlag == false))
    rs = GetTaskRecordSet(RRMode, false);
  else
    rs = GetTaskRecordSet(RRMode, true);
  end;
  
  RslDefCon.BeginTrans();
  
  if (rs and rs.movenext())
    SetStateOfJob_InProgress(rs.value("T_ID")); //Пишем данные в USR_COMISS_AGENT_JOB
    RslDefCon.CommitTrans();
    Update_Client_Info(rs.value("T_ID"));          //Заносим инфу в v$session
    CreateAndRunSrvOperation(rs.value("T_DEPARTMENT"), "810", "ALL", rs.value("T_COMISS_NUMBER"), rs.value("T_COMISS_CODE"), RRMode);
    SetStateOfJob_IsDone(rs.value("T_ID"));
    Update_Client_Info(Online);          //Заносим инфу в v$session
    return true;
  else
    RslDefCon.CommitTrans();
    if (CheckJobInSectionDone (RRMode, StateFlag))
     return true;
    else
     return false;
    end;
  end;
 
  onerror(x)
   if (RslDefCon.isInTrans)
    RslDefCon.RollbackTrans();
   end;  
   return true;
   
 END;

 MACRO Determination_of_work_mode()
 
   var DayPay220,
       DayPayMouthComissPRBB,
       DayPayMouthComissEXV,
       DayPayMouthComissEXV2,
       DayPayMouthComissEXV3,
       DayPayMouthComissGEB,
       DayPayMouthComissGEB1,
       DayPayMouthComissVUZ,
       DayPayMouthComissSLD,
       DayPayMouthComissGO;
       
   var dd,mm,yyyy,lastdate, tempdate, tempdate1 ;

   DateSplit ( {curdate}, dd, mm, yyyy );

   if (IsWorkDay({curdate}))
  
      if (Bank_Name.is_PRBB)
     
        DayPay220 = 21;
        DayPayMouthComissPRBB = date(1,mm,yyyy);
        
        while (not (IsWorkDay(date(DayPay220))))
          DayPay220 = DayPay220 + 1; 
        end;
        
        while (not (IsWorkDay(DayPayMouthComissPRBB)))
          DayPayMouthComissPRBB = DayPayMouthComissPRBB + 1; 
        end;
        
        if (dd == DayPay220)
          return ModePayMonthComissPRBB;
        elif ({curdate} == DayPayMouthComissPRBB)
          return ModePayMonthComissPRBB2;
        else
          return ModePayDayComissPRBB;
        end;
       
      elif (Bank_Name.is_EXV)
     
        DayPay220             = 25;
        DayPayMouthComissEXV  = 26;
        DayPayMouthComissEXV2 = date(1,mm,yyyy);
        DayPayMouthComissEXV3 = 21;
           
        while ((IsWorkDay(date(DayPay220,mm,yyyy))) == 0)
          DayPay220 = DayPay220 + 1; 
        end;
           
        while ((IsWorkDay(date(DayPayMouthComissEXV,mm,yyyy)) == 0))
          DayPayMouthComissEXV = DayPayMouthComissEXV + 1; 
        end;
           
        if (DayPay220 == DayPayMouthComissEXV)
          DayPayMouthComissEXV = DayPayMouthComissEXV + 1;
        end;
 
        while (not (IsWorkDay(DayPayMouthComissEXV2)))
          DayPayMouthComissEXV2 = DayPayMouthComissEXV2 + 1; 
        end;
        
        while ((IsWorkDay(date(DayPayMouthComissEXV3,mm,yyyy))) == 0)
          DayPayMouthComissEXV3 = DayPayMouthComissEXV3 + 1; 
        end;
 
        if (dd == DayPay220)
            return ModePayMonthComissEXV;
        elif (dd == DayPayMouthComissEXV) 
            return ModePayMonthComissEXV2;
        elif ({curdate} == DayPayMouthComissEXV2)
            return ModePayMonthComissEXV3;
        elif (dd == DayPayMouthComissEXV3) 
            return ModePayMonthComissEXV4;
        else
            return ModePayDayComissEXV;
        end;
        
      elif (Bank_Name.is_GEB)
        
        DayPay220            = 26;
        
        //Первый рабочий день месяца
        tempdate1 = LastDayInMonth({curdate}) + 1;
        while ( not IsWorkDay(tempdate))
          tempdate = tempdate + 1;
        end;
        
        DateSplit ( tempdate1, DayPayMouthComissGEB1 );
        
        while ((IsWorkDay(date(DayPayMouthComissGEB1,mm,yyyy))) == 0)
          DayPayMouthComissGEB1 = DayPayMouthComissGEB1 + 1; 
        end;
        
        //Последний рабочий день месяца
        tempdate = LastDayInMonth({curdate});
        while ( not IsWorkDay(tempdate))
          tempdate = tempdate - 1;
        end;
        
        DateSplit ( tempdate, DayPayMouthComissGEB );
        
        while ((IsWorkDay(date(DayPay220,mm,yyyy))) == 0)
          DayPay220 = DayPay220 + 1; 
        end;
        
        while ((IsWorkDay(date(DayPayMouthComissGEB,mm,yyyy))) == 0)
          DayPayMouthComissGEB = DayPayMouthComissGEB + 1; 
        end;
        
        if (DayPay220 == DayPayMouthComissGEB)
          DayPayMouthComissGEB = DayPayMouthComissGEB + 1 ;
        end;
        
        if (dd == DayPay220)
            return ModePayMonthComissGEB;
        elif (dd == DayPayMouthComissGEB) 
            return ModePayMonthComissGEB2;
        elif (dd == DayPayMouthComissGEB1) 
            return ModePayMonthComissGEB3;
        else
            return ModePayDayComissGEB;
        end;
        
      elif (Bank_Name.is_VUZ)
      
        DayPay220            = 9; //17; Gurin S. 19.05.2016 R-646955-3
        
        tempdate = LastDayInMonth({curdate});
        while ( not IsWorkDay(tempdate))
          tempdate = tempdate - 1;
        end;
        
        DateSplit ( tempdate, DayPayMouthComissVUZ );
        
        while ((IsWorkDay(date(DayPay220,mm,yyyy))) == 0)
          DayPay220 = DayPay220 + 1; 
        end;
        
        while ((IsWorkDay(date(DayPayMouthComissVUZ,mm,yyyy))) == 0)
          DayPayMouthComissVUZ = DayPayMouthComissVUZ + 1; 
        end;
        
        if (DayPay220 == DayPayMouthComissVUZ)
          DayPayMouthComissVUZ = DayPayMouthComissVUZ + 1 ;
        end;
        
        if (dd == DayPay220)
            return ModePayMonthComissVUZ;
        elif (dd == DayPayMouthComissVUZ) 
            return ModePayMonthComissVUZ2;
        else
            return ModePayDayComissVUZ;
        end;
      
      elif (Bank_Name.is_SLD)
        
        tempdate = LastDayInMonth({curdate});
        while ( not IsWorkDay(tempdate))
          tempdate = tempdate - 1;
        end;
        
        DateSplit ( tempdate, DayPayMouthComissSLD );
      
        if (dd == DayPayMouthComissSLD) 
            return ModePayMonthComissSLD;
        else
            return ModePayDayComissSLD;
        end;
      
      elif (Bank_Name.is_GO)
     
        DayPay220 = 21;
        DayPayMouthComissGO = date(1,mm,yyyy);
        
        while (not (IsWorkDay(date(DayPay220))))
          DayPay220 = DayPay220 + 1; 
        end;
        
        while (not (IsWorkDay(DayPayMouthComissGO)))
          DayPayMouthComissGO = DayPayMouthComissGO + 1; 
        end;
        
        if (dd == DayPay220)
          return ModePayMonthComissGO;
        elif ({curdate} == DayPayMouthComissGO)
          return ModePayMonthComissGO2;
        else
          return ModePayDayComissGO;
        end;
      
      end;
      return 0;
   else
      return -1;
   end;
  
 END;

 MACRO Determination_of_work_mode_sting(WRKMode)

  var WString;
  
  if (WRKMode == 1)   //ПРББ ежемесячное списание 21 число
    WString = "ПРББ ежемесячное списание(21 число)";
  elif (WRKMode == 2) //ПРББ ежедневное списание
    WString = "ПРББ ежедневное списание";
  elif (WRKMode == 3) //ПРББ ежедневное списание первый рабочий день месяца
    WString = "ПРББ ежемесячное списание(первый рабочий день месяца)";
  elif (WRKMode == 11)  //ЭВ ежемесячное списание 25 число
    WString = "ЭВ ежемесячное списание(25 число)";
  elif (WRKMode == 12)  //ЭВ ежедневное списание
    WString = "ЭВ ежедневное списание";
  elif (WRKMode == 13)  //ЭВ ежемесячное списание 26 число
    WString = "ЭВ ежемесячное списание(26 число)";
  elif (WRKMode == 14)  //ЭВ ежемесячное списание первый рабочий день месяца
    WString = "ЭВ ежемесячное списание(первый рабочий день месяца)";
  elif (WRKMode == 15)  //ЭВ ежемесячное списание 21 числю
    WString = "ЭВ ежемесячное списание(21 число)";
  elif (WRKMode == 21)  //ГЭБ ежемесячное списание 26 число
    WString = "ГЭБ ежемесячное списание(26 число)";
  elif (WRKMode == 22)  //ГЭБ ежедневное списание
    WString = "ГЭБ ежедневное списание";
  elif (WRKMode == 23)  //ГЭБ ежемесячное списание последний рабочий день месяца
    WString = "ГЭБ ежемесячное списание(последний рабочий день месяца)";
  elif (WRKMode == 24)  //ГЭБ ежемесячное списание первый рабочий день месяца
    WString = "ГЭБ ежемесячное списание(первый рабочий день месяца)";
  elif (WRKMode == 31)  //ВУЗ ежемесячное списание 17 число
    WString = "ВУЗ ежемесячное списание(17 число)";
  elif (WRKMode == 32)  //ВУЗ ежедневное списание 
    WString = "ВУЗ ежедневное списание";
  elif (WRKMode == 33)  //ВУЗ ежемесячное списание последний рабочий день месяца
    WString = "ВУЗ ежемесячное списание(последний рабочий день месяца)";
  elif (WRKMode == 41)  //Солидарность ежемесячное списание последний рабочий день месяца
    WString = "Солидарность ежемесячное списание(последний рабочий день месяца)";
  elif (WRKMode == 42)  //ВУЗ ежемесячное списание
    WString = "Солидарность ежедневное списание";
  elif (WRKMode == 51)   //Пойдем ежемесячное списание 21 число
    WString = "Пойдем ежемесячное списание(21 число)";
  elif (WRKMode == 52) //Пойдем ежедневное списание
    WString = "Пойдем ежедневное списание";
  elif (WRKMode == 53) //Пойдем ежедневное списание первый рабочий день месяца
    WString = "Пойдем ежемесячное списание(первый рабочий день месяца)";
  end;

  return WString;

END;

 MACRO Waiting_to_start(Start_time)
 
   RTime   = time; //Отложенный старт в назначенное время RTime
   WRKDate = Get_Work_Date(); //Дата работы робота
    
   if ( (RTime < Start_time) and (WRKDate >= date()) )
     Update_Client_Info(DelayedStart + Start_time);
     WriteUsrLog("Получена команда ожидания, работа будет продолжена в "+Start_time);
     while (RTime < Start_time)
      TestEvent(1000);
      RTime = time;
     end;
     WriteUsrLog("Работа возобновлена"); 
   end;
 
 END;

 MACRO PRBB_Recursion_SubsequentLaunch(WorkMode, StartingPoint)
 
 var rs;
 
  if ((WorkMode == 1) and (StartingPoint == 1 ))
  
    Waiting_to_start(PRBB_StartTime1); //Ожидание запуска до указанного в переменной времени
    
    //Запуск подключения 2.2.0
    if (not Match_Job(19))
      Update_Client_Info(Connect220Com);
      RunConnectionComiss(19);
    end;
  
  elif ((WorkMode == 1) and (StartingPoint == 2 ))
    
    Update_Client_Info(WaitForConnect220Com);
    while (not CheckIsConnectionComplete(19)) //Ожидание завершения подключения комиссии 2.2.0
      SetPauseInSeconds(10,false);
    end;
    
    Update_Client_Info(Online);
    while ((RunPay(1, false)) or (RunPay(1, true)))//Списание 2.2.0 
      SetPauseInSeconds(10,false);
    end;
  
  elif ((WorkMode == 1) and (StartingPoint == 3 ))
  
    //Запуск подключения 7.2.0
    if (not Match_Job(20))
      Update_Client_Info(GetDescriptionJob(20));
      RunConnectionComiss(20);
    end;
  
  elif ((WorkMode == 1) and (StartingPoint == 4 ))
  
    //Запуск подключения 7.3.0
    if (not Match_Job(21))
      Update_Client_Info(GetDescriptionJob(21));
      RunConnectionComiss(21);
    end;
 
  elif ((WorkMode == 1) and (StartingPoint == 5 ))
  
    //Запуск подключения 7.5.1
    if (not Match_Job(22))
      Update_Client_Info(GetDescriptionJob(22));
      RunConnectionComiss(22);
    end;

  elif ((WorkMode == 1) and (StartingPoint == 6 ))
  
    //Запуск подключения 7.5.2
    if (not Match_Job(23))
      Update_Client_Info(GetDescriptionJob(23));
      RunConnectionComiss(23);
    end;

  elif ((WorkMode == 1) and (StartingPoint == 7 ))
  
    //Запуск подключения 8.1.0
    if (not Match_Job(24))
      Update_Client_Info(GetDescriptionJob(24));
      RunConnectionComiss(24);
    end;

  elif ((WorkMode == 1) and (StartingPoint == 8)) 
  
    Update_Client_Info(WaitForConnectComiss);
    while     ((not CheckIsConnectionComplete(20))
            or (not CheckIsConnectionComplete(21))
            or (not CheckIsConnectionComplete(22))
            or (not CheckIsConnectionComplete(23))
            or (not CheckIsConnectionComplete(24)))
      SetPauseInSeconds(10,false);
    end;
  
    Update_Client_Info(Online);
    while ((RunPay(3, false)) or (RunPay(3, true))) //Списание других ежемесячных комиссий
      SetPauseInSeconds(10,false);
    end;
  
  elif ((WorkMode == 1) and (StartingPoint == 9 ))
  
    //Запуск обновления данных из фронта
    if (not Match_Job(25))
      Update_Client_Info(GetDescriptionJob(25));
      RunConnectionComiss(25);
    end;
  
  elif ((WorkMode == 1) and (StartingPoint == 10 ))
    
    Update_Client_Info(Wait + GetDescriptionJob(25));
    while (not CheckIsConnectionComplete(25)) //Ожидание обновления данных из фронта
      SetPauseInSeconds(10,false);
    end;
    
    Update_Client_Info(Online);
    while ((RunPay(15, false)) or (RunPay(15, true)))
      SetPauseInSeconds(10,false);
    end;
  
  elif ((WorkMode == 2) and (StartingPoint == 1))
    
    Waiting_to_start(PRBB_StartTime1); //Ожидание запуска до указанного в переменной времени
    
    //Запуск подключения 3.4.* 01:00
    if (not Match_Job(0))
      Update_Client_Info(Connect34Com);
      RunConnectionComiss(0);
    end;
    
  elif ((WorkMode == 2) and (StartingPoint == 2))
    
    //Запуск подключения 3.4.11_18 01:00
    if (not Match_Job(11))
      Update_Client_Info(Connect341_8Com);
      RunConnectionComiss(11);
    end;
    
  elif ((WorkMode == 2) and (StartingPoint == 3))
    
    //Запуск подключения комиссий за токены
    if (not Match_Job(14))
      Update_Client_Info(UpdateTokenInfo);
      RunConnectionComiss(14);
    end;
    
  elif ((WorkMode == 2) and (StartingPoint == 4))
    
    Update_Client_Info(WaitUpdateTokenInfo);
    while (not CheckIsConnectionComplete(14)) //Ожидание завершения подключения комиссий за токены
      SetPauseInSeconds(10,false);
    end;
    
    Update_Client_Info(Online);
    while ((RunPay(12, false)) or (RunPay(12, true)))//Запуск списания комиссий за токены
      SetPauseInSeconds(10,false);
    end;
    
  elif ((WorkMode == 2) and (StartingPoint == 5))
    
    //Запуск печати уведомлений
    if (not Match_Job(15))
      Update_Client_Info(PrintNotify);
      RunConnectionComiss(15);
    end;
    
  elif ((WorkMode == 2) and (StartingPoint == 6))
    
    //Запуск печати извещений
    if (not Match_Job(16))
      Update_Client_Info(PrintNotice);
      RunConnectionComiss(16);
    end;
    
  elif ((WorkMode == 2) and (StartingPoint == 7))
    
    Update_Client_Info(WaitPrintNotify);
    while (not CheckIsConnectionComplete(15))  //Ожидание завершения печати уведомлений
      SetPauseInSeconds(10,false);
    end;
    
    //Запуск подключения 7.*
    if (not Match_Job(17))
      Update_Client_Info(Connect7VKCom);
      RunConnectionComiss(17);
    end;
    
  elif ((WorkMode == 2) and (StartingPoint == 8))
    
    Update_Client_Info(WaitPrintNotice);
    while (not CheckIsConnectionComplete(16))  //Ожидание завершения печати извещений
      SetPauseInSeconds(10,false);
    end;
    
    //Запуск подключения 9.*
    if (not Match_Job(18))
      Update_Client_Info(Connect9VKCom);
      RunConnectionComiss(18);
    end;
    
  elif ((WorkMode == 2) and (StartingPoint == 9))
    
    Update_Client_Info(WaitConnect7VKCom);
    while (not CheckIsConnectionComplete(17))  //Ожидание завершения подключения 7.*.*
      SetPauseInSeconds(10,false);
    end;
    
    Update_Client_Info(Online);
    while ((RunPay(13, false)) or (RunPay(13, true)))//Запуск списания 7.*.*
      SetPauseInSeconds(10,false);
    end;
    
  elif ((WorkMode == 2) and (StartingPoint == 10))
    
    Update_Client_Info(WaitConnect9VKCom);
    while (not CheckIsConnectionComplete(18))  //Ожидание завершения подключения 9.*.*
      SetPauseInSeconds(10,false);
    end;
    
    Update_Client_Info(Online);
    while ((RunPay(14, false)) or (RunPay(14, true)))//Запуск списания 9.*.*
      SetPauseInSeconds(10,false);
    end;
    
  elif ((WorkMode == 2) and (StartingPoint == 11))
    
    Update_Client_Info(WaitForConnect34Com);
    while (not CheckIsConnectionComplete(0)) //Ожидание завершения подключения 3.4.*
      SetPauseInSeconds(10,false);
    end;
    
    Update_Client_Info(Online);
    while ((RunPay(2, false)) or (RunPay(2, true)))//Запуск списания 3.4.* 01:00
      SetPauseInSeconds(10,false);
    end;
    
  elif ((WorkMode == 2) and (StartingPoint == 12))
    
    Update_Client_Info(WaitForConnect341_8Com);
    while (not CheckIsConnectionComplete(11)) //Ожидание завершения подключения 3.4.1-8
      SetPauseInSeconds(10,false);
    end;
    
    Update_Client_Info(Online);
    while ((RunPay(10, false)) or (RunPay(10, true))) //Запуск списания 3.4.1-8 01:00
      SetPauseInSeconds(10,false);
    end;
    
  elif ((WorkMode == 2) and (StartingPoint == 13))
          
    //Запуск подключения 3.9.* 01:00
    if (not Match_Job(7))
      Update_Client_Info(Connect39Com);
      RunConnectionComiss(7);
    end;
  
  elif ((WorkMode == 2) and (StartingPoint == 14))
  
    //Запуск подключения 3.10.* 01:00
    if (not Match_Job(8))
      Update_Client_Info(Connect310Com);
      RunConnectionComiss(8);
    end;
  
  elif ((WorkMode == 2) and (StartingPoint == 15))
    
    //Запуск подключения 5.5.7
    if (not Match_Job(13))
      Update_Client_Info(Connect557Com);
      RunConnectionComiss(13);
    end;
  
  elif ((WorkMode == 2) and (StartingPoint == 16))
  
    Update_Client_Info(WaitForConnect39_310com);
    while     ((not CheckIsConnectionComplete(7))
            or (not CheckIsConnectionComplete(8))
            or (not CheckIsConnectionComplete(13)))          //Ожидание завершения подключения 3.9* и 3.10.*
      SetPauseInSeconds(10,false);
    end;
    
    Update_Client_Info(Online);
    while ((RunPay(7, false)) or (RunPay(7, true)))//Запуск списания 3.9.* и 3.10.*
      SetPauseInSeconds(10,false);
    end;
  
  elif ((WorkMode == 2) and (StartingPoint == 16.1)) //Суббота
  
    //Запуск подключения 3.10.* 01:00
    if (not Match_Job(9))
      Update_Client_Info(Connect310Com);
      RunConnectionComiss(9);
    end;
  
  elif ((WorkMode == 2) and (StartingPoint == 16.2)) //Суббота

    Update_Client_Info(WaitForConnect310com);
    while (not CheckIsConnectionComplete(9)) //Ожидание завершения подключения 3.10.*
      SetPauseInSeconds(10,false);
    end;
    
    Update_Client_Info(Online);
    while ((RunPay(8, false)) or (RunPay(8, true)))//Запуск списания 3.10.*
      SetPauseInSeconds(10,false);
    end;
  
  elif ((WorkMode == 2) and (StartingPoint == 16.3)) //Воскресенье
  
    //Запуск подключения 3.10.* 01:00
    if (not Match_Job(10))
      Update_Client_Info(Connect310Com);
      RunConnectionComiss(10);
    end;
  
  elif ((WorkMode == 2) and (StartingPoint == 16.4)) //Воскресенье

    Update_Client_Info(WaitForConnect310com);
    while (not CheckIsConnectionComplete(10)) //Ожидание завершения подключения 3.10.*
      SetPauseInSeconds(10,false);
    end;
    
    Update_Client_Info(Online);
    while ((RunPay(9, false)) or (RunPay(9, true)))//Запуск списания 3.10.*
      SetPauseInSeconds(10,false);
    end;
  
  elif ((WorkMode == 2) and (StartingPoint == 17))
    
    Waiting_to_start(PRBB_StartTime2); //Ожидание запуска до указанного в переменной времени

    //Запуск подключения 3.4.* 21:00
    if (not Match_Job(1))
      Update_Client_Info(Connect34Com);
      RunConnectionComiss(1);
    end;
  
  elif ((WorkMode == 2) and (StartingPoint == 18))
    
    //Запуск подключения 3.4.11_18 21:00
    if (not Match_Job(12))
      Update_Client_Info(Connect341_8Com);
      RunConnectionComiss(12);
    end;
  
  elif ((WorkMode == 2) and (StartingPoint == 19))
  
    Update_Client_Info(WaitForConnect34Com);
    while (not CheckIsConnectionComplete(1)) //Ожидание завершения подключения 3.4.* 21:00
      SetPauseInSeconds(10,false);
    end;
    
    Update_Client_Info(Online);
    while ((RunPay(4, false)) or (RunPay(4, true)))//Запуск списания 3.4.* 21:00
      SetPauseInSeconds(10,false);
    end;
  
  elif ((WorkMode == 2) and (StartingPoint == 20))
  
    Update_Client_Info(WaitForConnect341_8Com);
    while (not CheckIsConnectionComplete(12)) //Ожидание завершения подключения 3.4.1-8
      SetPauseInSeconds(10,false);
    end;
    
    Update_Client_Info(Online);
    while ((RunPay(11, false)) or (RunPay(11, true))) //Запуск списания 3.4.1-8 21:00
      SetPauseInSeconds(10,false);
    end;
  
    SetStateOfJob_IsDone (AllJobsDoneSetting); //Устанавливаем признак завершенности всех заданий
    SetStateOfJob_IsntDone (ChangeDaySetting); //Устанавливаем признак завершенности всех заданий за сегодня
    
  elif ((WorkMode == 3) and (StartingPoint == 1))
  
    Waiting_to_start(PRBB_StartTime1); //Ожидание запуска до указанного в переменной времени

    //Запуск обновления данных из фронта
    if (not Match_Job(26))
      Update_Client_Info(GetDescriptionJob(26));
      RunConnectionComiss(26);
    end;

  elif ((WorkMode == 3) and (StartingPoint == 2))
    
    Update_Client_Info(Wait + GetDescriptionJob(26));
    while (not CheckIsConnectionComplete(26)) //Ожидание обновления данных из фронта
      SetPauseInSeconds(10,false);
    end;
    
    Update_Client_Info(Online);
    while ((RunPay(16, false)) or (RunPay(16, true)))
      SetPauseInSeconds(10,false);
    end;
    
  elif ((WorkMode == 3) and (StartingPoint == 3))
    
    //Запуск обновления данных из фронта
    if (not Match_Job(27))
      Update_Client_Info(GetDescriptionJob(27));
      RunConnectionComiss(27);
    end;
    
  elif ((WorkMode == 3) and (StartingPoint == 4))
    
    Update_Client_Info(Wait + GetDescriptionJob(27));
    while (not CheckIsConnectionComplete(27)) //Ожидание обновления данных из фронта
      SetPauseInSeconds(10,false);
    end;
    
    Update_Client_Info(Online);
    while ((RunPay(17, false)) or (RunPay(17, true)))
      SetPauseInSeconds(10,false);
    end;
    
  elif ((WorkMode == 3) and (StartingPoint == 5))
  
    Update_Client_Info(Online);
    while ((RunPay(5, false)) or (RunPay(5, true))) //Запуск списания ежемячных комиссий не требующих подключения
      SetPauseInSeconds(10,false);
    end;
  
  elif ((WorkMode == 3) and (StartingPoint == 6))
  
    //Запуск подключения 3.1.1
    if (not Match_Job(2))
      Update_Client_Info(Connect311Com);
      RunConnectionComiss(2); 
    end;
  
  elif ((WorkMode == 3) and (StartingPoint == 7))
    
    //Запуск подключения 8.2.1
    if (not Match_Job(3))
      Update_Client_Info(Connect821Com);
      RunConnectionComiss(3); 
    end;
  
  elif ((WorkMode == 3) and (StartingPoint == 8))
    
   //Запуск подключения 13.1.0
    if (not Match_Job(4))
      Update_Client_Info(Connect1310Com);
      RunConnectionComiss(4); 
    end;
  
  elif ((WorkMode == 3) and (StartingPoint == 9))
    
    //Запуск подключения 3.14.1
    if (not Match_Job(5))
      Update_Client_Info(Connect3141Com);
      RunConnectionComiss(5); 
    end;
  
  elif ((WorkMode == 3) and (StartingPoint == 10))

    //Запуск подключения 3.15.0
    if (not Match_Job(6))
      Update_Client_Info(Connect3150Com);
      RunConnectionComiss(6); 
    end;
  
  elif ((WorkMode == 3) and (StartingPoint == 11))
  
    Update_Client_Info(WaitForConnectComiss);
    while (   (not CheckIsConnectionComplete(2)) //Ожидание завершения подключения 3.1.1, 8.2.1, 13.1.0, 3.14.1, 3.15.0
           or (not CheckIsConnectionComplete(3))
           or (not CheckIsConnectionComplete(4))
           or (not CheckIsConnectionComplete(5))
           or (not CheckIsConnectionComplete(6)) )
      SetPauseInSeconds(10,false); 
    end;
  
    Update_Client_Info(Online); 
    while ((RunPay(6, false)) or (RunPay(6, true))) //Запуск списания ежемячных комиссий 3.1.1, 8.2.1, 13.1.0, 3.14.1, 3.15.0
      SetPauseInSeconds(10,false);
    end;
  
  end;
 
 END;

 MACRO EXV_Recursion_SubsequentLaunch(WorkMode, StartingPoint)
  
 var rs; 
 
  if   ((WorkMode == 11) and (StartingPoint == 1))
  
    if (not Match_Job(12))
      Update_Client_Info(Connect220Com);
      RunConnectionComiss(12);
    end;
    
  elif ((WorkMode == 11) and (StartingPoint == 2))
 
    Update_Client_Info(WaitForConnect220Com);
    while (not CheckIsConnectionComplete(12)) //Ожидание завершения подключения 2.2.0
      SetPauseInSeconds(10,false);
    end;
 
    Update_Client_Info(Online); 
    while ((RunPay(1, false)) or (RunPay(1, true))) //Запуск списания 2.2.0
      SetPauseInSeconds(10,false);
    end;
  
  elif ((WorkMode == 11) and (StartingPoint == 3))
  
    Update_Client_Info(Online); 
    while ((RunPay(12, false)) or (RunPay(12, true))) //Запуск списания 2.2.2-4, 2.2.7
      SetPauseInSeconds(10,false);
    end;
  
  elif ((WorkMode == 12) and (StartingPoint == 1))
  
    if (not Match_Job(4)) //Запуск подключения 3.9.* 01:00
      Update_Client_Info(Connect39Com);
      RunConnectionComiss(4);
    end;
  
  elif ((WorkMode == 12) and (StartingPoint == 2))
  
    if (not Match_Job(5)) //Запуск подключения 3.10.* 01:00
      Update_Client_Info(Connect310Com);
      RunConnectionComiss(5);
    end;
  
  elif ((WorkMode == 12) and (StartingPoint == 3))
    
    if (not Match_Job(16)) //Запуск подключения 3.4.10
      Update_Client_Info(Connect3410Com);
      RunConnectionComiss(16);
    end;
  
  elif ((WorkMode == 12) and (StartingPoint == 4))
    
    if (not Match_Job(17)) //Запуск подключения 3.2.3
      Update_Client_Info(Connect323Com);
      RunConnectionComiss(17);
    end;
  
  elif ((WorkMode == 12) and (StartingPoint == 5))
    
    if (not Match_Job(20)) //Запуск подключения 5.5.7
      Update_Client_Info(Connect557Com);
      RunConnectionComiss(20);
    end;
  
  elif ((WorkMode == 12) and (StartingPoint == 6))
    
    Update_Client_Info(WaitForConnectComToPhys);
    while     ((not CheckIsConnectionComplete(4)) //Ожидание завершения подключения 3.9*,3.10.*,3.4.10,3.2.3
            or (not CheckIsConnectionComplete(5))
            or (not CheckIsConnectionComplete(16))
            or (not CheckIsConnectionComplete(17))
            or (not CheckIsConnectionComplete(20)))
      SetPauseInSeconds(10,false);
    end;
    
    Update_Client_Info(Online);
    while ((RunPay(4, false)) or (RunPay(4, true))) //Запуск списания 3.9*,3.10.*,3.4.10,3.2.3
      SetPauseInSeconds(10,false);
    end;
  
  
  elif ((WorkMode == 12) and (StartingPoint == 6.1)) //Суббота
  
    if (not Match_Job(6)) //Запуск подключения 3.10.* 01:00
      Update_Client_Info(Connect310Com);
      RunConnectionComiss(6);
    end;
  
  elif ((WorkMode == 12) and (StartingPoint == 6.2)) //Суббота
    
    if (not Match_Job(18)) //Запуск подключения 3.2.3 01:00
      Update_Client_Info(Connect323Com);
      RunConnectionComiss(18);
    end;
  
  elif ((WorkMode == 12) and (StartingPoint == 6.3)) //Суббота
    
    Update_Client_Info(WaitForConnect310_323com);
    while (   (not CheckIsConnectionComplete(6)) //Ожидание завершения подключения 3.10.* и 3.2.3
           or (not CheckIsConnectionComplete(18)) )
      SetPauseInSeconds(10,false);
    end;
    
    Update_Client_Info(Online);
    while ((RunPay(5, false)) or (RunPay(5, true))) //Запуск списания 3.10.*
      SetPauseInSeconds(10,false);
    end;
  
  elif ((WorkMode == 12) and (StartingPoint == 6.4)) //Воскресенье
  
    if (not Match_Job(7)) //Запуск подключения 3.10.* 01:00
      Update_Client_Info(Connect310Com);
      RunConnectionComiss(7);
    end;
  
  elif ((WorkMode == 12) and (StartingPoint == 6.5)) //Воскресенье
  
    if (not Match_Job(18)) //Запуск подключения 3.2.3 01:00
      Update_Client_Info(Connect323Com);
      RunConnectionComiss(19);
    end;
  
  elif ((WorkMode == 12) and (StartingPoint == 6.6)) //Воскресенье

    Update_Client_Info(WaitForConnect310_323com);
    while (   (not CheckIsConnectionComplete(7)) //Ожидание завершения подключения 3.10.* и 3.2.3
           or (not CheckIsConnectionComplete(19)) )
      SetPauseInSeconds(10,false);
    end;
    
    Update_Client_Info(Online);
    while ((RunPay(6, false)) or (RunPay(6, true))) //Запуск списания 3.10.* 
      SetPauseInSeconds(10,false);
    end;
  
  elif ((WorkMode == 12) and (StartingPoint == 7))
  
    if (not Match_Job(8))
      Update_Client_Info(Connect34Com);
      RunConnectionComiss(8);
    end;
  
  elif ((WorkMode == 12) and (StartingPoint == 8))
  
    Update_Client_Info(Online);
    while ((RunPay(7, false)) or (RunPay(7, true))) //Запуск оплаты части ежедневных комиссий не требующих подключения
      SetPauseInSeconds(10,false);
    end;
  
  elif ((WorkMode == 12) and (StartingPoint == 9))
  
    Update_Client_Info(WaitForConnect34Com);
    while (not CheckIsConnectionComplete(8)) //Ожидание завершения подключения 3.4.* 01:00
      SetPauseInSeconds(10,false);
    end;
    
    Update_Client_Info(Online);
    while ((RunPay(8, false)) or (RunPay(8, true))) //Запуск оплаты комиссий 3.4.* 01:00
      SetPauseInSeconds(10,false);
    end;
  
  elif ((WorkMode == 12) and (StartingPoint == 10))
  
    if (not Match_Job(9))
      Update_Client_Info(Connect3411Com);
      RunConnectionComiss(9);
    end;
  
  elif ((WorkMode == 12) and (StartingPoint == 11))
  
    Update_Client_Info(WaitForConnect3411Com);
    while (not CheckIsConnectionComplete(9)) //Ожидание завершения подключения 3.4.11 01:00
      SetPauseInSeconds(10,false);
    end;
    
    Update_Client_Info(Online);
    while ((RunPay(9, false)) or (RunPay(9, true))) //Запуск оплаты комиссий 3.4.11 01:00
      SetPauseInSeconds(10,false);
    end;
  
  elif ((WorkMode == 12) and (StartingPoint == 12))
  
    if (not Match_Job(11))
      Update_Client_Info(UpdateTokenInfo);
      RunConnectionComiss(11); //Запуск обновления информации о токенах
    end;
  
  elif ((WorkMode == 12) and (StartingPoint == 13))
  
    Update_Client_Info(WaitUpdateTokenInfo);
    while (not CheckIsConnectionComplete(11)) //Ожидание завершения обновления информации о токенах
      SetPauseInSeconds(10,false);
    end;
    
    Update_Client_Info(Online);
    while ((RunPay(11, false)) or (RunPay(11, true))) //Запуск оплаты комиссий 7.6.1 и 7.6.2
      SetPauseInSeconds(10,false);
    end;
  
  elif ((WorkMode == 12) and (StartingPoint == 14))
    
    //Запуск печати уведомлений
    if (not Match_Job(21))
      Update_Client_Info(PrintNotify);
      RunConnectionComiss(21);
    end;
  
  elif ((WorkMode == 12) and (StartingPoint == 15))
    
    //Запуск печати извещений
    if (not Match_Job(22))
      Update_Client_Info(PrintNotice);
      RunConnectionComiss(22);
    end;
  
  elif ((WorkMode == 12) and (StartingPoint == 16))
  
    Update_Client_Info(WaitPrintNotify);
    while (not CheckIsConnectionComplete(21))  //Ожидание завершения печати уведомлений
      SetPauseInSeconds(10,false);
    end;
    
    //Запуск подключения 7.*
    if (not Match_Job(23))
      Update_Client_Info(Connect7VKCom);
      RunConnectionComiss(23);
    end;
  
  elif ((WorkMode == 12) and (StartingPoint == 17))
  
    Update_Client_Info(WaitPrintNotice);
    while (not CheckIsConnectionComplete(22))  //Ожидание завершения печати извещений
      SetPauseInSeconds(10,false);
    end;
    
    //Запуск подключения 9.*
    if (not Match_Job(24))
      Update_Client_Info(Connect9VKCom);
      RunConnectionComiss(24);
    end;
  
  elif ((WorkMode == 12) and (StartingPoint == 18))
  
    Update_Client_Info(WaitConnect7VKCom);
    while (not CheckIsConnectionComplete(23))  //Ожидание завершения подключения 7.*.*
      SetPauseInSeconds(10,false);
    end;
    
    Update_Client_Info(Online);
    while ((RunPay(17, false)) or (RunPay(17, true)))//Запуск списания 7.*.*
      SetPauseInSeconds(10,false);
    end;
  
  elif ((WorkMode == 12) and (StartingPoint == 19))
  
    Update_Client_Info(WaitConnect9VKCom);
    while (not CheckIsConnectionComplete(24))  //Ожидание завершения подключения 9.*.*
      SetPauseInSeconds(10,false);
    end;
    
    Update_Client_Info(Online);
    while ((RunPay(18, false)) or (RunPay(18, true)))//Запуск списания 9.*.*
      SetPauseInSeconds(10,false);
    end;
  
  elif ((WorkMode == 12) and (StartingPoint == 20))
    
    Waiting_to_start(EXV_StartTime2); //Ожидание запуска до указанного в переменной времени
    
    if (not Match_Job(0)) 
      Update_Client_Info(Connect34Com);
      RunConnectionComiss(0);
    end;

  elif ((WorkMode == 12) and (StartingPoint == 21))
    
    Update_Client_Info(WaitForConnect34Com);
    while (not CheckIsConnectionComplete(0)) //Ожидание завершения подключения 3.4.* 18:30
      SetPauseInSeconds(10,false);
    end;
    
    Update_Client_Info(Online);
    while ((RunPay(2, false)) or (RunPay(2, true))) //Запуск оплаты комиссий 3.4.* 18:30
      SetPauseInSeconds(10,false);
    end;
    
  elif ((WorkMode == 12) and (StartingPoint == 22))
  
    if (not Match_Job(10)) //Запуск подключения 3.4.11 18:30
      Update_Client_Info(Connect3411Com);
      RunConnectionComiss(10);
    end;
  
  elif ((WorkMode == 12) and (StartingPoint == 23))
    
    Update_Client_Info(WaitForConnect3411Com);
    while (not CheckIsConnectionComplete(10)) //Ожидание завершения подключения 3.4.11 18:30
      SetPauseInSeconds(10,false);
    end;
    
    Update_Client_Info(Online);
    while ((RunPay(10, false)) or (RunPay(10, true))) //Запуск оплаты комиссий 3.4.11 18:30
      SetPauseInSeconds(10,false);
    end;
    
    SetStateOfJob_IsDone (AllJobsDoneSetting); //Устанавливаем признак завершенности всех заданий
    SetStateOfJob_IsntDone (ChangeDaySetting); //Устанавливаем признак завершенности всех заданий за сегодня
    
  elif ((WorkMode == 13) and (StartingPoint == 1))
  
    if (not Match_Job(2))
      Update_Client_Info(Connect275Com);
      RunConnectionComiss(2);
    end;
  
  elif ((WorkMode == 13) and (StartingPoint == 2 ))
  
    if (not Match_Job(3))
      Update_Client_Info(Connect276Com);
      RunConnectionComiss(3);
    end;
  
  elif ((WorkMode == 13) and (StartingPoint == 3))
  
    Update_Client_Info(WaitForConnect27Com);
    while (   (not CheckIsConnectionComplete(2)) //Ожидание завершения подключения 2.7.5 и 2.7.6
           or (not CheckIsConnectionComplete(3)) )
      SetPauseInSeconds(10,false);
    end;
    
    Update_Client_Info(Online);
    while ((RunPay(3, false)) or (RunPay(3, true))) //Запуск списания 2.7.*
      SetPauseInSeconds(10,false);
    end;
    
  elif ((WorkMode == 14) and (StartingPoint == 1))
  
    Update_Client_Info(Online); 
    while ((RunPay(13, false)) or (RunPay(13, true))) //Запуск списания 3.20.1-4
      SetPauseInSeconds(10,false);
    end;
  
  elif ((WorkMode == 14) and (StartingPoint == 2))
  
    if ( not Match_Job(13)) //Обновление информации по ежемесячным услугам
      Update_Client_Info(UpdateMonthInfo);
      RunConnectionComiss(13);
    end;
  
  elif ((WorkMode == 14) and (StartingPoint == 3))
  
    Update_Client_Info(WaitUpdateMonthInfo);
    while (not CheckIsConnectionComplete(13)) //Ожидание обновления информации по ежемесячным услугам
      SetPauseInSeconds(10,false);
    end;
    
    Update_Client_Info(Online); 
    while ((RunPay(14, false)) or (RunPay(14, true))) //Запуск списания 2.9.3-4
      SetPauseInSeconds(10,false);
    end;
  
  elif ((WorkMode == 14) and (StartingPoint == 4))
  
    if ( not Match_Job(14)) //Запуск подключения ежемесячной комиссии 13.1.0
      Update_Client_Info(Connect1310Com);
      RunConnectionComiss(14);
    end;
  
  elif ((WorkMode == 14) and (StartingPoint == 5))
  
    Update_Client_Info(WaitForConnect1310Com);
    while (not CheckIsConnectionComplete(14)) //Ожидание подключения ежемесячной комиссии 13.1.0
      SetPauseInSeconds(10,false);
    end;

    Update_Client_Info(Online); 
    while ((RunPay(15, false)) or (RunPay(15, true))) //Запуск списания 13.1.0
      SetPauseInSeconds(10,false);
    end;
  
  elif ((WorkMode == 15) and (StartingPoint == 1))
  
    if ( not Match_Job(15)) //Обновление информации по ежемесячным услугам
      Update_Client_Info(UpdateMonthInfo);
      RunConnectionComiss(15);
    end;
  
  elif ((WorkMode == 15) and (StartingPoint == 2))
  
    Update_Client_Info(WaitUpdateMonthInfo);
    while (not CheckIsConnectionComplete(15)) //Ожидание обновления информации по ежемесячным услугам
      SetPauseInSeconds(10,false);
    end;
    
    Update_Client_Info(Online); 
    while ((RunPay(16, false)) or (RunPay(16, true))) //Запуск списания 7.6.0, 14.1.1-3
      SetPauseInSeconds(10,false);
    end;
  
  end;
 
 END;
 
 MACRO GEB_Recursion_SubsequentLaunch(WorkMode, StartingPoint)

  if   ((WorkMode == 21) and (StartingPoint == 1))
    
    Waiting_to_start(GEB_StartTime4); //Ожидание запуска до указанного в переменной времени

    Update_Client_Info(Online);
    while ((RunPay(5,false)) or (RunPay(5,true))) //Запуск списания 2.2.0
      SetPauseInSeconds(10,false);
    end;
    
  elif ((WorkMode == 22) and (StartingPoint == 1))
  
    if (not Match_Job(8)) //Запуск подключения 3.9.* 01:00
      Update_Client_Info(Connect39Com);
      RunConnectionComiss(8); 
    end;
  
  elif ((WorkMode == 22) and (StartingPoint == 2))
  
    if (not Match_Job(9)) //Запуск подключения 3.10.* 01:00
      Update_Client_Info(Connect310Com);
      RunConnectionComiss(9);
    end;
  
  elif ((WorkMode == 22) and (StartingPoint == 3))
  
    if (not Match_Job(13)) //Запуск подключения 5.5.7
      Update_Client_Info(Connect557Com);
      RunConnectionComiss(13);
    end;
  
  elif ((WorkMode == 22) and (StartingPoint == 4))
  
    Update_Client_Info(WaitForConnect39_310com); 
    while     ((not CheckIsConnectionComplete(8)) //Ожидание завершения подключения 3.9* и 3.10.* и 5.5.7
            or (not CheckIsConnectionComplete(9))
            or (not CheckIsConnectionComplete(13)))
      SetPauseInSeconds(10,false);
    end;
    
    Update_Client_Info(Online);
    while ((RunPay(7, false)) or (RunPay(7, true))) //Запуск списания 3.9.* и 3.10.* и 5.5.7
      SetPauseInSeconds(10,false);
    end;
    
  elif ((WorkMode == 22) and (StartingPoint == 4.1))
  
    if (not Match_Job(10)) //Запуск подключения 3.10.* 01:00
      Update_Client_Info(Connect310Com);
      RunConnectionComiss(10);
    end;
  
  elif ((WorkMode == 22) and (StartingPoint == 4.2))
  
    Update_Client_Info(WaitForConnect310com);
    while (not CheckIsConnectionComplete(10)) //Ожидание завершения подключения 3.10.*
      SetPauseInSeconds(10,false);
    end;
    
    Update_Client_Info(Online);
    while ((RunPay(8, false)) or (RunPay(8, true))) //Запуск списания 3.10.*
      SetPauseInSeconds(10,false);
    end;
  
  elif ((WorkMode == 22) and (StartingPoint == 4.3))
  
    if (not Match_Job(11)) //Запуск подключения 3.10.* 01:00
      Update_Client_Info(Connect310Com);
      RunConnectionComiss(11);
    end;
  
  elif ((WorkMode == 22) and (StartingPoint == 4.4))
  
    Update_Client_Info(WaitForConnect310com);
    while (not CheckIsConnectionComplete(11)) //Ожидание завершения подключения 3.10.*
      SetPauseInSeconds(10,false);
    end;
    
    Update_Client_Info(Online);
    while ((RunPay(9, false)) or (RunPay(9, true))) //Запуск списания 3.10.*
      SetPauseInSeconds(10,false);
    end;
  
  elif ((WorkMode == 22) and (StartingPoint == 5))
    
    Waiting_to_start(GEB_StartTime1); //Ожидание запуска до указанного в переменной времени
    
    if (not Match_Job(1)) //Запуск подключения 3.4.2
      Update_Client_Info(Connect342Com);
      RunConnectionComiss(1); 
    end;
  
  elif ((WorkMode == 22) and (StartingPoint == 6))
    
    Waiting_to_start(GEB_StartTime1); //Ожидание запуска до указанного в переменной времени
  
    if (not Match_Job(2)) //Запуск подключения 3.4.3
      Update_Client_Info(Connect343Com);
      RunConnectionComiss(2); 
    end;
  
  elif ((WorkMode == 22) and (StartingPoint == 7))
    
    Waiting_to_start(GEB_StartTime1); //Ожидание запуска до указанного в переменной времени
    
    if (not Match_Job(3)) //Запуск подключения 3.4.4
      Update_Client_Info(Connect344Com);
      RunConnectionComiss(3); 
    end;
    
  elif ((WorkMode == 22) and (StartingPoint == 8))
  
    Update_Client_Info(WaitForConnect34_1_4Com);
    while (    (not CheckIsConnectionComplete(1)) //Ожидание завершения подключения 3.4.(2-4)
           or  (not CheckIsConnectionComplete(2))
           or  (not CheckIsConnectionComplete(3)) )
      SetPauseInSeconds(10,false);
    end;
    
    Update_Client_Info(Online);
    while ( (RunPay(1,false)) or (RunPay(1,true))) //Запуск списания 3.4.(2-4)
      SetPauseInSeconds(10,false);
    end;
  
  elif ((WorkMode == 22) and (StartingPoint == 9))
    
    Waiting_to_start(GEB_StartTime2); //Ожидание запуска до указанного в переменной времени

    if (not Match_Job(4)) //Запуск подключения 3.4.9
      Update_Client_Info(Connect349Com);
      RunConnectionComiss(4); 
    end;
  
  elif ((WorkMode == 22) and (StartingPoint == 10))
    
    Waiting_to_start(GEB_StartTime2); //Ожидание запуска до указанного в переменной времени

    if (not Match_Job(5)) //Запуск подключения 3.7.1
      Update_Client_Info(Connect371Com);
      RunConnectionComiss(5); 
    end;
  
  elif ((WorkMode == 22) and (StartingPoint == 11))
  
    Update_Client_Info(WaitForConnect349_371Com);
    while (    (not CheckIsConnectionComplete(4)) //Ожидание завершения подключения 3.4.9, 3.7.1
           or  (not CheckIsConnectionComplete(5)) )
      SetPauseInSeconds(10,false);
    end;
  
    Update_Client_Info(Online); 
    while ((RunPay(2,false)) or (RunPay(2,true))) //Запуск списания 3.4.9, 3.7.1
      SetPauseInSeconds(10,false);
    end;
      
  elif ((WorkMode == 22) and (StartingPoint == 12))
  
    if (not Match_Job(6)) //Запуск подключения 3.4.*
      Update_Client_Info(Connect34Com);
      RunConnectionComiss(6); 
    end;
  
  elif ((WorkMode == 22) and (StartingPoint == 13)) 
  
    if (not Match_Job(12)) //Запуск подключения 3.4.1-8
      Update_Client_Info(Connect341_8Com);
      RunConnectionComiss(12);
    end;
  
  elif ((WorkMode == 22) and (StartingPoint == 14))
    
    Update_Client_Info(WaitForConnect34com);
    while (not CheckIsConnectionComplete(6)) //Ожидание завершения подключения 3.4.*
      SetPauseInSeconds(10,false);
    end;
    
    Update_Client_Info(Online);
    while ((RunPay(3,false)) or (RunPay(3,true))) //Запуск списания 3.4.* 
      SetPauseInSeconds(10,false);
    end;
  
  elif ((WorkMode == 22) and (StartingPoint == 15))
    
    Update_Client_Info(WaitForConnect341_8Com);
    while (not CheckIsConnectionComplete(12)) //Ожидание завершения подключения 3.4.1-8
      SetPauseInSeconds(10,false);
    end;
    
    Update_Client_Info(Online);
    while ((RunPay(11, false)) or (RunPay(11, true))) //Запуск списания 3.4.1-8
      SetPauseInSeconds(10,false);
    end;
  
  elif ((WorkMode == 22) and (StartingPoint == 16))
    
    Waiting_to_start(GEB_StartTime3); //Ожидание запуска до указанного в переменной времени

    if (not Match_Job(7)) //Запуск подключения 3.2.3
      Update_Client_Info(Connect323Com);
      RunConnectionComiss(7); 
    end;
  
  elif ((WorkMode == 22) and (StartingPoint == 17))
    
    Update_Client_Info(WaitForConnect323com);
    while (not CheckIsConnectionComplete(7)) //Ожидание завершения подключения 3.2.3
      SetPauseInSeconds(10,false);
    end;
    
    Update_Client_Info(Online);
    while ((RunPay(4,false)) or (RunPay(4,true))) //Запуск списания 3.2.3 
      SetPauseInSeconds(10,false);
    end;
  
    SetStateOfJob_IsDone (AllJobsDoneSetting); //Устанавливаем признак завершенности всех заданий
    SetStateOfJob_IsntDone (ChangeDaySetting); //Устанавливаем признак завершенности всех заданий за сегодня
  
  elif ((WorkMode == 23) and (StartingPoint == 1))
    
    Waiting_to_start(GEB_StartTime5); //Ожидание запуска до указанного в переменной времени

    Update_Client_Info(Online);
    while ((RunPay(6,false)) or (RunPay(6,true))) //Запуск списания ежемесячных комиссий не требующих подключения
      SetPauseInSeconds(10,false);
    end;
  
  elif ((WorkMode == 24) and (StartingPoint == 1))
    
    Waiting_to_start(GEB_StartTime4); //Ожидание запуска до указанного в переменной времени
    
    Update_Client_Info(Online);
    while ((RunPay(10,false)) or (RunPay(10,true))) //Запуск списания ежемесячных комиссий не требующих подключения
      SetPauseInSeconds(10,false);
    end;
  
  end;
  
 END;
 
 MACRO VUZ_Recursion_SubsequentLaunch(WorkMode, StartingPoint)
 
 var rs; 
 
  if   ((WorkMode == 31) and (StartingPoint == 1))
    
    Waiting_to_start(VUZ_StartTime2); //Ожидание запуска до указанного в переменной времени

    if (not Match_Job(1))
      Update_Client_Info(Connect220vCom);
      RunConnectionComiss(1);
    end;
    
  elif   ((WorkMode == 31) and (StartingPoint == 2))
    
    Waiting_to_start(VUZ_StartTime2); //Ожидание запуска до указанного в переменной времени

    if (not Match_Job(2))
      Update_Client_Info(Connect221_222Com);
      RunConnectionComiss(2);
    end;
    
  elif   ((WorkMode == 31) and (StartingPoint == 3))
    
    Waiting_to_start(VUZ_StartTime2); //Ожидание запуска до указанного в переменной времени

    if (not Match_Job(3))
      Update_Client_Info(Connect2211Com);
      RunConnectionComiss(3);
    end;
    
    Update_Client_Info(WaitForCon220v_221_221_2211);
    while (   (not CheckIsConnectionComplete(1)) //Ожидание завершения подключения 2.2.0v, 2.2.1, 2.2.2, 2.21.1
           or (not CheckIsConnectionComplete(2))
           or (not CheckIsConnectionComplete(3)) ) 
      SetPauseInSeconds(10,false);
    end;
  
  elif   ((WorkMode == 31) and (StartingPoint == 4))
  
    Update_Client_Info(Online);
    while ((RunPay(3,false)) or (RunPay(3,true)))
      SetPauseInSeconds(10,false);
    end;
  
  elif ((WorkMode == 31) and (StartingPoint == 5))
    
    Update_Client_Info(Online);
    while ((RunPay(4,false)) or (RunPay(4,true)))
      SetPauseInSeconds(10,false);
    end;
  
  elif ((WorkMode == 31) and (StartingPoint == 6))
  
    Update_Client_Info(Online);
    while ((RunPay(5,false)) or (RunPay(5,true)))
      SetPauseInSeconds(10,false);
    end;
  
  elif ((WorkMode == 32) and (StartingPoint == 1))
    
    Waiting_to_start(VUZ_StartTime3); //Ожидание запуска до указанного в переменной времени
    
    //Запуск подключения комиссий за токены
    if (not Match_Job(9))
      Update_Client_Info(UpdateTokenInfo);
      RunConnectionComiss(9);
    end;
  
  elif ((WorkMode == 32) and (StartingPoint == 2))
    
    Update_Client_Info(WaitUpdateTokenInfo);
    while (not CheckIsConnectionComplete(9)) //Ожидание завершения подключения комиссий за токены
      SetPauseInSeconds(10,false);
    end;
    
    Update_Client_Info(Online);
    while ((RunPay(10, false)) or (RunPay(10, true)))//Запуск списания комиссий за токены
      SetPauseInSeconds(10,false);
    end;
  
  elif ((WorkMode == 32) and (StartingPoint == 3))
    
    //Запуск печати уведомлений
    if (not Match_Job(10))
      Update_Client_Info(PrintNotify);
      RunConnectionComiss(10);
    end;
  
  elif ((WorkMode == 32) and (StartingPoint == 4))
    
    //Запуск печати извещений
    if (not Match_Job(11))
      Update_Client_Info(PrintNotice);
      RunConnectionComiss(11);
    end;
  
  elif ((WorkMode == 32) and (StartingPoint == 5))
  
    Update_Client_Info(WaitPrintNotify);
    while (not CheckIsConnectionComplete(10))  //Ожидание завершения печати уведомлений
      SetPauseInSeconds(10,false);
    end;
    
    //Запуск подключения 7.*
    if (not Match_Job(12))
      Update_Client_Info(Connect7VKCom);
      RunConnectionComiss(12);
    end;
  
  elif ((WorkMode == 32) and (StartingPoint == 6))
  
    Update_Client_Info(WaitPrintNotice);
    while (not CheckIsConnectionComplete(11))  //Ожидание завершения печати извещений
      SetPauseInSeconds(10,false);
    end;
    
    //Запуск подключения 9.*
    if (not Match_Job(13))
      Update_Client_Info(Connect9VKCom);
      RunConnectionComiss(13);
    end;
  
  elif ((WorkMode == 32) and (StartingPoint == 7))
  
    Update_Client_Info(WaitConnect7VKCom);
    while (not CheckIsConnectionComplete(12))  //Ожидание завершения подключения 7.*.*
      SetPauseInSeconds(10,false);
    end;
    
    Update_Client_Info(Online);
    while ((RunPay(11, false)) or (RunPay(11, true)))//Запуск списания 7.*.*
      SetPauseInSeconds(10,false);
    end;
  
  elif ((WorkMode == 32) and (StartingPoint == 8))
  
    Update_Client_Info(WaitConnect9VKCom);
    while (not CheckIsConnectionComplete(13))  //Ожидание завершения подключения 9.*.*
      SetPauseInSeconds(10,false);
    end;
    
    Update_Client_Info(Online);
    while ((RunPay(12, false)) or (RunPay(12, true)))//Запуск списания 9.*.*
      SetPauseInSeconds(10,false);
    end;
  
  elif ((WorkMode == 32) and (StartingPoint == 9))
    
    if (not Match_Job(5))
      Update_Client_Info(Connect39Com);
      RunConnectionComiss(5);
    end;
    
  elif ((WorkMode == 32) and (StartingPoint == 10))
    
    if (not Match_Job(8))
      Update_Client_Info(Connect557Com);
      RunConnectionComiss(8);
    end;
    
  elif ((WorkMode == 32) and (StartingPoint == 11))
    
    Update_Client_Info(WaitForConnect39com);
    while (not CheckIsConnectionComplete(5)) //Ожидание завершения подключения 3.9.* 
      SetPauseInSeconds(10,false);
    end;
    
    Update_Client_Info(Online);
    while ((RunPay(7, false)) or (RunPay(7, true))) //Запуск оплаты комиссий 3.9.*
      SetPauseInSeconds(10,false); 
    end;
    
  elif ((WorkMode == 32) and (StartingPoint == 12))
    
    Waiting_to_start(VUZ_StartTime1); //Ожидание запуска до указанного в переменной времени
    
    if (not Match_Job(0))
      Update_Client_Info(Connect34Com);
      RunConnectionComiss(0);
    end;

  elif ((WorkMode == 32) and (StartingPoint == 13))
    
    Waiting_to_start(VUZ_StartTime1); //Ожидание запуска до указанного в переменной времени
    
    if (not Match_Job(6))
      Update_Client_Info(Connect341_8Com);
      RunConnectionComiss(6);
    end;

  elif ((WorkMode == 32) and (StartingPoint == 14))
    
    Waiting_to_start(VUZ_StartTime1); //Ожидание запуска до указанного в переменной времени
    
    if (not Match_Job(7))
      Update_Client_Info(Connect348Com);
      RunConnectionComiss(7);
    end;

  elif ((WorkMode == 32) and (StartingPoint == 15))
    
    Update_Client_Info(Online);
    while ((RunPay(1, false)) or (RunPay(1, true))) //Запуск оплаты части ежедневных комиссий не требующих подключения
      SetPauseInSeconds(10,false); 
    end;
    
  elif ((WorkMode == 32) and (StartingPoint == 16))
    
    Update_Client_Info(WaitForConnect34Com);
    while (not CheckIsConnectionComplete(0)) //Ожидание завершения подключения 3.4.* 
      SetPauseInSeconds(10,false);
    end;
    
    Update_Client_Info(Online);
    while ((RunPay(2, false)) or (RunPay(2, true))) //Запуск оплаты 3.4.*
      SetPauseInSeconds(10,false); 
    end;
    
  elif ((WorkMode == 32) and (StartingPoint == 17))
    
    Update_Client_Info(WaitForConnect39com);
    while (not CheckIsConnectionComplete(5)) //Ожидание завершения подключения 3.9.* 
      SetPauseInSeconds(10,false);
    end;
    
    Update_Client_Info(Online);
    while ((RunPay(7, false)) or (RunPay(7, true))) //Запуск оплаты 3.9.*
      SetPauseInSeconds(10,false); 
    end;
    
  elif ((WorkMode == 32) and (StartingPoint == 18))
    
    Update_Client_Info(WaitForConnect341_8Com);
    while (not CheckIsConnectionComplete(6)) //Ожидание завершения подключения 3.4.1-8
      SetPauseInSeconds(10,false);
    end;
    
    Update_Client_Info(Online);
    while ((RunPay(8, false)) or (RunPay(8, true))) //Запуск оплаты 3.4.1-8
      SetPauseInSeconds(10,false); 
    end;
    
  elif ((WorkMode == 32) and (StartingPoint == 19))
    
    Update_Client_Info(WaitForConnect39com);
    while (not CheckIsConnectionComplete(7)) //Ожидание завершения подключения 3.4.8
      SetPauseInSeconds(10,false);
    end;
    
    Update_Client_Info(Online);
    while ((RunPay(9, false)) or (RunPay(9, true))) //Запуск оплаты 3.4.8
      SetPauseInSeconds(10,false); 
    end;
    
    SetStateOfJob_IsDone (AllJobsDoneSetting); //Устанавливаем признак завершенности всех заданий 
    SetStateOfJob_IsntDone (ChangeDaySetting); //Устанавливаем признак завершенности всех заданий за сегодня
    
  elif ((WorkMode == 33) and (StartingPoint == 1))
    
    Waiting_to_start(VUZ_StartTime2); //Ожидание запуска до указанного в переменной времени

    if (not Match_Job(4))
      Update_Client_Info(Connect3130Com);
      RunConnectionComiss(4);
    end;
    
  elif ((WorkMode == 33) and (StartingPoint == 2))
    
    Waiting_to_start(VUZ_StartTime2); //Ожидание запуска до указанного в переменной времени
    
    Update_Client_Info(Online);
    while ((RunPay(6,false)) or (RunPay(6,true))) //Запуск списания ежемесячных комиссий
      SetPauseInSeconds(10,false);
    end;
    
  end;
 
 END;
 
 MACRO SLD_Recursion_SubsequentLaunch(WorkMode, StartingPoint)
 
 var rs;
 
  if   ((WorkMode == 41) and (StartingPoint == 1 ))
    
    Waiting_to_start(SLD_StartTime1); //Ожидание запуска до указанного в переменной времени
    
    if (not Match_Job(2))
      Update_Client_Info(Connect220Com);
      RunConnectionComiss(2); //Запуск подключения 2.2.0
    end;
  
  elif ((WorkMode == 41) and (StartingPoint == 2))
  
    Update_Client_Info(WaitForConnect220Com);
    while (not CheckIsConnectionComplete(2)) //Ожидание завершения подключения 2.2.0
      SetPauseInSeconds(10,false);
    end;
  
    Update_Client_Info(Online);
    while ((RunPay(1, false)) or (RunPay(1, true))) //Списание 2.2.0 
      SetPauseInSeconds(10,false);
    end;
  
  elif ((WorkMode == 41) and (StartingPoint == 3))
  
    if (not Match_Job(3))
      Update_Client_Info(Connect730Com);
      RunConnectionComiss(3); //Запуск подключения 7.3.0
    end;
  
  elif ((WorkMode == 41) and (StartingPoint == 4))
  
    if (not Match_Job(4))
      Update_Client_Info(Connect751Com);
      RunConnectionComiss(4); //Запуск подключения 7.5.1
    end;
  
  elif ((WorkMode == 41) and (StartingPoint == 5))
  
    if (not Match_Job(5))
      Update_Client_Info(Connect752Com);
      RunConnectionComiss(5); //Запуск подключения 7.5.2
    end;
  
    Update_Client_Info(WaitForCon730_751_752);
    while     ((not CheckIsConnectionComplete(3)) //Ожидание завершения подключения 7.3.0, 7.5.1, 7.5.2
            or (not CheckIsConnectionComplete(4))
            or (not CheckIsConnectionComplete(5)))
      SetPauseInSeconds(10,false);
    end;
  
  elif ((WorkMode == 41) and (StartingPoint == 6))
  
    Update_Client_Info(Online);
    while ((RunPay(2,false)) or (RunPay(2,true))) //Списание остальных комиссий
      SetPauseInSeconds(10,false);
    end;
  
  elif ((WorkMode == 42) and (StartingPoint == 1))
    
    Waiting_to_start(SLD_StartTime1); //Ожидание запуска до указанного в переменной времени
    
    if (not Match_Job(0))
      Update_Client_Info(Connect34Com);
      RunConnectionComiss(0); //Запуск подключения 3.4.* 01:00
    end;
    
  elif ((WorkMode == 42) and (StartingPoint == 2))
  
    Update_Client_Info(Online);
    while ((RunPay(3, false)) or (RunPay(3, true))) //Запуск списания комиссий не требующих подключения
      SetPauseInSeconds(10,false);
    end;
    
  elif ((WorkMode == 42) and (StartingPoint == 3))
    
    Update_Client_Info(WaitForConnect34Com);
    while (not CheckIsConnectionComplete(0)) //Ожидание завершения подключения 3.4.* 01:00
      SetPauseInSeconds(10,false);
    end;
    
    Update_Client_Info(Online);
    while ((RunPay(4, false)) or (RunPay(4, true))) //Запуск списания 3.4* 01:00
      SetPauseInSeconds(10,false);
    end;
    
  elif ((WorkMode == 42) and (StartingPoint == 4))
  
    if (not Match_Job(6))
      Update_Client_Info(Connect39Com);
      RunConnectionComiss(6); //Запуск подключения 3.9.* 01:00
    end;
  
  elif ((WorkMode == 42) and (StartingPoint == 5))
  
    if (not Match_Job(7))
      Update_Client_Info(Connect310Com);
      RunConnectionComiss(7); //Запуск подключения 3.10.* 01:00
    end;
  
  elif ((WorkMode == 42) and (StartingPoint == 6))
  
    if (not Match_Job(10))
      Update_Client_Info(Connect557Com);
      RunConnectionComiss(10); //Запуск подключения 5.5.7
    end;
  
  elif ((WorkMode == 42) and (StartingPoint == 7))
  
    Update_Client_Info(WaitForConnect39_310com);
    while     ((not CheckIsConnectionComplete(6)) //Ожидание завершения подключения 3.9* и 3.10.* и 5.5.7
            or (not CheckIsConnectionComplete(7))
            or (not CheckIsConnectionComplete(10)))
      SetPauseInSeconds(10,false);
    end;
    
    Update_Client_Info(Online);
    while ((RunPay(7, false)) or (RunPay(7, true))) //Запуск списания 3.9.* и 3.10.* и 5.5.7
      SetPauseInSeconds(10,false);
    end;
  
  elif ((WorkMode == 42) and (StartingPoint == 7.1)) //Суббота

    if (not Match_Job(8)) //Запуск подключения 3.10.* 01:00
      Update_Client_Info(Connect310Com);
      RunConnectionComiss(8);
    end;
  
  elif ((WorkMode == 42) and (StartingPoint == 7.2)) //Суббота

    Update_Client_Info(WaitForConnect310com);
    while (not CheckIsConnectionComplete(8)) //Ожидание завершения подключения 3.10.*
      SetPauseInSeconds(10,false);
    end;
    
    Update_Client_Info(Online);
    while ((RunPay(8, false)) or (RunPay(8, true))) //Запуск списания 3.10.*
      SetPauseInSeconds(10,false);
    end;
  
  elif ((WorkMode == 42) and (StartingPoint == 7.3)) //Воскресенье
  
    if (not Match_Job(9)) //Запуск подключения 3.10.* 01:00
      Update_Client_Info(Connect310Com);
      RunConnectionComiss(9);
    end;
  
  elif ((WorkMode == 42) and (StartingPoint == 7.4)) //Воскресенье

    Update_Client_Info(WaitForConnect310com);
    while (not CheckIsConnectionComplete(9)) //Ожидание завершения подключения 3.10.*
      SetPauseInSeconds(10,false);
    end;
    
    Update_Client_Info(Online);
    while ((RunPay(9, false)) or (RunPay(9, true))) //Запуск списания 3.10.*
      SetPauseInSeconds(10,false);
    end;
    
    
  elif ((WorkMode == 42) and (StartingPoint == 8))
    
    Waiting_to_start(SLD_StartTime2); //Ожидание запуска до указанного в переменной времени

    if (not Match_Job(1)) //Запуск подключения 3.4.* 21:00
      Update_Client_Info(Connect34Com);
      RunConnectionComiss(1);
    end;
  
  elif ((WorkMode == 42) and (StartingPoint == 9))
  
    Update_Client_Info(WaitForConnect34Com);
    while (not CheckIsConnectionComplete(1)) //Ожидание завершения подключения 3.4.* 21:00
      SetPauseInSeconds(10,false);
    end;
    
    Update_Client_Info(Online);
    while ((RunPay(6, false)) or (RunPay(6, true))) //Запуск списания 3.4.* 21:00
      SetPauseInSeconds(10,false);
    end;
  
  elif ((WorkMode == 42) and (StartingPoint == 10))
    
    Waiting_to_start(SLD_StartTime3); //Ожидание запуска до указанного в переменной времени
    
    Update_Client_Info(Online);
    while ((RunPay(5, false)) or (RunPay(5, true))) //Запуск списания комиссий не требующих подключения
      SetPauseInSeconds(10,false);
    end;
  
    SetStateOfJob_IsDone (AllJobsDoneSetting); //Устанавливаем признак завершенности всех заданий
    SetStateOfJob_IsntDone (ChangeDaySetting); //Устанавливаем признак завершенности всех заданий за сегодня
    
  end;
 
 END;
 
 MACRO GO_Recursion_SubsequentLaunch(WorkMode, StartingPoint)
 
 var rs;
 
  if   ((WorkMode == 51) and (StartingPoint == 1 ))
    
    Waiting_to_start(GO_StartTime1); //Ожидание запуска до указанного в переменной времени
  
    Update_Client_Info(Online);
    while ((RunPay(51, false)) or (RunPay(51, true)))//Списание 2.2.0 
      SetPauseInSeconds(10,false);
    end;
  
  elif ((WorkMode == 51) and (StartingPoint == 2))
  
    Update_Client_Info(Online);
    while ((RunPay(53, false)) or (RunPay(53, true))) //Списание других ежемесячных комиссий
      SetPauseInSeconds(10,false);
    end;
  
  elif ((WorkMode == 52) and (StartingPoint == 1))
    
    Waiting_to_start(GO_StartTime1); //Ожидание запуска до указанного в переменной времени
    
   //Запуск подключения 3.4.* 01:00
    if (not Match_Job(0))
      Update_Client_Info(Connect34Com);
      RunConnectionComiss(0);
    end;
    
  elif ((WorkMode == 52) and (StartingPoint == 2))
  
    Update_Client_Info(WaitForConnect34Com);
    while (not CheckIsConnectionComplete(0)) //Ожидание завершения подключения 3.4.* 01:00
      SetPauseInSeconds(10,false);
    end;
    
    Update_Client_Info(Online);
    while ((RunPay(52, false)) or (RunPay(52, true)))//Запуск списания 3.4.* 01:00
      SetPauseInSeconds(10,false);
    end;
    
  elif ((WorkMode == 52) and (StartingPoint == 3))
          
   //Запуск подключения 3.9.* 01:00
    if (not Match_Job(7))
      Update_Client_Info(Connect39Com);
      RunConnectionComiss(7);
    end;
  
  elif ((WorkMode == 52) and (StartingPoint == 4))
  
   //Запуск подключения 3.10.* 01:00
    if (not Match_Job(8))
      Update_Client_Info(Connect310Com);
      RunConnectionComiss(8);
    end;
  
  elif ((WorkMode == 52) and (StartingPoint == 5))
  
    Update_Client_Info(WaitForConnect39_310com);
    while     ((not CheckIsConnectionComplete(7))
            or (not CheckIsConnectionComplete(8)))          //Ожидание завершения подключения 3.9* и 3.10.*
      SetPauseInSeconds(10,false);
    end;
    
    Update_Client_Info(Online);
    while ((RunPay(57, false)) or (RunPay(57, true)))//Запуск списания 3.9.* и 3.10.*
      SetPauseInSeconds(10,false);
    end;
  
  elif ((WorkMode == 52) and (StartingPoint == 5.1)) //Суббота
  
   //Запуск подключения 3.10.* 01:00
    if (not Match_Job(9))
      Update_Client_Info(Connect310Com);
      RunConnectionComiss(9);
    end;
  
  elif ((WorkMode == 52) and (StartingPoint == 5.2)) //Суббота

    Update_Client_Info(WaitForConnect310com);
    while (not CheckIsConnectionComplete(9)) //Ожидание завершения подключения 3.10.*
      SetPauseInSeconds(10,false);
    end;
    
    Update_Client_Info(Online);
    while ((RunPay(58, false)) or (RunPay(58, true)))//Запуск списания 3.10.*
      SetPauseInSeconds(10,false);
    end;
  
  elif ((WorkMode == 52) and (StartingPoint == 5.3)) //Воскресенье
  
   //Запуск подключения 3.10.* 01:00
    if (not Match_Job(10))
      Update_Client_Info(Connect310Com);
      RunConnectionComiss(10);
    end;
  
  elif ((WorkMode == 52) and (StartingPoint == 5.4)) //Воскресенье

    Update_Client_Info(WaitForConnect310com);
    while (not CheckIsConnectionComplete(10)) //Ожидание завершения подключения 3.10.*
      SetPauseInSeconds(10,false);
    end;
    
    Update_Client_Info(Online);
    while ((RunPay(59, false)) or (RunPay(59, true)))//Запуск списания 3.10.*
      SetPauseInSeconds(10,false);
    end;
  
  elif ((WorkMode == 52) and (StartingPoint == 6))
    
    Waiting_to_start(GO_StartTime2); //Ожидание запуска до указанного в переменной времени

   //Запуск подключения 3.4.* 21:00
    if (not Match_Job(1))
      Update_Client_Info(Connect34Com);
      RunConnectionComiss(1);
    end;
  
  elif ((WorkMode == 52) and (StartingPoint == 7))
  
    Update_Client_Info(WaitForConnect34Com);
    while (not CheckIsConnectionComplete(1)) //Ожидание завершения подключения 3.4.* 21:00
      SetPauseInSeconds(10,false);
    end;
    
    Update_Client_Info(Online);
    while ((RunPay(54, false)) or (RunPay(54, true)))//Запуск списания 3.4.* 21:00
      SetPauseInSeconds(10,false);
    end;
  
    SetStateOfJob_IsDone (AllJobsDoneSetting); //Устанавливаем признак завершенности всех заданий
    SetStateOfJob_IsntDone (ChangeDaySetting); //Устанавливаем признак завершенности всех заданий за сегодня
    
  elif ((WorkMode == 53) and (StartingPoint == 1)) 
  
    Update_Client_Info(Online);
    while ((RunPay(55, false)) or (RunPay(55, true))) //Запуск списания ежемячных комиссий не требующих подключения
      SetPauseInSeconds(10,false);
    end;
  
  elif ((WorkMode == 53) and (StartingPoint == 2))
  
    Waiting_to_start(GO_StartTime1); //Ожидание запуска до указанного в переменной времени

   //Запуск подключения 3.1.1
    if (not Match_Job(2))
      Update_Client_Info(Connect311Com);
      RunConnectionComiss(2); 
    end;
  
  elif ((WorkMode == 53) and (StartingPoint == 3))
    
    Waiting_to_start(GO_StartTime1); //Ожидание запуска до указанного в переменной времени

   //Запуск подключения 8.2.1
    if (not Match_Job(3))
      Update_Client_Info(Connect821Com);
      RunConnectionComiss(3); 
    end;
  
  elif ((WorkMode == 53) and (StartingPoint == 4))
    
    Waiting_to_start(GO_StartTime1); //Ожидание запуска до указанного в переменной времени

   //Запуск подключения 13.1.0
    if (not Match_Job(4))
      Update_Client_Info(Connect1310Com);
      RunConnectionComiss(4); 
    end;
  
  elif ((WorkMode == 53) and (StartingPoint == 5))
    
    Waiting_to_start(GO_StartTime1); //Ожидание запуска до указанного в переменной времени
    
   //Запуск подключения 3.14.1
    if (not Match_Job(5))
      Update_Client_Info(Connect3141Com);
      RunConnectionComiss(5); 
    end;
  
  elif ((WorkMode == 53) and (StartingPoint == 6))
    
    Waiting_to_start(GO_StartTime1); //Ожидание запуска до указанного в переменной времени

   //Запуск подключения 3.15.0
    if (not Match_Job(6))
      Update_Client_Info(Connect3150Com);
      RunConnectionComiss(6); 
    end;
  
  elif ((WorkMode == 53) and (StartingPoint == 7))
  
    Update_Client_Info(WaitForConnectComiss);
    while (   (not CheckIsConnectionComplete(2)) //Ожидание завершения подключения 3.1.1, 8.2.1, 13.1.0, 3.14.1, 3.15.0
           or (not CheckIsConnectionComplete(3))
           or (not CheckIsConnectionComplete(4))
           or (not CheckIsConnectionComplete(5))
           or (not CheckIsConnectionComplete(6)) )
      SetPauseInSeconds(10,false); 
    end;
  
    Update_Client_Info(Online); 
    while ((RunPay(56, false)) or (RunPay(56, true))) //Запуск списания ежемячных комиссий 3.1.1, 8.2.1, 13.1.0, 3.14.1, 3.15.0
      SetPauseInSeconds(10,false);
    end;
  
  end;
 
 END;
 
 MACRO InitializeJobsList()
  
  var Undefind;
  
  var Jobs_List_Array = TArray();
  class Jobs_List(v_section, v_id, v_wrk_mode, v_step)
    var section  = v_section;
    var id       = v_id;
    var wrk_mode = v_wrk_mode;
    var step     = v_step;
  end;   
  
  if (Bank_Name.is_PRBB)
    
    if (WRKMode == ModePayMonthComissPRBB) //ПРББ Режим запуска оплаты ежемесячных комиссий ПРББ (21 число)
    
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0,  19,       ModePayMonthComissPRBB, 1);
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(1,  Undefind, ModePayMonthComissPRBB, 2);
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0,  20,       ModePayMonthComissPRBB, 3);
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0,  21,       ModePayMonthComissPRBB, 4);
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0,  22,       ModePayMonthComissPRBB, 5);
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0,  23,       ModePayMonthComissPRBB, 6);
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0,  24,       ModePayMonthComissPRBB, 7);
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(3,  Undefind, ModePayMonthComissPRBB, 8);
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0,  25,       ModePayMonthComissPRBB, 9);
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(15, Undefind, ModePayMonthComissPRBB, 10);
    elif (WRKMode == ModePayMonthComissPRBB2) //ПРББ Режим запуска оплаты ежемесячных комиссий ПРББ (первый рабочий день месяца)
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0, 26,        ModePayMonthComissPRBB2, 1);
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(16, Undefind, ModePayMonthComissPRBB2, 2);
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0, 27,        ModePayMonthComissPRBB2, 3);
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(17, Undefind, ModePayMonthComissPRBB2, 4);
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(5, Undefind,  ModePayMonthComissPRBB2, 5);
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0, 2,         ModePayMonthComissPRBB2, 6);
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0, 3,         ModePayMonthComissPRBB2, 7);
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0, 4,         ModePayMonthComissPRBB2, 8);
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0, 5,         ModePayMonthComissPRBB2, 9);
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0, 6,         ModePayMonthComissPRBB2, 10);
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(6, Undefind,  ModePayMonthComissPRBB2, 11);
    end;
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0,  0,        ModePayDayComissPRBB, 1);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0,  11,       ModePayDayComissPRBB, 2);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0,  14,       ModePayDayComissPRBB, 3);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(12, Undefind, ModePayDayComissPRBB, 4);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0,  15,       ModePayDayComissPRBB, 5);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0,  16,       ModePayDayComissPRBB, 6);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0,  17,       ModePayDayComissPRBB, 7);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0,  18,       ModePayDayComissPRBB, 8);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(13, Undefind, ModePayDayComissPRBB, 9);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(14, Undefind, ModePayDayComissPRBB, 10);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(2,  Undefind, ModePayDayComissPRBB, 11);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(10, Undefind, ModePayDayComissPRBB, 12);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0,  7,        ModePayDayComissPRBB, 13);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0,  8,        ModePayDayComissPRBB, 14);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0,  13,       ModePayDayComissPRBB, 15);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(7,  Undefind, ModePayDayComissPRBB, 16);

    if (CheckDayOfWeek({curdate}, "Понедельник"))
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0, 9,        ModePayDayComissPRBB, 16.1);
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(8, Undefind, ModePayDayComissPRBB, 16.2);
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0, 10,       ModePayDayComissPRBB, 16.3);
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(9, Undefind, ModePayDayComissPRBB, 16.4);
    end;
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0,  1,        ModePayDayComissPRBB, 17);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0,  12,       ModePayDayComissPRBB, 18);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(4,  Undefind, ModePayDayComissPRBB, 19);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(11, Undefind, ModePayDayComissPRBB, 20);
    
  elif (Bank_Name.is_GEB)
  
    if (WRKMode == ModePayMonthComissGEB) //ГЭБ ежемесячное списание №1
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(5, Undefind, ModePayMonthComissGEB, 1);
    elif (WRKMode == ModePayMonthComissGEB2) //ГЭБ ежемесячное списание последний рабочий день
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(6, Undefind, ModePayMonthComissGEB2, 1);
    elif (WRKMode == ModePayMonthComissGEB3) //ГЭБ ежемесячное списание 1 рабочий день
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(10, Undefind, ModePayMonthComissGEB3, 1);
    end;
    
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0, 8,        ModePayDayComissGEB, 1);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0, 9,        ModePayDayComissGEB, 2);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0, 13,       ModePayDayComissGEB, 3);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(7, Undefind, ModePayDayComissGEB, 4);
    if (CheckDayOfWeek({curdate}, "Понедельник"))
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0, 10,       ModePayDayComissGEB, 4.1);
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(8, Undefind, ModePayDayComissGEB, 4.2);
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0, 11,       ModePayDayComissGEB, 4.3);
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(9, Undefind, ModePayDayComissGEB, 4.4);
    end;
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(1,  1,        ModePayDayComissGEB, 5);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(1,  2,        ModePayDayComissGEB, 6);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(1,  3,        ModePayDayComissGEB, 7);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(1,  Undefind, ModePayDayComissGEB, 8);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(2,  4,        ModePayDayComissGEB, 9);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(2,  5,        ModePayDayComissGEB, 10);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(2,  Undefind, ModePayDayComissGEB, 11);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(3,  6,        ModePayDayComissGEB, 12);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(3,  12,       ModePayDayComissGEB, 13);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(3,  Undefind, ModePayDayComissGEB, 14);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(11, Undefind, ModePayDayComissGEB, 15);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(4,  7,        ModePayDayComissGEB, 16);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(4,  Undefind, ModePayDayComissGEB, 17);
      
  elif (Bank_Name.is_VUZ)
  
    if (WRKMode == ModePayMonthComissVUZ) //ВУЗ ежемесячное списание №1
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0, 1,        ModePayMonthComissVUZ, 1);
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0, 2,        ModePayMonthComissVUZ, 2);
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0, 3,        ModePayMonthComissVUZ, 3);
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(3, Undefind, ModePayMonthComissVUZ, 4);
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(4, Undefind, ModePayMonthComissVUZ, 5);
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(5, Undefind, ModePayMonthComissVUZ, 6);
    elif (WRKMode == ModePayMonthComissVUZ2) //ВУЗ ежемесячное списание №2
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0, 4,        ModePayMonthComissVUZ2, 1);
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(6, Undefind, ModePayMonthComissVUZ2, 2);
    end;
    
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0, 9,         ModePayDayComissVUZ, 1);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(10, Undefind, ModePayDayComissVUZ, 2);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0, 10,        ModePayDayComissVUZ, 3);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0, 11,        ModePayDayComissVUZ, 4);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0, 12,        ModePayDayComissVUZ, 5);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0, 13,        ModePayDayComissVUZ, 6);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(11, Undefind, ModePayDayComissVUZ, 7);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(12, Undefind, ModePayDayComissVUZ, 8);
    
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0, 5,         ModePayDayComissVUZ, 9);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0, 8,         ModePayDayComissVUZ, 10);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(7, Undefind,  ModePayDayComissVUZ, 11);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0, 0,         ModePayDayComissVUZ, 12);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0, 6,         ModePayDayComissVUZ, 13);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0, 7,         ModePayDayComissVUZ, 14);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(1, Undefind,  ModePayDayComissVUZ, 15);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(2, Undefind,  ModePayDayComissVUZ, 16);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(7, Undefind,  ModePayDayComissVUZ, 17);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(8, Undefind,  ModePayDayComissVUZ, 18);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(9, Undefind,  ModePayDayComissVUZ, 19);
    
  elif (Bank_Name.is_EXV)
  
    if (WRKMode == ModePayMonthComissEXV) //ЭВ ежемесячное списание №1
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0,  12,       ModePayMonthComissEXV, 1);
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(1,  Undefind, ModePayMonthComissEXV, 2);
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(12, Undefind, ModePayMonthComissEXV, 3);
    elif (WRKMode == ModePayMonthComissEXV2) //ЭВ ежемесячное списание №2
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0, 2,        ModePayMonthComissEXV2, 1);
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0, 3,        ModePayMonthComissEXV2, 2);
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(3, Undefind, ModePayMonthComissEXV2, 3);
    elif (WRKMode == ModePayMonthComissEXV3) //ЭВ ежемесячное списание первый рабочий день
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(13, Undefind, ModePayMonthComissEXV3, 1);
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0,  13,       ModePayMonthComissEXV3, 2);
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(14, Undefind, ModePayMonthComissEXV3, 3);
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0,  14,       ModePayMonthComissEXV3, 4);
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(15, Undefind, ModePayMonthComissEXV3, 5);
    elif (WRKMode == ModePayMonthComissEXV4) //ЭВ ежемесячное списание 21 число
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0, 15,        ModePayMonthComissEXV4, 1);
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(16, Undefind, ModePayMonthComissEXV4, 2);
    end;
    
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0, 4,         ModePayDayComissEXV, 1);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0, 5,         ModePayDayComissEXV, 2);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0, 16,        ModePayDayComissEXV, 3);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0, 17,        ModePayDayComissEXV, 4);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0, 20,        ModePayDayComissEXV, 5);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(4, Undefind,  ModePayDayComissEXV, 6);
    if (CheckDayOfWeek({curdate}, "Понедельник"))
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0, 6,         ModePayDayComissEXV, 6.1);
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0, 18,        ModePayDayComissEXV, 6.2);
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(5, Undefind,  ModePayDayComissEXV, 6.3);
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0, 7,         ModePayDayComissEXV, 6.4);
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0, 19,        ModePayDayComissEXV, 6.5);
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(6, Undefind,  ModePayDayComissEXV, 6.6);
    end;
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0,  8,         ModePayDayComissEXV, 7);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(7,  Undefind,  ModePayDayComissEXV, 8);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(8,  Undefind,  ModePayDayComissEXV, 9);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0,  9,         ModePayDayComissEXV, 10);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(9,  Undefind,  ModePayDayComissEXV, 11);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0,  11,        ModePayDayComissEXV, 12);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(11, Undefind,  ModePayDayComissEXV, 13);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0, 21,         ModePayDayComissEXV, 14);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0, 22,         ModePayDayComissEXV, 15);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0, 23,         ModePayDayComissEXV, 16);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0, 24,         ModePayDayComissEXV, 17);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(17, Undefind,  ModePayDayComissEXV, 18);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(18, Undefind,  ModePayDayComissEXV, 19);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0,  0,         ModePayDayComissEXV, 20);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(2,  Undefind,  ModePayDayComissEXV, 21);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0,  10,        ModePayDayComissEXV, 22);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(10, Undefind,  ModePayDayComissEXV, 23);
    
  elif (Bank_Name.is_SLD)
  
    if (WRKMode == ModePayMonthComissSLD) //Солидарность ежемесячное списание
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0, 2,        ModePayMonthComissSLD, 1);
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(1, Undefind, ModePayMonthComissSLD, 2);
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0, 3,        ModePayMonthComissSLD, 3);
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0, 4,        ModePayMonthComissSLD, 4);
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0, 5,        ModePayMonthComissSLD, 5);
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(2, Undefind, ModePayMonthComissSLD, 6);
    end;
  
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0, 0,        ModePayDayComissSLD, 1);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(3, Undefind, ModePayDayComissSLD, 2);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(4, Undefind, ModePayDayComissSLD, 3);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0, 6,        ModePayDayComissSLD, 4);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0, 7,        ModePayDayComissSLD, 5);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0, 10,       ModePayDayComissSLD, 6);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(7, Undefind, ModePayDayComissSLD, 7);
    if (CheckDayOfWeek({curdate}, "Понедельник"))
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0, 8,        ModePayDayComissSLD, 7.1);
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(8, Undefind, ModePayDayComissSLD, 7.2);
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0, 9,        ModePayDayComissSLD, 7.3);
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(9, Undefind, ModePayDayComissSLD, 7.4);
    end;
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0, 1,        ModePayDayComissSLD, 8);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(5, Undefind, ModePayDayComissSLD, 9);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(6, Undefind, ModePayDayComissSLD, 10);
  
  elif (Bank_Name.is_GO)
    
    if (WRKMode == ModePayMonthComissGO) //Пойдем Режим запуска оплаты ежемесячных комиссий Пойдем (21 число)
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(51, Undefind, ModePayMonthComissGO, 1);
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(53, Undefind, ModePayMonthComissGO, 2);
    elif (WRKMode == ModePayMonthComissGO2) //Пойдем Режим запуска оплаты ежемесячных комиссий Пойдем (первый рабочий день месяца)
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(55, Undefind, ModePayMonthComissGO2, 1);
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0, 2,         ModePayMonthComissGO2, 2);
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0, 3,         ModePayMonthComissGO2, 3);
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0, 4,         ModePayMonthComissGO2, 4);
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0, 5,         ModePayMonthComissGO2, 5);
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0, 6,         ModePayMonthComissGO2, 6);
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(56, Undefind, ModePayMonthComissGO2, 7);
    end;
    
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0, 0,         ModePayDayComissGO, 1);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(52, Undefind, ModePayDayComissGO, 2);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0, 7,         ModePayDayComissGO, 3);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0, 8,         ModePayDayComissGO, 4);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(57, Undefind, ModePayDayComissGO, 5);
    if (CheckDayOfWeek({curdate}, "Понедельник"))
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0, 9,         ModePayDayComissGO, 5.1);
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(58, Undefind, ModePayDayComissGO, 5.2);
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0, 10,        ModePayDayComissGO, 5.3);
      Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(59, Undefind, ModePayDayComissGO, 5.4);
    end;
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(0, 1,         ModePayDayComissGO, 6);
    Jobs_List_Array(Jobs_List_Array.Size) = Jobs_List(54, Undefind, ModePayDayComissGO, 7);
  
  end;
    
  return Jobs_List_Array;
    
 END;
 
 MACRO Run_Unfinished_Tasks()
 
  var Jobs_List_Array = InitializeJobsList();
  var Bank_Prefix, idx = 0;
   
   if (Bank_Name.is_PRBB)
     Bank_Prefix = "PRBB";
   elif (Bank_Name.is_GEB)
     Bank_Prefix = "GEB";
   elif (Bank_Name.is_VUZ)
     Bank_Prefix = "VUZ";
   elif (Bank_Name.is_EXV)
     Bank_Prefix = "EXV";
   elif (Bank_Name.is_SLD)
     Bank_Prefix = "SLD";
   elif (Bank_Name.is_GO)
     Bank_Prefix = "GO";
   end;
   
   while (idx < Jobs_List_Array.Size - 1) //Ищем точку входа
     if ( GetIncompleteTasks (Jobs_List_Array(idx).section, Jobs_List_Array(idx).id) )
       break;
     end;
     idx = idx + 1;
   end;
   
   if (idx >= Jobs_List_Array.Size - 1) //Принудительно отправляемся на последнюю ступень дабы проставился признак завершенности всех заданий
     ExecMacro (Bank_Prefix+"_Recursion_SubsequentLaunch", Jobs_List_Array(Jobs_List_Array.Size - 1).wrk_mode, 
                                                           Jobs_List_Array(Jobs_List_Array.Size - 1).step);
   else
     while (idx < Jobs_List_Array.Size)
       ExecMacro (Bank_Prefix+"_Recursion_SubsequentLaunch", Jobs_List_Array(idx).wrk_mode, Jobs_List_Array(idx).step);
       idx = idx + 1;
     end;
   end;
   
 END;
 
 MACRO The_Main_Unit()
  
  WRKMode       = Determination_of_work_mode();
  WRKModeString = Determination_of_work_mode_sting(WRKMode);
  
  if (CheckIsNewOperDayOpened()) //Проверяем был ли выполнен переход на новый операционный день
    Update_State_Of_Job_9999();
    if (not CheckIsJob_IsDone (AllJobsDoneSetting)) //Проверяем были ли завершены все задания
      WriteUsrLog ("Выбран режим работы - " + WRKModeString + " ("+WRKMode+") " );
      if( not CheckIsJob_InProgress(AllJobsDoneSetting)); //Проверяем запускались ли уже роботы и была ли их работа прервана
        SetPauseInSeconds(PauseInSeconds,true); //Ждем указанное количество минут для того чтобы все обработчики запустились
        SetStateOfJob_InProgress(AllJobsDoneSetting); //Проставлям флаг, он означает что робот начал выполнять задания
        if (WRKMode == 0) //По непонятным причинам режим работы не определен
          WriteUsrLog ("Ошибка, режима работы - 0 не существует");
        elif (WRKMode == -1) //Выходной
          WriteUsrLog ("Открываемый операционный день - выходной! Роботы отдыхают.");
        else
          Run_Unfinished_Tasks();
        end;
      else //Обработка заданий уже начата или была прервана
        Run_Unfinished_Tasks();
      end;
    else
      SetStateOfJob_IsntDone (ChangeDaySetting); //Устанавливаем признак завершенности всех заданий за сегодня
    end;
  end;
  
 END;

/*****************************************************Точка Входа(Entry Point)**********************************************************************/
  WriteUsrLog ("Выполнен запуск робота, операционный день " + {curdate} );
  Update_Client_Info(Online);
  
  //Очищаем логи от старых записей
  ClearUsrLog();
  ClearPayLog();
  ClearUsrPaymLog();
  debugbreak;
  
  while (1 == 1)
    //Проверяем начиналось ли выполнение заданий, если да то нужды переходить на новый опер. день нет
    if( not CheckIsJob_InProgress(ChangeDaySetting));
      //Взято из rsbank_pipe_server.mac
      Last_Oper_Day = ExecMacroFile("CurDateProc.mac","GetLastOperDay");
      while (Last_Oper_Day == date(0,0,0)) //Ждем пока откроют
        Last_Oper_Day = ExecMacroFile("CurDateProc.mac","GetLastOperDay");
        SetPauseInSeconds(10,false);
      end;
      if (Last_Oper_Day > {curdate})       //Меняем день
        //RR 05.03.2014 Адаптирую под 2031
        ExecMacroFile("CurDateProc.mac","usr_SetOperDay"); //устанавливаем последний открытый ОД
        WriteUsrLog("Произведен переход в операционный день " + {curdate} );
      end;
    else
      CheckCompleteAllTasksForDay();
    end;
    if (IsWorkDay({curdate}))
      Rdate = date();
      if (({curdate} == Rdate) or FlagBackChangeOperDay)
        The_Main_Unit();
        SetPauseInSeconds(60,false);
      else
        WriteUsrLog("Системная дата ("+RDate+") не равна дате открытого операционного дня("+{curdate}+"). Повторная проверка через 600 секунд");
        SetPauseInSeconds(600,false);
      end;
    else
      WriteUsrLog("Операционный день - выходной, роботы отдыхают, повторная проверка через 600 секунд");
      SetPauseInSeconds(600);
    end;
    FlagBackChangeOperDay = false;
    if (CheckIsJob_IsDone (AllJobsDoneSetting) )
      if (IsWorkDay({curdate}))
        Update_Client_Info("Завершено выполнение заданий");
      else
        Update_Client_Info("Выходной день");
      end;
    end;
  end;
 
 onerror(er)
  if (RslDefCon.isInTrans)
    RslDefCon.RollbackTrans();
  end;
  WriteUsrLog ("Произошла ошибка - "+er.message+", код ошибки "+er.code+"");
/**************************************************************************************************************************************************/