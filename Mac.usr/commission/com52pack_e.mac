/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

   EVG Макрос пользовательского алгоритма расчёта базовых сумм комиссий 5.2.*pack
       "Выдача наличных с оформлением заявки в течение предыдущего опер. дня:
          - прочее (до 100 тыс.руб. включительно)
          - прочее (от 100 тыс. руб до 300 тыс. руб. включительно)
          - прочее (от 300 тыс. руб до 600 тыс. руб. включительно)
          - прочее (от 600 тыс. руб до 1 млн. руб. включительно)
          - прочее (от 1 млн. руб до 3 млн. руб. включительно)

       Тип комиссии - единовременная.

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
//ChangeLog:
//Гуцу Е. 25.04.2013 Позаимствовал алгоритм расчёта комиссий из реализации для Экспресс-Волги с целью избавления от многочисленных багов расчёта.
//Гуцу Е. 12/07/2013 При превышении месячного лимита чеком комиссии 5.2.3 - 5.2.7 pack больше не берутся (C-21366).
//Гуцу Е. 17/07/2013 При превышении месячного лимита накопленным итогом за месяц лимит по ТП больше не нужно вычитать (C-21366).
//Гуцу Е. 13/08/2013 Оборот для сравнения с месячным лимитом (3 млн) и оборот для определения превышения лимита пакета ТП теперь рассчитываются по-разному (C-21366).
//joy     30.01.2014 Перенос модификации от 18.12.2013 R-302120  Добавлена проверка на то, проставлена ли категория 5.2.10

import sfinter, ptinter, cb_sql;/*InsertSumList*/
import CommissLib;

/*
    Если при расчете произошла ошибка, поместить в эту переменную ненулевое значение
*/
var MacroError :integer = 0;
private var FICode_calc:string = "";

  /* Тип величины
enum SfBaseTypes{*/
private const   SF_BASETYPE_SUM     = 1;      /* Сумма*/
private const   SF_BASETYPE_QUONT   = 2;      /* Количество*/

record sfbassum( "sfbassum.str" );
record paym(pmpaym);

/* Символ кассы, по которому берётся данная комиссия */
CONST CommCashSymbol = "('42', '46', '47', '53', '54', '58', '59', '60', '61')";    // прочие и т.п.
//18.12.2013 joy R-302120 
/* Номер категории, которая определяет тариф для платежей (Тариф 5.2.10) */
const Tarif5210Number = "5.2.10";
/* ID Категории "Вид тарифа комиссии 5.2.10 за выдачу разового кредита, предоставленного банком" */
const GroupID = 26;

/*
    Расчет для единовременных комиссий
*/
macro CalcCommissionSum( docKind/*Тип первички*/, Doc/*Буфер первички*/, sfcalcalusr_addr/*Алгоритм расчета*/, sfcontr_addr /*Договор обслуживания*/, beginDate, endDate  )
    record sfclusr( "sfclusr.str" );
    record sfcontr( sfcontr );
    record sfcalcal(sfcalcal);
    record cashDoc(pscshdoc);

    var stat:integer; 
    var query, rs;
    var CommSum   = $0,
        SymbSum   = $0,
        Num, retVal,
        TotalCashSum,
        PacketCashSum;
    var TarifValue = 0, MinValue = 0, MaxValue = 0, TarifType = 0;

        
    SetBuff( sfcalcal, sfcalcalusr_addr );
    SetBuff( sfcontr, sfcontr_addr );
    SetBuff( cashDoc, Doc );

    /* 18.12.2013 joy R-302120  Получим значение категории "Вид тарифа комиссии 5.2.10 за выдачу разового кредита, предоставленного банком" */
    Num = "";

    ClearRecord(paym);
    paym.PaymentID = cashDoc.AutoKey;                    

    GetMainObjAttr (retVal, OBJTYPE_PAYMENT, UniID(paym, OBJTYPE_PAYMENT), GroupID, null, null, Num);


    //debugbreak;
    // Комиссия по чекам
    if (( docKind == CASH_PS_OUTORDER ) and (Num != Tarif5210Number) )

       rs = GetComBank52RecordSet( cashDoc.IsCurrency, cashDoc.DocKind, cashDoc.AutoKey, CommCashSymbol );
       while( rs and rs.moveNext() )
          SymbSum = SymbSum + rs.value(0, null, V_MONEY);
       end;


       if( GetTarifInfo( sfcontr, EndDate, EndDate, 3, sfcalcal.CommNumber, @TarifValue, @MinValue, @MaxValue, @TarifType ) )


          /* EVG 25/04/2013 Новый алгоритм расчёта сумм, позаимствованный из реализации для Экспресс-Волги */

          /* 3 млн. - лимит операций за месяц, по которому взимаются комиссии 5.2.3 - 5.2.7 pack */
          var MonthLimitSum = $3000000;


          /* Посчитаем сумму снятия наличных с начала месяца */

          /* EVG 13/08/2013 Для определения того, был ли превышен лимит пакета, сумма обналичивания должна рассчитываться с даты
             подключения ТП в случае, если подключение происходило в текущем месяце.
             Если дата останется нулевая (мало ли) - не страшно, внутри Cash_CalcSymbSum_Period() это корректно обработается.

          TotalCashSum = Cash_CalcSymbSum_Period( DocKind, cashDoc, CommCashSymbol, true, sfcontr );*/
          var tpBegDate = date(0,0,0), cmd;
          cmd = rsdcommand("   SELECT t_begin " +
                           "     FROM dsfcontrplan_dbt " +
                           "    WHERE T_SFCONTRID = ?  " +
                           "      AND t_end       = TO_DATE('01.01.0001','dd.mm.yyyy') " +
                           " ORDER BY t_begin DESC ");
          cmd.addparam( "ID", RSDBP_IN, sfcontr.id );
          rs = rsdrecordset( cmd );
          if ( rs and rs.movenext )
             tpBegDate = SQL_ConvTypeDate( rs.value(0, null, V_DATE) );
          end;

          PacketCashSum = Cash_CalcSymbSum_Period( DocKind, cashDoc, CommCashSymbol, true, sfcontr, null, tpBegDate );
          /* EVG 13/08/2013 end */

          /* Считаем сумму превышения лимита  (с учётом данного чека) */
          var OverLimitSum = PacketCashSum + SymbSum - MaxValue;
          if( OverLimitSum > $0 )

             /* Если это не первый документ, превышающий лимит, то нужно брать только сумму этого
                документа, а не всего превышения. */
             OverLimitSum = min( OverLimitSum, SymbSum );

             /* На граничные условия комиссии проверяется сумма превышения лимита - так задумано */
             if( Cash_IsProperCommission( sfcontr, sfcalcal, OverLimitSum ) )

                debugbreak;

                /* EVG 13/08/2013 Для сравнения с месячным лимитом (3 млн.) нужно ещё раз посчитать оборот за месяц,
                   но теперь уже точно с начала месяца. Для этого вызов Cash_CalcSymbSum_Period() без даты. */
                TotalCashSum = Cash_CalcSymbSum_Period( DocKind, cashDoc, CommCashSymbol, true, sfcontr );
                /* EVG 13/08/2013 end */

                /* Если ранее обналиченная сумма уже превысила месячный лимит, комиссия не берётся */
                if( TotalCashSum > MonthLimitSum )

                   CommSum = $0;

                /* Если месячный лимит превышен текущим чеком, и этот чек единственный, то комиссия берётся с 5 млн - лимит ТП */
                elif( ( SymbSum > MonthLimitSum ) and ( TotalCashSum == $0 ) )

                   /* EVG 12/07/2013 При превышении месячного лимита чеком комиссии 5.2.3 - 5.2.7 pack
                      больше не берутся (C-21366).
                   CommSum = MonthLimitSum - MaxValue;*/
                   CommSum = $0;

                /* Если сумма чеков за месяц (с учётом текущей операции) не превысила месячный лимит 5 млн (+лимит ТП), то 
                   комиссия берётся с суммы превышения лимита ТП (см. выше). */
                elif( ( TotalCashSum + SymbSum ) <= MonthLimitSum )

                   CommSum = OverLimitSum;

                /* Если месячный лимит превышен, но чек не единственный, то комиссия берётся с суммы, оставшейся до 5 млн. */
                elif( ( TotalCashSum + SymbSum ) > MonthLimitSum )

                   /* EVG 17/07/2013 При превышении месячного лимита накопленным итогом за месяц лимит по
                      ТП больше не нужно вычитать (C-21366).
                   /* EVG 26/04/2013 Сумма лимита по ТП всё-таки не должна учитываться в месячном итоге.
                   CommSum = MonthLimitSum - TotalCashSum;*/
                   CommSum = MonthLimitSum - MaxValue  - TotalCashSum;*/
                   CommSum = MonthLimitSum - TotalCashSum;

                end;

                //msgbox (CommSum);
                /* Считаем комиссию */ 
                CommSum = CommSum * TarifValue / 100;

             end;

          end;
          /* EVG 25/04/2013 END */



          /* EVG 25/04/2013 Старый-стрёмный алгоритм - на всякий случай оставил.


          /* Посчитаем сумму платежей с начала месяца. Так как Cash_CalcSymbSum_Period() считает только закрытые
             платежи, нам к этой сумме надо ещё прибавить сумму текущего документа (по условиям комиссии). */
          TotalCashSum = Cash_CalcSymbSum_Period( DocKind, cashDoc, CommCashSymbol, true, sfcontr ) + SymbSum;

          var OverLimitSum = TotalCashSum - MaxValue;
          if( OverLimitSum > $0 )

             /* Если это не первый документ, превышающий лимит, то нужно брать только сумму этого
                документа, а не всего превышения. */
             OverLimitSum = min( OverLimitSum, SymbSum );

             /* На граничные условия комиссии проверяется сумма превышения лимита - так задумано */
             if( Cash_IsProperCommission( sfcontr, sfcalcal, OverLimitSum ) )

                debugbreak;

                /* Если сумма сверх лимита переходит границу 3 млн. руб, то комиссию необходимо брать с суммы до 3 млн. руб.
                   С суммы превышения 3 млн. руб. будет взята комиссия 5.2.9pack. */
                if ( TotalCashSum > $3000000 )

                   /* Вычитаем из TotalCashSum symbsum, т.к. при подсчёте общей суммы платежей TotalCashSum мы специально добавляли к ней
                      сумму текущего чека SymbSum. Также учитываем лимит по ТП (maxvalue). */
                   CommSum = $3000000 - ( TotalCashSum - maxvalue - symbsum );
                   /* Если результат меньше ноля, то, значит, лимит 3 млн. руб. был превышен ранее, ещё до этого документа.
                      Комиссия 5.2.3pack - 5.2.7pack в этом случае не взимается, взимается только 5.2.9pack. */
                   if( CommSum < 0 ) CommSum = 0 end;

                else 
                   CommSum = OverLimitSum;
                end;

                /* Считаем комиссию */ 
                CommSum = CommSum * TarifValue / 100;

             end;

          end;*/

       end;

    end;

    ClearRecord(sfbassum);

    sfbassum.baseType  = SF_BASETYPE_SUM;
    sfbassum.baseSum   = CommSum;

    sfbassum.baseType2  = SF_BASETYPE_SUM;
    sfbassum.baseSum2   = CommSum;

    stat = InsertSumList(sfbassum);

    if( stat )
      MsgBox("Ошибка при вставке базовой суммы: ", GetErrMsg );
    end;

    
    
    /*return integer( 1 ); -- количество*/
    
    /*return $1; -- сумма */
    
end;/*CalcCommissionSum*/




/*
    Печать заголовка подробного отчета о расчете периодической комиссии
*/
macro CalcReportPrintHeader( sfrepdet )
    FICode_calc = "";
[----------------------------------------------------------------------------------------------------------------------];
[|             Сумма                    |             Ставка                   |              Итого                   |];
[|                                      |                                      |                                      |];
[----------------------------------------------------------------------------------------------------------------------];
    return 0;
end;/*CalcReportPrintHeader*/

/*
    Печать строчки отчета подробного отчета о расчете периодической комиссии
*/
macro CalcReportPrintLine( sfrepdet )
    var FICode_base, FICOde_tariff:string;
    file fininstr( fininstr )key 0;
    
    if(sfrepdet.baseType == SF_BASETYPE_SUM )
        fininstr.FIID = sfrepdet.FIID_baseSum;
        if( not GetEQ(fininstr))
            MsgBox("Не найдена валюта ", sfrepdet.FIID_baseSum );
            return 1;
        end;
        FICode_base = fininstr.FI_code;
    else
        FICode_base = "";
    end;

    fininstr.FIID = sfrepdet.FIID_tariff;
    if( not GetEQ(fininstr))
        MsgBox("Не найдена валюта ", sfrepdet.FIID_tariff );
        return 1;
    end;
    FICOde_tariff = fininstr.FI_code;

    fininstr.FIID = sfrepdet.FIID_CalcSum;
    if( not GetEQ(fininstr))
        MsgBox("Не найдена валюта ", sfrepdet.FIID_CalcSum );
        return 1;
    end;
    FICode_calc = fininstr.FI_code;


[| ################### ################ | ################### ################ | ################### ################ |]

    ( sfrepdet.BaseSum, FICode_base,
        sfrepdet.tariff, FICOde_tariff,
        sfrepdet.CalcSum, FICode_calc );

    return 0;
end;/*CalcReportPrintLine*/

/*
    Печать окончания отчета подробного отчета о расчете периодической комиссии
*/
macro CalcReportPrintFooter( sfrepdet, TotalSum )

[----------------------------------------------------------------------------------------------------------------------];
[Итого за период                                                               | ################### ################ |]
(TotalSum, FICode_calc);
[----------------------------------------------------------------------------------------------------------------------];
    return 0;
end;/*CalcReportPrintFooter*/

