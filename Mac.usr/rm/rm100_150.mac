//-----------------------------------------------------------------------------
// Блок      : 29031 - "Обработка платежа на закрытый счет"
// Шаг       : 150   - "Обработка платежа на закрытый счет"
// Назначение: Макрос шага
// Описание  : Макрос шага
//-----------------------------------------------------------------------------

import InsCarryDoc, PaymInter, PTInter, OprInter, BankInter, RMInter, CTInter, WldInter, pm_tools,
       "rmtools.mac", "cbsttls.mac";
import oralib; //Jushmanov 2014-02-25 C-19151

const ПутьКНастройкеПроводитьТекущимДнем = "АРМ ПОЗИЦИОНЕРА\\ПЕРЕМЕННЫЕ\\CARRYINUNKNOWNCURRENTDAY";

var PaymentObj:RsbPayment;


private macro ЗаполнитьСортировку( InData, Sum )
    var str, day, month, year;

    DateSplit(InData, day, month, year );

    str = String( year:4:o, month:2:o, day:2:o, Sum:18:o );

    /* Точку удаляем */
    str = substr( str, 1, Index(str, ".")-1 ) + substr( str, Index(str, ".")+1 );

    return str;
end;


macro ПолучитьОснование( Account:string, Payer:string, INN:string, Ground:string ):string
    var PayerName:string = Payer;
    var NewGround:string = "";

    if( strlen( INN ) )
        PayerName = PayerName + ", ИНН/КПП " + INN;
    end;

    NewGround = string( "Списание со счета невыясненных сумм денежных средств, поступивших на закрытый счет ", 
                         Account, ", по новым реквизитам клиента. Плательщик <",
                         PayerName, ">, <", Ground, ">.");

    if( strlen(NewGround) > 210 )
        return SubStr( NewGround, 1, 210 );
    else
        return NewGround;
    end;
end;


macro ExecuteStep( doc, first, KindDoc ) 
    var stat = 0;
    var sh_rub, sh_cur;
    var err, IsCarryCurDay, AccUnknown, AttrType, Group, Client, DepOld, DepNew, IsExternal = 1;
    var IPIDs, PPIDs, IPtype, PPtype, BankID;
    var MOPayment:Object;
    var BBPayment:Object;
    var paymtr:RsbPaymTransaction = PaymentObj.MakeTransaction();
    var Shifr_Rub, Shifr_Cur;

    var Memorial : Object;
    var BankPaym : Object;

    sh_rub = "BANK_INI\\ОПЕРАЦИОННЫЙ ДЕНЬ\\ПЕРЕМЕННЫЕ\\CIPHERRUB";
    sh_cur = "BANK_INI\\ОПЕРАЦИОННЫЙ ДЕНЬ\\ПЕРЕМЕННЫЕ\\CIPHERCUR";
    GetRegistryValue( ПутьКНастройкеПроводитьТекущимДнем, V_BOOL, IsCarryCurDay, err );
    if( err != 0 )
        /* По умолчанию считаем, что флаг "Проводить в невыясненные текущим днем" установлен */
        IsCarryCurDay = TRUE;
    end;

    RECORD PaymOut( pmpaym );
    RECORD pmrmprop_Out( pmrmprop );
    RECORD pmprop_debet( pmprop );
    RECORD pmprop_credit( pmprop );
    RECORD NoteText( notetext );
    RECORD objatcor( objatcor );
    RECORD settacc( settacc );
    RECORD memorder( memorder );
    FILE   pmakkr( pmakkr ) key 0;
    FILE   account( account );
    FILE   pmcoOut(pmco) key 0;
    var    pmco:TRecHandler = TRecHandler("pmco.dbt", "bank.def");
    FILE   cors(corschem);

    ClearRecord(pmprop_debet);
    ClearRecord(pmprop_credit);
    ClearRecord(memorder);

    // Актуализировать проводки платежа
    if( not CarryPlanDocuments(PaymentObj.PaymentID) ) 
        MsgBox("Ошибка при помещении планируемой проводки в проведенные");
        return 1;
    end;

    /* Найти свойства платежа */  
    stat = FindPayment( PaymentObj.PaymentID, /* Индентификатор */
                        0,                 /* Purpose    */
                        0,                 /* SubPurpose */
                        0,                 /* DocKind    */
                        0,                 /* DocId      */
                        true,
                        PaymOut,           /* буфер платежа            */
                        NULL,               /* буфер дебетовых свойств  */
                        NULL,               /* буфер кредитовых свойств */
                        pmrmprop_Out        /* свойства R-макета */
                      );

    if( stat != 0)
        MsgBox( "Ошибка при поиске платежа" );
        return 1;
    end;

    /*счет невыясненных*/
    AccUnknown = Unkn_GetAccountPassive( PaymOut.Department, PaymentObj.BaseFIID );

    if( AccUnknown == "" )
        MsgBox( "Ошибка при определении счета невыясненных" );
        return 1;
    end;

    /*Ищем СПИ*/
    if (stat = FoundSPI(0, PaymentObj.ReceiverAccount, settacc))
        MsgBox( "Ошибка при поиске СПИ" );
        return 1;
    end;

    /*если получатель средств находится в том же филиале что и закрытый счет*/
    if ( (not ПринадлежностьБанкаНашейТС(settacc.BankID))
      or (settacc.Chapter != 1)
      or (PaymOut.Department!=ПолучитьФилиал(settacc.BankID)) )
        IsExternal = 0;
    end;

    if (IsExternal)
        if (PaymentObj.BaseFIID == PaymentObj.ReceiverFIID)
            /*создаем мемордер*/
            Memorial = RsbMemorialOrder();
            Memorial.State = 0; /*отложен*/
            Memorial.Code_Currency = PaymentObj.BaseFIID;
            Memorial.Kind_Oper = " 4";
            Memorial.Origin = CB_DOC_ORIGIN_CLOSACC;
        else
            Memorial = RsbMultyDoc();
            Memorial.Status = 1; /*отложен*/
            Memorial.Origin = MULTYDOC_ORIGIN_CLOSACC;
        end;

        Memorial.Chapter = settacc.Chapter; 
        Memorial.Oper = {oper}; 
        MOPayment = Memorial.Payment;

        /*Создаем платеж банка*/
        MOPayment.Number            = PaymentObj.Number;
        MOPayment.DocKind           = 70;

        if (PaymentObj.BaseFIID == PaymentObj.ReceiverFIID)
            MOPayment.Purpose           = PM_PURP_MEMORDER;
        else
            MOPayment.Purpose           = PM_PURP_MULTYDOC;
        end;

        MOPayment.BaseAmount        =
        MOPayment.PayerAmount       = PaymentObj.BaseAmount;
        MOPayment.ReceiverAmount    = PaymentObj.ReceiverAmount;
        MOPayment.BaseFIID          =
        MOPayment.PayerFIID         = PaymentObj.BaseFIID;
        MOPayment.ReceiverFIID      = PaymentObj.ReceiverFIID;

        MOPayment.SetPayerPI( PAYMENTS_GROUP_UNDEF,
                              {OurBank},
                              0,
                              "",
                              {Name_Bank},
                              "",
                              PaymentObj.BaseFIID,
                              1/*CHAPT1*/,
                              AccUnknown,
                              {OurBank},
                              GetNameClient( "", MOPayment.PayerAccount, 1, MOPayment.BaseFIID),
                              ПолучитьКодСубъекта(MOPayment.Payer, PTCK_INN) );

        MOPayment.SetReceiverPI( PAYMENTS_GROUP_UNDEF,
                                 settacc.BankID,
                                 settacc.BankCodeKind,
                                 settacc.BankCode,
                                 settacc.BankName,
                                 "",
                                 PaymentObj.ReceiverFIID,
                                 1/*CHAPT1*/,
                                 settacc.Account,
                                 settacc.PartyID,
                                 "",//settacc.BankName,
                                 ""//settacc.INN
                                 );

        MOPayment.ValueDate = PM_GetOperDay_Balance(MOPayment.Department);
        MOPayment.Date      = MOPayment.ValueDate;
        MOPayment.Ground    = ПолучитьОснование(PaymentObj.ReceiverAccount, PaymentObj.PayerName, PaymentObj.PayerINN, PaymentObj.Ground);

        if(PaymentObj.BaseFIID/*Memorial.Code_Currency*/ == NATCUR)
            GetRegistryValue( sh_rub, V_STRING, Shifr_Rub, err );
            if( err != 0 )
                Shifr_Rub = "09";
            end;
            MOPayment.ShifrOper       = Shifr_Rub;
        else
            GetRegistryValue( sh_cur, V_STRING, Shifr_Cur, err );
            if( err != 0 )
                Shifr_Cur = "09";
            end;
            MOPayment.ShifrOper       = Shifr_Cur;
        end;

        if( PaymentObj.LinkPayment( MOPayment, PMLINK_KIND_CLOSACC) )
            MsgBox( "Ошибка при установке связи между платежами" );
            return 1;
        end;

    else

        /*Создаем исходящий платеж банка*/
        if (PaymentObj.BaseFIID != PaymentObj.ReceiverFIID)
            BankPaym = RsbBbCpOrder();
            BankPaym.CurrentState = 0; /*отложен*/
            BankPaym.Origin = CP_OR_CLOSACC;
        else
            BankPaym = RsbBankPayment();
            BankPaym.Status = 1; /*отложен*/
            BankPaym.Origin = MEMORDER_FDOC_CLOSACC;
        end;
        BankPaym.Oper = {oper};  
        BBPayment = BankPaym.Payment;

        /*Создаем платеж банка*/
        BBPayment.Number          = PaymentObj.Number;
        if( PaymentObj.BaseFIID != PaymentObj.ReceiverFIID)
            BBPayment.DocKind     = BBANK_CPORDER;
        else
            BBPayment.DocKind     = DLDOC_BANKPAYMENT;
        end;

        BBPayment.Purpose         = PM_PURP_BANKPAYMENT;
        BBPayment.BaseAmount      =
        BBPayment.PayerAmount     = PaymentObj.BaseAmount; 
        BBPayment.ReceiverAmount  = PaymentObj.ReceiverAmount;
        BBPayment.PayerFIID       =
        BBPayment.BaseFIID        = PaymentObj.BaseFIID; 
        BBPayment.ReceiverFIID    = PaymentObj.ReceiverFIID;

        BBPayment.SetPayerPI( PAYMENTS_GROUP_UNDEF, 
                              {OurBank}, 
                              0, 
                              "", 
                              {Name_Bank},
                              "",
                              PaymentObj.BaseFIID, 
                              1/*CHAPT1*/, 
                              AccUnknown, 
                              {OurBank}, 
                              GetNameClient( "", BBPayment.PayerAccount, 1, BBPayment.BaseFIID), 
                              ПолучитьКодСубъекта(BBPayment.Payer, PTCK_INN) );

        BBPayment.SetReceiverPI( PAYMENTS_GROUP_UNDEF, 
                                 settacc.BankID,
                                 settacc.BankCodeKind, 
                                 settacc.BankCode, 
                                 settacc.BankName,
                                 "",
                                 PaymentObj.ReceiverFIID, 
                                 1/*CHAPT1*/, 
                                 settacc.Account, 
                                 settacc.PartyID, 
                                 "",//settacc.BankName, 
                                 ""//settacc.INN 
                                 );
        // Данные валютной операции платежа
        if(PaymentObj.PmCO.FindPmCOGeneral(pmco) == 0)
            Copy(pmcoOut, pmco);
            pmcoOut.PaymentID = 0;
            pmcoOut.PmCOID = 0;
        else
            ClearRecord(pmcoOut);
        end;

        BBPayment.ValueDate = PM_GetOperDay_Balance(BBPayment.Department);
        BBPayment.Date      = {curdate};
        BBPayment.PayDate   = BBPayment.ValueDate;
        BBPayment.Ground    = ПолучитьОснование(PaymentObj.ReceiverAccount, PaymentObj.PayerName, PaymentObj.PayerINN, PaymentObj.Ground);

        /*Копируем из исходного платежа примечания*/
        if( not PaymentObj.Notes.GetFirst( {curdate}, Notetext ) )  
            if( not ДобавитьПримечаниеПлатежа(Notetext, BBPayment.PaymentID))
                MsgBox("Ошибка при копировании примечания");
                return 1;
            end;
            while( not PaymentObj.Notes.GetNext( NoteText ) )
                ДобавитьПримечаниеПлатежа(Notetext, BBPayment.PaymentID);
            end;
        end;

        /*Копируем из исходного платежа категории*/
        if( PaymentObj.GetFirstObjAtCor(ObjAtCor) )  
            if( not ConnectCategory( ObjAtCor.ObjectType,
                                     ObjAtCor.GroupID,
                                     BBPayment.PaymentID,
                                     true,
                                     ObjAtCor.AttrID,
                                     "",
                                     "" ) )
                MsgBox( "Ошибка при привязывании категории");
                return 1;
            end;
            while(PaymentObj.GetNextObjAtCor(ObjAtCor))
                ConnectCategory( ObjAtCor.ObjectType,
                                 ObjAtCor.GroupID,
                                 BBPayment.PaymentID,
                                 true,
                                 ObjAtCor.AttrID,
                                 "",
                                 "" )
            end;
        end;

        if( PaymentObj.LinkPayment( BBPayment, PMLINK_KIND_CLOSACC) )
            MsgBox( "Ошибка при установке связи между платежами" );
            return 1;
        end;
    end;

    /* Проводка на счет невыясненных */
    paymtr.Chapter          = 1;
    paymtr.FIIDPayer        = PaymentObj.PayerFIID;
    paymtr.Sum              = PaymentObj.BaseAmount;
    paymtr.FIIDReceiver     = PaymentObj.BaseFIID;
    paymtr.Number_Pack      = PaymentObj.NumberPack;
    paymtr.Kind_Oper        = " 1";

    if (PaymentObj.ShifrOper != "")
        paymtr.Shifr_Oper   = PaymentObj.ShifrOper;
    else
        paymtr.Shifr_Oper   = "09";
    end;

    paymtr.AccountPayer     = PaymentObj.FuturePayerAccount;
    paymtr.AccountReceiver  = AccUnknown;
    paymtr.Department       = PaymentObj.Department;
    paymtr.Numb_Document    = PaymentObj.Number;
    paymtr.Ground           = PaymentObj.Ground;

    if ( IsCarryCurDay )
        paymtr.Date_Carry   = {curdate};
    else
        paymtr.Date_Carry   = PaymentObj.ValueDate;
    end;

    paymtr.ClaimID = GetClaimID( PaymentObj, paymtr.AccountPayer, paymtr.Chapter, paymtr.FIIDPayer );

    if( not paymtr.Carry() )
        MsgBox("Ошибка при актуализации платежа");
        return 1;
    end;

    // Если проводка на шаге выполнялась фактическая, то:
    // Удалить претензию резервирования к корсчету
    if( НайтиКорсхему(PaymentObj.InCorschem, PaymentObj.BaseFIID, cors) )
        msgBox("Не найдена входящая корсхема");
        return 1;
    end;
    PaymentObj.FreeReserve( cors.Account, 1/*CHAPT1*/, cors.FIID );

    var Sort = "";
    // Заполним сортировку - дата помещения + сумма
    if ( IsCarryCurDay )
        Sort = ЗаполнитьСортировку( {curdate}, PaymentObj.ReceiverAmount );
    else
        Sort = ЗаполнитьСортировку( PaymentObj.ValueDate, PaymentObj.ReceiverAmount );
    end;

    stat = PaymentObj.PlaceToUnknown(Sort);
    if(stat == 128)   
        MsgBox("Не установлено примечание для валюты");
        return 1;
    end;
    if(stat)   
        MsgBox("Ошибка при помещении платежа в невыясненные");
        return 1;
    end;

    PaymentObj.ValueDate = PM_GetOperDay_Balance(PaymentObj.Department);
    PaymentObj.CloseUnknown();

    return УстановитьСтатусыПлатежа( OPR_PAYM_STATE, OPR_PM_ST_CLOSE );
end;


//Jushmanov 2014-02-25 C-19151
macro PostStepAction( message,      /* 1 - выполнение шага; 2 - откат шага;   */
                      errTrn,       /* статус выполнения шага. 0 - ошибки нет */
                      FirstDoc,     /* указатель на первичный документ        */
                      ID_Oper,      /* внутренний идентификатор операции      */
                      Number_Step,  /* Номер шага операции (из настроек)      */
                      KindOper,     /* номер вида операции                    */
                      KindDoc,      /* номер вида первичного документа        */
                      KindStep,     /* вид шага операции                      */
                      ID_Step )     /* внутренний идентификатор шага операции */
    private var logquery, idStep = ID_Step, idOper = ID_Oper;

    if(( message == OP_EXECUTE_STEP ) and (errTrn == 0) and (IsOprMultiExec))
        if ((valtype(idOper) != V_INTEGER) and (valtype(idOper) != V_STRING)) idOper = 0; end;
        if ((valtype(idStep) != V_INTEGER) and (valtype(idStep) != V_STRING)) idStep = 0; end;

        logquery = "UPDATE usr_doprstep_robot_dbt SET t_is_robot_step = chr(88)" +
                   " WHERE t_id_operation = " + idOper + " AND t_id_step = " + idStep;
        ExecSQL(logquery, null, false);
    end;

    return 0;
end;