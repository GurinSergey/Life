//-----------------------------------------------------------------------------
// Блок      : 29029 - "Ручная обработка"
// Шаг       : 33    - "Контролировать?"
// Назначение: Макрос шага
// Описание  : Макрос шага
// Изменения:
// SDA 13.08.2012 C-13133 Необходима выгрузка в МБР  для отправки в Payments рублевых кредитовых авизо группы ЛАЙФ
// TAM 12.08.2013 C-21757 - ручная обработка для ЕД108 может провдится только из сводного платежа
// KS 09.12.2013 Перенос пользовательских доработок в 31ю сборку
// Jushmanov 2014-02-24 C-19151 Логгирование массово выполненных шагов
//-----------------------------------------------------------------------------
import RMInter, PaymInter, BankInter, OprInter, PTInter, CTInter,
       "rmtools.mac", "rmcmptl.mac", "cbsttls.mac",  "pm_common.mac", pm_setst, pmsummo;
import WldInter; //SDA - импорт перенесен из rmtools.mac
import "check_val_acc.mac", "fg_Life_parm.mac";
import FrontCommon, FrontRoute;
import "lib_pm_check.mac", "pm_chkrst.mac"; //TAM 12.08.2013 C-21757
import oralib; //Jushmanov 2014-02-24 C-19151

RECORD Corschem( corschem );
private var PaymentObj:RsbPayment;
private var  forTranzit = false;

var Direct:integer;
// Вопросы пользователю
var Dlg_MesToUnknown = "Поместить платеж в невыясненные?";
var Dlg_MesToControl = "Для зачисления?";
var Dlg_MesToTranzit = "Возврат транзитного платежа на счет, присутствующий в балансе банка.";
// Варианты ответов
var Dlg_Ans_ToUnknown  = " В невыясненные ";
var Dlg_Ans_ToControl  = " Зачислить ";
var Dlg_Ans_ToRejected = " В отвергнутые  ";
var Dlg_Ans_ToEdit     = " Продолжить редактирование ";
//SDA
var Dlg_Ans_ToTranzit  = " Транзитный на выгрузку в МБР ";

private var AccType    :string  = "",
            Department:integer;

private const fgBank = fg_life_subject( {OurBank} );

private const Dlg_Var_Cancel    :integer = 0;
private const Dlg_Var_ToUnknown :integer = 1;
private const Dlg_Var_ToControl :integer = 2;
private const Dlg_Var_ToEdit    :integer = 3;
private const Dlg_Var_ToRejected:integer = 4;

macro GetRegValNeedControl()
    var err, retval;
    GetRegistryValue( "CB\\PAYMENTS\\MANUAL_PROCESSING\\NEEDCONTROL", V_INTEGER, retval, err );
    if( err != 0 )
        retval = 0;
    end;
    return retval;
end;

//-----------------------------------------------------------------------------
// Выбрать направление движения
//-----------------------------------------------------------------------------
private macro PM_ChooseDirect():integer
    Array Text;
    Array Buttons;
    var select_button:integer = 0;
    var selectRes    :integer = Dlg_Var_Cancel;
    //SDA 28.03.2012 - по умолчанию в массовом режиме - на зачисление
    // для массовой постановки на невыясненные есть комбинация клавишь CTRL+F2
    if (not IsOprMultiExec()) 
        var DialogFlag = TSetDialogFlag(1);
        if( ( Direct == OPR_PM_ST_DIR_IN ) or ( Direct == OPR_PM_ST_DIR_TRANZIT ) ) // Входящий или транзитный
            if (forTranzit)
                Text(0) = Dlg_MesToTranzit;
                Buttons(0) = Dlg_Ans_ToTranzit;
                Buttons(1) = Dlg_Ans_ToControl;
                Buttons(2) = Dlg_Ans_ToUnknown;
                Buttons(3) = Dlg_Ans_ToEdit;
            else
                Text(0) = Dlg_MesToUnknown;
                Buttons(0) = Dlg_Ans_ToControl;
                Buttons(1) = Dlg_Ans_ToUnknown;
                Buttons(2) = Dlg_Ans_ToEdit;
            end;
        else
            Text(0) = Dlg_MesToControl;
            Buttons(0) = Dlg_Ans_ToControl;
            Buttons(1) = Dlg_Ans_ToRejected;
            Buttons(2) = Dlg_Ans_ToEdit;
        end;
        select_button = ConfWin( Text, Buttons );
        if( ( Direct == OPR_PM_ST_DIR_IN ) or ( Direct == OPR_PM_ST_DIR_TRANZIT ) ) // Входящий или транзитный
            if (forTranzit)
                if( select_button == 0 )
                    selectRes = Dlg_Var_ToControl;
                elif( select_button == 1 )
                    forTranzit = false;
                    selectRes = Dlg_Var_ToControl;
                elif( select_button == 2 )
                    selectRes = Dlg_Var_ToUnknown;
                elif( select_button == 3 )
                    selectRes = Dlg_Var_ToEdit;
                end;
            else
                if( select_button == 0 )
                    selectRes = Dlg_Var_ToControl;
                elif( select_button == 1 )
                    selectRes = Dlg_Var_ToUnknown;
                elif( select_button == 2 )
                    selectRes = Dlg_Var_ToEdit;
                end;
            end;
        else
            if( select_button == 0 )
                selectRes = Dlg_Var_ToControl;
            elif( select_button == 1 )
                selectRes = Dlg_Var_ToRejected;
            elif( select_button == 2 )
                selectRes = Dlg_Var_ToEdit;
            end; 
        end;
    else
        selectRes = Dlg_Var_ToControl;
    end;

    return selectRes;
end;


private macro КонтрольПо117И()

    var SegmentIndex:integer = OPR_PAYM_ST_INDEX_NO;
    var stat:integer = PM_Check117_NeedToUnknown( PaymentObj.PaymentID, SegmentIndex );

    if( stat != 0 )
        DisplayError();

        if( УстановитьСтатусыПлатежа( OPR_PAYM_MANUAL, OPR_PAYM_ST_MANUAL_NEED ) )
            msgbox("Ошибка при установке сегментов статуса экземпляра операции");
            return 1;
        end;
        MemoryError( stat );    // Заполнить примечание
        if( PaymentObj.Notes.AddNote( PM_NOTEKIND_DENIALGROUND, GetErrMsg() ) != 0 )
            msgbox( "Ошибка при вставке примечания платежа" );
            return -1;
        end;
    end;

    return stat;
end;


//TAM 14.08.2013 C-21757 Отвергнуть документ с заполнением примечания причины отказа
macro PM_ToReject(NoteText)
    if( УстановитьСтатусыПлатежа( OPR_PAYM_STATE, OPR_PM_ST_REJECT ) )
        msgbox("Ошибка при установке сегментов статуса экземпляра операции");
        return 1;
    end;
    // Заполнить примечание
    if( InsertNoteForPayment( PaymentObj.PaymentID, PM_NOTEKIND_DENIALGROUND, NoteText ) != 0 )
        msgbox( "Ошибка при вставке примечания платежа" );
        return 1;
    end;
    PaymentObj.DocKind = WL_INDOC;
    return 0;
end;

//TAM 14.08.2013 C-21757 Сводный документ возвращен с невыясненных
macro IsMultyReturnedFromUnknown(PaymentId:integer)
    var SelectStr: string;
    var params   : TArray;
    var rs       : object;
    SelectStr = " SELECT   1 FROM   dpmlink_dbt lnk, doproper_dbt opr, doprstep_dbt step " +
                " WHERE LNK.T_PURPOSEPAYMENT = :pmid " +
                  " AND LNK.T_LINKKIND = 9 " +
                  " AND OPR.T_DOCUMENTID = LPAD (LNK.T_INITIALPAYMENT, 34, '0') " +
                  " AND STEP.T_ID_OPERATION = OPR.T_ID_OPERATION " +
                  " and STEP.T_BLOCKID = '10000157' " +
                  " and STEP.T_ISEXECUTE = 'X'";
    params = makeArray( SQLParam( "pmid", PaymentId ));
    rs = execSQLselect( SelectStr, params, FALSE );
    if( rs and rs.moveNext() )
        return rs.value(0);
    else
        return 0;
    end;
end;


//-----------------------------------------------------------------------------
// Выполнение шага
//-----------------------------------------------------------------------------
macro ExecuteCaseStep( Kind_Operation, Number_Step, first, KindDoc )
    debugbreak;
    var selectDirect:integer;
    var Account     :string;
    var FIID        :integer;
    var Chapter     :integer = PaymentObj.Chapter;
    var err         :integer = 0;
    var errorMsg    :string = "";
    var DC          :integer;
    var IsBankAcc, IsNext;
    RECORD pm_paym(pmpaym);
    var pi:TRecHandler = TRecHandler( "pmaddpi.dbt" );
    var msg, notresident;
    var mn=Tarray;
    var df,m;
    var Pm2Front = false;
    var cmd;
    //SDA 13.08.2012 C-13133
    var rset; 

    macro GetCorshemRecv(acc);
        var SQL = " SELECT s.t_corrid, s.t_number, s.t_coraccount, c.t_code, b.t_coracc, ";
            SQL = SQL + "\n       (p.t_name || ' ' || b.t_place || b.t_placename) bankname ";
            SQL = SQL + "\n  FROM dcorschem_dbt s, dobjcode_dbt c, dbankdprt_dbt b, dparty_dbt p ";
            SQL = SQL + "\n WHERE s.t_fiid = 0 ";
            SQL = SQL + "\n   AND s.t_account = '"+acc+"' ";
            SQL = SQL + "\n   AND c.t_codekind = 3 ";
            SQL = SQL + "\n   AND c.t_objectid = s.t_corrid ";
            SQL = SQL + "\n   AND b.t_partyid = s.t_corrid ";
            SQL = SQL + "\n   AND p.t_partyid = s.t_corrid ";
        var rs=RsdrecordSet(SQL);
        if (rs.movenext())
            return rs;
        end;
    onerror(x);
        return;
    end;

    //Gurin 26.12.2014 C-36456-7
    if (InList(PaymentObj.DocKind, 320, 322))
        if (PM_PaymOnIncomplete(PaymentObj.PaymentID))
            //вставляем цепочку - "Перенос на незавершенные"
            Opr_InsertBranch ("п", OPRBR_INSERT, True);
        end;
    end;

    //TAM 12.08.2013 C-21757
    if((PaymentObj.dockind == WL_INDOC) and (IsSinglePaymentInMultyPayment(PaymentObj.paymentid) == 1))
        if(not IsMultyClosed(PaymentObj.paymentid))
            msgbox("Платеж реестра ED108 можно провести только при списании сводного платежа со счетов невыясненных сумм или его возврате.");
            return 1;
        end;
        //TAM 14.08.2013 C-21757
        if( IsMultyReturnedFromUnknown(PaymentObj.paymentid)) //по сводному оформлен возврат средств
            if (PM_ToReject("По сводному платежу оформлен возврат невыясненных сумм"))
                MsgBox("Ошибка при проведении платежа");
                return 1;
            end;
            return "";
        end;
    end;

    Direct = GetOprStatus( OPR_PAYM_DIRECT );
    //SDA - 28/03/2012 возможно что указан вручную уже счет для зачисления
    if ((PaymentObj.FutureReceiverAccount == "")
    and not IsForcePlaceInUnknown()
    and (PaymentObj.PIList(PRT_Credit).Size() == 0) and(PaymentObj.origin < 10000)) 
        Msgbox("Счет получателя не указан в платеже|требуется создание уточняющей записи");
        return 1;
    end;

    //SDA 13.08.2012 C-13133 Необходима выгрузка в МБР для отправки в Payments рублевых кредитовых авизо группы ЛАЙФ
    if ((substr(PaymentObj.PayerAccount,1,5) == "47416") and (PaymentObj.InCorschem == 1))
        rset= GetCorshemRecv(PaymentObj.ReceiverAccount);
        if (valtype(rset) == V_GENOBJ) 
            //SDA - был возвращен рекордсет по существующей схеме расчетов
            if (IsOprmultiExec())  
                msgbox( "Возврат транзитного платежа на счет, присутствующий в балансе банка - пакетная обработка запрещена" );
                return 1;
            end;
            forTranzit = true;
        end;
    end;

    If ( (PaymentObj.baseFiid != 0) and not IsForcePlaceInUnknown() and (PaymentObj.origin < 10000) )
        If( IsAccValid(PaymentObj.FutureReceiverAccount, msg, notresident) and (valtype(msg)!=V_UNDEF) and (msg != ""))
            msgbox(msg);
            mn = get_valid_accounts(PaymentObj.ReceiverAccount, PaymentObj.ReceiverFiid, notresident);
            df = setdialogflag(1);
            if ( mn(0) == "нет доступных счетов" );
                if (gettrue(true, "нет доступных счетов для зачисления|в невыясненные?"));
                    // Можно в невыясненные
                    if( УстановитьСтатусыПлатежа( OPR_PAYM_INDEX, OPR_PAYM_ST_INDEX_UNKNOWN, OPR_PAYM_MANUAL, OPR_PAYM_ST_MANUAL_NOTNEED ) )
                        msgbox("Ошибка при установке сегментов статуса экземпляра операции");
                        return 1;
                    end;
                    return "";
                else
                    return 1;
                end;
            else                   
                m = menu(mn,null,"Выберете счет получателя");
            end;
            setdialogflag(df);
            if (m < 0)//and m=="нет счетов"
                return 1;
            end;
            PaymentObj.futurereceiverAccount=mn(m);
            return "35";
        else
            if (PaymentObj.PIList(PRT_Credit).Size() > 0)
                if( ( PaymentObj.PIList(PRT_Credit).First() == 0 ) and ( PaymentObj.PIList(PRT_Credit).Current(pi) == 0 ) )
                    if (pi.rec.fiid != PaymentObj.ReceiverFIID)
                        PaymentObj.ReceiverFIID = PaymentObj.FutureReceiverFIID = pi.rec.fiid;
                        cmd = RSDCommand("update dpmpaym_dbt set t_IsFixAmount = 'X' where t_paymentid = ?");
                        cmd.addparam("pmid",RSDBP_IN,PaymentObj.PaymentID);
                        cmd.execute;
                    end;
                else
                    return 1;
                end;
                return "35";
            end;
            if ((valtype(msg)!=V_UNDEF) and (msg != ""))
                msgbox(msg);
                return 1;
            end;
        end;
    end;

    // 29.04.2013 Golovkin C-7099
    if( ( CompareStrWithMasks( "40821*", PaymentObj.ReceiverAccount ) == 0 ) //40821*
    and ( CompareStrWithMasks( "40821*", PaymentObj.PayerAccount    ) != 0 ) 
    and fgBank.is_EXV and Direct == OPR_PM_ST_DIR_IN )
        if( IsOprmultiExec() )
            if( УстановитьСтатусыПлатежа( OPR_PAYM_INDEX, OPR_PAYM_ST_INDEX_UNKNOWN, OPR_PAYM_MANUAL, OPR_PAYM_ST_MANUAL_NOTNEED ) )
                msgbox("Ошибка при установке сегментов статуса экземпляра операции");
                return 1;
            end;
            return "";
        end;
    end;

    Pm2Front = IsFrontPayment(PaymentObj);
    if( IsForcePlaceInUnknown() )
        selectDirect = Dlg_Var_ToUnknown;
    elif (Pm2Front)
        Dlg_Ans_ToControl  = "   Выгрузить во Фронт    ";
        selectDirect = GetCachedVar( "Direct", "PM_ChooseDirect" );
    else
        selectDirect = GetCachedVar( "Direct", "PM_ChooseDirect" );
    end;

    if( selectDirect == Dlg_Var_ToUnknown ) // В невыясненные
        if( not PM_CanBePlacedToUnknown( PaymentObj, @errorMsg ) )
            if( errorMsg )
                MsgBox( errorMsg );
            end;
            return 1;
        end;
        if( УстановитьСтатусыПлатежа( OPR_PAYM_INDEX, OPR_PAYM_ST_INDEX_UNKNOWN, OPR_PAYM_MANUAL, OPR_PAYM_ST_MANUAL_NOTNEED ) )
            msgbox("Ошибка при установке сегментов статуса экземпляра операции");
            return 1;
        end;
        return ""; // Завершить выполнение блока
    elif( selectDirect == Dlg_Var_ToRejected ) // В отвергнутые
        PaymentObj.PaymStatus = PM_REJECTED;
        PM_SetPrimDocumentState( PaymentObj, DOCUMENT_ST_REJECTED );
        if( УстановитьСтатусыПлатежа( OPR_PAYM_STATE, OPR_PM_ST_REJECT, OPR_PAYM_MANUAL, OPR_PAYM_ST_MANUAL_NOTNEED ) )
            msgbox("Ошибка при установке сегментов статуса экземпляра операции");
            return 1;
        end;
        return ""; // Завершить выполнение блока
    elif(( selectDirect == Dlg_Var_ToControl  ) and not (Pm2Front))// На контроль для зачисления
        //SDA если выбран вариант транзитной обработки     
        if (forTranzit)
            PaymentObj.SetReceiverPI( PAYMENTS_GROUP_EXTERNAL,                   
                                      PaymentObj.ReceiverBankID, // rset.value("t_corrid"),
                                      3,                 
                                      PaymentObj.ReceiverBankCode,     // rset.value("t_code"),     
                                      PaymentObj.ReceiverBankName,     //  rset.value("BankName"),   
                                      PaymentObj.ReceiverBankCorrAcc,  // rset.value("t_coracc"),   
                                      0,                        
                                      1,                             
                                      PaymentObj.ReceiverAccount,      // rset.value("t_coraccount"),                 
                                      -1,                                           
                                      PaymentObj.ReceiverName,                        
                                      PaymentObj.ReceiverINN,                         
                                      null,                                           
                                      null,                                           
                                      rset.value("t_number"), //-1,                          
                                      PM_CORRPOS_TYPE_user);                          
            if( УстановитьСтатусыПлатежа( OPR_PAYM_DIRECT, OPR_PM_ST_DIR_TRANZIT ) )
                msgbox("Ошибка при установке сегментов статуса экземпляра операции");
                return 1;
            end;
        end;

        // проверим по 117-И
        if( КонтрольПо117И() )
            return 0;
        end;

        // Выполнить проверки уточняющих записей
        err = PaymentObj.CheckADDPIList();
        if( err != 0 )
            InitError();
            MemoryError( err );
            errorMsg = GetErrMsg();
            msgbox( errorMsg );
            return 1;
        end;

        if( IsSummaryPayment( PaymentObj ) )
            if( PaymentObj.DbFlag ) 
                DC = PRT_Debet;
            else
                DC = PRT_Credit;
            end;
            if( PaymentObj.PIList(DC).Size > 0 )
                if( УстановитьСтатусыПлатежа( OPR_PAYM_MANUAL, OPR_PAYM_ST_MANUAL_NOTNEED ) )
                    msgbox("Ошибка при установке сегментов статуса экземпляра операции");
                    return 1;
                end;
                if( УстановитьСтатусыПлатежа( OPR_PAYM_DO, OPR_PM_ST_ENTER ) )
                    msgbox("Ошибка при установке сегментов статуса экземпляра операции");
                    return 1;
                end;
                if( PaymentObj.Notes.AddNote( PM_NOTEKIND_DENIALGROUND, "" ) != 0 )
                    msgbox( "Ошибка при вставке примечания платежа" );
                    return 1;
                end;
                if(GetRegValNeedControl() == 1)
                    return ""; // Завершить выполнение блока
                end;
                IsNext = PaymentObj.PIList(DC).First();
                while( IsBankAcc and (IsNext == 0) and (PaymentObj.PIList(DC).Current(pi) == 0) )
                    IsBankAcc = not PM_FindBalanceInReg_117( "PS\\REQOPENACC\\Счета клиентов", pi.rec.Account, 1 );
                    IsNext = PaymentObj.PIList(DC).Next;
                end;
                if( IsBankAcc )  // все счета разноски - банковские
                    return ""; // Завершить выполнение блока
                end;
            end;
        else
            if( PaymentObj.DbFlag )
                Account  = PaymentObj.FuturePayerAccount;
                FIID     = PaymentObj.FuturePayerFIID;
            else
                Account = PaymentObj.FutureReceiverAccount;
                FIID    = PaymentObj.FutureReceiverFIID;
            end;
            
/*          // Golovkin 11.07.2014 убрал до выяснения
            if ( СчетОткрыт( PaymentObj.ReceiverFIID, PaymentObj.ReceiverAccount, 1, AccType, @Department ) )
                // Если запрет на кредит
               if ( Index( AccType, "У" ) ) 
                    msgbox("Запрещено зачисление на счет "+PaymentObj.ReceiverAccount);
                    return 1;
               end;
            end;
*/

            if( СчетСуществуетИОткрыт( FIID, Account, Chapter ) )
                if( PaymentObj.DocKind != PS_INRQ )
                    if( УстановитьСтатусыПлатежа( OPR_PAYM_MANUAL, OPR_PAYM_ST_MANUAL_NOTNEED ) )
                        msgbox("Ошибка при установке сегментов статуса экземпляра операции");
                        return 1;
                    end;
                    if( УстановитьСтатусыПлатежа( OPR_PAYM_DO, OPR_PM_ST_ENTER ) )
                        msgbox("Ошибка при установке сегментов статуса экземпляра операции");
                        return 1;
                    end;
                    if( PaymentObj.Notes.AddNote( PM_NOTEKIND_DENIALGROUND, "" ) != 0 )
                        msgbox( "Ошибка при вставке примечания платежа" );
                        return 1;
                    end; 
                    if((not PM_FindBalanceInReg_117( "PS\\REQOPENACC\\Счета клиентов", Account, 1 ))
                    or (Direct == OPR_PM_ST_DIR_OUT))
                        return ""; // Завершить выполнение блока
                    end;
                    if((GetRegValNeedControl() == 1) or (GetRegValNeedControl()==2))
                        return "";
                    end;
                end;
            else
                msgbox("Счет для зачисления не найден в списке открытых счетов");
                return 1;
            end;
        end;
    elif (( selectDirect == Dlg_Var_ToControl  ) and (Pm2Front))    
        if( УстановитьСтатусыПлатежа( OPR_PAYM_MANUAL, OPR_PAYM_ST_MANUAL_NOTNEED, OPR_STATUS_FRONT, OPRSTAT_FRONT_YES ) )
            msgbox("Ошибка при установке сегментов статуса экземпляра операции");
            return 1;
        end;
        return "";
    else // Dlg_Var_ToEdit, Dlg_Var_ToCancel
        return 1;
    end;
    return ""; // На шаг "Контроль отредактированного платежа"
end;


//Jushmanov 2014-02-24 C-19151
macro PostStepAction( message,      /* 1 - выполнение шага; 2 - откат шага;   */
                      errTrn,       /* статус выполнения шага. 0 - ошибки нет */
                      FirstDoc,     /* указатель на первичный документ        */
                      ID_Oper,      /* внутренний идентификатор операции      */
                      Number_Step,  /* Номер шага операции (из настроек)      */
                      KindOper,     /* номер вида операции                    */
                      KindDoc,      /* номер вида первичного документа        */
                      KindStep,     /* вид шага операции                      */
                      ID_Step )     /* внутренний идентификатор шага операции */
    private var logquery, idStep = ID_Step, idOper = ID_Oper;

    if(( message == OP_EXECUTE_STEP ) and (errTrn == 0) and (IsOprMultiExec))
        if ((valtype(idOper) != V_INTEGER) and (valtype(idOper) != V_STRING)) idOper = 0; end;
        if ((valtype(idStep) != V_INTEGER) and (valtype(idStep) != V_STRING)) idStep = 0; end;

        logquery = "UPDATE usr_doprstep_robot_dbt SET t_is_robot_step = chr(88)" +
                   " WHERE t_id_operation = " + idOper + " AND t_id_step = " + idStep;
        ExecSQL(logquery, null, false);
    end;

    return 0;
end;