/************************************************************************/
/*         Автоматизированная банковская система RS-Bank                */
/*                 Copyright (c) R-Style Software Lab 1998              */
/*                                                                      */
/*  Имя файла        : pspodupl.mac                                     */
/*                                                                      */
/*  Описание         : Инициализация и проверки дубликатов рублевых     */
/*                     платежных документов РКО                         */
/*  Программист      : Андреева Е.П.                                    */
/*                                                                      */
/*  Переделан        : 16.12.2002                                       */
/*                                                                      */
// KS 22.11.2013 Перенесены доработки из 30й сборки
/************************************************************************/

import BankInter, PTInter, PSInter, CTInter, payments, globals, "pspobuff.mac", "pm_tools.mac";

FILE   fmo_account    ("account.dbt") ;
FILE   fmo_party      ("party.dbt");
FILE   fmo_partcode   ("partcode.dbt");

/*номера полей в панели*/
const fld_Number = 1,
      fld_dem_bankaccr  = 21,
      fld_req_bankaccr  = 20,
      fld_pay_bankaccr  = 18, /*счет получателя*/
      fld_akkr_bankaccr = 15,
      fld_dem_Ground    = 22, /*основание требования*/
      fld_req_Ground    = 21, /*основание требования-поручения*/
      fld_ipvs_Ground   = 20, /*Основание инкассового поручения*/
      fld_pay_Ground    = 19, /*основание поручения*/
      fld_akkr_Ground   = 22, /*основание аккредитива*/
      fld_akkr_AccRealReceiver = 23, /*конечный получатель денег по аккредитиву*/
      fld_pay_PayerINN    = 6,  /*инн получателя*/
      fld_pay_ReceiverINN = 16, /*инн плательщика*/
      fld_akkr_PayerINN   = 8,
      fld_akkr_ReceiverINN= 16,
      fld_dem_PayerINN    = 10,
      fld_dem_ReceiverINN = 19,
      fld_req_PayerINN    = 8,
      fld_req_ReceiverINN = 17;

/* Просто ищем Party по PartyId*/
macro FindPartyByPartyID( PartyID )
   var retval, OldKey;
   OldKey = KeyNum (0, fmo_party);

   fmo_party.PartyId = PartyId;
   retval = getEQ(fmo_party);

   keyNum (OldKey, fmo_party);
   return retval;
end;

/* Ищем имеем ли мы БИК*/
macro FindBIC ( PartyID )
   var retval, OldKey;
   OldKey = KeyNum (0, fmo_partcode);

   fmo_partcode.PartyId = PartyId;
   fmo_partcode.CodeKind = PTCK_BIC;

   retval = getEQ(fmo_partcode);

   keyNum (OldKey, fmo_partcode);
   return retval;
end;

/* Возвращает код головного банка, если таковой есть, для банка заданного ID*/
macro GetHeadBankCode (BankID)
   if( not FindBIC( BankID ) )
     FindPartyByPartyID(BankID);
     if(fmo_party.Superior != -1 )
       if( FindPartyByPartyID( fmo_party.Superior ) )
         return fmo_party.PartyId;
       else return -1;
       end;
     else return -1;
     end;
   else return -1;
   end;
end;

macro CheckBankID( BankID )
   
   return 0;

   var stat;

   if ( (BankID == {OurBank}) or (BankID == GetHeadBankCode({OurBank})) )
      /* ищем среди наших счетов */
      fmo_account.Chapter        = 1;
      fmo_account.Account        = r_pmpaym.ReceiverAccount ;
      if ( GetEQ ( fmo_account ) == TRUE )
        if ( RsbGetTrue (false, false,"Проверьте реквизиты получателя. | Указанный счет есть в \"нашем банке\". | Создать \"внешний\" дубликат? ") == false )
           if  ( r_pspayord.DocKind == PSPOKIND_DEMAND ) stat = fld_dem_bankaccr;
           elif( r_pspayord.DocKind == PSPOKIND_REQUEST) stat = fld_req_bankaccr;
           elif( r_pspayord.DocKind == PSPOKIND_ORDER  ) stat = fld_pay_bankaccr;
           elif( r_pspayord.DocKind == PSPOKIND_AKKREDITIV ) stat = fld_akkr_bankaccr;
           end;
           return stat;
        end;
      end;
   end;

   if ( r_pspayord.DocKind == PSPOKIND_AKKREDITIV )
      if ( (BankID == {OurBank}) or (BankID == GetHeadBankCode({OurBank})) )
         /* ищем среди наших счетов */
         fmo_account.Chapter        = 1;
         fmo_account.Account        = r_pmakkr.AccRealReceiver ;
         if ( GetEQ ( fmo_account ) == TRUE )
           if ( RsbGetTrue (false, false, "Проверьте реквизиты получателя. | Указанный счет есть в \"нашем банке\". | Создать \"внешний\" дубликат? ") == false  )
                 stat = fld_akkr_AccRealReceiver;
                 return stat;
           end;
         end;
      end;
   end;

   return 0;
end;

/* Проверка на числовой номер */
macro IsDigitNumber( Number )

  var stat = 0, i = 1, ch, DigitString = "0123456789";

      while( (not stat) and (i <= strlen(Number)) )
        ch = SubStr( Number, i, 1 );
        if( not Index( DigitString, ch ))
          stat = 1;
        end;
        i = i + 1;
      end;

  return stat;

end;

macro    Новый_Документ( )
        return 0;
end;

macro    Проверить_Документ( Режим )

  var stat           :integer = 0 ,
      NeedCheckBankID:integer = 0 ,
      note           :string  = "",
      save_note      :string  = "",
      ret_val        :bool        ,
      res            :integer     ,
      Sh_Oper        :string      ;

         /* Проверяем номер для всех дубликатов */
         if ( (Режим == 2 ) or (Режим == 3) )
              
              if(not stat)
                res = CheckINN(r_pmrmprop.PayerINN);
                if (res)
                   msgBox ("Ошибка в ИНН плательщика");
                   return 1;
                end;

                res = CheckINN(r_pmrmprop.ReceiverINN);
                if (res)
                   msgBox ("Ошибка в ИНН получателя");
                   return 1;
                end;

                if(stat==2)    
                  if   ( r_pspayord.DocKind == PSPOKIND_DEMAND )     stat = fld_dem_PayerINN;
                   elif( r_pspayord.DocKind == PSPOKIND_REQUEST)     stat = fld_req_PayerINN;
                   elif( r_pspayord.DocKind == PSPOKIND_ORDER  )     stat = fld_pay_PayerINN;
                   elif( r_pspayord.DocKind == PSPOKIND_AKKREDITIV ) stat = fld_akkr_PayerINN;
                  end;
                  return stat;
                end;
                if(stat==3)    
                  if   ( r_pspayord.DocKind == PSPOKIND_DEMAND )     stat = fld_dem_ReceiverINN;
                   elif( r_pspayord.DocKind == PSPOKIND_REQUEST)     stat = fld_req_ReceiverINN;
                   elif( r_pspayord.DocKind == PSPOKIND_ORDER  )     stat = fld_pay_ReceiverINN;
                   elif( r_pspayord.DocKind == PSPOKIND_AKKREDITIV ) stat = fld_akkr_ReceiverINN;
                  end;
                  return stat;
                end;
              end;
              
              
              if( StrLen( r_pmrmprop.Number ) == 0 )
                MsgBox("Не задан номер документа");
                return fld_Number;
              end;

              if( IsDigitNumber(r_pmrmprop.Number) )
                MsgBox("Номер документа нечисловой");
                return fld_Number;
              else
                 if( int(r_pmrmprop.Number) == 0 )
                    MsgBox("Номер документа не может быть нулевым");
                    return fld_Number;
                 end;
              end;

              Sh_Oper = r_pmrmprop.ShifrOper;
              if( ( (Sh_Oper == "01") or (Sh_Oper == "02") or (Sh_Oper == "05") or (Sh_Oper == "06") or (Sh_Oper == "08") or (Sh_Oper == "16")) and
                  ( SubStr( r_pmrmprop.Number, StrLen(r_pmrmprop.Number)-2 ) == "000" ) )
                MsgBox("Три последних разряда номера должны быть отличны от '000'");
                return fld_Number;
              end;

              /* EVG 27.01.2011 При вводе дубликата проверять наличие назначения платежа не нужно.
                 Его ввести вообще нельзя, т.к. в шаблоне ввода оно заблокировано.

              if( StrLen( r_pmrmprop.Ground ) == 0 )
                if (r_pspayord.DocKind == PSPOKIND_AKKREDITIV)
                    MsgBox("Заполните поле \"Наименование товаров (услуг) № и дата договора \" ");
                else
                    MsgBox("Введите Назначение платежа");
                end;
                if  ( r_pspayord.DocKind == PSPOKIND_DEMAND ) stat = fld_dem_Ground;
                elif( r_pspayord.DocKind == PSPOKIND_REQUEST) stat = fld_ipvs_Ground;
                elif( r_pspayord.DocKind == PSPOKIND_ORDER  ) stat = fld_pay_Ground;
                elif( r_pspayord.DocKind == PSPOKIND_AKKREDITIV ) stat = fld_akkr_Ground;
                end;
                return stat;
              end;*/

              if (r_pspayord.DocKind == PSPOKIND_AKKREDITIV)
                 if (StrLen(r_pmakkr.AccRealReceiver) == 0)
                    msgbox("Не задан конечный получатель денег по аккредитиву");
                      stat = fld_akkr_AccRealReceiver;
                      return stat;
                   end;
              end;

              /*  Если код банка равен нашему банку или код банка равен коду нашего головного банка */
              if( strlen(r_credit.BankCode) and
                  ((Режим != 3) or ((Режим == 3) and
                                    ((r_credit.BankCode != r_credit_old.BankCode) or
                                     (r_pmpaym.ReceiverAccount != r_pmpaym_old.ReceiverAccount)))))
                NeedCheckBankID = 1;
              end;
              /* дубликат платежа внешний */
              if( NeedCheckBankID and (Режим != 3) and (r_pspayord_old.OrderID == 0) ) 
                stat = CheckBankID( r_pmpaym.ReceiverBankID );
                if( stat ) return stat; end;
              end;
              
              /*проверка реквизитов валютной операции*/
              stat = PM_CheckCO(r_pmpaym,r_pmrmprop,0,r_credit);
              if( stat ) return stat; end;

         end;

         if(Режим == 3)  /* РЕДАКТИРОВАНИЕ */
            if(r_pspayord.CurrentState == 1)
               msgbox("Запрещено редактировать закрытый дубликат");
               stat = 1;
            else
               if( (not stat) and NeedCheckBankID ) /*платеж внешний*/
                 stat = CheckBankID( r_pmpaym.ReceiverBankID );
                 if( stat ) return stat; end;
               end;
               stat = 0;
            end;

         elif(Режим == 2)  /* ВВОД */

         elif(Режим == 1)  /* УДАЛЕНИЕ */
         
         end;
  return stat;
end;

macro    Проверить_Счет_В_Документе( поле ) /*0-счет плательщика, 1-счет получателя*/
        var новое_значение_счета;

        if(поле) новое_значение_счета = r_pmpaym.ReceiverAccount;
        else новое_значение_счета = r_pmpaym.PayerAccount;
        end;
        return новое_значение_счета;
end;

macro    Функция_Пользователя( )
        return 0;
end;

macro    УстановитьПодсказкуПоиска( СтараяПодсказка )
        return "/*+FIRST_ROWS(10)*/";
end;

/*Хинт для списков по статусу первички*/
private const Hint_ByStatus   :string = "/*+FIRST_ROWS(200) LEADING(t pmdupaym pmduprop pmdurmpp) INDEX(t dpsdupaor_dbt_idx1) USE_NL(t pmdupaym pmduprop pmdurmpp)*/";
/*Хинт для списков по дате закрытия*/
private const Hint_ByCloseDate:string = "/*+FIRST_ROWS(200) LEADING(pmdupaym t pmduprop pmdurmpp) INDEX(pmdupaym dpmdupaym_dbt_idx2) USE_NL(pmdupaym t pmduprop pmdurmpp)*/";

/* Установка подсказки для скролингов из макроса */
MACRO УстановитьПодсказку( TableName:string, IndexNum:integer, DefaultHint:string, ScrolState:integer ):string

  var dtflt:PMScrolDateFltr = PMScrolDateFltr();

  if( dtflt.IsSet( DTFL_CLOSEDATE ) )
    return Hint_ByCloseDate;
  else
    return Hint_ByStatus;
  end;

  return DefaultHint;
END;
