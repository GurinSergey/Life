//-----------------------------------------------------------------------------
// Блок     : "Исполнение за счет собств. средств"
// Шаг      : "Исполнение"
// Описание : Макрос шага
// KS 22.11.2013 Перенесены доработки из 30й сборки
//-----------------------------------------------------------------------------

//доработал Seleznev

import PaymInter, PSInter, OprInter, BankInter, psbccomn, bc_categ, pm_opr, pm_common, pm_setst, pm_tools;

var PaymentObj:RsbPayment;

//-----------------------------------------------------------------------------
// Создать мемордер
//-----------------------------------------------------------------------------
PRIVATE MACRO CreateMemorial( buyorder:object, ReceiverAccount:string )

  var Memorial:object = GenObject("RsbMemorialOrder", 0 );
  var Payment:RsbMOPayment = Memorial.Payment();
  var SkipArest, Status;

  Memorial.State             = 0;/*CB_DOC_STATE_DEFERRED*/;
  Memorial.Oper              = {oper};
  Memorial.Chapter           = 1;
  Memorial.Code_Currency     = PaymentObj.PayerFIID;

  Memorial.Kind_Oper         = " 4";
  Memorial.Origin            = CB_DOC_ORIGIN_MANUAL;

  Payment.ClientDate         =
  Payment.Date               =
  Payment.PayerBankEnterDate =
  Payment.ValueDate          = {curdate};
                       
  Payment.DocKind            = DLDOC_MEMORIALORDER;
  Payment.Purpose            = PM_PURP_MEMORDER;

  Payment.Number             = PaymentObj.Number;
  Payment.ShifrOper          = "09";

  Payment.PayerAmount        = PaymentObj.PayerAmount;
  Payment.PayerFIID          = 
  Payment.ReceiverFIID       = PaymentObj.PayerFIID;

  Payment.SetPayerPI( PAYMENTS_GROUP_UNDEF, 
                      PaymentObj.PayerBankID, 
                      PaymentObj.PayerBankCodeKind, 
                      PaymentObj.PayerBankCode, 
                      PaymentObj.PayerBankName,
                      PaymentObj.PayerBankCorrAcc,
                      PaymentObj.PayerFIID, 
                      1/*CHAPT1*/, 
                      PaymentObj.PayerAccount, 
                      PaymentObj.Payer, 
                      PaymentObj.PayerName, 
                      PaymentObj.PayerINN );

  Payment.SetReceiverPI( PAYMENTS_GROUP_UNDEF, 
                         {OurBank}, 
                         0, 
                         "", 
                         "",
                         "",
                         PaymentObj.PayerFIID, 
                         1/*CHAPT1*/, 
                         ReceiverAccount, 
                         0, 
                         "", 
                         "" );
                    
  Payment.Ground             = BC_KindOrderName(buyorder.BCOrdKind) + " № " + PaymentObj.Number + " от " + PaymentObj.Date + ". Списание средств для исполнения поручения.";
  
  // Заполнение кода вида валютной операции
  BC_SetVOCode( buyorder, Payment, PSBCACTION_CONV );

  // Установить мемориальному ордеру признак автозапуска операции.
  Memorial.LaunchOper = true;

  // Претензию резервирования поручения на п/п/к перепривязать к созданному мемориальному ордеру
  Payment.BindReserve( GetClaimID( PaymentObj, PaymentObj.PayerAccount, PaymentObj.Chapter, PaymentObj.PayerFIID ), 
                       PaymentObj.Number, true );

  if( PM_GetOprStatus( Payment.DocKind, Payment.DocumentID, OPR_PAYM_PERMISSION, @Status ) and
      (Status == OPR_PAYM_ST_PERMISSION_YES)
    )
    SkipArest = true;
  else
    SkipArest = false;
  end;

  Payment.CryptoAction( string("Автоматическое_формирование_платежей") );
END;

MACRO ExecuteStep( doc, paymDoc )
// msgbox (PaymentObj.Baserate.Rate, "|", PaymentObj.FactRate.Rate);
  
  var BuyOrder:object         = GenObject("RsbBuyCurrencyOrder", PaymentObj.DocumentID);
//  var BuyOrder:object         = RsbBuyCurrencyOrder( PaymentObj.DocumentID);
 
  var FD:BuyCurOrder_FirstDoc = BuyCurOrder_FirstDoc(PaymentObj);
  
  var МинусСчетКонвКл:string = FD.FindAndOpenAccount( "-СчетКонвКл", 0, {curdate}, FIROLE_FICOM );
  var ПлюсСчетКонвКл:string  = FD.FindAndOpenAccount( "+СчетКонвКл", 0, {curdate}, FIROLE_FIREQ );

  var paymtr:RsbPaymTransaction = PaymentObj.MakeTransaction();
  if( paymtr == NULL )
    MsgBox("Ошибка при создании проводки по платежу");
    return 1;
  end;

  PaymentObj.FreeReserve( PaymentObj.PayerAccount, PaymentObj.Chapter, PaymentObj.PayerFIID );


  if ((BuyOrder.BCOrdKind == PSBCKIND_PAY) or (BuyOrder.BCOrdKind == PSBCKIND_CONV))
     paymtr = PaymentObj.MakeTransaction();

     // Сформировать проводку списание валютной суммы
     paymtr.Chapter         = 1;
     // KS 17.01.2014
     //paymtr.Date_Document   = PaymentObj.ValueDate;
     paymtr.Number_Pack     = PaymentObj.NumberPack;
     paymtr.Numb_Document   = PaymentObj.Number;
     paymtr.ResultCarry     = 1;
     paymtr.Kind_Oper       = " 6";
     paymtr.Department      = PaymentObj.Department;
    
     paymtr.FIIDReceiver    =
     paymtr.FIIDPayer       = PaymentObj.PayerFIID;
     paymtr.SumReceiver     =
     paymtr.SumPayer        = PaymentObj.PayerAmount;

     paymtr.AccountPayer    = PaymentObj.PayerAccount;
     paymtr.AccountReceiver = МинусСчетКонвКл;//ПлюсСчетКонвКл;
     paymtr.Ground          = BC_KindOrderName(BuyOrder.BCOrdKind) + " № " + PaymentObj.Number + " от " + PaymentObj.Date + ". Зачисление на счет клиента.";

     if( not paymtr.Carry() )
       msgbox("Ошибка при актуализации платежа");
       return 1;
     end;

  end;



//BcOrder.BCOrdKind == PSBCKIND_BUY


  // Сформировать проводку списание рублевой суммы
/*  paymtr.Chapter         = 1;
  paymtr.Date_Carry      =
  paymtr.Date_Document   = PaymentObj.ValueDate;
  paymtr.Number_Pack     = PaymentObj.NumberPack;
  paymtr.Numb_Document   = PaymentObj.Number;
  paymtr.ResultCarry     = 1;
  paymtr.Kind_Oper       = " 6";
  paymtr.Department      = PaymentObj.Department;
 
  paymtr.FIIDReceiver    =
  paymtr.FIIDPayer       = Paymentobj.PayerFIID;
  paymtr.SumReceiver     =
  paymtr.SumPayer        = PaymentObj.PayerAmount;

  paymtr.AccountPayer    = PaymentObj.PayerAccount;
  paymtr.AccountReceiver = МинусСчетКонвКл;

  paymtr.Ground          = BC_KindOrderName(BuyOrder.BCOrdKind) + " № " + PaymentObj.Number + " от " + PaymentObj.Date + ". Cписание со счета клиента.";

  if( not paymtr.Carry() )
    msgbox("Ошибка при актуализации платежа");
    return 1;
  end;*/


  paymtr = PaymentObj.MakeTransaction();

  // Сформировать мультивалютную проводку
  paymtr.Chapter         = PaymentObj.Chapter;
  paymtr.Date_Carry      = PaymentObj.ValueDate;
  paymtr.Number_Pack     = PaymentObj.NumberPack;
  paymtr.Numb_Document   = PaymentObj.Number;
  paymtr.ResultCarry     = 1;
  paymtr.Shifr_Oper      = "09";
  paymtr.Kind_Oper       = " 6";
  paymtr.Department      = PaymentObj.Department;

  paymtr.FIIDPayer       = PaymentObj.PayerFIID;
  paymtr.FIIDReceiver    = Paymentobj.ReceiverFIID;


  if (BuyOrder.BCOrdKind == PSBCKIND_PAY)
     paymtr.AccountPayer    = МинусСчетКонвКл;
     paymtr.AccountReceiver = PaymentObj.ReceiverAccount;
  elif (BuyOrder.BCOrdKind == PSBCKIND_BUY)
     paymtr.AccountPayer    = PaymentObj.PayerAccount;
     paymtr.AccountReceiver = ПлюсСчетКонвКл;
  elif (BuyOrder.BCOrdKind == PSBCKIND_CONV)
     paymtr.AccountPayer    = МинусСчетКонвКл;
     paymtr.AccountReceiver = ПлюсСчетКонвКл;
  end;

  paymtr.SumPayer        = PaymentObj.PayerAmount;

  paymtr.SumReceiver     = Paymentobj.ReceiverAmount;

  paymtr.Ground          = BC_KindOrderName(BuyOrder.BCOrdKind) + " № " + PaymentObj.Number + " от " + PaymentObj.Date + ". Формирование требований/обязательств.";

  if( not paymtr.Carry() )
    msgbox("Ошибка при актуализации платежа");
    return 1;
  end;


  if ((BuyOrder.BCOrdKind == PSBCKIND_BUY) or (BuyOrder.BCOrdKind == PSBCKIND_CONV))
     paymtr = PaymentObj.MakeTransaction();

     // Сформировать проводку списание рублевой суммы
     paymtr.Chapter         = 1;
     paymtr.Date_Carry      = PaymentObj.ValueDate;
     paymtr.Number_Pack     = PaymentObj.NumberPack;
     paymtr.Numb_Document   = PaymentObj.Number;
     paymtr.ResultCarry     = 1;
     paymtr.Kind_Oper       = " 6";
     paymtr.Department      = PaymentObj.Department;
    
     paymtr.FIIDReceiver    =
     paymtr.FIIDPayer       = PaymentObj.ReceiverFIID;

     paymtr.SumReceiver     =
     paymtr.SumPayer        = PaymentObj.ReceiverAmount;

     paymtr.AccountPayer    = ПлюсСчетКонвКл;
     paymtr.AccountReceiver = PaymentObj.ReceiverAccount;
     paymtr.Ground          = BC_KindOrderName(BuyOrder.BCOrdKind) + " № " + PaymentObj.Number + " от " + PaymentObj.Date + ". Зачисление на счет клиента.";

     if( not paymtr.Carry() )
       msgbox("Ошибка при актуализации платежа");
       return 1;
     end;
  end;

  /* EVG To 2030 17/08/2011
  // Сформировать мемориальный ордер
  CreateMemorial( BuyOrder, МинусСчетКонвКл );
  
  BuyOrder.WriteOffAmount = PaymentObj.PayerAmount;

  //PaymentObj.FuturePayerAccount = ПлюсСчетКонвКл;
  */

  return 0;

END;
