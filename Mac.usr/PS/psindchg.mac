//-----------------------------------------------------------------------------
// Блок      : 29021 - "Изменение реквизитов"
// Шаг       : 10    - "Изменение реквизитов"
// Назначение: Макрос шага
// Описание  : Макрос шага
//-----------------------------------------------------------------------------
import PaymInter, pm_categ, PayInter;
import OprInter, oralib; //Jushmanov 2014-02-21 C-19151

var IsMassProc:bool; // Исполняется из процедуры?

PRIVATE CLASS (TRsdRecordReader) TMassReMakeIndexCarryData

    var PaymentID:integer, 
        ID_Operation:integer,
        ID_Step:integer,
        OldPayerAccount:string,
        NewPayerAccount:string,
        PaymStatus:integer,
        ValueDate:date,
        NumberPack:integer,
        Number:string,
        Department:integer,
        FIID_FuturePayAcc:integer,
        FuturePayerAmount:money,
        FutureReceiverAmount:money,
        LinkOldAccount:string,
        LinkNewAccount:string,
        SfContrID:integer,
        DocKind:integer,
        PayerFIID:integer,
        Payer:integer,
        PayDate:date,
        BaseFIID:integer,
        FutureBaseAmount:money;
END;

// Проводки шага "Изменение реквизитов"
macro PM_MassReMakeIndexCarry()
  
    var query:string = 
     " select pm.t_PaymentID                                                                                              "
     "       ,t.t_ID_Operation                                                                                            "
     "       ,t.t_ID_Step                                                                                                 "
     "       ,pm.t_PayerAccount as t_OldPayerAccount                                                                      "
     "       ,h.t_PayerAccount  as t_NewPayerAccount                                                                      "
     "       ,pm.t_PaymStatus                                                                                             "
     "       ,pm.t_ValueDate                                                                                              "
     "       ,pm.t_NumberPack                                                                                             "+
     "       ,rm.t_Number                                                                                                 "
     "       ,pm.t_Department                                                                                             "
     "       ,pm.t_FIID_FuturePayAcc                                                                                      "
     "       ,pm.t_FuturePayerAmount                                                                                      "
     "       ,pm.t_FutureReceiverAmount                                                                                   "
     "       ,nvl((select oliwp.t_AttrID                                                                                  "+
     "               from dobjlink_dbt oliwp                                                                              "
     "               where oliwp.t_GroupID = decode(pm.t_PaymStatus, 2100, 49, 2)                                         "                                     
     "                 and oliwp.t_ObjectType = 4                                                                         "
     "                 and oliwp.t_ObjectID = lpad(pm.t_Chapter, 2, '0') || lpad(pm.t_FIID, 7, '0') || pm.t_PayerAccount  "
     "                 and oliwp.t_ValidFromDate <= RsbSessionData.curdate                                                "
     "                 and oliwp.t_ValidToDate >= RsbSessionData.curdate                                                  "
     "                 and oliwp.t_AttrType = 4                                                                           "
     "                 and ROWNUM = 1), chr(1)) as t_LinkOldAccount                                                       "          
     "       ,nvl((select oliwp.t_AttrID                                                                                  "
     "               from dobjlink_dbt oliwp                                                                              "
     "               where oliwp.t_GroupID(+) = decode(pm.t_PaymStatus, 2100, 49, 2)                                      "                                         
     "                 and oliwp.t_ObjectType(+) = 4                                                                      "+
     "                 and oliwp.t_ObjectID = lpad(pm.t_Chapter, 2, '0') || lpad(pm.t_FIID, 7, '0') || h.t_PayerAccount   "
     "                 and oliwp.t_ValidFromDate <= RsbSessionData.curdate                                                "
     "                 and oliwp.t_ValidToDate >= RsbSessionData.curdate                                                  "
     "                 and oliwp.t_AttrType = 4                                                                           "
     "                 and ROWNUM = 1), chr(1)) as t_LinkNewAccount                                                       "             
     "       ,case                                                                                                        "
     "          when pm.t_PaymStatus = 2100 then                                                                          "
     "            nvl((select sf.t_ID                                                                                     "
     "                   from dsfcontr_dbt sf                                                                             "
     "                   where sf.t_ServKind = 3                                                                          "+
     "                     and sf.t_ObjectType = 1                                                                        "
     "                     and sf.t_FIID = pm.t_FIID_FuturePayAcc                                                         "
     "                     and sf.t_Object = h.t_PayerAccount                                                             "
     "                     and ROWNUM = 1), 0)                                                                            "
     "          else                                                                                                      "
     "            0                                                                                                       "
     "        end as t_SfContrID                                                                                          "
     "       ,pm.t_DocKind                                                                                                "
     "       ,pm.t_FIID as t_PayerFIID                                                                                    "
     "       ,pm.t_Payer                                                                                                  "
     "       ,rm.t_PayDate                                                                                                "
     "       ,pm.t_BaseFIID                                                                                               "
     "       ,pm.t_FutureBaseAmount                                                                                       "
     " from V_PMMASSOPFOREXE t,                                                                                           "
     "      dpmpaym_dbt pm,                                                                                               "+
     "      dpmrmprop_dbt rm,                                                                                             "
     "      dpminhist_tmp h                                                                                               "
     " where pm.t_PaymentID = t.t_PaymentID                                                                               "
     "   and rm.t_PaymentID = t.t_PaymentID                                                                               "
     "   and pm.t_PayerAccount != h.t_PayerAccount                                                                        "
     "   and h.t_PaymentID = t.t_PaymentID                                                                                "
     "   and pm.t_PaymStatus in( 2100, 2000 )                                                                             ";

    var ErrorMessage:string = "";
    var CarryData:TMassReMakeIndexCarryData = TMassReMakeIndexCarryData();
    var Carry:RsbAccTransaction;
    var NotBalCorrAcc:string = ""; // Внебалансовый счет картотек
    var LinkOldAccount:string = ""; // Связанный внебалансовый счет картотеки для старого счета плательщика
    var LinkNewAccount:string = ""; // Связанный внебалансовый счет картотек для нового счета плательщика
    var IWPCategNewAccount:string = ""; // Счет КУ "Карт ОР", полученный для нового счета
    var NatCurSum:money = $0;

    // Для всех документов К2 проверим наличие связи нового счета и внебалансового счета К2
    // если связь не найдена, то открываем новый счет и связываем его с новым
    if(not MassCreateNotBalAccountIndex2ForChDoc())
        return 1;
    end;

    var rs:RsdRecordset = execSQLselect( query );

    while( rs.moveNext() )
   
        CarryData.Read( rs );

        ErrorMessage = "";

        LinkOldAccount = SubStr( CarryData.LinkOldAccount, 10 );
        LinkNewAccount = SubStr( CarryData.LinkNewAccount, 10 );

        // Данный счет не зависит от платежа, поэтому получаем его один раз
        if( NotBalCorrAcc == "")
            NotBalCorrAcc = NotBalCorrAcc_FirstDoc( "П" ).FindAndOpenSysAccount( "ВнебалСчетКорресп", IsOprMultiExec() );
        end;

        if( CarryData.PaymStatus == PM_IWPPLACED )

            if( (ErrorMessage == "") and (CarryData.LinkOldAccount == "") )
                ErrorMessage = "Не найден внебалансовый счет КОР для " + CarryData.OldPayerAccount;
            end;

            if( (ErrorMessage == "") and (CarryData.SfContrID == 0) )
                ErrorMessage = "Не найден договор обслуживания нового счета плательщика.";
            end;

            if( ErrorMessage == "" )
                IWPCategNewAccount = TIndexWPPrimDocMass( CarryData.PaymentID, 
                                                          CarryData.DocKind, 
                                                          CarryData.PayerFIID, 
                                                          CarryData.Payer, 
                                                          {OperDprtNode},//CarryData.Department, 
                                                          CarryData.PayDate, 
                                                          CarryData.SfContrID, 
                                                          CarryData.BaseFIID ).FindAndOpenSysAccount( "Карт ОР", IsOprMultiExec() );
            end;

            if( (ErrorMessage == "") and (LinkNewAccount != "") and (LinkNewAccount != IWPCategNewAccount) )
                ErrorMessage = "Счет КУ \"Карт ОР\" " + IWPCategNewAccount + " для нового счета плательщика " + CarryData.NewPayerAccount + " отличается от связанного " + LinkNewAccount;
            end;

            if( ErrorMessage == "" )

                Carry = RsbPaymTransaction( CarryData.PaymentID );
                Carry.Chapter         = 3;                                            
                Carry.Date_Carry      = CarryData.ValueDate;
                Carry.Number_Pack     = CarryData.NumberPack;
                Carry.Numb_Document   = CarryData.Number;
                Carry.ResultCarry     = 1;
                Carry.Kind_Oper       = " 1";
                Carry.Department      = CarryData.Department;
                Carry.AccountPayer    = NotBalCorrAcc;
                Carry.AccountReceiver = LinkOldAccount;
                Carry.FIID            = CarryData.FIID_FuturePayAcc;
                Carry.Sum             = CarryData.FuturePayerAmount;
                Carry.Ground          = "Перенос остатка";
                Carry.ID_Operation    = CarryData.ID_Operation;
                Carry.ID_Step         = CarryData.ID_Step;

                if( not Carry.Carry( NULL, ErrorMessage ) and (strlen(ErrorMessage) == 0) )
                    ErrorMessage = "Ошибка проводки по списанию с внебаланса КОР";
                end;
            end;

            if( ErrorMessage == "" )
      
                Carry = RsbPaymTransaction( CarryData.PaymentID );

                Carry.Chapter         = 3;                                            
                Carry.Date_Carry      = CarryData.ValueDate;
                Carry.Number_Pack     = CarryData.NumberPack;
                Carry.Numb_Document   = CarryData.Number;
                Carry.ResultCarry     = 1;
                Carry.Kind_Oper       = " 1";
                Carry.Department      = CarryData.Department;
                Carry.AccountPayer    = IWPCategNewAccount;
                Carry.AccountReceiver = NotBalCorrAcc;
                Carry.FIID            = CarryData.FIID_FuturePayAcc;
                Carry.Sum             = CarryData.FuturePayerAmount;
                Carry.Ground          = "Перенос остатка";
                Carry.ID_Operation    = CarryData.ID_Operation;
                Carry.ID_Step         = CarryData.ID_Step;

                if( not Carry.Carry( NULL, ErrorMessage ) and (strlen(ErrorMessage) == 0) )
                    ErrorMessage = "Ошибка проводки по зачислению на внебаланс КОР";
                end;

            end;

            // Если счет КОР для нового счета не связан, то вставляем связь
            if((ErrorMessage == "") and (CarryData.LinkNewAccount == ""))
                SetLinkedAccountTrn( CarryData.NewPayerAccount, CarryData.FIID_FuturePayAcc, 1, IWPCategNewAccount, CarryData.FIID_FuturePayAcc, 3, OBJROLE_ACC_IWPOBACC );
            end;

        elif( CarryData.PaymStatus == PM_I2PLACED )

            if( (ErrorMessage == "") and (CarryData.LinkOldAccount == "") )
                ErrorMessage = "Не найден внебалансовый счет К2 для " + CarryData.OldPayerAccount;
            end;

            if( (ErrorMessage == "") and (CarryData.LinkNewAccount == "") )
                ErrorMessage = "Не найден внебалансовый счет К2 для " + CarryData.NewPayerAccount;
            end;

            if( ConvSum( NatCurSum, CarryData.FutureBaseAmount, CarryData.ValueDate, CarryData.BaseFIID, NATCUR ) )
                msgbox("Ошибка конвертации суммы");
                return 1;
            end;
      
            if( ErrorMessage == "" )

                Carry = RsbPaymTransaction( CarryData.PaymentID );

                Carry.Chapter         = 3;                                            
                Carry.Date_Carry      = CarryData.ValueDate;
                Carry.Number_Pack     = CarryData.NumberPack;
                Carry.Numb_Document   = CarryData.Number;
                Carry.ResultCarry     = 1;
                Carry.Kind_Oper       = " 1";
                Carry.Shifr_Oper      = "09";
                Carry.Department      = CarryData.Department;
                Carry.AccountPayer    = NotBalCorrAcc;
                Carry.AccountReceiver = LinkOldAccount;

                Carry.FIIDPayer       = NATCUR; 
                Carry.FIIDReceiver    = CarryData.BaseFIID;
         
                Carry.SumPayer    = NatCurSum;
                Carry.SumReceiver = CarryData.FutureBaseAmount;

                Carry.Ground          = "Перенос остатка";
                Carry.ID_Operation    = CarryData.ID_Operation;
                Carry.ID_Step         = CarryData.ID_Step;

                if( not Carry.Carry( NULL, ErrorMessage ) and (strlen(ErrorMessage) == 0) )
                    ErrorMessage = "Ошибка проводки по списанию с внебаланса К2";
                end;
            end;

            if( ErrorMessage == "" )
        
                Carry = RsbPaymTransaction( CarryData.PaymentID );

                Carry.Chapter         = 3;                                            
                Carry.Date_Carry      = CarryData.ValueDate;
                Carry.Number_Pack     = CarryData.NumberPack;
                Carry.Numb_Document   = CarryData.Number;
                Carry.ResultCarry     = 1;
                Carry.Kind_Oper       = " 1";
                Carry.Shifr_Oper      = "09";
                Carry.Department      = CarryData.Department;
                Carry.AccountPayer    = LinkNewAccount;
                Carry.AccountReceiver = NotBalCorrAcc;
                Carry.FIIDPayer       = CarryData.BaseFIID; 
                Carry.FIIDReceiver    = NATCUR;
                Carry.SumPayer = CarryData.FutureBaseAmount;
                Carry.SumReceiver = NatCurSum;
                Carry.Ground          = "Перенос остатка";
                Carry.ID_Operation    = CarryData.ID_Operation;
                Carry.ID_Step         = CarryData.ID_Step;

                if( not Carry.Carry( NULL, ErrorMessage ) and (strlen(ErrorMessage) == 0) )
                    ErrorMessage = "Ошибка проводки по зачислению на внебаланс К2";
                end;
            end;

        end;
  
        if( ErrorMessage != "" )
            msgbox( ErrorMessage );
            return 1; // Отваливаем всю транзакцию, если хоть одна проводка не прошла
        end;
    end;
  
    return 0;

end;


//Jushmanov 2014-02-21 C-19151
macro PostStepAction( message,      /* 1 - выполнение шага; 2 - откат шага;   */
                      errTrn,       /* статус выполнения шага. 0 - ошибки нет */
                      FirstDoc,     /* указатель на первичный документ        */
                      ID_Oper,      /* внутренний идентификатор операции      */
                      Number_Step,  /* Номер шага операции (из настроек)      */
                      KindOper,     /* номер вида операции                    */
                      KindDoc,      /* номер вида первичного документа        */
                      KindStep,     /* вид шага операции                      */
                      ID_Step )     /* внутренний идентификатор шага операции */
    private var logquery;

    if(( message == OP_EXECUTE_STEP ) and (errTrn == 0) and (IsOprMultiExec))
        if ((valtype(ID_Oper) != V_INTEGER) and (valtype(ID_Oper) != V_STRING)) ID_Oper = 0; end;
        if ((valtype(ID_Step) != V_INTEGER) and (valtype(id_Step) != V_STRING)) ID_Step = 0; end;

        logquery = "UPDATE usr_doprstep_robot_dbt SET t_is_robot_step = chr(88)" +
                   " WHERE t_id_operation = " + ID_Oper + " AND t_id_step = " + ID_Step;
        ExecSQL(logquery, null, false);
    end;

    return 0;
end;


/* Предтранзакционные действия */
macro PrepMassExecuteStep() 

    var stat:integer = execStoredFunc( "PM_CHDOC_STEP.MassStepPrepare", V_INTEGER );

    // Если изменение происходит через процедуру массового изменения,
    // то необходимо выполнить макрос скроллинга для каждого платежа :(
    if( not stat and IsMassProc )
        stat = RunScMacroForChangeDoc();
    end;

    return stat;

onerror(x)
    msgbox( x.Message );
    return 1;
end;

/* Транзакционные действия */
macro MassExecuteStep()

    /* Серверная часть до проводки */
    var ODBalance = {curdate}, ODBankServiceBalance = {curdate};
    var query = "select pm.t_Department " +
                "  from V_PMMASSOPFOREXE t, dpmpaym_dbt pm " +
                " where pm.t_PaymentID = t.t_PaymentID ";
    var rs = execSQLselect(query);

    if(rs and rs.moveNext)
        ODBalance = PM_GetOperDay_Balance( rs.value(0) );
        ODBankServiceBalance = PM_GetOperDay_BankServiceBalance( rs.value(0) );
    end;

    var stat:integer = execStoredFunc( "PM_CHDOC_STEP.MassStepExecute1", 
                                       V_INTEGER, 
                                       makeArray( SQLParam("p_ODBalance", ODBalance),
                                                  SQLParam("p_ODBankServiceBalance", ODBankServiceBalance)
                                                )
                                     );
    // Проводки шага "Изменение реквизитов"
    // Сами проводки можно делать только в макросе, на сервере такой возможности нет
    if( not stat )
        stat = PM_MassReMakeIndexCarry();
    end;
  
    /* Серверная часть после проводки */
    if( not stat )
        stat = execStoredFunc( "PM_CHDOC_STEP.MassStepExecute2", V_INTEGER );
    end;

    return stat;

onerror(x)
    msgbox( x.Message );
    return 1;
end;