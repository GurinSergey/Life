//-----------------------------------------------------------------------------
// Блок     : "Зачисление п/п/к"
// Шаг      : "Исполнение документа зачисления"
// Описание : Макрос шага
//-----------------------------------------------------------------------------

import PaymInter, PSInter, OprInter, pm_opr, cbsttls;
import Oralib; //Jushmanov 2014-02-20 C-19151

var PaymentObj:RsbPayment;

//Возможные исходы событий
PRIVATE CONST PMBC_ACTION_OK    :integer = 0, //Ok
              PMBC_ACTION_STOP  :integer = 2, //Приостановить до исполнении дочеренго документа
              PMBC_ACTION_ERROR :integer = 3; //Возникла ошибка

//------------------------------------------------------------------------------
// Проверка дочернего документа, сформированного на предыдущем шаге
//------------------------------------------------------------------------------
PRIVATE MACRO CheckChildDoc( action:integer, oprdocs:TRecHandler /*oprchilddoc.rec*/ ):integer

  if( action != PMBC_ACTION_OK )
    return action;
  end;

  var Status:integer = -1;
  var BcOrder:object = GenObject( "RsbBuyCurrencyOrder", PaymentObj.DocumentID );
  var ChildPaymentObj:RsbPayment = RsbPayment( int(oprdocs.rec.DocumentID) );

  if( not PM_GetOprStatus( oprdocs.rec.DocKind, oprdocs.rec.DocumentID, OPR_PAYM_STATE, @Status ) )
    return PMBC_ACTION_ERROR;
  end;
    
  //статус дочернего документа "закрыт"- Ок
  if( Status == OPR_PM_ST_CLOSE  )
    
    if( УстановитьСтатусыПлатежа( OPR_BC_STATE, OPR_BC_ST_CLOSE ) )
      MsgBox("Ошибка при установке сегментов статуса экземпляра операции");
      return 1;
    end;
    
    if( BcOrder )
      BcOrder.ExecDate        = {curdate};
      BcOrder.SatisfiedAmount = ChildPaymentObj.PayerAmount;
    end;

    return PMBC_ACTION_OK;
  //дочерний документ еще обрабатывается - ждем
  else
    MsgBox( "Не исполнен документ по зачислению средств" );
    return PMBC_ACTION_STOP;
  end;

END;

//------------------------------------------------------------------------------
// Фильтрик на порожденные документы
//------------------------------------------------------------------------------
PRIVATE MACRO CheckDocKind( oprdocs:TRecHandler /*oprchilddoc.rec*/ )
  return ( (oprdocs.rec.DocKind == DLDOC_MEMORIALORDER) OR
           (oprdocs.rec.DocKind == DLDOC_BANKPAYMENT)   OR
           (oprdocs.rec.DocKind == BBANK_CPORDER)       );
END;

//------------------------------------------------------------------------------
// Макрос шага
//------------------------------------------------------------------------------
MACRO ExecuteStep( doc, paymDoc, DocKind:integer, ID_Operation:integer, ID_Step:integer )

  //находим предыдущий шаг
  var Prev_Step:integer = 0;
  var stat     :bool    = Opr_GetPrevStep( ID_Operation, ID_Step, @Prev_Step );

  //находим документы, порожденные на предыдущем шаге
  var ChildDocList:TArray;
  if( stat )
    ChildDocList = filter( OprGetChildDocs( ID_Operation, Prev_Step, true ), @CheckDocKind );
  end;

  //проверяем состояние документов, порожденных на предыдущем шаге
  var Action:integer;
  if( stat )
    Action = reduce( ChildDocList, @CheckChildDoc, PMBC_ACTION_OK );
    if( ( Action == PMBC_ACTION_STOP  ) OR
        ( Action == PMBC_ACTION_ERROR ) )
      stat = false;
    end;
  end;

  if( stat )
    return 0;
  else
    return 1;
  end;

END;


//Jushmanov 2014-02-20 C-19151
macro PostStepAction( message,      /* 1 - выполнение шага; 2 - откат шага;   */
                      errTrn,       /* статус выполнения шага. 0 - ошибки нет */
                      FirstDoc,     /* указатель на первичный документ        */
                      ID_Oper,      /* внутренний идентификатор операции      */
                      Number_Step,  /* Номер шага операции (из настроек)      */
                      KindOper,     /* номер вида операции                    */
                      KindDoc,      /* номер вида первичного документа        */
                      KindStep,     /* вид шага операции                      */
                      ID_Step )     /* внутренний идентификатор шага операции */
    debugbreak;

    private var logquery;

    if(( message == OP_EXECUTE_STEP ) and (errTrn == 0) and (IsOprMultiExec))
        if ((valtype(ID_Oper) != V_INTEGER) and (valtype(ID_Oper) != V_STRING)) ID_Oper = 0; end;
        if ((valtype(ID_Step) != V_INTEGER) and (valtype(id_Step) != V_STRING)) ID_Step = 0; end;

        logquery = "UPDATE usr_doprstep_robot_dbt SET t_is_robot_step = chr(88)" +
                   " WHERE t_id_operation = " + ID_Oper + " AND t_id_step = " + ID_Step;
        ExecSQL(logquery, null, false);
    end;

    return 0;
end;