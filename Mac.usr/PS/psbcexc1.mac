//-----------------------------------------------------------------------------
// Блок     : "Исполнение на бирже"
// Шаг      : "Исполнение"
// Описание : Макрос шага
//-----------------------------------------------------------------------------

import PaymInter, PSInter, BankInter, FIInter, psbccomn, pm_opr, bc_categ, pd_paym;
import OprInter, oralib; //Jushmanov 2014-02-20 C-19151

var PaymentObj:RsbPayment;

//Возможные исходы событий
PRIVATE CONST PMBC_ACTION_OK    :integer = 0, //Ok
              PMBC_ACTION_STOP  :integer = 1, //Приостановить до исполнении дочеренго документа
              PMBC_ACTION_ERROR :integer = 2; //Возникла ошибка

//-----------------------------------------------------------------------------
// Создать мемордер
//-----------------------------------------------------------------------------
PRIVATE MACRO CreateMemorial( buyorder:object, PayerAccount:string, Amount )

  var Memorial:object = GenObject("RsbMemorialOrder", 0 );
  var Payment:RsbMOPayment = Memorial.Payment();

  Memorial.State             = 0;/*CB_DOC_STATE_DEFERRED*/;
  Memorial.Oper              = {oper};
  Memorial.Chapter           = 1;
  Memorial.Code_Currency     = PaymentObj.PayerFIID;

  Memorial.Kind_Oper         = " 4";
  Memorial.Origin            = CB_DOC_ORIGIN_MANUAL;

  Payment.ClientDate         =
  Payment.Date               =
  Payment.PayerBankEnterDate =
  Payment.ValueDate          = {curdate};
                       
  Payment.DocKind            = DLDOC_MEMORIALORDER;
  Payment.Purpose            = PM_PURP_MEMORDER;

  Payment.Number             = PaymentObj.Number;
  Payment.ShifrOper          = "09";

  Payment.PayerAmount        = Amount;
  Payment.PayerFIID          = 
  Payment.ReceiverFIID       = PaymentObj.PayerFIID;

  Payment.SetPayerPI( PAYMENTS_GROUP_UNDEF, 
                      {OurBank}, 
                      0, 
                      "", 
                      "",
                      "",
                      PaymentObj.PayerFIID, 
                      1/*CHAPT1*/, 
                      PayerAccount, 
                      0, 
                      "", 
                      "" );

  Payment.SetReceiverPI( PAYMENTS_GROUP_UNDEF, 
                         PaymentObj.PayerBankID, 
                         PaymentObj.PayerBankCodeKind, 
                         PaymentObj.PayerBankCode, 
                         PaymentObj.PayerBankName,
                         PaymentObj.PayerBankCorrAcc,
                         PaymentObj.PayerFIID, 
                         1/*CHAPT1*/, 
                         PaymentObj.PayerAccount, 
                         PaymentObj.Payer, 
                         PaymentObj.PayerName, 
                         PaymentObj.PayerINN );

  Payment.Ground             = BC_KindOrderName(buyorder.BCOrdKind) + " № " + PaymentObj.Number + " от " + PaymentObj.Date + ". Возврат излишне задепонированных средств.";

  // Заполнение кода вида валютной операции
  BC_SetVOCode( buyorder, Payment, buyorder.BCOrdKind );

  // Установить мемориальному ордеру признак автозапуска операции.
  Memorial.LaunchOper = true;

  Payment.CryptoAction( string("Автоматическое_формирование_платежей") );
END;

//------------------------------------------------------------------------------
// Проверка дочернего документа, сформированного на предыдущем шаге
//------------------------------------------------------------------------------
PRIVATE MACRO CheckChildDoc( action:integer, oprdocs:TRecHandler ):integer

  var bcorder:object = NULL;

  if( action != PMBC_ACTION_OK )
    return action;
  end;

  var Status:integer = -1;

  if( not PM_GetOprStatus( oprdocs.rec.DocKind, oprdocs.rec.DocumentID, OPR_PAYM_STATE, @Status ) )
    return PMBC_ACTION_ERROR;
  end;
    
  //статус дочернего документа "закрыт"- Ок
  if( Status == OPR_PM_ST_CLOSE  )
    return PMBC_ACTION_OK;
  //дочерний документ еще обрабатывается - ждем
  else
    MsgBox( "Не исполнен мемориальный ордер по депонированию средств" );
    return PMBC_ACTION_STOP;
  end;

END;

//------------------------------------------------------------------------------
// Фильтрик на порожденные документы
//------------------------------------------------------------------------------
PRIVATE MACRO CheckDocKind( oprdocs:TRecHandler /*oprchilddoc.rec*/ )
  return (oprdocs.rec.DocKind == DLDOC_MEMORIALORDER);
END;

//------------------------------------------------------------------------------
// Макрос шага
//------------------------------------------------------------------------------
MACRO ExecuteStep( doc, paymDoc, DocKind:integer, ID_Operation:integer, ID_Step:integer )

  var obj_PrimDoc:BuyCurOrder_FirstDoc = BuyCurOrder_FirstDoc( PaymentObj.PaymentID );

  //находим предыдущий шаг
  var Prev_Step:integer = 0;
  var stat     :bool    = Opr_GetStepByKindAction( ID_Operation, 104, @ID_Step );

  //находим документы, порожденные на предыдущем шаге
  var ChildDocList:TArray;
  if( stat )
    ChildDocList = filter( OprGetChildDocs( ID_Operation, Prev_Step, true ), @CheckDocKind );
    if( ChildDocList.Size == 0 )
      msgbox("Не найден мемориальный ордер по депонированию средств, созданный на шаге \"Депонирование\"");
      stat = false;
    end;
  end;

  //проверяем состояние документов, порожденных на предыдущем шаге
  var Action:integer;
  if( stat )
    Action = reduce( ChildDocList, @CheckChildDoc, PMBC_ACTION_OK );
    if( ( Action == PMBC_ACTION_STOP  ) OR
        ( Action == PMBC_ACTION_ERROR ) )
      stat = false;
    end;
  end;

  if( not stat )
    return 1;
  end;

  var BcOrder:object  = GenObject( "RsbBuyCurrencyOrder", PaymentObj.DocumentID );
  var FD:BuyCurOrder_FirstDoc = BuyCurOrder_FirstDoc(PaymentObj.DocumentID);
  var paymtrMulty:object = RsbAccTransaction();//PaymentObj.MakeTransaction();
  var paymtr1:object     = RsbAccTransaction();//PaymentObj.MakeTransaction();
  var paymtr2:object     = RsbAccTransaction();//PaymentObj.MakeTransaction();

  var Amount = 0;

  if( (paymtrMulty == NULL) OR (paymtr1 == NULL) OR (paymtr2 == NULL) )
    MsgBox("Ошибка при создании проводки по платежу");
    return 1;
  end;

  // биржевая заявка
  var psbcexch:TExchangeClaimRec = TExchangeClaimRec( BcOrder.RequestID );
  if( not psbcexch.get() )
    msgbox("Отсутствует биржевая заявка");
    return 1;
  end;

  if( BcOrder.BankFundsAmount > 0 ) // проводки по закрытию требований/обязательств

    // Все те общие значения, которые можно выделить для разных проводок

    // мультивалютная проводка
    paymtrMulty.Chapter         = 1;                                            
    paymtrMulty.Date_Carry      = {curdate};
    paymtrMulty.Number_Pack     = PaymentObj.NumberPack;
    paymtrMulty.Numb_Document   = PaymentObj.Number;
    paymtrMulty.ResultCarry     = 1;
    paymtrMulty.Kind_Oper       = " 1";
    paymtrMulty.Shifr_Oper      = "09";
    paymtrMulty.Ground          = BC_KindOrderName(BcOrder.BCOrdKind) + " № " + PaymentObj.Number + " от " + PaymentObj.Date + ". Закрытие требований /обязательств.";
    paymtrMulty.Department      = PaymentObj.Department;
    paymtrMulty.PrimaryDoc      = obj_PrimDoc;

    // Проводка
    paymtr1.Chapter         = 1;                                            
    paymtr1.Date_Carry      = {curdate};
    paymtr1.Number_Pack     = PaymentObj.NumberPack;
    paymtr1.Numb_Document   = PaymentObj.Number;
    paymtr1.ResultCarry     = 1;
    paymtr1.Kind_Oper       = " 1";
    paymtr1.Shifr_Oper      = "09";
    paymtr1.Ground          = BC_KindOrderName(BcOrder.BCOrdKind) + " № " + PaymentObj.Number + " от " + PaymentObj.Date + ". Закрытие требований /обязательств.";
    paymtr1.Department      = PaymentObj.Department;

    // Проводка
    paymtr2.Chapter         = 1;                                            
    paymtr2.Date_Carry      = {curdate};
    paymtr2.Number_Pack     = PaymentObj.NumberPack;
    paymtr2.Numb_Document   = PaymentObj.Number;
    paymtr2.ResultCarry     = 1;
    paymtr2.Kind_Oper       = " 1";
    paymtr2.Shifr_Oper      = "09";
    paymtr2.Ground          = BC_KindOrderName(BcOrder.BCOrdKind) + " № " + PaymentObj.Number + " от " + PaymentObj.Date + ". Закрытие требований /обязательств.";
    paymtr2.Department      = PaymentObj.Department;

    if( BcOrder.BCOrdKind == PSBCKIND_BUY  ) // покупка валюты

        Amount = ConvertSum( BcOrder.BankFundsAmount, psbcexch.rec.Rate, psbcexch.rec.RateScale, psbcexch.rec.RatePoint, psbcexch.rec.RateInv );

        // Сформировать мультивалютную проводку
        paymtrMulty.FIIDPayer       = 0;
        paymtrMulty.FIIDReceiver    = psbcexch.rec.FIID;
        paymtrMulty.SumPayer        = Amount;
        paymtrMulty.SumReceiver     = BcOrder.BankFundsAmount;
        paymtrMulty.AccountPayer    = FD.FindAndOpenAccount( "-СчетКонвКл", 0, {curdate}, FIROLE_FICOM );
        paymtrMulty.AccountReceiver = FD.FindAndOpenAccount( "+СчетКонвКл", 0, {curdate}, FIROLE_EXCHFI );
        paymtrMulty.PrimaryDoc      = obj_PrimDoc;
        if( not paymtrMulty.Carry )
          MsgBox("Ошибка при актуализации платежа");
          return 1;
        end;  

        // Проводка
        paymtr1.AccountPayer    = FD.FindAndOpenAccount( "СчетДепонКл", 0, {curdate}, FIROLE_FICOM );
        paymtr1.AccountReceiver = FD.FindAndOpenAccount( "-СчетКонвКл", 0, {curdate}, FIROLE_FICOM );
        paymtr1.FIID            = 0;
        paymtr1.Sum             = Amount;
        if( not paymtr1.Carry )
          MsgBox("Ошибка при актуализации платежа");
          return 1;
        end;  

        // Проводка
        paymtr2.AccountPayer    = FD.FindAndOpenAccount( "+СчетКонвКл", 0, {curdate}, FIROLE_EXCHFI );
        paymtr2.AccountReceiver = FD.FindAndOpenAccount( "СчетДепонКл", 0, {curdate}, FIROLE_EXCHFI );
        paymtr2.FIID            = BcOrder.ExchangeFIID;
        paymtr2.Sum             = BcOrder.BankFundsAmount;
        if( not paymtr2.Carry )
          MsgBox("Ошибка при актуализации платежа");
          return 1;
        end;  

    elif( BcOrder.BCOrdKind == PSBCKIND_PAY  ) // продажа валюты

        Amount = ConvertSum( BcOrder.BankFundsAmount, psbcexch.rec.Rate, psbcexch.rec.RateScale, psbcexch.rec.RatePoint, psbcexch.rec.RateInv );

        // Сформировать мультивалютную проводку
        paymtrMulty.FIIDPayer       = psbcexch.rec.FIID;
        paymtrMulty.FIIDReceiver    = 0;
        paymtrMulty.SumPayer        = BcOrder.BankFundsAmount;
        paymtrMulty.SumReceiver     = Amount;
        paymtrMulty.AccountPayer    = FD.FindAndOpenAccount( "-СчетКонвКл", 0, {curdate}, FIROLE_EXCHFI );
        paymtrMulty.AccountReceiver = FD.FindAndOpenAccount( "+СчетКонвКл", 0, {curdate}, FIROLE_FIREQ );
        paymtrMulty.PrimaryDoc      = obj_PrimDoc;
        if( not paymtrMulty.Carry )
          MsgBox("Ошибка при актуализации платежа");
          return 1;
        end;  
    
        // Проводка
        paymtr1.AccountPayer    = FD.FindAndOpenAccount( "СчетДепонКл", 0, {curdate}, FIROLE_EXCHFI );
        paymtr1.AccountReceiver = FD.FindAndOpenAccount( "-СчетКонвКл", 0, {curdate}, FIROLE_EXCHFI );
        paymtr1.FIID            = psbcexch.rec.FIID;
        paymtr1.Sum             = BcOrder.BankFundsAmount;
        if( not paymtr1.Carry )
          MsgBox("Ошибка при актуализации платежа");
          return 1;
        end;  

        // Проводка
        paymtr2.AccountPayer    = FD.FindAndOpenAccount( "+СчетКонвКл", 0, {curdate}, FIROLE_FIREQ );
        paymtr2.AccountReceiver = FD.FindAndOpenAccount( "СчетДепонКл", 0, {curdate}, FIROLE_FIREQ );
        paymtr2.FIID            = 0;
        paymtr2.Sum             = Amount;
        if( not paymtr2.Carry )
          MsgBox("Ошибка при актуализации платежа");
          return 1;
        end;  
    
    elif( BcOrder.BCOrdKind == PSBCKIND_CONV ) // конверсия валюты
      if( BcOrder.ConvOper == KINDOPCONV_BUY ) // покупка

        Amount = ConvertSum( BcOrder.BankFundsAmount, psbcexch.rec.Rate, psbcexch.rec.RateScale, psbcexch.rec.RatePoint, psbcexch.rec.RateInv );

        // Сформировать мультивалютную проводку
        paymtrMulty.FIIDPayer       = psbcexch.rec.ContrFIID;
        paymtrMulty.FIIDReceiver    = psbcexch.rec.FIID;
        paymtrMulty.SumPayer        = Amount;
        paymtrMulty.SumReceiver     = BcOrder.BankFundsAmount;
        paymtrMulty.AccountPayer    = FD.FindAndOpenAccount( "-СчетКонвКл", 0, {curdate}, FIROLE_FICOM );
        paymtrMulty.AccountReceiver = FD.FindAndOpenAccount( "+СчетКонвКл", 0, {curdate}, FIROLE_FIREQ );
        paymtrMulty.PrimaryDoc      = obj_PrimDoc;
        if( not paymtrMulty.Carry )
          MsgBox("Ошибка при актуализации платежа");
          return 1;
        end;  

        // Проводка
        paymtr1.AccountPayer    = FD.FindAndOpenAccount( "СчетДепонКл", 0, {curdate}, FIROLE_FICOM );
        paymtr1.AccountReceiver = FD.FindAndOpenAccount( "-СчетКонвКл", 0, {curdate}, FIROLE_FICOM );
        paymtr1.FIID            = psbcexch.rec.ContrFIID;
        paymtr1.Sum             = Amount;
        if( not paymtr1.Carry )
          MsgBox("Ошибка при актуализации платежа");
          return 1;
        end;  

        // Проводка
        paymtr2.AccountPayer    = FD.FindAndOpenAccount( "+СчетКонвКл", 0, {curdate}, FIROLE_FIREQ );
        paymtr2.AccountReceiver = FD.FindAndOpenAccount( "СчетДепонКл", 0, {curdate}, FIROLE_FIREQ );
        paymtr2.FIID            = psbcexch.rec.FIID;
        paymtr2.Sum             = BcOrder.BankFundsAmount;
        if( not paymtr2.Carry )
          MsgBox("Ошибка при актуализации платежа");
          return 1;
        end;  

      elif( BcOrder.ConvOper == KINDOPCONV_PAY ) // продажа

        Amount = ConvertSum( BcOrder.BankFundsAmount, psbcexch.rec.Rate, psbcexch.rec.RateScale, psbcexch.rec.RatePoint, psbcexch.rec.RateInv );

        // Сформировать мультивалютную проводку
        paymtrMulty.FIIDPayer       = psbcexch.rec.FIID;
        paymtrMulty.FIIDReceiver    = psbcexch.rec.ContrFIID;
        paymtrMulty.SumPayer        = BcOrder.BankFundsAmount;
        paymtrMulty.SumReceiver     = Amount;
        paymtrMulty.AccountPayer    = FD.FindAndOpenAccount( "-СчетКонвКл", 0, {curdate}, FIROLE_FICOM );
        paymtrMulty.AccountReceiver = FD.FindAndOpenAccount( "+СчетКонвКл", 0, {curdate}, FIROLE_FIREQ );
        paymtrMulty.PrimaryDoc      = obj_PrimDoc;
        if( not paymtrMulty.Carry )
          MsgBox("Ошибка при актуализации платежа");
          return 1;
        end;  

        // Проводка
        paymtr1.AccountPayer    = FD.FindAndOpenAccount( "СчетДепонКл", 0, {curdate}, FIROLE_FICOM );
        paymtr1.AccountReceiver = FD.FindAndOpenAccount( "-СчетКонвКл", 0, {curdate}, FIROLE_FICOM );
        paymtr1.FIID            = psbcexch.rec.FIID;
        paymtr1.Sum             = BcOrder.BankFundsAmount;
        if( not paymtr1.Carry )
          MsgBox("Ошибка при актуализации платежа");
          return 1;
        end;  

        // Проводка
        paymtr2.AccountPayer    = FD.FindAndOpenAccount( "+СчетКонвКл", 0, {curdate}, FIROLE_FIREQ );
        paymtr2.AccountReceiver = FD.FindAndOpenAccount( "СчетДепонКл", 0, {curdate}, FIROLE_FIREQ );
        paymtr2.FIID            = psbcexch.rec.ContrFIID;
        paymtr2.Sum             = Amount;
        if( not paymtr2.Carry )
          MsgBox("Ошибка при актуализации платежа");
          return 1;
        end;  

      end;
    end;
  end;

  // проводки по закрытию требований/обязательств
  var paymtr:object  = RsbAccTransaction();//PaymentObj.MakeTransaction();
  var paymtr3:object = RsbAccTransaction();//PaymentObj.MakeTransaction();
  var paymtr4:object = RsbAccTransaction();//PaymentObj.MakeTransaction();

  if( (paymtr == NULL) OR (paymtr3 == NULL) OR (paymtr4 == NULL) )
    MsgBox("Ошибка при создании проводки по платежу");
    return 1;
  end;

  if( BcOrder.Amount > 0 )
    if( (BcOrder.BCOrdKind == PSBCKIND_BUY) OR ((BcOrder.BCOrdKind == PSBCKIND_CONV) AND (BcOrder.ConvOper == KINDOPCONV_BUY)) )

      // выполнить проводку
      paymtr3.Chapter         = 1;                                            
      paymtr3.Date_Carry      = {curdate};
      paymtr3.Number_Pack     = PaymentObj.NumberPack;
      paymtr3.Numb_Document   = PaymentObj.Number;
      paymtr3.ResultCarry     = 1;
      paymtr3.Kind_Oper       = " 1";
      paymtr3.Shifr_Oper      = "09";
      paymtr3.Ground          = BC_KindOrderName(BcOrder.BCOrdKind) + " № " + PaymentObj.Number + " от " + PaymentObj.Date + ". Закрытие требований /обязательств.";
      paymtr3.Department      = PaymentObj.Department;
      paymtr3.AccountPayer    = FD.FindAndOpenAccount( "СчетДепонКл", 0, {curdate}, FIROLE_FICOM );
      paymtr3.AccountReceiver = FD.FindAndOpenAccount( "+Расчеты", 0, {curdate}, FIROLE_FICOM );
      paymtr3.FIID            = psbcexch.rec.ContrFIID;
      paymtr3.Sum             = BcOrder.Amount;
      if( not paymtr3.Carry )
        MsgBox("Ошибка при актуализации платежа");
        return 1;
      end;  

      // выполнить проводку
      paymtr4.Chapter         = 1;                                            
      paymtr4.Date_Carry      = {curdate};
      paymtr4.Number_Pack     = PaymentObj.NumberPack;
      paymtr4.Numb_Document   = PaymentObj.Number;
      paymtr4.ResultCarry     = 1;
      paymtr4.Kind_Oper       = " 1";
      paymtr4.Shifr_Oper      = "09";
      paymtr4.Ground          = BC_KindOrderName(BcOrder.BCOrdKind) + " № " + PaymentObj.Number + " от " + PaymentObj.Date + ". Закрытие требований /обязательств.";
      paymtr4.Department      = PaymentObj.Department;
      paymtr4.AccountPayer    = FD.FindAndOpenAccount( "-Расчеты", 0, {curdate}, FIROLE_FIREQ );
      paymtr4.AccountReceiver = FD.FindAndOpenAccount( "СчетДепонКл", 0, {curdate}, FIROLE_FIREQ );
      paymtr4.FIID            = psbcexch.rec.FIID;
      paymtr4.Sum             = ConvertSum( BcOrder.Amount, psbcexch.rec.Rate, psbcexch.rec.RateScale, psbcexch.rec.RatePoint, psbcexch.rec.RateInv );
      if( not paymtr4.Carry )
        MsgBox("Ошибка при актуализации платежа");
        return 1;
      end;  

    elif( (BcOrder.BCOrdKind == PSBCKIND_PAY) OR ((BcOrder.BCOrdKind == PSBCKIND_CONV) AND (BcOrder.ConvOper == KINDOPCONV_PAY)) )

      // выполнить проводку
      paymtr3.Chapter         = 1;                                            
      paymtr3.Date_Carry      = {curdate};
      paymtr3.Number_Pack     = PaymentObj.NumberPack;
      paymtr3.Numb_Document   = PaymentObj.Number;
      paymtr3.ResultCarry     = 1;
      paymtr3.Kind_Oper       = " 1";
      paymtr3.Shifr_Oper      = "09";
      paymtr3.Ground          = BC_KindOrderName(BcOrder.BCOrdKind) + " № " + PaymentObj.Number + " от " + PaymentObj.Date + ". Закрытие требований /обязательств.";
      paymtr3.Department      = PaymentObj.Department;
      paymtr3.AccountPayer    = FD.FindAndOpenAccount( "СчетДепонКл", 0, {curdate}, FIROLE_FICOM );
      paymtr3.AccountReceiver = FD.FindAndOpenAccount( "+Расчеты", 0, {curdate}, FIROLE_FICOM );
      paymtr3.FIID            = psbcexch.rec.FIID;
      paymtr3.Sum             = BcOrder.Amount;
      if( not paymtr3.Carry )
        MsgBox("Ошибка при актуализации платежа");
        return 1;
      end;  

      // выполнить проводку
      paymtr4.Chapter         = 1;                                            
      paymtr4.Date_Carry      = {curdate};
      paymtr4.Number_Pack     = PaymentObj.NumberPack;
      paymtr4.Numb_Document   = PaymentObj.Number;
      paymtr4.ResultCarry     = 1;
      paymtr4.Kind_Oper       = " 1";
      paymtr4.Shifr_Oper      = "09";
      paymtr4.Ground          = BC_KindOrderName(BcOrder.BCOrdKind) + " № " + PaymentObj.Number + " от " + PaymentObj.Date + ". Закрытие требований /обязательств.";
      paymtr4.Department      = PaymentObj.Department;
      paymtr4.AccountPayer    = FD.FindAndOpenAccount( "-Расчеты", 0, {curdate}, FIROLE_FIREQ );
      paymtr4.AccountReceiver = FD.FindAndOpenAccount( "СчетДепонКл", 0, {curdate}, FIROLE_FIREQ );
      paymtr4.FIID            = psbcexch.rec.ContrFIID;
      paymtr4.Sum             = ConvertSum( BcOrder.Amount, psbcexch.rec.Rate, psbcexch.rec.RateScale, psbcexch.rec.RatePoint, psbcexch.rec.RateInv );
      if( not paymtr4.Carry )
        MsgBox("Ошибка при актуализации платежа");
        return 1;
      end;  

    end;     
  end;

  if( (BcOrder.BCOrdKind == PSBCKIND_BUY) AND (psbcexch.rec.FIID != PaymentObj.ReceiverFIID) )
    
    // выполнить мультивалютную проводку по конвертации купленной валюты
    paymtr.Chapter         = 1;                                            
    paymtr.Date_Carry      = {curdate};
    paymtr.Number_Pack     = PaymentObj.NumberPack;
    paymtr.Numb_Document   = PaymentObj.Number;
    paymtr.ResultCarry     = 1;
    paymtr.Kind_Oper       = " 1";
    paymtr.Shifr_Oper      = "09";
    paymtr.Ground          = BC_KindOrderName(BcOrder.BCOrdKind) + " № " + PaymentObj.Number + " от " + PaymentObj.Date + ". Конвертация средств в валюту счета получателя.";
    paymtr.Department      = PaymentObj.Department;
    paymtr.FIIDPayer       = psbcexch.rec.FIID;
    paymtr.FIIDReceiver    = PaymentObj.ReceiverFIID;
    paymtr.SumPayer        = (BcOrder.Amount + BcOrder.BankFundsAmount);
    paymtr.SumReceiver     = ConvertSum( (BcOrder.Amount + BcOrder.BankFundsAmount), BcOrder.Rate, BcOrder.RateScale, BcOrder.RatePoint, BcOrder.RateInv );
    paymtr.AccountPayer    = FD.FindAndOpenAccount( "СчетДепонКл", 0, {curdate}, FIROLE_EXCHFI );
    paymtr.AccountReceiver = FD.FindAndOpenAccount( "СчетДепонКл", 0, {curdate}, FIROLE_FIREQ );
    if( not paymtr.Carry )
      MsgBox("Ошибка при актуализации платежа");
      return 1;
    end;  
  end;

  var СуммаВозврата = 0, СумДт = 0, СумИсп = 0, СумСоб = 0;

  // Возврат неиспользованного депонирования
  if( (BcOrder.BCOrdKind == PSBCKIND_BUY) OR ((BcOrder.BCOrdKind == PSBCKIND_CONV) AND (BcOrder.ConvOper == KINDOPCONV_BUY)) )
    СумДт = PaymentObj.PayerAmount;
    СумИсп = ConvertSum( BcOrder.Amount, psbcexch.rec.Rate, psbcexch.rec.RateScale, psbcexch.rec.RatePoint, psbcexch.rec.RateInv );
    СумСоб = ConvertSum( BcOrder.BankFundsAmount, psbcexch.rec.Rate, psbcexch.rec.RateScale, psbcexch.rec.RatePoint, psbcexch.rec.RateInv );

    СуммаВозврата = (СумДт - СумИсп - СумСоб);
  elif( (BcOrder.BCOrdKind == PSBCKIND_PAY) OR ((BcOrder.BCOrdKind == PSBCKIND_CONV) AND (BcOrder.ConvOper == KINDOPCONV_PAY)) )
    СуммаВозврата = (PaymentObj.PayerAmount - BcOrder.Amount - BcOrder.BankFundsAmount);
  end;

  if( СуммаВозврата > 0 )
    CreateMemorial( BcOrder, FD.FindAndOpenAccount( "СчетДепонКл", 0, {curdate}, FIROLE_FICOM ), СуммаВозврата );
  end;
  
  BcOrder.DepositRest = СуммаВозврата;

  PaymentObj.FreeReserve( PaymentObj.PayerAccount, PaymentObj.Chapter, PaymentObj.PayerFIID );

  return 0;
END;


//Jushmanov 2014-02-20 C-19151
macro PostStepAction( message,  /* данный параметр может принимать следующие       */
                                /* значения: 1 - выполнение шага; 2 - откат шага;  */
                      errTrn,   /* статус выполнения шага. Если параметр не равен  */
                                /* 0, то произошла ошибка                          */
                      FirstDoc, /* указатель на первичный документ                 */
                      ID_Oper,  /* внутренний идентификатор операции               */
                      Num_Step, /* Номер шага операции (из настроек)               */
                      KindOper, /* номер вида операции                             */
                      KindDoc,  /* номер вида первичного документа                 */
                      KindStep, /* вид шага операции                               */
                      ID_Step ) /* внутренний идентификатор шага операции          */

private var query;

    if(( message == OP_EXECUTE_STEP ) and (errTrn == 0) and (IsOprMultiExec))
        if ((valtype(ID_Oper) != V_INTEGER) and (valtype(ID_Oper) != V_STRING)) ID_Oper = 0; end;
        if ((valtype(ID_Step) != V_INTEGER) and (valtype(id_Step) != V_STRING)) ID_Step = 0; end;

        query = "UPDATE usr_doprstep_robot_dbt SET t_is_robot_step = chr(88)" +
                " WHERE t_id_operation = " + ID_Oper + " AND t_id_step = " + ID_Step;
        ExecSQL(query, null, false);
    end;

  return 0;
end;