/************************************************************************/
/*         Автоматизированная банковская система RS-Bank                */
/*                 Copyright (c) R-Style Software Lab 2002              */
/*  Имя файла      : prreqopv.mac                                       */
/*  Описание       : Печать заявлений на открытие счета.                */
/*  Программист    : Дроздов И.Е.                                       */
/*  Создан         : 18.10.04                                           */
/*  Изменен        : zmp 06.03.2013 I-00335331-2                        */
/************************************************************************/

IMPORT globals, PTInter, likepy, MesInter, reqinter;
import rslx, rcw, prpm, gnd120p;
import ActiveX, RSForms, WORDINTF;
import "fg_Life_parm.mac";
private Const fdBank = fg_life_subject({OurBank});

PRIVATE VAR 
,SeriesAndNum
,PrintVKuda
,NameGNI     
,CodeGNI     
,IndexGNI    
,AdressGNI   
,SubPrintAdr
,BankName    
,BankIndex   
,BankAdress  
,BankRegNom  
,BankNumber  
,BankBIC     
,BankINN     
,BankKPP     
,BankOGRN    
,ClientName  
,GosRegSeries
,GosRegNumber
,UchSeries   
,UchNumber   
,ClientINN   
,ClientKPP   
,ClientOGRN  
,Zakl        
,Rast_cl
,Rast_bnk
,Rast_sud        
,DogAccDataD 
,DogAccDataM 
,DogAccDataY 
,DogAccNumber
,OpenAcc     
,CloseAcc    
,NatCurAcc   
,ValCurAcc   
,KindAcc     
,Acc_DataD   
,Acc_DataM   
,Acc_DataY   
,ReqAccount     
,PostBank    
,FIOBank     
,Phon        
,DataD       
,DataM       
,DataY       
,OutSideDateD
,OutSideDateM
,OutSideDateY;
     
PRIVATE FILE   reg(objrgdoc);   
PRIVATE FILE   sc(sfcontr);
PRIVATE FILE   adr (adress);

//DAI Актуально только для работы с RS-Forms для вывода в Excel не используется
class (TForm)TFrame2(owner:object, name:string) 
   InitTForm(owner,name);
   debugbreak;

   var FormKND          = TControl( this, "FormKND" );
   var SeriesAndNum_1   = TControl( this, "SeriesAndNum_1" );
   var NameGNI_1        = TControl( this, "NameGNI_1" );
   var Code_1           = TControl( this, "Code_1" );
   var GNIIndex_1       = TControl( this, "GNIIndex_1" );
   var AdresGNI_1       = TControl( this, "AdresGNI_1" );
   var NameBank_1       = TControl( this, "NameBank_1" );
   var BankIndex_1      = TControl( this, "BankIndex_1" );
   var AdresBank_1      = TControl( this, "AdresBank_1" );
   var BankRegNom_1     = TControl( this, "BankRegNom_1" );
   var BankNumber_1     = TControl( this, "BankNumber_1" );
   var BankBIC_1        = TControl( this, "BankBIC_1" );
   var BankINN_1        = TControl( this, "BankINN_1" );
   var BankKPP_1        = TControl( this, "BankKPP_1" );
   var BankOGRN_1       = TControl( this, "BankOGRN_1" );
   var NameClient_1     = TControl( this, "NameClient_1" );
   var GosRegSer_1      = TControl( this, "GosRegSer_1" );
   var GosRegNum_1      = TControl( this, "GosRegNum_1" );
   var GosUchSer_1      = TControl( this, "GosUchSer_1" );
   var GosUchNum_1      = TControl( this, "GosUchNum_1" );
   var ClientINN_1      = TControl( this, "ClientINN_1" );
   var ClientKPP_1      = TControl( this, "ClientKPP_1" );
   var ClientOGRN_1     = TControl( this, "ClientOGRN_1" );
   var Zakl_1           = TControl( this, "Zakl_1" );
   var Rast_1_cl        = TControl( this, "Rast_1_cl" );
   var Rast_1_bnk       = TControl( this, "Rast_1_bnk" );
   var Rast_1_sud       = TControl( this, "Rast_1_sud" );
   var DDog_1           = TControl( this, "DDog_1" );
   var MDog_1           = TControl( this, "MDog_1" );
   var YDog_1           = TControl( this, "YDog_1" );
   var Open_1           = TControl( this, "Open_1" );
   var Close_1          = TControl( this, "Close_1" );
   var NatCur_1         = TControl( this, "NatCur_1" );
   var ValCur_1         = TControl( this, "ValCur_1" );
   var KindAcc_1        = TControl( this, "KindAcc_1" );
   var DOpen_1          = TControl( this, "DOpen_1" );
   var MOpen_1          = TControl( this, "MOpen_1" );
   var YOpen_1          = TControl( this, "YOpen_1" );
   var Acc_1            = TControl( this, "Acc_1" );
   var Post_1           = TControl( this, "Post_1" );
   var FIO_1            = TControl( this, "FIO_1" );
   var D_1              = TControl( this, "D_1" );
   var M_1              = TControl( this, "M_1" );
   var Y_1              = TControl( this, "Y_1" );
   var Phon_1           = TControl( this, "Phone_1" );
   var SeriesAndNum_2   = TControl( this, "SeriesAndNum_2" );
   var NameGNI_2        = TControl( this, "NameGNI_2" );
   var Code_2           = TControl( this, "Code_2" );
   var DOtpr_1          = TControl( this, "DOtpr_2" );
   var MOtpr_1          = TControl( this, "MOtpr2" );
   var YOtpr_1          = TControl( this, "YOtpr_2" );
   var NameClient_2     = TControl( this, "NameClient_2" );
   var GosRegSer_2      = TControl( this, "GosRegSer_2" );
   var GosRegNum_2      = TControl( this, "GosRegNum_2" );
   var GosUchSer_2      = TControl( this, "GosUchSer_2" );
   var GosUchNum_2      = TControl( this, "GosUchNum_2" );
   var ClientINN_2      = TControl( this, "ClientINN_2" );
   var ClientKPP_2      = TControl( this, "ClientKPP_2" );
   var ClientOGRN_2     = TControl( this, "ClientOGRN_2" );
   var Zakl_2           = TControl( this, "Zakl_2" );
   var Rast_2_cl        = TControl( this, "Rast_2_cl" );
   var Rast_2_bnk       = TControl( this, "Rast_2_bnk" );
   var Rast_2_sud       = TControl( this, "Rast_2_sud" );
   var DDog_2           = TControl( this, "DDog_2" );
   var MDog_2           = TControl( this, "MDog_2" );
   var YDog_2           = TControl( this, "YDog_2" );
   var Num_2            = TControl( this, "Num_2" );
   var Num_1            = TControl( this, "Num_1" );
   var Open_2           = TControl( this, "Open_2" );
   var Close_2          = TControl( this, "Close_2" );
   var NatCur_2         = TControl( this, "NatCur_2" );
   var ValCur_2         = TControl( this, "ValCur_2" );
   var KindAcc_2        = TControl( this, "KindAcc_11" );
   var DOpen_2          = TControl( this, "DOpen_2" );
   var MOpen_2          = TControl( this, "MOpen_2" );
   var YOpen_2          = TControl( this, "YOpen_2" );
   var Acc_2            = TControl( this, "Acc_2" );
   var Post_2           = TControl( this, "Post_11" );
   var FIO_2            = TControl( this, "FIO_11" );
   var D_2              = TControl( this, "D_2" );
   var M_2              = TControl( this, "M_2" );
   var Y_2              = TControl( this, "Y_2" );
   var Phon_2           = TControl( this, "Phone_2" );
end;


//DAI Актуально только для работы с RS-Forms для вывода в Excel не используется
class (TRollForm)TOP(type)

   InitTRollForm();
   // Tikh Для фондов печатаем другие формы
   //т.к. срочно, то пока не разложили то так/ После обновления библиотеки сделать только    setTemplate("bnkforms.lbr", "OPCLACC");




var outl, Fulloutputl;

   GetRegistryValue("PS\\REQOPENACC\\ПАРАМЕТРЫ ФОНДОВ\\ПУТЬ К ШАБЛОНУ",2,outl);
   Fulloutputl = FindPath("bnkformso.lbr", outl, false);
   if (not Fulloutputl)
      msgbox("Не найдена LBR");
      exit();
   end;
   

   if (type == 2)
   setTemplate(Fulloutputl, "P0000001");
   elif (type == 3)
   setTemplate(Fulloutputl, "P0000002");
   else
   setTemplate(Fulloutputl, "OPCLACC");
   end;
  
   
   var l_line;
   
   var F = TFrame2(this, "Frame1");
   
   addHandler(EV_ON_LOAD, R2M(this, "OnLoad"));

   macro PutTableOpen(table:object, line:string, num:integer)
     var i:integer;
     i = 0;
     table.DoInit();
     var l = table.AddLine("Row");
     while((i<StrLen(line)) and (i<num))
       l.Cell(string("Column",i+1)).Value = SubStr(line,i+1,1);
       i = i+1;
     end;
   end;

   //заполнение формы
   MACRO ЗаполнитьФормуОткрытия()

        debugbreak;
         PutTableOpen(F.FormKND, "1114301", 7);
         PutTableOpen(F.SeriesAndNum_1, SeriesAndNum, 20 );
         F.NameGNI_1.Text = NameGNI;     
         PutTableOpen(F.Code_1, CodeGNI, 4 );        
         PutTableOpen(F.GNIIndex_1, IndexGNI, 6 );
         F.AdresGNI_1.Text =  AdressGNI;
         F.NameBank_1.Text = BankName;
         PutTableOpen(F.BankIndex_1, BankIndex, 6 );
         F.AdresBank_1.Text = BankAdress;   
         PutTableOpen(F.BankRegNom_1, BankRegNom, 4 );  
         PutTableOpen(F.BankNumber_1, BankNumber, 4 );  
         PutTableOpen(F.BankBIC_1, BankBIC, 9 );     
         PutTableOpen(F.BankINN_1, BankINN, 10 );     
         PutTableOpen(F.BankKPP_1, BankKPP, 9 );     
         PutTableOpen(F.BankOGRN_1, BankOGRN, 13 );
         F.NameClient_1.Text = ClientName;
         PutTableOpen(F.GosRegSer_1 , GosRegSeries, 2 );
         PutTableOpen(F.GosRegNum_1 , GosRegNumber, 9 );
         PutTableOpen(F.GosUchSer_1 , UchSeries, 2 );
         PutTableOpen(F.GosUchNum_1 , UchNumber, 9 );   
         PutTableOpen(F.ClientINN_1 , ClientINN, 12 );   
         PutTableOpen(F.ClientKPP_1 , ClientKPP, 9 );   
         PutTableOpen(F.ClientOGRN_1, ClientOGRN, 15 );  
         PutTableOpen(F.Zakl_1, Zakl, 1 );        
         PutTableOpen(F.Rast_1_cl , Rast_cl , 1 );
         PutTableOpen(F.Rast_1_bnk, Rast_bnk, 1 );
         PutTableOpen(F.Rast_1_sud, Rast_sud, 1 );
         PutTableOpen(F.DDog_1, DogAccDataD, 2 ); 
         PutTableOpen(F.MDog_1, DogAccDataM, 2 );
         PutTableOpen(F.YDog_1, DogAccDataY, 4 );
         PutTableOpen(F.Open_1, OpenAcc, 1 );
         PutTableOpen(F.Close_1, CloseAcc, 1 );       
         PutTableOpen(F.NatCur_1, NatCurAcc, 1 );     
         PutTableOpen(F.ValCur_1, ValCurAcc, 1 );
         F.KindAcc_1.Text =  KindAcc;
         PutTableOpen(F.DOpen_1,  Acc_DataD, 2 );      
         PutTableOpen(F.MOpen_1,  Acc_DataM, 2 );      
         PutTableOpen(F.YOpen_1,  Acc_DataY, 4 );      
         PutTableOpen(F.Acc_1, ReqAccount, 20 );         
         F.Post_1.Text = PostBank;
         F.FIO_1.Text  = FIOBank;
         PutTableOpen(F.D_1,  DataD, 2 );      
         PutTableOpen(F.M_1,  DataM, 2 );      
         PutTableOpen(F.Y_1,  DataY, 4 );      
         PutTableOpen(F.Phon_1, Phon, 20 );        
         PutTableOpen(F.SeriesAndNum_2, SeriesAndNum, 20 );
         F.NameGNI_2.Text = NameGNI;     
         PutTableOpen(F.Code_2, CodeGNI, 4 );                
         PutTableOpen(F.DOtpr_1,  OutSideDateD, 2 );     
         PutTableOpen(F.MOtpr_1,  OutSideDateM, 2 );     
         PutTableOpen(F.YOtpr_1,  OutSideDateY, 4 );     
         F.NameClient_2.Text = ClientName;  
         PutTableOpen(F.GosRegSer_2  , GosRegSeries, 2 );   
         PutTableOpen(F.GosRegNum_2  , GosRegNumber, 9 );    
         PutTableOpen(F.GosUchSer_2  , UchSeries, 2 );   
         PutTableOpen(F.GosUchNum_2  , UchNumber, 9 );   
         PutTableOpen(F.ClientINN_2  , ClientINN, 12 );  
         PutTableOpen(F.ClientKPP_2  , ClientKPP, 9 );   
         PutTableOpen(F.ClientOGRN_2 , ClientOGRN, 15 ); 
         PutTableOpen(F.Zakl_2, Zakl, 1 );        
         PutTableOpen(F.Rast_2_cl , Rast_cl , 1 );
         PutTableOpen(F.Rast_2_bnk, Rast_bnk, 1 );
         PutTableOpen(F.Rast_2_sud, Rast_sud, 1 );
         PutTableOpen(F.DDog_2, DogAccDataD, 2 ); 
         PutTableOpen(F.MDog_2, DogAccDataM, 2 ); 
         PutTableOpen(F.YDog_2, DogAccDataY, 4 ); 
         PutTableOpen(F.Num_2, DogAccNumber, 20 );         
         PutTableOpen(F.Num_1, DogAccNumber, 20 );         
         PutTableOpen(F.Open_2 , OpenAcc , 1 );         
         PutTableOpen(F.Close_2, CloseAcc, 1 );
         PutTableOpen(F.NatCur_2, NatCurAcc, 1);           
         PutTableOpen(F.ValCur_2, ValCurAcc, 1);
         F.KindAcc_2.Text =  KindAcc;
         PutTableOpen(F.DOpen_2,  Acc_DataD, 2 );      
         PutTableOpen(F.MOpen_2,  Acc_DataM, 2 );      
         PutTableOpen(F.YOpen_2,  Acc_DataY, 4 );      
         PutTableOpen(F.Acc_2, ReqAccount, 20 );                  
//debugbreak;
         F.Post_2.Text = PostBank;
         F.FIO_2.Text  = FIOBank;
         PutTableOpen(F.D_2,  DataD, 2 );           
         PutTableOpen(F.M_2,  DataM, 2 );           
         PutTableOpen(F.Y_2,  DataY, 4 );           
         PutTableOpen(F.Phon_2, Phon, 20 );         
   END;


   macro OnLoad(Sender: Object)
     ЗаполнитьФормуОткрытия();
   end;
end; 


//инициализация переменных пустыми значениями
MACRO ClearVar()
  SeriesAndNum = ""; 
  PrintVKuda   = "";
  NameGNI      = "";
  CodeGNI      = "";
  IndexGNI     = "";
  AdressGNI    = "";
  SubPrintAdr  = "";
  BankName     = "";
  BankIndex    = "";
  BankAdress   = "";
  BankRegNom   = "";
  BankNumber   = "";
  BankBIC      = "";
  BankINN      = "";
  BankKPP      = "";
  BankOGRN     = "";
  ClientName   = "";
  GosRegSeries = ""; 
  GosRegNumber = ""; 
  UchSeries    = "";
  UchNumber    = "";
  ClientINN    = "";
  ClientKPP    = "";
  ClientOGRN   = "";
  Zakl         = "";
  Rast_cl      = "";
  Rast_bnk     = "";
  Rast_sud     = "";
  DogAccDataD  = "";
  DogAccDataM  = "";
  DogAccDataY  = "";
  DogAccNumber = ""; 
  OpenAcc      = "";
  CloseAcc     = "";
  NatCurAcc    = "";
  ValCurAcc    = "";
  KindAcc      = "";
  Acc_DataD    = "";
  Acc_DataM    = "";
  Acc_DataY    = "";
  ReqAccount   = "";
  PostBank     = "";
  FIOBank      = "";
  Phon         = "";
  DataD        = ""; 
  DataM        = "";
  DataY        = "";
  OutSideDateD = "";
  OutSideDateM = "";
  OutSideDateY = "";
END;


PRIVATE MACRO GetRegProp( DK:integer, ID:integer, Series:string, Number:string ):integer

  var select =  " SELECT DOC.T_SERIES, DOC.T_NUMBER"+
                " FROM DOBJRGDOC_DBT DOC"+
                " WHERE DOC.T_OBJECTID     = :ID"+
                "   AND DOC.T_REGDOCKIND   = :DK"+
                "   AND DOC.T_REGPARTYKIND = 7"+
                "   AND DOC.T_ISCLOSED     = CHR(0)";

  var params:TArray = makeArray( SQLParam( "ID", ID ),
                                 SQLParam( "DK", DK ) );

  var rset:RsdRecordset = execSQLselect( select, params, TRUE );

  if( rset and rset.moveNext() )
    SetParm( 2, rset.value(0) );
    SetParm( 3, rset.value(1) );
  end;     

  return 0;

  ONERROR(x)
    MsgBox( x.Message );
    return 1;

END;

MACRO GetGNIName( Code:string, Name:string ):integer

  var select = " SELECT PARTY.T_NAME"+
               " FROM DPARTY_DBT PARTY, DOBJCODE_DBT OBJCODE"+
               " WHERE OBJCODE.T_CODE     = :Code"+
               "   AND OBJCODE.T_CODEKIND = 28"+
               "   AND PARTY.T_PARTYID    = OBJCODE.T_OBJECTID";

  var params:TArray = makeArray( SQLParam( "Code", Code ) );

  var rset:RsdRecordset = execSQLselect( select, params, TRUE );

  if( rset and rset.moveNext() )
    SetParm( 1, rset.value(0) );
  end;     

  return 0;

  ONERROR(x)
    MsgBox( x.Message );
    return 1;
END;

MACRO GetGNIAdress( Code:string, Index:string, Adress:string )

  var select = " SELECT ADRESS.T_POSTINDEX, ADRESS.T_ADRESS"+
               " FROM DADRESS_DBT ADRESS, DOBJCODE_DBT OBJCODE"+
               " WHERE OBJCODE.T_CODE     = :Code"+
               "   AND OBJCODE.T_CODEKIND = 28"+
               "   AND ADRESS.T_PARTYID   = OBJCODE.T_OBJECTID"+
               " ORDER BY DECODE( ADRESS.T_TYPE, 3, 1, 1, 2, 3) ASC";

  var params:TArray = makeArray( SQLParam( "Code", Code ) );

  var rset:RsdRecordset = execSQLselect( select, params, TRUE );

  if( rset and rset.moveNext() )
    SetParm( 1, rset.value(0));
    SetParm( 2, rset.value(1));
  end;     

  return 0;

  ONERROR(x)
    MsgBox( x.Message );
    return 1;

END;

MACRO GetBankName( PartyID, BankName ):integer

  var select = " SELECT DECODE( PARTY_F.T_PARTYID, PARTY_G.T_PARTYID, PARTY_F.T_SHORTNAME,"+
               "                PARTY_G.T_SHORTNAME || ', ' || PARTY_F.T_SHORTNAME ) AS BANKNAME"+
               " FROM DDP_DEP_DBT FILIAL,"+
               "      DPARTY_DBT  PARTY_F,"+
               "      DDP_DEP_DBT GOLOVA,"+
               "      DPARTY_DBT  PARTY_G"+
               " WHERE FILIAL.T_PARTYID    = :PartyID"+
               "   AND PARTY_F.T_PARTYID   = FILIAL.T_PARTYID "+
               "   AND GOLOVA.T_PARENTCODE = 0"+
               "   AND GOLOVA.T_STATUS     = 2"+
               "   AND PARTY_G.T_PARTYID   = GOLOVA.T_PARTYID";

  var params:TArray = makeArray( SQLParam( "PartyID", PartyID ) );

  var rset:RsdRecordset = execSQLselect( select, params, TRUE );

  if( rset and rset.moveNext() )
    SetParm( 1, rset.value(0) );
  end;     

  return 0;

  ONERROR(x)
    MsgBox( x.Message );
    return 1;
END;

MACRO GetBankAdress( PartyID, Index:string, Adress:string )

  var select = " SELECT ADRESS.T_POSTINDEX, ADRESS.T_ADRESS"+
               " FROM DADRESS_DBT ADRESS"+
               " WHERE ADRESS.T_PARTYID = :PartyID"+
               " ORDER BY DECODE( ADRESS.T_TYPE, 3, 1, 1, 2, 3) ASC";

  /* EVG
  var select = "SELECT ADRESS.T_POSTINDEX, ADRESS.T_ADRESS"+
              " FROM DADRESS_DBT ADRESS"+
              " WHERE ADRESS.T_PARTYID = :PartyID"+
              " ORDER BY DECODE( ADRESS.T_TYPE, 3, 1, 1, 2, 3) ASC";
  */
  var params:TArray = makeArray( SQLParam( "PartyID", PartyID ) );

  var rset:RsdRecordset = execSQLselect( select, params, TRUE );

  if( rset and rset.moveNext() )
    SetParm( 1, rset.value(0));
    SetParm( 2, rset.value(1));
  end;     

  return 0;

  ONERROR(x)
    MsgBox( x.Message );
    return 1;

END;

macro GetAccountFromMesID( wlmesid:integer, Account:string, FIID:integer ):integer

  var select = " SELECT DECODE(MESLNK.T_OBJKIND, 450, "+
               "              (SELECT REQ.T_ACCOUNT FROM DREQOPENA_DBT REQ WHERE REQ.T_REQUESTID = MESLNK.T_OBJID ), 451, "+
               "              (SELECT REQ.T_ACCOUNT FROM DREQCLOSA_DBT REQ WHERE REQ.T_REQUESTID = MESLNK.T_OBJID )) AS ACCOUNT,"+
               "        DECODE(MESLNK.T_OBJKIND, 450, "+
               "              (SELECT REQ.T_CODE_CURRENCY FROM DREQOPENA_DBT REQ WHERE REQ.T_REQUESTID = MESLNK.T_OBJID ), 451, "+
               "              (SELECT REQ.T_CODE_CURRENCY FROM DREQCLOSA_DBT REQ WHERE REQ.T_REQUESTID = MESLNK.T_OBJID )) AS CODE_CURRENCY"+
               " FROM DWLMES_DBT MES, DWLMESLNK_DBT MESLNK"+
               " WHERE MES.T_MESID = :WlmesID"+
               "   AND MESLNK.T_MESID = MES.T_MESID"+
               "   AND MESLNK.T_OBJKIND IN ( 450, 451 )";

  var params:TArray = makeArray( SQLParam( "WlmesID", wlmesid ) );

  var rset:RsdRecordset = execSQLselect( select, params, TRUE );

  if( rset and rset.moveNext() )
    SetParm( 1, rset.value(0));
    SetParm( 2, rset.value(1));
  end;     

  return 0;

  ONERROR(x)
    MsgBox( x.Message );
    return 1;
 
end;


macro GetClientName( PartyID:integer, Name:string ):integer

  /*var select =  " SELECT DECODE(PARTY.T_LEGALFORM,"+
                " 2, DECODE( PERSN.T_ISEMPLOYER,"+
                           " 'X', 'Индивидуальный предприниматель ' || PERSN.T_NAME1 ||' '||PERSN.T_NAME2||' '||PERSN.T_NAME3,"+
                           " PERSN.T_NAME1 ||' '||PERSN.T_NAME2||' '||PERSN.T_NAME3 ),"+
                   " PARTY.T_NAME ) AS NAME"+
  " FROM DPARTY_DBT PARTY"+
  " LEFT JOIN DPERSN_DBT PERSN ON PERSN.T_PERSONID = PARTY.T_PARTYID"+
  " WHERE PARTY.T_PARTYID = :PartyID";*/
  //Лавренов переписал формирование наименования клиента, заявка №I-008881 
  //Телешова добавила "Арбитражного управляющего"
  /*var select =  "SELECT DECODE (party.t_legalform,                                                                                          "+
             "  2, DECODE (persn.t_isemployer,                                                                                               "+
             "             'X', DECODE (ctg.t_attrid ,                                                                                       "+
             "                          3, 'Адвокатский кабинет ' || persn.t_name1 || ' ' || persn.t_name2 || ' ' || persn.t_name3,          "+
             "                          2, 'Нотариус ' || persn.t_name1 || ' ' || persn.t_name2 || ' ' || persn.t_name3,                     "+
             "                          4, 'Арбитражный управляющий ' || persn.t_name1 || ' ' || persn.t_name2 || ' ' || persn.t_name3,                     "+
             "                             'Индивидуальный предприниматель ' || persn.t_name1 || ' ' || persn.t_name2 || ' ' || persn.t_name3 ),"+ 
             "                persn.t_name1 || ' ' || persn.t_name2 || ' ' || persn.t_name3),                                                   "+
             "            party.t_name ) AS NAME                                                                                                "+
             /* EVG 09/06/2011 */
             "            , party.t_name AS ptName "+
             "   FROM dparty_dbt party LEFT JOIN dpersn_dbt persn                                                                               "+
             "    ON persn.t_personid = party.t_partyid                                                                                         "+
             "    LEFT JOIN DOBJATCOR_DBT ctg                                                                                                   "+
             "    ON ctg.t_object = lpad(party.t_partyid,10,0) AND (CTG.T_GROUPID = 16 and ctg.t_objecttype = 3 and ctg.t_attrid in (2, 3, 4) )    "+
             "   WHERE party.t_partyid = :PartyID";*/                                                                                            
    // zmp 31.07.2014 R-422616-2                                                                                                                                          
    var select = " SELECT   DECODE (                                                                                                   "+
                 " party.t_legalform,                                                                                                  "+
                 " 2,                                                                                                                  "+
                 " DECODE (                                                                                                            "+
                 " persn.t_isemployer,                                                                                                 "+
                 " 'X',                                                                                                                "+
                 " DECODE (UPPER (ATR.T_NAME), 'АДВОКАТ', ' Адвокатский кабинет', null, 'Индивидуальный предприниматель',  ATR.T_NAME) "+
                 " || ' '                                                                                                              "+
                 " || persn.t_name1                                                                                                    "+
                 " || ' '                                                                                                              "+
                 " || persn.t_name2                                                                                                    "+
                 " || ' '                                                                                                              "+
                 " || persn.t_name3,                                                                                                   "+
                 "    persn.t_name1 || ' ' || persn.t_name2 || ' ' || persn.t_name3                                                    "+
                 " ),                                                                                                                  "+
                 " party.t_name                                                                                                        "+
                 " )                                                                                                                   "+
                 " AS NAME,                                                                                                            "+
                 " party.t_name AS ptName                                                                                              "+
                 " FROM   dparty_dbt party,                                                                                            "+
                 " dpersn_dbt persn,                                                                                                   "+
                 " DOBJATCOR_DBT ctg,                                                                                                  "+
                 " dobjattr_dbt atr                                                                                                    "+
                 " WHERE       party.t_partyid = :PartyID                                                                              "+
                 "        AND persn.t_personid(+) = party.t_partyid                                                                    "+
                 "        AND ctg.t_object    (+) = LPAD (party.t_partyid, 10, 0)                                                      "+
                 "        AND CTG.T_GROUPID   (+) = 16                                                                                 "+
                 "        AND ctg.t_objecttype(+) = 3                                                                                  "+
                 "        AND ctg.t_attrid    (+) IN (2, 3, 4)                                                                         "+
                 "        AND ATR.T_GROUPID   (+) = CTG.T_GROUPID                                                                      "+
                 "        AND ATR.T_OBJECTTYPE(+) = ctg.t_objecttype                                                                   "+
                 "        AND ATR.T_ATTRID    (+) = CTG.T_ATTRID                                                                       ";


  var params:TArray = makeArray( SQLParam( "PartyID", PartyID ) );

  var rset:RsdRecordset = execSQLselect( select, params, TRUE );

  if( rset and rset.moveNext() )
    SetParm( 1, rset.value(0));

    if ( fdBank.is_EXV )
       /* EVG 09/06/2011 По просьбе Galina N Pashkova - возможность печати
           слов "Глава КФХ" в наименовании ИП. */
        if ( index( strLwr( rset.value( "ptName", null, V_STRING ) ), "глава кфх" ) > 0 )
           SetParm( 1, "Глава КФХ " + rset.value( "NAME" ));
        end;
    end;

  end;     

  return 0;

  ONERROR(x)
    MsgBox( x.Message );
    return 1;
 
end;

private macro FillRastKind( Account:TRecHandler, Rast_cl:string, Rast_bnk:string, Rast_sud:string ):integer
             
  var select =  " SELECT CL.T_SUBKIND, CL.T_GROUND"  +
                " FROM DREQCLOSA_DBT CL"           +
                " WHERE CL.T_ACCOUNT       = :ACC " +
                "   AND CL.T_CODE_CURRENCY = :FIID" ;
  var i;
  var params:TArray = makeArray( SQLParam( "ACC" , Account.rec.Account       ),
                                 SQLParam( "FIID", Account.rec.Code_Currency ) );

  var rset:RsdRecordset = execSQLselect( select, params, TRUE );

  if( rset and rset.moveNext() )
    SetParm( 1, "" );
    SetParm( 2, "" );
    SetParm( 3, "" );
    if( rset.value(0) == 1 )  /*Заявление на закрытие*/
      SetParm( 1, "X" ); 
    elif((Index( StrLwr(rset.value(1)), "реш"      ) == 0)  and  /*Распоряжение по решению банка*/
         (Index( StrLwr(rset.value(1)), "суд"      ) == 0)  and 
         (Index( StrLwr(rset.value(1)), "постанов" ) == 0) )
      SetParm( 2, "X" ); 
    else
      SetParm( 3, "X" );                                         /*Распоряжение по решению суда*/
    end;
  else
    MsgBox("Не найдена запись в таблице reqclosa.dbt");
    return 1;
  end;     
  return 0;

end;


MACRO ЗаполнитьДанныеОткрытия( wlmes, type )

  var RAcc:TRecHandler = TRecHandler("account.dbt", "bank.def");

  var stat:integer = 0;
  
  var field, buff;
  var d,m,y,data:date;
  
  array num;

  var Account, FIID;
  var NumDate = date(0,0,0);
  var DateZaklDog = NumDate, DateRastDog = NumDate, DateOpenAcc = NumDate, DateCloseAcc = NumDate;

  /* EVG */
  var restFIO, printFIO;

  if( GetAccountFromMesID( wlmes.MesID, Account, FIID ) ) 
    msgbox( "Ошибка при получении счета" );
    return 1;
  else
    RAcc = GetAccount( 1, Account, FIID );
  end;
                                 
  if( GetClientName( RAcc.rec.Client, ClientName ) )
    msgbox( "Ошибка при получении наименования клиента" );
    return 1;
  end;

  if( GetRegProp( 14, RAcc.rec.Client, UchSeries, UchNumber ) )
    msgbox( "Ошибка при получении реквизитов клиента при постановки на учет" );
    return 1;
  end;


  /* EVG Не совсем понятно, почему название банка берется не из сообщения.
  if( GetBankName( {OurBank}, BankName ) ) 
    msgbox( "Ошибка при получении наименования нашего банка" );
    return 1;
  end;*/

  if( GetBankAdress( {OurBank}, BankIndex, BankAdress ) )
    msgbox( "Ошибка при получении адреса нашего банка ", buff );
    return 1;
  else
    /* EVG Функция RemoveStr2FormStr1() используется неправильно. И вообще, использовать её здесь 
       нельзя, т.к. она съедает циферки, содержащиеся в индексе, из всей строки адреса. Пример:

       адрес                119285, Россия, г Москва, ул Петровка, д. 18/2, стр. 1
       превращается в             , Россия, г Москва, ул Петровка, д. /, стр. 
       
    RemoveStr2FormStr1( BankAdress, BankIndex );*/

    BankAdress = StrSubst(BankAdress, BankIndex, "" );
  end;
  //msgbox (BankIndex, " - " , BankAdress);

   //DAI для печати в Excel разных формулировок по фондам при едином щаблоне формы
   if (type == 2)
      SubPrintAdr = "адрес места нахождения органа ПФР РФ: индекс, регион, район, город, населенный пункт, улица, дом, корпус, офис";
      PrintVKuda  = "В орган ПФР";
   elif (type == 3)
      SubPrintAdr = "адрес места нахождения исполнительного органа ФСС РФ: индекс, регион, район, город, населенный пункт, улица, дом, корпус, офис";
      PrintVKuda  = "В орган ФСС";
   else
      SubPrintAdr = "адрес места нахождения налогового органа: индекс, регион, район, город, населенный пункт, улица, дом, корпус, офис";
      PrintVKuda  = "В налоговый орган";
   end;

  while(СчитатьПоле(field,buff))
    
    /* EVG Взять название банка из сообщения */
    if( field == "НаимКО" )
      BankName = buff;
    end;


    if( field == "НомСооб" )
      SeriesAndNum = StrSubst(buff, ",", "/");
    end;

    if( field == "КодНОБ" )
      
      if( GetGNIName( buff, NameGNI ) ) 
        msgbox( "Ошибка при получении наименования нологового органа с кодом ", buff );
        return 1;
      end;

         
      // Tikh Для фондов
/*      if (type == 3)
      NameGNI = "ГУ МРО ФСС РФ";
      elif (type == 2)
      NameGNI = "Управление ПФР № 3 ГУ № 2";
      end;
*/

//      if ({oper} == 10192)
      debugbreak;
      if (type == 3)
        GetRegistryValue("PS\\REQOPENACC\\ПАРАМЕТРЫ ФОНДОВ\\ФСС\\НАИМЕНОВАНИЕ",2,NameGNI);
      elif (type == 2)
        GetRegistryValue("PS\\REQOPENACC\\ПАРАМЕТРЫ ФОНДОВ\\ПФР\\НАИМЕНОВАНИЕ",2,NameGNI);
      end;
//      end;
      
      
      CodeGNI = int(buff);

      if (type == 3)
         CodeGNI = "";     
      elif (type == 2)
         CodeGNI = "";     
      end;

      debugbreak;
      if( GetGNIAdress( buff, IndexGNI, AdressGNI ) )
        msgbox( "Ошибка при получении адреса налогового органа с кодом ", buff );
        return 1;
      else
        /* EVG Функция RemoveStr2FormStr1() используется неправильно. И вообще, использовать её здесь 
           нельзя, т.к. она съедает циферки, содержащиеся в индексе, из всей строки адреса. Пример:

           адрес                125373, Москва г., Походный проезд,3,А
           превращается в             , Москва г., Походный проезд,,А
           
        RemoveStr2FormStr1( AdressGNI, IndexGNI );*/

        AdressGNI = StrSubst( AdressGNI, IndexGNI, "" );

         // Tikh Для фондов

/*         
         if (type == 3)
         AdressGNI =  "г.Москва,Страстной бульвар,д.7,стр.1";
         IndexGNI = "127006";
         elif (type == 2)
         AdressGNI =  "г.Москва,ул.Домостроительная,д.1,стр.2";
         IndexGNI = "119618";
         end;
*/
//         if ({oper} == 10192)
         debugbreak;
         if (type == 3)
           GetRegistryValue("PS\\REQOPENACC\\ПАРАМЕТРЫ ФОНДОВ\\ФСС\\АДРЕС",2,AdressGNI);
           GetRegistryValue("PS\\REQOPENACC\\ПАРАМЕТРЫ ФОНДОВ\\ФСС\\ИНДЕКС",2,IndexGNI);
         elif (type == 2)
           GetRegistryValue("PS\\REQOPENACC\\ПАРАМЕТРЫ ФОНДОВ\\ПФР\\АДРЕС",2,AdressGNI);
           GetRegistryValue("PS\\REQOPENACC\\ПАРАМЕТРЫ ФОНДОВ\\ПФР\\ИНДЕКС",2,IndexGNI);
         end;
//         end;

      end;

    end;

    if( field == "РегНомКО" )
      BankRegNom = string( int( buff ):4:o );       
    end;

    if( field == "НомФ" )
      BankNumber = string( IfThenElse( int(buff) > 0, int( buff ), "" ):4:o );
    end;

    if( field == "БИК" )
      BankBIC = buff;
    end;

    if( field == "ИННКО" )
      BankINN = buff;
    end;

    if( field == "КППКО" )
      BankKPP = buff;
    end; 

    if( field == "ОГРНКО" )                                
      BankOGRN = buff;
    end; 
     
    if(field == "НомСч")
      ReqAccount = buff;
    end;

    if(field == "ИНННП")
      ClientINN = buff;
    end;

    if(field == "КППНП")
      ClientKPP = buff;
    end;

    if(field == "ОГРННП")
      ClientOGRN = buff;
    end;

    if(field == "СвидГР")
      GosRegSeries = SubStr( buff, 1, Index(buff, ",") - 1 );
      GosRegNumber = SubStr( buff, Index(buff, ",") + 1 );
    end;

    if(field == "КодСостСч" )
      if( int(buff) == 1 )
        Zakl = "X";
        Rast_cl = Rast_bnk = Rast_sud = "";
        OpenAcc = "X";
        CloseAcc = "";
      else
        Zakl = "";
        if( FillRastKind(RAcc, Rast_cl, Rast_bnk, Rast_sud) )
          return 1;
        end;
        OpenAcc = "";
        CloseAcc = "X";
      end;
    end;

    if( field == "НомерДог" )
      DogAccNumber = buff;
    end;

    if( field == "ВалСч" )
      if( int(buff) == 0 )
        NatCurAcc = "X";
        ValCurAcc = "";
      else
        NatCurAcc = "";
        ValCurAcc = "X";
      end;
    end;

    if( field == "ВидСч" )
      KindAcc = StrSubst( string( buff ), " счет", "" );
    end;

    if( field == "ДатаЗаклДог" )
      DateZaklDog = date(buff);
    end;

    if( field == "ДатаРастДог" )
      DateRastDog = date(buff);
    end;

    if( field == "ДатаОткрСч" )
      DateOpenAcc = date(buff);
    end;

    if( field == "ДатаЗакрСч" )
      DateCloseAcc = date( buff );
    end;

    if( field == "ДолжнПрБ" )
      PostBank = string( buff );
    end;

    if( field == "ФИОПрБ" )
      FIOBank = string( buff );

      /* EVG Вывод на печать сокращенного ФИО (Карнаухова,Елена,Викторовна => Карнаухова Е. В.) */
      printFIO = subStr(FIOBank, 1, index(FIOBank, ",")-1);
      restFIO  = trim(subStr(FIOBank, index(FIOBank, ",")+1));

      printFIO = printFIO + " " + strUpr(subStr(restFIO, 1, 1)) + ".";
      restFIO  = trim(subStr(restFIO, index(restFIO, ",")+1));

      printFIO = printFIO + " " + strUpr(subStr(restFIO, 1, 1)) + ".";

      FIOBank = printFIO;
      /* EVG */
    end;

    if( field == "ТелБанка" )
      Phon = string( buff );
    end;
  end;

  if( Zakl == "X" )
    
    if( DateZaklDog != NumDate )
      DateSplit( DateZaklDog, d, m, y );
      DogAccDataD = string(d:o:2); 
      DogAccDataM = string(m:o:2);
      DogAccDataY = string(y:o:4);
    end;

    if( DateOpenAcc != NumDate )
      DateSplit( DateOpenAcc, d, m, y );
      Acc_DataD = string(d:o:2); 
      Acc_DataM = string(m:o:2);
      Acc_DataY = string(y:o:4);
    end;         
    
    /* EVG
    if( RAcc.rec.Open_Date != NumDate )
      DateSplit( RAcc.rec.Open_Date, d, m, y );
      DataD = string(d:o:2);
      DataM = string(m:o:2);
      DataY = string(y:o:4);
    end;
    */
    if ( fdBank.is_EXV )
        /* EVG 15/03/2011 По просьбе В. Борзова - используется текущая
           дата вместо даты открытия счёта.*/
        DateSplit( {CurDate}, d, m, y );
        DataD = string(d:o:2); 
        DataM = string(m:o:2);
        DataY = string(y:o:4);
        /* EVG 15/03/2011 end */
    else
        if( DateOpenAcc != NumDate )
          DateSplit( DateOpenAcc, d, m, y );
          DataD = string(d:o:2); 
          DataM = string(m:o:2);
          DataY = string(y:o:4);
        end;
    end;
             
  else
    
    if( DateRastDog != NumDate )
      DateSplit( DateRastDog, d, m, y );
      DogAccDataD = string(d:o:2); 
      DogAccDataM = string(m:o:2);
      DogAccDataY = string(y:o:4);
    end;

    if( DateCloseAcc != NumDate )
      DateSplit( DateCloseAcc, d, m, y );
      Acc_DataD = string(d:o:2); 
      Acc_DataM = string(m:o:2);
      Acc_DataY = string(y:o:4);
    end;

    if( RAcc.rec.Close_Date != NumDate )
      DateSplit( RAcc.rec.Close_Date, d, m, y );
      DataD = string(d:o:2); 
      DataM = string(m:o:2);
      DataY = string(y:o:4);
    end;

  end;

 /*  Лавренов: если неправильно печатаются даты в заявлении о закрытии, тупо раскоментируем и ставим необходимую дату
     DateSplit( Date("22.01.2010"), d, m, y );
     DataD = string(d:o:2);
     DataM = string(m:o:2);
     DataY = string(y:o:4);*/

   /* EVG Если сообщение ещё не отправлено, дата OutsideAbonentDate нулевая.
      В этом случае используем другую дату. */
  if (wlmes.OutsideAbonentDate > date(0,0,0))
     DateSplit( wlmes.OutsideAbonentDate, d, m, y );

     OutSideDateD = string(d:o:2); 
     OutSideDateM = string(m:o:2);
     OutSideDateY = string(y:o:4);
  else
     if( Zakl == "X" )
       if( DateZaklDog != NumDate )
         DateSplit( DateZaklDog, d, m, y );
         OutSideDateD = string(d:o:2); 
         OutSideDateM = string(m:o:2);
         OutSideDateY = string(y:o:4);
       end;
     else
       if( DateCloseAcc != NumDate )
         DateSplit( DateCloseAcc, d, m, y );
         OutSideDateD = string(d:o:2); 
         OutSideDateM = string(m:o:2);
         OutSideDateY = string(y:o:4);
       end;
     end;
  end;
   /* EVG end */

END;    

//DAI Вывод в Excel
private var Ex;
private const
   /* Выравнивание ячейки Excel */
   xlCenter           = -4108,
   xlLeft             = -4131,
   xlRight            = -4152,
   xlTop              = -4160;

macro Diapazon(Bl,Bn,El,En,Row):String
/* DAI
Перерасчет и формирование описателя диапазона ячеек с учетом отступа от первой строки Row строк
Bl - буква начала диапазона ячеек (в случае указания целой строки должна быть "")
Bn - номер строки начала диапазона ячеек
El - буква конца диапазона ячеек (в случае указания целой строки должна быть "")
En - номер строки конца диапазона ячеек
Для описателя диапазона целых столбцов не применима!
*/
   Bn = Bn + Row;
   En = En + Row;
   return Bl + Bn + ":" + El + En;
end;

macro Obvod(in);
/* DAI
Обводится выделеный диапазон ячеек линией по умолчанию.
Если in = true, то по возможности отображаются и внутренние линии.
*/
   Ex.Selection.Borders(xlEdgeLeft).LineStyle        = xlContinuous;
   Ex.Selection.Borders(xlEdgeLeft).ColorIndex       = 0;
   Ex.Selection.Borders(xlEdgeLeft).Weight           = xlThin;
   Ex.Selection.Borders(xlEdgeRight).LineStyle       = xlContinuous;
   Ex.Selection.Borders(xlEdgeRight).ColorIndex      = 0;
   Ex.Selection.Borders(xlEdgeRight).Weight          = xlThin;
   Ex.Selection.Borders(xlEdgeTop).LineStyle         = xlContinuous;
   Ex.Selection.Borders(xlEdgeTop).ColorIndex        = 0;
   Ex.Selection.Borders(xlEdgeTop).Weight            = xlThin;
   Ex.Selection.Borders(xlEdgeBottom).LineStyle      = xlContinuous;
   Ex.Selection.Borders(xlEdgeBottom).ColorIndex     = 0;
   Ex.Selection.Borders(xlEdgeBottom).Weight         = xlThin;
   if (in) 
      if (Ex.selection.columns.count > 1) //внутренние вертикальные линии возможны только если отмечено более одной колонки
         Ex.Selection.Borders(xlInsideVertical).LineStyle  = xlContinuous;
         Ex.Selection.Borders(xlInsideVertical).ColorIndex = 0;
         Ex.Selection.Borders(xlInsideVertical).Weight     = xlThin;
      end;
      if (Ex.selection.rows.count > 1) //внутренние горизонтальные линии возможны только если отмечено более одной строки
         Ex.Selection.Borders(xlInsideHorizontal).LineStyle  = xlContinuous;
         Ex.Selection.Borders(xlInsideHorizontal).ColorIndex = 0;
         Ex.Selection.Borders(xlInsideHorizontal).Weight     = xlThin;
      end;
   end;
end;

macro InitBookExel()
/* DAI
Создается новая книга Excel на основе шаблона "Форма по КНД 1114301.xlt", 
размещенном в каталоге заданном в ключе реестра "PS\REQOPENACC\ПАРАМЕТРЫ ФОНДОВ\ПУТЬ К ШАБЛОНУ"
При отсутствии шаблона обработка вывода на печать прерывается.
*/
   var i, outl, schablon;
debugbreak; //RR 09.10.2012
   GetRegistryValue("PS\\REQOPENACC\\ПАРАМЕТРЫ ФОНДОВ\\ПУТЬ К ШАБЛОНУ",2,outl);   
   if(not (schablon = FindPath("Форма по КНД 111430.xlt", outl, false)));  
       msgbox("Не найден шаблон формы по КНД 1114301 для Excel");
       exit();
   end;
   /*zmp 06.03.2013 I-00335331-2 находим абсолютный путь*/
   schablon = RSL_FullPath(schablon);
   //schablon = outl + "\\Форма по КНД 111430.xlt"; 
   Ex.Workbooks.add(schablon);

end;

macro OpenBookExcel() 
/* DAI
Создание объектной переменной Ex для работы с Excel с учетом 2х или 3х звенки
В случае пакетной печати документов новые файлы не создаются
*/
   var It, ForTerm;

   ForTerm = CreateObject ("rsax","TRsAxServer","RsAxServer",IsStandAlone());
   Ex = ForTerm.CreateComObject ("Excel.Application", True);
   Ex.Visible = False;
   if (Ex.Workbooks.count != 0) //если Excel уже запущен
      It = Ex.Sheets("ReNumber").Index;
   else
      InitBookExel();
   end;

   onError 
      //MsgBox("Книга открыта но не та");
      InitBookExel();

end;

macro WriteSchablon(fond:integer)
/* DAI
Вывод очередного шаблона формы на лист соответствующего фонда
значения для fond: 1 - ФНС, 2 - ПФР, 3 - ФСС
*/
   var Row:integer = int(Ex.Sheets("ReNumber").Cells (fond, 1).Value);

   Ex.Sheets("ReNumber").Visible = True;
   Ex.Sheets("ReNumber").Select;
   Ex.Rows(Diapazon("",4,"",71,0)).Select;
   Ex.Selection.Copy;
   Ex.Sheets("ReNumber").Visible = False;
   Ex.Sheets.Item(fond+1).Select;
   Ex.Rows(Diapazon("",4,"",71,Row)).Select;
   Ex.ActiveSheet.Paste;

   if (fond == 1) //Шапка приложения только для ФНС
      
      Ex.Range (Diapazon("A",1,"DK",1,Row)).Select;
      Ex.Selection.Merge;
      Ex.Selection.HorizontalAlignment = xlRight;
      Ex.ActiveCell.Value = "Приложение № 1";
      Ex.Rows(Diapazon("",1,"",1,Row)).Select;
      Ex.Selection.RowHeight = 12;
      
      Ex.Range (Diapazon("A",2,"DK",2,Row)).Select;
      Ex.Selection.Merge;
      Ex.Selection.HorizontalAlignment = xlRight;
      Ex.ActiveCell.Value = "к Приказу ФНС России";
      Ex.Rows(Diapazon("",2,"",2,Row)).Select;
      Ex.Selection.RowHeight = 8.5;

      Ex.Range (Diapazon("A",3,"DK",3,Row)).Select;
      Ex.Selection.Merge;
      Ex.Selection.HorizontalAlignment = xlRight;
      Ex.ActiveCell.Value = "от 28.09.2009 № ММ-7-6/475@";
      Ex.Rows(Diapazon("",3,"",3,Row)).Select;
      Ex.Selection.RowHeight = 8.5;
   end; 

   Ex.Rows(Diapazon("",11,"",11,Row)).Select;
   Ex.Selection.RowHeight = 18;
   Ex.Selection.Font.Size = 6;
   if (fond == 1)
      Ex.Range (Diapazon("P",11,"CX",11,Row)).Select;
      Ex.Selection.Merge;
      Ex.Selection.VerticalAlignment   = xlTop;
      Ex.Selection.HorizontalAlignment = xlCenter;
      Ex.Selection.WrapText = True;
      Ex.ActiveCell.Value = "наименование налогового органа по месту нахождения банка (филиала банка, имеющего (не имеющего) БИК), в котором открыт (закрыт) счет";
      Ex.Range (Diapazon("CZ",11,"DK",11,Row)).Select;
      Ex.Selection.Merge;
      Ex.Selection.VerticalAlignment   = xlTop;
      Ex.Selection.HorizontalAlignment = xlCenter;
      Ex.Selection.WrapText = True;
      Ex.ActiveCell.Value = "код налогового органа";
   elif (fond == 2)
      Ex.Range (Diapazon("P",11,"DK",11,Row)).Select;
      Ex.Selection.Merge;
      Ex.Selection.VerticalAlignment   = xlTop;
      Ex.Selection.HorizontalAlignment = xlCenter;
      Ex.ActiveCell.Value = "наименование органа ПФР РФ по месту нахождения банка (филиала банка, имеющего (не имеющего) БИК), в котором открыт (закрыт) счет";
   elif (fond == 3)
      Ex.Range (Diapazon("P",11,"DK",11,Row)).Select;
      Ex.Selection.Merge;
      Ex.Selection.VerticalAlignment   = xlTop;
      Ex.Selection.HorizontalAlignment = xlCenter;
      Ex.ActiveCell.Value = "наименование территориального органа ФСС РФ по месту нахождения банка (филиала банка, имеющего (не имеющего) БИК), в котором открыт (закрыт) счет";
   end;

   Ex.Rows(Diapazon("",47,"",47,Row)).Select;
   Ex.Selection.RowHeight = 18;
   Ex.Selection.Font.Size = 6;
   if (fond == 1)
      Ex.Range (Diapazon("Q",47,"CX",47,Row)).Select;
      Ex.Selection.Merge;
      Ex.Selection.VerticalAlignment   = xlTop;
      Ex.Selection.HorizontalAlignment = xlCenter;
      Ex.Selection.WrapText = True;
      Ex.ActiveCell.Value = "наименование налогового органа по месту нахождения банка (филиала банка, имеющего (не имеющего) БИК), в котором открыт (закрыт) счет";
      Ex.Range (Diapazon("CZ",47,"DK",47,Row)).Select;
      Ex.Selection.Merge;
      Ex.Selection.VerticalAlignment   = xlTop;
      Ex.Selection.HorizontalAlignment = xlCenter;
      Ex.Selection.WrapText = True;
      Ex.ActiveCell.Value = "код налогового органа";
   elif (fond == 2)
      Ex.Range (Diapazon("Q",47,"DK",47,Row)).Select;
      Ex.Selection.Merge;
      Ex.Selection.VerticalAlignment   = xlTop;
      Ex.Selection.HorizontalAlignment = xlCenter;
      Ex.ActiveCell.Value = "наименование органа ПФР РФ по месту нахождения банка (филиала банка, имеющего (не имеющего) БИК), в котором открыт (закрыт) счет";
   elif (fond == 3)
      Ex.Range (Diapazon("Q",47,"DK",47,Row)).Select;
      Ex.Selection.Merge;
      Ex.Selection.VerticalAlignment   = xlTop;
      Ex.Selection.HorizontalAlignment = xlCenter;
      Ex.ActiveCell.Value = "наименование органа ФСС по месту своего нахождения";
   end;

   Ex.Range (Diapazon("A",1,"DK",71,Row)).Select;
   Obvod(false);

   Ex.ActiveWindow.SelectedSheets.HPageBreaks.Add(Ex.Range (Diapazon("A",72,"A",72,Row)));

   Ex.Range (Diapazon("A",1,"A",1,Row)).Select;

end;

macro PrintString(row:integer, col:integer, line:string, num:integer, tab:bool)
/* DAI
Вывод строки line посимвольно в выделенные области таблицы, полученные объединением из 3х смежных ячеек.
row, col - численные координата первой ячейки с которой начинается вывод.
num - количество заполняемых ячеек. 
Если длина строки line больше этого количества, то выводятся только первые num символов.
Если параметр tab = False, то вся строка выводится в ячейку с координатами row, col.
*/
   var i:integer = 0;

   if (tab)
      while ((i < StrLen(line)) and (i < num))
         Ex.Cells (Row, (col + i*3)).Value = SubStr(line,i+1,1);
         i = i + 1;
      end;
   else
      Ex.Cells(Row,col).Value = line;
   end;
end;

macro InsertDataToSchablon(fond:integer)
/* DAI
Макрос заполняет очередной шаблон на странице фонда данными
значения для fond: 1 - ФНС, 2 - ПФР, 3 - ФСС
*/
   var Row:integer = int(Ex.Sheets("ReNumber").Cells (fond, 1).Value);

   Ex.Sheets.Item(fond + 1).Select;

   PrintString ((5  + Row),  95, "1114301",     7, True);
   PrintString ((8  + Row),  56, SeriesAndNum, 20, True);
   PrintString ((10 + Row),  16, NameGNI,       0, False);
   PrintString ((10 + Row), 104, CodeGNI,       4, True);
   PrintString ((12 + Row),  16, IndexGNI,      6, True);
   PrintString ((12 + Row),  34, AdressGNI,     0, False);
   PrintString ((13 + Row),  16, SubPrintAdr,   0, False);
   PrintString ((14 + Row),  19, BankName,      0, False);
   PrintString ((16 + Row),  16, BankIndex,     6, True);
   PrintString ((16 + Row),  34, BankAdress,    0, False);
   PrintString ((18 + Row),  16, BankRegNom,    4, True);
   PrintString ((18 + Row),  31, BankNumber,    4, True);
   PrintString ((18 + Row),  89, BankBIC,       9, True);
   PrintString ((20 + Row),   2, BankINN,      10, True);
   PrintString ((20 + Row),  41, BankKPP,       9, True);
   PrintString ((20 + Row),  77, BankOGRN,     13, True);
   PrintString ((22 + Row),  14, ClientName,    0, False);
   PrintString ((24 + Row),  77, GosRegSeries,  2, True);
   PrintString ((24 + Row),  89, GosRegNumber,  9, True);
   PrintString ((26 + Row),  77, UchSeries,     2, True);
   PrintString ((26 + Row),  89, UchNumber,     9, True);
   PrintString ((28 + Row),   2, ClientINN,    12, True);
   PrintString ((28 + Row),  41, ClientKPP,     9, True);
   PrintString ((28 + Row),  71, ClientOGRN,   15, True);
   PrintString ((30 + Row),  17, Zakl,          1, True);
   PrintString ((30 + Row),  50, Rast_cl,       1, True);
   PrintString ((30 + Row),  83, Rast_bnk,      1, True);
   PrintString ((30 + Row),  95, Rast_sud,      1, True);
   PrintString ((32 + Row),   2, DogAccDataD,   2, True);
   PrintString ((32 + Row),  11, DogAccDataM,   2, True);
   PrintString ((32 + Row),  20, DogAccDataY,   4, True);
   PrintString ((32 + Row),  56, DogAccNumber, 20, True);
   PrintString ((34 + Row),   8, OpenAcc,       1, True);
   PrintString ((34 + Row),  20, CloseAcc,      1, True);
   PrintString ((34 + Row),  32, NatCurAcc,     1, True);
   PrintString ((34 + Row),  45, ValCurAcc,     1, True);
   PrintString ((34 + Row),  49, KindAcc,       0, False);
   PrintString ((34 + Row),  88, Acc_DataD,     2, True);
   PrintString ((34 + Row),  96, Acc_DataM,     2, True);
   PrintString ((34 + Row), 104, Acc_DataY,     4, True);
   PrintString ((36 + Row),  56, ReqAccount,   20, True);
   PrintString ((38 + Row),  19, PostBank,      0, False);
   PrintString ((38 + Row),  44, FIOBank,       0, False);
   PrintString ((38 + Row),  88, DataD,         2, True);
   PrintString ((38 + Row),  96, DataM,         2, True);
   PrintString ((38 + Row), 104, DataY,         4, True);
   PrintString ((40 + Row),  11, Phon,         20, True);
   PrintString ((44 + Row),  56, SeriesAndNum, 20, True);
   PrintString ((46 + Row),   2, PrintVKuda,    0, False);
   PrintString ((46 + Row),  17, NameGNI,       0, False);
   PrintString ((46 + Row), 104, CodeGNI,       4, True);
   PrintString ((48 + Row),   2, OutSideDateD,  2, True);
   PrintString ((48 + Row),  11, OutSideDateM,  2, True);
   PrintString ((48 + Row),  20, OutSideDateY,  4, True);
   PrintString ((50 + Row),   2, ClientName,    0, False);
   PrintString ((52 + Row),  77, GosRegSeries,  2, True);
   PrintString ((52 + Row),  89, GosRegNumber,  9, True);
   PrintString ((54 + Row),  77, UchSeries,     2, True);
   PrintString ((54 + Row),  89, UchNumber,     9, True);
   PrintString ((56 + Row),   2, ClientINN,    12, True);
   PrintString ((56 + Row),  41, ClientKPP,     9, True);
   PrintString ((56 + Row),  71, ClientOGRN,   15, True);
   PrintString ((58 + Row),  17, Zakl,          1, True);
   PrintString ((58 + Row),  50, Rast_cl,       1, True);
   PrintString ((58 + Row),  83, Rast_bnk,      1, True);
   PrintString ((58 + Row),  95, Rast_sud,      1, True);
   PrintString ((60 + Row),   2, DogAccDataD,   2, True);
   PrintString ((60 + Row),  11, DogAccDataM,   2, True);
   PrintString ((60 + Row),  20, DogAccDataY,   4, True);
   PrintString ((60 + Row),  56, DogAccNumber, 20, True);
   PrintString ((62 + Row),   8, OpenAcc,       1, True);
   PrintString ((62 + Row),  20, CloseAcc,      1, True);
   PrintString ((62 + Row),  32, NatCurAcc,     1, True);
   PrintString ((62 + Row),  45, ValCurAcc,     1, True);
   PrintString ((62 + Row),  49, KindAcc,       0, False);
   PrintString ((62 + Row),  88, Acc_DataD,     2, True);
   PrintString ((62 + Row),  96, Acc_DataM,     2, True);
   PrintString ((62 + Row), 104, Acc_DataY,     4, True);
   PrintString ((64 + Row),  56, ReqAccount,   20, True);
   PrintString ((66 + Row),  19, PostBank,      0, False);
   PrintString ((66 + Row),  44, FIOBank,       0, False);
   PrintString ((66 + Row),  88, DataD,         2, True);
   PrintString ((66 + Row),  96, DataM,         2, True);
   PrintString ((66 + Row), 104, DataY,         4, True);
   PrintString ((68 + Row),  11, Phon,         20, True);

   Ex.Sheets("ReNumber").Cells (fond, 1).Value = (Row + Ex.Sheets("ReNumber").Cells (1, 2).Value);

   Ex.Sheets.Item(2).Select;

end;

/* Макрос печати заявления на открытие счета */
MACRO PrintDocumentOpenAndClose( wlmes, ncopy ):bool 
var i;
  BegAction(0,"Ждите...",False);
  debugbreak;
  OpenBookExcel();
//  i = ncopy; //при ncopy = 1 цыкл по количеству копий просто теряет смысл...
//  var OPCLACC = TOP();
  ClearVar();
  ЗаполнитьДанныеОткрытия( wlmes );
  WriteSchablon(1);
  InsertDataToSchablon(1);
  /*
  while( i )
    //OPCLACC.Print(TRUE);
    //OPCLACC.Print(TRUE, PM_NORMAL, TRUE);
    /*ОЮФ 29.01.2010 согласно заявке A47732 
      добавил возможность править данные в форме*/
    OPCLACC.doModal(mainWnd, MT_FRAME); 
    /*ОЮФ*/
    i = i - 1;
  end;
  */
         // Tikh Для фондов печатаем еще 2 формы чуть измененные

//  i = ncopy;
//  OPCLACC = TOP(2);
  ClearVar();
  ЗаполнитьДанныеОткрытия( wlmes, 2 );
  WriteSchablon(2);
  InsertDataToSchablon(2);
  /*
  while( i )
    //OPCLACC.Print(TRUE);
    OPCLACC.Print(TRUE, PM_NORMAL, TRUE);
    i = i - 1;
  end;
  */
//  i = ncopy;
//  OPCLACC = TOP(3);
  ClearVar();
  ЗаполнитьДанныеОткрытия( wlmes, 3 );
  WriteSchablon(3);
  InsertDataToSchablon(3);
  /*
  while( i )
    //OPCLACC.Print(TRUE);
    OPCLACC.Print(TRUE, PM_NORMAL, TRUE);
    i = i - 1;
  end;
  */
// tikh
  EndAction();
  Ex.Visible = True;
  return true;
END;
