//-----------------------------------------------------------------------------
// Блок     : "Исполнение ИПВС"
// Шаг      : "Исполнение документа оплаты"
// Описание : Макрос шага
//-----------------------------------------------------------------------------

import PaymInter, PSInter, payinter, pm_opr, cbsttls, catfdoc, oralib, likepy;
import OprInter; //Jushmanov 2014-02-24 C-19151

var PaymentObj:RsbPayment;

// Возможные исходы событий
PRIVATE CONST IR_ACTION_OK    :integer = 0, //Ok
              IR_ACTION_REJECT:integer = 1, //Отвергнуть
              IR_ACTION_STOP  :integer = 2, //Приостановить до обработки документа оптаты
              IR_ACTION_ERROR :integer = 3; //Возникла ошибка

//------------------------------------------------------------------------------
// Проверка документа оплаты
//------------------------------------------------------------------------------
PRIVATE MACRO CheckChildDoc( action:integer, oprdocs:TRecHandler /*oprchilddoc.rec*/ ):integer

    if( action != IR_ACTION_OK )
        return action;
    end;

    var Status:integer = -1;
    var notetext:string = "";
    var paymtr:RsbAccTransaction;

    var RequestOrder:object = GenObject( "RsbRequestOrder", PaymentObj.DocumentID );

    var PayPayment:RsbPayment = RsbPayment( int(oprdocs.rec.DocumentID) );

    // Определим счета в проводках
    var FD_CorrAcc:NotBalCorrAcc_FirstDoc = NotBalCorrAcc_FirstDoc( "П" );
    var СистемныйСчетДляКартотек:string = "";
    var ВнебалСчетКартотеки2:string = "";

    record pmpaym(pmpaym);
    ClearRecord(pmpaym);
    pmpaym.PaymentID = PayPayment.PaymentID;

    if( not PM_GetOprStatus( oprdocs.rec.DocKind, oprdocs.rec.DocumentID, OPR_PAYM_STATE, @Status ) )
        return IR_ACTION_ERROR;
    end;

    if( Status == OPR_PM_ST_CLOSE )
        PayPayment.DocKind;

        if( PaymentObj.LinkPayment(PayPayment, PMLINK_KIND_KVITING) )
            msgbox(GetErrMsg());
            return IR_ACTION_ERROR;
        end;

        if( RequestOrder.State != PSINRQ_ST_I2 )

            PaymentObj.PaymStatus = PM_FINISHED;
            RequestOrder.State    = PSINRQ_ST_CLOSED;
            if( УстановитьСтатусыПлатежа( OPR_PAYM_STATE, OPR_PM_ST_CLOSE ) )
                msgbox("Ошибка при установке сегментов статуса экземпляра операции");
                return IR_ACTION_ERROR;
            end;

        else

            СистемныйСчетДляКартотек = FD_CorrAcc.FindAndOpenSysAccount( "ВнебалСчетКорресп", 0, {curdate} );
            if( GetAccount90902( PaymentObj.PayerAccount, PaymentObj.PayerFIID, PaymentObj.BaseFIID, ВнебалСчетКартотеки2, PaymentObj.ValueDate ) )
                return IR_ACTION_ERROR;
            end;
            // Выполним проводку по внебалансу
            paymtr = RsbAccTransaction();
            if( paymtr == NULL )
                msgbox("Ошибка при создании проводки по платежу");
                return IR_ACTION_ERROR;
            end;

            paymtr.Chapter         = 3;
            paymtr.Date_Carry      = {curdate};
            paymtr.Number_Pack     = PayPayment.NumberPack;
            paymtr.Numb_Document   = PayPayment.Number;
            paymtr.ResultCarry     = OBI2PARTCARRY;
            paymtr.Kind_Oper       = " 1";
            paymtr.Shifr_Oper      = "09";
            paymtr.Department      = PayPayment.Department;
            paymtr.AccountPayer    = СистемныйСчетДляКартотек;
            paymtr.AccountReceiver = ВнебалСчетКартотеки2;
            paymtr.FIID            = PayPayment.PayerFIID;
            paymtr.SumPayer        = PayPayment.PayerAmount;
            paymtr.SumReceiver     = PayPayment.PayerAmount;
            paymtr.Ground          = "Снятие с Картотеки 2 суммы " + PayPayment.PayerAmount +
                                     " по документу № "            + string(PayPayment.Number) +
                                     " от "                        + string(PayPayment.Date)   +
                                     " к счету "                   + string(PayPayment.PayerAccount);

            if( not paymtr.Carry )
                msgbox("Ошибка при актуализации платежа");
                return IR_ACTION_ERROR;
            end;

            // Если оплата - последняя
            if( PaymentObj.FutureReceiverAmount <= 0 )
                PaymentObj.PaymStatus = PM_FINISHED;
                RequestOrder.State    = PSINRQ_ST_CLOSED;
                if( УстановитьСтатусыПлатежа( OPR_PAYM_INDEX, OPR_PAYM_ST_INDEX_NO, OPR_PAYM_STATE, OPR_PM_ST_CLOSE ) )
                    msgbox("Ошибка при установке сегментов статуса экземпляра операции");
                    return IR_ACTION_ERROR;
                end;
            end;
        end;

        return IR_ACTION_OK;

    //оплата отвергнута - отвергаем и основной документ
    elif( Status == OPR_PM_ST_REJECT )

        if( RequestOrder.State != PSINRQ_ST_I2 )
            PaymentObj.PaymStatus = PM_REJECTED;
            RequestOrder.State    = PSINRQ_ST_REJECTED;

            if( УстановитьСтатусыПлатежа( OPR_PAYM_STATE, OPR_PM_ST_REJECT ) )
                MsgBox("Ошибка при установке сегментов статуса экземпляра операции");
                return IR_ACTION_ERROR;
            end;

            notetext = "Документ оплаты. " + ReadNoteForObject( OBJTYPE_PAYMENT, makeObjectID(OBJTYPE_PAYMENT, NULL, pmpaym), PM_NOTEKIND_DENIALGROUND );

            if( PaymentObj.Notes.AddNote( PM_NOTEKIND_DENIALGROUND, notetext ) != 0 )
                msgbox( "Ошибка при вставке примечания платежа" );
                return IR_ACTION_ERROR;
            end;

            return IR_ACTION_REJECT;
        else
            notetext = ReadNoteForObject( OBJTYPE_PAYMENT, makeObjectID(OBJTYPE_PAYMENT, NULL, pmpaym), PM_NOTEKIND_DENIALGROUND );
            msgbox("Невозможно выполнить документ оплаты картотеки|" + notetext);
            return IR_ACTION_STOP;
        end;

    //оплата еще обрабатывается - ждем
    else
        MsgBox( "Не завершена обработка документа оплаты" );
        return IR_ACTION_STOP;
    end;

END;

//-----------------------------------------------------------------------------
// RecFilter
//-----------------------------------------------------------------------------
PRIVATE MACRO CheckDocKind( oprdocs:TRecHandler /*oprchilddoc.rec*/ )
    return (oprdocs.rec.DocKind == PS_PAYORDER);
END;


//------------------------------------------------------------------------------
// Макрос шага
//------------------------------------------------------------------------------
MACRO ExecuteStep( doc, paymDoc, DocKind:integer, ID_Operation:integer, ID_Step:integer )
  
    //находим предыдущий шаг
    var Prev_Step:integer = 0;
    var stat     :bool    = Opr_GetPrevStep( ID_Operation, ID_Step, @Prev_Step );

    //находим документы, порожденные на предыдущем шаге
    var ChildDocList:TArray;
    if( stat )
        ChildDocList = filter( OprGetChildDocs( ID_Operation, Prev_Step, true ), @CheckDocKind);
        if( ChildDocList.Size == 0 )
            msgbox("Не найден документ оплаты");
            stat = false;
        end;
    end;

    //проверяем состояние документов, порожденных на предыдущем шаге
    var Action:integer;
    if( stat )
        Action = reduce( ChildDocList, @CheckChildDoc, IR_ACTION_OK );
        if( ( Action == IR_ACTION_STOP  ) OR
            ( Action == IR_ACTION_ERROR ) )
            stat = false;
        end;
    end;

    if( stat )
        return 0;
    else
        return 1;
    end;

END;


//Jushmanov 2014-02-24 C-19151
macro PostStepAction( message,      /* 1 - выполнение шага; 2 - откат шага;   */
                      errTrn,       /* статус выполнения шага. 0 - ошибки нет */
                      FirstDoc,     /* указатель на первичный документ        */
                      ID_Oper,      /* внутренний идентификатор операции      */
                      Number_Step,  /* Номер шага операции (из настроек)      */
                      KindOper,     /* номер вида операции                    */
                      KindDoc,      /* номер вида первичного документа        */
                      KindStep,     /* вид шага операции                      */
                      ID_Step )     /* внутренний идентификатор шага операции */
    private var logquery, idStep = ID_Step, idOper = ID_Oper;

    if(( message == OP_EXECUTE_STEP ) and (errTrn == 0) and (IsOprMultiExec))
        if ((valtype(idOper) != V_INTEGER) and (valtype(idOper) != V_STRING)) idOper = 0; end;
        if ((valtype(idStep) != V_INTEGER) and (valtype(idStep) != V_STRING)) idStep = 0; end;

        logquery = "UPDATE usr_doprstep_robot_dbt SET t_is_robot_step = chr(88)" +
                   " WHERE t_id_operation = " + idOper + " AND t_id_step = " + idStep;
        ExecSQL(logquery, null, false);
    end;

    return 0;
end;