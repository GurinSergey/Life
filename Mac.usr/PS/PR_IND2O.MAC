/*──────────────────────────────────────────────────────────────────────────┐
  RS-Bank 6.0                                          R-Style Software Lab

  File Name   : PR_IND2O.MAC

  Description : Отчет по документам, проведенным из К2

└───────────────────────────────────────────────────────────────────────────*/

import PSInter, FIInter, globals, prreplib, pmprops;
/* Форма выпуска отчета */
private const iFormDay    = 0; /* за день */
private const iFormMonth  = 1; /* за месяц */
private const iFormPeriod = 2; /* за период */

/* нумерация сумм в массивах */
private const _StartAmount   = 0,
              _PayAmount     = 1,
              _RecallAmount  = 2,
              _KORAmount     = 3,
              _Rest          = 4;

/* Данные панели */
private var DateIn:date      = date(0,0,0);             
private var DateOut:date     = date(0,0,0);
private var DepNum:integer   = -1;
private var NodeNum:integer  = -1;       
private var OperOP           = -1;     
private var FIID:integer     = -1;
private var FI_Code:string   = "";      
private var FI_Name:string   = "";      
private var Account:string   = "";      
private var iOutForm         = "";  
private var iMont            = "";

private var DateCarry = TArray();
private var Days      = TArray();  
private var curline   = 0;

private macro GetInitialPayment( PaymentID:integer ):integer

  var СписаннаяСумма = $0;
  var params:TArray  = TArray();
  var select = "SELECT  t_InitialPayment "+ 
              "  FROM dpmlink_dbt "+
              " WHERE t_PurposePayment = :PaymentID "+
              "   AND t_LinkKind = 2 "/*PMLINK_KIND_KVITING*/;
  params[params.size] = SQLParam( "PaymentID", PaymentID  );    
  var rs:RsdRecordset = execSQLselect( select, params, FALSE );
  if( rs )
    rs.Command.NullConversion = true;
    if( rs.MoveNext() )
      return int( rs.value(0) );
    end;                          
  end;
  return PaymentID;
end;

/* Вспомогательный класс для подсчета сумм платежа по проводкам */
private class СуммыПлатежа( ПроводкиПлатежа:TArray, PaymentID:integer, Amounts:TArray )

  private macro GetDatePlaced( PaymentID:integer ):date
    var select = " select t_date                   "+
                  "  from dpmhist_dbt              "+
                  " where t_paymentid     = :ID    "+
                  "   and t_statusidto    = 2000   "+
                  "   and t_statusidfrom <> 2000   "+
                  " order by t_autokey             ";

    var params = makeArray( SQLParam("ID", PaymentID ) );
    var rs = execSQLselect( select, params, FALSE );
    if( rs.MoveNext() )
      return rs.value(0);
    end;
    return date(0,0,0);
  end;
  
  macro Init( ПроводкиПлатежа:TArray, PaymentID:integer, Amounts:TArray )
    private var paym = RsbPayment( PaymentID ), i = 0;
    Amounts[_StartAmount] = Amounts[_PayAmount] = Amounts[_RecallAmount] = Amounts[_KORAmount] = Amounts[_Rest] = $0;
    while( i < ПроводкиПлатежа.Size )
      if( ( ПроводкиПлатежа[i].rec.Result_Carry == ЧастичнаяОплатаК2 ) or
            ( ПроводкиПлатежа[i].rec.Result_Carry == ПолнаяОплатаК2    ) )
        Amounts[_PayAmount] = Amounts[_PayAmount] + СуммаПроводкиВВалютеСчетаПлательщика( ПроводкиПлатежа[i], paym, 1 );
        Amounts[_Rest]      = Amounts[_Rest]      - ПроводкиПлатежа[i].rec.Sum_Receiver;
      elif( ПроводкиПлатежа[i].rec.Result_Carry == СписаниеС_К2 )
        Amounts[_RecallAmount] = Amounts[_RecallAmount] + СуммаПроводкиВВалютеСчетаПлательщика( ПроводкиПлатежа[i], paym, 1 );
        Amounts[_Rest]         = Amounts[_Rest]         - ПроводкиПлатежа[i].rec.Sum_Receiver;
      elif( ПроводкиПлатежа[i].rec.Result_Carry == СписаниеВ_КОР )
        Amounts[_KORAmount] = Amounts[_KORAmount] + СуммаПроводкиВВалютеСчетаПлательщика( ПроводкиПлатежа[i], paym, 1 );
        Amounts[_Rest]      = Amounts[_Rest]      - ПроводкиПлатежа[i].rec.Sum_Receiver;
      end;
      if( i == ПроводкиПлатежа.Size - 1 )
        DateCarry[DateCarry.size] = ПроводкиПлатежа[i].rec.Date_Carry;
      end;
      i = i + 1;
    end;
    if( Amounts[_Rest] != 0 )  
      Amounts[_StartAmount] = ЗачисленнаяНаК2Сумма( paym );

      //Gurin S. 20.02.2015 R-547386-2
      //Amounts[_Rest] = Amounts[_Rest] + Amounts[_StartAmount];
      var sql = execSqlSelect("select nvl(max(sum),0) from (SELECT SUM(t_amount) sum FROM dpmlink_dbt " +
                              " WHERE T_INITIALPAYMENT = " + PaymentID +" and T_INITIALPAYMENT != T_PURPOSEPAYMENT)"); //Gurin S. 16.03.2015 R-556742-2 
      sql.movenext();
      Amounts[_Rest] = Amounts[_StartAmount] - sql.value(0);

      Amounts[_Rest] = СуммаВВалютеСчета( Amounts[_Rest], DateOut, paym );
      Days[Days.size] = DateCarry[DateCarry.size - 1] - GetDatePlaced( PaymentID );
    end;
  end;
  // конструктор
  Init( ПроводкиПлатежа, PaymentID, Amounts );
end;

//--------------------------------------------------------------------------------------
// Функции печати разных частей отчета
//--------------------------------------------------------------------------------------
private macro PrintHeader()
[
  #
]( {Name_Bank}:l);
end;

private macro PrintDprtHeader( DepNum:integer )
  var DepCode= "", DepName = "";
  CB_GetDepartmentCodeAndName( DepNum, DepCode, NULL, DepName );
if ( DepName != "" )
[ 
  ###################################################################
]( string(DepCode, "  ", DepName) );
end;
[
                                                       Ведомость документов, проведенных из картотеки N2
];
  if( DateIn == DateOut )
[                                                                   ######################
]( DateIn:m );                                 
  else
[                                                       c #################### по ######################
]( DateIn:m,DateOut:m );
  end;
[                                                     по счетам в валюте ####  ################################
]( FI_Code, FI_Name );                                 
end;

private macro PrintOperHeader( Oper:integer )
[
  Операционист:    #
]( Oper );
[┌─────┬──────────┬──────┬─────────────────────────┬───────────────────────────────────┬────────────┬────────────┬────────────┬──────────────┬────────────┬──────────┐
 │  N  │   Дата   │Кол-во│     Плательщик          │            Получатель             │            │            │            │              │            │          │
 │ док │ документа│ дней │                         ├─────────┬─────────────────────────┤  Начальная │ Оплаченная │ Отозванная │ Сумма, пере- │  Остаток   │   Дата   │
 │     │          │      │                         │   БИК   │          Счет           │    сумма   │   сумма    │   сумма    │несенная в КОР│            │ движения │
 ├─────┼──────────┼──────┼─────────────────────────┼─────────┼─────────────────────────┼────────────┼────────────┼────────────┼──────────────┼────────────┼──────────┤
];
end;

private macro PrintItogAccount( Account:string, counts:TArray, amounts:TArray )
[│  Итого по счету #########################   сумма                                   │            │############│############│##############│            │          │
 │                                             количество документов                   │            │         ###│         ###│           ###│            │          │
 │                                                                                     │            │            │            │              │            │          │
]( Account:f, amounts[_PayAmount]:a, amounts[_RecallAmount]:a, amounts[_KORAmount]:a, counts[_PayAmount], counts[_RecallAmount], counts[_KORAmount] );
end;

private macro PrintItogOper( Oper:integer, counts:TArray, amounts:TArray )
[└─────────────────────────────────────────────────────────────────────────────────────┴────────────┴────────────┴────────────┴──────────────┴────────────┴──────────┘];
[ Итого по операционисту ############          сумма                                                 ############ ############ ##############
                                               количество документов                                          ###          ###            ###
]( Oper:l, amounts[_PayAmount]:a, amounts[_RecallAmount]:a, amounts[_KORAmount]:a, counts[_PayAmount], counts[_RecallAmount], counts[_KORAmount] );
end;

private macro PrintItogDprt( NumDprt:integer, counts:TArray, amounts:TArray )
[

  Всего                                        сумма                                                 ############ ############ ##############
                                               количество документов                                          ###          ###            ###

]( amounts[_PayAmount]:a, amounts[_RecallAmount]:a, amounts[_KORAmount]:a, counts[_PayAmount], counts[_RecallAmount], counts[_KORAmount] );
end;

private macro PrintDocument( PaymentObj:object, amounts:TArray )

  var ReceiverBankBIC;                              
  GetPartyCodeEx( PaymentObj.ReceiverBankID, PTCK_BIC, @ReceiverBankBIC );

[│#### │##########│######│#########################│#########│#########################│############│############│############│##############│############│##########│
]( PaymentObj.Number,PaymentObj.Date, Days[curline], PaymentObj.PayerAccount, ReceiverBankBIC, PaymentObj.ReceiverAccount:f, 
   amounts[_StartAmount]:a, amounts[_PayAmount]:a, amounts[_RecallAmount]:a, amounts[_KORAmount]:a, amounts[_Rest]:a, DateCarry[curline] );  
  curline = curline + 1;
end;

macro PrintVed_K2( MapVal :PSRepMap )
  /* Данные панели */
  DateIn           = MapVal.Value( "DateIn"  );
  DateOut          = MapVal.Value( "DateOut" );
  DepNum           = MapVal.Value( "DepNum"  );
  NodeNum          = MapVal.Value( "NodeNum" );
  OperOP           = MapVal.Value( "Oper"    );
  FIID             = MapVal.Value( "FIID"    );
  Account          = MapVal.Value( "Account" );
  iOutForm         = MapVal.Value( "iOutForm");
  iMont            = MapVal.Value( "iMont"   );
  var     fininstr = TRecHandler("fininstr.dbt");
  if( not ПолучитьФинИн( FIID, fininstr ) )
    FI_Code = fininstr.rec.FI_Code;
    FI_Name = fininstr.rec.Name;
  end;
  /* Запрос */ 
  var params:TArray  = TArray();
  var select:string = "";


  // Вспомогательное
  var I2VedReport     :object = NULL;
  var PaymentObj      :object = NULL;     // Объект платежа
  var Payments        :TArray = TArray(); // Массив платежей
  var Doc             :object = NULL;     // Объект для подсчета сумм платежа
  var Проводки        :TArray = TArray(); // Массив проводок по платежу
  var Amounts         :TArray = TArray(); // Массив сумм платежа
  var fCarry          :object = TbFile( "acctrn.dbt", "R" );
  var dd, mm, yy; 
  var accOper;
  var InintialPaymentID;

  select = ВыбратьПроводкиПоВнебалансуВида( " 51, 52, 53, 74 ", DateIn, DateOut, params ) + " AND trn.t_State = 1 ";
  ДобавитьУсловиеПоСчетуПлательщика      ( @select, params, Account );
  ДобавитьУсловиеПоФилиалуСчета          ( @select, params, DepNum  );
  ДобавитьУсловиеПоВСПСчета              ( @select, params, NodeNum );
  if( OperOP > 0 )
    select = select + " AND ac.t_Oper = :Oper ";
    params[params.size]   = SQLParam( "Oper", OperOP );    
  end; 
  ДобавитьУсловиеПоВалютеСчетаПлательщика( @select, params, FIID    );

  select = select + " ORDER BY ac.t_Department, ac.t_Branch, ac.t_Oper, ac.t_Account, trn.t_Numb_Document";

  var ReportHead = "Документы, проведенные из картотеки №2";

  var rs:RsdRecordset = execSQLselect( select, params, FALSE );
  if( rs )
    rs.Command.NullConversion = true; debugbreak;
    while( ( rs.MoveNext() ) and ( rs.value(1) > 0 ) )

      InintialPaymentID = GetInitialPayment(rs.value(1));
      if( ValType( PaymentObj ) != V_GENOBJ )
        PaymentObj = RsbPayment( InintialPaymentID );
        accOper    = rs.value(2);
      end;
      // если проводка уже по другому платежу
      if( ( PaymentObj.PaymentID != InintialPaymentID ) )
        PaymentObj.Oper         = accOper; // группировать будем по операционисту счета, а не платежа
        if( NodeNum > 0 )
          PaymentObj.Department   = NodeNum;
        end;
        Payments[Payments.size] = PaymentObj; // предыдущий платеж заносим в массив
        Amounts[Amounts.size]   = TArray();             // подсчитываем для него суммы
        СуммыПлатежа( Проводки, PaymentObj.PaymentID, Amounts[Amounts.size-1] );
        PaymentObj = RsbPayment( InintialPaymentID );         
        accOper    = rs.value(2);
        Проводки   = TArray();                          
      end;
      fCarry.rec.AccTrnID = rs.value(0);
      if( fCarry.GetEQ() )
        Проводки[Проводки.size] = TRecHandler("acctrn.dbt");
        copy( Проводки[Проводки.size-1], fCarry );
      end;
    end;//while( rs.MoveNext())

  end;
  if( Проводки.size > 0 )
    PaymentObj.Oper         = accOper; // группировать будем по операционисту счета, а не платежа
        if( NodeNum > 0 )
          PaymentObj.Department   = NodeNum;
        end;
    Payments[Payments.size] = PaymentObj;
    Amounts[Amounts.size]   = TArray();
    СуммыПлатежа( Проводки, PaymentObj.PaymentID, Amounts[Amounts.size-1] );
  end;
                                                                                                 
  I2VedReport = TPSReportPayments( ReportHead, "PR_IND2O.mac", Payments, Amounts, DateIn, DateOut, DepNum, OperOP );

  I2VedReport.PrintPSReportPayments();

end;
