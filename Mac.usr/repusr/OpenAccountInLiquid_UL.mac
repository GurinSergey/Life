/************************************************************************/
/* ОТЧЕТ ОБ ОТКРЫТЫХ СЧЕТАХ КЛИЕНТОВ ЮЛ ПОПАВШИХ В СПРАВОЧНИК ЛИКВЮЛ ЦБ */
/*                                                                      */
/* Дунаев Аркадий                                                       */
/* Начато 13.03.2013                                                    */
/*                                                                      */
/* C-17537                                                              */
/*                                                                      */
/************************************************************************/

import bankinter, RsbDataSet, rsexts, globals;

var TEXTDIR_REESTR : string = "BANK_INI/ОБЩИЕ ПАРАМЕТРЫ/ДИРЕКТОРИИ/TEXTDIR";
var rs;
var ob, ex, Fulloutput, output = "Открытые счета клиентов из справочника ЛИКВЮЛ.xls";
var obBook, obSheet;
var tempFileName:string = "", tempFileNameBezPuti:string ="";

FILE wf () txt write;

macro TextSQLCreat():string;
var TextSQL : string = "";
  TextSQL = "SELECT   ACC.T_ACCOUNT, ACC.t_name as pts, kl.T_PARTYID, kl.T_NAME, "+
            //"         DECODE (acc.t_kind_account, "+
            //"                 'А', -rsb_account.resta (acc.t_account, SYSDATE, acc.t_chapter, NULL), "+
            "                       rsb_account.resta( acc.t_account, SYSDATE, acc.t_chapter, NULL ) AS t_r0, "+
            "         nvl(kl.ogrn, chr(0)) as OGRN, nvl(kl.inn, chr(0)) as INN, kl.ogrn2, kl.inn2, kl.NAMEP, kl.NAME as status, TO_CHAR (kl.DTSTART, 'dd.mm.yyyy') AS DTSTART "+
            "  FROM   (SELECT   z2.T_PARTYID, z2.T_NAME, z2.ogrn, z2.inn, z3.ogrn AS ogrn2, z3.inn AS inn2, z3.NAMEP, z3.NAME, z3.DTSTART "+
            "            FROM   (SELECT   z1.T_PARTYID, z1.T_NAME, z1.T_CODE AS OGRN, SUBSTR (I.T_CODE, 1, INSTR (I.T_CODE, '/') - 1) AS INN "+
            "                      FROM      (SELECT   P.T_PARTYID, O.T_CODE, P.T_NAME "+
            "                                   FROM      dparty_dbt p "+
            "                                          LEFT JOIN "+
            "                                             dobjcode_dbt o "+
            "                                          ON P.T_PARTYID = O.T_OBJECTID "+
            "                                  WHERE       O.T_OBJECTTYPE = 3 "+
            "                                          AND O.T_CODEKIND = 27 "+
            "                                          AND O.T_STATE = 0) z1 "+
            "                             LEFT JOIN "+
            "                                dobjcode_dbt i "+
            "                             ON z1.T_PARTYID = I.T_OBJECTID "+
            "                     WHERE       i.T_OBJECTTYPE = 3 "+
            "                             AND i.T_CODEKIND = 16 "+
            "                             AND I.T_STATE = 0) z2, "+
            "                   (SELECT   LUL.NAMEP, SLUL.NAME, LUL.DTSTART, LUL.INN, LUL.OGRN "+
            "                      FROM   USR_UL_LIQUIDATION lUL, "+
            "                             USR_DICT_UL_LIQUIDATION_STATUS slul "+
            "                     WHERE   LUL.STATUS_LIQUIDATION_INNER_ID = SLUL.STATUS_LIQUIDATION_INNER_ID) z3 "+
            "           WHERE   z2.ogrn = z3.ogrn) kl, "+     
            "         (SELECT   A.T_ACCOUNT, A.T_CLIENT, ts.t_name, a.t_chapter, a.t_kind_account "+          
            "            FROM   (SELECT   A.T_ACCOUNT, A.T_CLIENT, A.T_BRANCH, a.t_chapter, a.t_kind_account "+
            "                      FROM   daccount_dbt a "+
            "                     WHERE   a.t_chapter = 1 AND a.t_open_close <> 'З') a, "+
            /* EVG 5/2/2014 Переход на 2031. daccount$_dbt больше не нужно.
            "                     UNION "+
            "                    SELECT   A.T_ACCOUNT, A.T_CLIENT, A.T_BRANCH, a.t_chapter, a.t_kind_account "+
            "                      FROM   daccount$_dbt a "+
            "                     WHERE   a.t_chapter = 1 AND a.t_open_close <> 'З') a, "+*/
            "                   ddp_dep_dbt ts "+
            "           WHERE   ts.t_code = a.T_BRANCH) acc "+
            " WHERE   ACC.T_CLIENT = kl.T_PARTYID "+
            " order by kl.t_partyid, ACC.T_ACCOUNT ";
  Return TextSQL;
end;

macro ReadRecordsSet (TextSQL : String);
  rs = TRsbDataSet(TextSQL);
  if (rs == NULL)
    exit(1);
  else
    if (SetParm(0,rs) == FALSE)
      exit(1);
    end;
  end;
end;

macro HeadLine();
  wf.str = "ОТЧЕТ ОБ ОТКРЫТЫХ СЧЕТАХ КЛИЕНТОВ, ПОПАВШИХ В СПРАВОЧНИК ЛИКВЮЛ ЦБ"; insert(wf);
  wf.str = ""; insert(wf);
  wf.str = "№  счета|Остаток|Код ТС|Наименование клиента в RS|ОГРН Клиента|ИНН Клиента|Наименование Клиента в списке ЦБ|Статус юр.лица|Дата присвоения статуса"; insert(wf);
end;

macro BobyLine();
var ln = 0;
  InitProgress(-1,"","Идет анализ счетов клиентов");
  while (rs.MoveNext)
    wf.str = rs.T_ACCOUNT+"|"+rs.T_R0+"|"+rs.pts+"|"+rs.T_NAME+"|"+rs.OGRN+"|"+rs.INN+"|"+rs.NAMEP+"|"+rs.status+"|"+rs.DTSTART; insert(wf);
    ln = ln + 1;
    UseProgress(ln);
  end;
  RemProgress();
end;

macro createUniqueFile(BeginName)
var ff:string = BeginName+{oper}+"_"+date+"_"+time; //{oper}
var file_ext:string = ".txt";
  //debugbreak();
  tempFileName = ExecMacroFile("lib_registry.mac","RSL_GetRegistryValue",TEXTDIR_REESTR,True);
  tempFileName = tempFileName + "\\" + ff;
  tempFileNameBezPuti = ff;
  tempFileName = StrSubst ( tempFileName, ".", "_" );
  tempFileName = StrSubst ( tempFileName, ":", "_" );
  tempFileName = StrSubst ( tempFileName, " ", "_" );
  tempFileName = tempFileName + file_ext;
  tempFileNameBezPuti = StrSubst ( tempFileNameBezPuti, ".", "_" );
  tempFileNameBezPuti = StrSubst ( tempFileNameBezPuti, ":", "_" );
  tempFileNameBezPuti = StrSubst ( tempFileNameBezPuti, " ", "_" );
  tempFileNameBezPuti = tempFileNameBezPuti + file_ext;
  if (substr(tempFileName,1,2) == "__")
    tempFileName=".."+substr(tempFileName,3)
  end;
end;

macro copyTempFileToMe()
var m_path: string = "";
  m_path = "$c:\\rspar\\" + tempFileNameBezPuti;
  if (not CopyFile(tempFileNameBezPuti, m_path, TRUE))
    println ("НЕ СМОГ скопировать файл с сервера приложений на терминал. \n исходный файл: "+tempFileNameBezPuti+" \n файл назначения: " + m_path);
    exit(0);
  else 
    println ("УСПЕШНО скопирован файл с сервера приложений на терминал. \n исходный файл: "+tempFileNameBezPuti+" \n файл назначения: " + m_path);
    if (not removeFile(tempFileName))
      println("Не смог удалить файл "+tempFileName+" с сервера приложений. ничего сташного, продолжаем работу.");
    else
      println("УСПЕШНО удален файл "+tempFileName+" с сервера приложений.");
    end;
  end;
end;

macro SetTypeColumns(aw:tarray);
var w1=tarray(true);
var w2=tarray(true);
var w3=tarray(true); 
var w4=tarray(true); 
var w5=tarray(true);
var w6=tarray(true); 
var w7=tarray(true); 
var w8=tarray(true); 
var w9=tarray(true); 

   w1(0)=1; w1(1)=2; //формат столбца - General
   w2(0)=2; w2(1)=1; //формат столбца - General
   w3(0)=3; w3(1)=2; //формат столбца - General
   w4(0)=4; w4(1)=2; //формат столбца - General
   w5(0)=5; w5(1)=2; //формат столбца - General
   w6(0)=6; w6(1)=2; //формат столбца - General  
   w7(0)=7; w7(1)=2; //формат столбца - General  
   w8(0)=8; w8(1)=2; //формат столбца - General  
   w9(0)=9; w9(1)=4; //формат столбца - General  
  
   aw(0)=w1;
   aw(1)=w2;
   aw(2)=w3;
   aw(3)=w4;
   aw(4)=w5;
   aw(5)=w6;
   aw(6)=w7;
   aw(7)=w8;
   aw(8)=w9;
end;

macro FinalLine();
  close(wf);
end;

macro ExcelFromLocalFile();
var dd:date, tt:time, ii:integer, ss:string;  // это переменные для использования FileInfo
  copyTempFileToMe();

  ex.visible=false;
  println("Excel version "+ex.version+";  DefaultPath = "+ex.DefaultFilePath+"; CurDir = "+GetCurDir(true));
  ss = "";
  GetFileInfo("$"+tempFileNameBezPuti,dd,tt,ii,@ss);
  println(ss);

  if (not(GetFileInfo("$c:\\rspar\\"+tempFileNameBezPuti,@dd,@tt,@ii,@ss))); //ss- то что надо. полный путь абсолютный локальный
    println("не мог найти на локальном диске файл "+tempFileNameBezPuti+"          \n останавливаюсь");
    exit(0);
  end;
  ss = substr(ss,2); // откусили первый знак бакса

  var aw=tarray(true); 
  SetTypeColumns(aw);
                     
  obBook = ex.Workbooks.opentext (ss, 866, 1, 1,2,false,false,false,false,false,true,"|",aw,1,"."," ",true,false);
                                /*
                                  (Filename     - Имя файла,
                                   Origin               - Кодировка,
                                   StartRow     - Номер строки, с которого начинается разбор текста,
                                   DataType     - Формат данных в файле. Может быть одним из следующих констант: xlDelimited = 1 (с разделителем) или xlFixedWidth = 2 (по ширине). 
                                                   Если этот аргумент не указан, Microsoft Excel пытается определить формат столбца при открытии файла,
                                   TextQualifier        - Задает текст классификатора,    
                                   ConsecutiveDelimiter - Последовательные разделители считаются одним разделителем (True - считать),
                                   Tab          - Символ табуляции считать разделителем ( True - считать, DataType должен быть xlDelimited ),
                                   Semicolon    - Точку с запятой считать разделителем ( True - считать, DataType должен быть xlDelimited ),
                                   Comma                - Запятую считать разделителем ( True - считать, DataType должен быть xlDelimited ),
                                   Space                - Пробел считать разделителем ( True - считать, DataType должен быть xlDelimited ),
                                   Other                - Заданный символ считать разделителем ( True - считать, DataType должен быть xlDelimited ),
                                   OtherChar    - Определяет символ-разделитель ( Other дожно быть True ). 
                                                   Если указан более чем один символ, только первый символ строки используется, а остальные символы игнорируются.,
                                   FieldInfo    - Массив, содержащий информацию для разбора отдельных столбцов данных (типы данных по столбцам). 
                                                   Интерпретация зависит от значения DataType. 
                                                   Когда данные с разделителями, этот аргумент является массивом из двух элементов массива, 
                                                   при этом каждый из двух элементов массива указает параметры преобразования для конкретного столбца. 
                                                   Первый элемент является номером столбца, а второй элемент является одним из значений XlColumnDataType, 
                                                   определяющей как столбец обрабатывается.
                                                   Перечень возможных значений второго элемента для разных типов данных:
                                                   Константа            Значение        Тип данных 
                                                   xlDMYFormat          4               DMY date format. 
                                                   xlDYMFormat          7               DYM date format. 
                                                   xlEMDFormat          10              EMD date format. 
                                                   xlGeneralFormat      1               General. 
                                                   xlMDYFormat          3               MDY date format. 
                                                   xlMYDFormat          6               MYD date format. 
                                                   xlSkipColumn 9               Column is not parsed. 
                                                   xlTextFormat 2               Text. 
                                                   xlYDMFormat          8               YDM date format. 
                                                   xlYMDFormat          5               YMD date format. 
                                   TextVisualLayout     - Визуальная разметка текста,
                                   DecimalSeparator     - Разделитель, что Microsoft Excel использует при распознавании десятичных чисел. По умолчанию настройки системы,
                                   ThousandsSeparator   - Разделитель тысяч, что Excel использует при распознавании чисел. По умолчанию настройки системы,
                                   TrailingMinusNumbers - Если цифры с минусом в конце, должны рассматриваться как отрицательные числа - True. 
                                                          Если False или опущен, цифры с минусом в конце рассматриваются как текст,
                                   Local                - Если региональные настройки машины должны быть использованы для сепараторов, цифры и форматирования данных - True
                                */
end;

macro FormatExcel();
var sel_range;
  BegAction (1, "Формирование таблицы", false);
  obSheet = ex.Sheets(1);
  
  obSheet.Cells.Font.Name = "Arial";
  obSheet.Cells.Font.Size = 10;
  obSheet.Columns("A:A").ColumnWidth = 21;
  obSheet.Columns("B:B").ColumnWidth = 14;
  obSheet.Columns("C:C").ColumnWidth = 6;
  obSheet.Columns("D:D").ColumnWidth = 55;
  obSheet.Columns("E:E").ColumnWidth = 14;
  obSheet.Columns("F:F").ColumnWidth = 14;
  obSheet.Columns("G:G").ColumnWidth = 55;
  obSheet.Columns("H:H").ColumnWidth = 40;
  obSheet.Columns("I:I").ColumnWidth = 13;

  obSheet.Columns("A:I").VerticalAlignment = -4160;//xlTop
  obSheet.Columns("B:I").WrapText = True;//Перенос по словам

  sel_range = obSheet.Range("A3:I3");          
  sel_range.HorizontalAlignment = -4108;//xlCenter;
  sel_range.VerticalAlignment = -4108;//xlCenter;
  sel_range.WrapText = True;
  sel_range.Font.Bold = True;//FontStyle = "полужирный";
  sel_range = obSheet.Range("A1:I1");
  sel_range.HorizontalAlignment = -4131;//xlLeft;
  sel_range.VerticalAlignment = -4108;//xlCenter;
  sel_range.MergeCells = True;
  sel_range.Font.Bold = True;//FontStyle = "полужирный";
  
  obSheet.Range("A4").Select;
  ex.ActiveWindow.FreezePanes = True;

  ex.ActiveWindow.selection.AutoFilter;

  if (not removeFile("$"+ex.DefaultFilePath+"\\"+output))
    println("Не смог удалить файл "+ex.DefaultFilePath+"\\"+output+" с локального диска. Ничего сташного, продолжаем работу.");
  else
    println("УСПЕШНО удален файл "+ex.DefaultFilePath+"\\"+output+" с локального диска.");
  end;
  ex.ActiveWorkbook.SaveAs(output,-4143); 
  if (not removeFile("$c:\\rspar\\"+tempFileNameBezPuti))
    println("Не смог удалить файл "+"c:\\rspar\\"+tempFileNameBezPuti+" с локального диска. Ничего сташного, продолжаем работу.");
  else
    println("УСПЕШНО удален файл "+"c:\\rspar\\"+tempFileNameBezPuti+" с локального диска.");
  end;
  ex.visible = true;
  EndAction();
end;

macro ReturnStart();
var wb;
  ob = CreateObject ("rsax","TRsAxServer","RsAxServer",IsStandAlone());
  ex = ob.CreateComObject ("Excel.Application", True);
  for (wb,ex.workbooks)
    if(wb.name == output)
       msgbox("Файл и именем "+output+" открыт. \nСохраните его с другим именем и закройте. \nПри открытом файле продолжение выпуска отчета невозможно.");
       exit(0);
    end;
  end;
  if (GetFileInfo("$"+ex.DefaultFilePath+"\\"+output)); 
    if (not GetTrue(True,"На локальном диске есть файл "+ex.DefaultFilePath+"\\"+output+" \n Продолжение, заменит имеющиеся в нем данные на новые. \nПродолжить?"))
      exit(0);
    end;
  end;

end;

macro main();
  ReturnStart();
  createUniqueFile("AccountLiquidUL__");
  Open (wf,tempFileName);
  HeadLine();
  ReadRecordsSet (TextSQLCreat());
  BobyLine();
  FinalLine();
  ExcelFromLocalFile();
  FormatExcel();
end;

println("ПРОТОКОЛ ОТЧЕТА: \n");
main();
exit(1);