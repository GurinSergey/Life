/************************************************************************/
/*          Автоматизированная банковская система RS-Bank v6.0          */
/*                                                                      */
/*               Copyright (c) R-Style Softlab Kiev                     */
/*                                                                      */
/*  Имя файла        : nal_reg.mac                                      */
/*                                                                      */
/*  Описание         : Налоговый регистр                                */
/*                                                                      */
/*  Программист      : Солошенко В. А.                                  */
/*                                                                      */
/*  Создан           : 25.12.2009                                       */
/*                                                                      */
/*  Модифицирован    : Ярмольчук А.Ю.                                   */
/*                                                                      */
//10.07.2012 vihrov I-00218492-2 вобще не понял нахрена димон это условие поставил. еще проверку на дату поставил
/************************************************************************/
//23.08.2012 vihrov I-00230835-2 добавил банковский ордер по просьбе Карнауховой
//Gurin S. N. I-00250532-2 10.09.2012
//Gurin S. N. I-00251202-2 12.09.2012 
//LVV I-00515539 16.09.2014 Адаптация под 31 версию РС БАНК

import globals, oralib, bankinter, "KeyCodes.mac", repforms, Календарь,/* xlrep, */PTInter, cb_sql ;
import "fg_Life_parm.mac";

//Установить значения констант для конвертированных платежей в К2 и КОР
private Const fdBank = fg_life_subject({OurBank});
 
Var
 FactDateforK2_toConversionDate, //фактическая дата проставляется после конвертации на конвертированных платежах в К2
 FactDateforKOR_toConversionDate; //фактическая дата проставляется после конвертации на конвертированных платежах в КОР



if ( fdBank.is_GEB )
 FactDateforK2_toConversionDate = "19.11.2010";
 FactDateforKOR_toConversionDate = "19.11.2010";
elif ( fdBank.is_VUZ )
 FactDateforK2_toConversionDate = "05.01.2011";
 FactDateforKOR_toConversionDate = "10.01.2011";
elif ( fdBank.is_EXV )
 FactDateforK2_toConversionDate = "05.03.2011";
 FactDateforKOR_toConversionDate = "05.03.2011";
 elif ( fdBank.is_SLD )  //LVV   I-00515539  Переменные выставил как в ЭВ. Какой датой нужно инициировать правильно - пока не понятно.
 FactDateforK2_toConversionDate = "05.03.2011";  
 FactDateforKOR_toConversionDate = "05.03.2011";
end;
//Установить значения констант для конвертированных платежей в К2 и КОР


var path = "",
    pathfile = "",
    file_lbr = "RSU.lbr";


var RepDate, DepName, RateCB, IsTxtRep = False;
var dlg;
var Numb = 0;
var ComisBySrok = TArray();
var ComisBySrokItog = TArray();

const Смещение=9;         /* для печати итогов */
const Смещение_2005 = 3;  /* смещение для подгружаемых данных (начало) */

/* Константы для подгружаемого файла */
const Столбец_номер        = "A";
const Столбец_имя_клиента  = "B";
const Столбец_код_клиента  = "C";
const Столбец_имя_комиссии = "D";
const Столбец_номер_договора="E";
const Столбец_дата_договора ="F";
const Столбец_дата_задолж   ="G";
const Столбец_сумма_комиссии="H";
const Столбец_примечание    ="I";

/* Константы для шаблона итогового отчета */
const Столбец_итог_номер                 = "A";
const Столбец_итог_имя_клиента           = "B";
const Столбец_итог_код_клиента           = "C";
const Столбец_итог_имя_комиссии          = "D";
const Столбец_итог_номер_и_дата_договора = "E";
const Столбец_итог_дата_задолж           = "F";
const Столбец_итог_сумма_комиссии_вал    = "G";
const Столбец_итог_код_валюты            = "H";
const Столбец_итог_курс_ЦБ               = "I";
const Столбец_итог_сумма_комиссии_руб_   = "J";
const Столбец_итог_сумма_комиссии_руб    = "K";
const Столбец_итог_сумма_до_45           = "L";
const Столбец_итог_сумма_45_90           = "M";
const Столбец_итог_сумма_более_90        = "N";
const Столбец_итог_примечание            = "O";

/* Несколько констант VBA */
const xlAscending         = 1;
Const xlGuess             = 0;
Const xlTopToBottom       = 1;
Const xlSortTextAsNumbers = 1;

/*const bank_file_2005 = "D:\\Softlab\\PRBB\\A50196_налоговые_регистры\\закр.счета c 2005г.без ЦМТ для V6.xls";*/
var bank_file_2005;

array choice_dir;

/* Печать длинных строк */
macro print_jar (jar_name, text)

  file query_file () txt 4096 write;

  var query_file_name;
  var date_rep, time_rep;

  if ((jar_name)=="" or (valtype (jar_name==V_UNDEF)))

     date_rep=strsubst (string (date),".","");
     time_rep=strsubst (string (time),":","");

     jar_name="query_"+date_rep+"_"+time_rep+".txt";

  end;

  if (not open (query_file,"..\\TXTFILE\\"+jar_name))
     msgbox ("Не могу открыть файл "+jar_name);
  else
     insert (query_file, text);
     close (query_file);
  end;

end;




record DepBuff (dp_dep);

Private macro PrintHead()
[
Комиссии (доходы), начисленные по картотеке № 2 по состоянию на ########## г., не проведенные по балансу

                              ##################################################

Курс ЦБ РФ на последний день отчетного налогового периода ##########
┌────┬──────────────────────────┬────────────────────┬─────────────────────────────────────┬───────────────────────────────┐
│ NN │   Название организации   │        Счет        │               Обороты               │            Филиал             │
│    │                          │                    │      Дебет       │      Кредит      │                               │
├────┼──────────────────────────┼────────────────────┼──────────────────┼──────────────────┼───────────────────────────────┤
│  1 │            2             │          3         │        4         │        5         │               6               │
├────┼──────────────────────────┼────────────────────┼──────────────────┼──────────────────┼───────────────────────────────┤
](RepDate, DepName, RateCB);
end;

                                                                                                                                 
private macro PrintLine(_numb, _name, _acc, _dt, _ct, _ts);

[│####│##########################│####################│##################│################# │###############################│
 │    │                          │                    │                  │                  │                               │
](_numb, _name:c, _acc:c, _dt:c, _ct:c, _ts:c);
end;


Private macro PrintBottom()
[│____│__________________________│____________________│__________________│__________________│_______________________________│

    Сумма комиссии, начисленная в момент возникновения задолженности (без НДС (руб.): #################
    из них:
       комиссия начисленная до 45 дней       (руб.): #################
       комиссия начисленная от 45 до 90 дней (руб.): #################
       комиссия начисленная свыше 90 дней    (руб.): #################

] (ComisBySrokItog[0]+ComisBySrokItog[1]+ComisBySrokItog[2],
   ComisBySrokItog[0],
   ComisBySrokItog[1],
   ComisBySrokItog[2]
  )
end;



MACRO DefaultParm_ ( parm, value )
 var ret_val;

    if ( (parm == NULL) or (valtype (parm)==V_UNDEF) or (valtype (parm) == 26))
        ret_val = value;
    else
        ret_val = parm;
    end;

    return ret_val;
END;

/* Преобразование строки в дату */
macro convstr2date (str_in)
 var ret_val="";
 var dd, mm, yyyy;

   str_in=trim (str_in);

   if ((valtype (str_in)==V_UNDEF) or 
       (str_in=="")                or
       (index (str_in,".")==0)
      )
      ret_val="";
   end;

   /*dd.mm.yy*/
   if ((substr (str_in, 3,1)==".") and 
       (substr (str_in, 6,1)==".") and
       (strlen (str_in)==8) 
      )
      dd   = substr (str_in,1,2);
      mm   = substr (str_in,4,2);
      yyyy = substr (str_in,7,2);
      if (yyyy<50)
        yyyy="20"+yyyy;
      else
        yyyy="19"+yyyy;
      end;
      ret_val=date (int (dd),int (mm),int (yyyy));
   end;

   return ret_val;
end;

Macro CreTmpTable

  var sqltab;

  sqltab = "DECLARE \n"
      +  " v_err EXCEPTION; \n"
      +  " PRAGMA EXCEPTION_INIT( v_err, -955 );\n"
      + "BEGIN EXECUTE IMMEDIATE 'CREATE GLOBAL TEMPORARY TABLE dnal_reg_dbt"
/*      + "BEGIN EXECUTE IMMEDIATE 'CREATE TABLE dnal_reg_dbt"*/
      + " ( t_payername  VARCHAR2 (320), " 
      + "   t_payercode  VARCHAR2 (35),  "
      + "   t_commname   VARCHAR2 (200), "
      + "   t_contractid NUMBER   (10),  "
      + "   t_date_contract DATE,        "
      + "   t_datevalue     DATE,        "
      + "   t_commsum    NUMBER (32,12), "
      + "   t_ndssum     NUMBER (32,12), "
      + "   t_sum_srok1  NUMBER (32,12), "
      + "   t_sum_srok2  NUMBER (32,12), "
      + "   t_sum_srok3  NUMBER (32,12), "
/*      + "   t_note       VARCHAR2 (320)) '; \n"*/
      + "   t_note       VARCHAR2 (320)) "
      + "   ON COMMIT PRESERVE ROWS '; \n"
      + "   EXECUTE IMMEDIATE 'CREATE INDEX dnal_reg_dbt_idx0 ON  dnal_reg_dbt  (t_datevalue) '; \n"
      + " EXCEPTION WHEN v_err THEN NULL;         \n"
      + " END;                                    \n";


  SQL_Execute(sqltab,"Создание таблицы отчета", false);

  SQL_Execute ("delete from dnal_reg_dbt"," Очистка таблицы...", false);

End;


/* Макрос печати отчета */
Macro MakeReport(ch)
var select = "";
var sql, sumVB, sqlAdd, query_text;
var rs:object = NULL;
var type:object = NULL; 

/*переменные для шаблона .xlt*/
var Templ:string = "";
var Rep:object = NULL ;
var RegParam:string = "";

var ex, ob, obBook, obSheet;
var exrep, obrep, obBookRep, obSheetRep;
var value_i;
var stat;

var Наименование_клиента;
var Код_клиента         ;
var Имя_комиссии        ;
var Номер_договора      ;
var Дата_договора       ;
var Дата_возникновения  ;
var Сумма_комиссии      ;
var Сумма_НДС           ;
var Сумма_до_45         ;
var Сумма_45_90         ;
var Сумма_от_90         ;
var Примечание          ;


var i:integer = 0;

var Fl_Header = 1, Fl_Footer = 0;


  macro Prn_Header_Log
   [                      Протокол возможных ошибок отчета "Налоговый регистр"

   ];
   [ +----------------+-----------------+-----------------+-----------------------------+
     | Код субъекта   | Первоначальная  | Остаток         | Остаток задолж.             |
     |                | сумма задолж.   | задолж.         | по счету задолж.            |
     |                | (отчет)         | (отчет)         |                             |
     +----------------+-----------------+-----------------+-----------------------------+
   ];
  end;

  macro Prn_Footer_Log
   [ +----------------+-----------------+-----------------+-----------------------------+ ];
  end;
  private var est_invalid_data:bool = false;

  private macro check_data(sd:string, sn:string, sc:string)
	if  (((index(sd,".") == 0) or (index(sd,",") != 0) or (strlen(substr(sd,7)) != 4) or (int(substr(sd,7)) <1980) or (int(substr(sd,7)) >2050)  )
			and (not(sd == "")))   
		println("неверная дата  " + sd + " клиент: " + sn + " код: " + sc);
		est_invalid_data = true;
	end;
  end;

  /*Шаблон для создания отчета в Excel*/  
  Templ = "nal_reg.xlt";   
  GetRegistryValue("BANK_INI\\ОБЩИЕ ПАРАМЕТРЫ\\ДИРЕКТОРИИ\\USERTEMPLSDIR", 2, RegParam);
  RegParam = FindPath(Templ, RegParam);
   if (not RegParam)
      msgbox("Не найдена LBR");
      exit();
   end;

  /*RegParam = "D:\\Softlab\\PRBB\\Stend\\mac.usr\\Templs\\Nal_reg.xlt";*/
  
  if (IsTxtRep) 
    PrintHead(RepDate, DepName, RateCB);
  end;

  CreTmpTable;

  if (not IsTxtRep)
/*    Rep = CExcelRepMaker(RegParam);*/
          /* Заполняем временную таблицу данными из xls-файла */
      if (IsStandAlone()) // Двухзвенка
         if ((ValType(exRep)!=V_UNDEF) and (exRep.Visible==False))
           exRep = ActiveX("Excel.Application",NULL,false); 
         else
           exRep = ActiveX("Excel.Application",NULL,true);
         end;
      else // Трехзвенка
         obRep = CreateObject ("rsax","TRsAxServer","RsAxServer",false);
         exRep = obRep.CreateComObject ("Excel.Application",true);
      end; 

      obBookRep  = exRep.Workbooks.add(RegParam); 
      obSheetRep = obBookRep.ActiveSheet(); 

  end;

 if (fdBank.is_PRBB ) //Gurin S. N. I-00250532-2 10.09.2012
     RepDate = RepDate - 1;
 end;

 sumVB = "(SELECT   pm.t_amount "+
              "            - (NVL ((SELECT SUM (arh1.t_sum_natcur) "+
              "                       FROM doproper_dbt opr1, "+
              "                            doprdocs_dbt doc1, "+
              "                            dacctrn_dbt arh1 "+
              "                      WHERE opr1.t_id_operation = "+
              "                                              opr.t_id_operation "+
              "                        AND opr1.t_id_operation = "+
              "                                             doc1.t_id_operation "+
              "                        AND (opr1.t_dockind = 201 or opr1.t_dockind = 286)"+  //23.08.2012 vihrov I-00230835-2 добавил банковский ордер по просьбе Карнауховой
              "                        AND doc1.t_acctrnid =  arh1.t_acctrnid "+
              "                        AND arh1.t_chapter = 3 "+
              "                        AND arh1.t_date_carry <= "+ GetSQLDate (RepDate)+" "+
              "                        AND SUBSTR (arh1.t_account_payer, 1, 5) = "+
              "                                                         '99999'), "+
              "                    0 "+
              "                   ) "+
              "              ) AS sum2 "+
              "       FROM DUAL) ";


    sqlAdd =  "  ( CASE WHEN ( NOT EXISTS( SELECT 1 FROM doprstep_dbt O " +
              "                            WHERE O.T_ID_OPERATION = OPR.T_ID_OPERATION AND O.T_BLOCKID=10000140 " +
              "                             AND O.T_ISEXECUTE = 'X' AND O.T_FACT_DATE <= " + GetSQLDate (RepDate) +  
              "                          ) " +
              "                AND ( PM.T_AMOUNT > PM.T_FUTUREPAYERAMOUNT AND PM.T_FUTUREPAYERAMOUNT <> 0 " +
              "                      OR PM.T_FUTUREPAYERAMOUNT <> PM.T_PARTPAYMRESTAMOUNTMAIN AND PM.T_FUTUREPAYERAMOUNT = 0 " +
              "                    ) " +
              "              ) " +
              "    THEN DECODE( PM.T_FUTUREPAYERAMOUNT, 0, PM.T_PARTPAYMRESTAMOUNTMAIN, PM.T_AMOUNT, PM.T_PARTPAYMRESTAMOUNTMAIN, PM.T_FUTUREPAYERAMOUNT) " +
              "    ELSE " + sumvb +           //Tikh - сумма по ВБ
              "    END " +
              "  ) ";

    if (not fdBank.is_PRBB )
       query_text = sqlAdd;
    else   
       query_text = sumvb;
    end;
    sql =  "INSERT INTO dnal_reg_dbt " +
           "  SELECT      rm.t_payername,                                 " + //Наименование клиента
           "              obj.t_code,                                 " + //Код клиента
           "              substr(rm.t_ground,1,200),                                      " + //Наименование комиссии
           "              SUBSTR (pm.t_payeraccount, -5, 5),                   " + //№ договора
           "              acc.t_open_date,                                 " + //Дата договора 
           "              pm.t_payerbankenterdate,                                  " + //Дата возниковения задолженности по комиссиям неоплаченным в срок
           "              pm.t_amount,                      " + //Сумма комиссии, начисленная в момент возникновения задолжнности  (без НДС)
//           sumvb +" as amount, "+           //Tikh - сумма по ВБ
           "              0 as nds,                                     " + //НДС
           " CASE "+
           "   WHEN (    "+ GetSQLDate (RepDate)+" - pm.t_payerbankenterdate >= 0 "+
           "         AND ("+GetSQLDate (RepDate)+" - pm.t_payerbankenterdate) < 45"+
           "        ) "+
//           "      THEN pm.t_amount "+
           " THEN "+sumvb +           //Tikh - сумма по ВБ
           "   WHEN (    "+ GetSQLDate (RepDate)+" - pm.t_payerbankenterdate  >=45"+
           "         AND ("+GetSQLDate (RepDate)+" - pm.t_payerbankenterdate) < 90"+
           "        ) "+
           "      THEN 0 "+
           "   WHEN ("+ GetSQLDate (RepDate) +"   -  pm.t_payerbankenterdate >= 90) "+
           "      THEN 0 "+
           " END, "+
           " CASE "+
           "   WHEN (    "+ GetSQLDate (RepDate)+" - pm.t_payerbankenterdate >= 0 "+
           "         AND ("+GetSQLDate (RepDate)+" - pm.t_payerbankenterdate) < 45"+
           "        ) "+
           "      THEN 0 "+
           "   WHEN (    "+ GetSQLDate (RepDate)+" - pm.t_payerbankenterdate  >=45"+
           "         AND ("+GetSQLDate (RepDate)+" - pm.t_payerbankenterdate) < 90"+
           "        ) "+
//           "      THEN pm.t_amount "+
           " THEN "+query_text +           //Tikh - сумма по ВБ
           "   WHEN ("+ GetSQLDate (RepDate) +"   -  pm.t_payerbankenterdate >= 90) "+
           "      THEN 0 "+
           " END, "+
           " CASE "+
           "   WHEN (    "+ GetSQLDate (RepDate)+" - pm.t_payerbankenterdate >= 0 "+
           "         AND ("+GetSQLDate (RepDate)+" - pm.t_payerbankenterdate) < 45"+
           "        ) "+
           "      THEN 0 "+
           "   WHEN (    "+ GetSQLDate (RepDate)+" - pm.t_payerbankenterdate  >=45"+
           "         AND ("+GetSQLDate (RepDate)+" - pm.t_payerbankenterdate) < 90"+
           "        ) "+
           "      THEN 0 "+
           "   WHEN ("+ GetSQLDate (RepDate) +"   -  pm.t_payerbankenterdate >= 90) "+
//           "      THEN pm.t_amount "+
           " THEN "+query_text +           //Tikh - сумма по ВБ
           " END, "+
           " CHR (1)"+
"  FROM dpmpaym_dbt pm, "+
"       dpmprop_dbt prop, "+
"       doproper_dbt opr, "+
"       daccount_dbt acc, "+
"       dpmrmprop_dbt rm, "+
"       dobjcode_dbt obj "+
" WHERE (pm.t_dockind = 201 or pm.t_dockind = 286) "+  //23.08.2012 vihrov I-00230835-2 добавил банковский ордер по просьбе Карнауховой
"   AND opr.t_dockind = pm.t_dockind "+
"   AND (   t_receiveraccount LIKE ('47423810_300000%') "+
"        OR t_receiveraccount LIKE ('47423810_500000%') "+
"        OR pm.t_receiveraccount LIKE '70601%' "+
"        OR pm.t_receiveraccount LIKE '70107%' "+
"       ) "+
"   AND pm.t_payerbankenterdate <= "+ GetSQLDate (RepDate)+
     "  and (prop.t_bankcode=chr(1) or prop.t_bankcode='0' or prop.t_bankcode='"+{MFO_BANK}+"') "+
     "  and pm.t_payeraccount in ( "+
     "     SELECT t_Account "+
     "       FROM daccount_dbt "+
     "      WHERE (   SUBSTR (t_account, 1, 3) BETWEEN '401' AND '407' "+
     "             OR t_account LIKE '40802%' "+
     "             OR t_account LIKE '40807%' "+
     "            ) "+
     "        AND t_chapter = 1 "+
"             AND (T_OPEN_CLOSE = CHR(0) OR T_OPEN_CLOSE <> CHR(0) AND T_CLOSE_DATE >= "+ GetSQLDate (RepDate)+" )) "+
"   AND prop.t_debetcredit = 1 "+
"   AND rm.t_paymentid = pm.t_paymentid "+
"   AND pm.t_payeraccount = acc.t_account "+
"   AND acc.t_chapter = 1 "+
"   AND obj.t_codekind = 1 "+
"   AND obj.t_objecttype = 3 "+
"   AND acc.t_client = obj.t_objectid "+
"   AND obj.t_state = 0 "+
"   AND prop.t_paymentid = pm.t_paymentid "+
"   AND opr.t_documentid = LPAD (TO_CHAR (pm.t_paymentid), 34, '0') "+
"   AND EXISTS ( "+
"          SELECT 1 "+
"            FROM doprstep_dbt "+
"           WHERE t_id_operation = opr.t_id_operation "+
"             AND (   (    t_symbol = '2' "+
"                      AND t_isexecute = 'X' "+
"                      AND t_fact_date <= "+ GetSQLDate (RepDate)+
//"                      AND t_plan_date <= "+ GetSQLDate (RepDate)+
"                     ) or (    t_symbol = 'Щ' "+
"                      AND t_isexecute = 'X'  "+
"                      AND t_fact_date <= "+ GetSQLDate (RepDate)+
//"                      AND t_plan_date <= "+ GetSQLDate (RepDate)+
"                     )" ;
if (not fdBank.is_PRBB )
    sql = sql + "           or (    t_symbol = 'Щ' "+
    "                      AND t_isexecute = 'X'  "+
    "                      AND t_fact_date > pm.T_I2PLACEDATE " +
    "                      AND t_fact_date = "+ GetSQLDate ( FactDateforK2_toConversionDate )+
    "                     )" +
    "                       or (    t_symbol = CHR(0) "+
    "                      AND t_isexecute = 'X'  AND T_BLOCKID=10000165 "+
    "                      AND EXISTS( SELECT S.t_date FROM dpmhist_dbt S WHERE S.T_PAYMENTID = pm.T_PAYMENTID AND S.T_STATUSIDTO = 2100 AND t_fact_date >= S.t_date) " +
    "                      AND t_fact_date = "+ GetSQLDate ( FactDateforKOR_toConversionDate )+
    "                     )" ;

end;
sql = sql + "        )) "+
"                    AND EXISTS ( "+
"             SELECT 1 "+
"               FROM doprstep_dbt "+
"              WHERE t_id_operation = opr.t_id_operation "+
"                AND (                          (    t_id_step = (select max(t_id_step) from doprstep_dbt where t_id_operation = opr.t_id_operation ) "+
"                                                  AND ( t_syst_date > "+ GetSQLDate (RepDate)+ " or t_syst_date = to_date('01.01.0001','dd.mm.yyyy')) "+
"                        ) "+
"                    )) ";

    SQL_Execute (sql, "Заполнение временной таблицы...");





    sql =  "INSERT INTO dnal_reg_dbt " +
           "  SELECT      rm.t_payername,                                 " + //Наименование клиента
           "              obj.t_code,                                 " + //Код клиента
           "              substr(rm.t_ground,1,200),                                      " + //Наименование комиссии
           "              SUBSTR (pm.t_payeraccount, -5, 5),                   " + //№ договора
           "              acc.t_open_date,                                 " + //Дата договора 
           "              pm.t_payerbankenterdate,                                  " + //Дата возниковения задолженности по комиссиям неоплаченным в срок
           "              mad.t_amount,                      " + //Сумма комиссии, начисленная в момент возникновения задолжнности  (без НДС)
//           " round( "+sumvb +"*mad.t_amount/pm.t_amount,2)  as amount, "+           //Tikh - сумма по ВБ
//           "              pm.t_futurepayeramount - mad.t_amount,                                     " + //НДС
           "              (pm.t_amount - mad.t_amount) as nds,                                     " + //НДС
           " CASE "+
           "   WHEN (    "+ GetSQLDate (RepDate)+" - pm.t_payerbankenterdate >= 0 "+
           "         AND ("+GetSQLDate (RepDate)+" - pm.t_payerbankenterdate) < 45"+
           "        ) "+
//           "      THEN mad.t_amount "+
           " THEN round( "+sumvb +"*mad.t_amount/pm.t_amount,2) "+           //Tikh - сумма по ВБ
           "   WHEN (    "+ GetSQLDate (RepDate)+" - pm.t_payerbankenterdate  >=45"+
           "         AND ("+GetSQLDate (RepDate)+" - pm.t_payerbankenterdate) < 90"+
           "        ) "+
           "      THEN 0 "+
           "   WHEN ("+ GetSQLDate (RepDate) +"   -  pm.t_payerbankenterdate >= 90) "+
           "      THEN 0 "+
           " END, "+
           " CASE "+
           "   WHEN (    "+ GetSQLDate (RepDate)+" - pm.t_payerbankenterdate >= 0 "+
           "         AND ("+GetSQLDate (RepDate)+" - pm.t_payerbankenterdate) < 45"+
           "        ) "+
           "      THEN 0 "+
           "   WHEN (    "+ GetSQLDate (RepDate)+" - pm.t_payerbankenterdate  >=45"+
           "         AND ("+GetSQLDate (RepDate)+" - pm.t_payerbankenterdate) < 90"+
           "        ) "+
//           "      THEN mad.t_amount "+
           " THEN round( "+sumvb +"*mad.t_amount/pm.t_amount,2) "+           //Tikh - сумма по ВБ
           "   WHEN ("+ GetSQLDate (RepDate) +"   -  pm.t_payerbankenterdate >= 90) "+
           "      THEN 0 "+
           " END, "+
           " CASE "+
           "   WHEN (    "+ GetSQLDate (RepDate)+" - pm.t_payerbankenterdate >= 0 "+
           "         AND ("+GetSQLDate (RepDate)+" - pm.t_payerbankenterdate) < 45"+
           "        ) "+
           "      THEN 0 "+
           "   WHEN (    "+ GetSQLDate (RepDate)+" - pm.t_payerbankenterdate  >=45"+
           "         AND ("+GetSQLDate (RepDate)+" - pm.t_payerbankenterdate) < 90"+
           "        ) "+
           "      THEN 0 "+
           "   WHEN ("+ GetSQLDate (RepDate) +"   -  pm.t_payerbankenterdate >= 90) "+
//           "      THEN mad.t_amount "+
           " THEN round( "+sumvb +"*mad.t_amount/pm.t_amount,2) "+           //Tikh - сумма по ВБ
           " END, "+
           " CHR (1)"+
"  FROM dpmpaym_dbt pm, dpmprop_dbt prop,  doproper_dbt opr, daccount_dbt acc, dpmaddpi_dbt mad, dpmrmprop_dbt rm, dobjcode_dbt obj"+
" WHERE (pm.t_dockind = 201  or pm.t_dockind = 286)"+ //23.08.2012 vihrov I-00230835-2 добавил банковский ордер по просьбе Карнауховой
" AND opr.t_dockind = pm.t_dockind "+
"   AND  t_receiveraccount = CHR(1) "+
//     "     AND pm.t_valuedate <=  "+ GetSQLDate ({curdate}) +                //Tikh
     "     AND pm.t_payerbankenterdate <=  "+ GetSQLDate (RepDate) +                //Tikh
     "  and (prop.t_bankcode=chr(1) or prop.t_bankcode='0' or prop.t_bankcode='"+{MFO_BANK}+"') "+
     "  and pm.t_payeraccount in ( "+
     "     SELECT t_Account "+
     "       FROM daccount_dbt "+
     "      WHERE (   SUBSTR (t_account, 1, 3) BETWEEN '401' AND '407' "+
     "             OR t_account LIKE '40802%' "+
     "             OR t_account LIKE '40807%' "+
     "            ) "+
     "        AND t_chapter = 1 "+
     "        AND t_open_close = CHR (0)) "+
     "        AND prop.t_debetcredit = 1 "+
     " and mad.t_paymentid = pm.t_paymentid "+
     " and (mad.t_account like '47423810_3%' or mad.t_account like '70601%')"+
     " and pm.t_payeraccount = acc.t_Account"+
     "       AND acc.t_chapter = 1"+
     " and obj.t_codekind = 1 "+
     " and obj.t_objecttype = 3 "+
     " and acc.t_client = obj.t_objectid "+
     " and obj.t_state = 0 "+
     " and rm.t_paymentid = pm.t_paymentid "+
   " and prop.t_paymentid=pm.t_paymentid "+
     " and opr.t_documentid=LPAD(TO_CHAR(pm.t_paymentid), 34,'0')"+
"   AND EXISTS ( "+
"          SELECT 1 "+
"            FROM doprstep_dbt "+
"           WHERE t_id_operation = opr.t_id_operation "+
"             AND (   (    t_symbol = '2' "+
"                      AND t_isexecute = 'X' "+
//"                      AND t_plan_date <= "+ GetSQLDate (RepDate)+
"                      AND t_fact_date < "+ GetSQLDate (RepDate)+
"                     ) or (    t_symbol = 'Щ' "+
"                      AND t_isexecute = 'X'  "+
"                      AND t_fact_date < "+ GetSQLDate (RepDate)+
//"                      AND t_plan_date <= "+ GetSQLDate (RepDate)+
"                     )" ;
if (not fdBank.is_PRBB )
    sql = sql + "           or (    t_symbol = 'Щ' "+
    "                      AND t_isexecute = 'X'  "+
    "                      AND t_fact_date > pm.T_I2PLACEDATE " +
    "                      AND t_fact_date = "+ GetSQLDate ( FactDateforK2_toConversionDate )+
    "                     )" +
    "                       or (    t_symbol = CHR(0) "+
    "                      AND t_isexecute = 'X'  AND T_BLOCKID=10000165 "+
    "                      AND EXISTS( SELECT t_date FROM dpmhist_dbt S WHERE S.T_PAYMENTID = pm.T_PAYMENTID AND S.T_STATUSIDTO = 2100 AND t_fact_date > t_date) " +
    "                      AND t_fact_date = "+ GetSQLDate ( FactDateforKOR_toConversionDate )+
    "                     )"  ;

end;
sql = sql + "                 )) "+
"                    AND EXISTS ( "+
"             SELECT 1 "+
"               FROM doprstep_dbt "+
"              WHERE t_id_operation = opr.t_id_operation "+
"                AND (                          (    t_id_step = (select max(t_id_step) from doprstep_dbt where t_id_operation = opr.t_id_operation ) "+
"                                                  AND ( t_syst_date > "+ GetSQLDate (RepDate)+ " or t_syst_date = to_date('01.01.0001','dd.mm.yyyy')) "+
"                        ) "+
"                    )) ";

    SQL_Execute (sql, "Заполнение временной таблицы...");

    if (fdBank.is_PRBB )
        /*SDA */
//         if (valtype(ch)==v_undef)    
         if ((valtype(ch) != v_undef) and (ch != 2))    //10.07.2012 vihrov вобще не понял нахрена димон это условие поставил.
            
            /* Заполняем временную таблицу данными из xls-файла */
            if (IsStandAlone()) // Двухзвенка
               if ((ValType(ex)!=V_UNDEF) and (ex.Visible==False))
                 ex = ActiveX("Excel.Application",NULL,false); 
               else
                 ex = ActiveX("Excel.Application",NULL,true);
               end;
            else // Трехзвенка
               ob = CreateObject ("rsax","TRsAxServer","RsAxServer",false);
               ex = ob.CreateComObject ("Excel.Application");
            end; 

            obBook = ex.Workbooks.open(bank_file_2005); 
            obSheet = obBook.ActiveSheet(); 

            i=0;
            stat=true;
            initprogress(-1,"Заполняем временную таблицу данными из xls-файла","Заполняем временную таблицу данными из xls-файла");
            while (stat)
               useprogress(i);
               value_i = obSheet.Range (Столбец_номер+string (Смещение_2005+i)).Value;
               if (valtype (value_i)==V_UNDEF)
                 stat=false;
               else
                 Наименование_клиента = DefaultParm_ (obSheet.Range (Столбец_имя_клиента   +string (Смещение_2005+i)).Value,"");
                 Код_клиента          = DefaultParm_ (obSheet.Range (Столбец_код_клиента   +string (Смещение_2005+i)).Value,"");
                 Имя_комиссии         = DefaultParm_ (obSheet.Range (Столбец_имя_комиссии  +string (Смещение_2005+i)).Value,"");
                 Номер_договора       = DefaultParm_ (obSheet.Range (Столбец_номер_договора+string (Смещение_2005+i)).Value,"");
                 Дата_договора        = DefaultParm_ (obSheet.Range (Столбец_дата_договора +string (Смещение_2005+i)).Value,"");
        //         Дата_договора        = convstr2date (Дата_договора); /* потребовалось отдельно в связи с неформатом в столбце даты договора */
				 check_data(Дата_договора, Наименование_клиента, string(int(Код_клиента)));
                 Дата_возникновения   = DefaultParm_ (obSheet.Range (Столбец_дата_задолж   +string (Смещение_2005+i)).Value,"");
				 check_data(Дата_возникновения, Наименование_клиента, string(int(Код_клиента)));
                 Сумма_комиссии       = DefaultParm_ (obSheet.Range (Столбец_сумма_комиссии+string (Смещение_2005+i)).Value,$0);
                 Сумма_НДС            = $0;  /* В подгружаемом файле сумма комиссии идет без НДС ! */
                 Примечание           = DefaultParm_ (obSheet.Range (Столбец_примечание    +string (Смещение_2005+i)).Value,"");
                 
                 sql =  "INSERT INTO dnal_reg_dbt " +
                        "  SELECT      " + GetSQLString (Наименование_клиента) + "," +
                        "              " + GetSQLString (Int (Код_клиента))    + "," +
                        "              " + GetSQLString (Имя_комиссии)         + "," +
                        "              " + Int          (Номер_договора)       + "," +
                        "              " + GetSQLDate   (Дата_договора)        + "," + 
                        "              " + GetSQLDate   (Дата_возникновения)   + "," +
                        "              " + Сумма_комиссии                      + "," +
                        "              " + Сумма_НДС                           + "," +
                        " CASE "+
                        "   WHEN (    "+ GetSQLDate (RepDate)+" - "+ GetSQLDate (Дата_возникновения) +" >= 0 "+
                        "         AND ("+GetSQLDate (RepDate)+" - "+ GetSQLDate (Дата_возникновения) +") < 45"+
                        "        ) "+
                        "      THEN "+Сумма_комиссии +
                        "   WHEN (    "+ GetSQLDate (RepDate)+" - "+ GetSQLDate (Дата_возникновения) +"  >=45"+
                        "         AND ("+GetSQLDate (RepDate)+" - "+ GetSQLDate (Дата_возникновения) +") < 90"+
                        "        ) "+
                        "      THEN 0.00 "+
                        "   WHEN ("+ GetSQLDate (RepDate) +"   -  "+ GetSQLDate (Дата_возникновения) +" >= 90) "+
                        "      THEN 0.00 "+
                        " END, "+
                        " CASE "+
                        "   WHEN (    "+ GetSQLDate (RepDate)+" - "+ GetSQLDate (Дата_возникновения) +" >= 0 "+
                        "         AND ("+GetSQLDate (RepDate)+" - "+ GetSQLDate (Дата_возникновения) +") < 45"+
                        "        ) "+
                        "      THEN 0.00 "+
                        "   WHEN (    "+ GetSQLDate (RepDate)+" - "+ GetSQLDate (Дата_возникновения) +"  >=45"+
                        "         AND ("+GetSQLDate (RepDate)+" - "+ GetSQLDate (Дата_возникновения) +") < 90"+
                        "        ) "+
                        "      THEN "+Сумма_комиссии +
                        "   WHEN ("+ GetSQLDate (RepDate) +"   -  "+ GetSQLDate (Дата_возникновения) +" >= 90) "+
                        "      THEN 0.00 "+
                        " END, "+
                        " CASE "+
                        "   WHEN (    "+ GetSQLDate (RepDate)+" - "+ GetSQLDate (Дата_возникновения) +" >= 0 "+
                        "         AND ("+GetSQLDate (RepDate)+" - "+ GetSQLDate (Дата_возникновения) +") < 45"+
                        "        ) "+
                        "      THEN 0.00 "+
                        "   WHEN (    "+ GetSQLDate (RepDate)+" - "+ GetSQLDate (Дата_возникновения) +"  >=45"+
                        "         AND ("+GetSQLDate (RepDate)+" - "+ GetSQLDate (Дата_возникновения) +") < 90"+
                        "        ) "+
                        "      THEN 0.00 "+
                        "   WHEN ("+ GetSQLDate (RepDate) +"   -  "+ GetSQLDate (Дата_возникновения) +" >= 90) "+
                        "      THEN "+Сумма_комиссии +
                        " END, "+                    
                        " "+GetSQLString (Примечание)+
                        " FROM DUAL";

                        SQL_Execute (sql, "Заполнение временной таблицы данными из "+bank_file_2005);

               end;

               i=i+1;
            end;
            remprogress;
            ObBook.Close (false);
            if (est_invalid_data) msgbox(" Есть неверные даты. Нажмите ESC дважды."); exit(0); end;
         end; /* if (valtype(ch)==v_undef) */
    else
        //Счета задолженностей с остатками без счетов клиентов или по закрытым счетам клиентов и по счетам без платежей списания и зачисления и без уточняющих записей
        // и без отозванных платежей
//        debugbreak;
            sql =   " INSERT INTO dnal_reg_dbt SELECT D.T_NAME, E.T_CODE, 'Разные без ДО' AS COMMNAME, " +
                    "  SUBSTR(A.T_ACCOUNT,16) AS CONTRACTID, " +
        //            "   A.T_ACCOUNT, " +
                    "        ( SELECT F.T_STARTDATE FROM dclient_dbt F WHERE F.T_PARTYID = A.T_CLIENT AND F.T_SERVICEKIND=3) AS DATE_CONTRACT, " +
                    "        ( SELECT MAX(D.t_restdate) FROM drestdate_dbt D " +
                    "          WHERE D.T_ACCOUNTID = A.T_ACCOUNTID AND t_restdate <= " + GetSQLDate (RepDate) +
                    "        ) AS DATE_DEBT, " +
                    "         ABS(RSB_ACCOUNT.RESTA(A.T_ACCOUNT, " + GetSQLDate (RepDate) + " ,A.T_CHAPTER,NULL)) AS SUM_REST, " +
                    "        0 AS NDSSUM, 0 AS SUM_SROK1, 0 AS SUM_SROK2, " +
                    "        ABS(RSB_ACCOUNT.RESTA(A.T_ACCOUNT, " + GetSQLDate (RepDate) + " ,A.T_CHAPTER,NULL)) AS SUM_SROK3, " +
                    "        CHR(0) AS NOTE " +
                    " FROM daccount_dbt A, dparty_dbt D, dobjcode_dbt E " +
                    " WHERE A.T_CHAPTER = 1 AND A.T_ACCOUNT  LIKE '47423810_300000%' " +
                    "  AND NOT EXISTS( SELECT 1 FROM dpmpaym_dbt Z,dpmaddpi_dbt Y  " +
                    "                 WHERE Z.T_PAYERBANKENTERDATE <= " + GetSQLDate (RepDate) + 
                    "                   AND Y.T_PAYMENTID = Z.T_PAYMENTID AND REGEXP_LIKE(Z.T_PAYERACCOUNT,'^40[1-8]') AND Z.T_RECEIVERACCOUNT = CHR(1) " +
                    "                   AND Y.T_ACCOUNT =  A.T_ACCOUNT  " +
                    "                ) " +
                    "  AND ( NOT EXISTS( SELECT 1 FROM dpmpaym_dbt F " +
                    "                    WHERE F.T_PAYERBANKENTERDATE <= " + GetSQLDate (RepDate) + 
                    "                     AND ( F.T_PAYERACCOUNT =  A.T_ACCOUNT AND REGEXP_LIKE(F.T_RECEIVERACCOUNT,'^40[1-8]') " +
                    "                           OR F.T_RECEIVERACCOUNT =  A.T_ACCOUNT AND REGEXP_LIKE(F.T_PAYERACCOUNT,'^40[1-8]') " +
                    "                         ) AND NOT EXISTS( SELECT 1 FROM doproper_dbt M, doprstep_dbt N " +
                    "                                           WHERE M.T_DOCKIND = F.T_DOCKIND AND M.T_DOCUMENTID = LPAD (TO_CHAR (F.T_PAYMENTID), 34, '0') " +
                    "                                            AND N.T_ID_OPERATION = M.T_ID_OPERATION AND N.T_BLOCKID = 10000127 " +
                    "                                            AND N.T_ISEXECUTE = 'X' AND N.T_FACT_DATE <= " + GetSQLDate (RepDate) + 
                    "                                         ) " +
        //                                  SELECT 1 FROM dpmpaym_dbt F " +
        //            "                     WHERE F.T_PAYERBANKENTERDATE <= TO_DATE( '31.12.2010', 'DD.MM.YYYY' ) " +
        //            "                      AND (F.T_PAYERACCOUNT =  A.T_ACCOUNT AND REGEXP_LIKE(F.T_RECEIVERACCOUNT,'^40[1-8]') " +
        //            "                      OR F.T_RECEIVERACCOUNT =  A.T_ACCOUNT AND REGEXP_LIKE(F.T_PAYERACCOUNT,'^40[1-8]')) " +
                    "                  ) " +
                    "  OR NOT EXISTS( SELECT I.T_ID FROM dsfcontr_dbt I WHERE I.T_PARTYID = A.T_CLIENT AND REGEXP_LIKE(I.T_OBJECT,'^40[1-8]') ) " +
                    "        AND NOT EXISTS( SELECT J.T_ACCOUNT FROM daccount_dbt J WHERE J.T_CLIENT = A.T_CLIENT AND J.T_CHAPTER = A.T_CHAPTER " +
                    "                        AND REGEXP_LIKE(J.T_ACCOUNT,'^40[1-8]') " +
                    "               ) " +
        //            "        OR EXISTS( SELECT G.T_ID FROM dsfcontr_dbt G WHERE G.T_PARTYID = A.T_CLIENT AND G.T_DATECLOSE <  " + GetSQLDate (RepDate) + " ) " +
        //            "        AND EXISTS( SELECT H.T_ACCOUNT FROM daccount_dbt H WHERE H.T_CLIENT = A.T_CLIENT AND H.T_CHAPTER = A.T_CHAPTER " +
        //            "          AND REGEXP_LIKE(H.T_ACCOUNT,'^40[1-8]') AND H.T_OPEN_CLOSE=CHR(135) AND H.T_CLOSE_DATE <  " + GetSQLDate (RepDate) + 
        //            "                  ) " +
                    "      ) " +
                    "  AND D.T_PARTYID = A.T_CLIENT " +
                    "  AND E.T_OBJECTTYPE = 3 AND E.T_CODEKIND = 1 AND E.T_OBJECTID = A.T_CLIENT AND E.T_BANKCLOSEDATE = TO_DATE('01010001','ddmmyyyy') " +
                    "  AND RSB_ACCOUNT.RESTA(A.T_ACCOUNT, " + GetSQLDate (RepDate) + " ,A.T_CHAPTER,NULL) <> 0 ";
            SQL_Execute (sql, "Заполнение временной таблицы...");

        //Счета задолженностей с остатками без счетов клиентов или по закрытым счетам клиентов и по счетам без платежей списания и зачисления и без уточняющих записей
        // и без отозванных платежей

        //Протокол для сверки со счетом задолженности
//           debugbreak;
           sql = " SELECT t_payercode, SUM(t_commsum) as AM, SUM(nvl(t_sum_srok1,0)+ nvl(t_sum_srok2,0)+nvl(t_sum_srok3,0)) AS AM_DEBT, " +
                 "  ( SELECT ABS(RSB_ACCOUNT.RESTA(A.T_ACCOUNT, " + GetSQLDate (RepDate)+ ",A.T_CHAPTER,NULL)) FROM daccount_dbt A, dobjcode_dbt B " +
                 "    WHERE A.T_CHAPTER = 1 AND A.T_ACCOUNT LIKE '47423810_300000%'  " +
                 "     AND RSB_ACCOUNT.RESTA(A.T_ACCOUNT,  " + GetSQLDate (RepDate)+ " ,A.T_CHAPTER,NULL) <> 0 " +
                 "     AND A.T_CLIENT =B.T_OBJECTID AND B.T_CODE = t_payercode AND B.T_CODEKIND = 1  " +
                 "  ) as REST_DATE " +
                 " FROM dnal_reg_dbt " +
                 " GROUP BY t_payercode " +
                 " ORDER BY t_payercode ";
           rs = ExecSQLSelect(sql);
           while (rs.movenext)
            if (Fl_Header)
             Prn_Header_Log;
             Fl_Header = 0;
             Fl_Footer = 1;
            end;

            [ | ############## | ############### | ############### | ########################### | ]
            (rs.value(0), rs.value(1), rs.value(2), DefaultParm_ ( rs.value(3),0.00) ); 
           end;
           if (Fl_Footer)
            Prn_Footer_Log;
           end;
        //Протокол для сверки со счетом задолженности
    end;
    
    
    /* Выводим результат на печать */
    //Gurin S. N. I-00251202-2 12.09.2012 избавляемся от задолженности, которая на заданную дату была, но потом была оплачена
    sql = " SELECT   t_payername, t_payercode, t_commname, t_contractid, t_date_contract, t_datevalue, ";
    sql = sql + "         t_commsum, t_ndssum, nvl(abs(t_sum_srok1),0) as t_sum_srok1, nvl(abs(t_sum_srok2),0) as t_sum_srok2, nvl(abs(t_sum_srok3),0) as t_sum_srok3, t_note ";
    sql = sql + "    FROM dnal_reg_dbt ";
    sql = sql + "ORDER BY t_datevalue asc";
    rs = ExecSQLSelect(sql);
    if (rs)

      InitProgress(-1," ~CtrlBreak~ Прекратить","Печатаются данные");

      Numb=0;

      while (rs.movenext)

        UseProgress(Numb = Numb + 1);

        obSheetRep.Range("DATARANGE").Insert;
        obSheetRep.Range(Столбец_итог_номер                 +string (Смещение+Numb)).Value =  Numb;
        obSheetRep.Range(Столбец_итог_имя_клиента           +string (Смещение+Numb)).Value =  rs.Value("t_payername");
        obSheetRep.Range(Столбец_итог_код_клиента           +string (Смещение+Numb)).Value =  rs.Value("t_payercode");
        obSheetRep.Range(Столбец_итог_имя_комиссии          +string (Смещение+Numb)).Value =  rs.Value("t_commname");
        obSheetRep.Range(Столбец_итог_номер_и_дата_договора +string (Смещение+Numb)).Value =  rs.Value("t_contractid")+"\n"
                                                            +date (rs.Value("t_date_contract"));
        obSheetRep.Range(Столбец_итог_дата_задолж           +string (Смещение+Numb)).Value =  date (rs.Value("t_datevalue"));
        obSheetRep.Range(Столбец_итог_сумма_комиссии_вал    +string (Смещение+Numb)).Value =  rs.Value("t_commsum"); 
        //Tikh
        obSheetRep.Range(Столбец_итог_сумма_комиссии_вал    +string (Смещение+Numb)).numberformat = "0,00";
        obSheetRep.Range(Столбец_итог_сумма_комиссии_руб    +string (Смещение+Numb)).numberformat = "0,00";
        obSheetRep.Range(Столбец_итог_сумма_до_45           +string (Смещение+Numb)).numberformat = "0,00";
        obSheetRep.Range(Столбец_итог_сумма_45_90           +string (Смещение+Numb)).numberformat = "0,00";
        obSheetRep.Range(Столбец_итог_сумма_более_90        +string (Смещение+Numb)).numberformat = "0,00";

                                                
        obSheetRep.Range(Столбец_итог_код_валюты            +string (Смещение+Numb)).Value =  "810";
        obSheetRep.Range(Столбец_итог_курс_ЦБ               +string (Смещение+Numb)).Value =  "";
       if (rs.Value("t_commsum") > 0)
        obSheetRep.Range(Столбец_итог_сумма_комиссии_руб    +string (Смещение+Numb)).Value =  (rs.Value("t_sum_srok1") + rs.Value("t_sum_srok2")+ rs.Value("t_sum_srok3"));
//        obSheetRep.Range(Столбец_итог_сумма_комиссии_НДС_руб    +string (Смещение+Numb)).Value =  rs.Value("t_ndssum")*(rs.Value("t_sum_srok1") + rs.Value("t_sum_srok2")+ rs.Value("t_sum_srok3"))/rs.Value("t_commsum");
        obSheetRep.Range(Столбец_итог_сумма_до_45           +string (Смещение+Numb)).Value =  rs.Value("t_sum_srok1") ;
        obSheetRep.Range(Столбец_итог_сумма_45_90           +string (Смещение+Numb)).Value =  rs.Value("t_sum_srok2");
        obSheetRep.Range(Столбец_итог_сумма_более_90        +string (Смещение+Numb)).Value =  rs.Value("t_sum_srok3");
       else
        obSheetRep.Range(Столбец_итог_сумма_комиссии_руб    +string (Смещение+Numb)).Value =  0;
//        obSheetRep.Range(Столбец_итог_сумма_комиссии_НДС_руб    +string (Смещение+Numb)).Value =  0;
        obSheetRep.Range(Столбец_итог_сумма_до_45           +string (Смещение+Numb)).Value =  0 ;
        obSheetRep.Range(Столбец_итог_сумма_45_90           +string (Смещение+Numb)).Value =  0;
        obSheetRep.Range(Столбец_итог_сумма_более_90        +string (Смещение+Numb)).Value =  0;
       end;
        obSheetRep.Range(Столбец_итог_примечание            +string (Смещение+Numb)).Value =  rs.Value("t_note");
      end;

    end;

    /* Подводим итоги */
    //Gurin S. N. I-00251202-2 12.09.2012 избавляемся от задолженности, которая на заданную дату была, но потом была оплачена
    sql = "select sum (abs(t_sum_srok1)) srok1, sum (abs(t_sum_srok2)) srok2, sum (abs(t_sum_srok3)) srok3  from dnal_reg_dbt"; 
    rs = ExecSQLSelect(sql);
    if (rs and rs.movenext)
      ComisBySrokItog[0]=money (rs.value ("srok1"));
      ComisBySrokItog[1]=money (rs.value ("srok2"));
      ComisBySrokItog[2]=money (rs.value ("srok3"));
    else
      ComisBySrokItog[0]=$0;
      ComisBySrokItog[1]=$0;
      ComisBySrokItog[2]=$0;
    end;
   
  if (IsTxtRep)
    PrintBottom();                                                                    
  end;
    
  /*вывод отчета --> Excel*/
  if (not IsTxtRep)
    RepDate = dlg.rec.RepDate; //Gurin S. N. I-00250532-2 10.09.2012

    obSheetRep.Range ("HEAD").Value       = "Комиссии (доходы), начисленные по картотеке № 2 по состоянию на " + RepDate + " г., не проведенные по балансу";
    obSheetRep.Range ("TS").Value         = DepName;
    obSheetRep.Range ("ItogAll").Value    = "Сумма комиссии, начисленная в момент возникновения задолженности (без НДС (руб.):"+(ComisBySrokItog[0]+ComisBySrokItog[1]+ComisBySrokItog[2]);
    obSheetRep.Range ("ItogoTxt").Value   = "из них:";
    obSheetRep.Range ("Itog0over").Value  = "комиссия начисленная до 45 дней           (руб.): " + ComisBySrokItog[0];
    obSheetRep.Range ("Itog45over").Value = "комиссия начисленная от 45 до 90 дней (руб.): "    + ComisBySrokItog[1];
    obSheetRep.Range ("Itog90over").Value = "комиссия начисленная свыше 90 дней    (руб.): "    + ComisBySrokItog[2];

    ExRep.Visible = true;


  end;

  OnError(Err)
    MsgBox(Err.Message,"| at ",Err.Line,"|in ",Err.Module);
END;


/*Обработчик диалоговой панели ввода исходных данных для печати*/
MACRO Event (dlg, cmd, id, key) 
var const_message = "~F2~ Продолжить F3~ Выбор даты из календаря  ~Space~ Выбор формата отчета  ~ESC~ Выход ";
var OrgDate:date = {curdate} + 1;

  /*Первоначальная инициализация полей*/
  if(cmd == DLG_INIT)
     Message(const_message);
     dlg.rec.RepDate ={curDate};
     dlg.rec.excel = "X";
     dlg.rec.DepNumb = "";
     dlg.rec.DepName = "Все подразделения";
     UpdateFields(dlg); 
  end;
  
  if (cmd == DLG_REMFOCUS)
    if (FldName(dlg,id)=="RepDate")
       if ( false ) 
          MsgBox("Дата начала больше даты текущего операционного дня"); 
          return CM_CANCEL;
       end;
    elif (FldName(dlg,id) == "DepNumb")
      if (false)
        MsgBox("Сумма ограничения не может быть меньше нуля");
        return CM_CANCEL;
      end;
    end;

    UpdateFields(dlg); 
  end; 

  if (cmd == DLG_KEY)
    /*Выход из диалогового окна формирования отчета*/
    if (KEY == KEY_ESC)
      return exit(1);//CM_CANCEL;
    /*Выбор данных из списка*/
    elif ( KEY == KEY_F3)
    /*Выбор даты из календаря*/
      if (FldName(dlg,id) == "RepDate")
        dlg.rec.RepDate = GetDateByCalendar ({curDate});
      elif (FldName(dlg,id) == "DepNumb")
        if (ListDepartment (DepBuff));
          dlg.rec.DepNumb = DepBuff.Code;
          dlg.rec.DepName = DepBuff.Name;
          UpdateFields(dlg); 
        end;
      end;
    /*Возможность выбора формата отчета текстовый вид, вывод в Excel*/
    elif (KEY==KEY_SPACE)
    /*Параметр текстовый вид*/
      if (FldName(dlg,id)=="text")
        /* Ярмольчук. Возможность вывода в текст отключена по согласованию с Климахиной Жанной
        if (dlg.rec.text == "")
          dlg.rec.text = "X";
          dlg.rec.excel = "";
          IsTxtRep = True;
          UpdateFields(dlg); 
        end;
        */
        msgbox ("Отчет выводится только в Excel.");
    /*Параметр вывод в Excel*/
      elif(FldName(dlg,id)=="excel")
        if (dlg.rec.excel == "")
          dlg.rec.excel = "X";
          dlg.rec.text = "";
          IsTxtRep = False;
          UpdateFields(dlg); 
        end;
      end;
    elif ( KEY == KEY_F2 )
       RepDate = dlg.rec.RepDate;
       DepName = dlg.rec.DepName;  
       RateCB = 0;  

       Return CM_SAVE;

    elif ( (KEY == KEY_ENTER) and (FldName(dlg,id) == "DepNumb") )
      SetFocus(dlg, 0);
      Return CM_IGNORE;
    
    end;
  end;
END;


macro main

 var choice, stat;

 var ob, fl;

   GetRegistryValue("BANK_INI\\ОБЩИЕ ПАРАМЕТРЫ\\ДИРЕКТОРИИ\\LBRDIR", 2, path);
   pathfile = FindPath(file_lbr, path);
   if (not pathfile)
      msgbox("Не найдена LBR");
      exit();
   end;

   Dlg = TRecHandler("nal_reg", pathfile, True);

   if (RunDialog(dlg, "Event"))
     choice_dir (0)="C:\\RSPAR\\TEXT\\закр.счета c 2005г.без ЦМТ для V6.xls";
     choice_dir (1)="Выбрать файл 'закр.счета c 2005г.без ЦМТ для V6.xls' вручную";
     choice_dir (2)="Без файла";
     choice=menu (choice_dir, "", "Укажите расположение файла с остатками");
     if (choice>=0)
        if (choice==0)
        /* bank_file_2005 = "C:\\yarmolchuk\\закр.счета c 2005г.без ЦМТ для V6.xls";*/
           bank_file_2005 = "C:\\rspar\\text\\закр.счета c 2005г.без ЦМТ для V6.xls";
           stat=true;
        elif (choice==1) 
           /*stat=selectfile (bank_file_2005, "закр.счета c 2005г.без ЦМТ для V6.xls","Укажите расположение файла",0, true);*/

           ob = CreateObject ("rcwhost", "TRcwHost", "MyInst", false);
           ob.Execute;
           ob.AddModule ("trmdlg");

           stat=ob.Call ("TrmSelectFile", null, @bank_file_2005, "Отчет с комиссиями с 2005-го года|закр.счета c 2005г.без ЦМТ для V6.xls", null, "Выберите расположение файла", false);

           bank_file_2005 = tooem (bank_file_2005, true);
        else
           stat=true;
        end;
        if (stat)
          Message ("Идет подготовка данных для отчета...");
          MakeReport(choice);
        end;
     else
       msgbox ("Отказ от выпуска отчета");
     end;

   end;
end;

main;