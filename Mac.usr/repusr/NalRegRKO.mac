// ------------------------------------------------------------------------------------------------
// @filename: NalRegRKO.mac
// @author  : Zlenko M.P. 
// @desc    : Налоговый регистр по РКО
// @request : C-17317-6 
//
//  04.02.2014 R-324925-2 DPN - Адаптация под 31-й патч
// -------------------------------------------------------------------------------------------------
import lib_sqltools, likepy, Globals, RSD, lib_registry, KeyCodes, Календарь, RCW, Rsexts, activex;

var PathLBR, PathTempl, Templ;
var CodeBranch = -1, NameBranch = "";
var exrep, obrep, obBookRep, obSheetRep;
var TermRegisterTxtFile, TermCheckTxtFile, TermFileExcel;
var     RegisterTxtFile = "Register_txt." + UserNumber;
var     CheckTxtFile    = "Check_txt."    + UserNumber;
var ReportDate, NalRegDlg;

private const   StartDate       = date("01.01.2010");
private const   NameLBR         = "RSU.lbr", 
                PanelNameLBR    = "NR_RKO", 
                TemplName       = "NalRegRKO.xlsx";

private const
       REGISTER_SHIFT = 9,
       CHECK_SHIFT    = 7,
       xlLeft = -4131;

MACRO NewExcelWorkbook2 (Visible, ExcelFileName)
   if (ExcelApplication == null)
      if (isStandAlone())
         ExcelApplication = ActiveX("Excel.Application", null, true);
      else
         if (startAX == null)
            startAX = CreateObject("rsax", "TRsAxServer", "LoansAxServer", isStandalone());
         end;
         ExcelApplication = startAX.CreateComObject("Excel.Application");
      end;
   end;   
   ExcelApplication.Workbooks.Add (ExcelFileName);
   if (ValType (Visible) == V_BOOL)
      ExcelApplication.Visible = Visible;
   end;       
   ActiveSheet = ExcelApplication.ActiveSheet;
   return true; 
   onError (err)
      ExcelError(err, false);
      Exit(1);
END;

private macro _date(dt:date)
  var day, mon, year; 

  DateSplit ( dt, day, mon, year );
  return string(day:2:o) + "." + string(mon:2:o) + "." + year;  
end;

                                                        
macro GetWorkDirName() : string
   var DirName:string = "", /* Строка с именем пути                         */
       StrErr :string = ""; /* Строка с ошибкой определения временной папки */

   GetRegistryValue( "BANK_INI\\ОБЩИЕ ПАРАМЕТРЫ\\ДИРЕКТОРИИ\\TEXTDIR", V_STRING, DirName, StrErr );        
   if( DirName ) /* Если в настройке указан каталог для временных файлов, работаем в этом направлении */   
       /* Если первый символ в DirName - это точка, то значит путь относительный, */
       /* тогда приклеем к нему CurDir терминала, иначе путь абсолютный */       
       if( SubStr(DirName, 1, 1) == "." )
           DirName = "$" + GetCurDir(TRUE) + replace (DirName, "..","");
       end;     
       if (existFile(DirName))  return DirName;  end;
   end;
   DirName = "$" + GetEnv("TEMP");
   if( NOT DirName )
       DirName = "$" + GetEnv("TMP");
   end;
   if (existFile(DirName))
      //msgbox(string("Он существует на терминале, поэтому его и возвращаем: ", DirName));
      return DirName;
   end;
   msgbox("Ошибка поиска папки для временных файлов на терминале");

   return "";
end;

Macro Check_templ (Name_file_templ)
   var Templs_Dir_Term = GetWorkDirName;

   var TermFileName = toAnsi(Name_file_templ);
   var SPFileName;

   if (Templs_Dir_Term=="") return "";  end;

   GetRegistryValue("BANK_INI\\ОБЩИЕ ПАРАМЕТРЫ\\ДИРЕКТОРИИ\\USERTEMPLSDIR",2,SPFileName);

   SPFileName = findpath (Name_file_templ,SPFileName);

   if (not existFile(SPFileName))
      Msgbox(string("Шаблон отсутствует в папке СП: |",SPFileName));
      return "";
   end;

   if( not CopyFile(SPFileName, Templs_Dir_Term+"\\"+TermFileName) )
     Msgbox("Ошибка при передаче файла на терминал\n" + Templs_Dir_Term+"\\"+TermFileName);
   end; 
   return replace(Templs_Dir_Term+"\\"+TermFileName,"$","");
End;

Macro Copy_text (Name_file)
   var Templs_Dir_Term = GetWorkDirName;

   var TermFileName = toAnsi(Name_file);
   var SPFileName;

   if (Templs_Dir_Term=="")  return "";  end;
   SPFileName = "..\\txtfile\\" + Name_file;

   if (not existFile(SPFileName))
      Msgbox(string("Транспортный временный файл не найден: |",SPFileName));
      return "";
   end;

   if( not CopyFile(SPFileName, Templs_Dir_Term+"\\"+TermFileName) )
     Msgbox("Ошибка при передаче файла на терминал\n" + Templs_Dir_Term+"\\"+TermFileName);
   end;

   return replace(Templs_Dir_Term+"\\"+TermFileName,"$","");
End;

Macro RegisterDopInfo(RowNum, TS :Tarray)
    ActiveSheet.Cells(1,"A").Value = "Ведомость дебиторской задолженности по комиссии (доходы), начисленные по картотеке № 2 по состоянию на " + _date(ReportDate);	
    ActiveSheet.Cells(5,"F").Value  = String(NameBranch, ": ",{NAME_BANK});		     
    ActiveSheet.Range("A10:N" + int(RowNum + REGISTER_SHIFT)).Borders.Weight = 2;
    ActiveSheet.Cells(int(REGISTER_SHIFT + RowNum + 1),"A").Value = "ИТОГО " ;
    ActiveSheet.Cells(int(REGISTER_SHIFT + RowNum + 1),"H").Value = TS[0] ;
    ActiveSheet.Cells(int(REGISTER_SHIFT + RowNum + 1),"J").Value = TS[1] ;    
    ActiveSheet.Cells(int(REGISTER_SHIFT + RowNum + 1),"K").Value = TS[2] ;
    ActiveSheet.Cells(int(REGISTER_SHIFT + RowNum + 1),"L").Value = TS[3] ;
    ActiveSheet.Cells(int(REGISTER_SHIFT + RowNum + 1),"M").Value = TS[4] ;

    ActiveSheet.Range("B" + int(REGISTER_SHIFT + RowNum + 3)+ ":B" + int(REGISTER_SHIFT + RowNum + 4)).HorizontalAlignment = xlLeft;    
    ActiveSheet.Range("B" + int(REGISTER_SHIFT + RowNum + 3)+ ":B" + int(REGISTER_SHIFT + RowNum + 4)).WrapText = False ;
   
    ActiveSheet.Cells(int(REGISTER_SHIFT + RowNum + 3),"B").Value = "Исполнитель    " + {NAME_OPER};
    ActiveSheet.Cells(int(REGISTER_SHIFT + RowNum + 4),"B").Value = "Дата   " + _date(date()) ;
    ExcelApplication.Sheets("Проверка").Select;
    ExcelApplication.ActiveSheet.Visible = False; 

end;

macro CheckDopInfo(Rownum, TS :Tarray)
    ActiveSheet.Cells(1,"A").Value = " Проверка соответствия данных отчета суммам задолженности,учтенным на б/с 47423. по состоянию на " + _date(ReportDate);
    ActiveSheet.Range("A8:G" + int(RowNum + CHECK_SHIFT)).Borders.Weight = 2;
    ActiveSheet.Cells(int(CHECK_SHIFT + RowNum + 1),"A").Value = "ИТОГО " ;
    ActiveSheet.Cells(int(CHECK_SHIFT + RowNum + 1),"D").Value = TS[0] ;
    ActiveSheet.Cells(int(CHECK_SHIFT + RowNum + 1),"E").Value = TS[1] ;
    ActiveSheet.Cells(int(CHECK_SHIFT + RowNum + 1),"F").Value = TS[2] ;
    ExcelApplication.Sheets("Регистр").Select;
    ExcelApplication.ActiveSheet.Visible = False; 
end;

macro OpenTempl(RepName)                           
var qt;
    ExcelApplication.Sheets(RepName).Select;  
    ActiveSheet = ExcelApplication.ActiveSheet; 
    if(RepName == "Регистр")
        qt = ActiveSheet.QueryTables.Add("TEXT;" + TermRegisterTxtFile, ActiveSheet.Range("$A$" + int(REGISTER_SHIFT + 1)));
    else
        qt = ActiveSheet.QueryTables.Add("TEXT;" + TermCheckTxtFile, ActiveSheet.Range("$A$"+ int(CHECK_SHIFT + 1)));
    end;
    qt.Name = RepName;
    qt.FieldNames = True;
    qt.RowNumbers = False;
    qt.FillAdjacentFormulas = False;
    qt.PreserveFormatting = True;
    qt.RefreshOnFileOpen = False;
    qt.RefreshStyle = 0; //xlOverwriteCells        1;  //xlInsertDeleteCells;
    qt.SavePassword = False;
    qt.SaveData = True;
    qt.AdjustColumnWidth = False;
    qt.RefreshPeriod = 0;
    qt.TextFilePromptOnRefresh = False;
    qt.TextFilePlatform = 866;
    qt.TextFileStartRow = 1;;
    qt.TextFileParseType = 1; //xlDelimited;
    qt.TextFileTextQualifier = 1; //xlTextQualifierDoubleQuote;
    qt.TextFileConsecutiveDelimiter = False;
    qt.TextFileTabDelimiter = True;
    qt.TextFileSemicolonDelimiter = True;
    qt.TextFileCommaDelimiter = False;
    qt.TextFileSpaceDelimiter = False;
//    qt.TextFileColumnDataTypes = TArray(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);
    qt.TextFileTrailingMinusNumbers = True;
    qt.Refresh(False);   
end;
macro ClearStr(str)
    str = StrSubst(str,strfor(13),"");
    str = StrSubst(str,strfor(10),"");
    str = StrSubst(str, ";"," ");
    return str;
end;


macro GetNameByCodeBranch(code)
var cmd = RsdCommand("Select pt.t_name from ddp_dep_dbt d, dparty_dbt pt where d.t_code = ? and pt.t_partyid = d.t_partyid");
    cmd.AddParam("",RSDBP_IN, code);
var rs = RsdRecordset(cmd);
    if (rs.MoveNext())
        return rs.value(0);
    end;
    return "";
end;

macro ClearTmpTable()
var cmd = RsdCommand(" truncate table dnal_reg_tmp_dbt ");
    cmd.execute();
end;


macro GetCodeByNameBranch(name)
var cmd = RsdCommand("Select t_code from ddp_dep_dbt where t_name = ? ");
    cmd.AddParam("",RSDBP_IN, name);
var rs = RsdRecordset(cmd);
    if (rs.MoveNext())
        return rs.value(0);
    end;
    return -1;
end;

//  04.02.2014 R-324925-2 DPN - Адаптация под 31-й патч (переписан запрос)
macro getAllDebtors(RepDate :date) :RsdRecordset
    startQueryCapture ();
    [
      with param as (select :startdate startdate, :repdate  repdate, :branch  branch from dual)
      SELECT   pt.t_name clientname,
         NVL (
            (SELECT   code.t_code
               FROM   dobjcode_dbt code
              WHERE       code.t_objecttype = 3
                      AND code.t_codekind = 1
                      AND code.t_state = 0
                      AND code.t_objectid = pt.t_partyid),
            ' '
         )
            clientcode,
         SUBSTR (c.t_account, -5) sfclientnumber,
         NVL (
            (SELECT   MIN (sf.t_dateconc)
               FROM   dsfcontr_dbt sf
              WHERE   sf.t_partyid = pt.t_partyid AND sf.t_objecttype = 1),
            c.t_open_date
         )
            sfclientdate,
         datebegin,
         account,
         COUNT (1) OVER (PARTITION BY NULL) countt
         FROM   (  SELECT   MAX(NVL (
                            (SELECT   MAX (r.t_restdate)
                               FROM   drestdate_dbt r, param
                              WHERE       r.t_accountid = t.accountid                                      
                                      AND r.t_rest = 0
                                      AND r.t_restdate <= param.repdate
                                      AND r.t_restdate > param.startdate),
                            CASE
                               WHEN (acc.t_open_date > param.startdate)
                               THEN
                                  acc.t_open_date
                               ELSE
                                  param.startdate
                            END
                         ))
                        datebegin,
                     acc.t_account account
              FROM   (SELECT   acc.t_account account,  acc.t_accountid accountid
                        FROM   daccount_dbt acc, drestdate_dbt repaidrest, param
                       WHERE   REGEXP_LIKE (acc.t_account, '^47423810[0-9]3')
                               AND acc.t_chapter = 1
                               AND ACC.T_ACCOUNTID = REPAIDREST.T_ACCOUNTID
                               AND rsb_account.resta (acc.t_account,
                                                      param.repdate,
                                                      1,
                                                      NULL) != 0
                               AND acc.t_open_date <= param.repdate) t,
                     daccount_dbt acc, param
             WHERE       acc.t_account = t.account
                     AND acc.t_chapter = 1
                     AND acc.t_open_date <= param.repdate
          GROUP BY   acc.t_account) tt,
         daccount_dbt c,
         dparty_dbt pt
          WHERE       c.t_account = tt.account
         AND c.t_client = pt.t_partyid
         AND c.t_chapter = 1         
         AND:branch = CASE WHEN (-1 != :branch) THEN (c.t_branch) ELSE -1 END
              /*and c.t_account = '47423810030000024019'*/
    ];
    var sql = endQueryCapture ();    
    return (execSqlSelect (sql, makeArray (SqlParam ("StartDate", StartDate), SqlParam ("Repdate", RepDate), SqlParam ("branch", CodeBranch))));
end;

macro GetRepaidAllDepts(Account, dateBegin, dateEnd) :money
var cmd, rs;
    cmd = RsdCommand(" Select nvl(sum(t_sum_natcur),0) summ from dacctrn_dbt arh where arh.T_ACCOUNT_RECEIVER = :Account AND ARH.T_CHAPTER = 1 AND ARH.T_DATE_CARRY BETWEEN :dateBegin "+
                     " AND  :dateEnd");
    cmd.addparam("Account"  ,RSDBP_IN, Account);   
    cmd.addparam("dateBegin",RSDBP_IN, dateBegin); 
    cmd.addparam("dateEnd"  ,RSDBP_IN, dateEnd);
    rs = RsdRecordset(cmd);
    if(rs.moveNext())
        return(rs.value("Summ"));
    end;
    return 0;
end;

macro InsertTmpTable(p1, p2, p3, p4, p5, p6, p7, p8, Rest, Repdate: Date);
var cmd = RsdCommand("Insert into dnal_reg_tmp_dbt values(?,?,?,?,?,?,?,?,?,?,?) ");
    cmd.addparam("", RSDBP_IN, p1);   
    cmd.addparam("", RSDBP_IN, p2);   
    cmd.addparam("", RSDBP_IN, p3);   
    cmd.addparam("", RSDBP_IN, p4);   
    cmd.addparam("", RSDBP_IN, p5);   
    cmd.addparam("", RSDBP_IN, p6);   
    cmd.addparam("", RSDBP_IN, p7);   
    cmd.addparam("", RSDBP_IN, p8);
    if(((Repdate - p6) >=0 ) and ((Repdate - p6) < 45) )
    cmd.addparam("", RSDBP_IN, Rest);   
    cmd.addparam("", RSDBP_IN, 0);   
    cmd.addparam("", RSDBP_IN, 0);   
    elif(((Repdate - p6) >= 45) and ((Repdate - p6) <= 90 ))
    cmd.addparam("", RSDBP_IN, 0);   
    cmd.addparam("", RSDBP_IN, Rest);   
    cmd.addparam("", RSDBP_IN, 0);   
    elif((Repdate - p6) >  90 )
    cmd.addparam("", RSDBP_IN, 0);   
    cmd.addparam("", RSDBP_IN, 0);   
    cmd.addparam("", RSDBP_IN, Rest);   
    end;
    cmd.execute();
end;
macro ReplacePoint(str : String)
    return strsubst(str, ".", ",");
    /*if (index(str, ",") == 0)
        str = str + ",00";
    end;
    return str;*/
end;

macro GetInfoForRegister() :RsdRecordset
    return RsdRecordset(" SELECT   T_PAYERNAME PAYERNAME,                 "+ 
                        "          T_PAYERCODE PAYERCODE,                 "+ 
                        "          T_COMMNAME COMMNAME,                   "+ 
                        "          T_CONTRACTID CONTRACTID,               "+  
                        "          T_DATE_CONTRACT DATE_CONTRACT,         "+  
                        "          T_DATEVALUE DATEVALUE,                 "+  
                        "          T_COMMSUM COMMSUM,                     "+  
                        "          T_SUM_SROK1 SUM_SROK1,                 "+  
                        "          T_SUM_SROK2 SUM_SROK2,                 "+  
                        "          T_SUM_SROK3 SUM_SROK3,                 "+  
                        "          COUNT (1) OVER (PARTITION BY NULL) col "+  
                        " FROM   dnal_reg_tmp_dbt                          ");  
end;
macro GetInfoForCheck() :RsdRecordset
    return RsdRecordset(" SELECT   R.T_PAYERCODE PAYERCODE,                              "+
                        " R.T_PAYERNAME PAYERNAME,                                       "+
                        " r.t_account account,                                           "+
                        " (SUM (R.T_SUM_SROK1) + SUM (R.T_SUM_SROK2) + SUM (R.T_SUM_SROK3)) summ , count(1) over (partition by null) col "+
                        " FROM   dnal_reg_tmp_dbt r                                      "+
                        " GROUP BY   R.T_PAYERCODE, R.T_PAYERNAME, r.t_account ");
end;                                                                           


macro Report(RepDate)
    var Dt, RepaidAllSumm, RepaidRest;        
    var dateBegin;
    var Debtors = getAllDebtors(RepDate);
    var Numb = 0;
    var isFirstCallProgress = true;    
    ClearTmpTable();
    while(Debtors.moveNext())
        if ((debtors.value("datebegin") == StartDate) or (restA(debtors.value("account"), date(debtors.value("datebegin"))) == 0))
            dateBegin = date(debtors.value("datebegin")) + 1;
        else
            dateBegin = date(debtors.value("datebegin"));
        end;     
        if(isFirstCallProgress)
            initprogress(int(debtors.value("countt")), "Ожидайте, идет подсчет задолжностей по комиссиям");
            isFirstCallProgress = False;
        end;
        useprogress(Numb = (Numb + 1));
    startQueryCapture ();   
    
    //  04.02.2014 R-324925-2 DPN - Адаптация под 31-й патч (переписан запрос)
    [
      SELECT NVL (SUBSTR (rm.t_ground, 1, 200), SUBSTR (arh.t_ground, 1, 200)) ground,
             arh.t_date_carry datecarry, ARH.T_SUM_NATCUR summ, ARH.T_ACCOUNT_PAYER
      FROM dacctrn_dbt arh, 
           dpmpaym_dbt pm,
           dpmrmprop_dbt rm,
           dpmdocs_dbt docs
     WHERE arh.t_account_payer = :account
       and arh.t_date_carry BETWEEN :datebegin AND :dateend
       and arh.t_acctrnid = docs.t_acctrnid(+) 
       and DOCS.T_PAYMENTID = pm.T_PAYMENTID(+)
       AND rm.t_paymentid(+) = pm.t_paymentid
       AND arh.t_chapter = 1              
    ];
      var sql = endQueryCapture ();
        
      Dt = execSqlSelect (sql, makeArray (SqlParam ("Account"  , Debtors.value("account")),
                                          SqlParam ("dateBegin", datebegin),                                           
                                          SqlParam ("dateEnd"  , RepDate)));       
        
      RepaidAllSumm = GetRepaidAllDepts(Debtors.value("Account"), datebegin, Repdate);            
      while(Dt and Dt.moveNext())         
          RepaidRest = (Dt.value("summ") - RepaidAllSumm);
          if(RepaidRest <= 0)
             RepaidAllSumm = abs(RepaidRest);               
             continue; 
          end;
          RepaidAllSumm = 0;       
          InsertTmpTable(String(Debtors.value("ClientName")),
                         Debtors.value("ClientCode"),
                         String(Dt.value("ground")),
                         Debtors.value("SfClientNumber"),
                         Debtors.value("SfClientDate", null, v_date),
                         Dt.value("dateCarry", null, v_date),
                         Dt.value("Summ"),
                         Debtors.value("account"),
                         RepaidRest, 
                         Repdate);      
      end;                  	
     
      if (RestA(Debtors.value("account"), date(Debtors.value("dateBegin"))) != 0 )
          var RestBeforeStartDate  = abs(RestA(Debtors.value("account"), StartDate)); 
          if(RestBeforeStartDate != 0)   
              var StartGround = "Комиссии РКО до " + _date(StartDate);      
              InsertTmpTable(String(Debtors.value("ClientName")),
                             Debtors.value("ClientCode"),String(StartGround),
                             Debtors.value("SfClientNumber"),
                             Debtors.value("SfClientDate", null, v_date),
                             StartDate, 
                             RestBeforeStartDate - RepaidAllSumm,
                             Debtors.value("account"),
                             RestBeforeStartDate - RepaidAllSumm, 
                             Repdate);        
          end;
      end;  
    end;
    if(not isFirstCallProgress)       
       isFirstCallProgress = true;
       remprogress;
    end;            
    var InfoForReport = GetInfoForRegister();
    Numb = 0;    
    var TotalSumRegister = TArray();
        TotalSumRegister[0] = $0;
        TotalSumRegister[1] = $0;
        TotalSumRegister[2] = $0;
        TotalSumRegister[3] = $0;
        TotalSumRegister[4] = $0;        
    setoutput("..\\txtfile\\" + RegisterTxtFile);
    while(InfoForReport.MoveNext())
        if(isFirstCallProgress)
            initprogress(int(InfoForReport.value("col")), "Ожидайте, идет выгрузка данных для Регистра");
            isFirstCallProgress = false;
        end; 
        useprogress(Numb = (Numb + 1));
               println(Numb 
                + ";" + ClearStr(InfoForReport.Value("payername"))       
                + ";" + InfoForReport.Value("payercode")                         
                + ";" + ClearStr(InfoForReport.Value("commname"))       
                + ";" + InfoForReport.Value("contractid")
                + ";" + _date(date(InfoForReport.Value("date_contract", null, v_date)))                 
                + ";" + _date(date(InfoForReport.Value("datevalue", null, v_date)))     
                + ";" + ReplacePoint(money(InfoForReport.Value("COMMSUM")))                        
                + ";" + "810"                                
                + ";" + ReplacePoint(money(InfoForReport.Value("sum_srok1") + InfoForReport.Value("sum_srok2") + InfoForReport.Value("sum_srok3"))) 
                + ";" + ReplacePoint(money(InfoForReport.Value("sum_srok1"))) 
                + ";" + ReplacePoint(money(InfoForReport.Value("sum_srok2"))) 
                + ";" + ReplacePoint(money(InfoForReport.Value("sum_srok3"))) + ";" 
               );  
        TotalSumRegister[0] = TotalSumRegister[0] + money (InfoForReport.Value("COMMSUM"));       
        TotalSumRegister[1] = TotalSumRegister[1] + money (InfoForReport.Value("sum_srok1") + InfoForReport.Value("sum_srok2") + InfoForReport.Value("sum_srok3"));
        TotalSumRegister[2] = TotalSumRegister[2] + money (InfoForReport.Value("sum_srok1"));
        TotalSumRegister[3] = TotalSumRegister[3] + money (InfoForReport.Value("sum_srok2"));
        TotalSumRegister[4] = TotalSumRegister[4] + money (InfoForReport.Value("sum_srok3"));
    end;    
    setoutput(null,true);       
        if(not isFirstCallProgress)       
            isFirstCallProgress = true;
            remprogress;
        end;  
    TermFileExcel = Check_Templ(Templ);         
    TermRegisterTxtFile = Copy_Text(RegisterTxtFile);
       if((TermRegisterTxtFile  == "") or (TermFileExcel == "")) exit(1); end;     
    if(not NewExcelWorkbook2(false, TermFileExcel))
      exit(0, "Не открыт файл шаблона отчета");
    end;    
    OpenTempl("Регистр");
    RegisterDopInfo(Numb, TotalSumRegister);
    ExcelApplication.Visible = true;
   if (NalRegDlg.rec.Text == "X")     
        InfoForReport = GetInfoForCheck();
        Numb = 0;
        var TotalSumCheck = TArray();
        TotalSumCheck[0] = $0;
        TotalSumCheck[1] = $0;
        TotalSumCheck[2] = $0;
        var Rest47423 = $0;
        setoutput("..\\txtfile\\" + CheckTxtFile);
        while(InfoForReport.MoveNext())
           if(isFirstCallProgress)
              initprogress(int(InfoForReport.value("col")), "Ожидайте, идет выгрузка данных для Проверки");
              isFirstCallProgress = false;
           end;
           useprogress(Numb = (Numb + 1));           
           Rest47423 = abs(RestA(InfoForReport.Value("account"), RepDate));
           println(Numb 
                   + ";" + ClearStr(InfoForReport.Value("payername"))       
                   + ";" + InfoForReport.Value("payercode")                         
                   + ";" + ReplacePoint(money(InfoForReport.Value("summ")))        
                   + ";" + ReplacePoint(money(Rest47423))
                   + ";" + ReplacePoint(money(InfoForReport.Value("summ") - Rest47423)) + ";"                                    
                  );         
                         
           TotalSumCheck[0] = TotalSumCheck[0] + money(InfoForReport.Value("summ"));
           TotalSumCheck[1] = TotalSumCheck[1] + Rest47423;
           TotalSumCheck[2] = TotalSumCheck[2] + (InfoForReport.Value("summ") - Rest47423);
        end;
        setoutput(null,true);       

    if(not isFirstCallProgress)
        remprogress;
    end; 
       

    TermFileExcel = Check_Templ(Templ);         
    TermCheckTxtFile = Copy_Text(CheckTxtFile);
    if((TermCheckTxtFile  == "") or (TermFileExcel == "")) exit(1); end;     
    if(not NewExcelWorkbook2(false, TermFileExcel))
      exit(0, "Не открыт файл шаблона отчета");
    end;    
    OpenTempl("Проверка"); 
    CheckDopInfo(Numb, TotalSumCheck);
    ExcelApplication.Visible = true;
end;    


end;


macro Event (dlg, cmd, id, key) 
     record DepBuff (dp_dep);
     var const_message = "~F2~ Продолжить F3~ Выбор даты из календаря  ~Space~ Выбор формата отчета  ~ESC~ Выход ";  
     if(cmd == DLG_INIT)
        Message(const_message);
        dlg.rec.RepDate = {curDate};        
        dlg.rec.DepNumb = "";
        dlg.rec.DepName = "Все подразделения";
        UpdateFields(dlg); 
     end;  
     if (cmd == DLG_KEY)    
         if (KEY == KEY_ESC)
           return exit(1);      
         elif ( KEY == KEY_F3)      
             if (FldName(dlg,id) == "RepDate")
               dlg.rec.RepDate = GetDateByCalendar ({curDate});
             elif (FldName(dlg,id) == "DepNumb")
               if (ListDepartment (DepBuff));
                 dlg.rec.DepName = GetNameByCodeBranch(DepBuff.Code);
                 dlg.rec.DepNumb = DepBuff.Name;          
               end;   
             end;  
         UpdateFields(dlg); 
         elif (KEY == KEY_SPACE)
            if(FldName(dlg,id) == "text")
               if(dlg.rec.Text == "X") 
                  dlg.rec.Text = "";
               else
                  dlg.rec.Text = "X";
               end;
            end;
         UpdateFields(dlg); 
         elif ( KEY == KEY_F2 )
             if(dlg.rec.DepNumb != "")
                 CodeBranch = GetCodeByNameBranch(dlg.rec.DepNumb);
             end;
             NameBranch = dlg.rec.DepName;
             ReportDate = date(dlg.rec.RepDate);
             Report(date(dlg.rec.RepDate) - 1);             
             Return CM_SAVE;
         elif ( (KEY == KEY_ENTER) and (FldName(dlg,id) == "DepNumb") )
             SetFocus(dlg, 0);
             Return CM_IGNORE;    
         end;
     end;
end;

if(not (PathTempl = RSL_GetRegistryValue("BANK_INI/ОБЩИЕ ПАРАМЕТРЫ/ДИРЕКТОРИИ/USERTEMPLSDIR", false)))
   MsgBox("Не удалось найти путь к шаблонам ");
   exit(1);
else 
   if (not (Templ = FindPath(TemplName, PathTempl)))
      MsgBox("Не удалось найти шаблон: " + TemplName);
      exit(1);    
   end;
end;    
if(not (PathLBR = RSL_GetLbrPath(NameLBR, false)))
   MsgBox("Не удалось найти LBR: " + NameLBR);
   exit(1);
end;

NalRegDlg = TRecHandler(PanelNameLBR, PathLBR, True);
if (not RunDialog(NalRegDlg, "Event"))
    MsgBox("Не удалось запустить обработчик панели ");
    exit(1);
end;

exit(1);






