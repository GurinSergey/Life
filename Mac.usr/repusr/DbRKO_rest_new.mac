/************************************************************************************************************************
  Название макроса: nalog_control_report.mac
  Описание        : Дебиторская задолженность за РКО с отражением остатков на 47425      
  Номер заявки    : C-34370
  Автор           : DPN
  Изменения       : 09.01.2015 DPN I-00543154 Добавил колонку несоответствия результата, сделал full join по просьбе Петренко
************************************************************************************************************************/


import "fg_Life_parm.mac";
import rsbdataset,bankinter, globals, календарь;
import "frontcommon.mac";
import "to_frontcommon.mac";

import rcw, rsexts, RSD;
import  oralib;
import  likePy;
import RsbFormsInter;
import "FNS_lib.mac";

CONST en2="Фамилия исполнителя";
CONST en4="Фамилия руководителя"; 
const TEXTDIR_REESTR = "BANK_INI\\ОБЩИЕ ПАРАМЕТРЫ\\ДИРЕКТОРИИ\\TEXTDIR";




var  ex, ob, out, /*outputx="dbrko.xls"*/, fulloutput, obBook, obsheet, i, reportdate, total;
var  text, result, percent, s:integer;

var name = "accounts";
var bName = "txtRep";
var lname = "", as, sel_range, cnt = 0, forExcel, restSpec, group;

macro SetTypeColumns(aw:tarray);
    var w1=tarray(true);
    var w2=tarray(true);
    var w3=tarray(true);  
    var w4=tarray(true);
    var w5=tarray(true);
    var w6=tarray(true);
    var w7=tarray(true);
    var w8=tarray(true);  
    var w9=tarray(true);
    var w10=tarray(true);
    var w11=tarray(true);
    var w12=tarray(true);


    w1(0)=1; w1(1)=2; 
    w2(0)=2; w2(1)=2; 
    w3(0)=3; w3(1)=1; 
    w4(0)=4; w4(1)=2;   
    w5(0)=5; w5(1)=2; 
    w6(0)=6; w6(1)=1; 
    w7(0)=7; w7(1)=4; 
    w8(0)=8; w8(1)=2; 
    w9(0)=9; w9(1)=2;   
    w10(0)=10; w10(1)=2;
    w11(0)=11; w11(1)=1;
    w12(0)=12; w12(1)=1;

    aw(0)=w1;
    aw(1)=w2;
    aw(2)=w3;
    aw(3)=w4;
    aw(4)=w5;
    aw(5)=w6;
    aw(6)=w7;
    aw(7)=w8;
    aw(8)=w9;
    aw(9)=w10;
    aw(10)=w11;
    aw(11)=w12;
end;

macro transToExcel(tempFileName)
    private var m_errCode :integer = NULL;
    var aw = tarray(true);
     
    SetTypeColumns(aw); 
    ob = CreateObject ("rsax","TRsAxServer","RsAxServer",false);
    ex = ob.CreateComObject ("Excel.Application",true);
    ex.visible = false;
    forExcel =name+{oper}+"_"+date+"_"+time;  
    
    forExcel = StrSubst ( forExcel, ".", "_" );
    forExcel = StrSubst ( forExcel, ":", "_" );
    forExcel = StrSubst ( forExcel, " ", "_" );
    forExcel = "$" + ex.defaultFilePath + "\\" + forExcel;
    if (not CopyFile(tempFileName, forExcel))
        println ("Error Copy file");
    end;
    forExcel = substr(forExcel, 2);
    obBook = ex.Workbooks.opentext(forExcel, 866, 1, 1,2,true,false,false,false,false,true,"┼",aw,1,"."," ",true,false);
end;

macro chekReestrRead(m_name:string, m_status:integer, m_err:integer)
    if((m_status == V_UNDEF) or (m_err != 0))
       msgbox("Ошибка получения значения настройки реестра " + m_name + " \n Процедура GetRegistryValue вернула код ошибки "+m_err);
       exit(0);
    end;
end;
macro regOption(m_reestrName:string):string
    private var m_errCode :integer = NULL;
    private var m_statusGetRegistry :integer = NULL;
    private var m_zna4enie          :string  = NULL;
    if (m_reestrName == "")
        msgbox("Не задана строка реестра!");
        exit(0)
    end;
    m_statusGetRegistry = GetRegistryValue(m_reestrName, V_STRING, m_zna4enie, m_errCode);
    chekReestrRead(m_reestrName, m_statusGetRegistry, m_errCode);
    return(m_zna4enie);
end;

macro createUniqueFile(BeginName, lastName)
    private var ff:string = BeginName +{oper}+"_"+date+"_"+time;
    private var file_ext:string = ".txt";
    private var tempFileName = regOption(TEXTDIR_REESTR);
    tempFileName = tempFileName + "\\" + ff;
    var tempFileNameBezPuti = ff;
    tempFileName = StrSubst ( tempFileName, ".", "_" );
    tempFileName = StrSubst ( tempFileName, ":", "_" );
    tempFileName = StrSubst ( tempFileName, " ", "_" );
    tempFileName = tempFileName + file_ext;
    tempFileNameBezPuti = StrSubst ( tempFileNameBezPuti, ".", "_" );
    tempFileNameBezPuti = StrSubst ( tempFileNameBezPuti, ":", "_" );
    tempFileNameBezPuti = StrSubst ( tempFileNameBezPuti, " ", "_" );
    tempFileNameBezPuti = tempFileNameBezPuti + file_ext;
    if (substr(tempFileName,1,2) == "__")
        tempFileName=".."+substr(tempFileName,3)
    end;
    lastName = tempFileNameBezPuti;
    setParm(1, lastName);
    SetOutPut(tempFileName, false);
end;

private var oConnection_lib = ActiveX("ADODB.Connection");

var Fulloutputl, outl, outputl="dbrko.lbr";                    
GetRegistryValue("BANK_INI\\ОБЩИЕ ПАРАМЕТРЫ\\ДИРЕКТОРИИ\\LBRDIR",2,outl);
Fulloutputl = FindPath(outputl, outl);
var dlg = TRecHandler("dbrko", fulloutputl, TRUE); 


/*Подключение к фронту*/
private macro CallProcedure(Bic, Account)
  var oConnection = oConnection_lib, connstring, rsd;
  array aInput, aOutPut;

/*Подключение к фронту*/
  macro front_open(conn,stri)
    conn2front(conn, stri);
  END;

  macro front_close
    if (oConnection and (oConnection.State == 1) )
       oConnection.Close();
    end;
  END;

   /* Инициализация параметров */
   aInput(0) = Account;
   aInput(1) = Bic;
   asize(aOutput,0);
   
/* строка соединения из таблицы маршрутизации */
   if (get_string_2_front_connect(@connstring,1)==0)

       front_open(oConnection,connstring);

   else msgbox("не могу получить строку коннекта к ФРОНТ. причина: "+connstring);
   end;

   rsd = RSADORecordset(ExecuteFrontProcEx("rsb6_get_riskgroup", aInput, oConnection));
   result = 0;
   percent = 0;
   text = "";
    if (rsd.movenext())
        result = rsd.m_value[0];
        percent = rsd.m_value [1];
    end;
   if ((Result == 1) or (Result == 2) or (Result == 3) or (Result == 4))
     text = "Не определено";
   end;



   /* Если осталось открытое соединение, закрываем */
   if (oConnection and (oConnection.State == 1) )
      oConnection.Close();
   end;

  return 0;

END;

macro FormatExcel(fileName:String);
    var a = 7;
    initprogress(-1,"Идет форматирование таблицы результата","Форматирование таблицы результата...");
    
    as = ex.worksheets(1);
    as.Cells(1,1).Value="Отчет по Дебиторской задолженности за РКО на заданную дату";
    as.Cells(3,1).Value="ОАО АКБ Пробизнесбанк";
    as.Cells(4,1).Value="По состоянию на";
    as.Cells(4,3).Value=reportdate;
    as.Cells(6,1).Value="№ п/п ";
    as.Cells(6,2).Value="Наименование клиента";
    as.Cells(6,3).Value="RS-код клиента";
    as.Cells(6,4).Value="Лицевой счет по маске 47423810K30000NNNNNN"; 
    as.Cells(6,5).Value="Подр.";
    as.Cells(6,6).Value="Сумма остатка на отчетную дату";
    as.Cells(6,7).Value="Дата образования остатка";
    as.Cells(6,8).Value="Наличие/отсутствие остатка на 452,454 бал. счетах";
    as.Cells(6,9).Value="Группа риска по ссуде";
    as.Cells(6,10).Value="Лицевой счет по маске 47425810K02N003NNNNN";
    as.Cells(6,11).Value="Сумма остатка на отчетную дату"; 
    as.Cells(6,12).Value="Сумма несоответствия"; 
    
    /* Для дочерних банков должно указываться их название */
    var fgBank = fg_life_subject( {OurBank} );
    if ( fgBank.is_VUZ )
       as.Cells(3,1).Value = "ОАО \"ВУЗ-банк\"";
    elif ( fgBank.is_EXV )
       as.Cells(3,1).Value = "ЗАО АКБ\"ЭКСПРЕСС-ВОЛГА\"";
    elif ( fgBank.is_GEB )
       as.Cells(3,1).Value = "ОАО \"ГАЗЭНЕРГОБАНК\"";
    end;

    as.Cells.Font.Size = 10;
    as.PageSetup.Orientation = 2;
    as.Columns("A:A").ColumnWidth = 5;
    as.Columns("B:B").ColumnWidth = 25;
    as.Columns("C:C").ColumnWidth = 10;
    as.Columns("D:D").ColumnWidth = 22;
    as.Columns("E:E").ColumnWidth = 5;
    as.Columns("F:F").ColumnWidth = 12;
    as.Columns("G:G").ColumnWidth = 12;
    as.Columns("H:H").ColumnWidth = 18;
    as.Columns("I:I").ColumnWidth = 12;
    as.Columns("J:J").ColumnWidth = 22;
    as.Columns("K:K").ColumnWidth = 15;
    as.Columns("L:L").ColumnWidth = 15;
    
    as.range("A1:I1").MergeCells = true;
    as.Range("A1:I1").HorizontalAlignment = 3;
    
    as.Range("A6:L"+(i+6)).Borders.Weight=2;
    as.range("A6:L"+(i+6)).WrapText = true;
    as.Range("A6:L"+(i+6)).VerticalAlignment = 2;
    as.Range("C4:E"+(i+6)).HorizontalAlignment = 3;
    as.Range("G4:J"+(i+6)).HorizontalAlignment = 3;
    
    as.range("A1:I1").MergeCells = true;
    
    as.range("B" +(i+10)+":D"+(i+10)).MergeCells = true;
    as.range("B" +(i+10)) ="Ответственный исполнитель";
    as.range("F" +(i+10)) =En2;
    
    as.range("B" +(i+12)+":D"+(i+12)).MergeCells = true;
    as.range("B" +(i+12)) ="Начальник Управления Организации Расчетов:";
    as.range("F" +(i+12)) =En4;
    for (a,7, i+6)
        useprogress(a);
        if (as.Range("L"+a).value != 0)
            as.Range("A" + a + ":L" + a).Interior.ColorIndex=6;
            
        end;
    end;
    remprogress(i+6);
    ex.visible = true;
end;



private macro outall
  var total=0; var total_ = 0;
  initprogress(-1,"Ждите, производится расчет...","Производится расчет дебиторской задолженности");

  useprogress(-1);

  s=0;
                                                                            
//09.01.2015 DPN I-00543154 
//13.05.2015 VDN I-00566543
  var sq =  " select NVL (oldt.t_name, newt.t_name), COALESCE (oldt.cl_code, newt.cl_code, ' '), nvl(oldT.T_account, ' '),  NVL (ABS (oldt.acc_rest), 0) oRest, NVL (oldt.date_rest, '01.01.1001'),         " +
            " oldT.acc_454_452, nvl(oldt.num_branch, newt.num_branch), nvl(newT.t_account, ' '), nvl(abs(newT.acc_rest), '0'),      " +
            "  nvl(ABS (oldt.acc_rest), 0) - NVL (ABS (newt.acc_rest), '0')                                           " +
            " from                                                                                           " +
            " (SELECT D.T_NAME,                                                                              " +
            "        (SELECT substr(b.t_code,7)                                                              " +
            "     FROM dobjcode_dbt b                                                                        " +
            "     WHERE    b.t_objectid = c.t_client  AND b.t_codekind = 1                                   " +
            "              AND regexp_like(b.t_code, '.{6}$')                                                " +
            "              AND TRANSLATE (b.T_CODE, '_0123456789/ ', '_') IS NULL                            " +
            "              AND t_state = 0) AS CL_CODE, C.T_ACCOUNT, RSB_ACCOUNT.RESTA(C.T_ACCOUNT,?,1,0) AS ACC_REST,            " +
            "        (SELECT MIN(G.T_RESTDATE) FROM drestdate_dbt G                                          " +
            "          WHERE G.T_ACCOUNTID    = C.T_ACCOUNTID                                                " +
            "            AND G.T_RESTCURRENCY = C.T_CODE_CURRENCY                                            " +
            "            AND (G.T_RESTDATE    > (SELECT MAX(E.T_RESTDATE) FROM drestdate_dbt E               " +
            "                                     WHERE E.T_ACCOUNTID    = C.T_ACCOUNTID                     " +
            "                                       AND E.T_RESTCURRENCY = C.T_CODE_CURRENCY                 " +
            "                                       AND E.T_RESTDATE    <= ?                                 " +
            "                                       AND E.T_REST         = 0                                 " +
            "                                     )                                                          " +
            "                     OR NOT EXISTS (SELECT H.T_RESTDATE FROM drestdate_dbt H                    " +
            "                                     WHERE H.T_ACCOUNTID    = C.T_ACCOUNTID                     " +
            "                                       AND H.T_RESTCURRENCY = C.T_CODE_CURRENCY                 " +
            "                                       AND H.T_RESTDATE    <= ?                                 " +
            "                                       AND H.T_REST         = 0)                                " +
            "                    )                                                                           " +
            "                AND G.T_REST <> 0                                                               " +
            "        ) AS DATE_REST,                                                                         " +
            "        (SELECT MIN(F.T_ACCOUNT) FROM daccount_dbt F WHERE                                      " +
            "            (F.T_ACCOUNT LIKE '452%' OR F.T_ACCOUNT LIKE '454%') AND F.T_CLIENT = C.T_CLIENT    " +
            "            AND RSB_ACCOUNT.RESTA(F.T_ACCOUNT,  ? , 1, 0) <> 0                                  " +
            "        ) AS ACC_454_452,                                                                       " +
            "        ( SELECT T_NAME FROM ddp_dep_dbt WHERE T_CODE = C.T_BRANCH                              " +
            "        ) AS NUM_BRANCH                                                                         " +
            "  FROM daccount_dbt C, dparty_dbt D                                                              " +
            "  WHERE C.T_CHAPTER = 1                                                                          " +
            "        AND c.t_account LIKE '47423810_30_00%'                                                   " + 
            "        AND RSB_ACCOUNT.RESTA(C.T_ACCOUNT, ? , 1, 0) <> 0                                        " +
            "        AND C.T_OPEN_DATE <=  ?                                                                  " +
            "        AND D.T_PARTYID = C.T_CLIENT   ) oldT                                                    " +
            " full join                                                                                      " +
            "  (SELECT (SELECT substr(b.t_code,7)                                                            " +
            "     FROM dobjcode_dbt b                                                                        " +
            "     WHERE    b.t_objectid = c.t_client  AND b.t_codekind = 1                                   " +
            "              AND regexp_like(b.t_code, '.{6}$')                                                " +
            "              AND TRANSLATE (b.T_CODE, '_0123456789/ ', '_') IS NULL                            " +
            "              AND t_state = 0) AS cl_code,  (SELECT t_name                                      " +
            "                                             FROM ddp_dep_dbt                                   " +
            "                                             WHERE t_code = c.t_branch)                         " +
            "                                            AS num_branch,                                      " +
            "     c.t_account, D.T_NAME,                                                                     " +
            "          rsb_account.resta (c.t_account, ? , 1, 0) AS acc_rest                                 " +
            "  FROM daccount_dbt c, dparty_dbt d                                                             " +
            "  WHERE     c.t_chapter = 1                                                                     " +
            "  AND c.t_account LIKE '47425810_02_003%'                                                       " +
            "  AND rsb_account.resta (c.t_account, ? , 1, 0) <> 0                                            " +
            "  AND c.t_open_date <= ? AND d.t_partyid = c.t_client ) newT                                    " +
            " on oldt.cl_code = newt.cl_code                                                                 " +
            " ORDER BY SUBSTR (oldT.t_account, 16, 5)";

                       debugbreak;

//Выбираем остатки на дату
  i=0;

  var cmd1 = rsdcommand ( sq );
  cmd1.addparam("d_param_1", RSDBP_IN, reportdate); 
  cmd1.addparam("d_param_2", RSDBP_IN, reportdate);
  cmd1.addparam("d_param_3", RSDBP_IN, reportdate);
  cmd1.addparam("d_param_4", RSDBP_IN, reportdate);
  cmd1.addparam("d_param_5", RSDBP_IN, reportdate);
  cmd1.addparam("d_param_6", RSDBP_IN, reportdate);
  cmd1.addparam("d_param_7", RSDBP_IN, reportdate);
  cmd1.addparam("d_param_8", RSDBP_IN, reportdate);
  cmd1.addparam("d_param_9", RSDBP_IN, reportdate);
  cmd1.execute;
  var datas = rsdrecordset(cmd1);


    println();
    println();
    println();
    println();
    println();
    println();
    while (datas.movenext())    //acc
        useprogress(s);
        s=s+1;
        restSpec = " ";
        group = " ";
        total = total + datas.value(3);
        total_ = total_ + datas.value(8);
        i=i+1;
        if ( valtype(datas.value(5)) != 26 )
            restSpec= "Да";
            CallProcedure({MFO_Bank}, datas.value(5));
            if (not text)
                if ( (valtype(result) != 26) and (valtype(percent) != 26) )
                    group = result+" "+string(percent)+"%";
                else
                    group = "Отсутствуют данные из Front";
                end;
            else
                group=text;
            end;
        else
            group="";
            restSpec= "Нет";
        end;
       
        println(i+" ┼"+datas.value(0)+" ┼"+datas.value(1)+" ┼"+datas.value(2)+" ┼"+datas.value(6)+" ┼"+abs(datas.value(3))+" ┼"+date(datas.value(4))+" ┼"+restSpec+" ┼"+group+" ┼"+datas.value(7)+" ┼"+datas.value(8)+" ┼" + datas.value(9));
    end; //acc
    println();
    println("┼","ИТОГО ДОКУМЕНТОВ:", " ┼", i," ┼", "Общая сумма:"," ┼"," ┼", round(total,2), " ┼"," ┼"," ┼"," ┼" "Общая сумма:" " ┼", round(total_,2));
    println();
 /*   println("┼", "Ответственный исполнитель", " ┼", " ┼", " ┼", " ┼", En2);
    println();
    println("┼", "Начальник Управления Организации Расчетов:"," ┼", " ┼", " ┼", " ┼",En4);*/
    
    SetOutPut(null,false);
    remprogress(s);
end;


 /*Обработчик диалоговой панели ввода исходных данных для печати*/
MACRO Event (dlg, cmd, id, key) 

   var const_mess = " ~F3~ Выбор даты из календаря ~F2~ Продолжить ~ESC~ Выход ";

   /*Первоначальная инициализация полей*/
   if(cmd == DLG_INIT)
      dlg.rec.reportdate = {curDate};
      UpdateFields(dlg); 
   end;
   
   /*Установка подсказок в строке состояния*/
   if (cmd==DLG_SETFOCUS)
       message(const_mess);
   end;
   
   if (cmd == DLG_REMFOCUS)
     /*Проверка корректности дат отчета*/
      UpdateFields(dlg); 
   end;

   if (cmd == DLG_KEY)
     /*Выход из диалогового окна формирования отчета*/
     if (KEY == KEY_ESC)
       return exit(1);//CM_CANCEL;
     /*Выбор данных из списка*/
     elif ( KEY == KEY_F3)
        /*Выбор даты из календаря*/
        if (FldName(dlg,id) == "ReportDate")
          dlg.rec.ReportDate = GetDateByCalendar ({curDate}-1);
        end;
        
     elif (( KEY == KEY_F2 ) or (KEY == KEY_ENTER))         //Проверки при вводе
         if ( dlg.rec.ReportDate > {curdate} )
                MsgBox("Дата должна быть не больше даты текущего операционного дня");
                return CM_IGNORE;
         end;
        ReportDate  = dlg.rec.ReportDate;
        Return CM_SAVE;
     end;
      else
           Return CM_IGNORE;
   end;
        
END;

/*Точка входа в макрос*/
if (RunDialog(dlg, "Event")) 
    createUniqueFile(bName, lName);
    OutAll;
    transToExcel(lName);
    FormatExcel(lName);
end; 
End;
