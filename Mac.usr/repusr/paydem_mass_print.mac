/*
 *   Массовая печать неоплаченных платежных требований 
 *   zip_z. I-072858  2010-21-12
 *   
 *   -----------------------------------------------------------------------------------------------
 *   Необходимо реализовать возможность печати неоплаченных  платежных требований по комиссиям банка, 
 *   помещенным в картотеку 1( арест) или картотеку 2 в виде отдельного пункта меню "Печать платежных 
 *   требований по комиссиям Банка".
 *   -----------------------------------------------------------------------------------------------
 *    Параметры модуля:
 *             1. Печатать по дате( предусмотреть вывод приложений в архивном дне) 
                  постановки требования  на картотеку 
 *             2. Печатать требований по операционисту, указанному в карточке лицевого счета
 *             3. Печатать по клиенту.
 *   -----------------------------------------------------------------------------------------------
 *   Требования к  выводимым документам документам:
 *             Шифр/вид документа д.б. - 02 или 17/6,+
 *             по дебету счет клиента  - 405-408
 *             по кредиту счета        - баланс. счет 2-го порядка 47423,
 *             очередность  платежа    - 6
 *   Форматы док-ов , выводимых на печать должны соответствовать 2-П И 2360-У
 */

import oralib, likepy, globals;
import BankInter;
import PaymInter;
import PTInter;
import Календарь;
// import prpmbuff;
import prpmALL; 


const OPRBLOCK_IW2         = "10000134",
      OPRBLOCK_IWP         = "10000165",
      PAYDOC_STD_OPERATION = "24001";
              
class TComissReport
    var p_oper;
    var p_client;
    var p_dateBegin;
    var p_dateEnd;
    
    var m_sql;
    var m_sqlparams = TArray();
    
    var report_has_records = false;

    private macro ExitReport ( msg )
        msgBox (msg);
        Exit (1);
    end;


    macro GetReportData ( )
        m_sqlparams [m_sqlparams.size] = SQLParam ("begdate", p_dateBegin);
        m_sqlparams [m_sqlparams.size] = SQLParam ("enddate", p_dateEnd);
        
        // m_sqlparams [m_sqlparams.size] = SQLParam ("begdate", p_dateBegin);
        // m_sqlparams [m_sqlparams.size] = SQLParam ("enddate", p_dateEnd);
        
        m_sql = "select   /*+leading (paym) index (paym dpmpaym_dbt_idxc)*/ "
              + "\n" +    "                    paym.t_paymentid, paym.t_purpose, paym.t_subpurpose, paym.t_dockind, "
              + "\n" +    "                    paym.t_documentid, paym.t_payeraccount, ac.t_oper, pt.t_partyid, "
              + "\n" +    "                    rm.t_shifroper, dem.t_orderid, dem.t_reqsum, dem.t_acceptdate, "
              + "\n" +    "                    dem.t_acceptperiod, dem.t_acceptterm, dem.t_accept, dem.t_paycondition, "
              + "\n" +    "                    dem.t_contrnversion, dem.t_reserve "
              + "\n" +    "    from dpmpaym_dbt paym,"
              + "\n" +    "         doprstep_dbt os,"
              + "\n" +    "         doproper_dbt opr,"
              + "\n" +    "         dpmrmprop_dbt rm,"
              + "\n" +    "         daccount_dbt ac,"
              + "\n" +    "         dparty_dbt pt,"
              + "\n" +    "         dpspaydem_dbt dem"
              + "\n" +    "   where ac.t_account = paym.t_payeraccount"
              + "\n" +    "     and paym.t_paymentid(+) = dem.t_orderid"
              + "\n" +    "     and ac.t_chapter = 1"
              + "\n" +    "     and ac.t_code_currency = 0"
              + "\n" +    "     and ac.t_client = pt.t_partyid"
              + "\n" +    "     and opr.t_kind_operation = " + PAYDOC_STD_OPERATION
              + "\n" +    "     and opr.t_id_operation = os.t_id_operation"
              + "\n" +    "     and opr.t_dockind = paym.t_dockind"
              + "\n" +    "     and paym.t_dockind = 201"
              + "\n" +    "     and opr.t_documentid = lpad (paym.t_documentid, 34, '0')"
              + "\n" +    "     and paym.t_feetype != 0"
              + "\n" +    "     and os.t_blockid in (" + OPRBLOCK_IW2 + ", " + OPRBLOCK_IWP + ")"
              + "\n" +    "     and os.t_number_step = 10"
              // + "\n" +    "     and os.t_fact_date between :begdate and :enddate"
              // + "\n" +    "     and paym.t_valuedate between :begdate and :enddate" 
              + "\n" +    "     and os.t_fact_date between :begDate and paym.t_valuedate"
              + "\n" +    "     and paym.t_valuedate between os.t_fact_date and :enddate" // напишете лучше - скажите мне как
              + "\n" +    "     and paym.t_paymentid = rm.t_paymentid"
              + "\n" +    "     and rm.t_shifroper in ('17', '02')"
              + "\n" +    "     and rm.t_priority = 6"
              + "\n" +    "     and substr (paym.t_payeraccount, 1, 3) in ('405', '406', '407', '408')"
              + "\n" +    "     and substr (paym.t_receiveraccount, 1, 5) = '47423'";
        if (p_oper != 0)
            m_sql = m_sql +  "\n" +    "     and ac.t_oper = :oper";
            m_sqlparams [m_sqlparams.size] = SQLParam ("oper", p_oper);
        end;
        
        if (p_client != 0)
            m_sql = m_sql + "\n" +     "     and pt.t_partyid = :client";
            m_sqlparams [m_sqlparams.size] = SQLParam ("client", p_client);
        end;
        
        m_sql = m_sql + "\n" +     " order by paym.t_paymentid";

        var sql = ExecSQLSelect (m_sql, m_sqlparams);
        
        while (sql.moveNext)
            report_has_records = true; 
            if (FindPayment (sql.value ("t_paymentid"), 
                             sql.value ("t_purpose"), 
                             sql.value ("t_subpurpose"), 
                             sql.value ("t_dockind"), 
                             sql.value ("t_documentid"), 
                         true, pr_pmpaym, pr_debet, pr_credit, pr_pmrmprop, pr_pspayord) == 0)

                if (sql.value ("t_shifroper") == "02") 
                    pr_pspayord.rec.DocKind        = PSPOKIND_DEMAND;
                    
                    /* FindPayment клинически не умеет заполнять ну совсем уж все буферы платежа, 
                     * поэтому приходится делать это вручную. 
                     */

                    pr_pmdemand.rec.ACCEPTDATE     =  sql.value ("t_acceptdate");
                    pr_pmdemand.rec.ACCEPTTERM     =  sql.value ("t_acceptterm");
                    pr_pmdemand.rec.ACCEPT         =  sql.value ("t_accept");
                    
                    pr_pspaydem.rec.PAYCONDITION   =  sql.value ("t_paycondition");
                    pr_pspaydem.rec.ACCEPTDATE     =  sql.value ("t_acceptdate");
                    pr_pspaydem.rec.ACCEPTTERM     =  sql.value ("t_acceptterm");
                    pr_pspaydem.rec.ACCEPT         =  sql.value ("t_accept");

                    pr_pspaydem.rec.OrderID        = sql.value ("t_documentid"); // 2011-06-30 zip_z.
                                   
                    // еще один костыль: при печати выдается "без акцепта. Без акцепта": лечим грубо и жестко
                    debugbreak ();
                    if (index (pr_pspaydem.rec.PAYCONDITION, "без акцепта."))
                        pr_pspaydem.rec.PAYCONDITION = trim (StrSubst (pr_pspaydem.rec.PAYCONDITION, "без акцепта.", ""));
                    end;

                    /* Конец клиники */
                    
                end;
                
                pr_pmrmprop.rec.PaymentKind = " ";
                printDocument (1);
                println (""); // 2011-06-30 zip_z.: просили вернуть как было.

            end;
        end;
    onerror ()
        this.start_backtrace ();
    end;

    macro CatchEvent (dlg, cmd, id, key) 
        /*                        massPrint.lbr :: massPRN | Описание полей панели
         *   ╔═══ Неоплаченные ПТ по комиссиям Банка ════╗░
         *   ║  ┌────────────────Дата:────────────────┐  ║░
         *   ║  │ с: dateBegin         по: dateEnd    │  ║░
         *   ║  └─────────────────────────────────────┘  ║░
         *   ║  Операционист:                            ║░
         *   ║  oper_id                       oper_name  ║░
         *   ║  Клиент:                                  ║░
         *   ║  party_id                     party_name  ║░
         *   ║                                           ║░
         *   ╚═══════════════════════════════════════════╝░
         * --------------------------------------------------------------------------------------------*/

        file rec_party  ("party.dbt") key 0;
        file rec_person ("person.dbt") key 0;
    
        const VK_ESC = 27, VK_F2 = 316, VK_F3 = 317, VK_F9 = 323;

        if   ( cmd == DLG_INIT ) // инициализация полей панели
            dlg.rec.dateBegin  = 
            dlg.rec.dateEnd    = {curDate};
        
            dlg.rec.oper_id    = 
            dlg.rec.party_id   = 0;
        
            dlg.rec.oper_name  = "По всем операционистам";
            dlg.rec.party_name = "По всем клиентам";
        
            UpdateFields (dlg);
            
            message ("F3 - выбор, F9 - запуск, ESC - выход");

        elif ( cmd == DLG_REMFOCUS ) // проверка корректности заполнения
        
            if (    (trim(fldname(dlg, id)) == "dateBegin") 
                 or (trim(fldname(dlg, id)) == "dateEnd"  ))
                if (dlg.rec.dateBegin > dlg.rec.dateEnd)
                    msgbox ( "Указаны неверные параметры:"
                             "|Дата окончания периода не может быть больше даты начала" );
                    return CM_CANCEL;
                end;
            end;
        
        
            if (trim(fldname(dlg, id)) == "oper_id")
                if (dlg.rec.oper_id == 0)
                    dlg.rec.oper_name  = "По всем операционистам";
                    UpdateFields (dlg);
                else
                    rec_person.oper = dlg.rec.oper_id;
                    if (getEQ (rec_person))
                        dlg.rec.oper_name = rec_person.name;
                        UpdateFields (dlg);
                    else
                        msgbox ( "Указаны неверные параметры:"
                                 "|Операционист с номером " + string (dlg.rec.oper_id) + " не найден."
                                 "|Повторите ввод" );
                        return CM_CANCEL;
                    end;
                end;
            end;
        
            if (trim(fldname(dlg, id)) == "party_id")
                if (dlg.rec.party_id == 0)
                    dlg.rec.party_name = "По всем клиентам";
                    UpdateFields (dlg);
                else
                    rec_party.partyID = dlg.rec.party_id;
                    if (getEQ (rec_party))
                        dlg.rec.party_name = rec_party.name;
                        UpdateFields (dlg);
                    else
                        msgbox ( "Указаны неверные параметры:"
                                 "|Клиент с идентификатором dparty_dbt.t_partyID = " + string (dlg.rec.party_id) + " не найден."
                                 "|Выберите клиента из списка по клавише F3" );
                        return CM_CANCEL;
                    end;
                end;
            end;

    
        elif ( cmd == DLG_KEY ) // обработка нажатий клавиш
            if (key == VK_F3)
                if (trim(fldname(dlg, id)) == "dateBegin")
                    dlg.rec.dateBegin = GetDateByCalendar ({curDate});
                end;
            
                if (trim(fldname(dlg, id)) == "dateEnd")
                    dlg.rec.dateEnd = GetDateByCalendar ({curDate});
                end;
            
                if (trim(fldname(dlg, id)) == "oper_id")
                    if (ListOper (rec_person, true))
                        dlg.rec.oper_id   = rec_person.oper;
                        dlg.rec.oper_name = rec_person.name;
                        UpdateFields (dlg);
                    end;
                end;
            
                if (trim(fldname(dlg, id)) == "party_id")
                    if (ListPT (rec_party, PTCK_ALL,  null, PTLIST_ALLCLIENT, 0, PTCK_ALL))
                        dlg.rec.party_name = rec_party.Name;
                        dlg.rec.party_id   = rec_party.partyID;
                        UpdateFields (dlg);
                    end;
                end;
            end;
        
            if ((key == VK_F9) or (key == VK_F2))
                // инициализация свойств класса и запуск массовой печати
                this.p_client    = dlg.rec.party_id;
                this.p_oper      = dlg.rec.oper_id;
                this.p_dateBegin = dlg.rec.dateBegin;
                this.p_dateEnd   = dlg.rec.dateEnd;
                
                GetReportData ();
                
                return CM_SAVE;
            end;
        
            if (key == VK_ESC)
                return CM_CANCEL;
            end;
        else 
            return CM_DEFAULT;
        end;
    
        return CM_DEFAULT;
    end;

    macro init ( )
        const LBR_REGISTRY_PATH = "BANK_INI/ОБЩИЕ ПАРАМЕТРЫ/ДИРЕКТОРИИ/LBRDIR";
        const LBR_NAME_FILE     = "zResLib.lbr";
        const LBR_NAME_PANEL    = "MassPrn";

        var lbr_directory;
        var errCode;


        if ( GetRegistryValue ( LBR_REGISTRY_PATH, V_STRING, lbr_directory, errCode ) and not errCode )
            var lbr_fullpath = FindPath ( LBR_NAME_FILE, lbr_directory );
            var dlg          = TRecHandler ( LBR_NAME_PANEL, lbr_fullpath, TRUE );
        
            RunDialog (dlg, "PanelEventHandler");

        else
            ExitReport ("Невозможно получить значение настройки реестра " + LBR_REGISTRY_PATH);
        end;
    end;
    
    macro start_backtrace ( )
        println ("--------------------------------------------------------------------------------------------");
        println ("TComissReport :: start_backtrace ()");
        println ("--------------------------------------------------------------------------------------------");
        printprops (this);
        println ("-- SQL Query text ");
        println (m_sql);
        println ("============================================================================================");
    end;
end;


/* ------------------------- Entry point -----------------------*/
var rep = TComissReport ();

macro PanelEventHandler (dlg, cmd, id, key) 
    return rep.CatchEvent (dlg, cmd, id, key);
end;

rep.init ();