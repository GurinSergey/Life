/************************************************************************************************************************
  Название макроса: cur_tranz_rep.mac
  Описание        : "Отчёт по текущим и транзитным счетам" - содержит информацию о счетах с типом "X" и "Y" 
                    и б\с 405-408 
  Номер заявки    : C-30693 от 24.06.2014
  Автор           : DPN
  Изменения       :
************************************************************************************************************************/


import rcw, rsexts, RSD;
import globals, oralib;
import "fg_Life_parm.mac";
import BankInter;
import  likePy;
import Календарь;
import RsbFormsInter;
import "FNS_lib.mac";

const TEXTDIR_REESTR = "BANK_INI\\ОБЩИЕ ПАРАМЕТРЫ\\ДИРЕКТОРИИ\\TEXTDIR";

var name = "accounts";
var bName = "txtRep";
var lname = "", ob, ex, obSheet, as, sel_range, cnt = 0, i = 1, argument;

macro SetTypeColumns(aw:tarray);
    var w1=tarray(true);
    var w2=tarray(true);
    var w3=tarray(true);  
    var w4=tarray(true);
    var w5=tarray(true);

    w1(0)=1; w1(1)=2; 
    w2(0)=2; w2(1)=2; 
    w3(0)=3; w3(1)=2; 
    w4(0)=4; w4(1)=2;   
    w5(0)=5; w5(1)=1; 

    aw(0)=w1;
    aw(1)=w2;
    aw(2)=w3;
    aw(3)=w4;
    aw(4)=w5;
end;

macro transToExcel(tempFileName)
    private var m_errCode :integer = NULL;
    var aw = tarray(true);
    var obBook, forExcel;
   
    SetTypeColumns(aw); 
    ob = CreateObject ("rsax","TRsAxServer","RsAxServer",false);
    ex = ob.CreateComObject ("Excel.Application",true);
    ex.visible = false;
    forExcel =name+{oper}+"_"+date+"_"+time;  
    
    forExcel = StrSubst ( forExcel, ".", "_" );
    forExcel = StrSubst ( forExcel, ":", "_" );
    forExcel = StrSubst ( forExcel, " ", "_" );
    forExcel = "$" + ex.defaultFilePath + "\\" + forExcel;
    if (not CopyFile(tempFileName, forExcel))
        println ("Error Copy file");
    end;
    forExcel = substr(forExcel, 2);
    obBook = ex.Workbooks.opentext(forExcel, 866, 1, 1,2,true,false,false,false,false,true,"┼",aw,1,"."," ",true,false);
end;

class infoObject()
    var bDate = {curdate};
    var eDate = {curdate};
end;

macro chekReestrRead(m_name:string, m_status:integer, m_err:integer)
    if((m_status == V_UNDEF) or (m_err != 0))
       msgbox("Ошибка получения значения настройки реестра " + m_name + " \n Процедура GetRegistryValue вернула код ошибки "+m_err);
       exit(0);
    end;
end;
macro regOption(m_reestrName:string):string
    private var m_errCode :integer = NULL;
    private var m_statusGetRegistry :integer = NULL;
    private var m_zna4enie          :string  = NULL;
    if (m_reestrName == "")
        msgbox("Не задана строка реестра!");
        exit(0)
    end;
    m_statusGetRegistry = GetRegistryValue(m_reestrName, V_STRING, m_zna4enie, m_errCode);
    chekReestrRead(m_reestrName, m_statusGetRegistry, m_errCode);
    return(m_zna4enie);
end;

macro title(object)
    as = ex.worksheets(1);
    
    as.range("B2") = ("Таблица 1. Данные по общему количеству текущих и транзитных валютных счетов клиентов Банка (юридических резидентов и нерезидентов, физических лиц - ИП) в период с " + object.bDate + " по "+ object.eDate );

    sel_range = as.range("B2:G3");
    sel_range.WrapText = true;
    sel_range.MergeCells = true;
    
    as.range("B6:G6").Font.Bold= true;
   
    as.range("B4")="№ п/п";
    sel_range = as.range("B4:B5");
    sel_range.MergeCells = true;
    
    as.range("C4") = "Показатели";
    sel_range = as.range("C4:C5");
    sel_range.MergeCells = true;
    
    as.range("B4:G5").WrapText = true;
    as.range("D4") = "По состоянию на " + object.bDate;
    sel_range = as.range("D4:D5");
    sel_range.MergeCells = true;
    
    as.range("E4") =  "Открыто в период с " + object.bDate + " по " + object.eDate;
    sel_range = as.range("E4:E5");
    sel_range.MergeCells = true;
    
    as.range("F4") = "Закрыто в период с " + object.bDate + " по " + object.eDate;
    sel_range = as.range("F4:F5");
    sel_range.MergeCells = true;
    
    as.range("G4") = "По состоянию на " + object.eDate;
    sel_range = as.range("G4:G5");
    sel_range.MergeCells = true;
end;

macro createUniqueFile(BeginName, lastName)
    private var ff:string = BeginName +{oper}+"_"+date+"_"+time;
    private var file_ext:string = ".txt";
    private var tempFileName = regOption(TEXTDIR_REESTR);
    tempFileName = tempFileName + "\\" + ff;
    var tempFileNameBezPuti = ff;
    tempFileName = StrSubst ( tempFileName, ".", "_" );
    tempFileName = StrSubst ( tempFileName, ":", "_" );
    tempFileName = StrSubst ( tempFileName, " ", "_" );
    tempFileName = tempFileName + file_ext;
    tempFileNameBezPuti = StrSubst ( tempFileNameBezPuti, ".", "_" );
    tempFileNameBezPuti = StrSubst ( tempFileNameBezPuti, ":", "_" );
    tempFileNameBezPuti = StrSubst ( tempFileNameBezPuti, " ", "_" );
    tempFileNameBezPuti = tempFileNameBezPuti + file_ext;
    if (substr(tempFileName,1,2) == "__")
        tempFileName=".."+substr(tempFileName,3)
    end;
    lastName = tempFileNameBezPuti;
    setParm(1, lastName);
    SetOutPut(tempFileName, false);
end;

macro maker(object: infoObject)
    var select, query, param;
    
    argument = " select sum(t3.count_before),sum(t3.open_ac), sum(t3.close_ac) , sum(NVL (t4.c, 0)) ";
     
    InitProgress(-1,"","Идёт обработка...");
    select = " from (select t1.*, nvl(t2.c, 0) close_ac " +
             "       from (select nvl(before_date.code, open_ac.code) code, nvl(before_date.c, 0) count_before, nvl(open_ac.c, 0) open_ac " +
             "             from (select FI.T_NAME || '(' || FI.T_FI_CODE || ')' code, count(*) c " +
             "                   from daccount_dbt dac, dfininstr_dbt fi " +
             "                   WHERE DAC.T_OPEN_DATE < to_date('"+ object.bDate +"', 'dd.mm.yyyy') " +
        //     "                                     and substr(DAC.T_ACCOUNT, 14, 1) = '1' " +  //Признак тразитного счета, но не всегда верно(оставлю на всякий случай)
             "                                     and DAC.T_TYPE_ACCOUNT like '%Y%' " +                                    
             "                   and substr(DAC.T_BALANCE, 1, 3) between '405' and '408' " +                                    
             "                   and (DAC.T_CLOSE_DATE >= TO_DATE ('"+ object.bDate +"', 'dd.mm.yyyy') " +                                          
             "                        or DAC.T_CLOSE_DATE = TO_DATE ('01.01.0001', 'dd.mm.yyyy')) " +
             "                 and FI.T_FIID = DAC.T_CODE_CURRENCY " +                                      
             "                   group by FI.T_FI_CODE, FI.T_NAME ) before_date " +                               
             "            full join    " +                             
             "                  (select FI.T_NAME || '(' || FI.T_FI_CODE || ')' code, count(*) c " +                                 
             "                   from daccount_dbt dac, dfininstr_dbt fi " +                               
             "                   WHERE DAC.T_OPEN_DATE between to_date('"+ object.bDate +"', 'dd.mm.yyyy') " +             
             "                                       and to_date('" + object.eDate + "', 'dd.mm.yyyy')   " +                               
          //   "                                     and substr(DAC.T_ACCOUNT, 14, 1) = '1' " +  //Признак тразитного счета, но не всегда верно(оставлю на всякий случай)
             "                                     and DAC.T_TYPE_ACCOUNT like '%Y%' " +                                
             "                   and substr(DAC.T_BALANCE, 1, 3) between '405' and '408' " +                              
             "                   and FI.T_FIID = DAC.T_CODE_CURRENCY   " +                             
             "                   group by FI.T_FI_CODE, FI.T_NAME) open_ac " +                               
             "            on before_date.code = open_ac.code) t1 " +                           
             "            full join   " +                             
             "                  (select FI.T_NAME || '(' || FI.T_FI_CODE || ')' code, count(*) c   " +                              
             "                   from daccount_dbt dac, dfininstr_dbt fi  " +                              
             "                   WHERE DAC.T_CLOSE_DATE between to_date('"+ object.bDate +"', 'dd.mm.yyyy') " +
             "                                               and to_date('" + object.eDate + "', 'dd.mm.yyyy') " +                              
       //      "                                     and substr(DAC.T_ACCOUNT, 14, 1) = '1' " +  //Признак тразитного счета, но не всегда верно(оставлю на всякий случай)
             "                                     and DAC.T_TYPE_ACCOUNT like '%Y%' " +                                  
             "                   and substr(DAC.T_BALANCE, 1, 3) between '405' and '408' " +                                 
             "                   and FI.T_FIID = DAC.T_CODE_CURRENCY  " +                                
             "                   group by FI.T_FI_CODE, FI.T_NAME) t2  " +                              
             "            on t1.code = t2.code ) t3    " +
             "            full join                " +
             "                  (select FI.T_NAME || '(' || FI.T_FI_CODE || ')' code , count(*) c   " +
             "                   from daccount_dbt dac, dfininstr_dbt fi " +
             "                   WHERE DAC.T_OPEN_DATE <= to_date('" + object.eDate + "', 'dd.mm.yyyy') " +                              
       //      "                                     and substr(DAC.T_ACCOUNT, 14, 1) = '1' " +  //Признак тразитного счета, но не всегда верно(оставлю на всякий случай)
             "                                     and DAC.T_TYPE_ACCOUNT like '%Y%' " +
             "                   and substr(DAC.T_BALANCE, 1, 3) between '405' and '408' " +                                 
             "                   and (DAC.T_CLOSE_DATE > TO_DATE ('" + object.eDate + "', 'dd.mm.yyyy') or DAC.T_CLOSE_DATE = TO_DATE ('01.01.0001', 'dd.mm.yyyy')) " +
             "                  and FI.T_FIID = DAC.T_CODE_CURRENCY " +
             "                   group by FI.T_FI_CODE, FI.T_NAME) t4  " +
             "            on t3.code = t4.code     " +
             "            order by t3.code";
    
    println();
    println();
    println();
    println();
    println();
    
    argument = argument + select;
    query = TRsbdataset(argument);
     while (query.movenext)
         println("┼"+"1."+"┼"+"Количество транзитных валютных счетов, всего:"+"┼"+int(query.value(0))+"┼"+int(query.value(1))+"┼"+int(query.value(2))+"┼"+int(query.value(3)));
    end;
    argument = " select t3.*, nvl(t4.c, 0) " ;
    select = argument + select; 
    query = TRsbdataset(select);
    
    while (query.movenext)
    var code, cntBefore, cntOpen, cntClose, cntNow;
        code = string(query.value(0));
        cntBefore = int(query.value(1));
        cntOpen = int(query.value(2));
        cntClose = int(query.value(3));
        cntNow = int(query.value(4));
        
        println("┼"+"1."+i+"┼"+code+"┼"+cntBefore+"┼"+cntOpen+"┼"+cntClose+"┼"+cntNow);
        i = i + 1;
    end; 
    argument = " select sum(t3.count_before),sum(t3.open_ac), sum(t3.close_ac) , sum(NVL (t4.c, 0)) ";
    
    cnt = i + 1;
    i = 1;
    
    select = " from (select t1.*, nvl(t2.c, 0) close_ac " +
             "       from (select nvl(before_date.code, open_ac.code) code, nvl(before_date.c, 0) count_before, nvl(open_ac.c, 0) open_ac " +
             "             from (select FI.T_NAME || '(' || FI.T_FI_CODE || ')' code, count(*) c " +
             "                   from daccount_dbt dac, dfininstr_dbt fi " +
             "                   WHERE DAC.T_OPEN_DATE < to_date('"+ object.bDate +"', 'dd.mm.yyyy') " +
             "                   and DAC.T_TYPE_ACCOUNT like '%X%' " +                                     
             "                   and substr(DAC.T_BALANCE, 1, 3) between '405' and '408' " +                                    
             "                   and (DAC.T_CLOSE_DATE >= TO_DATE ('"+ object.bDate +"', 'dd.mm.yyyy') " +                                          
             "                        or DAC.T_CLOSE_DATE = TO_DATE ('01.01.0001', 'dd.mm.yyyy')) " +
             "                   and FI.T_FIID = DAC.T_CODE_CURRENCY " +                                      
             "                   group by FI.T_FI_CODE, FI.T_NAME ) before_date " +                               
             "            full join    " +                             
             "                  (select FI.T_NAME || '(' || FI.T_FI_CODE || ')' code, count(*) c " +                                 
             "                   from daccount_dbt dac, dfininstr_dbt fi  " +                               
             "                   WHERE DAC.T_OPEN_DATE between to_date('"+ object.bDate +"', 'dd.mm.yyyy') " +             
             "                                       and to_date('" + object.eDate + "', 'dd.mm.yyyy')   " +                               
             "                   and DAC.T_TYPE_ACCOUNT like '%X%'  " +                                
             "                   and substr(DAC.T_BALANCE, 1, 3) between '405' and '408' " +                                               
             "                   and FI.T_FIID = DAC.T_CODE_CURRENCY   " +                             
             "                   group by FI.T_FI_CODE, FI.T_NAME) open_ac " +                               
             "            on before_date.code = open_ac.code) t1 " +                           
             "            full join   " +                             
             "                  (select FI.T_NAME || '(' || FI.T_FI_CODE || ')' code, count(*) c   " +                              
             "                   from daccount_dbt dac, dfininstr_dbt fi " +                              
             "                   WHERE DAC.T_CLOSE_DATE between to_date('"+ object.bDate +"', 'dd.mm.yyyy') " +
             "                                               and to_date('" + object.eDate + "', 'dd.mm.yyyy') " +                              
             "                   and DAC.T_TYPE_ACCOUNT like '%X%' " +                                  
             "                   and substr(DAC.T_BALANCE, 1, 3) between '405' and '408' " +                                 
             "                   and FI.T_FIID = DAC.T_CODE_CURRENCY  " +                                
             "                   group by FI.T_FI_CODE, FI.T_NAME) t2  " +                              
             "            on t1.code = t2.code ) t3    " +
             "            full join                " +
             "                  (select FI.T_NAME || '(' || FI.T_FI_CODE || ')' code , count(*) c   " +
             "                   from daccount_dbt dac, dfininstr_dbt fi  " +
             "                   WHERE DAC.T_OPEN_DATE <= to_date('" + object.eDate + "', 'dd.mm.yyyy') " +                              
             "                   and DAC.T_TYPE_ACCOUNT like '%X%' and substr(DAC.T_BALANCE, 1, 3) between '405' and '408' " +                                 
             "                   and (DAC.T_CLOSE_DATE > TO_DATE ('" + object.eDate + "', 'dd.mm.yyyy') or DAC.T_CLOSE_DATE = TO_DATE ('01.01.0001', 'dd.mm.yyyy')) " +
             "                   and FI.T_FIID = DAC.T_CODE_CURRENCY " +
             "                   group by FI.T_FI_CODE, FI.T_NAME) t4  " +
             "            on t3.code = t4.code     " +
             "            order by t3.code";
    
    
    argument = argument + select;
    query = TRsbdataset(argument);
    while (query.movenext)
         println("┼"+"2."+"┼"+"Количество текущих валютных счетов, всего:"+"┼"+int(query.value(0))+"┼"+int(query.value(1))+"┼"+int(query.value(2))+"┼"+int(query.value(3)));
    end;
    
    argument = " select t3.*, nvl(t4.c, 0) ";
    select = argument + select; 
    query = TRsbdataset(select);

    while (query.movenext)
        code = string(query.value(0));
        cntBefore = int(query.value(1));
        cntOpen = int(query.value(2));
        cntClose = int(query.value(3));
        cntNow = int(query.value(4));
        println("┼"+"2."+i+"┼"+code+"┼"+cntBefore+"┼"+cntOpen+"┼"+cntClose+"┼"+cntNow);
        i = i + 1;
    end;
   cnt = cnt + i + 3;
end;

macro FormatExcel(fileName:String);

    as.Cells.Font.Size = 10;
    as.PageSetup.Orientation = 2;
    as.Columns("B:B").ColumnWidth = 5;
    as.Columns("C:C").ColumnWidth = 39;
    as.Columns("D:D").ColumnWidth = 12;
    as.Columns("E:E").ColumnWidth = 22;
    as.Columns("F:F").ColumnWidth = 22;
    as.Columns("G:G").ColumnWidth = 12;
    debugbreak;
    as.Columns("D:D").HorizontalAlignment = 4;
    as.range("B4:G5").HorizontalAlignment = 3;
    as.Columns("B:B").HorizontalAlignment = 3;
    
    as.range("B4:G5").Font.Bold = true;
    
    sel_range = as.range("B"+(cnt-i+2)+":G"+(cnt-i+2));
    sel_range.Font.Bold = true;

    sel_range = as.Range("B4:G"+(cnt+1)); 
    sel_range.Borders.Weight = 2;
    
    ex.visible = true;
end;

macro startReport(object:infoObject)
    createUniqueFile(bName, lName);
    
    maker(object);
    SetOutPut(null,false);
    
    transToExcel(lName);
    title(object);
    FormatExcel(lName);
    RemProgress();
    close(1);
end;

class(TRsbPanel) MainPanel()
    InitTRsbPanel();
    setCaption("Отчет по текущим и транзитным счетам");
    setStatus("Esc - Выход, F2 - Выполнить, F3 - Вызов календаря");
   
    private const FT_DATE = 9;
    private const FT_STRING = 7;
    var dateCarry = {curdate};
    var startVal = "";
    var info: infoObject;
    
    var labelDate: TRsbLabel = TRsbLabel(3, 2, "Дата");   
    var labelDateBegin: TRsbLabel = TRsbLabel(7, 2, "С:");
    var labelDateEnd: TRsbLabel = TRsbLabel(18, 2, "По:");

    var fieldDateBegin: TRsbEditField = TRsbEditField(FT_DATE);
    var fieldDateEnd: TRsbEditField = TRsbEditField(FT_DATE);

    setSize(35,4);
    setPosition(43,18);

    fieldDateBegin.bindValue(this, "dateCarry", 8);
    fieldDateBegin.setPosition(9,2);   
    fieldDateBegin.setSize(8,1);
    fieldDateBegin.onKeyPressed(R2M(this, "callCalendarBegin")); 

    fieldDateEnd.bindValue(this, "dateCarry", 8);
    fieldDateEnd.setPosition(21,2);   
    fieldDateEnd.setSize(8,1);
    fieldDateEnd.onKeyPressed(R2M(this, "callCalendarEnd")); 

    addLabel(labelDate);
    addLabel(labelDateBegin);
    addLabel(labelDateEnd);

    addControl(fieldDateBegin);
    addControl(fieldDateEnd);
   
    macro callCalendarBegin(key:TRsbKeyPressedEvent)
        if(key.keyCode == KEY_F3)
            var d:Date = Date(GetDateByCalendar({curdate}));
            if (d > fieldDateEnd.value)
                fieldDateBegin.value = fieldDateEnd.value;
            else
                fieldDateBegin.value = d; 
            end;
            info.bDate = fieldDateBegin.value;            
        end;        
        if(key.KeyCode == KEY_F2)
            info.bDate = fieldDateBegin.value; 
            info.eDate = fieldDateEnd.value;    
            startReport(info);
            close(1);
            exit(0);
        end;
    end;
   
    macro callCalendarEnd(key:TRsbKeyPressedEvent)
        if(key.keyCode == KEY_F3)
            var d:Date = Date(GetDateByCalendar({curdate}));
            if (d < fieldDateBegin.value)
                fieldDateEnd.value = fieldDateBegin.value;
            else
                fieldDateEnd.value = d; 
            end;           
            info.eDate = fieldDateEnd.value; 
        end;        
        if(key.KeyCode == KEY_F2)
            info.bDate = fieldDateBegin.value; 
            info.eDate = fieldDateEnd.value;   
            startReport(info);
            close();
            exit(0);
        end;
    end;
end;

   var panel:TRsbPanel = MainPanel;
    panel.run;    

    exit(0);
