// 24.05.2012 vihrov c-11204
import rsbdataset, rsexts, globals, "KeyCodes.mac";
import cb_sql; //исключительно для ternary

const lbr_name = "for_zb_2012.lbr";

const zhurnal_tpl = "evs_zhurnal_tpl.dbf"; // для выгрузки в дбф вначале руками нужно создать пустой файл с нужной структурой и поместить его в шаблоны. затем он считается, будет скопирован в новый файл и новый файл будем заполнять. как без шаблонов сделать - не знаю.
const zhurnal_wrk_name = "zhurnal_";
const zhurnal_wrk_ext = ".dbf";
var zhurnal_wrk = "..\\txtfile\\"+zhurnal_wrk_name;

const prov1_tpl = "evs_prov1_tpl.dbf"; // никто не знает как без шаблонов.
const prov1_wrk_name = "evs_prov1_";
const prov1_wrk_ext = ".dbf";
var prov1_wrk = "..\\txtfile\\"+prov1_wrk_name;

const prov2_tpl = "evs_prov2_tpl.dbf";
const prov2_wrk_name = "evs_prov2_";
const prov2_wrk_ext = ".dbf";
var prov2_wrk = "..\\txtfile\\"+prov2_wrk_name;

const rest_tpl = "evs_rest_tpl.dbf";
const rest_wrk_name = "evs_rest_";
const rest_wrk_ext = ".dbf";
var rest_wrk = "..\\txtfile\\"+rest_wrk_name;


var ot4_data_begin, ot4_data_end;
var dop_name:string = "";

var zhur_need:bool = false;
var prov1_need:bool = false;
var prov2_need:bool = false;
var ost_need:bool = false;
var copy_need:bool = false;

var s3:string = "";

private var dd:date, tt:time, ii:integer, ss:string;  // это переменные для использования FileInfo

macro day_sql_zhurnal
return "/* Formatted on 23.05.2012 11:33:50 (QP5 v5.115.810.9015) disa */ " + 
      "SELECT	acc2.t_account a1, SUBSTR (acc2.t_nameaccount, 1, 254) n1, SUBSTR (acc2.t_nameaccount, 255, 254) n2, acc2.t_open_date op, " +
      "			acc2.t_close_date cl " +
      "  FROM	daccount_dbt acc2 " +
      " WHERE	EXISTS " +
      "				(SELECT	 1 " +
      "					FROM	 (SELECT   acc.t_account a1, rsi_rsb_account.resta (acc.t_account, xx, acc.t_chapter, NULL) rest, xx " +
      "								 FROM   (	 SELECT	 TO_DATE ('"+ot4_data_begin+"', 'dd.mm.rrrr') + ROWNUM - 1 xx " +
      "													FROM	 DUAL " +
      "											CONNECT BY	 LEVEL <= " +
      "																 TO_DATE ('"+ot4_data_end+"', 'dd.mm.rrrr') - TO_DATE ('"+ot4_data_begin+"', 'dd.mm.rrrr') + 1) " +
      "										  chisla, " +
      "										  daccount_dbt acc) t " +
      "				  WHERE	 acc2.t_account = t.a1 AND rest <> 0) " +
      "	  AND (rsi_rsb_account.debeta   (acc2.t_account, acc2.t_chapter, TO_DATE ('"+ot4_data_begin+"', 'dd.mm.rrrr'),  TO_DATE ('"+ot4_data_end+"', 'dd.mm.rrrr')) <> 0 " +
      "		 OR rsi_rsb_account.kredita (acc2.t_account, acc2.t_chapter, TO_DATE ('"+ot4_data_begin+"', 'dd.mm.rrrr'),  TO_DATE ('"+ot4_data_end+"', 'dd.mm.rrrr')) <> 0) " ;

end;

macro day_sql_prov1
return  "/* Formatted on 17.05.2012 14:26:58 (QP5 v5.115.810.9015) disa */ " + 
      "SELECT	prov.t_date_carry dd, " +
      "			nvl(pm.t_valuedate,prov.t_date_carry) dd_d, " +
      "			prov.t_numb_document nmb, " +
      "			prov.t_account_payer dt, " +
      "			prov.t_account_receiver kt, " +
      "			prov.t_sum ss, " +
      "			NVL ( (SELECT	 t_sum " +
      "						FROM	 darhdoc$_dbt provc " +
      "					  WHERE	 prov.t_connappkind = provc.t_iapplicationkind AND prov.t_connappkey = provc.t_applicationkey), " +
      "				  0 " +
      "				 ) " +
      "				sumc, " +
      "			SUBSTR (prov.t_ground, 1, 254) appoint, " +
      "			SUBSTR (prov.t_ground, 255, 254) appoint2, " +
      "			nvl((SELECT	 MIN (TRIM (symb.t_symbol)) " +
      "				FROM	 dsymbcash_dbt symb " +
      "			  WHERE	 symb.t_applicationkey = LPAD (prov.t_iapplicationkind, 5, '0') || prov.t_applicationkey),0) " +
      "				sco, " +
      "			prov.t_applicationkey || pm.t_paymentid ucoddoc " +
      "  FROM	darhdoc_dbt prov LEFT JOIN dpmdocs_dbt docs ON (docs.t_applicationkey = prov.t_applicationkey) LEFT JOIN dpmpaym_dbt pm ON (docs.t_paymentid = pm.t_paymentid AND prov.t_chapter = pm.t_chapter) " +
      " WHERE	prov.t_date_carry BETWEEN TO_DATE ('"+ot4_data_begin+"', 'dd.mm.rrrr') AND TO_DATE ('"+ot4_data_end+"', 'dd.mm.rrrr') " ;
end;

macro day_sql_prov2
return "/* Formatted on 24.05.2012 9:31:16 (QP5 v5.115.810.9015) disa */ " + 
      "SELECT	prov.t_applicationkey || pm.t_paymentid ucoddoc, " +
      "			CASE WHEN pm.t_payeraccount IS NULL THEN prov.t_account_payer ELSE pm.t_payeraccount END account_a, " +
      "			plat.t_bankcode bik_d, " +
      "			CASE " +
      "				WHEN (LENGTH (prov.t_applicationkey || pm.t_paymentid) <> 24 AND INSTR (cod_pl.t_code, '/') <> 0) " +
      "				THEN " +
      "					SUBSTR (cod_pl.t_code, 1, INSTR (cod_pl.t_code, '/') - 1) " +
      "				WHEN (LENGTH (prov.t_applicationkey || pm.t_paymentid) <> 24 AND INSTR (cod_pl.t_code, '/') = 0) " +
      "				THEN " +
      "					SUBSTR (cod_pl.t_code, 1, 12) " +
      "				WHEN (LENGTH (prov.t_applicationkey || pm.t_paymentid) = 24 AND INSTR (cod_pl_prov1.t_code, '/') <> 0) " +
      "				THEN " +
      "					SUBSTR (cod_pl_prov1.t_code, 1, INSTR (cod_pl_prov1.t_code, '/') - 1) " +
      "				WHEN (LENGTH (prov.t_applicationkey || pm.t_paymentid) = 24 AND INSTR (cod_pl_prov1.t_code, '/') = 0) " +
      "				THEN " +
      "					SUBSTR (cod_pl_prov1.t_code, 1, 12) " +
      "				ELSE " +
      "					'' " +
      "			END " +
      "				inn_a, " +
      "			CASE " +
      "				WHEN LENGTH (prov.t_applicationkey || pm.t_paymentid) <> 24 AND cod_pl.t_code IS NULL " +
      "				THEN " +
      "					'' " +
      "				WHEN LENGTH (prov.t_applicationkey || pm.t_paymentid) <> 24 " +
      "				 AND cod_pl.t_code IS NOT NULL " +
      "				 AND INSTR (cod_pl.t_code, '/') <> 0 " +
      "				THEN " +
      "					SUBSTR (cod_pl.t_code, INSTR (cod_pl.t_code, '/') + 1, 9) " +
      "				WHEN LENGTH (prov.t_applicationkey || pm.t_paymentid) = 24 " +
      "				 AND cod_pl_prov1.t_code IS NOT NULL " +
      "				 AND INSTR (cod_pl_prov1.t_code, '/') <> 0 " +
      "				THEN " +
      "					SUBSTR (cod_pl_prov1.t_code, INSTR (cod_pl_prov1.t_code, '/') + 1, 9) " +
      "				ELSE " +
      "					'' " +
      "			END " +
      "				kpp_a, " +
      "			CASE WHEN plat_name.t_name IS NULL THEN SUBSTR (pt_prov_1.t_name, 1, 254) ELSE SUBSTR (plat_name.t_name, 1, 254) END " +
      "				tname_a1, " +
      "			CASE WHEN plat_name.t_name IS NULL THEN SUBSTR (pt_prov_1.t_name, 255, 254) ELSE SUBSTR (plat_name.t_name, 255, 254) END " +
      "				tname_a2, " +
      "			CASE WHEN pm.t_receiveraccount IS NULL THEN prov.t_account_payer ELSE pm.t_receiveraccount END account_b, " +
      "			polu4.t_bankcode bik_k, " +
      "			CASE " +
      "				WHEN (LENGTH (prov.t_applicationkey || pm.t_paymentid) <> 24 AND INSTR (cod_pol.t_code, '/') <> 0) " +
      "				THEN " +
      "					SUBSTR (cod_pol.t_code, 1, INSTR (cod_pol.t_code, '/') - 1) " +
      "				WHEN (LENGTH (prov.t_applicationkey || pm.t_paymentid) <> 24 AND INSTR (cod_pol.t_code, '/') = 0) " +
      "				THEN " +
      "					SUBSTR (cod_pol.t_code, 1, 12) " +
      "				WHEN (LENGTH (prov.t_applicationkey || pm.t_paymentid) = 24 AND INSTR (cod_pol_prov1.t_code, '/') <> 0) " +
      "				THEN " +
      "					SUBSTR (cod_pol_prov1.t_code, 1, INSTR (cod_pol_prov1.t_code, '/') - 1) " +
      "				WHEN (LENGTH (prov.t_applicationkey || pm.t_paymentid) = 24 AND INSTR (cod_pol_prov1.t_code, '/') = 0) " +
      "				THEN " +
      "					SUBSTR (cod_pol_prov1.t_code, 1, 12) " +
      "				ELSE " +
      "					'' " +
      "			END " +
      "				inn_b, " +
      "			CASE " +
      "				WHEN LENGTH (prov.t_applicationkey || pm.t_paymentid) <> 24 AND cod_pol.t_code IS NULL " +
      "				THEN " +
      "					'' " +
      "				WHEN LENGTH (prov.t_applicationkey || pm.t_paymentid) <> 24 " +
      "				 AND cod_pol.t_code IS NOT NULL " +
      "				 AND INSTR (cod_pol.t_code, '/') <> 0 " +
      "				THEN " +
      "					SUBSTR (cod_pol.t_code, INSTR (cod_pol.t_code, '/') + 1, 9) " +
      "				WHEN LENGTH (prov.t_applicationkey || pm.t_paymentid) = 24 " +
      "				 AND cod_pol_prov1.t_code IS NOT NULL " +
      "				 AND INSTR (cod_pol_prov1.t_code, '/') <> 0 " +
      "				THEN " +
      "					SUBSTR (cod_pol_prov1.t_code, INSTR (cod_pol_prov1.t_code, '/') + 1, 9) " +
      "				ELSE " +
      "					'' " +
      "			END " +
      "				kpp_b, " +
      "			CASE WHEN pol_name.t_name IS NULL THEN SUBSTR (pt_prov_2.t_name, 1, 254) ELSE SUBSTR (pol_name.t_name, 1, 254) END " +
      "				tname_b1, " +
      "			CASE WHEN pol_name.t_name IS NULL THEN SUBSTR (pt_prov_2.t_name, 255, 254) ELSE SUBSTR (pol_name.t_name, 255, 254) END " +
      "				tname_b2 " +
      "  FROM	darhdoc_dbt prov LEFT JOIN dpmdocs_dbt docs ON (docs.t_applicationkey = prov.t_applicationkey) LEFT JOIN dpmpaym_dbt pm ON (docs.t_paymentid = pm.t_paymentid AND prov.t_chapter = pm.t_chapter) LEFT JOIN dpmprop_dbt plat ON (pm.t_paymentid = plat.t_paymentid AND plat.t_debetcredit = 0) LEFT JOIN dpmprop_dbt polu4 ON (pm.t_paymentid = polu4.t_paymentid AND polu4.t_debetcredit = 1) LEFT JOIN dobjcode_dbt cod_pl ON (cod_pl.t_objecttype = 3 AND cod_pl.t_codekind = 16 AND pm.t_payer = cod_pl.t_objectid AND cod_pl.t_state = 0) LEFT JOIN dobjcode_dbt cod_pol ON (cod_pol.t_objecttype = 3 AND cod_pol.t_codekind = 16 AND pm.t_receiver = cod_pol.t_objectid AND cod_pol.t_state = 0) LEFT JOIN dparty_dbt plat_name ON (pm.t_payer = plat_name.t_partyid) LEFT JOIN dparty_dbt pol_name ON (pm.t_receiver = pol_name.t_partyid), " +
      "			daccount_dbt acc1 LEFT JOIN dparty_dbt pt_prov_1 ON (acc1.t_client = pt_prov_1.t_partyid) LEFT JOIN dobjcode_dbt cod_pl_prov1 ON (cod_pl_prov1.t_objecttype = 3 AND cod_pl_prov1.t_codekind = 16 AND pt_prov_1.t_partyid = cod_pl_prov1.t_objectid), " +
      "			daccount_dbt acc2 LEFT JOIN dparty_dbt pt_prov_2 ON (acc2.t_client = pt_prov_2.t_partyid) LEFT JOIN dobjcode_dbt cod_pol_prov1 ON (cod_pol_prov1.t_objecttype = 3 AND cod_pol_prov1.t_codekind = 16 AND pt_prov_2.t_partyid = cod_pol_prov1.t_objectid) " +
      " WHERE	prov.t_date_carry BETWEEN TO_DATE ('"+ot4_data_begin+"', 'dd.mm.rrrr') AND TO_DATE ('"+ot4_data_end+"', 'dd.mm.rrrr') " +
      "	  AND acc1.t_account = prov.t_account_payer " +
      "	  AND acc1.t_chapter = prov.t_chapter " +
      "	  AND acc2.t_account = prov.t_account_receiver " +
      "	  AND acc2.t_chapter = prov.t_chapter " ;
end;

macro day_sql_rest
	return "/* Formatted on 24.05.2012 10:55:17 (QP5 v5.115.810.9015) disa */ " + 
      "SELECT	xx \"data\", " +
      "			acc.t_account \"account\", " +
      "			CASE " +
      "				WHEN rsi_rsb_account.resta (acc.t_account, xx - 1, acc.t_chapter, NULL) < 0 THEN 0 " +
      "				ELSE nvl(rsi_rsb_account.resta (acc.t_account, xx - 1, acc.t_chapter, NULL),0) " +
      "			END " +
      "				indt, " +
      "			CASE " +
      "				WHEN NVL ( " +
      "						  (SELECT	rsi_rsb_account.restac (acc_val.t_account, acc_val.t_code_currency, xx - 1, acc_val.t_chapter, NULL) " +
      "							  FROM	daccount$_dbt acc_val " +
      "							 WHERE	acc_val.t_connect_account = acc.t_account AND acc_val.t_chapter = acc.t_chapter), " +
      "						  0 " +
      "					  ) < 0 " +
      "				THEN " +
      "					0 " +
      "				ELSE " +
      "					NVL ( " +
      "						(SELECT	 rsi_rsb_account.restac (acc_val.t_account, acc_val.t_code_currency, xx - 1, acc_val.t_chapter, NULL) " +
      "							FROM	 daccount$_dbt acc_val " +
      "						  WHERE	 acc_val.t_connect_account = acc.t_account AND acc_val.t_chapter = acc.t_chapter), " +
      "						0 " +
      "					) " +
      "			END " +
      "				indtc, " +
      "			CASE " +
      "				WHEN rsi_rsb_account.resta (acc.t_account, xx - 1, acc.t_chapter, NULL) > 0 THEN 0 " +
      "				ELSE nvl(rsi_rsb_account.resta (acc.t_account, xx - 1, acc.t_chapter, NULL),0) " +
      "			END " +
      "				inkt, " +
      "			CASE " +
      "				WHEN NVL ( " +
      "						  (SELECT	rsi_rsb_account.restac (acc_val.t_account, acc_val.t_code_currency, xx - 1, acc_val.t_chapter, NULL) " +
      "							  FROM	daccount$_dbt acc_val " +
      "							 WHERE	acc_val.t_connect_account = acc.t_account AND acc_val.t_chapter = acc.t_chapter), " +
      "						  0 " +
      "					  ) > 0 " +
      "				THEN " +
      "					0 " +
      "				ELSE " +
      "					NVL ( " +
      "						(SELECT	 rsi_rsb_account.restac (acc_val.t_account, acc_val.t_code_currency, xx - 1, acc_val.t_chapter, NULL) " +
      "							FROM	 daccount$_dbt acc_val " +
      "						  WHERE	 acc_val.t_connect_account = acc.t_account AND acc_val.t_chapter = acc.t_chapter), " +
      "						0 " +
      "					) " +
      "			END " +
      "				inktc, " +
      "			NVL ( (SELECT	 t_debet + t_debetspod " +
      "						FROM	 drestdate_dbt dr " +
      "					  WHERE	 acc.t_account = dr.t_account AND dr.t_chapter = acc.t_chapter AND dr.t_date_value = xx), " +
      "				  0 " +
      "				 ) " +
      "				obdt, " +
      "			NVL ( (SELECT	 t_debet + t_debetspod " +
      "						FROM	 drestdat$_dbt dr " +
      "					  WHERE	 acc.t_account = dr.t_account AND dr.t_chapter = acc.t_chapter AND dr.t_date_value = xx), " +
      "				  0 " +
      "				 ) " +
      "				obdtc, " +
      "			NVL ( (SELECT	 t_credit + t_creditspod " +
      "						FROM	 drestdate_dbt dr " +
      "					  WHERE	 acc.t_account = dr.t_account AND dr.t_chapter = acc.t_chapter AND dr.t_date_value = xx), " +
      "				  0 " +
      "				 ) " +
      "				obkt, " +
      "			NVL ( (SELECT	 t_credit + t_creditspod " +
      "						FROM	 drestdat$_dbt dr " +
      "					  WHERE	 acc.t_account = dr.t_account AND dr.t_chapter = acc.t_chapter AND dr.t_date_value = xx), " +
      "				  0 " +
      "				 ) " +
      "				obktc, " +
      "			CASE " +
      "				WHEN rsi_rsb_account.resta (acc.t_account, xx, acc.t_chapter, NULL) < 0 THEN 0 " +
      "				ELSE nvl(rsi_rsb_account.resta (acc.t_account, xx, acc.t_chapter, NULL),0) " +
      "			END " +
      "				outdt, " +
      "			CASE " +
      "				WHEN NVL ( (SELECT	rsi_rsb_account.restac (acc_val.t_account, acc_val.t_code_currency, xx, acc_val.t_chapter, NULL) " +
      "								  FROM	daccount$_dbt acc_val " +
      "								 WHERE	acc_val.t_connect_account = acc.t_account AND acc_val.t_chapter = acc.t_chapter), " +
      "							 0 " +
      "							) < 0 " +
      "				THEN " +
      "					0 " +
      "				ELSE " +
      "					NVL ( (SELECT	 rsi_rsb_account.restac (acc_val.t_account, acc_val.t_code_currency, xx, acc_val.t_chapter, NULL) " +
      "								FROM	 daccount$_dbt acc_val " +
      "							  WHERE	 acc_val.t_connect_account = acc.t_account AND acc_val.t_chapter = acc.t_chapter), " +
      "						  0 " +
      "						 ) " +
      "			END " +
      "				outdtc, " +
      "			CASE " +
      "				WHEN rsi_rsb_account.resta (acc.t_account, xx, acc.t_chapter, NULL) > 0 THEN 0 " +
      "				ELSE nvl(rsi_rsb_account.resta (acc.t_account, xx, acc.t_chapter, NULL),0) " +
      "			END " +
      "				outkt, " +
      "			CASE " +
      "				WHEN NVL ( (SELECT	rsi_rsb_account.restac (acc_val.t_account, acc_val.t_code_currency, xx, acc_val.t_chapter, NULL) " +
      "								  FROM	daccount$_dbt acc_val " +
      "								 WHERE	acc_val.t_connect_account = acc.t_account AND acc_val.t_chapter = acc.t_chapter), " +
      "							 0 " +
      "							) > 0 " +
      "				THEN " +
      "					0 " +
      "				ELSE " +
      "					NVL ( (SELECT	 rsi_rsb_account.restac (acc_val.t_account, acc_val.t_code_currency, xx, acc_val.t_chapter, NULL) " +
      "								FROM	 daccount$_dbt acc_val " +
      "							  WHERE	 acc_val.t_connect_account = acc.t_account AND acc_val.t_chapter = acc.t_chapter), " +
      "						  0 " +
      "						 ) " +
      "			END " +
      "				outktc " +
      "  FROM	daccount_dbt acc, " +
      "			(	  SELECT   TO_DATE ('"+ot4_data_begin+"', 'dd.mm.rrrr') + ROWNUM - 1 xx " +
      "					 FROM   DUAL " +
      "			 CONNECT BY   LEVEL <= TO_DATE ('"+ot4_data_end+"', 'dd.mm.rrrr') - TO_DATE ('"+ot4_data_begin+"', 'dd.mm.rrrr') + 1) chisla " +
      " WHERE	acc.t_chapter IN ( 1,3) AND (LOWER (acc.t_account) NOT LIKE 'овп%' AND acc.t_account NOT LIKE '0%') " +
	  "         and acc.t_account not like '99999%' and acc.t_account not like '99998%' ";
//"	  and t_account ='40702810300000018745' ";
end;

file f2 () dbf write; // объявили переменную дбф файла на запись. подставляя каждый раз туда разный путь будем создавать разные файлы.
var rabota_time_begin:time;

macro podgotovka(s1, s2)  // из  s1 делаем s2
	file f1 () dbf; // объявили дбф файл на чтение
	var dirs, f_p;
	GetRegistryValue("BANK_INI\\ОБЩИЕ ПАРАМЕТРЫ\\ДИРЕКТОРИИ\\USERTEMPLSDIR",2,dirs);

	f_p = findpath(s1,dirs);
	if (open(f1, f_p)) //открыли шаблон
		println("открыт файл шаблона для  "+f_p);
	else
		println("НЕ смог открыть файл шаблона   "+s1);
		exit(0);
	end;

	if (clone(f1, s2)  ) //клонировали шаблон в файл S2. НЕЛЬЗЯ использовать в файле шаблона тип данных float. иначе эта команда выполняться не будет. И копироваться тоже copy
		println("скопирован шаблон в новый файл "+s2);
	else
		println("НЕ УДАЛОСЬ скопировать  шаблон в новый файл "+s2);
//			if (not(copy(s1,s2))) println("ну и скопировать тоже не получилось"); else println("а скопировать получилось");end;
		exit(0);
	end;

	if (close(f1) )
		println("шаблон  "+f_p+ " закрыт");
	else
		println("НЕ УДАЛОСЬ закрыть шаблон  "+f_p+ ", продолжаю работу");
	end;

	if (open(f2, s2)) //открываем то, что скопировали выше как дбф файл для записи.
		println("открыт файл шаблона для на запись "+s2);
	else
		println("НЕ смог открыть файл шаблона на запись"+s2);
		exit(0);
	end;
            
end;

macro copyToMe(src, dst, ktoeto, t:integer)
//		getstring(tempFileNameBezPuti);
		private var m_path: string = "";
		m_path = "$" + dst;
		if (not CopyFile(src, m_path, TRUE))
			println ("не могу скопировать файл с сервера приложений на терминал.\n исходный файл: "+src+" \nфайл назначения: " + m_path);
			return false;
		else 
//			getstring(m_path);
			if (not removeFile(src))
				msgbox("Не смог удалить файл "+src+" с сервера приложений. Ну да и бог с ним.");
			end;
		end;

		if (not(GetFileInfo("$"+dst,@dd,@tt,@ii,@ss))); //ss- то что надо. полный путь абсолютный локальный
			msgbox("не мог найти на локальном диске файл "+dst+"          \n останавливаюсь");
			exit(0);
		else
			println ("                  ФАЙЛ ВЫГРУЗКИ ("+ ktoeto+") СКОПИРОВАН В "+ss +", \n                  размер "+string(ii:a) + " байт. "+t+" записей. Файл может быть ограничен 2 Гб");
		end;

end;

macro getSID()
var sql;
    sql = RSDRecordset("Select RSBSessionData.cnum from dual");
    if (sql.movenext)
       return  sql.value(0, null, V_INTEGER);
    end;
       return 0;
end; 

macro getSP()
  var rset = trsbdataset("select v.terminal from v$session v where  v.sid ="+getsid);
  if( rset and rset.moveNext() )
    return rset.value(0);
  end;
    return 0;  
end;


macro day_zhurnal()
    var i:integer = -1;
    message (" формируется журнал счетов"); begaction(2000,"формируется ЖУРНАЛ СЧЕТОВ",false);
    var ds = trsbdataset(day_sql_zhurnal);
    endaction();
    zhurnal_wrk = zhurnal_wrk + dop_name + zhurnal_wrk_ext;
	podgotovka(zhurnal_tpl,zhurnal_wrk);
	initprogress(-1,string("запись сформированных ранее значений в файл "+zhurnal_wrk),string("счета записываются в файл "+zhurnal_wrk));
	while  (ds and ds.movenext())
		f2.account = ds.a1;
		f2.name_1 = ds.n1;
		f2.name_2 = ternary(valtype(ds.n2)==V_UNDEF,"",ds.n2);
		f2.open = ds.op;
		f2.close = ternary(valtype(ds.cl)=="01.01.0001","",ds.cl);
		if (not (insert(f2)))
			println("не смог выгрузить запись "+string(i+1)+"в файл \nсчет:"+ds.a1+"\nn1="+ds.n1+"\nn2"+ds.n2+"\nopen="+ds.op+"\nclose="+ds.cl);
			exit(0);
		end;
		i = i + 1;
		useprogress(i);
	end;
	remprogress();
	close(f2);
	i = i - 1;
	s3 = string(zhurnal_wrk_name+dop_name+zhurnal_wrk_ext); //имя без пути
	if (copy_need) 
		copytome(zhurnal_wrk, s3,"ЖУРНАЛ СЧЕТОВ",i);
	else
		GetFileInfo(s3, @dd, @tt, @ii, @ss);                   
		println("      ФАЙЛ СФОРМИРОВАН НА СЕРВЕРЕ ПРИЛОЖЕНИЙ " + GETSP +" ТЕКУЩАЯ ДИРЕКТОРИЯ  "+getcurdir()+" фАЙЛ  "+ss+"размер "+string(ii:a) + " байт. "+i+" записей. Файл может быть ограничен 2 Гб");
	end;
end;

macro day_prov1()
    var i:integer = -1;
    message (" формируется журнал проводок 1"); begaction(2000,"формируется DATASET ДЛЯ ЖУРНАЛА ПРОВОДОК 1",false);
    var ds = trsbdataset(day_sql_prov1);
    endaction();
	prov1_wrk = prov1_wrk + dop_name + prov1_wrk_ext;
	podgotovka(prov1_tpl, prov1_wrk);

	initprogress(-1,string("запись сформированных ранее значений в файл "+prov1_wrk),string("данные записываются в файл "+prov1_wrk));
	while  (ds and ds.movenext())
		f2.data = ds.dd;
		f2.data_d = ds.dd_d;
		f2.nmb = ds.nmb;
		f2.dt = ds.dt;
		f2.kt = ds.kt;
		f2.sum = ds.ss;
		f2.sumc = ds.sumc;
		f2.appoint = ds.appoint;
		f2.appoint2 = ternary(valtype(ds.appoint2)==V_UNDEF,"",ds.appoint2);
		f2.sco = ds.sco;
		f2.ucoddoc = ds.ucoddoc;
		if (not (insert(f2)))
			println("не смог выгрузить запись "+string(i+1)+"в файл \ndata=:"+ds.dd+"\dd_d="+ds.dd_d+"\nnmb"+ds.nmb+"\ndt="+ds.dt+"\nkt="+ds.kt+"\nsum="+ds.ss+"\nsumc"+ds.sumc +
			"\napppoint="+ds.appoint+"\mappoint2="+ds.appoint2+"\nsco="+ds.sco+"\nucoddoc="+ds.ucoddoc + "\n         возможно файл просто занят. ");
			exit(0);
		end;
		i = i + 1;
		useprogress(i);
	end;
	remprogress();
	i = i - 1;

	close(f2);
	s3 = string(prov1_wrk_name+dop_name+prov1_wrk_ext); //имя без пути
	if (copy_need) 
		copytome(prov1_wrk, s3,"ПРОВОДКИ_1",i-1);
	else
		GetFileInfo(s3, @dd, @tt, @ii, @ss);                   
		println("      ФАЙЛ ПРОВОДКИ_1 СФОРМИРОВАН НА СЕРВЕРЕ ПРИЛОЖЕНИЙ " + GETSP +" ТЕКУЩАЯ ДИРЕКТОРИЯ  "+getcurdir()+" фАЙЛ  "+ss+"размер "+string(ii:a) + " байт. "+i+" записей. Файл может быть ограничен 2 Гб");
	end;
end;

macro day_prov2()
    var i:integer = 1;
    var m_s1: string="", m_s2:string="";
    message (" формируется журнал проводок 2"); begaction(2000,"формируется DATASET ДЛЯ ЖУРНАЛА ПРОВОДОК 2",false);
    var ds = trsbdataset(day_sql_prov2);
    endaction();
	prov2_wrk = prov2_wrk + dop_name + prov2_wrk_ext;
	podgotovka(prov2_tpl, prov2_wrk);

	initprogress(-1,string("запись сформированных ранее значений в файл "+prov2_wrk),string("данные записываются в файл "+prov2_wrk));
	while  (ds and ds.movenext())
		f2.account_a = ternary(valtype(ds.account_a)==V_UNDEF,"",ds.account_a);
		f2.ucoddoc = ds.ucoddoc;
		f2.tname_a1 = ternary(valtype(ds.tname_a1)==V_UNDEF,"",ds.tname_a1);
		f2.inn_a = ternary(valtype(ds.inn_a)==V_UNDEF,"",ds.inn_a);
		f2.kpp_a = ternary(valtype(ds.kpp_a)==V_UNDEF,"",ds.kpp_a);
		f2.tname_a2 = ternary(valtype(ds.tname_a2)==V_UNDEF,"",ds.tname_a2);
		f2.account_b = ternary(valtype(ds.account_b)==V_UNDEF,"",ds.account_b);
		if ((valtype(ds.bik_k)==V_UNDEF) and (strlen(ds.ucoddoc) == 24)) 
			m_s2 = {MFO_Bank};
		elif ((valtype(ds.bik_k)==V_UNDEF))
			m_s2 = "";
		end;
		f2.bik_k = m_s2;
		f2.inn_b = ternary(valtype(ds.inn_b)==V_UNDEF,"",ds.inn_b);
		f2.kpp_b = ternary(valtype(ds.kpp_b)==V_UNDEF,"",ds.kpp_b);
		f2.tname_b1 = ternary(valtype(ds.tname_b1)==V_UNDEF,"",ds.tname_b1);
		f2.tname_b2 = ternary(valtype(ds.tname_b2)==V_UNDEF,"",ds.tname_b2);
		if ((valtype(ds.bik_d)==V_UNDEF) and (strlen(ds.ucoddoc) == 24)) 
			m_s1 = {MFO_Bank};
		elif ((valtype(ds.bik_d)==V_UNDEF))
			m_s1 = "";
		end;
		f2.bik_d = m_s1;
		if (not (insert(f2)))
			println;
			println("не смог выгрузить запись "+string(i)+" в файл. СП="+getsp()+" \nucoddoc="+ds.ucoddoc+"\naccount_a="+ds.account_a+"\nbik_d="+ds.bik_d+"\ninn_a="+ds.inn_a+"\nkpp_a="+ds.kpp_a+"\ntname_a1="+ds.tname_a1+"\ntname_a2="+ds.tname_a2 +
			"\naccount_b="+ds.account_b+"\nbik_k="+ds.bik_k+"\ninn_b="+ds.inn_b+"\nkpp_b="+ds.kpp_b+"\ntname_b1="+ds.tname_b1+"\ntname_b2="+ds.tname_b2 );
			exit(0);
		end;
		useprogress(i);
		i = i + 1;
	end;
	remprogress();

	i = i - 1;
	close(f2);
	s3 = string(prov2_wrk_name+dop_name+prov2_wrk_ext); //имя без пути
	if (copy_need) 
		copytome(prov2_wrk, s3,"ПРОВОДКИ_2",i);
	else
		GetFileInfo(s3, @dd, @tt, @ii, @ss);                   
		println("      ФАЙЛ ПРОВОДКИ_2 СФОРМИРОВАН НА СЕРВЕРЕ ПРИЛОЖЕНИЙ " + GETSP +" ТЕКУЩАЯ ДИРЕКТОРИЯ  "+getcurdir()+" фАЙЛ  "+ss+"размер "+string(ii:a) + " байт. "+i+" записей. Файл может быть ограничен 2 Гб");
	end;
end;

macro day_ost()
    var i:integer = 1;
    var q:string;
    message (" формируется DATASET для файла остатков"); begaction(2000,"формируется DATASET ДЛЯ ФАЙЛА ОСТАТКОВ",false);
    q=day_sql_rest;debugbreak;
    var ds = trsbdataset(day_sql_rest);
    endaction();
	rest_wrk = rest_wrk + dop_name + rest_wrk_ext;
	podgotovka(rest_tpl, rest_wrk);

	initprogress(-1,string("запись сформированных ранее значений в файл "+rest_wrk),string("данные записываются в файл "+rest_wrk));
	while  (ds and ds.movenext())
		f2.data = ds.data;
		f2.account = ds.account;
		f2.indt = ds.indt;
		f2.indtc = ds.indtc;
		f2.inkt = ds.inkt;
		f2.inktc = ds.inktc;
		f2.obdt = ds.obdt;
		f2.obdtc = ds.obdtc;
		f2.obkt  = ds.obkt;
		f2.obktc = ds.obktc;
		f2.outdt = ds.outdt;
		f2.outdtc = ds.outdtc;
		f2.outkt = ds.outkt;
		f2.outktc = ds.outktc;
		if (not (insert(f2)))
			println("не смог выгрузить запись "+string(i)+"в файл  СП="+getsp()+" \ndata=:"+ds.data+"\daccount="+ds.account+"\nindt"+ds.indt+"\nindtc="+ds.indtc+"\n         возможно файл просто занят. ");
			exit(0);
		end;
		useprogress(i);
		i = i + 1;
	end;
	remprogress();

	i = i - 1;
	close(f2);
	s3 = string(rest_wrk_name+dop_name+rest_wrk_ext); //имя без пути
	if (copy_need) 
		copytome(rest_wrk, s3,"ОСТАТКИ",i);
	else
		GetFileInfo(s3, @dd, @tt, @ii, @ss);                   
		println("      ФАЙЛ ОСТАТКОВ СФОРМИРОВАН НА СЕРВЕРЕ ПРИЛОЖЕНИЙ " + GETSP +" ТЕКУЩАЯ ДИРЕКТОРИЯ  "+getcurdir()+" фАЙЛ  "+ss+"размер "+string(ii:a) + " байт. "+i+" записей. Файл может быть ограничен 2 Гб");
	end;
end;


var dirs:string = "", full_path:string = "";
GetRegistryValue("BANK_INI\\ОБЩИЕ ПАРАМЕТРЫ\\ДИРЕКТОРИИ\\LBRDIR",2,dirs);
full_path = FindPath(lbr_name,dirs);
var dlg = TRecHandler("panel",full_path,True);





MACRO EvMacro (dlg, cmd, id, key)
  if (cmd==DLG_INIT)
      message("~F2~ продолжить,  ~ESC~ выход");
     dlg.rec.Date_begin = {curdate};
     dlg.rec.Date_end = {curdate};
     UpdateFields(dlg); 
  end;

  if (cmd == DLG_REMFOCUS)
    if (FldName(dlg,id)=="date_begin")
       if ( dlg.rec.Date_begin > {curdate} )
          MsgBox("Дата начала больше даты текущего операционного дня"); 
          return CM_CANCEL;
       end;

    end;
    if (FldName(dlg,id)=="date_end")
       if ( dlg.rec.Date_end > {curdate} )
          MsgBox("Дата конца больше даты текущего операционного дня"); 
          return CM_CANCEL;
       end;
    end;
    UpdateFields(dlg); 
  end;    

  if (cmd==DLG_KEY)
    if (KEY==KEY_F9)
   return CM_ignore;
    end; //if F9

    if (KEY==KEY_ENTER)
   return CM_ignore;
    end; //if F9

    if (KEY==KEY_F3)
      return CM_ignore;
    end; //if F3

   	if ((key == KEY_SPACE) and (trim(fldname(dlg, id)) == "zhur_need"))      
	    dlg.rec.zhur_need = strfor (88 - codefor (dlg.rec.zhur_need));              
	    return CM_DEFAULT;                                                 
    end;                                                                   
   	if ((key == KEY_SPACE) and (trim(fldname(dlg, id)) == "prov1_need"))      
	    dlg.rec.prov1_need = strfor (88 - codefor (dlg.rec.prov1_need));              
	    return CM_DEFAULT;                                                 
    end;                                                                   
   	if ((key == KEY_SPACE) and (trim(fldname(dlg, id)) == "prov2_need"))      
	    dlg.rec.prov2_need = strfor (88 - codefor (dlg.rec.prov2_need));              
	    return CM_DEFAULT;                                                 
    end;                                                                   
   	if ((key == KEY_SPACE) and (trim(fldname(dlg, id)) == "ost_need"))      
	    dlg.rec.ost_need = strfor (88 - codefor (dlg.rec.ost_need));              
	    return CM_DEFAULT;                                                 
    end;                                                                   
   	if ((key == KEY_SPACE) and (trim(fldname(dlg, id)) == "copy_need"))      
	    dlg.rec.copy_need = strfor (88 - codefor (dlg.rec.copy_need));              
	    return CM_DEFAULT;                                                 
    end;                                                                   

    if (KEY==KEY_F2)
      ot4_data_begin=dlg.rec.Date_begin;
      ot4_data_end=dlg.rec.Date_end;
      if ((ot4_data_begin>{curdate}) or (ot4_data_end>{curdate})) msgbox("значение даты больше текущего опердня"); return CM_ignore;
      else     
      	if (dlg.rec.zhur_need == strfor(88)) zhur_need=true; end;
      	if (dlg.rec.prov1_need == strfor(88)) prov1_need=true; end;
      	if (dlg.rec.prov2_need == strfor(88)) prov2_need=true; end;
      	if (dlg.rec.ost_need == strfor(88)) ost_need=true; end;
      	if (dlg.rec.copy_need == strfor(88)) copy_need=true; end;
      	return CM_SAVE;
      end;
    end; //if F2

    if (KEY==KEY_ESC)
      exit(1);
      return CM_CANCEL;
    end; //if esc

  end; //if DLG_KEY
END; //evmacro


if(rundialog(dlg,"evmacro")) 
    dop_name = string(ot4_data_begin + "_" + ot4_data_end);
    dop_name = strsubst(dop_name,".","_");
    dop_name = strsubst(dop_name," ","0");

	rabota_time_begin=time();

	if (zhur_need)  day_zhurnal(); end;
	if (prov1_need) day_prov1(); end;
	if (prov2_need) day_prov2(); end;
	if (ost_need)   day_ost(); end;
//	day_prov1();
//day_prov2();

     println();
     println();
     println("                отчет за период "+ot4_data_begin + " - "+ot4_data_end + " сформирован. Граничные даты входят в отчет");
      println("                                 для продолжения работы нажмите ESC");
      println("                                                                 ");
      println("                                                                   ");
      println("                              время формирования :       ",Time()-rabota_time_begin);
   
end;
