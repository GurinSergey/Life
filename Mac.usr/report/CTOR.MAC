/*──────────────────────────────────────────────────────────────────────────┐
  RS-Bank 4.31                                         R-Style Software Lab

  File Name   : ctor.mac                                24 июля 1998 года
  Programmer  : Стасевич В.
  Description : Ведомость несоответствий, состояний рублевых покрытий.

  Comment     :

  Modify      :
└───────────────────────────────────────────────────────────────────────────*/
IMPORT globals, CTInter, RsbDataSet, ocp, Reporting, acv;

private const ALLCURRENCY = -2;
private const ENDLINE = "\n";

/*Параметры для создания отчета, полученные из панели*/
class CPanelParameters(reportName, departmentCode, orgStructure, issueMode, plan, chapterNumber,
                       reportingDate, outForm, sortKind)
    var m_reportName         = reportName;
    var m_departmentCode     = departmentCode;
    var m_orgStructure       = orgStructure;
    var m_issueMode          = issueMode;
    var m_plan               = plan;
    var m_chapterNumber      = chapterNumber;
    var m_reportingDate      = reportingDate;
    var m_outForm            = outForm;
    var m_sortingKind:TArray = sortKind;

    var m_departmentList     = RepDepartmentList(m_orgStructure, m_issueMode, m_departmentCode);
    var m_ocpAccountServer   = RepOcpAccountServer(m_chapterNumber, ALLCURRENCY, m_departmentList);
    var m_accountFilter      = RepAccountFilter(m_departmentList);

end;

/*Получение номера валюты по коду. Например, доллар США: код 5, номер 840*/
MACRO getCurrencyNumber(currencyCode)
    var currencyNumber;

    var currencyTable;

    currencyTable = TbFile("fininstr", "bank.def");

    currencyTable.rec.fiid = currencyCode;
    currencyTable.getEQ();
    currencyNumber = currencyTable.rec.iso_number;

    return currencyNumber;
END;


/*Формирование текста выборки данных для отчета */
MACRO makeQueryText(parameters: CPanelParameters)

    var needShowOcp;
    var tablesJoining     = "";
    var filterOnChapters  = "";
    var query             = "";

    var sortingConditions = "";
    var i;
    var sortingArraySize = 0;



    needShowOcp = FlagOfPrintAccountsOCP();
    /*Проверочка:*/
    /*если выбрана конкретная глава, то один план счетов*/
    /*если глав много, то массив планов счетов для 5 глав*/

    if (parameters.m_chapterNumber == 0)
       tablesJoining = tablesJoining +
            "from dbalance_dbt balance" + ENDLINE +
            "inner join daccblnc$_dbt acc_bal"+ ENDLINE +
            "           on (balance.T_CHAPTER = acc_bal.t_chapter) and "+ ENDLINE +
            "             ((balance.T_BALANCE = acc_bal.t_balance"+parameters.m_plan+"))" + ENDLINE +
            "inner join daccount$_dbt acc_c" + ENDLINE +
            "           on (acc_bal.t_chapter = acc_c.t_chapter) and "+ ENDLINE +
            "              (acc_bal.t_account = acc_c.t_account) "+ ENDLINE;

       filterOnChapters = filterOnChapters +
            "where(((balance.T_INUMPLAN = "+parameters.m_plan+ ") and (balance.T_CHAPTER = 1))  or "+ ENDLINE +
            "      ((balance.T_INUMPLAN = "+parameters.m_plan+ ") and (balance.T_CHAPTER = 2))  or "+ ENDLINE +
            "      ((balance.T_INUMPLAN = "+parameters.m_plan+ ") and (balance.T_CHAPTER = 3))  or "+ ENDLINE +
            "      ((balance.T_INUMPLAN = "+parameters.m_plan+ ") and (balance.T_CHAPTER = 4))  or "+ ENDLINE +
            "      ((balance.T_INUMPLAN = "+parameters.m_plan+ ") and (balance.T_CHAPTER = 5))) "+ ENDLINE;
    else
       tablesJoining = tablesJoining +
            "from dbalance_dbt balance" + ENDLINE +
            "inner join daccblnc$_dbt acc_bal"+ ENDLINE +
            "           on (balance.T_CHAPTER = acc_bal.t_chapter) and"+ ENDLINE +
            "              (balance.T_BALANCE = acc_bal.t_balance"+parameters.m_plan+")    "+
            ENDLINE +
            "inner join daccount$_dbt acc_c" + ENDLINE +
            "           on (acc_bal.t_chapter = acc_c.t_chapter) and"+ ENDLINE +
            "              (acc_bal.t_account = acc_c.t_account)"     + ENDLINE;
       filterOnChapters = filterOnChapters +
            "where ((balance.T_INUMPLAN = "+parameters.m_plan+
                     ") and (balance.T_CHAPTER = "+parameters.m_chapterNumber+"))"+ ENDLINE;
    end;


    /* SQL_Execute("{ CALL rsb_rep_ac.set_dat(" + reportingDate + ", " + reportingDate + ") }");*/
    /*Столбцы с данными и результаты хранимых процедур с необходимыми для отчета данными*/
    /* 16.08.2007 Malakhova 106714*/
    query = "select acc_c.t_account numCurAcc,"+ ENDLINE +
            "       acc_c.t_connect_account numAcc,"  + ENDLINE +
            "       rsb_rep_ac.restout (acc_c.t_account, acc_c.t_code_currency, acc_c.t_chapter, 0) curSum,"+ ENDLINE +
            "       acc_c.t_code_currency codeCurrency,"+ ENDLINE +
            "       rsb_rep_ac.restout (acc_c.t_connect_account, acc_c.t_connect_currency, acc_c.t_connect_chapter, 0) covSum,"+ ENDLINE +
            "       rsb_fiinstr.ConvSumType(rsb_rep_ac.restout (acc_c.t_account,"+ ENDLINE +
            "                                                   acc_c.t_code_currency,"+ ENDLINE +
            "                                                   acc_c.t_chapter, 0)," + ENDLINE +
            "                               acc_c.t_code_currency,"+ ENDLINE +
            "                               acc_c.t_connect_currency,"+ ENDLINE +
            "                               7," + ENDLINE + /*Тип курса (ЦБ_РФ)*/
            "                               '"+parameters.m_reportingDate +"',2) equivalentSum, "+ ENDLINE +
            "       case when (rsb_fiinstr.ConvSumType(rsb_rep_ac.restout (acc_c.t_connect_account,"
                                                                          "acc_c.t_connect_currency,"
                                                                          "acc_c.t_connect_chapter, 0),"
                                                      "acc_c.t_code_currency,"
                                                      "acc_c.t_connect_currency,"
                                                      "7,"
            "                                         '"+parameters.m_reportingDate +"',2) IS NULL)" + ENDLINE +
            "      then 1"
            "      else 0"
            "      end equivalentSummIsNull" + ENDLINE;
    /*объединение необходимых таблиц:*/
    /*dbalance$_dbt - таблица с планами валютных счетов*/
    /*daccblnc$_dbt - таблица с валютными счетами с учетом балансовых*/
    /*daccount$_dbt - таблица с валютными счетами (без балансовых)*/
    query = query + tablesJoining;
    /*Условие Where*/
             /*Фильтр по плану счетов и главе*/
    query = query + filterOnChapters;

             /*Фильтр счетов ОВП*/
    if (needShowOcp == false)
        query = query +
                "      and not " + parameters.m_ocpAccountServer.GetAsSqlString("acc_c") + ENDLINE;
    end;

            /*Фильтр закрытых счетов*/
    query = query +
            "      and (acc_c.t_open_close = CHR(0) or acc_c.t_close_date > '"+parameters.m_reportingDate+ "')" + ENDLINE;
            /*Фильтр по ТС/РС*/
    query = query +
            "      and ("+ parameters.m_accountFilter.GetAsSqlString("acc_c") +")" + ENDLINE;

/*__________________________________________________________________________________________*/
   /*Сортировка*/

    sortingArraySize = parameters.m_sortingKind.Size();
    if (sortingArraySize != 0) /*если сортировка задана*/
        i = 0;
        sortingConditions = "order by ";
        while (i < sortingArraySize) /*по каждому заданному виду сортировки*/
          if (i != 0) /*если итерация не первая, то ставим запятую*/
              sortingConditions = sortingConditions + ", ";
          end;

          if   (parameters.m_sortingKind[i] == REP_PATTERNSORT_DEPARTMENT)
              sortingConditions = sortingConditions + "acc_c.t_department, acc_c.t_branch";
          elif (parameters.m_sortingKind[i] == REP_PATTERNSORT_ACCOUNT)
              sortingConditions = sortingConditions + "numCurAcc";
          elif (parameters.m_sortingKind[i] == REP_PATTERNSORT_CHAPTER)
              sortingConditions = sortingConditions + "acc_c.t_chapter";
          elif (parameters.m_sortingKind[i] == REP_PATTERNSORT_SYSTEM_MAKET)
              sortingConditions = sortingConditions + "acc_c.t_sort";
          end;
          i = i +1;
        end;

    end;


    query = query + sortingConditions;

/*___________________________________________________________________________________________*/



    return (query);
END;

/*Печать заголовка1 отчета: наименование банка + системная дата выпуска отчета*/
MACRO printHeader(departmentCode, orgStructure, width, shift)
    var reportingTime;

    PrintBankHeader(departmentCode, orgStructure, width, shift);

    /*выводим строку времени, начиная с 1 символа длиной = длина всей строки - 3 символа(:секунды) */
    reportingTime = substr(string(Time():f),1, strlen(string(Time():f))-3);

    println(Date():f, " ", reportingTime);
END;


/*Печать заголовка2 отчета: название отчета + отчетная дата*/
/*PrintBankHeader(Dprt, OrgStructure, Width, Shift)*/
MACRO printReportTitle(reportingDate, reportForm, width, shift)
    if (reportForm == 1) /*состояние*/
        printLn(mkStr(" ",shift) + strAlign("Ведомость состояния счетов рублевых покрытий", width, STR_ALIGN_CENTER, " "));
        printLn(mkStr(" ",shift) + strAlign(string("на ", reportingDate:f), width, STR_ALIGN_CENTER, " "));
    elif (reportForm == 2) /*соответствие*/
        printLn(mkStr(" ",shift) + strAlign("Ведомость несоответствия счетов рублевых покрытий", width, STR_ALIGN_CENTER, " "));
        printLn(mkStr(" ",shift) + strAlign(string("на ", reportingDate:f), width, STR_ALIGN_CENTER, " "));
    end;
END;


/*Печать шапки таблицы отчета*/
MACRO printTableHeader
[
┌─────────────────────────┬─────────────────────────┬───────────────────────────┬───────────────────────┬───────────────────────┐
│          Номер          │          Счет           │           Сумма           │         Сумма         │         Сумма         │
│        лицевого         │       рублевого         │          в валюте         │        в рублях       │       несоответ-      │
│          счета          │        покрытия         │                           │                       │         ствия         │];
END;


/*Печать линии, разделяющей строки таблицы отчета*/
MACRO printSeparatingLine
[├─────────────────────────┼─────────────────────────┼───────────────────────────┼───────────────────────┼───────────────────────┤];
END;



/*Печать информации о валютном счете в теле таблицы */
/* 16.08.2007 Malakhova 106733*/
MACRO printBody1(accountNumber, accountRest, currencyNumber, equivalentSum)
[│####################     │                         │       ################ ###│       ################│                       │
] (accountNumber, accountRest:14:2, currencyNumber, equivalentSum:14:2);
END;

/* 16.08.2007 Malakhova 106733*/
/*Печать информации о счете покрытия в теле таблицы */
MACRO printBody2(accountNumber, accountRest, disparitySum)
[│                         │####################     │                           │       ################│       ################│
] (accountNumber, accountRest:14:2, disparitySum:14:2);
END;

/*Печать подвала таблицы отчета*/
MACRO printTableEnd
[└─────────────────────────┴─────────────────────────┴───────────────────────────┴───────────────────────┴───────────────────────┘
];
END;

MACRO printReport(parameters: CPanelParameters)
    var commandText = "";
    var commandOfInitializationText = "";
    var dataForReport;
    var dataString;
    var numberOfDataStrings = 0;

    var width = 83;
    var shift = 0;

    var disparitySum;      /*сумма несоответствия*/
    var currencyNumber;    /*Номер валюты*/

    var isRecords;
    var isTableHeader = false; /*есть ли в отчете уже шапка таблицы*/

    commandText = makeQueryText(parameters);/*получение текста запроса*/
    /*Инициализация пакета rsb_rep_ac*/
    commandOfInitializationText = string("{ CALL rsb_rep_ac.set_dat('", parameters.m_reportingDate, "', '", parameters.m_reportingDate, "') }");
    SQL_Execute(commandOfInitializationText);
    dataForReport = TRsbDataSet(commandText);
    isRecords = dataForReport.moveNext();/*выполнение запроса*/

    if (isRecords == true)     /*если есть записи выборке*/
        width = 129;
        shift = 0;

        printHeader(parameters.m_departmentCode, parameters.m_orgStructure, width, shift);
        printReportTitle(parameters.m_reportingDate, parameters.m_outForm, width, shift);

       /*печатаем данные по первому счету*/
        dataString = dataForReport.GetRecord();
        currencyNumber = getCurrencyNumber(dataString.codeCurrency); /*определяем номер валюты по ее коду*/

        if (dataString.equivalentSummIsNull == 1)
            msgbox(string("Ошибка определения суммы покрытия! | Не найден курс ЦБ РФ для финансового инструмента с кодом ", currencyNumber));
            exit(1);
        end;

        if (parameters.m_outForm == 1) /*состояние*/
            printTableHeader();    /*вместе с первым счетом печатаем шапку отчета*/
            isTableHeader = true;  /*и говорим, что ее напечатали*/

            printSeparatingLine();
            printBody1(dataString.numCurAcc, dataString.curSum, currencyNumber, dataString.equivalentSum);
            disparitySum = dataString.covSum - dataString.equivalentSum;
            printBody2(dataString.numAcc, dataString.covSum, disparitySum);

        elif (parameters.m_outForm == 2) /*соответствие*/
              disparitySum = round(dataString.covSum,2,1) - round(dataString.equivalentSum,2,1);

            if (disparitySum != 0) /*если сумма несоответствия отлична от 0*/
                 printTableHeader();   /*то печатаем шапку отчета*/
                 isTableHeader = true; /*и говорим, что ее напечатали*/

                 printSeparatingLine();
                 printBody1(dataString.numCurAcc, dataString.curSum, currencyNumber, dataString.equivalentSum);
                 printBody2(dataString.numAcc, dataString.covSum, disparitySum);
            end;
        end;

        /*печатаем данные по остальным счетам*/
        while (dataForReport.MoveNext() == true)
            dataString = dataForReport.GetRecord();
            currencyNumber = getCurrencyNumber(dataString.codeCurrency); /*определяем номер валюты по ее коду*/

            if (dataString.equivalentSummIsNull == 1)
                msgbox(string("Ошибка определения суммы покрытия! | Не найден курс ЦБ РФ для финансового инструмента с кодом ", currencyNumber));
                exit(1);
            end;


            if (parameters.m_outForm == 1) /*состояние*/
                printSeparatingLine();
                printBody1(dataString.numCurAcc, dataString.curSum, currencyNumber, dataString.equivalentSum);
                disparitySum = round(dataString.covSum,2,1) - round(dataString.equivalentSum,2,1);
                printBody2(dataString.numAcc, dataString.covSum, disparitySum);

            elif (parameters.m_outForm == 2) /*соответствие*/
                disparitySum = round(dataString.covSum,2,1) - round(dataString.equivalentSum,2,1);
                if (disparitySum != 0) /*если сумма несоответствия отлична от 0*/
                    if (isTableHeader == false) /*если до этого шапку не печатали (не было счетов с суммой*/
                        printTableHeader();     /*несоответствия), то печатаем шапку таблицы сейчас и */
                        isTableHeader = true;   /*говорим, что ее напечатали*/
                    end;
                    printSeparatingLine();
                    printBody1(dataString.numCurAcc, dataString.curSum, currencyNumber, dataString.equivalentSum);
                    printBody2(dataString.numAcc, dataString.covSum, disparitySum);
                end;
            end;
        end;

        if (isTableHeader == true) /*Если мы печатали шапку отчета, то печатаем его подвал*/
            printTableEnd();
        else  /*Если шапку не печатали (такое может быть только, если выпускаем отчет соответствия)*/
            PrintLn();  /*Печатаем строку о том, что данные отсутствуеют*/
            printLn(mkStr(" ", shift) + strAlign("Данные отсутствуют", width, STR_ALIGN_CENTER, " "));
        end;

    else                   /*если в выбоке нет записей*/
        printHeader(parameters.m_departmentCode, parameters.m_orgStructure, width, shift);
        printReportTitle(parameters.m_reportingDate, parameters.m_outForm, width, shift);
        PrintLn();
        printLn(mkStr(" ", shift) + strAlign("Данные отсутствуют", width, STR_ALIGN_CENTER, " "));
    end;

END;


/*╔══════════════════════════╗
  ║ Точка входа в программу  ║
  ╚══════════════════════════╝*/
MACRO MakeReport(reportName, departmentCode, orgStructure, issueMode, plan, chapterNumber,
                 reportingDate, outForm, sortKind)

    var parameters = CPanelParameters(reportName, departmentCode, orgStructure, issueMode, plan,
                                  chapterNumber, reportingDate, outForm, sortKind);

    /* Контроль открытых опердней */
    if (RepOperdaysOpened(parameters.m_departmentList, parameters.m_reportingDate, parameters.m_reportingDate).ShouldContinue == false)
        exit(1);
    end;

    /*установка временного файла, в который печатаем отчет*/
    /*в зависимости от выбранной пользователем формы*/
    if (parameters.m_outForm == 1)
        setOutPut(GetTxtFileName("statcov"),false );
    elif (parameters.m_outForm == 2)
        setOutPut(GetTxtFileName("stateq"),false );
    end;

    /*печатаем отчет*/
    printReport(parameters);

END;



/*eof*/
