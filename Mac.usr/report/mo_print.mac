/**
 *  RS-Bank 6.0                                           R-Style Software Lab
 *
 *  File Name   : mo_print.mac                                      18.12.2009
 *  Programmer  : Gromov
 *  Description : Мемориальные ордера
 *  Comment     : 
 *  Modify      : 
 */

import Reporting;
import FIInter;

import cb_sql; 
import rep_lib;
import Ofstream;
import "fg_Life_parm.mac";
private var fgBank = fg_life_subject({OurBank});
/*Параметры для создания отчета, полученные из панели*/
private class TParameters(departmentId  : Integer,
                  organizationStructure : Integer,
                  issueMode             : Integer,
                  chapterNumber         : Integer,
                  currencyId            : Integer,
                  dateIn                : Date, 
                  dateOut               : Date,
                  isOnlyForeignCurrency : Bool,
                  operNumber            : Integer,
                  accountMask           : String,
                  resultCarry           : Integer,
                  packNumber            : Integer,
                  codeDocument          : String,
                  patternSort           : TArray)

    private var m_departmentId : Integer;
    private var m_organizationStructure : Integer;
    private var m_issueMode : Integer;
    private var m_chapterNumber : Integer;
    private var m_currencyId : Integer;
    private var m_dateIn : Date;
    private var m_dateOut : Date;
    private var m_isOnlyForeignCurrency : Bool;
    private var m_operNumber : Integer;
    private var m_accountMask : String;
    private var m_resultCarry : Integer;
    private var m_packNumber: Integer; 
    private var m_codeDocument : String; 
    private var m_patternSort : TArray;
    private var m_reportFileName : String;

    private var m_departmentList : RepDepartmentList;
    private var m_documentFilter : RepDocumentFilter;
    private var m_accountFilter  : RepAccountFilter;

    macro getChapterNumber() : Integer
        return m_chapterNumber;
    end;

    macro getCurrencyId() : Integer
        return m_currencyId;
    end;

    macro getDateIn() : Date
        return m_dateIn;
    end;

    macro getDateOut() : Date
        return m_dateOut;
    end;

    macro getIsOnlyForeignCurrency() : Bool
        return m_isOnlyForeignCurrency;
    end;

    macro getOperNumber() : Integer
        return m_operNumber;
    end;

    macro getAccountMask() : String
        return m_accountMask;
    end;

    macro getResultCarry() : String
        return m_resultCarry;
    end;

    macro getPackNumber() : Integer
        return m_packNumber;
    end;

    macro getCodeDocument() : String
        return m_codeDocument;
    end;

    macro getPatternSort() : TArray
        return m_patternSort;
    end;

    macro getDepartmentList() : RepDepartmentList
        return m_departmentList;
    end;

    macro getDocumentFilter() : RepDepartmentList
        return m_documentFilter;
    end;

    macro getAccountFilter() : RepAccountFilter
        return m_accountFilter;
    end;

    macro getReportFileName() : String;
        return m_reportFileName;
    end;

    private macro constructorTParameters(departmentId  : Integer,
                                 organizationStructure : Integer,
                                 issueMode             : Integer,
                                 chapterNumber         : Integer,
                                 currencyId            : Integer,
                                 dateIn                : Date, 
                                 dateOut               : Date,
                                 isOnlyForeignCurrency : Bool,
                                 operNumber            : Integer,
                                 accountMask           : String,
                                 resultCarry           : String,
                                 packNumber            : Integer,
                                 codeDocument          : String,
                                 patternSort           : TArray)

        m_departmentId          = departmentId;
        m_organizationStructure = organizationStructure;
        m_issueMode             = issueMode;
        m_chapterNumber         = chapterNumber;
        m_currencyId            = currencyId;
        m_dateIn                = dateIn;
        m_dateOut               = dateOut;
        m_isOnlyForeignCurrency = isOnlyForeignCurrency;
        m_operNumber            = operNumber;
        m_accountMask           = accountMask;
        m_resultCarry           = resultCarry;
        m_packNumber            = packNumber;
        m_codeDocument          = codeDocument;
        m_patternSort           = patternSort;

        m_departmentList = RepDepartmentList(m_organizationStructure, m_issueMode, m_departmentId);
        m_accountFilter  = RepAccountFilter(m_departmentList, PRIV_GET_ACCOUNT_DATA_FOR_REPORTS);
        m_DocumentFilter = RepDocumentFilter(m_departmentList);
        getRegistryValue("REPORT\\MACRO\\MO\\FILEOUT", V_STRING, m_reportFileName);

    end;

    constructorTParameters(departmentId, organizationStructure, issueMode, chapterNumber, currencyId, dateIn, dateOut, isOnlyForeignCurrency, 
                           operNumber, accountMask, resultCarry, packNumber, codeDocument, patternSort);

end;

private class (TOfstream) TMoOfStream(fileName : String)
    m_lastOutput = setOutput(fileName+"_tmp",   false);
    m_lastOutput = setOutput(m_lastOutput, true);
    resetOutputFile();

    initTOfstream(fileName);
end;

/**
 *  Источник данных для отчета
 */
private class TCalculatorDataSource(parameters : TParameters)
    private const ALLFININSTR = -1;
    private const ALLCURRENCY = -2;

    private var m_parameters = parameters;
    private var m_departmentList = m_parameters.getDepartmentList();

    private macro getCarryQuery(isForeignCurrency)
        var commandText;
        var strWhere;
        var carryTable;
        var accountTable;
        var replAccount;

        if (isForeignCurrency)
            carryTable   = "darhdoc$_dbt";
            accountTable = "daccount$_dbt";
        else
            carryTable   = "darhdoc_dbt";
            accountTable = "daccount_dbt";
        end;
        
        commandText = "SELECT "
                  + "\n" + getSqlFldList("arhdoc", null, "doc", "t_");
   if (fgBank.is_go )
        commandText = commandText + ","
          "\n  CASE SUBSTR (t_account_payer, 1, 3) "+
          "\n    WHEN '706' "+
          "\n    THEN "+
          "\n       CONCAT(CONCAT (SUBSTR (t_account_payer, 1, 8), '0000'), SUBSTR (t_account_payer, 14)) "+
          "\n    ELSE "+
          "\n       CONCAT(CONCAT (SUBSTR (t_account_payer, 1, 8), '000000'), SUBSTR (t_account_payer, 16)) "+
          "\n  END "+
          "\n    t_sort ";
  else
        commandText = commandText + "\n" + ", accp.t_sort AS t_sort";
  end;
        commandText = commandText + "\n" + " FROM"
                  + "\n" + carryTable + " doc, "+ accountTable + " accp, " + accountTable + " accr, dmultycar_dbt mvc ";
                  
        replAccount = " NVL (mvc.t_account_from, doc.t_account_payer)";
        commandText = strSubst(commandText, "doc.t_account_payer", replAccount);
        replAccount = " NVL (mvc.t_account_to, doc.t_account_receiver)";
        commandText = strSubst(commandText, "doc.t_account_receiver", replAccount);

        strWhere = "doc.t_account_payer = accp.t_account "
        + "\n" + "AND mvc.t_applicationKey(+) = doc.t_connAppKey "
        + "\n" + "AND mvc.t_iApplicationKind(+) = doc.t_connAppKind "
        + "\n" + "AND doc.t_account_receiver = accr.t_account "
        + "\n" + "AND (" + m_parameters.getAccountFilter().getAsSqlString("accp")
        + "\n" + "     OR " + m_parameters.getAccountFilter().getAsSqlString("accr")
        + "\n" + "    )"
        + "\n" + "   AND (" + m_parameters.getDocumentFilter.getAsSqlString("doc.t_department",
                                                                            "accp.t_branch",
                                                                            "accr.t_branch",
                                                                            PRIV_GET_ACCOUNT_DATA_FOR_REPORTS)
        + "\n" + "       )"
        + "\n" + "   AND doc.t_date_carry BETWEEN " + getSqlDate(m_parameters.getDateIn)
        + "\n" + "                            AND " + getSqlDate(m_parameters.getDateOut)
        + "\n" + "   AND doc.t_result_carry NOT IN (" + DELTARATE + "," + DEPRUBCARRY + ")"
        + "\n" + "   AND (doc.t_result_carry <> " + RUBCARRY
        + "\n" + "        OR mvc.t_fiId_from = " + NATCUR
        + "\n" + "        OR mvc.t_fiId_to = " + NATCUR
        + "\n" + "       ) ";

        if (m_parameters.getChapterNumber() > 0)
            strWhere = strWhere + " AND doc.t_chapter = " + m_parameters.getChapterNumber();
        end;

        if ((m_parameters.getCurrencyId() != ALLCURRENCY) AND (m_parameters.getCurrencyId() != ALLFININSTR))
            strWhere = strWhere + " AND doc.t_code_currency = " + m_parameters.getCurrencyId();
        end;
        if (m_parameters.getOperNumber() > 0)
            strWhere = strWhere + " AND doc.t_oper = " + m_parameters.getOperNumber();
        end;
        if (m_parameters.getAccountMask() != "")
             strWhere = strWhere + " AND (" +convertMaskToSQLFormat(m_parameters.getAccountMask(), "doc.t_account_payer")
             + "\n" + "                OR " +convertMaskToSQLFormat(m_parameters.getAccountMask(), "doc.t_account_receiver")
             + "\n" + "                   )";
        end;
        if (m_parameters.getResultCarry() != 0)
            strWhere = strWhere + " AND doc.t_result_carry = " + m_parameters.getResultCarry();
        end;

        if (m_parameters.getPackNumber() > 0)
            strWhere = strWhere + " AND doc.t_number_pack = " + m_parameters.getPackNumber();
        end;

        if (m_parameters.getCodeDocument() != "")
            strWhere = strWhere + " AND doc.t_shifr_oper = " + getSqlString(m_parameters.getCodeDocument());
        end;

        return commandText + " WHERE " + strWhere;

    end;

    private macro getQuery()
        var i = 0;
        var strOrder = "";
        var cmdText;

        if ((m_parameters.getCurrencyId() == ALLCURRENCY) OR (m_parameters.getCurrencyId() == ALLFININSTR))
            if (m_parameters.getIsOnlyForeignCurrency())
                cmdText = getCarryQuery(true);
            else
                cmdText = getCarryQuery(false) 
              + "\n" + " UNION ALL "
              + "\n"  +   getCarryQuery(true);
            end;
        elif (m_parameters.getCurrencyId() == NATCUR)
            cmdText = getCarryQuery(false);
        else
            cmdText = getCarryQuery(true);
        end;

        while (i < m_parameters.getPatternSort().size)
            if (i != 0)
                strOrder = strOrder + ", ";
            else
                strOrder = " ORDER BY ";
            end;
            
            if   (m_parameters.getPatternSort()[i] == REP_PATTERNSORT_DEPARTMENT)
                strOrder = strOrder + " t_department";
            elif (m_parameters.getPatternSort()[i] == REP_PATTERNSORT_OPER)
                strOrder = strOrder + " t_oper";
            elif (m_parameters.getPatternSort()[i] == REP_PATTERNSORT_ACCOUNT)
                strOrder = strOrder + " t_account_payer";
            elif (m_parameters.getPatternSort()[i] == REP_PATTERNSORT_CHAPTER)
                strOrder = strOrder + " t_chapter";
            elif (m_parameters.getPatternSort()[i] == REP_PATTERNSORT_SYSTEM_MAKET)
                strOrder = strOrder + " t_sort";
            elif (m_parameters.getPatternSort()[i] == REP_PATTERNSORT_DATE_DOCUMENT)
                strOrder = strOrder + " t_date_carry";
            end;

            i = i +1;
        end;

          if (fgBank.is_go )
            if (i > 0) 
            strOrder = strOrder + " , ";
            end;
            strOrder = strOrder + " t_sum ";
          end;

        return cmdText + strOrder;

    end;

    macro execute(cmdText)
        return TRsbDataSet(getQuery());
    end;

end;

private class TMemorialOrderView(parameters)
    var m_printOfstream;
    var m_rec : TRecHandler;

    macro print(rec)
        CopyRSetToFBuff(m_rec,rec);

        if (rec.t_code_currency == NATCUR)
            execMacroFile("pr_accst_rmo.mac", "PrintDoc", 1, m_rec);
        else
            execMacroFile("pr_accst_cmo.mac", "PrintDoc", 1, m_rec);
        end;
    end;

    macro printNoData()
        println(" Нет данных.");
    end;
    
    macro show()
        m_printOfstream.show();
    end;

    private macro constructorTMemorialOrderView(parameters)
        m_printOfstream = TMoOfstream(parameters.getReportFileName());
        m_printOfstream.setOutputFile();
        m_rec = TRecHandler("arhdoc");
    end;
    
    constructorTMemorialOrderView(parameters);
end;

//Контроллер печати
private class TMemorialOrderPrint(parameters)
    var m_view : TMemorialOrderView;

    macro execute(dataSet)
        var isEmpty : bool = true;
        
        while (dataSet.next())
            isEmpty = false;
            m_view.print(dataSet.rec);
        end;
        
        if (isEmpty)
            m_view.printNoData();
        end;
  
        m_view.show();
    end;
    
    private macro constructorTMemorialOrderPrint(parameters)
        m_view = TMemorialOrderView(parameters);
    end;
    
    constructorTMemorialOrderPrint(parameters);
end;


/**
 *  Основная функция
 */
macro printReport(departmentId          : Integer,
                  organizationStructure : Integer,
                  issueMode             : Integer,
                  chapterNumber         : Integer,
                  currencyId            : Integer,
                  dateIn                : Date, 
                  dateOut               : Date,
                  isOnlyForeignCurrency : Bool,
                  operNumber            : Integer,
                  accountMask           : String,
                  resultCarry           : String,
                  packNumber            : Integer,
                  codeDocument          : String,
                  patternSort           : TArray)

    var parameters = TParameters(departmentId, organizationStructure, issueMode, chapterNumber, currencyId, dateIn, dateOut, 
                                 isOnlyForeignCurrency, operNumber, accountMask, resultCarry, packNumber, codeDocument, patternSort);

    if (not RepOperdaysOpened(parameters.getDepartmentList(), parameters.getDateIn(), parameters.getDateOut()).shouldContinue())
        exit(1);
    end;
    
    var moPrintController = TMemorialOrderPrint(parameters);
    
    moPrintController.execute(TCalculatorDataSource(parameters).execute());
    
    return true;

end;

