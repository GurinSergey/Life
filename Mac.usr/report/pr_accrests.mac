/**
*  RS-Bank 6.0                                           R-Style Software Lab
*
*  File Name   : pr_accrests.mac                               March 29, 2007
*  Programmer  : ABP
*  Description : Справка об остатках по счетам (RS-Forms)
*  Comment     :
*  Modify      :
*/

cpdos;

import rsforms;
import rsexts;

import Reporting;
import FIInter;

import globals;
import cb_sql;
import lib_lang;
import lib_path;
import rep_lib;
import repException;
import Ofstream;


const ALLCURRENCY = -2;

/**
* Преобразование булева значения в почти rs-bank'овский флаг
*/
private macro bool2char(val)
return ternary(val, "X", "0");
end;

/**
*  Параметры отчета
*/
class TParameters(departmentId : Integer, organizationStructure : Integer, issueMode : Integer,
                planNumber : Integer, chapterNumber : Integer, currencyId : Integer,
                reportDate : Date,
                clientId : Integer,
                isGroup : Bool, operNumber : Integer,
                balanceMask : String,
                accountMask : String,
                needApostrophes : Bool, needZeroRestAccounts : Bool, needInCurrency : Bool, needChapterTotals : Bool, needClosedAccounts : Bool, sort : TArray)

    private var m_departmentId : Integer;
    private var m_organizationStructure : Integer;
    private var m_issueMode : Integer;
    private var m_planNumber : Integer;
    private var m_chapterNumber : Integer;
    private var m_currencyId : Integer;
    private var m_reportDate : Date;
    private var m_clientId : Integer;
    private var m_isGroup : Bool;
    private var m_operNumber : Integer;
    private var m_balanceMask : String;
    private var m_accountMask : String;
    private var m_needApostrophes : Bool;
    private var m_needZeroRestAccounts : Bool;
    private var m_needInCurrency : Bool;
    private var m_needChapterTotals : Bool;
    private var m_needClosedAccounts : Bool;
    private var m_sort : TArray;

    private var m_departmentList : RepDepartmentList;
    private var m_accountFilter : RepAccountFilter;
    private var m_ocpAccountServer : RepOcpAccountServer;

    macro getDepartmentId() : Integer
        return m_departmentId;
    end;

    macro getOrganizationStructure() : Integer
        return m_organizationStructure;
    end;

    macro getPlanNumber() : Integer
        return m_planNumber;
    end;

    macro getChapterNumber() : Integer
        return m_chapterNumber;
    end;

    macro getCurrencyId() : Integer
        return m_currencyId;
    end;

    macro getReportDate() : Date
        return m_reportDate;
    end;

    macro getClientId() : Integer
        return m_clientId;
    end;

    macro getIsGroup() : Bool
        return m_isGroup;
    end;

    macro getOperNumber() : Integer
        return m_operNumber;
    end;

    macro getBalanceMask() : String
        return m_balanceMask;
    end;

    macro getAccountMask() : String
        return m_accountMask;
    end;

    macro getNeedApostrophes() : Bool
        return m_needApostrophes;
    end;

    macro getNeedZeroRestAccounts() : Bool
        return m_needZeroRestAccounts;
    end;

    macro getNeedChapterTotals() : Bool
        return m_needChapterTotals;
    end;

    macro getNeedClosedAccounts() : Bool
        return m_needClosedAccounts;
    end;

    macro getNeedApostrophesAsChar() : String
        return bool2char(m_needApostrophes);
    end;

    macro getNeedZeroRestAccountsAsChar() : String
        return bool2char(m_needZeroRestAccounts);
    end;

    macro getNeedChapterTotalsAsChar() : String
        return bool2char(m_needChapterTotals);
    end;

    macro getNeedClosedAccountsAsChar() : String
        return bool2char(m_needClosedAccounts);
    end;

    macro getDepartmentList() : RepDepartmentList
        return m_departmentList;
    end;

    macro getAccountFilter() : RepAccountFilter
        return m_accountFilter;
    end;

    macro getOcpAccountServer() : RepOcpAccountServer
        return m_ocpAccountServer;
    end;

    macro getNeedInCurrency() : bool
        return m_needInCurrency;
    end;

    macro getSort() : TArray
        return m_sort;
    end;

    local macro constructorTParameters(departmentId : Integer, organizationStructure : Integer, issueMode : Integer,
                            planNumber : Integer, chapterNumber : Integer, currencyId : Integer,
                            reportDate : Date,
                            clientId : Integer,
                            isGroup : Bool, operNumber : Integer,
                            balanceMask : String,
                            accountMask : String,
                            needApostrophes : Bool, needZeroRestAccounts : Bool, needInCurrency : Bool, needChapterTotals : Bool, needClosedAccounts : Bool,
                            sort : TArray)

        m_departmentId          = departmentId;
        m_organizationStructure = organizationStructure;
        m_issueMode             = issueMode;
        m_planNumber            = planNumber;
        m_chapterNumber         = chapterNumber;
        m_currencyId            = currencyId;
        m_reportDate            = reportDate;
        m_clientId              = clientId;
        m_isGroup               = isGroup;
        m_operNumber            = operNumber;
        m_balanceMask           = balanceMask;
        m_accountMask           = accountMask;
        m_needApostrophes       = needApostrophes;
        m_needZeroRestAccounts  = needZeroRestAccounts;
        m_needInCurrency        = needInCurrency;
        m_needChapterTotals     = needChapterTotals;
        m_needClosedAccounts    = needClosedAccounts;
        m_sort                  = sort;

        m_departmentList   = RepDepartmentList(m_organizationStructure, m_issueMode, m_departmentId);
        m_accountFilter    = RepAccountFilter(m_departmentList, PRIV_GET_ACCOUNT_DATA_FOR_REPORTS);
        m_ocpAccountServer = RepOcpAccountServer(m_chapterNumber, m_currencyId, m_departmentList);

    end;

    constructorTParameters(departmentId, organizationStructure, issueMode, planNumber, chapterNumber, currencyId, reportDate, clientId,
                            isGroup, operNumber, balanceMask, accountMask, needApostrophes, needZeroRestAccounts, needInCurrency, needChapterTotals, needClosedAccounts, sort);

end;

/**
*  Временная таблица
*/
class TTempTable

    private const m_tableName = "daccrests_tmp";


    macro getInsertClause()
        return "INSERT INTO " + m_tableName + "(" + sqlGetFieldsString(m_tableName) + ")";
    end;


    macro truncate()
        sql_truncate(m_tableName);
    end;


    macro getTableName()
        return m_tableName;
    end;


    local macro constructorTTempTable()
    end;


    constructorTTempTable();

end;

/**
*  Источник данных для расчета
*/
class TCalculatorDataSource(parameters : TParameters)
    private var m_parameters : TParameters;

    private class TCommandTextMaker(parameters : TParameters)

        private const TA_RUB    = 6;
        private const TA_MULTIR = 12;
        private const TA_ESTIM  = 4;

        private var m_parameters : TParameters;

        private var m_accountTableName : String;
        private var m_accblncTableName : String;
        private var m_balanceTableName : String;

        private var m_accountFieldName  : String;
        private var m_chapterFieldName  : String;
        private var m_currencyFieldName : String;

        private var m_isCurrency : Bool;

        private var m_currencyConnectClause : String;
        private var m_currencyFilterClause  : String;

        private macro bool2sql(val)
            return ternary(val, "(1 = 1)", "(1 = 0)");
        end;


        private macro getAccountRestClause(isNatCur : bool, chapter5 : bool)

            var parametersList;
            var clause = "";

            parametersList =         ternary(chapter5, "ac.t_account", m_accountFieldName)
                            + ", " + ternary(chapter5, "ac.t_chapter", m_chapterFieldName)
                            + ",     ac.t_code_currency"
                            + ", " + getSqlDate(m_parameters.getReportDate() - 1)
                            + ", " + ternary(isNatCur, NATCUR, "ac.t_code_currency");

            clause = "rsb_account.restAll(" + parametersList + ")";

            return clause;

        end;

        private macro getBalanceFilterClause()

            const chapterFieldName    = "balance.t_chapter";
            const balanceFieldName    = "balance.t_balance";
            const planNumberFieldName = "balance.t_iNumPlan";

            const planNumber = m_parameters.getPlanNumber();

            var isCurrency = ternary(m_isCurrency, 1, 0);

            var balanceMask = m_parameters.getBalanceMask();

            var clause = "";

            var parametersList = balanceFieldName
                        + ", " + chapterFieldName
                        + ", " + planNumber
                        + ", " + isCurrency;

            if (balanceMask != "")
                balanceMask = "(" + convertMaskToSQLFormat(balanceMask, balanceFieldName) + ")";
            else
                balanceMask = balanceFieldName + " != " + getSqlString("");
            end;

            /* EVG 24/02/2014 Из-за этой проверки очень сильно страдает быстродействие запроса в случае,
               если используется маска по БС, причём в маске указывается счёт 2-го порядка. Проверка пере-
               несена в конец запроса (в методе make()).
            balanceMask = balanceMask + " AND rsb_rep_ac.chk_blnc_tech(" + parametersList + ") != 0";*/

            clause = getChapterFilterSqlClause(planNumber, m_parameters.getChapterNumber(), chapterFieldName);

            clause = "(" + planNumberFieldName + " = " + planNumber + " AND " + clause + " AND " + balanceMask + ")";

            return clause;

        end;


        private macro getAccountFilterClause()

            var clause = "";

            const accountFieldName = "ac.t_account";

            var accountMask = m_parameters.getAccountMask();

            if (accountMask != "")

                accountMask = convertMaskToSQLFormat(accountMask, accountFieldName);

            else

                accountMask = accountFieldName + " != " + getSqlString("");

            end;

            clause = "(" + accountMask + ")";

            return clause;

        end;


        macro make()

            var accountRestClause         = getAccountRestClause(false, false);
            var accountRestNatCurClause   = getAccountRestClause(true,  false);
            var accountRestChapter5Clause = getAccountRestClause(false, true);

            var balanceFilterClause = getBalanceFilterClause();

            var accountFilterClause = getAccountFilterClause();

            var closedAccountsFilterClause;
            var clientFilterClause;
            var operFilterClause;
            var zeroRestAccountsFilterClause;

            var commandText;

            if (m_parameters.getNeedClosedAccounts())

                closedAccountsFilterClause = bool2sql(true);

            else

                closedAccountsFilterClause = "rsb_rep_ac.chk_datclose(ac.t_open_close, ac.t_close_date) = 0";

            end;


            if (m_parameters.getClientId() > 0)

                clientFilterClause = string("ac.t_client = ", m_parameters.getClientId());

            else

                clientFilterClause = bool2sql(true);

            end;


            if (m_parameters.getOperNumber() > 0)

                if (m_parameters.getIsGroup())

                    operFilterClause = string("rsb_rep_ac.find_operingrp(ac.t_oper, ", m_parameters.getOperNumber(), ", 1) = 0");

                else

                    operFilterClause = string("ac.t_oper = ", m_parameters.getOperNumber());

                end;

            else

                operFilterClause = bool2sql(true);

            end;


            if (m_parameters.getNeedZeroRestAccounts())

                zeroRestAccountsFilterClause = bool2sql(true);

            else
                zeroRestAccountsFilterClause = "(t_accountRest != 0) or (t_accountRestNatCur != 0)";
            end;

            commandText =          "WITH accountData AS"
                + "\n" + "("
                + "\n" + " SELECT ac.t_account                                                         t_accountNumber,"
                + "\n" + "        ac.t_nameAccount                                                     t_accountName,"
                + "\n" + "        fi.t_fi_code                                                         t_codeCurrency,";
            if (m_parameters.getNeedInCurrency())
                commandText = commandText
                + "\n" + "        CASE"
                + "\n" + "              WHEN (ac.t_chapter <> 5)"
                + "\n" + "                  THEN " + accountRestNatCurClause
                + "\n" + "              ELSE 0"
                + "\n" + "        END                                                                  t_accountRestNatCur,";
            else
                commandText = commandText
                + "\n" + "        0                                                                    t_accountRestNatCur,";
            end;

            if (m_parameters.getNeedInCurrency())
                commandText = commandText
                + "\n" + "        CASE"
                + "\n" + "              WHEN (ac.t_chapter <> 5)"
                + "\n" + "                  THEN " + accountRestClause
                + "\n" + "              ELSE " + accountRestChapter5Clause
                + "\n" + "        END                                                                  t_accountRest,";
            else
                commandText = commandText
                + "\n" + "        CASE"
                + "\n" + "              WHEN (ac.t_chapter <> 5)"
                + "\n" + "                  THEN " + accountRestNatCurClause
                + "\n" + "              ELSE " + accountRestChapter5Clause
                + "\n" + "        END                                                                  t_accountRest,";
            end;

            commandText = commandText
                + "\n" + "        rsb_rep_ac.prevdatin(ac.t_account, ac.t_code_currency, ac.t_chapter) t_accountDpd,"
                + "\n" + "        balance.t_balance                                                         t_accountBalance,"
                + "\n" + "        chapter.t_chapter                                                    t_chapterNumber,"
                + "\n" + "        chapter.t_name                                                       t_chapterName,"
                + "\n" + "        CASE"
                + "\n" + "              WHEN (fi.t_avoirKind = "+AVOIRISSKIND_INVESTMENT_SHARE+")"
                + "\n" + "                  THEN fi.t_sumPrecision"
                + "\n" + "              ELSE NVL2(fi.t_point, fi.t_point + 2, 0)"
                + "\n" + "        END                                                                  t_point,"
                + "\n" + "        ac.t_sort                                                            t_sort"
                + "\n" + "   FROM " + m_accountTableName + " ac,"
                + "\n" +              m_accblncTableName + " acbl,"
                + "\n" +              m_balanceTableName + " balance,"
                + "\n" + "        dobchaptr_dbt chapter,"
                + "\n" + "        dfininstr_dbt fi"
                + "\n" + "  WHERE NOT " + m_parameters.getOcpAccountServer().getAsSqlString("ac")
                + "\n" + "    AND (ac.t_code_currency = fi.t_fiid)"
                + "\n" + "    AND " + m_parameters.getAccountFilter().getAsSqlString("ac")
                + "\n" + "    AND INSTR(ac.t_type_account, cnst.getTA(" + TA_RUB + ")) = 0"
                + "\n" + "    AND INSTR(ac.t_type_account, cnst.getTA(" + TA_MULTIR + ")) = 0"
                /* EVG 27/02/2014 Отключил фильтрацию счетов по типу счёта Н "Непереоцен. счет" (заявка I-00467043).
                + "\n" + "    AND INSTR(ac.t_type_account, cnst.getTA(" + TA_ESTIM + ")) = 0"*/
                + "\n" + "    AND " + balanceFilterClause
                + "\n" + "    AND " + accountFilterClause
                + "\n" + "    AND " + m_currencyFilterClause
                + "\n" + "    AND rsb_rep_ac.chk_datopen(ac.t_Open_Date) = 0"
                + "\n" + "    AND " + closedAccountsFilterClause
                + "\n" + "    AND " + clientFilterClause
                + "\n" + "    AND " + operFilterClause
                + "\n" + "    AND acbl.t_account = ac.t_account"
                + "\n" + "    AND acbl.t_chapter = ac.t_chapter"
                + "\n" + "    AND " + m_currencyConnectClause
                + "\n" + "    AND balance.t_balance = acbl.t_balance" + m_parameters.getPlanNumber()
                + "\n" + "    AND ac.t_chapter = balance.t_chapter"
                + "\n" + "    AND ac.t_chapter = chapter.t_chapter"
                + "\n" + ")"
                + "\n" + "SELECT t_accountNumber                                            t_accountNumber,"
                + "\n" + "       t_accountName                                              t_accountName,"
                + "\n" + "       t_codeCurrency                                             t_codeCurrency,"
                + "\n" + "       CASE"
                + "\n" + "           WHEN t_accountRest < 0"
                + "\n" + "               THEN -t_accountRest"
                + "\n" + "           ELSE 0"
                + "\n" + "       END                                                        t_activeRest,"
                + "\n" + "       CASE"
                + "\n" + "           WHEN t_accountRest >= 0"
                + "\n" + "               THEN t_accountRest"
                + "\n" + "           ELSE 0"
                + "\n" + "       END                                                        t_passiveRest,"
                + "\n" + "       CASE"
                + "\n" + "           WHEN t_accountRestNatCur < 0"
                + "\n" + "               THEN -t_accountRestNatCur"
                + "\n" + "           ELSE 0"
                + "\n" + "       END                                                        t_activeRestNatCur,"
                + "\n" + "       CASE"
                + "\n" + "           WHEN t_accountRestNatCur >= 0"
                + "\n" + "               THEN t_accountRestNatCur"
                + "\n" + "           ELSE 0"
                + "\n" + "       END                                                        t_passiveRestNatCur,"
                + "\n" + "       NULLIF(t_accountdpd," + getSqlDate(date(0, 0, 0)) + ")     t_accountDpd,"
                + "\n" + "       t_accountBalance                                           t_accountBalance,"
                + "\n" + "       t_chapterNumber                                            t_chapterNumber,"
                + "\n" + "       t_chapterName                                              t_chapterName,"
                + "\n" + "       t_point                                                    t_point,"
                + "\n" + "       t_sort                                                     t_sort"
                + "\n" + "  FROM accountData"
                + "\n" + " WHERE " + zeroRestAccountsFilterClause;


                /* EVG 24/02/2014 Сюда добавлена проверка тех. бал счёта, которую я убрал из getBalanceFilterClause() */
                commandText = commandText
                + "\n" + "   AND rsb_rep_ac.chk_blnc_tech( t_accountBalance, t_chapterNumber, " 
                                                         + m_parameters.getPlanNumber() + ", " 
                                                         + ternary(m_isCurrency, 1, 0) + " ) != 0";

            return commandText;

        end;


        local macro constructorTCommandTextMaker(parameters : TParameters)

            m_parameters = parameters;

            m_accountTableName = "";
            m_balanceTableName = "";

            m_accountFieldName  = "";
            m_chapterFieldName  = "";
            m_currencyFieldName = "";

            m_isCurrency = NULL;

            m_currencyConnectClause = "";
            m_currencyFilterClause = "";

        end;


        constructorTCommandTextMaker(parameters);

    end;

    private class (TCommandTextMaker) TCurrencyAccountsCommandTextMaker(parameters : TParameters, currencyId : Integer)

        private var m_currencyId : Integer;


        local macro constructorTCurrencyAccountsCommandTextMaker(parameters : TParameters, currencyId : Integer)

            initTCommandTextMaker(parameters);

            m_accountTableName = "daccount_dbt";
            m_accblncTableName = "daccblnc_dbt";
            m_balanceTableName = "dbalance_dbt";

            m_accountFieldName  = "ac.t_account";
            m_chapterFieldName  = "ac.t_chapter";
            m_currencyFieldName = "ac.t_code_currency";

            m_isCurrency = true;

            m_currencyId = currencyId;

            m_currencyConnectClause = "acbl.t_code_currency = ac.t_code_currency";

            if (m_currencyId == ALLCURRENCY) // только ин.валюта
                m_currencyFilterClause  =  "ac.t_code_currency > 0";
            elif (m_currencyId == ALLFININSTR) // по всем валютам
                m_currencyFilterClause = bool2sql(true);
            else // по конкретной валюте
                m_currencyFilterClause  =  string("ac.t_code_currency = ", m_currencyId);
            end;
        end;


        constructorTCurrencyAccountsCommandTextMaker(parameters, currencyId);

    end;

    macro fillTempTable(tempTable : TTempTable)

        var insertClause = tempTable.getInsertClause();

        tempTable.truncate();

        sql_execute(insertClause + TCurrencyAccountsCommandTextMaker(m_parameters, m_parameters.getCurrencyId()).make());

    end;


    local macro constructorTCalculatorDataSource(parameters : TParameters)

        m_parameters = parameters;

        sql_execute("{ CALL rsb_rep_ac.set_dat(" + getSQLDate(m_parameters.getReportDate()) + ", " + getSQLDate(m_parameters.getReportDate()) + ") }");

    end;


    constructorTCalculatorDataSource(parameters);

end;

/**
*  Источник данных для печати заголовка и подвала таблиц: названия главы, итоги по главе
*/
private class TChaptersDataSource(dataSourceName : String)

    private var m_dataSource : Object;
    private var m_dataSourceName : String;


    private macro make()

        var commandText =          "  SELECT t_chapterNumber                              t_chapterNumber,"
                        + "\n" + "         'Глава '||t_chapterNumber||'. '||t_chapterName t_chapterName"
                        + "\n" + "    FROM " + m_dataSourceName
                        + "\n" + "GROUP BY t_chapterNumber, t_chapterName"
                        + "\n" + "ORDER BY t_chapterNumber";

        m_dataSource = TRsbDataSet(commandText, RSDVAL_CLIENT, RSDVAL_STATIC);

    end;


    macro getDataSource()

        return m_dataSource;

    end;


    macro getRecord()

        return m_dataSource.getRecord();

    end;


    macro getChapterNumber()

        return m_dataSource.chapterNumber;

    end;


    macro isEmpty()

        if (not m_dataSource.next())
            return true;
        end;

        m_dataSource.prev();

        return false;

    end;


    macro next()

        return m_dataSource.next();

    end;


    local macro constructorTChaptersDataSource(dataSourceName)

        m_dataSourceName = dataSourceName;

        make();

    end;


    constructorTChaptersDataSource(dataSourceName);

end;

/**
*  Источник данных для печати заголовка отчета
*/
private class TReportHeaderDataSource(parameters : TParameters)

    private const width = 16386;

    private var bankHeaderBuffer : TArray;

    var bankName;

    var reportName;

    var reportDate;

    var emptyDataMessage;


    macro getDataSource()
        return this;
    end;

    macro getBankHeaderBuffer()
        return bankHeaderBuffer;
    end;

    local macro constructorTReportHeaderDataSource(parameters : TParameters)

        var i;

        /* Название банка */
        bankHeaderBuffer = TArray(50);
        printBankHeaderBuf(parameters.getDepartmentId(), parameters.getOrganizationStructure(), width, bankHeaderBuffer);

        i = 0;
        bankName = "";
        while (i < bankHeaderBuffer.size-1)
            bankName = bankName + trim(bankHeaderBuffer[i]) + "\n";
            i = i + 1;
        end;
        bankName = bankName + trim(bankHeaderBuffer[i]);

        /* Название отчета */
        reportName = "ОСТАТКИ НА ЛИЦЕВЫХ СЧЕТАХ";

        /* Дата отчета */
        reportDate = "на " + string(parameters.getReportDate():f);

        /* Сообщение об отсутствии данных */
        emptyDataMessage = "Нет данных";

    end;


    constructorTReportHeaderDataSource(parameters);

end;

/**
*  Источник данных для печати данных по остаткам
*/
private class TRestsDataSource(chapterNumber : Integer, dataSourceName : String, parameters : TParameters)
    private var m_dataSource : Object;

    private macro make(chapterNumber, dataSourceName, parameters)
        var groupingFields;
        var includeGroup = "0";
        var isOneCurrencyCondition = ternary(parameters.getCurrencyId() >= 0, "(1 = 1)", "(1 = 0)");
        var i = 0;

        groupingFields = "t_chapterNumber, t_accountbalance, t_currency, t_sort, t_accountNumber, t_accountname, t_accountdpd, t_point";

        while (i < parameters.getSort().size)
            if (parameters.getSort()(i) == REP_PATTERNSORT_ACCOUNT)
                groupingFields = "t_chapterNumber, t_accountbalance, t_currency, t_accountNumber, t_accountname, t_sort, t_accountdpd, t_point";
                break;
            end;

            i = i +1;
        end;

        if (parameters.getNeedInCurrency())
            includeGroup = includeGroup + ", 31";
        end;

        includeGroup = includeGroup + ", 63";

        if (parameters.getNeedChapterTotals())
            includeGroup = includeGroup + ", 127";
        end;

        var commandText = "WITH restsData AS"
                + "\n" + "("
                + "\n" + " SELECT *"
                + "\n" + "   FROM " + dataSourceName
                + "\n" + "  WHERE t_chapterNumber = " + chapterNumber
                + "\n" + ")"
                + "\n" + "SELECT"
                + "\n" + "    CASE"
                + "\n" + "        WHEN GROUPING_ID(" + groupingFields + ") = 31"
                + "\n" + "            THEN 'Итого по валюте ' || t_currency"
                + "\n" + "        WHEN GROUPING_ID(" + groupingFields + ") = 63"
                + "\n" + "            THEN 'Итого по б/с ' || t_accountbalance"
                + "\n" + "        WHEN GROUPING_ID(" + groupingFields + ") = 127"
                + "\n" + "            THEN 'Итого по главе '"
                + "\n" + "        ELSE t_accountnumber"
                + "\n" + "    END                                                             t_accountnumber, "
                + "\n" + "    DECODE(GROUPING (t_accountnumber), 1,chr(1),t_currency)         t_currency,"
                + "\n" + "    NVL(t_accountName, chr(1))                                      t_accountName,";
        if (parameters.getNeedInCurrency())
            commandText = commandText
                + "\n" + "    CASE"
                + "\n" + "        WHEN (GROUPING_ID(" + groupingFields + ") IN(63, 127)) "
                + "\n" + "                    AND (t_chapterNumber <> 5 AND NOT " + isOneCurrencyCondition + ")"
                + "\n" + "            THEN null"
                + "\n" + "        ELSE SUM(t_activeRest)"
                + "\n" + "    END                                                             t_activeRest,"
                + "\n" + "    CASE"
                + "\n" + "        WHEN t_chapterNumber = 5"
                + "\n" + "            THEN null"
                + "\n" + "        ELSE SUM(t_activeRestNatCur)"
                + "\n" + "    END                                                             t_activeRestNatCur,"
                + "\n" + "    CASE"
                + "\n" + "        WHEN (GROUPING_ID(" + groupingFields + ") IN(63, 127)) "
                + "\n" + "                    AND (t_chapterNumber <> 5 AND NOT " + isOneCurrencyCondition + ")"
                + "\n" + "            THEN null"
                + "\n" + "        ELSE SUM(t_passiveRest)"
                + "\n" + "    END                                                             t_passiveRest,"
                + "\n" + "    CASE"
                + "\n" + "        WHEN t_chapterNumber = 5"
                + "\n" + "            THEN null"
                + "\n" + "        ELSE SUM(t_passiveRestNatCur)"
                + "\n" + "    END                                                             t_passiveRestNatCur,"
        else
            commandText = commandText
                + "\n" + "    SUM(t_activeRest)                                               t_activeRest,"
                + "\n" + "    0                                                               t_activeRestNatCur,"
                + "\n" + "    SUM(t_passiveRest)                                              t_passiveRest,"
                + "\n" + "    0                                                               t_passiveRestNatCur,"
        end;
        commandText = commandText
                + "\n" + "    NVL2(t_accountDpd, TO_CHAR(t_accountDpd, 'DD.MM.YYYY'), CHR(1)) t_accountDpd,"
                + "\n" + "    NVL(t_point, max(t_point))                                      t_point"
                + "\n" + " FROM restsData"
                + "\n" + "GROUP BY ROLLUP(" + groupingFields + ")"
                + "\n" + "HAVING (GROUPING_ID(" + groupingFields + ") IN (" + includeGroup + "))";

        m_dataSource = TRsbDataSet(commandText);

        m_dataSource.setFieldType("t_accountDpd", V_STRING);

    end;

    /**
    * Для предоставления в RSForms
    */
    macro getDataSource()
        return m_dataSource.stdDataSet;
    end;

    /**
    * Для доступа при текстовой печати
    */
    macro getRsbDataSet()
        return m_dataSource;
    end;

    local macro constructorTRestsDataSource(chapterNumber : Integer, dataSourceName : String, parameters : TParameters)
        make(chapterNumber, dataSourceName, parameters);
    end;

    constructorTRestsDataSource(chapterNumber, dataSourceName, parameters);

end;

/**
*  Контроллер расчета
*/
private class TCalculator()

    private var m_tempTable = TTempTable();


    macro getTempTable()

        return m_tempTable;

    end;


    macro execute(parameters)

        TCalculatorDataSource(parameters).fillTempTable(m_tempTable);

    end;

end;

private class (TControl) TPrintableControl(owner : Object, name : String, binderOwner : Object, binderName : String)

    private var m_binder : Object;


    macro setBinderDataSource(dataSource)

        m_binder.dataSource = dataSource;

    end;


    local macro constructorTPrintableControl(owner : Object, name : String, binderOwner : Object, binderName : String)

        initTControl(owner, name);

        m_binder = TControl(binderOwner, string(owner.name, "\\", name, "\\", binderName));

    end;


    constructorTPrintableControl(owner, name, binderOwner, binderName);

end;

private class (TRollSection) TTemplate(owner : Object, name : Variant)

    private var m_chapterTable : Object;
    private var m_reportHeader : Object;


    macro getChapterTable()
        return m_chapterTable;
    end;


    macro getReportHeader()
        return m_reportHeader;
    end;


    private macro constructorTTemplate(owner : Object, name : Variant)

        initTRollSection(owner, name);

        m_chapterTable = TPrintableControl(this, "chapterTable", owner, "nv:tableHeaderFooterBinder");
        m_reportHeader = TPrintableControl(this, "reportHeader", owner, "nv:reportHeaderBinder");

    end;


    constructorTTemplate(owner, name);

end;
/**
*  Контроллер печати
*/
private class (TRollForm) TPrinter(dataSourceName : String, parameters : TParameters)

    private var m_section1 : Object;
    private var m_template : Object;

    private var m_chaptersDataSource : Object;
    private var m_reportHeaderDataSource : Object;
    private var m_parameters : TParameters;
    private var m_dataSourceName : String;

    macro onLoad()

        var restsDataSource;

        var chapterTable;
        var reportHeader;

        m_template.getReportHeader().setBinderDataSource(m_reportHeaderDataSource.getDataSource());
        reportHeader = TControl(m_template.getReportHeader(), 1);
        m_section1.addControl(reportHeader);

        if (m_chaptersDataSource.isEmpty())
            reportHeader.line("emptyDataMessage").show = true;
        else
            reportHeader.line("emptyDataMessage").show = false;
        end;

        while (m_chaptersDataSource.next())

            m_template.getChapterTable().setBinderDataSource(m_chaptersDataSource.getRecord());
            chapterTable = TControl(m_template.getChapterTable(), 1);
            m_section1.addControl(chapterTable);

            if (m_parameters.getNeedApostrophes())

                chapterTable.line("reportLine").cell("t_activeRest").format  = "'20.2";
                chapterTable.line("reportLine").cell("t_passiveRest").format = "'20.2";

                chapterTable.line("chapterTotals").cell("t_activeRest").format  = "'20.2";
                chapterTable.line("chapterTotals").cell("t_passiveRest").format = "'20.2";

            else

                chapterTable.line("reportLine").cell("t_activeRest").format  = "20.2";
                chapterTable.line("reportLine").cell("t_passiveRest").format = "20.2";

                chapterTable.line("chapterTotals").cell("t_activeRest").format  = "20.2";
                chapterTable.line("chapterTotals").cell("t_passiveRest").format = "20.2";

            end;

            restsDataSource = TRestsDataSource(m_chaptersDataSource.getChapterNumber(), m_dataSourceName);
            chapterTable.line("reportLine").dataSource = restsDataSource.getDataSource();
            chapterTable.line("reportLine").expandRowset();

            if (m_parameters.getNeedChapterTotals())
                chapterTable.line("chapterTotals").show = true;
            else
                chapterTable.line("chapterTotals").show = false;
            end;

        end;

    end;

    macro print()

        doModal();

    end;

    private macro constructorTPrinter(dataSourceName : String, parameters : TParameters)

        var reportHeaderBinder : Object;

        initTRollForm();

        m_parameters     = parameters;
        m_dataSourceName = dataSourceName;

        setTemplate("RepPrnRestStatement.lbr", "P0000001");

        m_template = TTemplate(this, "template");

        m_section1 = TRollSection(this, "section1");

        m_chaptersDataSource = TChaptersDataSource(dataSourceName);

        m_reportHeaderDataSource = TReportHeaderDataSource(m_parameters);

        addHandler(EV_ON_LOAD, r2m(this, "onLoad"));

    end;

    constructorTPrinter(dataSourceName, parameters);

end;

/**
*  Печать отчета в текстовом виде
*/
private class TPrinterTxt(dataSourceName : String, parameters : TParameters)

    private var m_dataSourceName : String;
    private var m_parameters : TParameters;

    private var m_chaptersDataSource : Object;
    private var m_reportHeaderDataSource : Object;
    private var m_restsTable : Object;

    private macro formatValue(val, point, needApostrophes)

        if (valType(val) == V_UNDEF)
            return "";
        end;

        var format = ":0:" + int(point) + ternary(needApostrophes, ":a", "");

        return execExp("string(" + string(val) + format + ")");
    end;

    private macro printReportLine(accountNumber, accountName, activeRest, passiveRest, accountDpd, point)

        if (m_parameters.getNeedApostrophes())
            m_restsTable.printStringTransferByWord(accountNumber, accountName,
                                                    formatValue(activeRest , point, true),
                                                    formatValue(passiveRest, point, true),
                                                    accountDpd);
        else
            m_restsTable.printStringTransferByWord(accountNumber, accountName,
                                                    formatValue(activeRest , point, false),
                                                    formatValue(passiveRest, point, false),
                                                    accountDpd);
        end;

    end;

    private macro printReportLineInNatCur(accountNumber, codeCurrency, accountName, activeRest, activeRestNatCur, passiveRest, passiveRestNatCur, accountDpd, point)
        if (m_parameters.getNeedApostrophes())
            m_restsTable.printStringTransferByWord(accountNumber, codeCurrency, accountName,
                                                   formatValue(activeRest       , point, true),
                                                   formatValue(activeRestNatCur , point, true),
                                                   formatValue(passiveRest      , point, true),
                                                   formatValue(passiveRestNatCur, point, true),
                                                   accountDpd);
        else
            m_restsTable.printStringTransferByWord(accountNumber, codeCurrency, accountName,
                                                   formatValue(activeRest       , point, false),
                                                   formatValue(activeRestNatCur , point, false),
                                                   formatValue(passiveRest      , point, false),
                                                   formatValue(passiveRestNatCur, point, false),
                                                   accountDpd);
        end;
    end;

    private macro printChapter(restsDataSource : Object)

        m_restsTable.printHead("\n" + strAlign( m_chaptersDataSource.getDataSource().chapterName,
                                                m_restsTable.getSumLen(), STR_ALIGN_CENTER ) );
        var firstSeparatorWasSkipped = false;

        while(restsDataSource.next())

            if (firstSeparatorWasSkipped)
                m_restsTable.printSeparator();
            else
                firstSeparatorWasSkipped = true;
            end;

            if (m_parameters.getNeedInCurrency())
                printReportLineInNatCur(
                    restsDataSource.accountNumber,
                    restsDataSource.currency,
                    restsDataSource.accountName,
                    restsDataSource.activeRest,
                    restsDataSource.activeRestNatCur,
                    restsDataSource.passiveRest,
                    restsDataSource.passiveRestNatCur,
                    restsDataSource.accountDpd,
                    restsDataSource.point);
            else
                printReportLine(
                    restsDataSource.accountNumber,
                    restsDataSource.accountName,
                    restsDataSource.activeRest,
                    restsDataSource.passiveRest,
                    restsDataSource.accountDpd,
                    restsDataSource.point);
            end;
        end;

        m_restsTable.printBottom();

    end;

    macro print()

        var output = TOfstream("AccRests.txt");
        output.setOutputFile();

        var restsDataSource : Object;
        var bankHeaderBuffer = m_reportHeaderDataSource.getBankHeaderBuffer();

        var i = 0;
        while(i < bankHeaderBuffer.size)
            printLn(strAlign(trim(bankHeaderBuffer[i]), m_restsTable.getSumLen(), STR_ALIGN_CENTER));
        i = i + 1;
        end;

        printLn();
        printLn( strAlign( m_reportHeaderDataSource.reportName, m_restsTable.getSumLen(), STR_ALIGN_CENTER ));
        printLn( strAlign( m_reportHeaderDataSource.reportDate, m_restsTable.getSumLen(), STR_ALIGN_CENTER ));
        printLn();

        if (m_chaptersDataSource.isEmpty())

            printLn( strAlign( m_reportHeaderDataSource.emptyDataMessage, m_restsTable.getSumLen(), STR_ALIGN_CENTER ) );

        else
            while (m_chaptersDataSource.next())
                restsDataSource = TRestsDataSource(m_chaptersDataSource.getChapterNumber(), m_dataSourceName, m_parameters);
                printChapter(restsDataSource.getRsbDataSet())
            end;

        end;

        output.show;

    end;

    private macro constructorTPrinterTxt(dataSourceName : String, parameters : TParameters)
        m_dataSourceName = dataSourceName;
        m_parameters     = parameters;

        m_chaptersDataSource = TChaptersDataSource(m_dataSourceName);
        m_reportHeaderDataSource = TReportHeaderDataSource(m_parameters);

        m_restsTable = CTableReport();

        if (parameters.getNeedInCurrency())
            m_restsTable.addColumn( "Номер счета", 25, AL_LEFT );
            m_restsTable.addColumn( "Код валюты", 10, AL_CENTER );
            m_restsTable.addColumn( "Название счета", 30, AL_LEFT );
            m_restsTable.addColumn( "Актив", 21, AL_RIGHT );
            m_restsTable.addColumn( "Актив в руб. экв.", 21, AL_RIGHT );
            m_restsTable.addColumn( "Пассив", 21, AL_RIGHT );
            m_restsTable.addColumn( "Пассив в руб. экв.", 21, AL_RIGHT );
            m_restsTable.addColumn( "ДПД", 10, AL_CENTER );
        else
            m_restsTable.addColumn( "Номер счета", 25, AL_LEFT );
            m_restsTable.addColumn( "Название счета", 30, AL_LEFT );
            m_restsTable.addColumn( "Актив", 21, AL_RIGHT );
            m_restsTable.addColumn( "Пассив", 21, AL_RIGHT );
            m_restsTable.addColumn( "ДПД", 10, AL_CENTER );
        end;

    end;

    constructorTPrinterTxt(dataSourceName, parameters);

end;

/**
*  Основная функция
*/
macro produceReport(departmentId          : Integer,
                    organizationStructure : Integer,
                    issueMode             : Integer,
                    planNumber            : Integer,
                    chapterNumber         : Integer,
                    currencyId            : Integer,
                    reportDate            : Date,
                    clientId              : Integer,
                    isGroup               : Bool,
                    operNumber            : Integer,
                    balanceMask           : String,
                    accountMask           : String,
                    needApostrophes       : Bool,
                    needZeroRestAccounts  : Bool,
                    needInCurrency        : Bool,
                    needChapterTotals     : Bool,
                    needClosedAccounts    : Bool,
                    sort                  : TArray
)
    var parameters = TParameters(departmentId, organizationStructure, issueMode, planNumber, chapterNumber, currencyId, reportDate, clientId, isGroup,
                                operNumber, balanceMask, accountMask, needApostrophes, needZeroRestAccounts, needInCurrency, needChapterTotals, needClosedAccounts, sort);

    var calculator = TCalculator();

    var dataSourceName : String;

    begAction(1000, "Расчет");
    calculator.execute(parameters);
    endAction();

    dataSourceName = calculator.getTempTable().getTableName();

    //Выпуск отчета в RSForms
    //TPrinter(dataSourceName, parameters).print();

    // Выпуск отчета в псевдографике
    TPrinterTxt(dataSourceName, parameters).print();

    return true;
end;

/**
* Выпуск отчета с использованием Oracle BI Publisher
* Не поддерживается в дистрибутиве
*/

/**
*  Конвертер данных, временное решение
*/
private class TDataConverter(tempTable : TTempTable)

    private var m_bipTableName;
    private var m_frmTableName;


    macro execute()

        sql_executeCatch("DROP TABLE " + m_bipTableName + " ", "", TABLE_OR_VIEW_DOES_NOT_EXIST);

        sql_execute("CREATE TABLE " + m_bipTableName + " AS SELECT " + sqlGetFieldsString(m_frmTableName) + " FROM " + m_frmTableName);

    end;

    private macro constructorTDataConverter(tempTable : TTempTable)

        m_bipTableName = "daccrests_bip";
        m_frmTableName = tempTable.getTableName();

    end;

    constructorTDataConverter(tempTable);

end;

/**
*  Контроллер печати
*/
private const FORMAT_EXCEL = "1";
private const FORMAT_HTML  = "2";
private const FORMAT_PDF   = "3";
private const FORMAT_RTF   = "4";

private class TPrinterBip(parameters : TParameters)

    private var m_txtFileDir;

    private var m_dataTemplateName;
    private var m_rtfTemplateName;
    private var m_isEmpty;
    private var m_bankName;
    private var m_reportDate;
    private var m_needApostrophes;
    private var m_needChapterTotals;
    private var m_tempDirectoryPath;
    private var m_stationNumber;

    private var m_dsn;
    private var m_uid;
    private var m_pwd;

    private var m_formatsData : TArray;


    private macro createFormatsData()

        m_formatsData = TArray();

        m_formatsData[1] = arrCreate(".xls",  "excel");
        m_formatsData[2] = arrCreate(".html", "iexplore.exe");
        m_formatsData[3] = arrCreate(".pdf",  "AcroRd32");
        m_formatsData[4] = arrCreate(".rtf",  "word");

    end;


    private macro getReportFileExtension(outputFormat : String)

        return m_formatsData[execExp(outputFormat)][0];

    end;


    private macro getReportFileApplication(outputFormat : String)

        return m_formatsData[execExp(outputFormat)][1];

    end;


    macro print(outputFormat : String)

        const DOUBLE_QUOTE = "\"";

        FILE javaLog() txt write;
        FILE javaLogV() txt;

        var parameters;

        var outputFileName = m_txtFileDir + "\\AccountRestStatement" + "_" + m_stationNumber + getReportFileExtension(outputFormat);

        parameters =   "-classpath "
                    + ".\\BIP_RTM\\collections.jar;"
                    + ".\\BIP_RTM\\i18nAPI_v3.jar;"
                    //+ ".\\BIP_RTM\\ojdbc14.jar;"
                    + ".\\BIP_RTM\\versioninfo.jar;"
                    + ".\\BIP_RTM\\xdocore.jar;"
                    + ".\\BIP_RTM\\xmlparserv2-904.jar;"
                    + " AccountRestStatement";

        parameters = parameters + " " + DOUBLE_QUOTE + m_dataTemplateName  + DOUBLE_QUOTE
                                + " " + DOUBLE_QUOTE + m_rtfTemplateName   + DOUBLE_QUOTE
                                + " " + DOUBLE_QUOTE +   outputFormat      + DOUBLE_QUOTE
                                + " " + DOUBLE_QUOTE +   outputFileName    + DOUBLE_QUOTE
                                + " " + DOUBLE_QUOTE + m_tempDirectoryPath + DOUBLE_QUOTE
                                + " " + DOUBLE_QUOTE + m_stationNumber     + DOUBLE_QUOTE

                                + " " + DOUBLE_QUOTE + m_dsn               + DOUBLE_QUOTE
                                + " " + DOUBLE_QUOTE + m_uid               + DOUBLE_QUOTE
                                + " " + DOUBLE_QUOTE + m_pwd               + DOUBLE_QUOTE

                                + " " + DOUBLE_QUOTE + m_isEmpty           + DOUBLE_QUOTE
                                + " " + DOUBLE_QUOTE + toAnsi(m_bankName)  + DOUBLE_QUOTE
                                + " " + DOUBLE_QUOTE + m_reportDate        + DOUBLE_QUOTE
                                + " " + DOUBLE_QUOTE + m_needApostrophes   + DOUBLE_QUOTE
                                + " " + DOUBLE_QUOTE + m_needChapterTotals + DOUBLE_QUOTE;

        open(javaLog, "java_log.txt");
        insert(javaLog, string("-------- ", Date(), " ", Time()));

        //run("C:\\Program Files\\Java\\jdk1.5.0_11\\jre\\bin\\java", parameters, ">>java_log.txt");
        run("java", parameters, ">>java_log.txt");

        close(javaLog);

        open(javaLogV, "java_log.txt");
        viewFile(javaLogV);

        run(getEnv("COMSPEC"), "/c start " + outputFileName);

    end;


    private macro constructorTPrinterBip(parameters : TParameters)

        var dataTemplateDirectory;
        var printTemplateDirectory;
        var emptyReportChecker = TRsbDataSet("SELECT 1 t_isEmpty FROM daccrests_bip WHERE rownum = 1");

        createFormatsData();

        getRegistryValue("BANK_INI\\ОБЩИЕ ПАРАМЕТРЫ\\ДИРЕКТОРИИ\\TEMPLSDIR", V_STRING, printTemplateDirectory);
        getRegistryValue("BANK_INI\\ОБЩИЕ ПАРАМЕТРЫ\\ДИРЕКТОРИИ\\XMLDICDIR", V_STRING, dataTemplateDirectory);

        getRegistryValue("BANK_INI\\ОБЩИЕ ПАРАМЕТРЫ\\ДИРЕКТОРИИ\\WORKDIR", V_STRING, m_tempDirectoryPath);
        m_stationNumber = userNumber();

        getRegistryValue("BANK_INI\\ОБЩИЕ ПАРАМЕТРЫ\\ДИРЕКТОРИИ\\TEXTDIR", V_STRING, m_txtFileDir);

        m_dataTemplateName = findPath("pr_accrests_DataTemplate.xml", dataTemplateDirectory);
        m_rtfTemplateName  = findPath("pr_accrests_PrintTemplate.rtf", printTemplateDirectory);

        m_bankName   = TReportHeaderDataSource(parameters).bankName;
        m_reportDate = string(parameters.getReportDate():f);

        m_needApostrophes   = parameters.getNeedApostrophesAsChar();
        m_needChapterTotals = parameters.getNeedChapterTotalsAsChar();

        m_isEmpty = bool2char(not emptyReportChecker.next());

        m_dsn = rslDefCon.conString;
        m_uid = rslDefCon.user;
        m_pwd = rslDefCon.password;

    end;


    constructorTPrinterBip(parameters);

end;


macro produceReportBip(departmentId : Integer, organizationStructure : Integer, issueMode : Integer,
                       planNumber : TArray, chapterNumber : Integer, currencyId : Integer,
                       reportDate : Date,
                       clientId : Integer,
                       isGroup : Bool, operNumber : Integer,
                       balanceMask : String,
                       needApostrophes : Bool, needZeroRestAccounts : Bool, needInCurrency : Bool, needChapterTotals : Bool, needClosedAccounts : Bool
)
    var parameters = TParameters(departmentId, organizationStructure, issueMode, planNumber, chapterNumber, currencyId, reportDate, clientId, isGroup,
                                operNumber, balanceMask, needApostrophes, needZeroRestAccounts, needInCurrency, needChapterTotals, needClosedAccounts);

    begAction(1000, "Расчет");

    TCalculator().execute(parameters);

    TDataConverter(TTempTable()).execute();

    endAction();

    //TPrinterBip(parameters).print(FORMAT_EXCEL);
    //TPrinterBip(parameters).print(FORMAT_HTML);
    //TPrinterBip(parameters).print(FORMAT_PDF);
    TPrinterBip(parameters).print(FORMAT_RTF);

    return true;

end;

// Раскомментировать для выпуска отчета с помощью Oracle BI Publisher
//replaceMacro("produceReport", "produceReportBip");

onError(error)
exceptionMessage(error);
