// -------------------------------------------------------------------------------------------------
// @filename: cor_acc_report.mac
// @author  : Гурин С.
// @desc    : Отчет по документам картотеки корсчета
// @request : R-628527-2
// @modify  : none
// -------------------------------------------------------------------------------------------------
import RSD, "ldmklbr.mac", "fg_Life_parm.mac", "KeyCodes.mac", globals, activeX, lib_sqltools, RCW, Rsexts;
private var StatusBar = "F2 Выполнить ESC Выход"; 
private var dateBegin, dateEnd, all_cnt, all_sum;
 
private class WorkFile ( cntRecord )

    private var countRecord = cntRecord;
    private var myWorkBook;
    private var myWorkExcel;
    private var myWorkSheet;                   

    /*Определение рабочей директории временных файлов*/
    private macro getWorkDirName() : string
      var DirName:string = "", 
          StrErr :string = "";

      GetRegistryValue( "BANK_INI\\ОБЩИЕ ПАРАМЕТРЫ\\ДИРЕКТОРИИ\\TEXTDIR", V_STRING, DirName, StrErr );        
      if( DirName )     
        if( SubStr(DirName, 1, 1) == "." ) DirName = "$" + GetCurDir(TRUE) + replace (DirName, "..",""); end;     
        if (existFile(DirName))  return DirName;  end;
      end;

      DirName = "$" + GetEnv("TEMP");

      if( NOT DirName ) DirName = "$" + GetEnv("TMP"); end;
      if (existFile(DirName)) return DirName; end;

      msgbox("Ошибка поиска папки для временных файлов на терминале");

      return "";
    end;

    /*Копирование файла на терминал*/
    private macro copyFileToTerminal (Name_file)
      var Templs_Dir_Term = GetWorkDirName();

      var TermFileName = toAnsi(Name_file);
      var SPFileName;

      if ( Templs_Dir_Term == "" )  return "";  end;
      SPFileName = "..\\txtfile\\" + Name_file;

      if (not existFile(SPFileName)) MsgBox(string("Транспортный временный файл не найден: |", SPFileName)); return ""; end;
      if( not CopyFile(SPFileName, Templs_Dir_Term + "\\" + TermFileName) ) RunError("Ошибка при передаче файла на терминал\n" + Templs_Dir_Term + "\\" + TermFileName); end;

      return subStr(Templs_Dir_Term + "\\" + TermFileName, 2);      
    end;

    /*Определение формата загружаемых данных*/
    private macro setTypeColumns();
      var result_arr = TArray(true), i;
 
      for(i, 1, 8)
        var templs_arr = TArray(true);         
        templs_arr(0) = i;                                       
        if (inList(i,1,2,4))
           templs_arr(1) = 1;
        else
           templs_arr(1) = 2;
        end;

        result_arr(i - 1) = templs_arr;
      end; 

      return result_arr;
    end;          

    /*Формирование и открытие файла Excel*/
    private macro openExcel()
      private var objectXls, WorkExcel;

      objectXls = CreateObject ("rsax", "TRsAxServer", string("RsAxServer", UserNumber()), IsStandAlone());
      WorkExcel = objectXls.CreateComObject ("Excel.Application"); 

      myWorkExcel = WorkExcel;

      return true;

    OnError(er) 
      return false;
    end;

    /*Заполнение заголовков столбцов, формирование сетки таблицы*/
    private macro setHeaderExcelTable()
      var i; 
      myWorkBook.Sheets(1);
      myWorkSheet = myWorkBook.ActiveSheet();

      myWorkSheet.Cells(1, 1).Value  = "№ п/п";
      myWorkSheet.Cells(1, 2).Value  = "№ документа";
      myWorkSheet.Cells(1, 3).Value  = "Дата документа";
      myWorkSheet.Cells(1, 4).Value  = "Сумма п/п";
      myWorkSheet.Cells(1, 5).Value  = "Дебет счета";
      myWorkSheet.Cells(1, 6).Value  = "Наименование плательщика";
      myWorkSheet.Cells(1, 7).Value  = "Кредит счета";
      myWorkSheet.Cells(1, 8).Value  = "Дата изъятия с картотеки";

     
      for (i, 1, 8)
        myWorkSheet.Cells(1, i).HorizontalAlignment = 3;
        myWorkSheet.Cells(1, i).Font.Bold = true; 
        myWorkSheet.Columns(i).EntireColumn.AutoFit;
      end; 

      myWorkSheet.Range("A1:H" + (countRecord + 1)).Borders.Weight = 2;  
      myWorkSheet.Range("A1:H1").Interior.Color = #B5B5B5;

      myWorkSheet.Cells((countRecord + 2),"A").Value = all_cnt;
      myWorkSheet.Cells((countRecord + 2),"D").Value = all_sum;
      myWorkSheet.Cells((countRecord + 2),"D").NumberFormat = "###0.00"; 
                                                                                                 	
      return true;

     OnError
       return false;
     end;     

     macro createExcelReport( fileNameReport )
       var fileNameRep = copyFileToTerminal( fileNameReport );

       if ( fileNameRep == "" or (not openExcel()) )
         RunError("Ошибка формирования файла");
       end;

       myWorkExcel.Workbooks.OpenText (fileNameRep, 866, 1, 1, 2, false, false, false, false, false, true, ";", setTypeColumns(), 1, "."," ", true, false);
       myWorkBook = myWorkExcel.Workbooks.Application;

       setHeaderExcelTable();
         
       myWorkExcel.Visible = true;
     end;
end;

private class Report( dateB, dateE )
    private var dateBegin = dateB;
    private var dateEnd   = dateE;
    private var recordTable;
    private var fileNameReport = "reportDocInARM" + date();
    private var countRecord = 0;
    private var separator = ";";     

    private macro printExeption( error )
      msgBox(error.Message);
    end;     

    private macro getRsb()
      startQueryCapture ();
      [
         SELECT   ROW_NUMBER () OVER (ORDER BY TRN_OUT.T_ACCOUNT_PAYER) cnt,
                  rm.t_number num,
                  TO_CHAR (RM.T_DATE, 'dd.mm.yyyy') pdate,
                  paym.T_AMOUNT amount,
                  TRN_OUT.T_ACCOUNT_PAYER pacc,
                  RM.T_PAYERNAME pname,
                  TRN_OUT.T_ACCOUNT_RECEIVER racc,
                  TO_CHAR (TRN_OUT.t_date_carry, 'dd.mm.yyyy') datewithdrawal,
                  COUNT (1) OVER (PARTITION BY NULL) all_cnt,
                  SUM (paym.T_AMOUNT) OVER (PARTITION BY NULL) all_sum
           FROM   dpmpaym_dbt paym,
                  dpmrmprop_dbt rm,
                  dpmdocs_dbt docs_in,
                  dacctrn_dbt trn_in,
                  dpmdocs_dbt docs_out,
                  dacctrn_dbt trn_out
            WHERE       PAYM.T_PAYMENTID = RM.T_PAYMENTID
                  AND PAYM.T_PAYMENTID = DOCS_IN.T_PAYMENTID
                  AND DOCS_IN.T_ACCTRNID = TRN_IN.T_ACCTRNID
                  AND SUBSTR (TRN_IN.T_ACCOUNT_RECEIVER, 1, 5) = '47418'
                  AND PAYM.T_PAYMENTID = DOCS_OUT.T_PAYMENTID
                  AND DOCS_OUT.T_ACCTRNID = TRN_OUT.T_ACCTRNID
                  AND SUBSTR (TRN_OUT.T_ACCOUNT_PAYER, 1, 5) = '47418'
                  AND TRN_IN.T_DATE_CARRY BETWEEN :BegDate AND :EndDate
       ORDER BY   pacc
      ];

      var cmd = RsdCommand (endQueryCapture ());
      cmd.AddParam("BegDate", RSDBP_IN, dateBegin);
      cmd.AddParam("EndDate", RSDBP_IN, dateEnd);

      recordTable = RsdREcordset(cmd);

      return true;

    onError( e )
       printExeption ( e );
       return false;
    end;    

    private macro setToFile()      
       setoutput("..\\txtfile\\" + fileNameReport); 

       println(separator);
        
       while ( recordTable.moveNext() )
         var text = "", i;

         for (i, 1, 8) text = text + recordTable.value(i - 1) + separator; end;
         println(text);

         countRecord = countRecord + 1;
         useprogress(countRecord);
       end;
       all_cnt = recordTable.value("all_cnt");
       all_sum = recordTable.value("all_sum");
       setoutput(null, true);       

    end;

    macro createReport()
      initProgress(-1, "", "Ожидайте, формируется выборка");
      getRsb();                                             
      remProgress;

      initProgress(-1, "", "Ожидайте, формируется отчет");
      setToFile();      

      var excelFile = WorkFile( countRecord );  
      excelFile.createExcelReport( fileNameReport );    

      remProgress;     
    end; 
end;

if (ВвестиПериодДат (dateBegin, dateEnd))
    Report(dateBegin, dateEnd).createReport();    
end;


