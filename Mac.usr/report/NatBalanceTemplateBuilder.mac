/**
 * RS-Bank 6.0                                            R-Style Software Lab
 *
 * File Name   : NatBalanceTemplateBuilder.mac
 * Description : Класс шаблона печати отчета "Баланс"
 * Comment     : 
 * @since      : 28.05.2010
 * @author     : Shestakov Dmitry
 * @version    : 6.00.020.30
 */
//28.05.2014 I-00488713-2 DPN Выровнял печать итогов


import TemplateBuilder;
import lib_arr;
import repException;

/**
 * Класс, печати шаблона таблицы.
 */
class (TTemplateBuilder)TNatBalanceTemplateBuilder(resultFileName : String)

    var m_reportWidth;
    /**
     * Создание структуры таблицы.
     */
    private macro createCompositeTableField() /*: TCompositeTableField*/
        throw(TPureVirtualMethodCallException("TBalanceTemplate::createCompositeTableField"));
    end;
    
    /**
     * Печать шаблона глав таблицы отчета в файл шаблона.
     */
    private macro printChapterHeader(kindAccount)
        println();
        println("<FORM:HeaderChapter" + NVL(kindAccount, "") + ">");
        println("<!--titleChapter:c:w-->" + mkStr("#", m_reportWidth));
        println("</FORM>");
        println();
    end;
    
    /**
     * Печать шаблона шапки отчета в файл шаблона.
     */
    private macro printTableHeader(kindAccount)
        var header = m_compositeTableField.getReportHeader();
        var i = 0;
        println("<FORM:Header" + NVL(kindAccount, "") + ">");
        while(i < header.size)
            println(header[i]);
            i = i + 1;
        end;   
        
        m_reportWidth = strlen(header[1]);
        println("</FORM>");
    end;
    
    /**
     * Печать шаблона содержательной части отчета в файл шаблона.
     */
    private macro printTableRow(kindAccount)
        println();
        println("<FORM:Row" + NVL(kindAccount, "") + ">");
        println(m_compositeTableField.getReportString());
        println("</FORM>");
        println();
    end;
    
    /**
     * Печать шаблона части по СПОДу отчета в файл шаблона.
     */
    private macro printTableRowSpod(kindAccount)
        var changeFields = TArray();
        var reportString : string;

        changeFields(0) = arrCreate("balance",          "В том числе СПОД");
        changeFields(1) = arrCreate("inActiveRest",     "");
        changeFields(2) = arrCreate("inPassiveRest",    "");
        changeFields(3) = arrCreate("outActiveRest",    "");
        changeFields(4) = arrCreate("outPassiveRest",   "");
 
        println();
        println("<FORM:RowSpod" + NVL(kindAccount, "") + ">");
        if (natBalanceParameters().getIsPrintSpod())
            reportString = m_compositeTableField.getChangeReportString(changeFields);
            reportString = strSubst(reportString, "debet",  "debetSpod");
            reportString = strSubst(reportString, "credit", "creditSpod");
            println(reportString);
        end;
        println("</FORM>");
    end;

    /**
     * Печать шаблона конца таблицы отчета в файл шаблона.
     */
//  private macro printTableEnd() //printTableEnd
//      var changeFields = TArray();
//      changeFields(0) = arrCreate("balance",          "Итого:");
//      println();
//      println("<FORM:End>");
//      println(m_compositeTableField.getChangeReportString(changeFields));
//      println("</FORM>");
//  end;

    /**
     * Печать шаблона раздела в файл шаблона.
     */
    private macro printIssue(kindAccount)
        var changeFields = TArray();
        changeFields(0) = arrCreate("balance", "Итого по разделу              ");  //28.05.2014 I-00488713-2 DPN Выровнял печать итогов
        println();
        println("<FORM:HeaderIssue" + NVL(kindAccount, "") + ">");
        println("Раздел <!-- part:r -->#. <!-- partName:r -->#");
        println("</FORM>");
        println();
        println("<FORM:EndIssue" + NVL(kindAccount, "") + ">");
        println(m_compositeTableField.getChangeReportString(changeFields));
        println("</FORM>");
        println();
    end; 

    /**
     * Печать шаблона итога по главе в файл шаблона.
     */
    private macro printChapterEnd(kindAccount)
        var changeFields = TArray();
        changeFields(0) = arrCreate("balance", "Итого " + NVL(kindAccount, "") + ":" + mkStr(" ", 13 - strlen(kindAccount)));

        println();
        println("<FORM:EndChapter" + NVL(kindAccount, "") + ">");
        println(" " + mkStr("-", m_reportWidth - 1));
        println(m_compositeTableField.getChangeReportString(changeFields));
        println("</FORM>");
        println();
    end; 

    /**
     * Создание результирующего файла шаблона.
     */
    macro createResultFile(kindAccount) : string
        var oldOutput = setOutput(m_resultFileName,  true);
        printTableHeader(kindAccount);
        printChapterHeader(kindAccount);
        printTableRow(kindAccount);
        printTableRowSpod(kindAccount);
        printIssue(kindAccount);
        printChapterEnd(kindAccount);
//        printTableEnd();
        setOutput(oldOutput,   false);

        return m_resultFileName;
    end;

    /**
     *  Получение названия валюты пересчета
     */
//  private macro getNatCurrencyName()
//      var natCurName = "";
//      var dataSet = TRsbDataSet("SELECT t_name_currency name FROM dcurrency_dbt WHERE t_code_currency = 0");
//      if (dataSet.next())
//          natCurName = dataSet.name;
//      end;
//      return natCurName;
//  end;

    /**
     * Описание полей заголовка.
     */
    private var balanceHeader      = TTableHeaderField("Балансовый счет",     20, STR_ALIGN_CENTER);
    private var balanceNameHeader  = TTableHeaderField("Название счета",      20, STR_ALIGN_CENTER);
    private var inRestHeader       = TTableHeaderField("Входящий остаток",  null, STR_ALIGN_CENTER);
    private var outRestHeader      = TTableHeaderField("Исходящий остаток", null, STR_ALIGN_CENTER);
    private var activeHeader       = TTableHeaderField("Актив",             null, STR_ALIGN_CENTER);
    private var passiveHeader      = TTableHeaderField("Пассив",            null, STR_ALIGN_CENTER);
    private var activeUpHeader     = TTableHeaderField("АКТИВ",             null, STR_ALIGN_CENTER);
    private var passiveUpHeader    = TTableHeaderField("ПАССИВ",            null, STR_ALIGN_CENTER);
    private var debetHeader        = TTableHeaderField("Дебет",             null, STR_ALIGN_CENTER);
    private var creditHeader       = TTableHeaderField("Кредит",            null, STR_ALIGN_CENTER);

    /**
     * Описание полей таблицы.
     */
    private var balanceData        = TTableDataField("balance",      5, "l");
    private var balanceNameData    = TTableDataField("balanceName", 65, "l");

    private macro tableData(fieldDataSourceName, width)
        return  TTableDataField(fieldDataSourceName, width, "r")
    end;

    macro constructor(resultFileName : String)
        initTTemplateBuilder(resultFileName);
    end;

    /**
     * Получение максимальных значений сумм. (необходимо для установления ширины колонки, см. SCR 179768)
     */
    private macro getMaxSumValue():Object

        var p =  "";
        var th = ""; 

        if (natBalanceParameters().getMoneyDimension() == RCB_CALCULATE_BALANCE_BU_THOUSEND_SM)
            p  = "l";
            th = "th";
        else
            p  = "d";
        end;

        var queryMax = "SELECT "
        "\n" + "       MAX (inActiveRest)   maxInActiveRest,   "
        "\n" + "       MAX (inPassiveRest)  maxInPassiveRest,  "
        "\n" + "       MAX (debet)          maxDebet,          "
        "\n" + "       MAX (credit)         maxCredit,         "
        "\n" + "       MAX (outActiveRest)  maxOutActiveRest,  "
        "\n" + "       MAX (outPassiveRest) maxOutPassiveRest, "
        "\n" + "       MAX (debetSpod)      maxDebetSpod,      "
        "\n" + "       MAX (creditSpod)     maxCreditSpod      "
        "\n" + "    FROM ";

        var query = "( SELECT "
        "\n" + "       SUM (blrept.t_"+p+"minactive"+th+"r)    inActiveRest,   "
        "\n" + "       SUM (blrept.t_"+p+"minpassive"+th+"r)   inPassiveRest,  "
        "\n" + "       SUM (blrept.t_"+p+"mdebet"+th+"r)       debet,          "
        "\n" + "       SUM (blrept.t_"+p+"mcredit"+th+"r)      credit,         "
        "\n" + "       SUM (blrept.t_"+p+"moutactive"+th+"r)   outActiveRest,  "
        "\n" + "       SUM (blrept.t_"+p+"moutpassive"+th+"r)  outPassiveRest, "
        "\n" + "       SUM (blrept.t_"+p+"mfinaldebet"+th+"r)  debetSpod,      "
        "\n" + "       SUM (blrept.t_"+p+"mfinalcredit"+th+"r) creditSpod      "
        "\n" + "    FROM dblrept_tmp blrept ) "; 

        var data = TRsbDataSet(queryMax + query);
        return data;
    end;

    private var m_fieldWidth = getMaxSumValue();
    m_fieldWidth.next();

    private var inActiveRestWidth = strlen(string(m_fieldWidth.maxInActiveRest));
    private var inPassiveRestWidth = strlen(string(m_fieldWidth.maxInPassiveRest));
    private var debetWidth = strlen(string(m_fieldWidth.maxDebet));
    private var creditWidth = strlen(string(m_fieldWidth.maxCredit));
    private var outActiveRestWidth = strlen(string(m_fieldWidth.maxOutActiveRest));
    private var outPassiveRestWidth = strlen(string(m_fieldWidth.maxOutPassiveRest));

    constructor(resultFileName);
end;


/**
 * Баланс оборотов.
 */
class (TNatBalanceTemplateBuilder)TTurnBalanceTemplate()
    /**
     * Создание структуры таблицы.
     */
    private macro createCompositeTableField() /*: TCompositeTableField*/
        var compositeTableField;
        m_compositeTableField = TCompositeTableField();

        m_compositeTableField.addField(balanceHeader, balanceData);

        compositeTableField = m_compositeTableField.addField(inRestHeader);
            compositeTableField.addField(activeHeader, tableData("inActiveRest", inActiveRestWidth + inActiveRestWidth / 3)); // делим на 3 потому что апострофом отделяется 3 знака
            compositeTableField.addField(passiveHeader, tableData("inPassiveRest", inPassiveRestWidth + inPassiveRestWidth / 3));
     
        m_compositeTableField.addField(debetHeader, tableData("debet", debetWidth + debetWidth / 3));
        m_compositeTableField.addField(creditHeader, tableData("credit", creditWidth + creditWidth / 3));

        compositeTableField = m_compositeTableField.addField(outRestHeader);
            compositeTableField.addField(activeHeader, tableData("outActiveRest", outActiveRestWidth + outActiveRestWidth / 3));
            compositeTableField.addField(passiveHeader, tableData("outPassiveRest", outPassiveRestWidth + outPassiveRestWidth / 3));
    end;

    initTNatBalanceTemplateBuilder();
end;


/**
 * Баланс оборотов без входящего остатка.
 */
class (TNatBalanceTemplateBuilder)TNotInRestTurnBalanceTemplate()
    /**
     * Создание структуры таблицы.
     */
    private macro createCompositeTableField() /*: TCompositeTableField*/
        var compositeTableField;
        m_compositeTableField = TCompositeTableField();

        m_compositeTableField.addField(balanceHeader, balanceData);

        m_compositeTableField.addField(debetHeader, tableData("debet", debetWidth + debetWidth / 3));
        m_compositeTableField.addField(creditHeader, tableData("credit", creditWidth + creditWidth / 3));
     
        compositeTableField = m_compositeTableField.addField(outRestHeader);
            compositeTableField.addField(activeHeader, tableData("outActiveRest", outActiveRestWidth + outActiveRestWidth / 3));
            compositeTableField.addField(passiveHeader, tableData("outPassiveRest", outPassiveRestWidth + outPassiveRestWidth / 3));
    end;

    initTNatBalanceTemplateBuilder();
end;

/**
 * Баланс остатков.
 */
class (TNatBalanceTemplateBuilder)TRestBalanceTemplate()
    /**
     * Создание структуры таблицы.
     */
    private macro createCompositeTableField() /*: TCompositeTableField*/
        var compositeTableField;
        m_compositeTableField = TCompositeTableField();

        m_compositeTableField.addField(balanceHeader, balanceData);

        compositeTableField = m_compositeTableField.addField(outRestHeader);
            compositeTableField.addField(activeHeader, tableData("outActiveRest", outActiveRestWidth + outActiveRestWidth / 3));
            compositeTableField.addField(passiveHeader, tableData("outPassiveRest", outPassiveRestWidth + outPassiveRestWidth / 3));
    end;

    initTNatBalanceTemplateBuilder();
end;


/**
 * Баланс остатков с названиями б/с(актив).
 */
class (TNatBalanceTemplateBuilder)TActiveNameRestBalanceTemplate()

    /**
     * Создание структуры таблицы.
     */
    private macro createCompositeTableField() /*: TCompositeTableField*/
        var compositeTableField;
        m_compositeTableField = TCompositeTableField();

        m_compositeTableField.addField(balanceNameHeader, balanceNameData);

        m_compositeTableField.addField(balanceHeader, balanceData);

        m_compositeTableField.addField(activeUpHeader, tableData("outActiveRest", outActiveRestWidth + outActiveRestWidth / 3));
    end;

    initTNatBalanceTemplateBuilder();
end;

/**
 * Баланс остатков с названиями б/с(пассив).
 */
class (TNatBalanceTemplateBuilder)TPassiveNameRestBalanceTemplate()

    /**
     * Создание структуры таблицы.
     */
    private macro createCompositeTableField() /*: TCompositeTableField*/
        var compositeTableField;
        m_compositeTableField = TCompositeTableField();

        m_compositeTableField.addField(balanceNameHeader, balanceNameData);

        m_compositeTableField.addField(balanceHeader, balanceData);

        m_compositeTableField.addField(passiveUpHeader, tableData("outPassiveRest", outPassiveRestWidth + outPassiveRestWidth / 3));
    end;

    initTNatBalanceTemplateBuilder();
end;