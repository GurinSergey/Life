import lib_str;
import rep_lib;

/**
 * Строковое представления заголовка и методы для его формирования
 */
private class TStringalizedHeader(width)
    private var m_width : Integer;
    private var m_data : TArray;

    macro getWidth()

        /* EVG 31/12/2013 Блин, это очень неправильно, но при перекрёстной инициализации объектов
           класса TStringalizedHeader() при переходе от колонки 2-го уровня к 1-му у системы сносит мозг
           и она теряет 2 символа :( Пока пускай так. */
        if( m_width == 107 )
           return 109;
        end;

        return m_width;
    end;

    macro getHeight()
        return m_data.size;
    end;

    macro asTArray()
        return m_data;
    end;

    macro getLine(row : Integer, column : Integer, width : Integer)
        defaultParm(column, 0);
        defaultParm(width, strlen(m_data.value(row)));

        return substr(m_data.value(row), column+1, width);
    end;

    macro setLine(line : String, row : Integer, column : Integer)
        var temp : String;
        if (row < m_data.size)
            temp = strRpad(m_data.value(row), strlen(line), " ");
            strset(temp, nvl(column, 0) + 1, line);
            m_data.value(row) = temp;
        end;
    end;

    macro addLine(line : String)
        m_data.value(m_data.size) = strRpad(line, getWidth(), " ");
    end;

    macro addInnerLine(text : String)
        addLine("|" + strAlign(nvl(text, " "), getWidth()-2, STR_ALIGN_CENTER) + "|");
    end;

    macro addTopBorder()
        addLine("*" + mkstr("-", getWidth()-2) + "*");
    end;

    macro addBottomBorder()
        var line = getLine(getHeight()-1);
        var i = 1;
        while (i <= strlen(line))
            if (not in(substr(line, i, 1), "|", "*"))
                strset(line, i, "-");
            end;
            i = i + 1;
        end;
        line = strsubst(line, "|", "*");
        addLine(line);
    end;

    macro addRight(header : TStringalizedHeader, shift : Integer)
        defaultParm(shift, -1);
//debugbreak;

        if (header == null)
            return;
        end;

        var width = header.getWidth();
        var height = header.getHeight();
        var line : String;
        var i : Integer;
        var absShift : Integer = abs(shift);

        if (height > getHeight())
            line = getLine(getHeight()-1);
            i = 1;
            while (i <= strlen(line))
                if (not in(substr(line, i, 1), "|", "*"))
                    strset(line, i, " ");
                end;
                i = i + 1;
            end;
            i = getHeight();
            while (i < height)
                addLine(line);
                i = i + 1;
            end;
        elif (height < getHeight())
            line = header.getLine(height-1);
            i = 1;
            while (i <= strlen(line))
                if (not in(substr(line, i, 1), "|", "*"))
                    strset(line, i, " ");
                end;
                i = i + 1;
            end;
            i = height;
            while (i < getHeight())
                header.addLine(line);
                i = i + 1;
            end;
        end;
        i = 0;
        while (i < getHeight())
            if (shift < 0)
                if (substr(getLine(i), getWidth(), 1) == "*")
                    line = getLine(i) + substr(header.getLine(i), absShift+1);
                else
                    line = substr(getLine(i), 1, getWidth() - absShift) + header.getLine(i);
                end;
            else
                line = getLine(i) + substr(header.getLine(i), absShift+1);
            end;
            setLine(line, i);

            i = i + 1;
        end;
        m_width = strlen(getLine(0));
    end;

    macro addBottom(header : TStringalizedHeader, shift : Integer)
        defaultParm(shift, -1);

        if (header == null)
            return;
        end;

        var width = header.getWidth();
        var height = header.getHeight();
        var line : String;
        var i : Integer;

        i = 0;
        while (i < height)
            addLine(header.getLine(i));
            i = i + 1;
        end;
    end;

    macro toPseudoGraphics()
        var i : Integer;
        var j : Integer;
        var line : String;

        var linePrev : String;
        var lineNext : String;
        var idx : Integer;
        var shift : Integer;

        line = getLine(0);
        strset(line, 1, "┌");
        strset(line, strlen(line), "┐");
        line = strsubst(line, "-", "─");
        line = strsubst(line, "*", "┬");
        line = strsubst(line, "|", "│");
        setLine(line, 0);

        i = 1;
        while (i < getHeight()-1)
            linePrev = getLine(i-1);
            line = getLine(i);
            lineNext = getLine(i+1);
            j = 0;
            shift = 1;
            while (j < strlen(line))
                idx = index(substr(line, shift), "-*-");
                if (idx == 0)
                    break;
                end;

                shift = shift + idx;

                if (in(substr(linePrev, shift, 1), "│", "|") and in(substr(lineNext, shift, 1), "│", "|"))
                    strset(line, shift, "┼")
                end;

                j = j + 1;
            end;

            line = strsubst(line, "-*-", "─┬─");
            line = strsubst(line, "*-", "├─");
            line = strsubst(line, "-*", "─┤");
            line = strsubst(line, "-", "─");
            line = strsubst(line, "|", "│");
            setLine(line, i);

            i = i + 1;
        end;

        line = getLine(getHeight()-1);
        strset(line, 1, "├");
        strset(line, strlen(line), "┤");
        line = strsubst(line, "-", "─");
        line = strsubst(line, "*", "┼");
        line = strsubst(line, "|", "│");
        setLine(line, getHeight()-1);
    end;

    private macro constructor(width)
        var i : Integer;

        m_data = TArray();
        m_width = width;
    end;

    constructor(width);
end;

/********************************************************************************************************/
/**
 * Поле таблицы данных.
 */
class TTableDataField(fieldDataSourceName, fieldWidth, fieldFormat, fieldIsCaption)
    var dataSourceName : String  = fieldDataSourceName;
    var width          : Integer = fieldWidth;
    var format         : String  = nvl(fieldFormat, "");
    var isCaption      : Bool    = nvl(fieldIsCaption, false);
end;
/********************************************************************************************************/
/**
 * Поле заголовка.
 */
class TTableHeaderField(fieldText, fieldWidth, fieldFormat)
    var text   : String  = fieldText;
    var width  : Integer = nvl(fieldWidth,  0);
    var format : Integer = nvl(fieldFormat, STR_ALIGN_CENTER);
end;
/********************************************************************************************************/
/**
 * Поле таблицы.
 */
class TTableField(fieldText, fieldWidth : Integer, fieldFormat : String)
    /**
     * Описание поля заголовка.
     */
    private var  m_tableHeaderField : TTableHeaderField;
    /**
     * Описание поля таблицы.
     */
    private var  m_tableDataField : TTableDataField;

    macro getTableDataField()
        return m_tableDataField;
    end;

    macro getTableHeaderField()
        return m_tableHeaderField;
    end;

    macro setTableHeaderField(tableHeaderField)
        m_tableHeaderField = tableHeaderField;
    end;

    macro setTableDataField(fieldDataSourceName, fieldWidth : Integer, fieldFormat : String, fieldIsCaption : Bool)
        if (valtype(fieldDataSourceName) == V_STRING)
            m_tableDataField = TTableDataField(fieldDataSourceName, fieldWidth, fieldFormat, fieldIsCaption);
        else
            m_tableDataField = fieldDataSourceName;
        end;
    end;

    /**
     * Конструктор.
     */
    macro constructor(fieldText, fieldWidth, fieldFormat, fieldIsCaption)
        if (valtype(fieldText) == V_STRING)
            m_tableHeaderField = TTableHeaderField(fieldText, fieldWidth, fieldFormat);
        else
            m_tableHeaderField = fieldText;
        end;
        m_tableDataField = NULL;
    end;

    constructor(fieldText, fieldWidth, fieldFormat);
end;
/********************************************************************************************************/
/**
 *
 */
class TCompositeTableField()

    /**
     * ID поля.
     */
    private var fieldId : Integer;

    /**
     * Уровень поля
     */
    private var m_level : Integer;

    /**
     * Описатель поля заголовка таблицы.
     */
    private var m_tableField : TTableField;

    /**
     * Колонки таблицы - массив с названиями полей ИД для строк таблицы, шириной поля вывода, выравниванием в поле вывода.
     */
    private var m_dataColumns : TArray;

    /**
     * Массив TCompositeTableField.
     */
    private var m_compositeField = TArray();/*TCompositeTableField;*/

    macro getTableField()
        return m_tableField;
    end;

    macro setTableField(tableField)
        m_tableField = tableField;
        m_dataColumns = null;
    end;

    macro setLevel(level)
        m_level = level;

        for (var i, m_compositeField)
            i.setLevel(level+1);
        end;
    end;

    macro getCompositeField()
        return m_compositeField;
    end;

    /**
     * Добавить поле(три вида параметров)
     * Первые два варианта добавляют простое поле. Третий вариант добавляет составное поле
     * @param     headerText   : String
     * @param     headerWidth
     * @param     headerFormat : Integer
     * @param     fieldName
     * @param     fieldHandle
     *
     * @param     headerText   : TTableHeaderField
     * @param     headerWidth : TTableDataField
     *
     * @param     headerText   : TCompositeTableField
     */
    macro addField(headerText, headerWidth, headerFormat : String, fieldName : String, fieldWidth : Integer, fieldFormat : String) : TCompositeTableField
        var i = m_compositeField.size();

        m_compositeField[i] = TCompositeTableField();

        if (valtype(headerText) == V_STRING)
            m_compositeField[i].setTableField(TTableField(headerText, headerWidth, headerFormat));
            if (fieldName != NULL)
                m_compositeField[i].getTableField.setTableDataField(fieldName, fieldWidth, fieldFormat);
            end;
        elif (isEqClass("TTableHeaderField", headerText))
            m_compositeField[i].setTableField(TTableField(headerText));/*это TTableHeaderField*/
            if (headerWidth != NULL)
                m_compositeField[i].getTableField().setTableDataField(headerWidth);/*это TTableDataField*/
            end;
        elif (isEqClass("TCompositeTableField", headerText))
            m_compositeField[i] = headerText;
        else
            msgbox("Ошибка в TCompositeTableField::addField");
        end;

        m_compositeField[i].setLevel(m_level+1);

        m_dataColumns = null;

        return (m_compositeField[i]);
    end;

    /**
     * Получить ширину составного поля.
     */
    macro getWidth() : Integer
        var sizeField = m_compositeField.size();
        var i = 0;
        var width = 0;
        if (sizeField != 0)
            while (i < sizeField)
                width = width + m_compositeField[i].getWidth();
                i = i + 1;
            end;
            width = width + 1;
        else
            if ((m_tableField.getTableDataField() != null) and (m_tableField.getTableDataField().width != null))
                width = max(m_tableField.getTableDataField().width, m_tableField.getTableHeaderField().width);
            else
                width = m_tableField.getTableHeaderField().width;
            end;
        end;
        return width;
    end;

    /**
     * Получить колонки таблицы
     * Возвращает массив с данными о колонках заголовка и колонках таблицы.
     */
    macro getColumns() : Object
        var columns = TArray();

        if (m_compositeField.size != 0)
            for (var i, m_compositeField)
                columns = arrAdd(columns, i.getColumns());
            end;
        else
            columns(columns.size) = getTableField();
        end;

        return columns;
    end;

    /**
     * Получить колонки таблицы
     * Возвращает массив с названиями полей ИД для строк таблицы, шириной поля вывода, выравниванием в поле вывода.
     */
    macro getDataColumns() : Object
        if (m_dataColumns == null)

            m_dataColumns = TArray();

            if (m_compositeField.size != 0)
                for (var i, m_compositeField)
                    m_dataColumns = arrAdd(m_dataColumns, i.getDataColumns());
                end;
            else
                m_dataColumns.value(m_dataColumns.size) = getTableField().getTableDataField();
            end;

        end;

        return m_dataColumns;
    end;

    /**
     * Получить количество столбцов отчета.
     */
    macro getColumnCount() : Integer
        var sizeField = m_compositeField.size();
        var i = 0;
        var count = 0;
        if (sizeField != 0)
            while (i < sizeField)
                count = count + m_compositeField[i].getColumnCount();
                i = i + 1;
            end;
        else
            count = 1;
        end;
        return count;
    end;

    /**
     * Получить строку отчета поля.
     */
    macro getReportString() : String
        var sizeField = m_compositeField.size();
        var i = 0;
        var reportString = "";
        var temp = "";
        if (sizeField != 0)
            while (i < sizeField)
                reportString = reportString + m_compositeField[i].getReportString();
                i = i + 1;
            end;
        else
            if (not m_tableField.getTableDataField().isCaption)
                temp = " <!--"+ m_tableField.getTableDataField().dataSourceName+
                       ":"    + m_tableField.getTableDataField().format +"-->";

                reportString = strAlign(temp + strLpad("", m_tableField.getTableDataField().width, "#"),
                                        getWidth+strlen(temp),
                                        1);
            else
                reportString = strAlign(" " + m_tableField.getTableDataField().dataSourceName,
                                        m_tableField.getTableDataField().width+1,
                                        STR_ALIGN_LEFT
                                       );
            end;
        end;
        return reportString;
    end;

    /**
     * Получить данные измененной строки отчета
     */
    macro getChangedDataRow(changeFields : TArray) : TCompositeTableField
        var compositeField;
        var tempTableField;
        var data;
        var isCaption;

        if (m_compositeField.size() != 0)
            compositeField = TCompositeTableField();
            compositeField.setTableField(this.getTableField());
            for (var i, m_compositeField)
                compositeField.addField(i.getChangedDataRow(changeFields));
            end;
        else
            tempTableField = TTableField();
            tempTableField.setTableHeaderField(this.getTableField().getTableHeaderField());
            tempTableField.setTableDataField(this.getTableField().getTableDataField());

            compositeField = TCompositeTableField();
            compositeField.setTableField(tempTableField);

            for (var field, changeFields)
                if (strlwr(tempTableField.getTableDataField().dataSourceName) == strlwr(field(0)))
                    if (substr(field(1), 1, 1) == "&")
                        data = substr(field(1), 2);
                        isCaption = false;
                    else
                        data = field(1);
                        isCaption = true;
                    end;

                    tempTableField.setTableDataField(data,
                                                     tempTableField.getTableDataField().width,
                                                     tempTableField.getTableDataField().format,
                                                     isCaption
                                                    );
                    compositeField.setTableField(tempTableField);
                end;
            end;
        end;

        return compositeField;
    end;

    /**
     * Получить измененную строку отчета поля.
     * nameField, newFieldHandler
     */
    macro getChangeReportString(changeFields: TArray) : String
        return this.getChangedDataRow(changeFields).getReportString();
    end;

    macro getHeaderColumn() : TStringalizedHeader
        var header = TStringalizedHeader(getWidth()+2);
        var subHeader : TStringalizedHeader;
        var rowCaption : TArray;
        var i;
//debugbreak;

        if (m_level > 0)
            header.addTopBorder();
            rowCaption = strcut(m_tableField.getTableHeaderField().text, "|");
            for (i, rowCaption)
                header.addInnerLine(i);
            end;
        end;

        i = 0;
        while (i < m_compositeField.size)
            if (i == 0)
                subHeader = m_compositeField.value(i).getHeaderColumn();
            else
                subHeader.addRight(m_compositeField.value(i).getHeaderColumn());
            end;
            i = i + 1;
        end;

        if (subHeader != null)
            header.addBottom(subHeader, -subHeader.getHeight());
        end;

        if (m_level == 0)
            header.addBottomBorder();
        end;

        return header;
    end;

    /**
     * Получить шапку отчета.
     */
    macro getReportHeader() : TArray
        var header = getHeaderColumn();

        header.toPseudoGraphics();

        return header.asTArray();
    end;

    private macro constructor()
        setTableField(TTableField("ROOT", 0, "c"));
        m_level = 0;
        m_dataColumns = null;
    end;

    constructor();
end;