/**********************************************************************/
/* ОТЧЕТ О ПРИКРЕПЛЕНИИ КАРТОЧЕК С ОБРАЗЦАМИ ПОДПИСЕЙ ПО КЛИЕНТАМ РКО */
/*                                                                    */
/* Дунаев Аркадий                                                     */
/* Начато 12.01.2012                                                  */
/*                                                                    */
/* С-4630, C-7875                                                     */
/* R-65369-2                                                          */
/**********************************************************************/

import bankinter, RsbDataSet;
import "fastexcel.mac";

const TEXTDIR_REESTR		= "BANK_INI\\ОБЩИЕ ПАРАМЕТРЫ\\ДИРЕКТОРИИ\\TEXTDIR";

var nameTS;
var TextSQL, rs, col1, col2;
var ob, ex, Fulloutput, output = "Карточки с образцами подписей.xls";
var obBook, obSheet;
var tempFileName:string = "", tempFileNameBezPuti:string ="";
private var dd:date, tt:time, ii:integer, ss:string;  // это переменные для использования FileInfo
FILE wf () txt write;
//var namewf:string="CardSignature.txt";

macro InputDep();
record dpdep(dp_dep);
  if (ListDepartment (dpdep))
    nameTS = "and TS.T_NAME = '"+dpdep.name+"' ";
  else
    if (getTrue(False,"Анализировать все подразделения?"))
      nameTS = " ";
    else
      exit(1);
    end;
  end;
end;

macro OpenExcel(output);
var out;
   ob = CFastExcel(False);
   GetRegistryValue("BANK_INI\\ОБЩИЕ ПАРАМЕТРЫ\\ДИРЕКТОРИИ\\USERTEMPLSDIR",2,out);
   Fulloutput = FindPath(output,out);
   if (not Fulloutput)
      msgbox("Не найден шаблон");
      exit();
   end;
   obBook = ob.Open(Fulloutput);
   obSheet = obBook.ActiveSheet(); 	
end;

macro ReadSubjRKO(rs);
var TextSQL = "SELECT DISTINCT LPAD (SUB.T_PARTYID, 10, '0') AS IDFORIM, "+
	      "       SUB.T_PARTYID, "+
	      "       SUBSTR (COD.T_CODE, LENGTH (COD.T_CODE) - 4) AS CODCL, "+
	      "       SUB.T_NAME, "+
	      "       TS.T_NAME AS TSCOD, "+
	      "       RKO.T_OPER "+
	      "  FROM dclient_dbt rko, "+
	      "       dparty_dbt sub, "+
	      "       ddp_dep_dbt ts, "+
	      "       dobjcode_dbt cod "+
	      " WHERE     RKO.T_SERVICEKIND = 3 "+
	      "       AND RKO.T_PARTYID = SUB.T_PARTYID "+
	      "       AND TS.T_CODE IN ( "+
	      "                         SELECT a.t_branch "+
	      "                           FROM daccount_dbt a "+
	      "                          WHERE a.t_chapter = 1 "+
             "                            AND a.t_open_close <> 'З' "+
	      "                            AND a.t_client = rko.t_partyid "+
	      "                            AND a.t_type_account LIKE '%Ч%') "+
	      "       AND COD.T_CODEKIND = 1 "+
	      "       AND COD.T_STATE = 0 "+
	      "       AND COD.T_OBJECTID = RKO.T_PARTYID "+nameTS+
	      " ORDER BY TS.T_NAME, sub.t_name ";

  rs = TRsbDataSet(TextSQL);
  if (rs == NULL)
    exit(1);
  else
    if (SetParm(0,rs) == FALSE)
      exit(1);
    end;
  end;
end;

macro CountAccount_Subj(partyid):integer;
var TextSQL1 = "SELECT COUNT (*) AS COUACC "+
	        "  FROM dimgdata_dbt im "+
	        " WHERE     IM.T_OBJECTTYPE = 4 "+
	        "       AND IM.T_OBJECTID IN (SELECT '010000000' || ACC.T_ACCOUNT AS CODACC "+
	        "                               FROM daccount_dbt acc "+
               "                              WHERE ACC.t_open_close <> 'З' "+
	        "                                AND ACC.T_CLIENT = "+PARTYID+")";
var rs = TRsbDataSet(TextSQL1);
  if (rs.MoveNext)
    if (rs.COUACC > 0)
      return  round(rs.COUACC,0); 
    else
      return 0; 
    end;
  else
    return 0;
  end;
end;

macro CountSubj_Subj(partyid):integer;
var TextSQL1 = "SELECT COUNT (*) AS COUSUB "+
	        "  FROM dimgdata_dbt im "+
	        " WHERE IM.T_OBJECTTYPE = 3 AND IM.T_OBJECTID = "+rs.IDFORIM;
var rs = TRsbDataSet(TextSQL1);
  if (rs.MoveNext)
    if (rs.COUSUB > 0)
      return  round(rs.COUSUB,0);
    else
      return 0; 
    end;
  else
    return 0; 
  end;
end;

macro HeadLine();

  wf.str = "ОТЧЕТ О ПРИКРЕПЛЕНИИ КАРТОЧЕК С ОБРАЗЦАМИ ПОДПИСЕЙ ПО КЛИЕНТАМ РКО на "+{curdate}; insert(wf);
  wf.str = ""; insert(wf);
  wf.str = "Код клиента|Наименование клиента|Карточка на счете|Карточка в РКО|Код ТС|Операционист по клиенту|Операционисты по счетам"; insert(wf);

  /*
  obSheet.Cells(1,1).Value="ОТЧЕТ О ПРИКРЕПЛЕНИИ КАРТОЧЕК С ОБРАЗЦАМИ ПОДПИСЕЙ ПО КЛИЕНТАМ РКО на "+{curdate};
  */

  /*
  [ОТЧЕТ О ПРИКРЕПЛЕНИИ КАРТОЧЕК С ОБРАЗЦАМИ ПОДПИСЕЙ ПО КЛИЕНТАМ РКО на ##########                                                   ]({curdate});
  [                                                                                                                                   ];
  [────────┬────────────────────────────────────────────────────────────────────────────┬──────────┬──────────┬────────┬──────────────];
  [ Код    │ Наименование клиента                                                       │ Карточка │ Карточка │ Код ТС │ Операционист ];
  [ клиента│                                                                            │ на счете │ в РКО    │        │              ];
  [────────┼────────────────────────────────────────────────────────────────────────────┼──────────┼──────────┼────────┼──────────────];
  */

end;

macro OperFromAccount(partyid):string;
var TextSQL1 = "SELECT acc.t_oper "+
               "  FROM daccount_dbt acc "+
               " WHERE acc.t_chapter = 1 "+
               "   AND acc.t_open_close <> 'З' "+
               "   AND acc.t_type_account LIKE '%Ч%' "+
               "   AND acc.t_client = "+PARTYID;
//TAM 29.04.2014 I-00483245-2
/*               " UNION "+
               "SELECT acc.t_oper "+
               "  FROM daccount$_dbt acc "+
               " WHERE acc.t_chapter = 1 "+
               "   AND acc.t_open_close <> 'З' "+
               "   AND acc.t_type_account LIKE '%Ч%' "+
               "   AND acc.t_client = "+PARTYID;*/
var rs = TRsbDataSet(TextSQL1);
var str:string = "";
var first = True;
  while (rs.MoveNext)
    if(first)
      str = rs.t_oper;
      first = false;
    else
      str = str + "," + rs.t_oper;
    end;
  end;
  return str;
end;

macro AnalizSubjRKO(rs);
var ln = 4;
var col;
  InitProgress(-1,"","Идет анализ клиентов РКО");
  while (rs.MoveNext)
    col = CountAccount_Subj(rs.t_partyid);
    if (col > 0)
      col1 = "есть-"+col;
    else
      col1 = "нет";
    end;
    col = CountSubj_Subj(rs.IDFORIM);
    if (col > 0)
      col2 = "есть-"+col;
    else
      col2 = "нет";
    end;

    wf.str = rs.CODCL+"|"+rs.T_NAME+"|"+col1+"|"+col2+"|"+rs.TSCOD+"|"+rs.T_OPER+"|"+OperFromAccount(rs.t_partyid); insert(wf);

    /*
    obSheet.Cells(ln,1).Value=rs.CODCL;
    obSheet.Cells(ln,2).Value=rs.T_NAME;
    obSheet.Cells(ln,3).Value=col1;
    obSheet.Cells(ln,4).Value=col2;
    obSheet.Cells(ln,5).Value=rs.TSCOD;
    obSheet.Cells(ln,6).Value=rs.T_OPER;
    */

    /*
    [ #####  │ ########################################################################## │ #######  │ #######  │ ###    │ #####        ]
    (rs.CODCL,rs.T_NAME,col1,col2,rs.TSCOD,rs.T_OPER);
    */

    ln = ln + 1;
    UseProgress(ln-4);
  end;
  RemProgress();
end;

macro chekReestrRead(m_name:string, m_status:integer, m_err:integer)
	if ((m_status == V_UNDEF) or (m_err != 0))
    	msgbox("Ошибка получения значения настройки реестра " + m_name + " \n Процедура GetRegistryValue вернула код ошибки "+m_err);
   		exit(0);
	end;
end;

macro dayString(m_reestrName:string):string
private var m_errCode :integer = NULL;
private var m_statusGetRegistry :integer = NULL;
private var m_zna4enie          :string  = NULL;
	if (m_reestrName == "")
		msgbox("При чтении реестра не задана строка реестра");
		exit(0)
	end;
	m_statusGetRegistry=GetRegistryValue(m_reestrName, V_STRING, m_zna4enie, m_errCode);
	chekReestrRead(m_reestrName, m_statusGetRegistry, m_errCode);
	return(m_zna4enie);
end;

macro createUniqueFile(BeginName)
private var ff:string = BeginName+{oper}+"_"+date+"_"+time;
private var file_ext:string = ".txt";
	tempFileName = dayString(TEXTDIR_REESTR);
	tempFileName = tempFileName + "\\" + ff;
	tempFileNameBezPuti = ff;
	tempFileName = StrSubst ( tempFileName, ".", "_" );
	tempFileName = StrSubst ( tempFileName, ":", "_" );
	tempFileName = StrSubst ( tempFileName, " ", "_" );
	tempFileName = tempFileName + file_ext;
	tempFileNameBezPuti = StrSubst ( tempFileNameBezPuti, ".", "_" );
	tempFileNameBezPuti = StrSubst ( tempFileNameBezPuti, ":", "_" );
	tempFileNameBezPuti = StrSubst ( tempFileNameBezPuti, " ", "_" );
	tempFileNameBezPuti = tempFileNameBezPuti + file_ext;
	if (substr(tempFileName,1,2) == "__")
		tempFileName=".."+substr(tempFileName,3)
	end;
end;

macro copyTempFileToMe()
private var m_path: string = "";
	m_path = "$c:\\rspar\\" + tempFileNameBezPuti;
	if (not CopyFile(tempFileNameBezPuti, m_path, TRUE))
		println ("НЕ СМОГ скопировать файл с сервера приложений на терминал. \n исходный файл: "+tempFileNameBezPuti+" \n файл назначения: " + m_path);
              exit(0);
	else 
		println ("УСПЕШНО скопирован файл с сервера приложений на терминал. \n исходный файл: "+tempFileNameBezPuti+" \n файл назначения: " + m_path);
		if (not removeFile(tempFileName))
			println("Не смог удалить файл "+tempFileName+" с сервера приложений. ничего сташного, продолжаем работу.");
		else
			println("УСПЕШНО удален файл "+tempFileName+" с сервера приложений.");
		end;
	end;
end;

macro SetTypeColumns(aw:tarray);
var w1=tarray(true);
var w2=tarray(true);
var w3=tarray(true); 
var w4=tarray(true); 
var w5=tarray(true);
var w6=tarray(true); 
var w7=tarray(true); 

   w1(0)=1; w1(1)=2; //формат столбца - General
   w2(0)=2; w2(1)=1; //формат столбца - General
   w3(0)=3; w3(1)=1; //формат столбца - General
   w4(0)=4; w4(1)=1; //формат столбца - General
   w5(0)=5; w5(1)=1; //формат столбца - General
   w6(0)=6; w6(1)=2; //формат столбца - General  
   w7(0)=7; w7(1)=2; //формат столбца - General  
  
   aw(0)=w1;
   aw(1)=w2;
   aw(2)=w3;
   aw(3)=w4;
   aw(4)=w5;
   aw(5)=w6;
   aw(6)=w7;
end;

macro FinalLine();

  close(wf);
  //CopyFile(namewf, "$c:\\rspar\\"+namewf, TRUE);

  copyTempFileToMe();

  ex.visible=false;
  println("Excel version "+ex.version+";  DefaultPath = "+ex.DefaultFilePath+"; CurDir = "+GetCurDir(true));
  ss = "";
  GetFileInfo("$"+tempFileNameBezPuti,dd,tt,ii,@ss);
  println(ss);

  if (not(GetFileInfo("$c:\\rspar\\"+tempFileNameBezPuti,@dd,@tt,@ii,@ss))); //ss- то что надо. полный путь абсолютный локальный
    println("не мог найти на локальном диске файл "+tempFileNameBezPuti+"          \n останавливаюсь");
    exit(0);
  end;
  ss = substr(ss,2); // откусили первый знак бакса


   var aw=tarray(true); 
   SetTypeColumns(aw);
                     
   //obBook = ex.Workbooks.open("c:\\rspar\\"+namewf,0,false,false,6,"","",false,866,"|",false,false,false);
   obBook = ex.Workbooks.opentext (ss, 866, 1, 1,2,false,false,false,false,false,true,"|",aw,1,"."," ",true,false);
                                /*
                                  (Filename	- Имя файла,
                                   Origin		- Кодировка,
                                   StartRow	- Номер строки, с которого начинается разбор текста,
                                   DataType	- Формат данных в файле. Может быть одним из следующих констант: xlDelimited = 1 (с разделителем) или xlFixedWidth = 2 (по ширине). 
                                                   Если этот аргумент не указан, Microsoft Excel пытается определить формат столбца при открытии файла,
                                   TextQualifier	- Задает текст классификатора,    
                                   ConsecutiveDelimiter	- Последовательные разделители считаются одним разделителем (True - считать),
                                   Tab		- Символ табуляции считать разделителем ( True - считать, DataType должен быть xlDelimited ),
                                   Semicolon	- Точку с запятой считать разделителем ( True - считать, DataType должен быть xlDelimited ),
                                   Comma		- Запятую считать разделителем ( True - считать, DataType должен быть xlDelimited ),
                                   Space		- Пробел считать разделителем ( True - считать, DataType должен быть xlDelimited ),
                                   Other		- Заданный символ считать разделителем ( True - считать, DataType должен быть xlDelimited ),
                                   OtherChar	- Определяет символ-разделитель ( Other дожно быть True ). 
                                                   Если указан более чем один символ, только первый символ строки используется, а остальные символы игнорируются.,
                                   FieldInfo	- Массив, содержащий информацию для разбора отдельных столбцов данных (типы данных по столбцам). 
                                                   Интерпретация зависит от значения DataType. 
                                                   Когда данные с разделителями, этот аргумент является массивом из двух элементов массива, 
                                                   при этом каждый из двух элементов массива указает параметры преобразования для конкретного столбца. 
                                                   Первый элемент является номером столбца, а второй элемент является одним из значений XlColumnDataType, 
                                                   определяющей как столбец обрабатывается.
                                                   Перечень возможных значений второго элемента для разных типов данных:
                                                   Константа		Значение	Тип данных 
                                                   xlDMYFormat		4		DMY date format. 
                                                   xlDYMFormat		7		DYM date format. 
                                                   xlEMDFormat		10		EMD date format. 
                                                   xlGeneralFormat	1		General. 
                                                   xlMDYFormat		3		MDY date format. 
                                                   xlMYDFormat		6		MYD date format. 
                                                   xlSkipColumn	9		Column is not parsed. 
                                                   xlTextFormat	2		Text. 
                                                   xlYDMFormat		8		YDM date format. 
                                                   xlYMDFormat		5		YMD date format. 
                                   TextVisualLayout	- Визуальная разметка текста,
                                   DecimalSeparator	- Разделитель, что Microsoft Excel использует при распознавании десятичных чисел. По умолчанию настройки системы,
                                   ThousandsSeparator	- Разделитель тысяч, что Excel использует при распознавании чисел. По умолчанию настройки системы,
                                   TrailingMinusNumbers	- Если цифры с минусом в конце, должны рассматриваться как отрицательные числа - True. 
                                                          Если False или опущен, цифры с минусом в конце рассматриваются как текст,
                                   Local		- Если региональные настройки машины должны быть использованы для сепараторов, цифры и форматирования данных - True
                                */

  /*
  ob.Show;
  */

  /*
  [────────┴────────────────────────────────────────────────────────────────────────────┴──────────┴──────────┴────────┴──────────────];
  */

end;

macro FormatExcel();
private var sel_range;

  obSheet = ex.Sheets(1);
  obSheet.Cells.Font.Name = "Arial";
  obSheet.Cells.Font.Size = 10;
  obSheet.Columns("A:A").ColumnWidth = 18.43;
  obSheet.Columns("B:B").ColumnWidth = 55.14;
  obSheet.Columns("C:C").ColumnWidth = 12.57;
  obSheet.Columns("D:D").ColumnWidth = 12.57;
  obSheet.Columns("E:E").ColumnWidth = 8.43;
  obSheet.Columns("F:F").ColumnWidth = 15.43;
  obSheet.Columns("G:G").ColumnWidth = 15.43;
  sel_range = obSheet.Range("A3:G3");          
  sel_range.HorizontalAlignment = -4108;//xlCenter;
  sel_range.VerticalAlignment = -4108;//xlCenter;
  sel_range.WrapText = True;
  sel_range.Font.Bold = True;//FontStyle = "полужирный";
  sel_range = obSheet.Range("A1:G1");
  sel_range.HorizontalAlignment = -4131;//xlLeft;
  sel_range.VerticalAlignment = -4108;//xlCenter;
  sel_range.MergeCells = True;
  sel_range.Font.Bold = True;//FontStyle = "полужирный";
  obSheet.Range("A4").Select;
  ex.ActiveWindow.FreezePanes = True;
  //ex.Range("WorkbookName").Value = "Карточки с образцами подписей.xls";
  //ex.ActiveWorkbook.Name = "Карточки с образцами подписей.xls";
  //ex.ActiveWorkbook.FullName = ex.ActiveWorkbook.Path + "\Карточки с образцами подписей.xls";// + ex.ActiveWorkbook.Name;
  
  if (not removeFile("$"+ex.DefaultFilePath+"\\"+output))
    println("Не смог удалить файл "+ex.DefaultFilePath+"\\"+output+" с локального диска. Ничего сташного, продолжаем работу.");
  else
    println("УСПЕШНО удален файл "+ex.DefaultFilePath+"\\"+output+" с локального диска.");
  end;
  ex.ActiveWorkbook.SaveAs(output,-4143); 
  if (not removeFile("$c:\\rspar\\"+tempFileNameBezPuti))
    println("Не смог удалить файл "+"c:\\rspar\\"+tempFileNameBezPuti+" с локального диска. Ничего сташного, продолжаем работу.");
  else
    println("УСПЕШНО удален файл "+"c:\\rspar\\"+tempFileNameBezPuti+" с локального диска.");
  end;
  ex.visible = true;

end;

macro ReturnStart();
var wb;
  ob = CreateObject ("rsax","TRsAxServer","RsAxServer",IsStandAlone());
  ex = ob.CreateComObject ("Excel.Application", True);
  for (wb,ex.workbooks)
    if(wb.name == output)
       msgbox("Файл и именем "+output+" открыт. \nСохраните его с другим именем и закройте. \nПри открытом файле продолжение выпуска отчета невозможно.");
       exit(0);
    end;
  end;
  if (GetFileInfo("$"+ex.DefaultFilePath+"\\"+output)); 
    if (not GetTrue(True,"На локальном диске есть файл "+ex.DefaultFilePath+"\\"+output+" \n Продолжение, заменит имеющиеся в нем данные на новые. \nПродолжить?"))
      exit(0);
    end;
  end;

end;

macro main();
  ReturnStart();
  InputDep();
  //OpenExcel(output);
  createUniqueFile("CardSignature__");
  Open (wf,tempFileName);
  HeadLine();
  ReadSubjRKO(rs);
  AnalizSubjRKO(rs);
  FinalLine();
  FormatExcel();
end;
println("ПРОТОКОЛ ОТЧЕТА: \n");
main();
exit(1);