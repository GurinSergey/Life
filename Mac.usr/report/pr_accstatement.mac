/*──────────────────────────────────────────────────────────────────────────┐
  RS-Bank 6.0                                           R-Style Software Lab

  File Name   : pr_accstatement.mac                         January 10, 2006
  Programmer  : ABP
  Description : Выписки и справки по лицевым счетам
  Comment     : 
  Modify      : 04.10.2007 Malakhova SCR 110424 - Историзация кодов субъектов
              : 24.03.2008 Ivkina    SCR 119536 - Обработка проводок комиссий
              : 26.12.2011 Gurin     I-00133396 - Добавил определение 
                                                        формата поля
              : 01.02.2012 Glushin   I-00148568 - Убрал выведение лишних строк
                в расширенной текстовой форме
              : 06.02.2012 Glushin   R-36747-2 - Переписал расширенную выписку
                с учетом валюты эквивалента
              : 28.02.2012 Glushin   R-36747-4 - Увеличены размеры поля БИК 
                                                 и Наименование
              : 12.03.2012 vihrov I-00163737-2 не влезает наименование
              : 15.03.2012 LAO  Оптимизирован запрос makeMainQuery с проводками
              : 17.05.2012 KS I-00172012
              : 21.05.2012 KS I-00164496
              : 29.05.2012 vihrov  I-00200089-2
              : 01.06.2012 vihrov Tr-00275155
              : 27.06.2012 vihrov I-00192814-2 новую категорию добавил "все приложения = 7"
              : 23.07.2012 vihrov I-00219224-2
              : 18.09.2012 GSP по   I-00227451-2 убрал проверку валюты при 
                 просмотре категорий отказа от печати выписки
              : 07.11.2012    AAN  причесал малость макрос  
              : 30.01.2013  Бардак у вас тут, "причесал" нормально шапку с комментариями, Дима С, иногда и в шапке ставь комментарии
                Добавил хинт для запроса, а то он слетает на FullScan  LAO
              : 14.02.2013 AAN  I-00325927-2 проверка на содержимое строки была не коррктно сделано, из-за этого основание платежа не печаталось
              : 21.02.2013 AAN  I-00329228-2 тоже проверка строки, только когда в Ексель печатаем
              : 28.01.2013 AAN  C-16016 - теперь в примечании 7 на л\с храниться история наименований счёта, и выписка
                                          берёт название счёта оттуда, с учётом даты на которую было актуально назв. л\с
              : 28.02.2013 LAO добавил хинт + NO_PARALLEL   для запроса                             
              : 14.03.2013 Sokolov C-17499-6 Опимизировал вывод отчетов на основании предложений пользователей
              : 27.03.2013 AAN  R-171143-2   поправил функцию возвращающую названия счёта
              : 23.04.2013 AAN  I-00361027-2 
              : 21.05.2013 AAN  C-20028-6 по зявке от Карноуховой - печатать приложения с происхождением FineReader, если на счёте 
                                не стоит польз-й тип Ё (интернет-банк)
              : 05.07.2013 AAN  I-00394329-3   поправил БИК для обычной, расширенной и расширенной в Ексель
              : 24.07.2013 AAN  C-22055  создал спец. вид выписка для ЦБ по заявке от Журавлёвой, в нём проверяется кореспондирующий л/с,
                                если на нём польз. тип "Ю" то заменяем кор. л/с и основание из платежа на данные из проводки
              : 06.11.2013 AAN  I-00440422-2 У некоторых платежей основание пустое, из-за этого в Excel-выписки попадал Undefined, поборол это)))

              : 17.01.2014 EVG  Переход на 2031
              :  5.05.2014 EVG  Убрал жесткое ограничение признака "Эквивалент в нац. валюте" в зависимости от формы выписки. Колонка с эквивалентом
                                зависит только от того, поставил ли пользователь признак в панели или нет.
                                Значительно переработана печать заголовка и подвала выписка для корректного отображения информации по эквиваленту.
                 6.06.2014 EVG  Убрал вывод документов переоценки и курсовых разниц ( вызов makeSpecialDocumentQuery() ), а также добавил фильтр в
                                основную выборку проводок:
                                "   AND document.t_sum_payer > 0 and document.t_sum_receiver > 0 and document.t_sum_natcur > 0 "
                                для отсечения документов по счетам ОВП и КР, сконвертированных из 2030.
                 7.06.2014 EVG  Дорботана функция получения данных из проводки GetCorrectCbCorrespondingAccount(): если счёт, указанный в проводке,
                                является корсчётом (301*), в отчёт он не берётся, а оставляется счёт из платежа. Корсчета больше не должны попадать
                                в отчёт.
                 8.06.2014 EVG  Убрал форматирование номера корреспондирующего счёта (точки) по просьбе Елены Шевцовой.
              : 13.05.2014 DPN I-00486083-2 Убрал сообщение о запрете печати
              : 02.06.2014 I-00491864-2 DPN
              : 10.06.2014 R-389439-2 DPN Не правильно выводилась сумма эквивалента в расширенной выписке
              : 17.06.2014 EVG По просьбе Елены Шевцовой (для проверялок) сделал возможность вывода документов переоценки, если не установлен 
                               соответствующий флажок исключения.
              : 18.06.2014 SDA убрал инициализирующие ESC-последовательности для Солидарности (Салтаев Антон)
              : 25.06.2014 R-400772-2 dpn Жалуются, что не попадают проводки к\р
              : 04.07.2014 I-00499358-2 DPN - Появлялся минус в ИД банка
              : 17.10.2014 R-475355-2 DPN - дата последней проводки должна сравниваться с датой начала периода
              : 29.10.2014 I-00527546-2 DPN - Если нет проводок раньше даты начала периода выписки вместо пробела в графе "дата посл. опер" - будет сообщение об этом
              : 05.11.2014 I-00529106-2 DPN - убрал инициализирующие ESC-последовательности для ЭВ
              : 11.11.2014 I-00530514-2 DPN - Если не задана маска и б\с - отбираются только клиентские счета (только в ВУЗ, в остальных банках - все счета попадают в отчет)
              : 12.11.2014 R-491856-2 DPN - Если в номере ИНН\КПП отсутствовал символ "\", то ИНН не возвращался, а должен
              : 25.11.2014 R-487982 DPN - Для формата Excel была наглухо запрещена печать переоценки. Теперь зависит от флага
              : 26.03.2015 I-00558107 DPN Печатались лишние квадратики на каждой странице выписки
              : 25.05.2015 R-584964, I-00568416, R-585127 VDN Убрал печать пустой выписки
└───────────────────────────────────────────────────────────────────────────*/
import Reporting, ReportInter, Календарь, FIInter, PTInter, CTInter, 
       PaymInter, OprInter, CurrInter, BankInter, WordIntf, lib_const;//, VBAconst;
import cb_sql, globals, lib_str, lib_lang, lib_arr,  rsexts;
import treport;
import acv;
import RsbObjFactory;
import ofstream;
import rep_lib;

import or_rep_h;
import CompositeTableField;

import repcache;

import param;

import testLib;

//Тихомиров. Параметры и импорт
import "fg_Life_parm.mac";//Sokolov C-17499-6 для определения наименования банка
import "pr_accstate.mac";
import lib_account;         // 24.07.2013 AAN  C-22055 макрос либ Олега, берут от туда с RSL_Account
import rcw;


private array exl, k;
private var dprts, curr, mon, rate, cmd_sql, rsd, accountmasksql,data, datoper, s, pg, tab, exst, f=0, j, flag, ex, ob, out;
var outputxa="pr_accstatea.xls",outputxa_2007="pr_accstatea_2007.xlsx";  // 01.06.2012 vihrov Tr-00275155 новые шаблоны
var outputxas="pr_accstateas.xls",outputxas_2007="pr_accstateas_2007.xlsx";
var outputx="pr_accstate.xls",outputx_2007="pr_accstate_2007.xlsx";
var outputxs="pr_accstates.xls",outputxs_2007="pr_accstates_2007.xlsx";
private var fulloutput, obBook, obsheet, str;
private var Fulloutputl, outl, outputl="accstate.lbr", acct, sqltab, info, rsdacc, cmdacc, accflag, flagprn, textname, docnum = 0, doctxt = 1, doctt= 1, flagpril, docsaccount, cmd8, rsd8;                    
var print_once, need_print, LD, WordApp, WordDoc, RegParam:string="", temppath, Templ, outputw="pr_accstate.dot";
var tbl, row, first_page, count_all_docs, sum_all_d, sum_all_k, sum_all_out; //str
var noPageBreaks = False;
var Front = false, OvConnection;
GetRegistryValue("BANK_INI\\ОБЩИЕ ПАРАМЕТРЫ\\ДИРЕКТОРИИ\\LBRDIR",2,outl);
Fulloutputl = FindPath(outputl, outl);
private var dlg = TRecHandler("accstate", fulloutputl, TRUE); 

private var Flag_AccState_CB = false;       // 24.07.2013 AAN  C-22055 флаг спецвыписки для ЦБ
private var Flag_acc_is_carry = false;      // 24.07.2013 AAN  C-22055 флаг подмены кореспондирующего л\с из док-та на л\с из провода

// KS 19.04.2011 Объединю выписку разных банков в один макрос
var PRINT_BIC,PRINT_CASH,PRINT_CORRACC,PRINT_ONLY_CLIENTBANK,PRINT_OPER_ACC,PRINT_OVERDRAFT,PRINT_SEPARATOR,REPLACE_DOCKINDS,SOURCE_OF_NAME;
GetRegistryValue("PRBB\\REPORT\\ACCSTATEMENT\\PRINT_BIC",V_BOOL,PRINT_BIC,err);//
GetRegistryValue("PRBB\\REPORT\\ACCSTATEMENT\\PRINT_CASH",V_BOOL,PRINT_CASH,err);//
GetRegistryValue("PRBB\\REPORT\\ACCSTATEMENT\\PRINT_CORRACC",V_BOOL,PRINT_CORRACC,err);//
GetRegistryValue("PRBB\\REPORT\\ACCSTATEMENT\\PRINT_ONLY_CLIENTBANK",V_BOOL,PRINT_ONLY_CLIENTBANK,err);//
GetRegistryValue("PRBB\\REPORT\\ACCSTATEMENT\\PRINT_OPER_ACC",V_BOOL,PRINT_OPER_ACC,err);//
GetRegistryValue("PRBB\\REPORT\\ACCSTATEMENT\\PRINT_OVERDRAFT",V_BOOL,PRINT_OVERDRAFT,err);//
GetRegistryValue("PRBB\\REPORT\\ACCSTATEMENT\\PRINT_SEPARATOR",V_BOOL,PRINT_SEPARATOR,err);//
GetRegistryValue("PRBB\\REPORT\\ACCSTATEMENT\\REPLACE_DOCKINDS",V_STRING,REPLACE_DOCKINDS,err);
GetRegistryValue("PRBB\\REPORT\\ACCSTATEMENT\\SOURCE_OF_NAME",V_INTEGER,SOURCE_OF_NAME,err);

//  Sokolov 14.11.2012  ─Переменные для ведения статистики по видам отчетов
private var  strstat1, strstat2,  strstat3, sqlstat1, sqlstat2,sqlstat3, rsstat1, rsstat2, chetchik1;
private var kod_overdraft, otstup; //Sokolov C-17499-6 переменная для определения типа овердрафт на счете 
private var fgBank = fg_life_subject({OurBank});

/*SDA - поправка на вертер - урегулирование теперь имеет ризалт карри 82*/
private const max_str = 50;

/* EVG 27/12/2013 Переменная и константы для сохранения информации о выбранном формате выписки */
const REPTYPE_ORDINARY          = 0,
      REPTYPE_EXTENDED          = 1,
      REPTYPE_EXTENDED_XLS      = 2,
      REPTYPE_XLS_BLANK         = 3,
      REPTYPE_DFR               = 4;
var ReportType  = REPTYPE_ORDINARY,
    NeedAddInfo = false;


private class TTimeCounter(testCaption, event)
    private const MAX_STORAGE_SIZE = 100000;

    private var m_fromTime;
    private var m_tillTime;

    private var m_testCaption;
    private var m_event;

    private var m_storageTestCaptionArray;
    private var m_storageEventArray;
    private var m_storageFromTimeArray;
    private var m_storageTillTimeArray;
    private var m_storageIndex;


    macro start()
        m_fromTime = time();
    end;

    macro stop()
        m_tillTime = time();

        m_storageFromTimeArray[m_storageIndex] = m_fromTime;
        m_storageTillTimeArray[m_storageIndex] = m_tillTime;

        m_storageIndex = m_storageIndex + 1;
    end;

    macro constructor(testCaption, event)

        m_testCaption = testCaption;
        m_event = event;

        m_storageTestCaptionArray = TArray(MAX_STORAGE_SIZE);
        m_storageEventArray       = TArray(MAX_STORAGE_SIZE);
        m_storageFromTimeArray    = TArray(MAX_STORAGE_SIZE);
        m_storageTillTimeArray    = TArray(MAX_STORAGE_SIZE);

        var i = 0;
        while (i < MAX_STORAGE_SIZE)
            m_storageTestCaptionArray[i] = m_testCaption;
            m_storageEventArray[i]       = m_event;

            i = i + 1;
        end;

        m_storageIndex = 0;

    end;

    macro destructor()
        if (m_storageIndex > 0)

            var i = 0;
            while (i < m_storageIndex)
                m_storageFromTimeArray[i] = int(m_storageFromTimeArray[i]);
                m_storageTillTimeArray[i] = int(m_storageTillTimeArray[i]);

                i = i + 1;
            end;

            m_storageTestCaptionArray.size = m_storageIndex;
            m_storageEventArray.size       = m_storageIndex;
            m_storageFromTimeArray.size    = m_storageIndex;
            m_storageTillTimeArray.size    = m_storageIndex;

            var query = "INSERT INTO accst_timelog"
               + "\n" + "("
               + "\n" + "    test_caption,"
               + "\n" + "    event,"
               + "\n" + "    fromTime,"
               + "\n" + "    tillTime"
               + "\n" + ")"
               + "\n" + "VALUES"
               + "\n" + "("
               + "\n" + "    ?,"
               + "\n" + "    ?,"
               + "\n" + "    ?,"
               + "\n" + "    ?"
               + "\n" + ")"
            ;

            var inserter = RsbSQLInsert(query, 4, m_storageIndex);

            inserter.addParam(V_STRING,  m_storageTestCaptionArray, strlen(m_testCaption) + 1);
            inserter.addParam(V_STRING,  m_storageEventArray, strlen(m_event) + 1);
            inserter.addParam(V_INTEGER, m_storageFromTimeArray);
            inserter.addParam(V_INTEGER, m_storageTillTimeArray);

            inserter.insert();

            sql_execute("COMMIT");

        end;
    end;

    constructor(testCaption, event);
end;

private var m_useOptimizedPaymentFinding = true;

//var globalTestCaption2 = "(02.03.2009-02.03.2009) parts of processFDocs";
//
//var timeCounter9  = TTimeCounter(globalTestCaption2, "FindPayment ");
//var timeCounter12  = TTimeCounter(globalTestCaption2, "FindPaymentOpt ");
//var timeCounter13;
//if (m_useOptimizedPaymentFinding)
//    timeCounter13  = TTimeCounter(globalTestCaption2, "getPaymentDataOpt ");
//else
//    timeCounter13  = TTimeCounter(globalTestCaption2, "getPaymentData ");
//end;

private const V_SPECVAL = 26; // sql NULL

private var wSPOD = 4;

private CONST wDATE   = 10,
              wSHIFR  = 3,   // EVG 18/12/2013 Из пользовательского
              wNUMBD  = 10,
              wBIC    = 9,
              wACC    = 25,
              wSUMM   = 15,  // EVG 18/12/2013 Из пользовательского
              wGROUND = 50,
              wSTRNUM = 8;

private const TYPE_STORNO = "Сторно";
private const TYPE_SPOD = strAlign("СПОД", wSPOD, STR_ALIGN_RIGHT);
private const TYPE_NOTSPOD = strAlign("", wSPOD, STR_ALIGN_RIGHT);

private CONST DBLPRN_DELIMITER_WIDTH = 4; /* кол-во пробелов между колонками при двойной печати */

private CONST END_LINE          = "\n";
private CONST SET_CHAR          = "X";
private CONST NOTFOUND          = "не найден";
private CONST EMPTY_STRING      = "";

private const EMPTY_STRING_ORACLE = getSqlString("");//StrFor(1);

private CONST TERRITORIAL = 1,
              REGIONAL    = 2;

private CONST BRANCH     = 1, /* Подразделение */
              DEPARTMENT = 2, /* Филиал */
              BANK       = 3; /* Банк */

private CONST RATETYPE_CB = 7;

private CONST ALLCURRENCY = -2,
              ALLFININSTR = -1,
              NATCUR      =  0;

private CONST ZeroDate = Date(0, 0, 0);

/* Возвращаемые значения */
private CONST WELLDONE         = 0,
              ERROR            = 1,
              NOACC            = 2,
              NODOC            = 3,
              OPERDAYNOTPASSED = 4;

/* Формы выпуска выписок (печать приложений) */
private CONST ACC_FORMS_DEBIT   = 1, // дебетовыми
              ACC_FORMS_CREDIT  = 2, // кредитовыми
              ACC_FORMS_ALL     = 3, // всеми
              ACC_FORMS_NOTHING = 4; // без приложений

/* Форматы выписки */
private CONST ACC_FORMATS_CLIENT = 1, // клиентский
              ACC_FORMATS_BANK   = 2; // внутрибанковский

/* Не менять !!!*/
private CONST DEBIT_C  = ACC_FORMS_DEBIT,
              CREDIT_C = ACC_FORMS_CREDIT;

/* Индексы для массива с данными по печати первичек */
private CONST DS_DOC   = 0,
              DS_DK    = 1,
              DS_PAYM  = 2,
              DS_CARRY = 3,
              DS_CUR   = 4,
              DS_CBDOC = 5,
              DS_LAST  = 6; /* всегда должен быть последним */

/* формы печати первичек */
private CONST PRN_SKIP    = 0, /* не печатать */
              PRN_RURPAYM = 1, /* платеж      */
              PRN_CURPAYM = 2, /* платеж      */
              PRN_MDOC    = 3, /* мультивалютный документ */
              PRN_RURMO   = 4, /* мемордер    */
              PRN_CURMO   = 5, /* мемордер    */
              PRN_BNKO    = 6; /* банковский ордер */

private var tempSortTableName = "drepaccst_tmp";
private VAR TempInserter;   // EVG 18/12/2013 Ис пользовательского
private var cbAccountViewName = "";
private var cbCacheAccountViewName = "";

private var reportBodyFileName;

private var NAcc = 0;
private var NDoc = 0;

// Виды первичных документов, которые обрабатывает макрос печати РБ, см. prpmpaym.mac
private var DocKinds = ArrCreate("01", "02", "05", "06", "08", "16", "17");

// Sokolov к заявке I-00228765-2
var OnClient : Bool; 
private var textpoisk : string, cmd_textpoisk , resultat, schet_debet, schet_credit; // Sokolov 16.01.13 к заявке I-00228765-2

private macro CreateWordApplication()
    
    var startAX, WordApplication;
    if (isStandAlone())
        return ActiveX("Word.Application");
    else
        startAX = CreateObject("rsax", "TRsAxServer", "LoansAxServer", isStandalone());
        WordApplication = startAX.CreateComObject("Word.Application");
        WordApplication.Visible = false;
        return WordApplication;
    end;
end;

private var hasInvalidLoansAccount = false;
private var invalidLoansAccountProtocol;

private var views = TArray();

/* bool to int */
private MACRO B2I(val)
  if (val)
        return 1;
    else
        return 0;
    end;
END;

/* bool to stringalized int */
private MACRO b2si(val)
  if (val)
    return "1";
  else
    return "0";
  end;
END;

/**
 * Панель активности. Обертка для BegAction/EndAction
 *
 * @since   6.20.030.37
 * @author  ABP
 * @version 1.0
 */
private class TActionPanel()

    macro beginAct(lag, caption)
        if (GetDialogFlag() == 1)
            begAction(lag, caption);
        end;
    end;

    macro endAct()
        if (GetDialogFlag() == 1)
            endAction();
        end;
    end;

end;

/**
 * Класс-утилита для работы с данными платежа при обработке первичных документов проводок выписки.
 * Так же обрабатывает мультивалютные документы, породившие платеж
 * Реализует шаблон "Singleton".
 *
 * @since   v.6.20.030.55
 * @author  ABP
 * @version 2.0
 */
private class TPayment(key, payment, debitProperties, creditProperties, rProperties, multydoc)
    var m_key : Integer = key;

    var m_payment = payment;
    var m_debitProperties = debitProperties;
    var m_creditProperties = creditProperties;
    var m_rProperties = rProperties;
    var m_multydoc = multydoc;

end;

private var m_paymentsUtilityObject = null;
private class TPaymentsUtilityImpl(parameters : Object)

    private const CONTAINER_INITIAL_SIZE = 100;

    private var m_parameters : Object;

    private var m_paymentAlias : String;
    private var m_paymentDebitPropertiesAlias : String;
    private var m_paymentCreditPropertiesAlias : String;
    private var m_paymentRPropertiesAlias : String;
    private var m_multydocAlias : String;

    private var m_paymentFieldAliasPrefix : String;
    private var m_paymentDebitPropertiesFieldAliasPrefix : String;
    private var m_paymentCreditPropertiesFieldAliasPrefix : String;
    private var m_paymentRPropertiesFieldAliasPrefix : String;
    private var m_multydocFieldAliasPrefix : String;

    private var m_paymentFldInfo : TArray;
    private var m_paymentDebitPropertiesFldInfo : TArray;
    private var m_paymentCreditPropertiesFldInfo : TArray;
    private var m_paymentRPropertiesFldInfo : TArray;
    private var m_multydocFldInfo : TArray;

    private var m_container : TRepCache;

    private var m_query : String;

    macro createValue(key)
        var value = TPayment(key, TRecHandler("pmpaym.dbt"),
                                  TRecHandler("pmprop.dbt"),
                                  TRecHandler("pmprop.dbt"),
                                  TRecHandler("pmrmprop.dbt"),
                                  TRecHandler("multydoc.dbt")
                            );
        findPayment(value.m_key, 0, 0, 0, 0, true,
                    value.m_payment,
                    value.m_debitProperties,
                    value.m_creditProperties,
                    value.m_rProperties
                   );

        var fileMultydoc = TBFile("multydoc.dbt", "R", 0);
        fileMultydoc.rec.autokey = value.m_payment.rec.documentId;
        if (fileMultydoc.getEq())
            copy(value.m_multydoc, fileMultydoc);
        else
            fileMultydoc.rec.autokey = 0;
        end;

        return value;
    end;

    macro createKey(value)
        return value.key;
    end;

    private macro createContainer(initialSize)
        if (m_container == null)
            if (initialSize == null)
                initialSize = CONTAINER_INITIAL_SIZE;
            end;
            m_container = TRepCache(CACHE_MODE_ORDERED, initialSize, r2m(this, "createValue"), r2m(this, "createKey"));
        end;
    end;

    private macro fillRecord(recHandler : TRecHandler, dataset : Object, fldInfo : TArray)
        var i;
        var size = fldInfo.size;

        i = 0;
        while (i < size)
            var value = execExp("dataset." + fldInfo.value(i));
            if (value != null)
                recHandler.(i/5) = value;
            end;

            i = i + 5;
        end;
    end;

    macro getPaymentRecord(paymentId : Integer) : TRecHandler
        createContainer();
        return m_container.get(paymentId).m_payment;
    end;

    macro getPaymentDebitPropertiesRecord(paymentId : Integer) : TRecHandler
        createContainer();
        return m_container.get(paymentId).m_debitProperties;
    end;

    macro getPaymentCreditPropertiesRecord(paymentId : Integer) : TRecHandler
        createContainer();
        return m_container.get(paymentId).m_creditProperties;
    end;

    macro getPaymentRPropertiesRecord(paymentId : Integer) : TRecHandler
        createContainer();
        return m_container.get(paymentId).m_rProperties;
    end;

    macro getMultydocRecord(paymentId : Integer) : TRecHandler
        createContainer();
        return m_container.get(paymentId).m_multydoc;
    end;

    macro createData(datasourceName : String)

        if ((m_parameters.outForm == ACC_FORMS_NOTHING) or (not m_useOptimizedPaymentFinding))
            return;
        end;

//timeCounter12.start();
        var action = TActionPanel();
        action.beginAct(100, "Получение данных о платежах");

        m_query = "SELECT COUNT(" + datasourceName + ".t_paymentId) t_paymentsAmount"
         + "\n" + "  FROM " + datasourceName
         + "\n" + " WHERE " + datasourceName + ".t_paymentId IS NOT NULL"
         + "\n" + "   AND " + datasourceName + ".t_paymentId != 0"
        ;

        var dataset = TRsbDataset(m_query);
        dataset.next();
        createContainer(dataset.paymentsAmount);

        m_query = "SELECT " + getSqlFldList("pmpaym.dbt", null, m_paymentAlias, m_paymentFieldAliasPrefix)
         + "\n" + "       " + ", " + getSqlFldList("pmprop.dbt", null, m_paymentDebitPropertiesAlias, m_paymentDebitPropertiesFieldAliasPrefix)
         + "\n" + "       " + ", " + getSqlFldList("pmprop.dbt", null, m_paymentCreditPropertiesAlias, m_paymentCreditPropertiesFieldAliasPrefix)
         + "\n" + "       " + ", " + getSqlFldList("pmrmprop.dbt", null, m_paymentRPropertiesAlias, m_paymentRPropertiesFieldAliasPrefix)
         + "\n" + "       " + ", " + getSqlFldList("multydoc.dbt", null, m_multydocAlias, m_multydocFieldAliasPrefix)
         + "\n" + "  FROM " + datasourceName
         + "\n" + "       " + ", dpmpaym_dbt " + m_paymentAlias
         + "\n" + "       " + ", dpmprop_dbt " + m_paymentDebitPropertiesAlias
         + "\n" + "       " + ", dpmprop_dbt " + m_paymentCreditPropertiesAlias
         + "\n" + "       " + ", dpmrmprop_dbt " + m_paymentRPropertiesAlias
         + "\n" + "       " + ", dmultydoc_dbt " + m_multydocAlias
         + "\n" + " WHERE " + datasourceName + ".t_paymentId = " + m_paymentAlias + ".t_paymentId"
         + "\n" + "   AND " + datasourceName + ".t_paymentId = " + m_paymentDebitPropertiesAlias + ".t_paymentId"
         + "\n" + "   AND " + datasourceName + ".t_paymentId = " + m_paymentCreditPropertiesAlias + ".t_paymentId"
         + "\n" + "   AND " + datasourceName + ".t_paymentId = " + m_paymentRPropertiesAlias + ".t_paymentId"
         + "\n" + "   AND " + m_paymentDebitPropertiesAlias + ".t_debetCredit" + " = 0"
         + "\n" + "   AND " + m_paymentCreditPropertiesAlias + ".t_debetCredit" + " = 1"
         + "\n" + "   AND " + m_paymentAlias + ".t_documentId = " + m_multydocAlias + ".t_autokey(+)"
         + "\n" + " ORDER BY " + datasourceName + ".t_paymentId"
        ;

        dataset = TRsbDataset(m_query);

        var paymentId;
        var value;
        var hasData = dataset.next();
        while (hasData)
            paymentId = execExp("dataset." + m_paymentFieldAliasPrefix + "paymentId");
            value = TPayment(paymentId, TRecHandler("pmpaym.dbt"),
                                        TRecHandler("pmprop.dbt"),
                                        TRecHandler("pmprop.dbt"),
                                        TRecHandler("pmrmprop.dbt"),
                                        TRecHandler("multydoc.dbt")
                            );

            fillRecord(value.m_payment, dataset, m_paymentFldInfo);
            fillRecord(value.m_debitProperties, dataset, m_paymentDebitPropertiesFldInfo);
            fillRecord(value.m_creditProperties, dataset, m_paymentCreditPropertiesFldInfo);
            fillRecord(value.m_rProperties, dataset, m_paymentRPropertiesFldInfo);

            if ((value.m_payment.rec.docKind == CB_MULTYDOC) and (value.m_multydoc.rec.autokey != null))
                fillRecord(value.m_multydoc, dataset, m_multydocFldInfo);
            else
                value.m_multydoc.rec.autokey = 0;
            end;

            m_container.add(value.m_key, value, null, true);
            hasData = dataset.next();
        end;

        action.endAct();
//timeCounter12.stop();
    end;

    private macro constructor(parameters : Object)
        m_parameters = parameters;

        if ((m_parameters.outForm == ACC_FORMS_NOTHING) or (not m_useOptimizedPaymentFinding))
            return;
        end;

        m_paymentAlias = "payment";
        m_paymentDebitPropertiesAlias = "debitProperties";
        m_paymentCreditPropertiesAlias = "creditProperties";
        m_paymentRPropertiesAlias = "rProperties";
        m_multydocAlias = "multydoc";

        m_paymentFieldAliasPrefix = "t_pm_";
        m_paymentDebitPropertiesFieldAliasPrefix = "t_dProp_";
        m_paymentCreditPropertiesFieldAliasPrefix = "t_cProp_";
        m_paymentRPropertiesFieldAliasPrefix = "t_rProp_";
        m_multydocFieldAliasPrefix = "t_mcd_";

        var i;

        m_paymentFldInfo = TRecHandler("pmpaym.dbt").getFldInfo();
        i = 0;
        while (i < m_paymentFldInfo.size)
            m_paymentFldInfo.value(i) = m_paymentFieldAliasPrefix + m_paymentFldInfo.value(i);
            i = i + 5;
        end;

        m_paymentDebitPropertiesFldInfo = TRecHandler("pmprop.dbt").getFldInfo();
        m_paymentCreditPropertiesFldInfo = TRecHandler("pmprop.dbt").getFldInfo();
        i = 0;
        while (i < m_paymentDebitPropertiesFldInfo.size)
            m_paymentDebitPropertiesFldInfo.value(i) = m_paymentDebitPropertiesFieldAliasPrefix + m_paymentDebitPropertiesFldInfo.value(i);
            m_paymentCreditPropertiesFldInfo.value(i) = m_paymentCreditPropertiesFieldAliasPrefix + m_paymentCreditPropertiesFldInfo.value(i);
            i = i + 5;
        end;

        m_paymentRPropertiesFldInfo = TRecHandler("pmrmprop.dbt").getFldInfo();
        i = 0;
        while (i < m_paymentRPropertiesFldInfo.size)
            m_paymentRPropertiesFldInfo.value(i) = m_paymentRPropertiesFieldAliasPrefix + m_paymentRPropertiesFldInfo.value(i);
            i = i + 5;
        end;

        m_multydocFldInfo = TRecHandler("multydoc.dbt").getFldInfo();
        i = 0;
        while (i < m_multydocFldInfo.size)
            m_multydocFldInfo.value(i) = m_multydocFieldAliasPrefix + m_multydocFldInfo.value(i);
            i = i + 5;
        end;
    end;

    constructor(parameters);

end;

private macro TPaymentsUtility(parameters : Object) : TPaymentsUtilityImpl
    if (m_paymentsUtilityObject == null)
        m_paymentsUtilityObject = TPaymentsUtilityImpl(parameters);
    end;
    return m_paymentsUtilityObject;
end;

/**
 * Элемент кеша ИД идентификаторов субъектов-банков
 * @since v.6.20.029.154
 * @author ABP
 * @version 1.0
 */
private class TPartyIdCachedDataElement(_code : String, _key : Integer, _partyId : Integer)
    var partyId : Integer = _partyId;

    var key : Integer = _key;
    var code : String = _code;
end;

/**
 * Кэширующий ИД идентификаторов субъектов-банков.
 * Кеширует идентификатор субъекта.
 *
 * @since v.6.20.029.154
 * @author ABP
 * @version 1.0
 */
private var m_partyIdCachedDataObject = null;
private class TPartyIdCachedDataImpl()

    private var m_cache : TArray;
    private var m_queryText : String;
    private var m_fillCommand : Object;

    private macro add(code : String, key : Integer, codeKind : Integer, requiredDate : Date, isEmptyAtKey : Bool) : Object

        var value : Object;
        var partyId : Integer;

        m_fillCommand.value("code") = code;
        m_fillCommand.value("codeKind") = codeKind;
        m_fillCommand.value("date") = requiredDate;

        m_fillCommand.execute();

        if (valType(m_fillCommand.value("partyId")) == V_SPECVAL)
            partyId = {ourBank};
        else
            partyId = m_fillCommand.value("partyId");
        end;

        value = TPartyIdCachedDataElement(code, key, partyId);

        if (isEmptyAtKey)
            m_cache(key) = TArray();
            m_cache(key).(0) = value;
        else
            m_cache(key).(m_cache(key).size) = value;
        end;

        return value;

    end;

    /**
     * Получить элемент кеша
     * @param partyId Идентификатор субъекта
     * @return объект класса TPartyCachedDataElement или null
     */
    macro get(code : String, codeKind : Integer, requiredDate : Date) : Object
        var i;
        var size;
        var key : Integer = int(string(codeKind, int(requiredDate)));
        var result = m_cache(key);

        if (result == null)
            return add(code, key, codeKind, requiredDate, true);
        else
            i = 0;
            size = result.size;
            while ((i < size) and (result(i).code != code))
                i = i + 1;
            end;
            if (i < size)
                return result(i);
            else
                return add(code, key, codeKind, requiredDate, false);
            end;
        end;
    end;

    /**
     * Получить id субъекта по коду заданного вида, действующего на заданную дату
     * @param code Код субъекта
     * @param codeKind Вид кода субъекта
     * @param requiredDate Дата действия кода субъекта
     * @return id субъекта
     */
    macro getPartyId(code : String, codeKind : Integer, requiredDate : Date) : Integer
        return get(code, codeKind, requiredDate).partyId;
    end;

    private macro constructor()
        m_cache = TArray();

        m_fillCommand = RsdCommand(rslDefCon);
        m_fillCommand.nullConversion = true;

        var queryText = "BEGIN ? := rsb_rep_pt.get_partyIdByCode(?,?,?); END;";

        m_fillCommand.cmdText = queryText;
        m_fillCommand.addParam("partyId", RSDBP_RETVAL, V_INTEGER);
        m_fillCommand.addParam("codeKind", RSDBP_IN, 0);
        m_fillCommand.addParam("code", RSDBP_IN, "");
        m_fillCommand.addParam("date", RSDBP_IN, Date());
    end;

    constructor();

end;

private macro TPartyIdCachedData() : TPartyIdCachedDataImpl
    if (m_partyIdCachedDataObject == null)
        m_partyIdCachedDataObject =  TPartyIdCachedDataImpl();
    end;
    return m_partyIdCachedDataObject;
end;

/**
 * Элемент кеша ИД субъектов-банков
 *
 * @since v.6.20.029.154
 * @author ABP
 * @version 1.0
 */
private class TPartyCachedDataElement(_partyId : Integer, _isResident : Bool)
    var partyId : Integer = _partyId;
    var isResident : Bool = _isResident;
end;

/**
 * Кэширующий ИД субъектов-банков.
 * Кеширует признак резидентности.
 *
 * @since v.6.20.029.154
 * @author ABP
 * @version 2.0
 */
private var m_partyCachedDataObject = null;
private class TPartyCachedDataImpl()
    private var m_queryText : String;
    private var m_fillCommand : Object;

    private var m_cache : TRepCache;

    private macro createCache()
        if (m_cache == null)
            m_cache = TRepCache(CACHE_MODE_DISORDERED, 100, r2m(this, "createValue"), r2m(this, "createKey"));
        end;
    end;

    macro createValue(key)
        var value : Object = null;

        m_fillCommand.value("partyId") = key;
        m_fillCommand.execute();

        var dataSet = TRsbDataset(m_fillCommand);

        if (dataSet.next())
            value = TPartyCachedDataElement(key, dataSet.notResident != SET_CHAR);
        end;

        return value;
    end;

    macro createKey(value)
        return value.partyId;
    end;

    /**
     * Получить элемент кеша
     * @param partyId Идентификатор субъекта
     * @return объект класса TPartyCachedDataElement или null
     */
    macro get(partyId : Integer) : Object
        return m_cache.get(partyId);
    end;

    /**
     * Получить признак резидента для субъекта
     * @param partyId Идентификатор субъекта
     * @return Признак резидента для субъекта
     */
    macro getResidentFlag(partyId : Integer) : Bool
        return get(partyId).isResident;
    end;

    private macro constructor()
        createCache();

        m_fillCommand = RsdCommand(rslDefCon);
        m_fillCommand.nullConversion = true;

        var queryText = "SELECT party.t_notResident t_notResident"
               + "\n" + "  FROM dparty_dbt party"
               + "\n" + " WHERE party.t_partyId = ?";

        m_fillCommand.cmdText = queryText;
        m_fillCommand.addParam("partyId", RSDBP_IN, 0);
    end;

    constructor();
end;

private macro TPartyCachedData() : TPartyCachedDataImpl
    if (m_partyCachedDataObject == null)
        m_partyCachedDataObject = TPartyCachedDataImpl();
    end;
    return m_partyCachedDataObject;
end;


/* EVG 18/12/2013 Пользовательский класс, в дистрибе нет.
   Возможно, устарел ещё к 2030. */
/* 
 * Проверка существования параметров переоценки для глав учета
 * @since   07.11.2007
 * @author  ABP
 * @version 6.00.020.27
 */
private class TRevaluationParametersChecker(parameters : Object)
    
    private var m_workingChaptersQuery;
        /* Точка входа  */ 
    macro execute()
        var workingChaptersDataset = TRsbDataset(m_workingChaptersQuery, RSDVAL_CLIENT, RSDVAL_STATIC);
        while (workingChaptersDataset.next())
            if ((workingChaptersDataset.unrealizedCatNumPlus == 0)  or
                (workingChaptersDataset.unrealizedCatNumMinus == 0) or
                (workingChaptersDataset.realizedCatNumPlus == 0)    or
                (workingChaptersDataset.realizedCatNumMinus == 0))
                msgBox("Не заданы параметры переоценки для главы " + workingChaptersDataset.chapter);
            end;
        end;
    end;

   /*
    * Конструктор
    * @param     parameters           параметры отчета
    */
    private macro constructor(parameters : Object)
        m_workingChaptersQuery =     " SELECT t_chapter,"
                             + "\n" + "       t_unrealizedCatNumPlus,"             
                             + "\n" + "       t_unrealizedCatNumMinus,"
                             + "\n" + "       t_realizedCatNumPlus,"
                             + "\n" + "       t_realizedCatNumMinus"
                             + "\n" + "  FROM dobchaptr_dbt chapter"
                             + "\n" + " WHERE " + parameters.getChapterFilterClause();
    end;

   constructor(parameters);

END;

/**
 * Формирование текстов SQL-запросов для механизма DocInfo по:
 * - рублевым или валютным проводкам по основному счету, 
 * - рублевым проводкам переоценки, 
 * - проводкам курсовой разницы МВП в корреспонденции со счетом покрытия или клиентским счетом МВП
 * - проводкам курсовой разницы МВП в корреспонденции со счетом курсовых разниц
 * 
 * @since 6.00.020.27
 * @author  ABP
 * @version 1.0
 */
private class TCacheQueryMaker(parameters : Object)
    
    private var m_parameters : Object;

    private var m_dateIn : String;

    private var m_dateOut : String;

    private var m_mainQuery : String;

    private var m_fieldList : String;
    
    private macro createFieldsList()
        m_fieldList = m_parameters.docInfo.getFieldListAsString("document");
    end;
    
    private macro getFieldList()
        return m_fieldList;
    end;
   
    private macro getAccountDataSourceClause(subsystem)
        return ternary(subsystem == REP_SUBSYSTEMS_CB, cbCacheAccountViewName, tempSortTableName);
    end;
    
    private macro getSubsystemFilterClause(subsystem)
        return ternary(subsystem == REP_SUBSYSTEMS_CB, "(1 = 1)", "account.t_subsystem = " + REP_SUBSYSTEMS_CB + "AND account.t_acc = account.t_odbAccount");
    end;
    
    private macro makeMainQuery()

        macro getQueryTextCb(correspondingAccountField)
    
            var query;
            /*оптимизирован запрос, уменьшено время выполнения LAO */
            query =          "SELECT /*+ NO_MERGE(ACCOUNT)*/ " + getFieldList()
                    + "\n" + "  FROM daccTrn_dbt document,"
                    + "\n" + "       " + getAccountDataSourceClause(REP_SUBSYSTEMS_CB) + " account"
                    + "\n" + " WHERE document.t_date_carry BETWEEN " + m_dateIn + " AND " + m_dateOut
                    + "\n" + "   AND document.t_state = 1"
                    + "\n" + "   AND " + getSubsystemFilterClause(REP_SUBSYSTEMS_CB)
                    + "\n" + "   AND account.t_accId = " + correspondingAccountField
                    ;

            return query;

        end;

        macro getQueryTextLoans(correspondingAccountField, correspondingFiIdField)

            var query;

            query =          "SELECT " + getFieldList()
                    + "\n" + "  FROM daccTrn_dbt document,"
                    + "\n" + "       " + getAccountDataSourceClause(REP_SUBSYSTEMS_LOANS) + " account"
                    + "\n" + " WHERE document.t_date_carry BETWEEN " + m_dateIn + " AND " + m_dateOut
                    + "\n" + "   AND document.t_state = 1"
                    + "\n" + "   AND " + getSubsystemFilterClause(REP_SUBSYSTEMS_LOANS)
                    + "\n" + "   AND account.t_acc = " + correspondingAccountField
                    + "\n" + "   AND account.t_chapter = document.t_chapter"
                    + "\n" + "   AND account.t_currency = " + correspondingFiIdField
                    ;

            return query;

        end;

        var query;

        if (m_parameters.subsystem == REP_SUBSYSTEMS_ALL)
            query =  getQueryTextLoans("document.t_account_payer", "document.t_fiId_payer")
            + "\n" + "UNION ALL"
            + "\n" + getQueryTextLoans("document.t_account_receiver", "document.t_fiId_receiver")
            + "\n" + "UNION ALL"
            + "\n" + getQueryTextCb("document.t_accountId_payer")
            + "\n" + "UNION ALL"
            + "\n" + getQueryTextCb("document.t_accountId_receiver")
            ;
        elif (m_parameters.subsystem == REP_SUBSYSTEMS_LOANS)
            query =  getQueryTextLoans("document.t_account_payer", "document.t_fiId_payer")
            + "\n" + "UNION ALL"
            + "\n" + getQueryTextLoans("document.t_account_receiver", "document.t_fiId_receiver")
            ;
        else
            query =  getQueryTextCb("document.t_accountId_payer")
            + "\n" + "UNION ALL"
            + "\n" + getQueryTextCb("document.t_accountId_receiver")
            ;
        end;

        return "(" + query + ")";

    end;
    
    private macro make()
        m_mainQuery = makeMainQuery();
            end;
    
    /**
    * Получить текст запроса для основных проводок
     *
    * @returns текст запроса для основных проводок
    */
    macro getMainQuery()
        return m_mainQuery;
    end;
    
    /**
    * Конструктор. При вызове формирует тексты запросов
     *
    * @param     parameters           параметры отчета
    */
    private macro constructor(parameters : Object)

        m_parameters = parameters;

        m_dateIn = getSqlDate(m_parameters.dateIn);

        m_dateOut = getSqlDate(m_parameters.dateOut);

        m_mainQuery = "";

        createFieldsList();

        make();

    end;
    
    constructor(parameters);

end;  // class TCacheQueryMaker(parameters : Object)

/**
 * Формирование текстов SQL-запросов для печати проводок
 *
 * @since 6.00.020.27
 * @author  ABP
 * @version 1.0
 */
private class TDocumentQueryMaker(parameters : Object)
    
    private const CARRY_TYPE_MAIN            = 0;
    private const CARRY_TYPE_RATE_DIFFERENCE = 1;
    private const CARRY_TYPE_REVALUATION     = 2;

    private var m_parameters : Object;

    private var m_dateIn : String;

    private var m_dateOut : String;

    private var m_mainAccount : Integer;

    private var m_needEquivalent : Bool;

    private var m_query : Object;
    
    private macro addParameter(name, value)
        m_query.addParam(name, RSDBP_IN, value);
        return "?";
    end;
    
    private macro getEquivalentClause()
        if (m_needEquivalent)
            return "document.t_sum_NatCur ";
        else
            return "0";
        end;
    end;
    
    private macro getCommissionAccountProcessing(fieldSelectDoc : String, fieldSelectPayment : String) : String

        var text;

        if (m_parameters.docOnlyData == true)

            text = " " + fieldSelectDoc + " ";

        else

            if (m_parameters.commissionIncomeAccounts == "") 
                text = " " + fieldSelectPayment + " ";
            else
                text =   " CASE"
               + "\n" + "     WHEN (" + m_parameters.getPayerComissionAccounts() + ")"
               + "\n" + "       OR (" + m_parameters.getReceiverComissionAccounts() + ")"
                + "\n" + "         THEN " + fieldSelectDoc
                + "\n" + "     ELSE " + fieldSelectPayment
                + "\n" + "  END ";
            end;

        end;

        return text;

    end;
    
    private macro getCorrespondingAccountClause(isDebit)
        if (isDebit)
            return getCommissionAccountProcessing("document.t_account_receiver", "documentInfo.t_receiverAccount");
        else
            return getCommissionAccountProcessing("document.t_account_payer", "documentInfo.t_payerAccount");
        end;
    end;

    private macro getStornoNoteClause()
        if (m_parameters.showStorno)
            return   "       CASE"
            + "\n" + "           WHEN INSTR(document.t_typeDocument, 'С') != 0"
            + "\n" + "            AND document.t_fiId_payer = document.t_fiId_receiver" // одновалютная исправленная проводка
            + "\n" + "           THEN NVL((SELECT " + getSqlString(TYPE_STORNO)
            + "\n" + "                  || '|' || TO_CHAR(paym.t_valueDate, 'DD.MM.YYYY')"
            + "\n" + "                  || '|' || SUBSTR(prop.t_number, 1, 12)"
            + "\n" + "                       FROM dcb_doc_dbt doc,"
            + "\n" + "                            daccispr_dbt ispr,"
            + "\n" + "                            dpmpaym_dbt paym,"
            + "\n" + "                            dpmrmprop_dbt prop "
            + "\n" + "                      WHERE ispr.t_accTrnId = document.t_accTrnId"
            + "\n" + "                        AND ispr.t_docKind = " + DLDOC_MEMORIALORDER
            + "\n" + "                        AND ispr.t_documentId = doc.t_documentId"
            + "\n" + "                        AND ispr.t_docKind = paym.t_docKind"
            + "\n" + "                        AND ispr.t_documentId = paym.t_documentId"
            + "\n" + "                        AND prop.t_paymentId = paym.t_paymentId"
            + "\n" + "                        AND INSTR(doc.t_typeDocument, 'S') != 0"
            + "\n" + "                    ),"
            + "\n" + "                " + getSqlString("")
            + "\n" + "                   )"
            + "\n" + "           WHEN INSTR(document.t_typeDocument, 'С') != 0"
            + "\n" + "            AND document.t_fiId_payer != document.t_fiId_receiver" // мультивалютная исправленная проводка
            + "\n" + "           THEN NVL((SELECT " + getSqlString(TYPE_STORNO)
            + "\n" + "                  || '|' || TO_CHAR(paym.t_valueDate, 'DD.MM.YYYY')"
            + "\n" + "                  || '|' || SUBSTR(prop.t_number, 1, 12)"
            + "\n" + "                       FROM dmultydoc_dbt doc,"
            + "\n" + "                            daccispr_dbt ispr,"
            + "\n" + "                            dpmpaym_dbt paym,"
            + "\n" + "                            dpmrmprop_dbt prop "
            + "\n" + "                      WHERE ispr.t_accTrnId = document.t_accTrnId"
            + "\n" + "                        AND ispr.t_docKind = " + CB_MULTYDOC
            + "\n" + "                        AND ispr.t_documentId = doc.t_autokey"
            + "\n" + "                        AND ispr.t_docKind = paym.t_docKind"
            + "\n" + "                        AND ispr.t_documentId = paym.t_documentId"
            + "\n" + "                        AND prop.t_paymentId = paym.t_paymentId"
            + "\n" + "                        AND INSTR(doc.t_type_document, 'S') != 0"
            + "\n" + "                    ),"
            + "\n" + "                " + getSqlString("")
            + "\n" + "                   )"
            + "\n" + "           ELSE " + getsqlString("")
            + "\n" + "       END"
        else
            return "     " + getSqlString("");
        end;
    end;
    
    private macro makeMainQuery()
        
        macro getSelectClause(isDebit)

            var query;

            query =          "SELECT NVL(documentInfo.t_paymentId, 0)                                      paymentId,"
                    + "\n" + "       NVL(documentInfo.t_carryId, 0)                                        carryId,"
                    + "\n" + "   " + getCorrespondingAccountClause(isDebit) + "                            account,"
                    + "\n" + "   " + ternary(isDebit, DEBIT_C, CREDIT_C) + "                               dk,"
                    + "\n" + "   " + ternary(isDebit, "document.t_sum_payer", "0") + "                     sumDebit,"
                    + "\n" + "   " + ternary(isDebit, "0", "document.t_sum_receiver") + "                  sumCredit,"
                    /* EVG 18/12/2013 Кто-то убрал кавычки у нулей, не подписавшись. Оставил так. */
                    + "\n" + "   " + ternary(isDebit, "NVL(" + getEquivalentClause() + ", 0)", 0) + "      sumDebitEq," 
                    + "\n" + "   " + ternary(isDebit, 0, "NVL(" + getEquivalentClause() + ", 0)") + "      sumCreditEq," 
                    /* EVG 18/12/2013 end */
                    + "\n" + "       documentInfo.t_payerBankCode                                          payerBankCode,"
                    + "\n" + "       documentInfo.t_payerCodeKind                                          payerCodeKind,"
                    + "\n" + "       documentInfo.t_receiverBankCode                                       receiverBankCode,"
                    + "\n" + "       documentInfo.t_receiverCodeKind                                       receiverCodeKind,"

                    + "\n" + "       document.t_shifr_oper                                                 shifr_oper,"
                    + "\n" + "       document.t_typeDocument                                               typeDocument,"
                    + "\n" + "       INSTR(document.t_typeDocument, 'З')                                   isSpod,"

                    + "\n" + "   " + getStornoNoteClause() + "                                             stornoNote,"

                    + "\n" + "       CASE"
                    + "\n" + "           WHEN documentInfo.t_paymentId IS NULL"
                    + "\n" + "           THEN 1"
                    + "\n" + "           WHEN (SELECT COUNT(pmprop.t_paymentId)"
                    + "\n" + "                   FROM dpmprop_dbt pmprop,"
                    + "\n" + "                        dpmpaym_dbt payment"
                    + "\n" + "                  WHERE pmprop.t_paymentId = documentInfo.t_paymentId"
                    + "\n" + "                    AND pmprop.t_corschem = -1"
                    + "\n" + "                    AND payment.t_paymentId = pmprop.t_paymentId"
                    + "\n" + "                    AND payment.t_startDepartment = payment.t_endDepartment"
                    + "\n" + "                ) = 2"
                    + "\n" + "           THEN 1"
                    + "\n" + "           ELSE 0"
                    + "\n" + "       END                                                                   isInternalDocument,"

                    + "\n" + "       documentInfo." + ternary(isDebit, "t_payerFiId", "t_receiverFiId") + " code_currency,"
                    + "\n" + "       documentInfo.t_autokey                                                autokey,"
                    + "\n" +         getCommissionAccountProcessing("document.t_ground", 
                                                                    "documentInfo.t_ground") + "           ground,"
                    + "\n" +         getCommissionAccountProcessing("document.t_numb_document", 
                                                                    "documentInfo.t_numb_document") + "    numb_document,"
                    + "\n" + "       documentInfo.t_date_carry                                             date_carry,"
                    + "\n" + "       documentInfo.t_receiverAccount                                        receiverAccount,"
                    + "\n" + "       documentInfo.t_payerAccount                                           payerAccount,"
                    + "\n" + "       documentinfo.t_payerCorrAcc                                           payerCorrAcc,"
                    + "\n" + "       documentinfo.t_receiverCorrAcc                                        receiverCorrAcc,"
                    
                    + "\n" + "   " + m_parameters.getDocumentInfoTableFieldList() + ","
                    + "\n" + "   " + m_parameters.getDocumentTableFieldList() + ","
                    + "\n" + "   " + CARRY_TYPE_MAIN + "                                                   carryType,"

                    + "\n" + "   " + ternary(isDebit, "document.t_sum_payer", "0") + "                     sumDebit_sort,"
                    + "\n" + "   " + ternary(isDebit, "0", "document.t_sum_receiver") + "                  sumCredit_sort,"
                    + "\n" + "       document.t_date_carry                                                 dateCarry_sort,"
                    + "\n" + "       CASE"
                    + "\n" + "           WHEN document.t_exRateAccTrnId != 0"
                    + "\n" + "           THEN document.t_exRateAccTrnId"
                    + "\n" + "           ELSE document.t_accTrnId"
                    + "\n" + "       END                                                                   documentKey,"
                    + "\n" + "       document.t_accTrnId                                                   accTrnId,"
                    /* EVG 27/12/2013 Добавил поля, необходимые для расширенной выписки */
                    + "\n" + "   " + ternary(isDebit, "documentInfo.t_ReceiverBankName",
                                                      "documentInfo.t_PayerBankName") + "                  nameBank,"
                    + "\n" + "   " + ternary(isDebit, "documentInfo.t_ReceiverName",
                                                      "documentInfo.t_PayerName") + "                      nameCntrAgent,"
                    /* EVG 31/03/2014 Наоборот
                    + "              documentInfo.t_payerinn_kpp                                           innCntrAgent,"
                    + "              documentInfo.t_receiverinn_kpp                                        innCntrAgent_rec,"
                    */
                    + "\n" + "   " + ternary(isDebit, "documentInfo.t_receiverinn_kpp", 
                                                      "documentInfo.t_payerinn_kpp") + "                   innCntrAgent,"
                    

                    + "\n" + "   " + ternary(isDebit, "document.t_sum_receiver", 
                                                      "document.t_sum_payer") + "                          formSum,"
                    + "\n" + "   " + ternary(isDebit, "1", "0") + "                                        isDebet"
                    ;

            return query;

        end;
        
        // Фильтр на проводки КР и переоценки
        var specialDocumentFilter = "";
        
        // В выписке по валютному счету исключаем КР и переоценку. Они будут отобраны отдельно
        if (m_parameters.account.currency != NATCUR)
            specialDocumentFilter = "\n" + "    AND document.t_result_carry NOT IN (" + DELTARATE
                                                                                + "," + REGRESTOUTCARRY
                                                                                + "," + DELTARATE_ADD
                                                                                + "," + DELTARATE_MCD
                                                                                + ")";
        end;
        
        var query;

        query =          getSelectClause(true)
                + "\n" + "  FROM daccTrn_dbt document,"
                + "\n" + "       " + m_parameters.getCacheTableName() + " documentInfo"
                + "\n" + " WHERE document.t_accTrnId = documentInfo.t_autokey"
                + "\n" + "   AND document.t_accountId_payer = " + addParameter("mainAccount_debit", m_mainAccount)
                + "\n" + "   AND document.t_date_carry BETWEEN " + m_dateIn + " AND " + m_dateOut
                +        specialDocumentFilter;

                /* EVG 6/05/2014 Дополнительное условие по ненулевым суммам проводки - для того, чтобы исключить
                   конвертированные проводки по счетам ОВП и курсовых разниц, т.к. по t_result_carry они не отсеиваются. */
                /* EVG 26/06/2014 Просто убирать проверку нехорошо, нужно повесить её на флажок "Исключить счета с переоценкой" */
                   // 25.06.2014 R-400772-2 dpn Жалуются, что не попадают проводки к\р
                if( m_parameters.cSetExcludeRevalue )
                   query = query + " AND document.t_sum_payer > 0 and document.t_sum_receiver > 0 and document.t_sum_natcur > 0 ";
                end;

                query = query
                + "\n" + " UNION ALL"
                + "\n" + getSelectClause(false)
                + "\n" + "  FROM daccTrn_dbt document,"
                + "\n" + "       " + m_parameters.getCacheTableName() + " documentInfo"
                + "\n" + " WHERE document.t_accTrnId = documentInfo.t_autokey"
                + "\n" + "   AND document.t_accountId_receiver = " + addParameter("mainAccount_credit", m_mainAccount)
                + "\n" + "   AND document.t_date_carry BETWEEN " + m_dateIn + " AND " + m_dateOut
                +        specialDocumentFilter;

                /* EVG 6/05/2014 Дополнительное условие по ненулевым суммам проводки - для того, чтобы исключить
                   конвертированные проводки по счетам ОВП и курсовых разниц, т.к. по t_result_carry они не отсеиваются. */
                /* EVG 26/06/2014 Просто убирать проверку нехорошо, нужно повесить её на флажок "Исключить счета с переоценкой" */
                   // 25.06.2014 R-400772-2 dpn Жалуются, что не попадают проводки к\р
                if( m_parameters.cSetExcludeRevalue )
                   query = query + " AND document.t_sum_payer > 0 and document.t_sum_receiver > 0 and document.t_sum_natcur > 0 ";
                end;

        return "(" + query + ")";

    end;  //private macro makeMainQuery(

    private macro makeSpecialDocumentQuery()

        macro getSelectClause(isDebit)

            var query;

            query =          "SELECT 0                                                                  paymentId,"
                    + "\n" + "       0                                                                  carryId,"
                    + "\n" + "   " + getCorrespondingAccountClause(isDebit) + "                         account,"
                    + "\n" + "   " + ternary(isDebit, DEBIT_C, CREDIT_C) + "                            dk,"
                    + "\n" + "       0                                                                  sumDebit,"
                    + "\n" + "       0                                                                  sumCredit,"
                    + "\n" + "   " + ternary(isDebit, "document.t_sum_NatCur", "0") + "                 sumDebitEq,"
                    + "\n" + "   " + ternary(isDebit, "0", "document.t_sum_NatCur") + "                 sumCreditEq,"
                    + "\n" + "   " + getSqlString({MFO_Bank}) + "                                       payerBankCode,"
                    + "\n" + "   " + PTCK_BIC + "                                                       payerCodeKind,"
                    + "\n" + "   " + getSqlString({MFO_Bank}) + "                                       receiverBankCode,"
                    + "\n" + "   " + PTCK_BIC + "                                                       receiverCodeKind,"

                    + "\n" + "       document.t_shifr_oper                                              shifr_oper,"
                    + "\n" + "       document.t_typeDocument                                            typeDocument,"
                    + "\n" + "       INSTR(document.t_typeDocument, 'З')                                isSpod,"

                    + "\n" + "   " + getStornoNoteClause() + "                                          stornoNote,"

                    + "\n" + "       1                                                                  isInternalDocument,"
                    + "\n" + "   " + ternary(isDebit, "t_payerFiId", "t_receiverFiId") + "              code_currency,"
                    + "\n" + "       documentInfo.t_autokey                                             autokey,"
                    + "\n" + "       document.t_ground                                                  ground,"
                    + "\n" + "       document.t_numb_document                                           numb_document,"
                    + "\n" + "       document.t_date_carry                                              date_carry,"
                    + "\n" + "       document.t_account_receiver                                        receiverAccount,"
                    + "\n" + "       document.t_account_payer                                           payerAccount,"
                    + "\n" + "   " + getSqlString({CORAC_Bank}) + "                                     payerCorrAcc,"
                    + "\n" + "   " + getSqlString({CORAC_Bank}) + "                                     receiverCorrAcc,"

                    + "\n" + "   " + m_parameters.getDocumentInfoTableFieldList() + ","
                    + "\n" + "   " + m_parameters.getDocumentTableFieldList() + ","

                    + "\n" + "   CASE"
                    + "\n" + "       WHEN document.t_result_carry = " + DELTARATE_MCD
                    + "\n" + "       THEN " + CARRY_TYPE_RATE_DIFFERENCE
                    + "\n" + "       ELSE " + CARRY_TYPE_REVALUATION
                    + "\n" + "   END                                                                    carryType,"

                    + "\n" + "   CASE"
                    + "\n" + "       WHEN document.t_result_carry = " + DELTARATE_MCD
                    + "\n" + "       THEN 0"
                    + "\n" + "       ELSE NULL"
                    + "\n" + "   END                                                                    sumDebit_sort,"
                    + "\n" + "   CASE"
                    + "\n" + "       WHEN document.t_result_carry = " + DELTARATE_MCD
                    + "\n" + "       THEN 0"
                    + "\n" + "       ELSE NULL"
                    + "\n" + "   END                                                                    sumCredit_sort,"

                    + "\n" + "       document.t_date_carry                                              dateCarry_sort,"
                    + "\n" + "       document.t_accTrnId                                                documentKey,"
                    + "\n" + "       document.t_accTrnId                                                accTrnId,"

                    /* EVG 8/04/2014 Поля, необходимые для расширенной выписки, должны быть и в этом запросе - он добавляется,
                       когда выписка делается с флажком "Эквивалент в нац. валюте". */
                    + "\n" + "   " + ternary(isDebit, "documentInfo.t_ReceiverBankName",
                                                      "documentInfo.t_PayerBankName") + "                  nameBank,"
                    + "\n" + "   " + ternary(isDebit, "documentInfo.t_ReceiverName",
                                                      "documentInfo.t_PayerName") + "                      nameCntrAgent,"
                    + "\n" + "   " + ternary(isDebit, "documentInfo.t_receiverinn_kpp", 
                                                      "documentInfo.t_payerinn_kpp") + "                   innCntrAgent,"
                    + "\n" + "   " + ternary(isDebit, "document.t_sum_receiver", 
                                                      "document.t_sum_payer") + "                          formSum,"
                    + "\n" + "   " + ternary(isDebit, "1", "0") + "                                        isDebet"
                    ;

            return query;

        end;

        var query = "";

        query =          getSelectClause(true)
                + "\n" + "  FROM daccTrn_dbt document,"
                + "\n" + "       " + m_parameters.getCacheTableName() + " documentInfo"
                + "\n" + " WHERE document.t_accTrnId = documentInfo.t_autokey"
                + "\n" + "   AND document.t_fiId_receiver = " + NATCUR
                + "\n" + "   AND document.t_accountId_payer = " + addParameter("special_connectAccount_debit", m_mainAccount)
                + "\n" + "   AND document.t_result_carry IN (" +       DELTARATE
                                                               + "," + REGRESTOUTCARRY
                                                               + "," + DELTARATE_ADD
                                                               + "," + DELTARATE_MCD
                                                         + ")"
                + "\n" + "   AND document.t_date_carry BETWEEN " + m_dateIn + " AND " + m_dateOut
                + "\n" + " UNION ALL"
                + "\n" + getSelectClause(false)
                + "\n" + "  FROM daccTrn_dbt document,"
                + "\n" + "       " + m_parameters.getCacheTableName() + " documentInfo"
                + "\n" + " WHERE document.t_accTrnId = documentInfo.t_autokey"
                + "\n" + "   AND document.t_fiId_payer = " + NATCUR
                + "\n" + "   AND document.t_accountId_receiver = " + addParameter("special_connectAccount_credit", m_mainAccount)
                + "\n" + "   AND document.t_result_carry IN (" +       DELTARATE
                                                               + "," + REGRESTOUTCARRY
                                                               + "," + DELTARATE_ADD
                                                               + "," + DELTARATE_MCD
                                                         + ")"
                + "\n" + "   AND document.t_date_carry BETWEEN " + m_dateIn + " AND " + m_dateOut
                ;

        return "(" + query + ")";

    end;

    private macro make()

        var query = "";

        if (not m_needEquivalent)

            query = makeMainQuery()
                    /* EVG 7/03/2014 Для того, чтобы документы выводились сначала дебетовые, потом
                       кредитовые, в ORDER BY нужно писать сначала sumCredit, потом sumDebit (сначала 
                       пойдут документы с sumCredit = 0).
                    + "\n" + "ORDER BY doc_date_carry, sumDebit, sumCredit, accTrnId";*/
                    + "\n" + "ORDER BY doc_date_carry, sumCredit, sumDebit, accTrnId";

        else

            query =          "SELECT accountDocument.*,"
                    + "\n" + "       FIRST_VALUE(accountDocument.dateCarry_sort)"
                    + "\n" + "       OVER (PARTITION BY accountDocument.documentKey"
                    + "\n" + "                 ORDER BY accountDocument.carryType)               t_key_dateCarry,"
                    + "\n" + "       FIRST_VALUE(accountDocument.sumDebit_sort)"
                    + "\n" + "       OVER (PARTITION BY accountDocument.documentKey"
                    + "\n" + "             ORDER BY accountDocument.carryType)                   t_key_sumDebit,"
                    + "\n" + "       FIRST_VALUE(accountDocument.sumCredit_sort)"
                    + "\n" + "       OVER (PARTITION BY accountDocument.documentKey"
                    + "\n" + "                 ORDER BY accountDocument.carryType)               t_key_sumCredit,"
                    + "\n" + "       accountDocument.documentKey                                 t_key_documentKey,"
                    + "\n" + "       accountDocument.carryType                                   t_key_carryType"
                    + "\n" + "  FROM (" + makeMainQuery();

                    /* EVG 6/05/2014 По просьбе Елены Богатырёвой (ГЭБ) и по согласованию с Еленой Шевцовой (ВУЗ)
                       при формировании выписки с эквивалентом проводки переоценки в отчёт не выводятся.
                    + "\n" + "        UNION ALL"
                    + "\n" + "        " + makeSpecialDocumentQuery()
                    */

                    /* EVG 17/06/2014 По просьбе Елены Шевцовой (для проверялок) сделал возможность вывода документов
                       переоценки, если не установлен соответствующий флажок исключения */
                    if( not m_parameters.cSetExcludeRevalue )
                       query = query + "\n" + "        UNION ALL"
                                     + "\n" + "        " + makeSpecialDocumentQuery()
                    end;

                    query = query + "\n" + "       ) accountDocument"
                    + "\n" + " ORDER BY t_key_dateCarry,"

                    /* EVG 8/04/2014 Аналогично для выписки с флагом "Эквивалент в нац. валюте"
                    + "\n" + "          t_key_sumDebit NULLS LAST,"
                    + "\n" + "          t_key_sumCredit NULLS LAST," */
                    + "\n" + "          t_key_sumCredit NULLS LAST,"
                    + "\n" + "          t_key_sumDebit NULLS LAST,"

                    + "\n" + "          t_key_documentKey,"
                    + "\n" + "          t_key_carryType,"
                    + "\n" + "          accountDocument.accTrnId"
                    ;

        end;

        m_query.cmdText = query;

    end;
    
    /**
    * Получить RsdCommand запроса для отбора проводок
    *
    * @returns RsdCommand запроса для отбора проводок
    */
    macro getQuery()
        return m_query;
    end;

    /**
     * Конструктор. При вызове формирует текст запроса
     * 
     * @param     parameters           параметры отчета
     */
    private macro constructor(parameters : Object)
        
        m_parameters = parameters;

        m_dateIn = getSqlDate(m_parameters.dateIn);

        m_dateOut = getSqlDate(m_parameters.dateOut);

        m_mainAccount = m_parameters.account.accId;

        m_needEquivalent = (m_parameters.account.currency != NATCUR) and (m_parameters.natcurEquivalent);

        m_query = RsdCommand(rslDefCon);
        m_query.nullConversion = true;

        make();

    end;
   
   constructor(parameters);

end;     // class TDocumentQueryMaker(parameters : Object)

/* Класс с параметрами отчета */
private CLASS TAccStatementInfo
(
  pDprtID,
  pOrgStructure,
  pIssueMode,
  pNumPlan,
  pChapter,
  pCurrency,
  pDateIn,
  pDateOut,
  pClient,
  pOper,
  pBalanceMask,
  pAccountMask,
  pKindSort,
  pOutForm,
  pAlg,
  pSubsystem,
  pPrGround,
  pDblPrint,
  pDocOnlyData,
  pNatCurEquivalent,
  pSPODTurnsTotal,
  pcSetA,
  pcSetZTurn,
  pcSetCr,
  pcEveryDayOfPrd,
  pcSetExcludeRevalue,
  pExcludeOcp,
  pAccountType,
  pAccountUserType,
  pNeedText,
  pNeedExcel,
  pNeedWord,
  pShowStorno,
  pUserTypeMethod,
  pExcludeInternetAccount
)
    private var OldDateIn = Date(0,0,0), OldDateOut = Date(0,0,0), OldCurrency = NATCUR;
    
    private var Rate_In  = TRecHandler("ratedef.dbt"),
                Rate_Out = TRecHandler("ratedef.dbt"),;
    
    private var m_documentTableFieldList : String;
    
    private var m_documentInfoTableFieldList : String;
    
    var commissionIncomeAccounts : String;
    
    var OcpAccountServer;
    
    var DocInfo;
  private var m_cacheTableName;
    
  var
      pr_documentr = TBFile("accTrn.dbt"),
      pr_documentc = TBFile("accTrn.dbt");
    
  var pr_pmpaym   = TRecHandler("pmpaym.dbt"),
      pr_debit    = TRecHandler("pmprop.dbt"),
      pr_credit   = TRecHandler("pmprop.dbt"),
      pr_pmrmprop = TRecHandler("pmrmprop.dbt");
    
  var pr_multydoc = TRecHandler("multydoc.dbt");

  var Account, /* объект TRsbDataSet*/
      DepartmentList,
      AccountFilter,
      BranchAndDprtFilter,
      RateIn,
      RateOut,
      CurrentFormat,
      StatementLineNumber,
      printFullNameClient,
      DprtID                 = pDprtID,
      OrgStructure           = pOrgStructure,
      IssueMode              = pIssueMode,
      NumPlan                = pNumPlan,
      Chapter                = pChapter,
      Currency               = pCurrency,
      DateIn                 = pDateIn,
      DateOut                = pDateOut,
      Client                 = pClient,
      Oper                   = pOper,
      BalanceMask            = pBalanceMask,
      AccountMask            = pAccountMask,
      KindSort               = pKindSort,
      OutForm                = pOutForm,
      Format                 = pAlg,
      Subsystem              = pSubsystem,
      PrGround               = pPrGround,
      DblPrint               = pDblPrint,
      DocOnlyData            = pDocOnlyData,
      NatCurEquivalent       = pNatCurEquivalent,
      SPODTurnsTotal         = pSPODTurnsTotal,
      cSetA                  = pcSetA,
      cSetZTurn              = pcSetZTurn,
      cSetCr                 = pcSetCr,
      cEveryDayOfPrd         = pcEveryDayOfPrd,
      cSetExcludeRevalue     = pcSetExcludeRevalue,
      ExcludeOcp             = pExcludeOcp,
      AccountType            = pAccountType,
      AccountUserType        = pAccountUserType,
      needText               = pNeedText,
      needExcel              = pNeedExcel,
      needWord               = pNeedWord,
      showStorno             = pShowStorno,
      userTypeMethod         = pUserTypeMethod,
      excludeInternetAccount = pExcludeInternetAccount;

  var needEquivalent = false;
    
  private var m_payerComissionAccounts;
  private var m_receiverComissionAccounts;
    
  /* EVG 18/12/2013 Пользовательская функция - видимо, 28.01.2013 AAN C-16016 */
  /* LAO 22/07/2014 адаптация функции для 2031 мультиаккаунт I-00502775-3*/
  macro get_acc_name_note(account_num)                                    //28.01.2013 AAN  C-16016
      var querr = rsdcommand( " SELECT NOTE.T_DATE, " +                   // получаем из примечания 7 историю названий счёта
                              "        NOTE.T_VALIDTODATE, " +
                              "        ACC.T_ACCOUNT, " +
                              "        UTL_RAW.cast_to_varchar2 (t_text) t_name_ac " +
                              "   FROM dnotetext_dbt note, daccount_dbt acc " +
                              "  WHERE note.t_objecttype = 4 AND note.t_notekind = 7 " +
                              "    AND note.t_documentid = rsb_rep_ac.makeaccountid (TO_CHAR (ACC.T_ACCOUNT), ACC.T_CODE_CURRENCY, 1, NULL) " +
                              "    AND ACC.T_ACCOUNT = '" + account_num + "'" +
                              "    order by NOTE.T_VALIDTODATE DESC" );
      var rez = rsdrecordset(querr);
      return rez;
  end; 
  
  private macro RateAsString(dat, Rate)
      var strRate = "";

      if (ПолучитьЗначениеКурса(Rate, dat) != 0)
          Rate.rec.Rate = 0;
      end;

      ПолучитьСтрокуЗначенияКурса(Rate, 0, strRate);

      if (Rate.rec.Scale != 1)
          if (Rate.rec.IsInverse != "") 
              strRate = string(Rate.rec.Scale) + "/" + strRate;
          else
              strRate = strRate + "/" + string(Rate.rec.Scale);
          end;
      elif (Rate.rec.IsInverse != "") 
          strRate = string(Rate.rec.Scale) + "/" + strRate;
      end;

      return strRate;
  end;
  
  macro getDocumentTableFieldList()
      return m_documentTableFieldList;
  end;
  
  macro getDocumentInfoTableFieldList()
      return m_documentInfoTableFieldList;
  end;
    
  macro getPayerComissionAccounts()
    return m_payerComissionAccounts;
  end;

  macro getReceiverComissionAccounts()
    return m_receiverComissionAccounts;
        end;

  macro getCacheTableName()
    return m_cacheTableName;
  end;

  private macro Constructor()
    var stat = 0;
    var i;

    DepartmentList        = RepDepartmentList(OrgStructure, IssueMode, DprtID);

    AccountFilter         = RepAccountFilter(DepartmentList, PRIV_GET_ACCOUNT_DATA_FOR_REPORTS);
    BranchAndDprtFilter   = RepBranchAndDepartmentFieldFilter(DepartmentList);

    OcpAccountServer = RepOcpAccountServer(Chapter, Currency, DepartmentList);

    DocInfo               = RepDocInfoServer(PTCK_ALL, B2I(DocOnlyData));

    Апострофы = cSetA;

    m_documentTableFieldList = getSqlFldList("accTrn.dbt", null, "document", "doc_");

    m_documentInfoTableFieldList = getSqlFldList("docinfo.rec", null, "documentInfo", "docInf_");

    getRegistryValue("REPORT/ВЫПИСКА/СЧЕТА ПРОВОДОК КОМИССИИ", V_STRING, commissionIncomeAccounts, stat);

    if (stat != 0)
        commissionIncomeAccounts = "";
    else
        commissionIncomeAccounts = trim(commissionIncomeAccounts);
    end;

    getRegistryValue("REPORT/ВЫПИСКА/ПОЛНОЕ_НАИМЕНОВАНИЕ_КЛИЕНТА", V_BOOL, printFullNameClient, stat);

    if (stat != 0)
        printFullNameClient = true;
    end;

    m_payerComissionAccounts = convertMaskToSQLFormat(commissionIncomeAccounts, "document.t_account_payer");
    m_receiverComissionAccounts = convertMaskToSQLFormat(commissionIncomeAccounts, "document.t_account_receiver");

    m_cacheTableName = docInfo.getCacheTableName();

  end;
  
  /* Фильтр по маске б\с, номеру плана, фильтр технических счетов */
  macro accountFilterMaskBalance(accountAlias)
      defaultParm(accountAlias, "");

      const balanceField = "ab.t_balance" + numPlan;
      const blncMask = ternary(balanceMask != "", "\n" + "           AND rsb_mask.compareStringWithMask(" + getSqlString(balanceMask) + ", balance.t_balance) = 1", "");
      
      var abCond = balanceField + " != " + getSqlString("")
          + "\n" + "AND EXISTS (SELECT NULL"
          + "\n" + "              FROM dbalance_dbt balance"
          + "\n" + "             WHERE balance.t_balance = " + balanceField
          + "\n" + "               AND balance.t_chapter = ab.t_chapter"
          + "\n" + "               AND balance.t_iNumPlan = " + numPlan
          + "\n" + "               AND LENGTH(TRANSLATE('|' || balance.t_type_balance, '|' || 'Т', '|')) != LENGTH(balance.t_type_balance)"
          +                    blncMask
          + "\n" + "           )"
          ;

      /* EVG 18/12/2013 Это пользовательский код - видимо, древний, потому что не подписан.
         Так как работа с главами в отчёте изменилась (chapter теперь массив, getChapterFilterClause() 
         пропала), он в камменте. При необходимости, реанимируем.

      var abCond = "",
      BlncMask = "";
      var qChapter = "SELECT t_Chapter FROM dobchaptr_dbt WHERE"; 
      qChapter = qChapter + " " + getChapterFilterClause();
      var wrkChapters = TRsbDataSet(qChapter, RSDVAL_CLIENT, RSDVAL_STATIC);
      if (wrkChapters.First())
          BlncMask = FilterMaskBalance(BalanceMask, NumPlanArray/*[wrkChapters.Chapter-1]*/);
          abCond = abCond + "("+ChapterField+" = "+wrkChapters.Chapter+" AND "+BlncMask+")";
          while(wrkChapters.Next())
              BlncMask = FilterMaskBalance(BalanceMask, NumPlanArray[wrkChapters.Chapter-1]);
              abCond = abCond + " OR ("+ChapterField+" = "+wrkChapters.Chapter+" AND "+BlncMask+")";
          end;
      else
          println("Нет данных для отчета");
          return B2SQL(false);
      end;*/

      return abCond;
  end;
  
  macro createLoansAccount()
    var fillCommand;

    var chapterList = strAssemble(chapter, ",");

    departmentList.saveToTable();

    fillCommand = RsdCommand("BEGIN"
                    + "\n" + "    rep_accountstatement.init(?,"
                    + "\n" + "                              ?,"
                    + "\n" + "                              ?,"
                    + "\n" + "                              ?,"
                    + "\n" + "                              ?,"
                    + "\n" + "                              ?,"
                    + "\n" + "                              ?,"
                    + "\n" + "                              ?,"
                    + "\n" + "                              ?,"
                    + "\n" + "                              ?,"
                    + "\n" + "                              ?,"
                    + "\n" + "                              ? "
                    + "\n" + "                             );"
                    + "\n" + ""
                    + "\n" + "    rep_accountstatement.fillLoansAccountData('replnsaccount_vw',"
                    + "\n" + "                                              'repLnsContract_vw',"
                    + "\n" + "                                              'ormLnsDocument'"
                    + "\n" + "                                             );"
                    + "\n" + "END;"
                                  );

    fillCommand.addParam("dateIn",              RSDBP_IN, dateIn);
    fillCommand.addParam("dateOut",             RSDBP_IN, dateOut);
    fillCommand.addParam("clientId",            RSDBP_IN, client);
    fillCommand.addParam("operNumber",          RSDBP_IN, oper);
    fillCommand.addParam("currencyId",          RSDBP_IN, currency);
    fillCommand.addParam("chapterNumber",       RSDBP_IN, chapterList);
    fillCommand.addParam("accountMask",         RSDBP_IN, convertMaskToSqlFormat(accountMask, "$STRING_TO_REPLACE$"));
    fillCommand.addParam("balanceMask",         RSDBP_IN, convertMaskToSqlFormat(balanceMask, "$STRING_TO_REPLACE$"));
    fillCommand.addParam("showZeroTurn",        RSDBP_IN, ternary(cSetZTurn, "X", "O"));
    fillCommand.addParam("subsystemCbId",       RSDBP_IN, REP_SUBSYSTEMS_CB);
    fillCommand.addParam("subsystemLoansId",    RSDBP_IN, REP_SUBSYSTEMS_LOANS);
    fillCommand.addParam("printFullNameClient", RSDBP_IN, ternary(printFullNameClient, "X", "O"));

    sql_execute(fillCommand);

    return NULL;
  end;
  
  macro DPD()
      return Ternary(NVL(Account.DPD, "") == ZeroDate, "", string(Account.DPD:f));
  end;
  
  macro DPD_R()
      return Ternary(NVL(Account.DPD_R, "") == ZeroDate, "", string(Account.DPD_R:f));
  end;
  
  macro INN()
      return NVL(Account.INN, "");
  end;
  
  macro Next()

      var retVal;

      if (Account.Next())
          if ((Account.Currency != NATCUR) and ((OldDateIn != DateIn) or (OldDateOut != DateOut) or (OldCurrency != Account.Currency)))
              if (not ПолучитьКурс(Rate_In, NATCUR, Account.Currency, RATETYPE_CB))
                  Copy(Rate_Out, Rate_In);
                  RateIn  = RateAsString(DateIn-1, Rate_In); // KS 18.03.2011 Курс ВХОДЯЩИЙ
                  RateOut = RateAsString(DateOut, Rate_Out);

                  OldDateIn   = DateIn; 
                  OldDateOut  = DateOut;
                  OldCurrency = Account.Currency;
              else
                  RateIn  = NOTFOUND;
                  RateOut = NOTFOUND;
              end;
          end;
          
          /* Определяем формат выписки для текущего счета */
          if (Account.InitialSubsystem == REP_SUBSYSTEMS_LOANS)
              CurrentFormat = ACC_FORMATS_BANK;
          else
              CurrentFormat = Format;
          end;

          StatementLineNumber = 0;

          retVal = true;
      else
          retVal = false;
      end;

      needEquivalent = NatCurEquivalent and (Account.Currency != NATCUR) and (Account.InitialSubsystem == REP_SUBSYSTEMS_CB);

      return retVal;

  end;
  
  macro DebugPrint()
      println(Account.Acc:25, Account.AccName:50, Account.NameClnt:30, 
              Account.Oper:25, Account.CurrencyName:20, Account.RestIn:20, 
              Account.RestInEq:20, Account.RestOut:20, Account.RestOutEq:20, RateIn:15:r, 
              RateOut:15:r, Account.TypeAccount:10:r);
  end;
  
  Constructor();
END; //  CLASS TAccStatementInfo


/* Класс проводки */
private CLASS TDocument(pOrgStructure)
  //TAM 14.10.11 I-00101393-2
  var PayerBankID, ReceiverBankID;
  private var OrgStructure = pOrgStructure,
              Subsystem, InitialSubsystem, CurrentFormat,
              DocumentCb = TRecHandler("accTrn.dbt");

  private var m_isCbDocument;
  private var m_departmentsDatasetName = ternary(pOrgStructure == TERRITORIAL, "dRepDpDep_vw", "dRepDpReg_vw");

  private var m_needFDocs;

  var DocStorage, /* данные для печати приложений */

      DataSet, /* объект TRsbDataSet или RepLnsDocumentSt */

      OverallDocs,
        
      AllSumDebit : Money,
      AllSumCredit : Money,
      AllSumDebitEq : Money,
      AllSumCreditEq : Money,
        
      AllSumDebitSPOD : Money,
      AllSumCreditSPOD : Money,
      AllSumDebitSPODEq : Money,
      AllSumCreditSPODEq : Money,
        
      DocT = "";
    
  macro Constructor(CmdText, accInfo)
    var queryText;

    subsystem        = accInfo.account.subsystem;            /* подсистема-источник данных */
    initialSubsystem = accInfo.account.initialSubsystem;     /* подсистема-источник счета  */
    currentFormat    = accInfo.currentFormat;                /* формат выписки для текущего счета */
    m_needFDocs      = accInfo.outForm != ACC_FORMS_NOTHING; /* признак печати приложений */
        
    if (subsystem == REP_SUBSYSTEMS_LOANS)

      queryText = "SELECT (SELECT account.t_chapter"
         + "\n" + "          FROM repLnsAccount_vw account"
         + "\n" + "         WHERE account.t_id = document.a_accId"
         + "\n" + "       )                                             AS t_chapter,"
         + "\n" + "       (SELECT account.t_departmentId"
         + "\n" + "          FROM repLnsAccount_vw account"
         + "\n" + "         WHERE account.t_id = document.a_accId"
         + "\n" + "       )                                             AS t_department,"
         + "\n" + "       (SELECT cbaccount.t_oper"
         + "\n" + "          FROM daccount_dbt cbaccount,"
         + "\n" + "               repLnsAccount_vw account"
         + "\n" + "         WHERE account.t_id = document.a_accId"
         + "\n" + "           AND cbaccount.t_account = account.t_cbAccount"
         + "\n" + "           AND cbaccount.t_chapter = account.t_chapter"
         + "\n" + "           AND cbaccount.t_code_currency = account.t_fiId"
         + "\n" + "       )                                             AS t_operNumber,"
         + "\n" + "       CASE"
         + "\n" + "           WHEN EXISTS (SELECT NULL"
         + "\n" + "                          FROM repLnsAccount_vw account"
         + "\n" + "                         WHERE account.t_id = document.a_accId"
         + "\n" + "                           AND account.t_account = document.a_debit"
         + "\n" + "                       )"
         + "\n" + "           THEN " + DEBIT_C
         + "\n" + "           ELSE " + CREDIT_C
         + "\n" + "       END                                           AS t_dk,"
         + "\n" + "       CASE"
         + "\n" + "           WHEN EXISTS (SELECT NULL"
         + "\n" + "                          FROM repLnsAccount_vw account"
         + "\n" + "                         WHERE account.t_id = document.a_accId"
         + "\n" + "                           AND account.t_account = document.a_debit"
         + "\n" + "                       )"
         + "\n" + "           THEN document.a_carrySum"
         + "\n" + "           ELSE 0"
         + "\n" + "       END                                           AS t_sumDebit,"
         + "\n" + "       0                                             AS t_sumDebitEq,"
         + "\n" + "       CASE"
         + "\n" + "           WHEN EXISTS (SELECT NULL"
         + "\n" + "                          FROM repLnsAccount_vw account"
         + "\n" + "                         WHERE account.t_id = document.a_accId"
         + "\n" + "                           AND account.t_account = document.a_credit"
         + "\n" + "                       )"
         + "\n" + "           THEN document.a_carrySum"
         + "\n" + "           ELSE 0"
         + "\n" + "       END                                           AS t_sumCredit,"
         + "\n" + "       0                                             AS t_sumCreditEq,"
         + "\n" + "       CASE"
         + "\n" + "           WHEN EXISTS (SELECT NULL"
         + "\n" + "                          FROM repLnsAccount_vw account"
         + "\n" + "                         WHERE account.t_id = document.a_accId"
         + "\n" + "                           AND account.t_account = document.a_debit"
         + "\n" + "                       )"
         + "\n" + "           THEN document.a_credit"
         + "\n" + "           ELSE document.a_debit"
         + "\n" + "       END                                           AS t_account,"
         + "\n" + "       document.a_carryDate                          AS t_date_carry,"
         + "\n" + "       document.a_curCode                            AS t_code_currency,"
         + "\n" + "       0                                             AS t_carryId,"
         + "\n" + "       0                                             AS t_paymentId,"
         + "\n" + "       0                                             AS t_autokey,"
         + "\n" + "       document.a_ground                             AS t_ground,"
         + "\n" + "       document.a_outDocId                           AS t_outDocId,"
         + "\n" + "       document.a_debit                              AS t_debit,"
         + "\n" + "       document.a_credit                             AS t_credit,"
         + "\n" + "       0                                             AS t_payerCodeKind,"
         + "\n" + "       CHR(1)                                        AS t_payerBankCode,"
         + "\n" + "       0                                             AS t_receiverCodeKind,"
         + "\n" + "       CHR(1)                                        AS t_receiverBankCode,"
         + "\n" + "       1                                             AS isInternalDocument,"
         + "\n" + "       document.a_carrysum                           AS t_carrysum"
         + "\n" + "  FROM ormLnsDocument document"
         + "\n" + " WHERE document.a_accId = " + int(accInfo.account.accId)
         + "\n" + "   AND (    document.a_carryDate >= " + getSqlDate(accInfo.dateIn)
         + "\n" + "        AND document.a_carryDate <= " + getSqlDate(accInfo.dateOut)
         + "\n" + "       )"
         + "\n" + " ORDER BY t_date_carry,"
         + "\n" + "          t_sumDebit,"
         + "\n" + "          t_sumCredit";

      dataset = TRsbDataset(queryText);

      dataset.setFieldType("t_date_carry",  V_DATE);
      dataset.setFieldType("t_sumDebit",    V_MONEY);
      dataset.setFieldType("t_sumCredit",   V_MONEY);
      dataset.setFieldType("t_sumDebitEq",  V_MONEY);
      dataset.setFieldType("t_sumCreditEq", V_MONEY);
      dataset.setFieldType("t_paymentId",   V_INTEGER);
            
    else

      DataSet = TRsbDataset(CmdText);

      DataSet.SetFieldType("Date_Carry",  V_DATE);
      DataSet.SetFieldType("SumDebit",    V_MONEY);
      DataSet.SetFieldType("SumCredit",   V_MONEY);
      DataSet.SetFieldType("SumDebitEq",  V_MONEY);
      DataSet.SetFieldType("SumCreditEq", V_MONEY);
      dataset.setFieldType("paymentId",   V_INTEGER);

      /* EVG 27/12/2013 Формат для польз. полей */
      DataSet.SetFieldType("formSum", V_MONEY);

    end;
    
    OverallDocs = 0;

    AllSumDebit    = $0;
    AllSumCredit   = $0;
    AllSumDebitEq  = $0;
    AllSumCreditEq = $0;
    
    AllSumDebitSPOD    = $0;
    AllSumCreditSPOD   = $0;
    AllSumDebitSPODEq  = $0;
    AllSumCreditSPODEq = $0;
        
    if (m_needFDocs)
      DocStorage = TArray(10,10);
    end;
  end;
    
  private macro CheckDocumentCb()
      if (m_isCbDocument == null)
          m_isCbDocument = ((DocumentCb.rec.Date_Carry == DataSet.Date_Carry)   and
                            (DocumentCb.rec.Sum_Payer == DataSet.CarrySum)      and
                            (DocumentCb.rec.Account_Payer == DataSet.Debit)     and
                            (DocumentCb.rec.Account_Receiver == DataSet.Credit));
      end;

      return m_isCbDocument;
  end;
  
  private macro GetIDs()
    payerBankID = abs(TPartyIdCachedData().getPartyId(DataSet.PayerBankCode, DataSet.PayerCodeKind, DataSet.Date_Carry)); // 04.07.2014 I-00499358-2 DPN
    receiverBankID = abs(TPartyIdCachedData().getPartyId(DataSet.ReceiverBankCode, DataSet.ReceiverCodeKind, DataSet.Date_Carry)); // 04.07.2014 I-00499358-2 DPN
  end;


  /* EVG 6/03/2014 Процедура поиска информации по проводке вынесена в отдельную функцию, чтобы её было
     удобно вызывать из разных мест. */
  /* EVG 7/05/2014 Немного оптимизировал + отучил подменять счета на корсчёт */
  macro GetDataFromCarry( pmId, trnId, accPayer:@string, accReceiver:@string, ground:@string )
     var sql, cmd, rs;
     var count = 0;


     /* EVG 7/05/2014 Функция проверки и подстановки данных из проводки */
     var Бал1Корсчёт = "301";
     macro setData()
        var trnAccPayer = rs.value("t_account_payer"),
            trnAccReceiver = rs.value("t_account_receiver");

        if( subStr( trnAccPayer, 1, 3 ) != Бал1Корсчёт )
           accPayer = trnAccPayer;
        end;

        if( subStr( trnAccReceiver, 1, 3 ) != Бал1Корсчёт )
           accReceiver = trnAccReceiver;
        end;

        ground = rs.value("t_ground");
     end;


     sql = (" SELECT trn.t_account_payer, trn.t_account_receiver, trn.t_ground  " + 
            " FROM   dacctrn_dbt trn, dpmdocs_dbt docs     " +
            " WHERE  trn.t_AccTrnId    = ?                 " + 
            "   AND  docs.t_PaymentId  = ?                 " +
            "   AND  trn.t_AccTrnId    = docs.t_AccTrnId   " 
            );
     cmd = rsdCommand( sql );
     cmd.addParam( "", RSDBP_IN, trnId );
     cmd.addParam( "", RSDBP_IN, pmId  );
     rs = rsdRecordSet( cmd );

     while( rs and rs.moveNext() )
         setData();
         count = count + 1;
     end;

     //Gurin S. 23.04.2014 I-00481987-2 Если проводка без платежа
     if( not count )
         sql = (" SELECT trn.t_account_payer, trn.t_account_receiver, trn.t_ground  " + 
                " FROM   dacctrn_dbt trn " +
                " WHERE  trn.t_AccTrnId = ? " 
                );
         cmd = rsdCommand( sql );
         cmd.addParam( "", RSDBP_IN, trnId );
         rs = rsdRecordSet( cmd );
         while( rs and rs.moveNext() )
             setData();
             count = count + 1;
         end;
     end;

     if( not count )
        msgbox(" Функция GetGroundFromCarry(): Не найдена проводка по платежу!");
     end;

     return count;
  end;

    
  /* 31.10.2006 ABP SCR 94026. Получение корректного корреспондирующего счета */
  /* EVG 4/03/2014 Адаптировал для 2031 */
  /* EVG 7/05/2014 Сделал приём счёта из документа */
  macro GetCorrectCbCorrespondingAccount( isDebit, retGround:@string, docAccount )
      if ( Flag_AccState_CB and Flag_acc_is_carry )    //  24.07.2013 AAN  C-22055 добавил этот блок для спец выписки

          /* EVG 6/03/2014 Вынесено в функцию GetCarryData() чуть выше.
          var sql_acc_receiver_arhdoc = (" SELECT trn.t_account_receiver, trn.t_ground                " + 
                                         " FROM   dpmpaym_dbt paym, dacctrn_dbt trn, dpmdocs_dbt docs " +
                                         " WHERE  paym.t_paymentid  = " + DataSet.paymentid             +
                                         "   AND  trn.t_AccTrnId    = " + DataSet.docInf_AutoKey        + 
                                         "   AND  docs.t_PaymentId  = paym.t_PaymentId                " +
                                         "   AND  trn.t_AccTrnId    = docs.t_AccTrnId                 " 
                                         );
          var acc_receiver_CB = rsdrecordset(sql_acc_receiver_arhdoc);
          if(acc_receiver_CB.movenext())

              /* EVG 4/03/2014 Теперь иначе.
              dataset.ground = acc_receiver_CB.value("t_ground");           заменяем основание из платежа на основание из проводки */
              retGround = acc_receiver_CB.value("t_ground");

              return acc_receiver_CB.value("t_account_receiver");
          else
              msgbox(" Не найдена проводка по платежу! ");
          end;
          */

          /* EVG 19/03/2014 Реализовано разделение на Дебет и Кредит, т.к. для кредитовых документов нужно возвращать
             счёт плательщика */
          /* EVG 7/05/2014 По умолчанию возвращаемый счёт - счёт из документа
          var retAccoun;*/
          var retAccount = docAccount;
          if( isDebit )
             GetDataFromCarry( DataSet.paymentid, DataSet.docInf_AutoKey, null, @retAccount, @retGround );
          else
             GetDataFromCarry( DataSet.paymentid, DataSet.docInf_AutoKey, @retAccount, null, @retGround );
          end;
          return retAccount;

      else    //  24.07.2013 AAN  C-22055 а вот так было раньше, и так работает если выписка обычного вида
          /* EVG 7/05/2014 По умолчанию возвращаемый счёт - счёт из документа
          var correctCbCorrespondingAccount = "";*/
          var correctCbCorrespondingAccount = docAccount;
          var ds;
          var query;
          var queryText;
          
          if ((isDebit) and (DataSet.ReceiverAccount != ""))
              return DataSet.ReceiverAccount;
          end;

          if ((not isDebit) and (DataSet.PayerAccount != ""))
              return DataSet.PayerAccount;
          end;

          /* Чтоб лишний раз БД не дергать*/
          if (DataSet.PaymentId != 0)

              /* EVG 6/03/2014 Заменил на вызов GetDataFromCarry(). Надеюсь, тему с next() понял правильно.
              //30.01.2013 Слетает план запроса, добавил хинт LAO
              queryText =  "SELECT /*+ index(pmdoc dpmdocs_dbt_idx0) */ doc.t_account_payer    AS t_payerAccount,"
                  + "\n" + "       doc.t_account_receiver AS t_receiverAccount"
                  + "\n" + "  FROM daccTrn_dbt " + " doc,"
                  + "\n" + "       dpmdocs_dbt pmdoc"
                  + "\n" + " WHERE pmdoc.t_PaymentId = ?"
                  + "\n" + "   AND pmdoc.t_accTrnId = doc.t_accTrnId";

              query = RsdCommand(rslDefCon, queryText);
              query.addParam("paymentId", RSDBP_IN, DataSet.PaymentId);
              query.nullConversion = true;

              ds = TRsbDataset(query);

              if (ds.next())
                  if (isDebit)
                      correctCbCorrespondingAccount = nvl(ds.receiverAccount, "");
                  else
                      correctCbCorrespondingAccount = nvl(ds.payerAccount, "");
                  end;

                  if (ds.next())
                      correctCbCorrespondingAccount = "";
                  end;
              else
                  correctCbCorrespondingAccount = "";
              end;
              */
              var cnt = 0;
              if (isDebit)
                 cnt = GetDataFromCarry( DataSet.paymentid, DataSet.docInf_AutoKey, null, @correctCbCorrespondingAccount );
              else
                 cnt = GetDataFromCarry( DataSet.paymentid, DataSet.docInf_AutoKey, @correctCbCorrespondingAccount, null );
              end;

              if( cnt > 1 )
                  correctCbCorrespondingAccount = "";
              end;

          else
              correctCbCorrespondingAccount = "";
          end;

          return correctCbCorrespondingAccount;
      end;
  end;
  
  private macro GetCorrectLoansCorrespondingAccount()
      if(CheckDocumentCb())
          if (DataSet.DK == DEBIT_C)
              return DocumentCb.rec.Account_Payer;
          else
              return DocumentCb.rec.Account_Receiver;
          end;
      elif(DataSet.Account != "")
          return DataSet.Account;
      else
          if (DataSet.DK == DEBIT_C)
              return DocumentCb.rec.Account_Payer;
          else
              return DocumentCb.rec.Account_Receiver;
          end;
      end;
  end;
  
  macro CorrBankAcc()
      if (dataSet.isInternalDocument == 0)
          if (PayerBankID == {OurBank})
              if (DataSet.ReceiverCorrAcc == NULL)
                  return EMPTY_STRING;//NOTFOUND;
              else
                  return DataSet.ReceiverCorrAcc;
              end;
          else
              if (DataSet.PayerCorrAcc == NULL)
                  return EMPTY_STRING;//NOTFOUND;
              else
                  return DataSet.PayerCorrAcc;
              end;
          end;
      else
          return EMPTY_STRING;
      end;
  end;
  
  macro BIC()
      var err, code;
      if (dataSet.isInternalDocument == 0)
          if (PayerBankID == {OurBank})
              // KS 17.05.2012 I-00172012 В 30ке перепутано docInf_ReceiverBic и docInf_PayerBic.
              //               А иногда и неперепутано. Поэтому делаю так
              // BEGIN 05.07.2013 AAN  I-00394329-3
              /*if (DataSet.docInf_PayerBic != {MFO_BANK})
                  DataSet.docInf_ReceiverBic   = DataSet.docInf_PayerBic;
                  DataSet.docInf_ReceiverSwift = DataSet.docInf_PayerSwift;
              end;*/
              if (dataset.docinf_Payerbankcode != {MFO_BANK})
                  dataset.docinf_receiverbankcode  = dataset.docinf_Payerbankcode;
                  DataSet.docInf_ReceiverSwift     = DataSet.docInf_PayerSwift;
              end;
              // END 05.07.2013 AAN  I-00394329-3
              // KS 17.05.2012 I-00172012 End
              
              if (TPartyCachedData().getResidentFlag(ReceiverBankID))
                  // code = nvl(DataSet.docInf_ReceiverBic, EMPTY_STRING);    // 05.07.2013 AAN  I-00394329-3
                  code = nvl(dataset.docinf_receiverbankcode, EMPTY_STRING);
              else /*Если банк-корреспондент является нерезидентом*/
                  code = nvl(DataSet.docInf_ReceiverSwift, EMPTY_STRING);
              end;
          else
              // KS 17.05.2012 I-00172012 В 30ке перепутано docInf_ReceiverBic и docInf_PayerBic.
              //               А иногда и неперепутано. Поэтому делаю так
              
              // BEGIN 05.07.2013 AAN  I-00394329-3
              /*if (DataSet.docInf_PayerBic == {MFO_BANK})
                  DataSet.docInf_PayerBic   = DataSet.docInf_ReceiverBic;
                  DataSet.docInf_PayerSwift = DataSet.docInf_ReceiverSwift;
              end;*/
              if (dataset.docinf_Payerbankcode == {MFO_BANK})
                  dataset.docinf_Payerbankcode   = dataset.docinf_receiverbankcode;
                  DataSet.docInf_PayerSwift = DataSet.docInf_ReceiverSwift;
              end;
              //  END 05.07.2013 AAN  I-00394329-3
              
              // KS 17.05.2012 I-00172012 End

              if (TPartyCachedData().getResidentFlag(PayerBankID))
                  // code = nvl(DataSet.docInf_PayerBic, EMPTY_STRING);   // 05.07.2013 AAN  I-00394329-3
                  code = nvl(dataset.docinf_Payerbankcode, EMPTY_STRING);
              else
                  code = nvl(DataSet.docInf_PayerSwift, EMPTY_STRING);
              end;
          end;
      else
          code = EMPTY_STRING;/*Если проводка внутренняя, то поле отчета "БИК" не заполняется*/

          /* EVG 6/03/2014 По просьбе Елены Шевцовой - выводится БИК наш-банка
             (только для формата "Клиентский"). */
          if( CurrentFormat == ACC_FORMATS_CLIENT )
             code = {MFO_BANK};
          end;

      end;

      return code;
  end;
  
  macro Shifr_Oper()
      if (Subsystem == REP_SUBSYSTEMS_CB)
          return DataSet.Shifr_Oper;
      else
          return DocumentCb.rec.Shifr_Oper;
      end;
  end;
  
  macro Numb_Document()
      if (Subsystem == REP_SUBSYSTEMS_CB)
          return DataSet.Numb_Document;
      else
          return DocumentCb.rec.Numb_Document;
      end;
  end;
  
  macro Ground()

      /* EVG 6/03/2014 Если назначение платежа не определено (например, в операциях на П/П/К валюты 
         такого поля просто нет), то возьмем его из проводки. */
      if( valType( DataSet.Ground ) == V_UNDEF )
         GetDataFromCarry( DataSet.paymentid, DataSet.docInf_AutoKey, null, null, @DataSet.Ground );
      end;


      if (Subsystem == REP_SUBSYSTEMS_CB)
          return DataSet.Ground;
      else
          if (CheckDocumentCb())
              return DocumentCb.rec.Ground;
          else
              return DataSet.Ground;
          end;
      end;
  end;
  
  macro SumDebit()
      if (Subsystem == REP_SUBSYSTEMS_CB)

          /* EVG 13/03/2014 По просьбе Полины - нули не выводятся */
          if( DataSet.SumDebit == $0 )
             return "";
          end;

          return DataSet.SumDebit;
      else
          if (CheckDocumentCb())
              if (DataSet.DK == DEBIT_C)
                  return DocumentCb.rec.Sum_Payer;
              else
                  return $0;
              end;
          else
              return DataSet.SumDebit;
          end;
      end;
  end;
  
  macro SumCredit()
      if (Subsystem == REP_SUBSYSTEMS_CB)

          /* EVG 13/03/2014 По просьбе Полины - нули не выводятся */
          if( DataSet.SumCredit == $0 )
             return "";
          end;

          return DataSet.SumCredit;
      else
          if (CheckDocumentCb())
              if (DataSet.DK == CREDIT_C)
                  return DocumentCb.rec.Sum_Receiver;
              else
                  return $0;
              end;
          else
              return DataSet.SumCredit;
          end;
      end;
  end;
  
  macro SumDebitEq()

      /* EVG 8/04/2014 Убираем вывод нулей и для эквивалента */
      if( DataSet.SumDebitEq == $0 )
         return "";
      end;

      return DataSet.SumDebitEq;
  end;
  
  macro SumCreditEq()

      /* EVG 8/04/2014 Убираем вывод нулей и для эквивалента */
      if( DataSet.SumCreditEq == $0 )
         return "";
      end;

      return DataSet.SumCreditEq; 
  end;
  
  macro Account()
      if (Subsystem == REP_SUBSYSTEMS_CB)
          /* EVG  8/5/2014 По просьбе Елены Ш. номер без точек. В январе я, скорее всего, сделал точки по аналогии
             с тем, как делалось в 2030; на самом деле никому это не нужно.
          /* EVG 14/1/2014 Номер счёта выводится с точками
          return GetCorrectCbCorrespondingAccount(DataSet.DK == DEBIT_C);*/
          /* EVG  7/5/2014 Добавил передачу счёта из документа */
          return string( GetCorrectCbCorrespondingAccount( (DataSet.DK == DEBIT_C), null, DataSet.Account ) :f );*/
          return GetCorrectCbCorrespondingAccount( (DataSet.DK == DEBIT_C), null, DataSet.Account );

      else
          return GetCorrectLoansCorrespondingAccount();
      end;
  end;



  /* EVG 27/12/2013 Определение пользовательских параметров (для расширенной выписки) */
  macro NameBank()

      private var bancBic = "";

      /* Для выписки на бланке добавляем БИК */
      if( ReportType == REPTYPE_XLS_BLANK )
         bancBic = this.BIC();
         if( strLen(bancBic) > 0 )
            return DataSet.NameBank + ", " + bancBic;
         end;
      end;
      return DataSet.NameBank;

  end;

  macro NameCntrAgent()

      /* Для выписки на бланке убираем аббревиатуры ИНН/КПП и сам КПП */
      if( ReportType == REPTYPE_XLS_BLANK )
         //12.11.2014 R-491856-2 DPN
         return DataSet.NameCntrAgent + ", " 
         + ifThenElse((subStr( DataSet.innCntrAgent, 1, index( DataSet.innCntrAgent, "/" )-1) <=0), 
                       DataSet.innCntrAgent, 
                       (subStr( DataSet.innCntrAgent, 1, index( DataSet.innCntrAgent, "/" )-1)) 
                     );
      end;

      return DataSet.NameCntrAgent + ", ИНН/КПП: " + DataSet.innCntrAgent;

  end;

  macro FormSum()
      var fSum;
 
      //fSum = DataSet.FormSum + "К";    
      fSum = DataSet.SumCredit + "К"; // 10.06.2014 R-389439-2 DPN
      if( DataSet.isDebet )
      //   fSum = DataSet.FormSum + "Д"; 
          fSum = DataSet.SumDebit + "Д"; // 10.06.2014 R-389439-2 DPN
      end;

      return fSum;
  end;
  /* EVG 27/12/2013 end */
  


  macro Next()
    var DocKind, DocCmdText, ds, ExistsOneDocumentCb;
    var query;

      if (DataSet.Next())
         GetIDs();
         if (CurrentFormat == ACC_FORMATS_BANK)
            /* нужно только при сборе данных по документам Loans (аналитика счета ведется в Loans) */
            if (Subsystem == REP_SUBSYSTEMS_LOANS)

               if (DataSet.Code_Currency == NATCUR)
                   DocKind = DLDOC_CARRY;
               else
                   DocKind = DLDOC_CARRYC;
               end;

               DocCmdText = "SELECT doc.*"
                   + "\n" + "  FROM doprdocs_dbt odoc,"
                   + "\n" + "       daccTrn_dbt doc"
                   + "\n" + " WHERE odoc.t_Id_Operation = ?"
                   + "\n" + "   AND odoc.t_DocKind = ?"
                   + "\n" + "   AND odoc.t_DocumentId != ?"
                   + "\n" + "   AND doc.t_accTrnId = odoc.t_accTrnId";

               query = RsdCommand(rslDefCon, DocCmdText);
               query.addParam("outDocumentId", RSDBP_IN, DataSet.OutDocID);
               query.addParam("documentKind", RSDBP_IN, DocKind);
               query.addParam("emptyStringCode", RSDBP_IN, EMPTY_STRING_ORACLE);
               query.nullConversion = true;

               ds = TRsbDataset(query);
               if (ds.Next())
                  ds.GetRecord().CopyTo(DocumentCb.rec);

                  DocumentCb.rec.accTrnId         = 0;
                  DocumentCb.rec.SHIFR_OPER       = Shifr_Oper; 
                  DocumentCb.rec.NUMB_DOCUMENT    = Numb_Document; 
                  DocumentCb.rec.GROUND           = Ground; 

                  ExistsOneDocumentCb = true;
                  if (ds.Next())
                      ExistsOneDocumentCb = false;
                  end;
               else
                  ExistsOneDocumentCb = false;
               end;
               
               if (not ExistsOneDocumentCb)

                  DocumentCb.rec.accTrnId             = dataset.autokey;
                  DocumentCb.rec.state                = 1;
                  DocumentCb.rec.Chapter              = dataset.chapter;
                  DocumentCb.rec.Date_Carry           = dataset.t_date_carry;
                  DocumentCb.rec.Date_Rate            = date(0,0,0);
                  DocumentCb.rec.FIID_Payer           = dataset.code_currency;
                  DocumentCb.rec.FIID_Receiver        = dataset.code_currency;
                  DocumentCb.rec.AccountID_Payer      = 0;
                  DocumentCb.rec.AccountID_Receiver   = 0;
                  DocumentCb.rec.Account_Payer        = dataset.debit;
                  DocumentCb.rec.Account_Receiver     = dataset.credit;
                  DocumentCb.rec.Sum_NatCur           = $0;
                  DocumentCb.rec.Sum_Payer            = dataset.carrySum;
                  DocumentCb.rec.Sum_Receiver         = dataset.carrySum;
                  DocumentCb.rec.FIIDEq_Payer         = 0;
                  DocumentCb.rec.FIIDEq_Receiver      = 0;
                  DocumentCb.rec.SkipRestEqChange     = "";
                  DocumentCb.rec.SumEq_Payer          = $0;
                  DocumentCb.rec.SumEq_Receiver       = $0;
                  DocumentCb.rec.Result_Carry         = 1;
                  DocumentCb.rec.Number_Pack          = 0;
                  DocumentCb.rec.Oper                 = dataset.operNumber;
                  DocumentCb.rec.Department           = dataset.department;
                  DocumentCb.rec.Branch               = dataset.department;
                  DocumentCb.rec.Numb_Document        = "";
                  DocumentCb.rec.Ground               = dataset.ground;
                  DocumentCb.rec.Shifr_Oper           = "09";
                  DocumentCb.rec.Kind_Oper            = "1";
                  DocumentCb.rec.TypeDocument         = "";
                  DocumentCb.rec.UserTypeDocument     = "";
                  DocumentCb.rec.Priority             = 0;
                  DocumentCb.rec.MinPhase             = 0;
                  DocumentCb.rec.MaxPhase             = 0;
                  DocumentCb.rec.SystemDate           = date(0,0,0);
                  DocumentCb.rec.SystemTime           = time(0,0,0);
                  DocumentCb.rec.CheckSum             = "";
                  DocumentCb.rec.ExRateAccTrnID       = 0;
                  DocumentCb.rec.ParentAccTrnID       = 0;
                  DocumentCb.rec.ClaimID              = 0;
                  DocumentCb.rec.MethodID             = 0;
                  DocumentCb.rec.MinimizationTurn     = "";
                  DocumentCb.rec.ExRateAccPlusDebet   = "";
                  DocumentCb.rec.ExRateAccPlusCredit  = "";
                  DocumentCb.rec.ExRateAccMinusDebet  = "";
                  DocumentCb.rec.ExRateAccMinusCredit = "";
                  DocumentCb.rec.SkipRecalcSumNatCur  = "";
                  DocumentCb.rec.FlagRecalcSum        = 0;
                  DocumentCb.rec.Rate                 = 0;
                  DocumentCb.rec.Scale                = 1;
                  DocumentCb.rec.Point                = 2;
                  DocumentCb.rec.IsInverse            = "";
                  DocumentCb.rec.UserField1           = "";
                  DocumentCb.rec.UserField2           = "";
                  DocumentCb.rec.UserField3           = "";
                  DocumentCb.rec.UserField4           = "";
                  DocumentCb.rec.NU_Status            = 0;
                  DocumentCb.rec.NU_Kind              = 0;
                  DocumentCb.rec.NU_StartDate         = date(0,0,0);
                  DocumentCb.rec.NU_EndDate           = date(0,0,0);
                  DocumentCb.rec.NU_AckDate           = date(0,0,0);
                  DocumentCb.rec.FU_AccTrnID          = 0;

               end;
            end;
         end;

         OverallDocs = OverallDocs+1;

         AllSumDebit    = AllSumDebit+SumDebit;
         AllSumCredit   = AllSumCredit+SumCredit;
         AllSumDebitEq  = AllSumDebitEq+SumDebitEq;
         AllSumCreditEq = AllSumCreditEq+SumCreditEq;

         docT = TYPE_NOTSPOD;
         if (Subsystem == REP_SUBSYSTEMS_CB)
           if (dataset.stornoNote != "")
             var stornoNoteArray = TArray();
             stornoNoteArray = strCut(dataset.stornoNote, "|");

             docT =        stornoNoteArray.value(0)
                  + "\n" + String(Date(stornoNoteArray.value(1)) : f)
                  + "\n" + stornoNoteArray.value(2)
                  + "\n" + mkstr("_", wSPOD-1);
           end;

           //if (DataSet.isSpod > 0) //29.05.2012 vihrov  I-00200089-2
           if ((valtype(DataSet.isspod) != V_UNDEF) and (DataSet.isSpod > 0)) //29.05.2012 vihrov  I-00200089-2. (а то ошибка undefined - integer)
               DocT = TYPE_SPOD;
               AllSumDebitSPOD    = AllSumDebitSPOD+SumDebit;
               AllSumCreditSPOD   = AllSumCreditSPOD+SumCredit;
               AllSumDebitSPODEq  = AllSumDebitSPODEq+SumDebitEq;
               AllSumCreditSPODEq = AllSumCreditSPODEq+SumCreditEq;

               docT = docT + ternary(docT != TYPE_NOTSPOD, "\n", "") + TYPE_SPOD;
           end;
         end;

         if (m_needFDocs)
             if (Subsystem == REP_SUBSYSTEMS_CB)
                 DocStorage[DocStorage.Size] = ArrCreate(DataSet.Autokey, 
                                                         DataSet.DK, 
                                                         DataSet.PaymentID,
                                                         DataSet.CarryID,
                                                         DataSet.Code_Currency
                                                         );
             else

                 DocStorage[DocStorage.Size] = ArrCreate(DataSet.Autokey, 
                                                         DataSet.DK, 
                                                         DataSet.PaymentID,
                                                         DataSet.CarryID,
                                                         DataSet.Code_Currency,

                                                         DocumentCb
                                                         );
             end;
         end;

         m_isCbDocument = null;

         return true;
      end;

      return false;
  end;

END;        //    CLASS TDocument(pOrgStructure)

/************************************************************************************************************************/
/*****************************************************  ПЕЧАТЬ  *********************************************************/
/*****************************************************  НАЧАЛО  *********************************************************/
/************************************************************************************************************************/
/**
 * Структура записи для печати документов
 *
 * @since   v.6.20.030.049
 * @author  ABP
 * @version 1.0
 */
private class TDocumentRecord(pNote, pStatementLineNumber, pDate_carry, pShifr_oper, pNumb_document, pBic, pGround, pCorrBankAcc,
                              pAccount, pSumDebit, pSumCredit, pSumDebitEq, pSumCreditEq
                              // EVG 27/12/2013 Добавил приём параметров
                              , pNameBank, pNameCntrAgent, pFormSum
                             )

    var note                = pNote;
    var statementLineNumber = pStatementLineNumber;
    var date_carry          = pDate_carry;
    var shifr_oper          = pShifr_oper;
    var numb_document       = pNumb_document;
    var bic                 = pBic;
    var ground              = pGround;
    var corrBankAcc         = pCorrBankAcc;
    var account             = pAccount;
    var sumDebit            = pSumDebit;
    var sumCredit           = pSumCredit;
    var sumDebitEq          = pSumDebitEq;
    var sumCreditEq         = pSumCreditEq;

    /* EVG 24/12/2013 Дополнительные свойства для печати расширенной выписки */
    var nameBank            = pNameBank;
    var nameCntrAgent       = pNameCntrAgent;
    var formSum             = pFormSum;

end;

/**
 * Движок печати в plain text на основе CTableReport
 *
 * @since   v.6.20.030.051
 * @author  ABP
 * @version 1.0
 */
private class TTableReportPrintEngine()

    private var m_printEngine : Object;
    private var m_tablesPool : TArray;
    private var m_isTableStored : Bool;
    private var m_tableHeader : String;
    private var m_cells : TArray;
    private var m_isTableCell : Bool;
    private var m_needTableHeader : Bool;
    private var m_needTableFooter : Bool;
    private var m_useEmptyDataBottom : Bool;
    private var m_previousHeader : Object;

    macro addNewSheetBreak(name, header)
        m_tablesPool.value(m_tablesPool.size) = m_printEngine.getPrintBuffer();
        m_isTableStored = true;
        m_isTableStored = false;
        m_needTableHeader = null;
        m_needTableFooter = null;
        m_useEmptyDataBottom = null;
        if (m_previousHeader != header)
            m_printEngine = CTableReport(0, false, false, true, 0);
            this.setHeader(header);
        end;
    end;

    macro addPrintCell(value : Variant, width : Integer, precision : Integer, format : String, valueType : Integer, flagPrint : Bool)
        if (valueType == REP_ELEM_TABL)
            m_isTableCell = true;
            if (m_needTableHeader == null)
                m_needTableHeader = true;
            end;
            if (valType(value) == V_MONEY)
                precision = 2;
            end;
        else
            m_isTableCell = false;
        end;

        m_cells.value(m_cells.size) = execExp("String(value :" + width + ":" + precision + format + ")");
    end;

    macro addStr()
        if (m_cells.size == 0)
            this.addEmptyString();
            return;
        end;

        if (m_isTableCell)
            if (m_needTableHeader)
                m_printEngine.printFreeString(m_tableHeader);
                m_needTableHeader = false;
                m_needTableFooter = true;
            end;
            if (m_cells.size == 1)
                m_printEngine.printFreeString(m_cells.value(0), true);
                m_useEmptyDataBottom = true;
            else
                m_printEngine.printStringTransferByWord(m_cells);
                m_useEmptyDataBottom = false;
            end;

            /* EVG 27/12/2013 Для расширенной выписки печатаем разделитель */
            if( ReportType == REPTYPE_EXTENDED )
                m_printEngine.PrintSeparator();
            end;

        else
            if (m_needTableFooter)
                if (m_useEmptyDataBottom)
                    m_printEngine.printBottomExt(m_printEngine.getAColumns().size);
                else
                    m_printEngine.printBottom();
                end;
                m_needTableFooter = false;
                m_needTableHeader = null;
                m_useEmptyDataBottom = null;
            end;
            var str = "";
            for (var i, m_cells)
                str = str + i;
            end;
            m_printEngine.printFreeString(str);

        end;

        m_cells.size = 0;
    end;

    macro addEmptyStr()
        m_printEngine.printFreeString("");
    end;

    macro setHeader(header : Object)
        var columns = header.value(0).getColumns();
        var column;
        m_tableHeader = header.value(1);

        var i = 0;
        while (i < columns.size)
            column = columns.value(i).getTableHeaderField();
            m_printEngine.addColumn(column.text, Double(column.width), column.format);
            i = i + 1;
        end;

        m_previousHeader = header;
    end;

    macro getHeaderWidth()
        return m_printEngine.getSumLen();
    end;

    macro getColWidthTable(columnNumber)
        return m_printEngine.getAColumns().value(columnNumber).getLen();
    end;

    macro getWidthBeforeCol(columnNumber)
        return m_printEngine.getWidthBeforeCol(columnNumber);
    end;

    macro printRep(needDoublePrint)
        if (not m_isTableStored)
            m_tablesPool.value(m_tablesPool.size) = m_printEngine.getPrintBuffer();
            m_isTableStored = true;
        end;

        var i;
        var j;

        var maxWidth = 0;
        if (needDoublePrint)
            var length;
            i = 0;
            while (i < m_tablesPool.size)
                j = 0;
                while (j < m_tablesPool.value(i).size)
                    length = strlen(m_tablesPool.value(i).value(j));
                    if (length > maxWidth)
                        maxWidth = length;
                    end;
                    j = j + 1;
                end;
                i = i + 1;
            end;
        end;

        i = 0;
        while (i < m_tablesPool.size)
            j = 0;
            while (j < m_tablesPool.value(i).size)
                print(m_tablesPool.value(i).value(j));
                if (needDoublePrint)
                    print(mkStr(" ", maxWidth - strlen(m_tablesPool.value(i).value(j)) + DBLPRN_DELIMITER_WIDTH));
                    print(m_tablesPool.value(i).value(j));
                end;
                println();
                j = j + 1;
            end;
            i = i + 1;
        end;
    end;

    private macro constructorTTableReportPrintEngine()
        m_printEngine = CTableReport(0, false, false, true, 0);
        m_isTableStored = false;
        m_tablesPool = TArray(100, 100);
        m_cells = TArray(20, 5);
        m_needTableHeader = null;
        m_needTableFooter = null;
        m_useEmptyDataBottom = null;
        m_previousHeader = null;
    end;

    constructorTTableReportPrintEngine();

end;

/**
 * CMakeReport с перегруженным методом GetRegim_LoadNewApplication - для перекрытия настройки BANK_INI\WINDOWS REPORT\LOADNEWAPPLICATION
 *
 * @since   v.6.20.030.050
 * @author  ABP
 * @version 1.0
 */
private class (CMakeReport) TMakeReport(_HeaderStr:string, _SepStr:string, _CountStrOnPage:integer, _CurStr:integer)
    initCMakeReport(_HeaderStr, _SepStr, _CountStrOnPage, _CurStr);

    private macro GetRegim_LoadNewApplication()
        return false;
    end;
end;

/**
 * Элемент кеша заголовков таблицы для печатного представления
 *
 * @since   v.6.20.031.006
 * @author  ABP
 * @version 1.1
 */
private class TTableHeaderCacheElement(_key : Integer, _header : String, _template : Object)
    var key : Integer =_key;
    var header : String = _header;
    var template : Object = _template;
end;

/**
 * Кеширующий источник заголовков таблицы для печатного представления
 *
 * @since   v.6.20.031.006
 * @author  ABP
 * @version 1.0
 */
private class TTableHeaderMaker(parameters)
    private var m_cache : TArray;

    private macro makeKey(cSetA, currentFormat, prGround, accountFiId, natCurEquivalent, initialSubsystem) : Integer
        var key : String = "";

        key = key + b2si(cSetA);
        key = key + b2si(currentFormat == ACC_FORMATS_BANK);
        key = key + b2si(prGround);
        key = key + b2si(accountFiId == NATCUR);
        key = key + b2si(natCurEquivalent);
        key = key + b2si(natCurEquivalent and (initialSubsystem == REP_SUBSYSTEMS_CB));

        return int(key);
    end;

    private macro add(key : Integer,
                      cSetA : Bool,
                      currentFormat : Integer,
                      prGround : Bool,
                      accountFiId : Integer,
                      natCurEquivalent : Bool,
                      initialSubsystem : Integer
                     ) : Object

        var header;
        var template = TCompositeTableField();

        var noteHeader = TTableHeaderField(" ",  wSPOD, STR_ALIGN_RIGHT);
        var noteData   = TTableDataField("note", noteHeader.width, getFormatSpecifier(noteHeader.format));

        var lineHeader = TTableHeaderField("Номер|строки",      wSTRNUM, STR_ALIGN_RIGHT);
        var lineData   = TTableDataField("statementLineNumber", lineHeader.width, getFormatSpecifier(lineHeader.format));

        var carryDateHeader = TTableHeaderField("Дата|проводки", wDATE+1, STR_ALIGN_RIGHT);
        var carryDateData   = TTableDataField("date_carry",      carryDateHeader.width, getFormatSpecifier(carryDateHeader.format));

        var contentHeader = TTableHeaderField("Содержание операции", wGROUND, STR_ALIGN_LEFT);
        var contentData   = TTableDataField("ground",                contentHeader.width, getFormatSpecifier(contentHeader.format));

        var shifrHeader = TTableHeaderField("ВО",       wSHIFR, STR_ALIGN_RIGHT);
        var shifrData   = TTableDataField("shifr_oper", shifrHeader.width, getFormatSpecifier(shifrHeader.format));

        var documentNumberHeader = TTableHeaderField("Номер|документа|клиента", wNUMBD, STR_ALIGN_RIGHT);
        var documentNumberData   = TTableDataField("numb_document",             documentNumberHeader.width, getFormatSpecifier(documentNumberHeader.format));

        var bankCodeHeader = TTableHeaderField("БИК", wBIC, STR_ALIGN_RIGHT);
        var bankCodeData   = TTableDataField("bic",   bankCodeHeader.width, getFormatSpecifier(bankCodeHeader.format));

        var groundHeader = TTableHeaderField("Основание", wGROUND, STR_ALIGN_LEFT);
        var groundData   = TTableDataField("ground",      groundHeader.width, getFormatSpecifier(groundHeader.format));

        var accountCorrHeader = TTableHeaderField("Кор.счет",  wACC, STR_ALIGN_CENTER);
        var accountCorrData   = TTableDataField("corrBankAcc", accountCorrHeader.width, getFormatSpecifier(accountCorrHeader.format));

        var accountNumberHeader = TTableHeaderField("Номер cчета", wACC, STR_ALIGN_CENTER);
        var accountNumberData   = TTableDataField("account",       accountNumberHeader.width, getFormatSpecifier(accountNumberHeader.format));

        var accountHeader = TTableHeaderField("Счет|плательщика/получателя", wACC, STR_ALIGN_CENTER);
        var accountData = TTableDataField("account",                         accountHeader.width, getFormatSpecifier(accountHeader.format));

        var debitHeader    = TTableHeaderField("Дебет",  wSUMM, STR_ALIGN_RIGHT);
        var creditHeader   = TTableHeaderField("Кредит", wSUMM, STR_ALIGN_RIGHT);
        var roubleHeader   = TTableHeaderField("Рубли",  wSUMM, STR_ALIGN_RIGHT);
        var currencyHeader = TTableHeaderField("Валюта", wSUMM, STR_ALIGN_RIGHT);

        var debitData    = TTableDataField("sumDebit",    debitHeader.width, getFormatSpecifier(debitHeader.format) + ternary(cSetA, ":a", ""));
        var creditData   = TTableDataField("sumCredit",   creditHeader.width, getFormatSpecifier(creditHeader.format) + ternary(cSetA, ":a", ""));
        var debitEqData  = TTableDataField("sumDebitEq",  roubleHeader.width, getFormatSpecifier(roubleHeader.format) + ternary(cSetA, ":a", ""));
        var creditEqData = TTableDataField("sumCreditEq", currencyHeader.width, getFormatSpecifier(currencyHeader.format) + ternary(cSetA, ":a", ""));

        var amountHeader1 = TCompositeTableField();
        var amountHeader2 = TCompositeTableField();

        template.addField(noteHeader, noteData);


        /* EVG 11/03/2014 Пришло время изменить и формат выписки "Внутрибанковский". Теперь форма будет такая же,
           как клиентския, только внутренние проводки печатаются без БИКов.
        if (currentFormat == ACC_FORMATS_BANK)

            template.addField(lineHeader, lineData);
            template.addField(carryDateHeader, carryDateData);
            template.addField(shifrHeader, shifrData);
            template.addField(documentNumberHeader, documentNumberData);

            if (prGround)
                template.addField(contentHeader, contentData);
            end;

            template.addField(accountHeader, accountData);

            if (accountFiId == NATCUR)
                template.addField(debitHeader, debitData);
                template.addField(creditHeader, creditData);
            else
                if (natCurEquivalent and (initialSubsystem == REP_SUBSYSTEMS_CB))

                    amountHeader1.setTableField(TTableField("Дебет", null, STR_ALIGN_CENTER));
                    amountHeader1.addField(currencyHeader, debitData);
                    amountHeader1.addField(roubleHeader, debitEqData);

                    amountHeader2.setTableField(TTableField("Кредит", null, STR_ALIGN_CENTER));
                    amountHeader2.addField(currencyHeader, creditData);
                    amountHeader2.addField(roubleHeader, creditEqData);

                    template.addField(amountHeader1);
                    template.addField(amountHeader2);
                else
                    template.addField(debitHeader, debitData);
                    template.addField(creditHeader, creditData);
                end;
            end;

        else
        */

            /* EVG 27/12/2013 Немножко видоизменяем таблицу, чтобы печаталось как раньше.
            template.addField(carryDateHeader, carryDateData);
            template.addField(shifrHeader, shifrData);
            template.addField(documentNumberHeader, documentNumberData);

            if (accountFiId == NATCUR)
                template.addField(accountCorrHeader, accountCorrData);
            end;

            template.addField(bankCodeHeader, bankCodeData);
            template.addField(accountNumberHeader, accountNumberData);

            if (accountFiId == NATCUR)
                template.addField(debitHeader, debitData);
                template.addField(creditHeader, creditData);
            else
                if (natCurEquivalent and (initialSubsystem == REP_SUBSYSTEMS_CB))

                    amountHeader1.setTableField(TTableField("Валюта", null, STR_ALIGN_CENTER));
                    amountHeader1.addField(debitHeader, debitData);
                    amountHeader1.addField(creditHeader, creditData);

                    amountHeader2.setTableField(TTableField("Рубли", null, STR_ALIGN_CENTER));
                    amountHeader2.addField(debitHeader, debitEqData);
                    amountHeader2.addField(creditHeader, creditEqData);

                    template.addField(amountHeader1);
                    template.addField(amountHeader2);
                else
                    amountHeader1.setTableField(TTableField("Валюта", null, STR_ALIGN_CENTER));
                    amountHeader1.addField(debitHeader, debitData);
                    amountHeader1.addField(creditHeader, creditData);

                    template.addField(amountHeader1);
                end;
            end;*/


            /* EVG 27/12/2013 Пользовательский вариант */

            if( ReportType == REPTYPE_ORDINARY )

               /* Корректируем названия столбцов */
               shifrHeader = TTableHeaderField("Вид|оп.", wSHIFR, STR_ALIGN_RIGHT);

               template.addField(carryDateHeader, carryDateData);
               template.addField(shifrHeader, shifrData);

               /* EVG 8/04/2014 Заметил, что в обычной выписке номер документа не всегда помещается в столбец и переносится. Исправляю. */
               documentNumberHeader = TTableHeaderField("Номер|документа|клиента", 12, STR_ALIGN_RIGHT);
               documentNumberData   = TTableDataField("numb_document",             documentNumberHeader.width, getFormatSpecifier(documentNumberHeader.format));
               template.addField(documentNumberHeader, documentNumberData);

               template.addField(bankCodeHeader, bankCodeData);
               template.addField(accountNumberHeader, accountNumberData);


               if (accountFiId == NATCUR)
                       amountHeader1.setTableField(TTableField("Рубли", null, STR_ALIGN_CENTER));
                       amountHeader1.addField(debitHeader, debitData);
                       amountHeader1.addField(creditHeader, creditData);
                       template.addField(amountHeader1);

               else
                   if (natCurEquivalent and (initialSubsystem == REP_SUBSYSTEMS_CB))

                       amountHeader1.setTableField(TTableField("Валюта", null, STR_ALIGN_CENTER));
                       amountHeader1.addField(debitHeader, debitData);
                       amountHeader1.addField(creditHeader, creditData);

                       amountHeader2.setTableField(TTableField("Рубли", null, STR_ALIGN_CENTER));
                       amountHeader2.addField(debitHeader, debitEqData);
                       amountHeader2.addField(creditHeader, creditEqData);

                       template.addField(amountHeader1);
                       template.addField(amountHeader2);
                   else
                       amountHeader1.setTableField(TTableField("Валюта", null, STR_ALIGN_CENTER));
                       amountHeader1.addField(debitHeader, debitData);
                       amountHeader1.addField(creditHeader, creditData);

                       template.addField(amountHeader1);
                   end;
               end;


            /* Для расширенной выписки печатается дополнительная информация */
            elif( ( ReportType == REPTYPE_EXTENDED ) or
                  ( ReportType == REPTYPE_EXTENDED_XLS ) )

               /* Корректируем названий столбцов */
               shifrHeader          = TTableHeaderField("Вид|оп.", wSHIFR, STR_ALIGN_RIGHT);
               documentNumberHeader = TTableHeaderField("№|док.",  wNUMBD, STR_ALIGN_RIGHT);
               accountNumberHeader  = TTableHeaderField("Счет",    wACC,   STR_ALIGN_CENTER);

               /* Добавляем новые столбцы "Наименование банка" и "Наименование" (контрагента) */
               var bankNameHeader      = TTableHeaderField("Наименование банка", 30, STR_ALIGN_LEFT);
               var bankNameData        = TTableDataField("nameBank", bankNameHeader.width, getFormatSpecifier(bankNameHeader.format));
               var cntrAgentNameHeader = TTableHeaderField("Наименование", 40, STR_ALIGN_LEFT);
               var cntrAgentNameData   = TTableDataField("nameCntrAgent", cntrAgentNameHeader.width, getFormatSpecifier(cntrAgentNameHeader.format));

               /* Добавляем столбец "Рубли (Д-дебет, К-кредит)" */
               var dkHeader = TTableHeaderField("Рубли|(Д-дебет,|К-кредит)", wSUMM, STR_ALIGN_RIGHT);
               /* В Excel-варианте убираем минусы, т.к. форматер считаетих псевдографикой */
               if( ReportType == REPTYPE_EXTENDED_XLS )
                   dkHeader = TTableHeaderField("Сумма|(Д дебет,|К кредит)", wSUMM, STR_ALIGN_RIGHT);
               end;
               var dkData   = TTableDataField("formSum", dkHeader.width, getFormatSpecifier(dkHeader.format));

               template.addField(carryDateHeader, carryDateData);
               template.addField(shifrHeader, shifrData);
               template.addField(documentNumberHeader, documentNumberData);

               /* beg Составное поле "Контрагент" */
               var cntrAgentHeader1 = TCompositeTableField();
               cntrAgentHeader1.setTableField(TTableField("Контрагент", null, STR_ALIGN_LEFT));
               cntrAgentHeader1.addField(bankCodeHeader, bankCodeData);
               cntrAgentHeader1.addField(bankNameHeader, bankNameData);
               cntrAgentHeader1.addField(accountNumberHeader, accountNumberData);
               cntrAgentHeader1.addField(cntrAgentNameHeader, cntrAgentNameData);
               template.addField(cntrAgentHeader1);
               /* end Составное поле "Контрагент" */

               if (accountFiId == NATCUR)
                   template.addField(dkHeader, dkData);

               else

                   if (natCurEquivalent and (initialSubsystem == REP_SUBSYSTEMS_CB))

                       amountHeader1.setTableField(TTableField("Валюта", null, STR_ALIGN_CENTER));
                       amountHeader1.addField(debitHeader, debitData);
                       amountHeader1.addField(creditHeader, creditData);

                       amountHeader2.setTableField(TTableField("Рубли", null, STR_ALIGN_CENTER));
                       amountHeader2.addField(debitHeader, debitEqData);
                       amountHeader2.addField(creditHeader, creditEqData);

                       template.addField(amountHeader1);
                       template.addField(amountHeader2);
                   else
                       amountHeader1.setTableField(TTableField("Валюта", null, STR_ALIGN_CENTER));
                       amountHeader1.addField(debitHeader, debitData);
                       amountHeader1.addField(creditHeader, creditData);

                       template.addField(amountHeader1);
                   end;
               end;

            /* Выписка на бланке (Excel на бланке) */
            elif( ReportType == REPTYPE_XLS_BLANK )

               /* Корректируем названия и ширины столбцов */
               carryDateHeader      = TTableHeaderField("Дата|операции", 10, STR_ALIGN_RIGHT);
               documentNumberHeader = TTableHeaderField("Номер|документа", 10, STR_ALIGN_RIGHT);
               carryDateData        = TTableDataField("date_carry", carryDateHeader.width, getFormatSpecifier(carryDateHeader.format));
               documentNumberData   = TTableDataField("numb_document", documentNumberHeader.width, getFormatSpecifier(documentNumberHeader.format));

               accountNumberHeader  = TTableHeaderField("Номер cчета", 22, STR_ALIGN_CENTER);
               accountNumberData    = TTableDataField("account", accountNumberHeader.width, getFormatSpecifier(accountNumberHeader.format));

               debitHeader          = TTableHeaderField("Дебет", 11, STR_ALIGN_RIGHT);
               creditHeader         = TTableHeaderField("Кредит", 11, STR_ALIGN_RIGHT);
               debitData            = TTableDataField("sumDebit", debitHeader.width, getFormatSpecifier(debitHeader.format) + ternary(cSetA, ":a", ""));
               creditData           = TTableDataField("sumCredit", creditHeader.width, getFormatSpecifier(creditHeader.format) + ternary(cSetA, ":a", ""));

               groundHeader         = TTableHeaderField("Основание", 35, STR_ALIGN_LEFT);
               groundData           = TTableDataField("ground", groundHeader.width, getFormatSpecifier(groundHeader.format));


               template.addField(carryDateHeader, carryDateData);
               template.addField(documentNumberHeader, documentNumberData);

               /* Добавляем новые столбцы "Наименование, ИНН" и "Наименование банка, БИК" */
               cntrAgentNameHeader = TTableHeaderField("Наименование, ИНН", 30, STR_ALIGN_LEFT);
               cntrAgentNameData   = TTableDataField("nameCntrAgent", cntrAgentNameHeader.width, getFormatSpecifier(cntrAgentNameHeader.format));
               bankNameHeader      = TTableHeaderField("Наименование банка, БИК", 30, STR_ALIGN_LEFT);
               bankNameData        = TTableDataField("nameBank", bankNameHeader.width, getFormatSpecifier(bankNameHeader.format));


               /* beg Составное поле "Корреспондент" */
               cntrAgentHeader1 = TCompositeTableField();
               cntrAgentHeader1.setTableField(TTableField("Корреспондент", null, STR_ALIGN_LEFT));
               cntrAgentHeader1.addField(cntrAgentNameHeader, cntrAgentNameData);
               cntrAgentHeader1.addField(accountNumberHeader, accountNumberData);
               cntrAgentHeader1.addField(bankNameHeader, bankNameData);
               template.addField(cntrAgentHeader1);
               /* end Составное поле "Корреспондент" */


               /* EVG 5/05/2014 Сделаем вывод в составное поле по примеру того, как сделано в 
                  расширенной Excel-выписке - так лучше выглядит.
               template.addField(debitHeader, debitData);
               template.addField(creditHeader, creditData);*/
               
               if (accountFiId == NATCUR)

                   amountHeader1.setTableField(TTableField("Рубли", null, STR_ALIGN_CENTER));
                   amountHeader1.addField(debitHeader, debitData);
                   amountHeader1.addField(creditHeader, creditData);

                   template.addField(amountHeader1);

               else

                   if (natCurEquivalent and (initialSubsystem == REP_SUBSYSTEMS_CB))

                       amountHeader1.setTableField(TTableField("Валюта", null, STR_ALIGN_CENTER));
                       amountHeader1.addField(debitHeader, debitData);
                       amountHeader1.addField(creditHeader, creditData);

                       amountHeader2.setTableField(TTableField("Рубли", null, STR_ALIGN_CENTER));
                       amountHeader2.addField(debitHeader, debitEqData);
                       amountHeader2.addField(creditHeader, creditEqData);

                       template.addField(amountHeader1);
                       template.addField(amountHeader2);
                   else
                       amountHeader1.setTableField(TTableField("Валюта", null, STR_ALIGN_CENTER));
                       amountHeader1.addField(debitHeader, debitData);
                       amountHeader1.addField(creditHeader, creditData);

                       template.addField(amountHeader1);
                   end;
               end;

               /* EVG 5/05/2014 end */


            end;

            /* EVG 27/12/2013 Пользовательский вариант end */


            if (prGround)
                template.addField(groundHeader, groundData);
            end;

        /* EVG 11/03/2014
        end;  */

        header = "";
        for (var i, template.getReportHeader())
            header = header + "\n" + i;
        end;

        header = substr(header, 2);

        m_cache.value(key) = TTableHeaderCacheElement(key, header, template);

        return m_cache.value(key);

    end;

    /**
     * Получить элемент кеша
     * @param cSetA Признак печати сумм с апострофами
     * @param currentFormat Формат выписки по текущему счету
     * @param prGround Признак печати основания
     * @param accountFiId ФИ счета
     * @param natCurEquivalent Признак печати рублевого эквивалента
     * @param initialSubsystem Подсистема-источник счета
     * @return объект класса TTableHeaderCacheElement или null
     */
    macro get(cSetA : Bool,
              currentFormat : Integer,
              prGround : Bool,
              accountFiId : Integer,
              natCurEquivalent : Bool,
              initialSubsystem : Integer
             ) : Object
        var key : Integer = makeKey(cSetA, currentFormat, prGround, accountFiId, natCurEquivalent, initialSubsystem);
        var result = m_cache.value(key);

        if (result == null)
            return add(key, cSetA, currentFormat, prGround, accountFiId, natCurEquivalent, initialSubsystem);
        else
            return result;
        end;
    end;

    private macro constructor(parameters)
        m_cache = TArray();

        if (parameters.showStorno)
            wSPOD = 12;
        else
            wSPOD = 4;
        end;
    end;

    constructor(parameters);
end;

private var m_cachedHeaderMaker : TTableHeaderMaker;

/**
 * Элемент кеша заголовков банка для печатного представления
 *
 * @since   v.6.20.031.006
 * @author  ABP
 * @version 1.0
 */
private class TBankHeaderCacheElement(_key : Integer, _header : Object)
    var key : Integer =_key;
    var header : Object = _header;
end;

/**
 * Кеширующий источник заголовков банка для печатного представления
 *
 * @since   v.6.20.031.006
 * @author  ABP
 * @version 1.0
 */
private class TBankHeaderMaker()
    private var m_cache : TArray;

    private macro add(key : Integer, dprtId : Integer, orgStructure : Integer, reportWidth : Integer) : Object
        var header = TArray();

        printBankHeaderBuf(dprtId, orgStructure, reportWidth, header);
        var i = 0;
        while (i < header.size)
            header.value(i) = trim(header.value(i));
            i = i + 1;
        end;
        m_cache.value(key) = TBankHeaderCacheElement(key, header);

        return m_cache.value(key);
    end;

    /**
     * Получить элемент кеша
     * @param dprtId Id узла ТС
     * @param orgStructure Тип ТС
     * @param reportWidth Ширина поля вывода заголовка
     * @return Объект класса TBankHeaderCacheElement или null
     */
    macro get(dprtId : Integer, orgStructure : Integer, reportWidth : Integer) : Object
        // 14.03.2012 ABP dprtId и orgStructure не меняются в рамках одного отчета
        var key : Integer = reportWidth;//makeKey(dprtId, orgStructure, reportWidth);
        var result = m_cache.value(key);

        if (result == null)
            return add(key, dprtId, orgStructure, reportWidth);
        else
            return result;
        end;
    end;

    private macro constructor()
        m_cache = TArray();
    end;

    constructor();
end;

private var m_cachedBankHeader = TBankHeaderMaker();

/**
 * Базовое печатное представление на основе Windows Reports
 *
 * @since   v.6.20.030.049
 * @author  ABP
 * @version 1.1
 */
private class TWinRepView(parameters)
    private var m_printEngine : Object;
    private var m_separator : String;
    private var m_reportWidth : Integer;
    private var m_leftHalfWidth : Integer;
    private var m_rightHalfWidth : Integer;
    private var m_tableWidth : Integer;
    private var m_needDoublePrint : Bool;
    private var m_template : TCompositeTableField;
    private var m_parameters : Object;

    private macro getTableHeader() : String
        var header = m_cachedHeaderMaker.get(m_parameters.cSetA,
                                             m_parameters.currentFormat,
                                             m_parameters.prGround,
                                             m_parameters.account.currency,
                                             m_parameters.natCurEquivalent,
                                             m_parameters.account.initialSubsystem
                                            );

        m_template = header.template;

        return header.header;
    end;

    private macro addString(value : String, width : Integer, precision : Integer, format : String, valueType : Integer, flagPrint : Bool)
        m_printEngine.addPrintCell(value, width, precision, format, valueType, flagPrint);
        m_printEngine.addStr();
    end;

    macro initialize(parameters)
        m_parameters = parameters;

        m_tableWidth = m_printEngine.getHeaderWidth();
        m_reportWidth = m_tableWidth+1;
        m_leftHalfWidth = Int(m_reportWidth / 2.0);
        if (mod(Double(m_reportWidth), 2.0) == 0.0)
            m_rightHalfWidth = Int(m_reportWidth / 2.0);
        else
            m_rightHalfWidth = Int(m_reportWidth / 2.0) + 1;
        end;

        m_separator = mkstr("─", m_reportWidth);
    end;

    macro printEmptyData()
        addString("Данные отсутствуют", m_tableWidth, 0, getFormatSpecifier(STR_ALIGN_CENTER), REP_ELEM_TABL);
    end;

    macro printEmptyReport()
        addString("Данные отсутствуют", 0, 0, getFormatSpecifier(STR_ALIGN_LEFT), REP_ELEM_STR);
    end;

    macro printRow(dataset)
        var data;

        /* EVG 7/03/2014 Обработка печати приложений для Excel-представлений. После вывода в Excel отчёт запускается заново с
           need_print = false в режиме Text для того, чтобы напечатать только документы-приложения. */
        if( not need_print )
           return
        end;


        for (var i, m_template.getDataColumns())
            data = execExp("dataset." + i.dataSourceName);
            //msgbox (data);

            //debugbreak;
            /* EVG 16/1/2014 Очевидная ошибка - в метод добавления ячейки передаётся нулевое количество
               знаков после запятой (3 параметр). В результате, на денежные ячейки накладывается неправильный
               формат, что приводит к отображению в отчёте данных, округлённых до целых рублей.
            m_printEngine.addPrintCell(data, 0, 0, i.format, REP_ELEM_TABL);*/
            m_printEngine.addPrintCell(data, 0, 2, i.format, REP_ELEM_TABL);
        end;
        m_printEngine.addStr();
    end;

    /**
     * Печать шапки.
     */
    macro printHeader(parameters)
        var i;

        /* EVG 7/03/2014 Обработка печати приложений для Excel-представлений. После вывода в Excel отчёт запускается заново с
           need_print = false в режиме Text для того, чтобы напечатать только документы-приложения. */
        if( not need_print )
           return
        end;


        /* EVG 31/12/2013 Только для текста */
        if (( parameters.needText ) and ((not fgBank.is_SLD ) and (not fgBank.is_EXV_Volgograd) and (not fgBank.is_EXV_Voronezh) and (not fgBank.is_EXV_Stavropol)  and (not fgBank.is_EXV ) )) //18.06.2014 SDA - особенности печати в Солидарности ESC последовательности портят шаблоны 
                                                                                                                                                                                           //05.11.2014 DPN - То же самое для ЭВ
           /* EVG 11/03/2014 Теперь esc-последовательность зависит от формата выписки */
           if( ReportType == REPTYPE_EXTENDED )
              // Это HP 5Si CondenL из иниц. посл-тей рс-банка
              addString("(3R(s0p20.67h8.5v0s0b0T&l1O&l12D", m_reportWidth, 0, getFormatSpecifier(STR_ALIGN_LEFT), REP_ELEM_STR);
           else
              /* EVG 24/12/2013 Перенёс форматирование из старого макроса.
              m_printEngine.addEmptyStr();*/
              // KS 18.04.2011
              addString("(3R(s0p16.67h8.5v0s0b3T&l1O&l8D&l1X&a17L", m_reportWidth, 0, getFormatSpecifier(STR_ALIGN_LEFT), REP_ELEM_STR);
           end;

        end;

        addString(m_separator, m_reportWidth, 0, getFormatSpecifier(STR_ALIGN_CENTER), REP_ELEM_STR);

        /* EVG 9/1/2014 Для выписок на бланке шапка выглядит немного иначе */
        if( ReportType != REPTYPE_XLS_BLANK )

           for (i, m_cachedBankHeader.get(parameters.dprtId, parameters.orgStructure, m_reportWidth).header)
               addString(i, m_reportWidth, 0, getFormatSpecifier(STR_ALIGN_CENTER), REP_ELEM_STR);
           end;

           m_printEngine.addEmptyStr();

           addString(String("Выписка за период: c ", parameters.dateIn : f, " по ", parameters.dateOut : f), m_reportWidth, 0, getFormatSpecifier(STR_ALIGN_LEFT), REP_ELEM_STR);

           m_printEngine.addEmptyStr();

           /* EVG 14/1/2014 В эту строчку добавляется ИНН
           addString(String("Лицевой счет: ", parameters.account.acc : f), m_reportWidth, 0, getFormatSpecifier(STR_ALIGN_LEFT), REP_ELEM_STR);*/
           addString(String("Лицевой счет: ", parameters.account.acc : f) + String(",\tИНН: ", parameters.inn), m_reportWidth, 0, getFormatSpecifier(STR_ALIGN_LEFT), REP_ELEM_STR);

           /*
           addString(String("Название: ", parameters.account.accName), m_reportWidth, 0, getFormatSpecifier(STR_ALIGN_LEFT), REP_ELEM_STR);*/
           addString(String("Название: ", parameters.account.accName), FIT_TO_VAL, 0, getFormatSpecifier(STR_ALIGN_LEFT), REP_ELEM_STR);

           m_printEngine.addEmptyStr();

           /* DAI 
           var clientNameCaption : String = "Клиент : ";
           var clientNameCaptionLength : Integer = strlen(clientNameCaption);
           var clientName = TArray();

           clientName = strTransferByWord(parameters.account.nameClnt, m_reportWidth - clientNameCaptionLength);

           m_printEngine.addPrintCell(clientNameCaption, clientNameCaptionLength, 0, getFormatSpecifier(STR_ALIGN_LEFT), REP_ELEM_STR);
           m_printEngine.addPrintCell(trim(clientName.value(0)), m_reportWidth - clientNameCaptionLength, 0, getFormatSpecifier(STR_ALIGN_LEFT), REP_ELEM_STR);
           m_printEngine.addStr();
           i = 1;
           while (i < clientName.size)
               m_printEngine.addPrintCell(" ", clientNameCaptionLength, 0, getFormatSpecifier(STR_ALIGN_LEFT), REP_ELEM_STR);
               m_printEngine.addPrintCell(trim(clientName.value(i)), m_reportWidth - clientNameCaptionLength, 0, getFormatSpecifier(STR_ALIGN_LEFT), REP_ELEM_STR);
               m_printEngine.addStr();
               i = i + 1;
           end;
           */
           var clientName = TArray();
           clientName = strTransferByWord(parameters.account.nameClnt, m_reportWidth - 9);
           m_printEngine.addPrintCell("Клиент : " + trim(clientName.value(0)), m_reportWidth, 0, getFormatSpecifier(STR_ALIGN_LEFT), REP_ELEM_STR);
           m_printEngine.addStr();
           i = 1;
           while (i < clientName.size)
               m_printEngine.addPrintCell("         " + trim(clientName.value(i)), m_reportWidth, 0, getFormatSpecifier(STR_ALIGN_LEFT), REP_ELEM_STR);
               m_printEngine.addStr();
               i = i + 1;
           end;

           addString(String("ИНН: ", parameters.inn), m_reportWidth, 0, getFormatSpecifier(STR_ALIGN_LEFT), REP_ELEM_STR);

           m_printEngine.addEmptyStr();

           addString(String("Операционист: ", parameters.account.oper), m_reportWidth, 0, getFormatSpecifier(STR_ALIGN_LEFT), REP_ELEM_STR);

           var dpdString : String = "";
           if (    (parameters.account.currency == NATCUR)
               and (index(parameters.account.typeAccount, "П") > 0)
               and (parameters.ocpAccountServer.isSuitable(parameters.account.chapter, parameters.account.currency, parameters.account.acc))
              )
               dpdString = "";
           else
               dpdString = parameters.dpd;
           end;
           //29.10.2014 DPN
           if (strlen(dpdString) < 2)
               dpdString = "До " + parameters.datein + " операций по счету не было";
           end;
           addString(String("Дата последней операции по счету: ", dpdString), m_reportWidth, 0, getFormatSpecifier(STR_ALIGN_LEFT), REP_ELEM_STR);

           if (parameters.natCurEquivalent and (parameters.account.currency != NATCUR))
               if (parameters.ocpAccountServer.isSuitable(parameters.account.chapter, parameters.account.currency, parameters.account.acc))
                   dpdString = "";
               else
                   dpdString = parameters.dpd_r;
               end;
               //29.10.2014 DPN
               if (strlen(dpdString) < 2)
                   dpdString = "До " + parameters.datein + " операций по счету не было";
               end;
               addString(String("Дата последней операции по счету в нац. валюте: ", dpdString), m_reportWidth, 0, getFormatSpecifier(STR_ALIGN_LEFT), REP_ELEM_STR);
           end;

           m_printEngine.addEmptyStr();

           if (  (parameters.account.currency == NATCUR)
               or
                 (    (parameters.account.currency != NATCUR)
                  and (not parameters.natCurEquivalent)
                 )
               or (parameters.account.initialSubsystem == REP_SUBSYSTEMS_LOANS)
              )
               addString(parameters.account.currencyName, m_reportWidth, 0, getFormatSpecifier(STR_ALIGN_LEFT), REP_ELEM_STR);
           else
               m_printEngine.addPrintCell(parameters.account.currencyName, m_leftHalfWidth, 0, getFormatSpecifier(STR_ALIGN_LEFT), REP_ELEM_STR);
               m_printEngine.addPrintCell(String("Курс ЦБ: ", parameters.rateIn), m_rightHalfWidth, 0, getFormatSpecifier(STR_ALIGN_RIGHT), REP_ELEM_STR);
               m_printEngine.addStr();
           end;

           m_printEngine.addEmptyStr();


           /* EVG 9/1/2014 Для расширенной выписки Excel входящий остаток печатаем поближе к левой границе листа */
           if( ReportType == REPTYPE_EXTENDED_XLS )
              //DAI
              //m_printEngine.addPrintCell("Входящий остаток " + АП(parameters.account.restIn, parameters.account.kind_account) + ":", 35, 0, getFormatSpecifier(STR_ALIGN_LEFT), REP_ELEM_STR);
              //m_printEngine.addPrintCell(abs(parameters.account.restIn), m_reportWidth - 35, 2, getFormatSpecifier(STR_ALIGN_LEFT)+ternary(parameters.cSetA, ":a", ""), REP_ELEM_STR);
              m_printEngine.addPrintCell("Входящий остаток " + АП(parameters.account.restIn, parameters.account.kind_account) + ": " + abs(parameters.account.restIn), m_reportWidth, 0, getFormatSpecifier(STR_ALIGN_LEFT), REP_ELEM_STR);
              m_printEngine.addStr();

              if ( (parameters.account.currency != NATCUR) and parameters.natCurEquivalent )
                 m_printEngine.addPrintCell("Входящий остаток " + АП(parameters.account.restInEq, parameters.account.kind_account) + " эквивалент: ", 35, 0, getFormatSpecifier(STR_ALIGN_LEFT), REP_ELEM_STR);
                 m_printEngine.addPrintCell(abs(parameters.account.restInEq), m_reportWidth, 2, getFormatSpecifier(STR_ALIGN_LEFT)+ternary(parameters.cSetA, ":a", ""), REP_ELEM_STR);
                 m_printEngine.addStr();
              end;

           else
              /* EVG 14/2/2014 Для остальных сумма печатается сразу */
              m_printEngine.addPrintCell("Входящий остаток " + АП(parameters.account.restIn, parameters.account.kind_account) + ": " + abs(parameters.account.restIn), m_leftHalfWidth, 0, getFormatSpecifier(STR_ALIGN_LEFT), REP_ELEM_STR);
              m_printEngine.addStr();

              if ( (parameters.account.currency != NATCUR) and parameters.natCurEquivalent )
                 m_printEngine.addPrintCell("Входящий остаток " + АП(parameters.account.restInEq, parameters.account.kind_account) + " эквивалент", m_leftHalfWidth, 0, getFormatSpecifier(STR_ALIGN_LEFT), REP_ELEM_STR);
                 m_printEngine.addPrintCell(abs(parameters.account.restInEq), m_rightHalfWidth, 2, getFormatSpecifier(STR_ALIGN_RIGHT)+ternary(parameters.cSetA, ":a", ""), REP_ELEM_STR);
                 m_printEngine.addStr();
              end;
           end;


        /* EVG 9/1/2014 Выписки на бланке */
        else

           m_printEngine.addEmptyStr();
           m_printEngine.addEmptyStr();

           m_printEngine.addPrintCell("", 10, 0, 0, REP_ELEM_STR);
           m_printEngine.addPrintCell(parameters.account.nameClnt, strLen( parameters.account.nameClnt ), 0, getFormatSpecifier(STR_ALIGN_LEFT), REP_ELEM_STR);
           m_printEngine.addStr();

           m_printEngine.addPrintCell("", 10, 0, 0, REP_ELEM_STR);
           m_printEngine.addPrintCell(String("р/счет № ", parameters.account.acc : f), 31, 0, getFormatSpecifier(STR_ALIGN_LEFT), REP_ELEM_STR);
           m_printEngine.addPrintCell("", 10, 0, 0, REP_ELEM_STR);
           m_printEngine.addPrintCell(String("валюта счета: ", parameters.account.currencyName), 35, 0, getFormatSpecifier(STR_ALIGN_LEFT), REP_ELEM_STR);
           m_printEngine.addStr();

           m_printEngine.addPrintCell("", 80, 0, 0, REP_ELEM_STR);
           var date_ = parameters.dpd;
           //29.10.2014 DPN
           if (strlen(date_) < 2)
               date_ = "До " + parameters.datein + " операций по счету не было";
           end;
           m_printEngine.addPrintCell(String("Дата последней операции: ", date_), 70, 0, getFormatSpecifier(STR_ALIGN_LEFT), REP_ELEM_STR); //29.10.2014 DPN
           m_printEngine.addStr();

           m_printEngine.addEmptyStr();

           m_printEngine.addPrintCell("", 10, 0, 0, REP_ELEM_STR);
           m_printEngine.addPrintCell(String("Выписка за период: c ", parameters.dateIn : f, " по ", parameters.dateOut : f), 70, 0, getFormatSpecifier(STR_ALIGN_LEFT), REP_ELEM_STR);

           /* EVG 5/05/2014 Добавлена доп. информация для выписок в валюте с эквивалентом */
           if( (parameters.account.currency != NATCUR) and parameters.natCurEquivalent )
              m_printEngine.addPrintCell(String("Курс ЦБ: ", parameters.rateIn + " на " + parameters.dateIn), 35, 0, getFormatSpecifier(STR_ALIGN_LEFT), REP_ELEM_STR);
           end;

           m_printEngine.addStr();

           m_printEngine.addEmptyStr();

           m_printEngine.addPrintCell("", 10, 0, 0, REP_ELEM_STR);

           /* EVG 5/05/2014 Добавлена доп. информация для выписок в валюте с эквивалентом */
           if( parameters.account.currency == NATCUR )
              m_printEngine.addPrintCell(String("Входящий остаток: " + abs(parameters.account.restIn)), 50, 0, getFormatSpecifier(STR_ALIGN_LEFT), REP_ELEM_STR);
           elif( (parameters.account.currency != NATCUR) and parameters.natCurEquivalent )
              m_printEngine.addPrintCell(String("Входящий остаток: " + abs(parameters.account.restIn)), 50, 0, getFormatSpecifier(STR_ALIGN_LEFT), REP_ELEM_STR);
           end;

           m_printEngine.addStr();


           /* EVG 5/05/2014 Печать доп. информации для валюты с эквивалентом аналогично тому, как сделано в расширенной Excel-выписке */
           if ( (parameters.account.currency != NATCUR) and parameters.natCurEquivalent )
               m_printEngine.addPrintCell("", 10, 0, 0, REP_ELEM_STR);
               m_printEngine.addPrintCell("Входящий остаток " + АП(parameters.account.restInEq, parameters.account.kind_account) + " эквивалент: " + abs(parameters.account.restInEq), m_leftHalfWidth, 0, getFormatSpecifier(STR_ALIGN_LEFT), REP_ELEM_STR);
               m_printEngine.addStr();
           end;
           /* EVG 5/05/2014 end */

           m_printEngine.addEmptyStr();

        end;

    end;

    macro printFooter(parameters, docs)
        private macro getColumnNumberByDatasource(dataSourceName) : Integer
            var number : Integer = 0;
            var hasData : Bool = false;

            for (var i, m_template.getDataColumns())
                if (trim(strupr(i.dataSourceName)) == trim(strupr(dataSourceName)))
                    hasData = true;
                    break;
                end;
                number = number + 1;
            end;

            if (not hasData)
                number = -1;
            end;

            return number;
        end;


        /* EVG 7/03/2014 Обработка печати приложений для Excel-представлений. После вывода в Excel отчёт запускается заново с
           need_print = false в режиме Text для того, чтобы напечатать только документы-приложения. */
        if( not need_print )
           return
        end;


        addString(String("Всего документов: ", docs.overallDocs), m_reportWidth, 0, getFormatSpecifier(STR_ALIGN_LEFT), REP_ELEM_STR);

        /* EVG 27/12/2013 Итоги в таком виде печатаются только для обычной выписки */
        if( ReportType == REPTYPE_ORDINARY )
            m_printEngine.addPrintCell("Итого обороты:", m_printEngine.getWidthBeforeCol(getColumnNumberByDatasource("sumDebit")), 0, getFormatSpecifier(STR_ALIGN_LEFT), REP_ELEM_STR);
            m_printEngine.addPrintCell(docs.allSumDebit, m_printEngine.getColWidthTable(getColumnNumberByDatasource("sumDebit"))+1, 2, getFormatSpecifier(STR_ALIGN_RIGHT)+ternary(parameters.cSetA, ":a", ""), REP_ELEM_STR);
            m_printEngine.addPrintCell(docs.allSumCredit, m_printEngine.getColWidthTable(getColumnNumberByDatasource("sumCredit"))+1, 2, getFormatSpecifier(STR_ALIGN_RIGHT)+ternary(parameters.cSetA, ":a", ""), REP_ELEM_STR);

           if ( (parameters.account.currency != NATCUR) and parameters.natCurEquivalent )
               m_printEngine.addPrintCell(docs.allSumDebitEq, m_printEngine.getColWidthTable(getColumnNumberByDatasource("sumDebitEq"))+1, 2, getFormatSpecifier(STR_ALIGN_RIGHT)+ternary(parameters.cSetA, ":a", ""), REP_ELEM_STR);
               m_printEngine.addPrintCell(docs.allSumCreditEq, m_printEngine.getColWidthTable(getColumnNumberByDatasource("sumCreditEq"))+1, 2, getFormatSpecifier(STR_ALIGN_RIGHT)+ternary(parameters.cSetA, ":a", ""), REP_ELEM_STR);
           end;
           m_printEngine.addStr();

        /* EVG 14/2/2014 Для расширенной обороты по Дт и Кт печатаются отдельными строчками */
        elif( ReportType == REPTYPE_EXTENDED )
            m_printEngine.addPrintCell("Итого оборотов по дебету:\t"+docs.allSumDebit, m_printEngine.getWidthBeforeCol(getColumnNumberByDatasource("formSum")), 0, getFormatSpecifier(STR_ALIGN_LEFT), REP_ELEM_STR);
            m_printEngine.addStr();
            m_printEngine.addPrintCell("Итого оборотов по кредиту:\t"+docs.allSumCredit, m_printEngine.getWidthBeforeCol(getColumnNumberByDatasource("formSum")), 0, getFormatSpecifier(STR_ALIGN_LEFT), REP_ELEM_STR);

           if ( (parameters.account.currency != NATCUR) and parameters.natCurEquivalent )
               m_printEngine.addPrintCell(docs.allSumDebitEq, m_printEngine.getColWidthTable(getColumnNumberByDatasource("sumDebitEq"))+1, 2, getFormatSpecifier(STR_ALIGN_RIGHT)+ternary(parameters.cSetA, ":a", ""), REP_ELEM_STR);
               m_printEngine.addPrintCell(docs.allSumCreditEq, m_printEngine.getColWidthTable(getColumnNumberByDatasource("sumCreditEq"))+1, 2, getFormatSpecifier(STR_ALIGN_RIGHT)+ternary(parameters.cSetA, ":a", ""), REP_ELEM_STR);
           end;
           m_printEngine.addStr();

        /* EVG 9/1/2014 Для расширенной выписки Excel итоги оборотов печатаются отдельными строчками слева */
        elif( ReportType == REPTYPE_EXTENDED_XLS )
            m_printEngine.addPrintCell("Итого обороты по дебету:", 24, 0, getFormatSpecifier(STR_ALIGN_LEFT), REP_ELEM_STR);
            m_printEngine.addPrintCell(docs.allSumDebit, 26, 2, getFormatSpecifier(STR_ALIGN_LEFT)+ternary(parameters.cSetA, ":a", ""), REP_ELEM_STR);
            m_printEngine.addStr();
            m_printEngine.addPrintCell("Итого обороты по кредиту:", 24, 0, getFormatSpecifier(STR_ALIGN_LEFT), REP_ELEM_STR);
            m_printEngine.addPrintCell(docs.allSumCredit, 26, 2, getFormatSpecifier(STR_ALIGN_LEFT)+ternary(parameters.cSetA, ":a", ""), REP_ELEM_STR);
            m_printEngine.addStr();

           if (    (parameters.account.currency != NATCUR)
               and parameters.natCurEquivalent and (parameters.account.initialSubsystem == REP_SUBSYSTEMS_CB) )
               m_printEngine.addPrintCell("Итого обороты по дебету эквивалент:", 35, 0, getFormatSpecifier(STR_ALIGN_LEFT), REP_ELEM_STR);
               m_printEngine.addPrintCell(docs.allSumDebitEq, 37, 2, getFormatSpecifier(STR_ALIGN_LEFT)+ternary(parameters.cSetA, ":a", ""), REP_ELEM_STR);
               m_printEngine.addStr();
               m_printEngine.addPrintCell("Итого обороты по кредиту эквивалент:", 35, 0, getFormatSpecifier(STR_ALIGN_LEFT), REP_ELEM_STR);
               m_printEngine.addPrintCell(docs.allSumCreditEq, 37, 2, getFormatSpecifier(STR_ALIGN_LEFT)+ternary(parameters.cSetA, ":a", ""), REP_ELEM_STR);
               m_printEngine.addStr();
           end;
           m_printEngine.addStr();

        /* EVG 9/1/2014 Для выписки на бланке (Excel на бланке) итоги печатаются немного иначе */
        elif( ReportType == REPTYPE_XLS_BLANK )
            m_printEngine.addEmptyStr();
            m_printEngine.addEmptyStr();
            m_printEngine.addPrintCell("", m_printEngine.getWidthBeforeCol(4), 0, 0, REP_ELEM_STR);
            m_printEngine.addPrintCell("Итого:", 50, 0, getFormatSpecifier(STR_ALIGN_LEFT), REP_ELEM_STR);
            m_printEngine.addPrintCell(docs.allSumDebit, m_printEngine.getColWidthTable(getColumnNumberByDatasource("sumDebit"))+1, 2, getFormatSpecifier(STR_ALIGN_RIGHT)+ternary(parameters.cSetA, ":a", ""), REP_ELEM_STR);
            m_printEngine.addPrintCell(docs.allSumCredit, m_printEngine.getColWidthTable(getColumnNumberByDatasource("sumCredit"))+1, 2, getFormatSpecifier(STR_ALIGN_RIGHT)+ternary(parameters.cSetA, ":a", ""), REP_ELEM_STR);
            if ( (parameters.account.currency != NATCUR) and parameters.natCurEquivalent )
               m_printEngine.addPrintCell(docs.allSumDebitEq, m_printEngine.getColWidthTable(getColumnNumberByDatasource("sumDebitEq"))+1, 2, getFormatSpecifier(STR_ALIGN_RIGHT)+ternary(parameters.cSetA, ":a", ""), REP_ELEM_STR);
               m_printEngine.addPrintCell(docs.allSumCreditEq, m_printEngine.getColWidthTable(getColumnNumberByDatasource("sumCreditEq"))+1, 2, getFormatSpecifier(STR_ALIGN_RIGHT)+ternary(parameters.cSetA, ":a", ""), REP_ELEM_STR);
            end;
            m_printEngine.addStr();
        end;


        if (    (index(parameters.account.typeAccount, "З") > 0)
            and parameters.spodTurnsTotal
           )
            m_printEngine.addPrintCell("В том числе СПОД:", m_printEngine.getWidthBeforeCol(getColumnNumberByDatasource("sumDebit")), 0, getFormatSpecifier(STR_ALIGN_LEFT), REP_ELEM_STR);
            m_printEngine.addPrintCell(docs.allSumDebitSPOD, m_printEngine.getColWidthTable(getColumnNumberByDatasource("sumDebit"))+1, 2, getFormatSpecifier(STR_ALIGN_RIGHT)+ternary(parameters.cSetA, ":a", ""), REP_ELEM_STR);
            m_printEngine.addPrintCell(docs.allSumCreditSPOD, m_printEngine.getColWidthTable(getColumnNumberByDatasource("sumCredit"))+1, 2, getFormatSpecifier(STR_ALIGN_RIGHT)+ternary(parameters.cSetA, ":a", ""), REP_ELEM_STR);
            if ( (parameters.account.currency != NATCUR) and parameters.natCurEquivalent )
                m_printEngine.addPrintCell(docs.allSumDebitSpodEq, m_printEngine.getColWidthTable(getColumnNumberByDatasource("sumDebitEq"))+1, 2, getFormatSpecifier(STR_ALIGN_RIGHT)+ternary(parameters.cSetA, ":a", ""), REP_ELEM_STR);
                m_printEngine.addPrintCell(docs.allSumCreditSpodEq, m_printEngine.getColWidthTable(getColumnNumberByDatasource("sumCreditEq"))+1, 2, getFormatSpecifier(STR_ALIGN_RIGHT)+ternary(parameters.cSetA, ":a", ""), REP_ELEM_STR);
            end;
            m_printEngine.addStr();
        end;

        /* EVG 9/1/2014 Для расширенной выписки Excel исходящий остаток печатаем поближе к левой границе листа, там же где и обороты */
        if( ReportType == REPTYPE_EXTENDED_XLS )
           m_printEngine.addPrintCell("Исходящий остаток " + АП(parameters.account.restOut, parameters.account.kind_account) + ": " + abs(parameters.account.restOut), m_rightHalfWidth, 0, getFormatSpecifier(STR_ALIGN_LEFT), REP_ELEM_STR);

           m_printEngine.addStr();
           if ( (parameters.account.currency != NATCUR) and parameters.natCurEquivalent )
               m_printEngine.addPrintCell("Исходящий остаток " + АП(parameters.account.restOutEq, parameters.account.kind_account) + " эквивалент: " + abs(parameters.account.restOutEq), m_rightHalfWidth, 0, getFormatSpecifier(STR_ALIGN_LEFT), REP_ELEM_STR);
               m_printEngine.addStr();
           end;

        /* EVG 9/1/2014 Для выписки на бланке (Excel на бланке) свой вариант */
        elif( ReportType == REPTYPE_XLS_BLANK )
           m_printEngine.addPrintCell("", m_printEngine.getWidthBeforeCol(4), 0, 0, REP_ELEM_STR);
           m_printEngine.addPrintCell("Исходящий остаток " + АП(parameters.account.restOut, parameters.account.kind_account) + ": " + abs(parameters.account.restOut), m_rightHalfWidth, 0, getFormatSpecifier(STR_ALIGN_LEFT), REP_ELEM_STR);

           m_printEngine.addStr();
           if ( (parameters.account.currency != NATCUR) and parameters.natCurEquivalent )
               m_printEngine.addPrintCell("", m_printEngine.getWidthBeforeCol(4), 0, 0, REP_ELEM_STR);
               m_printEngine.addPrintCell("Исходящий остаток " + АП(parameters.account.restOutEq, parameters.account.kind_account) + " эквивалент: " + abs(parameters.account.restOutEq), m_rightHalfWidth, 0, getFormatSpecifier(STR_ALIGN_LEFT), REP_ELEM_STR);
               m_printEngine.addStr();
           end;

        else
           /* EVG 14/2/2014 Сумму печатаем сразу, не выносим к правому краю таблички.
           m_printEngine.addPrintCell("Исходящий остаток " + АП(parameters.account.restOut, parameters.account.kind_account), m_leftHalfWidth, 0, getFormatSpecifier(STR_ALIGN_LEFT), REP_ELEM_STR);
           m_printEngine.addPrintCell(abs(parameters.account.restOut), m_rightHalfWidth, 2, getFormatSpecifier(STR_ALIGN_RIGHT)+ternary(parameters.cSetA, ":a", ""), REP_ELEM_STR);*/
           m_printEngine.addPrintCell("Исходящий остаток: " + АП(parameters.account.restOut, parameters.account.kind_account) + "\t" + abs(parameters.account.restOut), m_leftHalfWidth, 0, getFormatSpecifier(STR_ALIGN_LEFT), REP_ELEM_STR);

           m_printEngine.addStr();
           if ( (parameters.account.currency != NATCUR) and parameters.natCurEquivalent )
               m_printEngine.addPrintCell("Исходящий остаток " + АП(parameters.account.restOutEq, parameters.account.kind_account) + " эквивалент", m_leftHalfWidth, 0, getFormatSpecifier(STR_ALIGN_LEFT), REP_ELEM_STR);
               m_printEngine.addPrintCell(abs(parameters.account.restOutEq), m_rightHalfWidth, 2, getFormatSpecifier(STR_ALIGN_RIGHT)+ternary(parameters.cSetA, ":a", ""), REP_ELEM_STR);
               m_printEngine.addStr();
           end;
        end;

        if (    (parameters.account.currency != NATCUR)
            and parameters.natCurEquivalent
            and (parameters.account.initialSubsystem == REP_SUBSYSTEMS_CB)
           )
            addString(String("Курс ЦБ: ", parameters.rateOut), m_reportWidth, 0, getFormatSpecifier(STR_ALIGN_RIGHT), REP_ELEM_STR);
        end;

        /* EVG 14/1/2014 Для обычной выписки печатаем конец страницы */
        /* EVG 16/1/2014 Для выписки на бланке тоже - необходимо для расстановки переносов страниц.
           !!! Ни в коем случае не убирать без корректировки pr_accst_format.mac, т.к. чревато подвисанием системы !!! */
        if( ( ReportType == REPTYPE_ORDINARY ) or ( ReportType == REPTYPE_XLS_BLANK ) )
           addString( strFor(12), 1, 0, getFormatSpecifier(STR_ALIGN_RIGHT), REP_ELEM_STR );
        end;

    end;


    macro printFD(stringalizedFD : TArray)
        return;
    end;


    /**
     * Получить экземпляр CMakeReport.
     */
    macro getPrintEngine()
        return m_printEngine;
    end;

    /**
     *  Конструктор.
     */
    private macro constructor(parameters : Object)
//        m_printEngine = CMakeReport("", SEP_DEFAULT, 100000);
        m_printEngine = TMakeReport("", SEP_DEFAULT, 100000);
        m_printEngine.setFlagShowMidSeparator( false );

        /* EVG 16/1/2014 Пока не стал возвращать сетку, как раньше было. Может, так понравится. */
        m_printEngine.setFlagShowGrid( false );

        /* EVG 16/1/2014 Добавил, но, к сожалению, не работает, по кр. мере в Excel 14 (2010).
           Не печатать нули (так раньше было). */
        m_printEngine.SetFlagShowZeroValue( false );

        FlagHighQualityRep = true;

        m_needDoublePrint = parameters.dblPrint;
    end;

    constructor(parameters);

end;

/**
 * Печатное представление plain text на основе Windows Reports
 *
 * @since   v.6.20.030.049
 * @author  ABP
 * @version 1.1
 */
private class (TWinRepView) TPlainTextView(parameters)
    private var m_isFirstInit : Bool;
    private var m_printOFStream : TOFStream;

    private macro getTableHeader() : Variant
        if (isEqClass("TTableReportPrintEngine", m_printEngine))
            var header = getTableHeader();
            return arrCreate(m_template, header);
        else
            return getTableHeader();
        end;
    end;

    macro initialize(parameters)
        m_parameters = parameters;

        if (m_isFirstInit)
            m_printOFStream.clear();
            m_printEngine.setHeader(getTableHeader());
            if (not isEqClass("TTableReportPrintEngine", m_printEngine))
                m_printEngine.getCurSheet().setSheetName(parameters.account.acc);
            end;
            m_isFirstInit = false;
        else
            m_printEngine.addNewSheetBreak(parameters.account.acc, getTableHeader());
        end;

        initialize(parameters);
    end;

    macro printEmptyReport()
        m_printOFStream.clear();
        printEmptyReport();
    end;

    macro printFD(stringalizedFD : TArray)
        var maxWidth = m_reportWidth;
        var length;
        var i;

        for (i, stringalizedFD)
            length = strlen(i);
            if (length > maxWidth)
                maxWidth = length;
            end;
        end;
        m_reportWidth = maxWidth;
//debugbreak;

        /* EVG 7/03/2014 "Мсепаратор" не печатаем, когда в текст выводятся только приложения.
           Также не печатаем, если документа-приложения нету */
        if( need_print and stringalizedFD.Size() )
           m_printEngine.addEmptyStr();
           addString(m_separator, m_reportWidth, 0, getFormatSpecifier(STR_ALIGN_LEFT), REP_ELEM_STR);
        end;

        for (i, stringalizedFD)
            addString(strRPad(i, m_reportWidth, " "), m_reportWidth, 0, getFormatSpecifier(STR_ALIGN_LEFT), REP_ELEM_STR);
        end;

        /* EVG 7/03/2014 Аналогично и с пустой строкой - просто так не печатаем */
        if( need_print and stringalizedFD.Size() )
           m_printEngine.addEmptyStr();
        end;

    end;

    macro print();

        /* EVG 24/12/2013 Здесь небольшой глюк - в TOFStream().setOutputFile() система пытается
           перенести вывод в тот файл, в который УЖЕ идёт вывод - ordacc.***. Поэтому для того,
           чтобы  всё получилось правильно, нужно сначала  изменить файл вывода на какой-нибудь 
           другой. Иначе - scr#205300 "Выписка печатается не полностью". */
        SetOutput( getTxtFileName("ordacc_tmp"), false );

        m_printOFStream.setOutputFile();
        m_printEngine.printRep(m_needDoublePrint);
        m_printOFStream.resetOutputFile();
        reportBodyFileName = m_printOFStream.getFileName();
    end;

    macro show()
        m_printOFStream.show();
    end;

    macro save(reportName)
        m_printOFStream.save(reportName);
    end;

    /**
     *  Конструктор.
     */
    private macro constructorTPlainTextView(parameters : Object)
        initTWinRepView(parameters);
        m_printEngine = TTableReportPrintEngine();

        m_isFirstInit = true;

        var name;
        var dd;
        var mm;
        var yyyy;
        var dateIn;
        var dateOut;

        dateSplit(parameters.dateIn, dd, mm, yyyy);
        dateIn = String(yyyy) + String(mm : 2 : 0 : o) + String(dd : 2 : 0 : o);

        dateSplit(parameters.dateOut, dd, mm, yyyy);
        dateOut = String(yyyy) + String(mm : 2 : 0 : o) + String(dd : 2 : 0 : o);

        name = ternary(parameters.currency == NATCUR, "ordacc", "ordacc$");
        m_printOFStream = TOFStream(name, false);
    end;

    constructorTPlainTextView(parameters);

end;

/**
 * Печатное представление Excel на основе Windows Reports
 *
 * @since   v.6.20.030.049
 * @author  ABP
 * @version 1.1
 */
private class (TWinRepView) TExcelView(parameters)
    private var m_isFirstInit : Bool;

    macro initialize(parameters)
        m_parameters = parameters;

        if (m_isFirstInit)
            m_printEngine.setHeader(getTableHeader());
            m_printEngine.getCurSheet().setSheetName(parameters.account.acc);
            m_isFirstInit = false;
        else
            m_printEngine.addNewSheetBreak(parameters.account.acc, getTableHeader());
        end;

        initialize(parameters);
    end;

    macro printHeader(parameters)
        printHeader(parameters);
    end;

    macro print()
        m_printEngine.printWinRep();
    end;

    macro show()

        //debugbreak;
        /* EVG 14/1/2014 Задание имени процедуры постобработки (форматирования) excel-файлика.
           Она вызввается из showWinRep() после того, как отчёт уже сформирован, перед выводом на экран. */
        /* EVG  5/5/2014 Добавил передачу признака "Эквивалент в нац. валюте" для валюты */
        var addEquivalent = false;
        if( m_parameters )      // Если стоит отказ от печати выписок, то m_parameters нету, поэтому надо проверять.
           addEquivalent = ( (m_parameters.account.currency != NATCUR) and m_parameters.natcurEquivalent );
        end;
        m_printEngine.SetExecuteMacro( "pr_accst_format.mac", "FormatExcelBook", ReportType, NeedAddInfo, noPageBreaks, addEquivalent );
        m_printEngine.showWinRep();
    end;

    /**
     *  Конструктор.
     */
    private macro constructorTExcelView(parameters : Object)
        initTWinRepView(parameters);

        m_printEngine.setWinRepOutput(WINREP_OUTPUT_EXCEL, WINREP_FORMAT_XLS);
        m_printEngine.setModeBigReport(true);
        m_printEngine.setFlagShowIndicator(false);
        m_isFirstInit = true;

        var name;
        var dd;
        var mm;
        var yyyy;
        var dateIn;
        var dateOut;

        dateSplit(parameters.dateIn, dd, mm, yyyy);
        dateIn = String(yyyy) + String(mm : 2 : 0 : o) + String(dd : 2 : 0 : o);

        dateSplit(parameters.dateOut, dd, mm, yyyy);
        dateOut = String(yyyy) + String(mm : 2 : 0 : o) + String(dd : 2 : 0 : o);

        if (dateIn == dateOut)
            name =       ternary(parameters.currency == NATCUR, "ordacc", "ordacc$")
                 + "_" + dateIn;
        else
            name =       ternary(parameters.currency == NATCUR, "ordacc", "ordacc$")
                 + "_" + dateIn
                 + "_" + dateOut;
        end;

        m_printEngine.setFileName(name);
    end;

    /* EVG 13/03/2014 Переопределил методы printEmptyData() / printEmptyReport() для того, чтобы при выводе в
       Excel печатать конец страницы. В текстовом виде он не нужен. */
    macro printEmptyData()
        addString("Данные отсутствуют" + strFor(12), m_tableWidth, 0, getFormatSpecifier(STR_ALIGN_CENTER), REP_ELEM_TABL);
    end;

    /* EVG 20/03/2014 Сделал возмодность вывода кастомной строки в случае пустого отчёта */
    macro printEmptyReport( inText )
        var prnString = inText;

        if( ( valType( prnString ) == V_UNDEF ) or ( prnString == "" ) )
           prnString = "Данные отсутствуют";
           addString(prnString + strFor(12), 0, 0, getFormatSpecifier(STR_ALIGN_LEFT), REP_ELEM_STR);   //26.03.2015 I-00558107-4 DPN 
        end;
    end;
    /* EVG 13/03/2014 end */

    constructorTExcelView(parameters);

end;

/**
 * Печатное представление Word на основе Windows Reports
 *
 * @since   v.6.20.030.049
 * @author  ABP
 * @version 1.0
 */
private class (TWinRepView) TWordView(parameters)
    private var m_isFirstInit : Bool;
    private var m_enginesPool : TArray;

    macro initialize(parameters)
        m_printEngine = TWinRepView(parameters).getPrintEngine();
        m_printEngine.setWinRepOutput(WINREP_OUTPUT_WORD, WINREP_FORMAT_DOC);
        m_printEngine.setFlagShowIndicator(false);

        m_parameters = parameters;
        m_printEngine.setHeader(getTableHeader());

        initialize(parameters);
    end;

    macro printHeader(parameters)
        var name;
        var dd;
        var mm;
        var yyyy;
        var dateIn;
        var dateOut;

        dateSplit(m_parameters.dateIn, dd, mm, yyyy);
        dateIn = String(yyyy) + String(mm : 2 : 0 : o) + String(dd : 2 : 0 : o);

        dateSplit(m_parameters.dateOut, dd, mm, yyyy);
        dateOut = String(yyyy) + String(mm : 2 : 0 : o) + String(dd : 2 : 0 : o);

        if (dateIn == dateOut)
            name =       ternary(m_parameters.account.currency == NATCUR, "ordacc", "ordacc$")
                 + "_" + m_parameters.account.acc
                 + "_" + dateIn;
        else
            name =       ternary(m_parameters.account.currency == NATCUR, "ordacc", "ordacc$")
                 + "_" + m_parameters.account.acc
                 + "_" + dateIn
                 + "_" + dateOut;
        end;

        m_printEngine.setFileName(name);

        printHeader(parameters);
    end;

    macro printFooter(parameters, docs)
        printFooter(parameters, docs);
        m_enginesPool.value(m_enginesPool.size) = m_printEngine;
    end;

    macro printRow(dataset)
        var data;
        var temp;

        for (var i, m_template.getDataColumns())
            data = execExp("dataset." + i.dataSourceName);
            if (i.dataSourceName == "ground")
                temp = "";
                for (var j, strTransferByWord(data, i.width))
                    temp = temp + "\n" + trim(j);
                end;
                data = substr(temp, 2);
            end;
            m_printEngine.addPrintCell(data, null, null, i.format, REP_ELEM_TABL);
        end;
        m_printEngine.addStr();
    end;

    macro printEmptyReport()
        printEmptyReport();
        m_enginesPool.value(m_enginesPool.size) = m_printEngine;
    end;

    macro print()
        var i = 0;
        while (i < m_enginesPool.size)
            m_enginesPool.value(i).printWinRep();
            i = i + 1;
        end;
    end;

    macro show()
        var i = 0;
        while (i < m_enginesPool.size)
            m_enginesPool.value(i).showWinRep();
            i = i + 1;
        end;
    end;

    /**
     *  Конструктор.
     */
    private macro constructorTWordView(parameters : Object)
        initTWinRepView(parameters);
        m_printEngine.setWinRepOutput(WINREP_OUTPUT_WORD, WINREP_FORMAT_DOC);
        m_isFirstInit = true;
        m_enginesPool = TArray();
    end;

    constructorTWordView(parameters);

end;
    
/************************************************************************************************************************/
/*****************************************************  ПЕЧАТЬ  *********************************************************/
/***************************************************  ОКОНЧАНИЕ *********************************************************/
/************************************************************************************************************************/

/************************************************************************************************************************/
/************************************************  ОСНОВНЫЕ СЧЕТА  ******************************************************/
/*****************************************************  НАЧАЛО  *********************************************************/
/************************************************************************************************************************/

/* Инициализация ХП */
private MACRO InitPck(AccInfo)

  SQL_Execute("{ CALL rsb_rep_pt.set_selfid(" + {OurBank} + ") }");

  return WELLDONE;
END;

/* Условие WHERE для выборки основных счетов ГКБО */
private MACRO MakeAccWhere(Currency, AccInfo, isCache)
  var Where = "";

  var accountType = "";

  Where = Where + AccInfo.AccountFilter.GetAsSqlString("ac")+END_LINE;

  Where = Where + "AND " + getChapterFilterSqlClause(AccInfo.Chapter, "ac.t_chapter");

  if (AccInfo.ExcludeOcp == true)
    Where = Where + "AND NOT" + AccInfo.OcpAccountServer.GetAsSqlString("ac")+END_LINE;
  end;

  if (AccInfo.AccountMask != "")
    Where = Where + " AND ("+ConvertMaskToSQLFormat(AccInfo.AccountMask, "ac.t_Account")+")"+END_LINE;
  end;

  if( AccInfo.Oper != 0 )
    Where = Where + "AND ac.t_oper = "+AccInfo.Oper+END_LINE;
  end;

  if (Currency == ALLCURRENCY)
    Where = Where + "AND ac.t_Code_Currency != "+NATCUR+END_LINE;
  elif (Currency != ALLFININSTR)
    Where = Where + "AND ac.t_Code_Currency = "+Currency+END_LINE;
  end;

  Where = Where + "AND ac.t_Open_Date BETWEEN " + getSqlDate(ZeroDate) + " AND " + getSqlDate(AccInfo.DateOut) + END_LINE+
                  "AND (   ac.t_Close_Date BETWEEN " + getSqlDate(AccInfo.DateIn) + " AND " + getSqlDate(Date(31,12,9999)) + END_LINE+
                  "     OR ac.t_Close_Date = " + getSqlDate(ZeroDate) + END_LINE+
                  "    )"+END_LINE;

  if (AccInfo.Client > 0)
    Where = Where + "AND ac.t_Client = "+AccInfo.Client+END_LINE;
  end;

  Where = Where + "AND ab.t_accountId = ac.t_accountId"+END_LINE;
  Where = Where + "AND "+AccInfo.accountFilterMaskBalance("ac")+END_LINE;


  /* EVG 10/03/2014 По просьбе Елены Ш. - если не задана маска ЛС или БС, то в выписке печатаются
     только расчётные счета клиентов. */
  if( ( AccInfo.AccountMask == "" ) and (AccInfo.BalanceMask == "") and (fgBank.is_SLD)) //11.11.2014 I-00530514-2 DPN
     Where = Where + "AND ab.t_balance0 like '40%'";
  end;


  if ((not AccInfo.cSetZTurn) and (not isCache))
    if (Currency == NATCUR)
      Where = Where + "AND EXISTS(SELECT /*+ NO_UNNEST*/1" + END_LINE +
                      "             FROM drestdate_dbt restDate" + END_LINE +
                      "            WHERE restDate.t_accountId = ac.t_accountId" + END_LINE +
                      "              AND restDate.t_restCurrency = ac.t_code_currency" + END_LINE +
                      "              AND restDate.t_restDate BETWEEN " + getSqlDate(AccInfo.DateIn) + " AND " + getSqlDate(AccInfo.DateOut) + END_LINE +
                      "          )" + END_LINE
                      ;
    else
      if (AccInfo.NatCurEquivalent == true) /* Должны быть док. по счету или переоценка */
        if (AccInfo.cSetExcludeRevalue == true) /* Переоценка не считается документом по валютному счету */
          Where = Where + "AND EXISTS(SELECT 1" + END_LINE +
                          "             FROM daccTrn_dbt" + END_LINE +
//                          "            WHERE ac.t_accountId = ANY(t_accountId_payer, t_accountId_receiver)" + END_LINE +
                          "            WHERE ac.t_accountId = t_accountId_payer" + END_LINE +
                          "              AND t_state = 1" + END_LINE +
                          "       AND t_date_carry BETWEEN " + getSqlDate(AccInfo.DateIn) + " AND " + getSqlDate(AccInfo.DateOut) + END_LINE +
                          "              AND t_result_carry NOT IN (" + DELTARATE
                                                                + "," + REGRESTOUTCARRY
                                                                + "," + DELTARATE_ADD
                                                                + ")"                         + END_LINE +
                          "     UNION ALL" + END_LINE +
                          "    SELECT 1" + END_LINE +
                          "             FROM daccTrn_dbt" + END_LINE +
                          "            WHERE ac.t_accountId = t_accountId_receiver" + END_LINE +
                          "              AND t_state = 1" + END_LINE +
                          "       AND t_date_carry BETWEEN " + getSqlDate(AccInfo.DateIn) + " AND " + getSqlDate(AccInfo.DateOut) + END_LINE +
                          "              AND t_result_carry NOT IN (" + DELTARATE
                                                                + "," + REGRESTOUTCARRY
                                                                + "," + DELTARATE_ADD
                                                                + ")"                         + END_LINE +
                          "          )" + END_LINE
                          ;
        else /* Переоценка считается документом по валютному счету */
          Where = Where + "AND EXISTS(SELECT /*+ NO_UNNEST*/1" + END_LINE +
                          "             FROM drestdate_dbt restDate" + END_LINE +
                          "            WHERE restDate.t_accountId = ac.t_accountId" + END_LINE +
                          "              AND restDate.t_restCurrency = ac.t_code_currency" + END_LINE +
                          "              AND restDate.t_restDate BETWEEN " + getSqlDate(AccInfo.DateIn) + " AND " + getSqlDate(AccInfo.DateOut) + END_LINE +
                          "          )" + END_LINE
                          ;
        end;
      else /* должны быть док. по счету, кроме КР и переоценки */
        Where = Where + "AND EXISTS(SELECT 1" + END_LINE +
                        "             FROM daccTrn_dbt" + END_LINE +
//                        "            WHERE ac.t_accountId = ANY(t_accountId_payer, t_accountId_receiver)" + END_LINE +
                        "            WHERE ac.t_accountId = t_accountId_payer" + END_LINE +
                        "              AND t_state = 1" + END_LINE +
                        "       AND t_date_carry BETWEEN " + getSqlDate(AccInfo.DateIn) + " AND " + getSqlDate(AccInfo.DateOut) + END_LINE +
                        "              AND t_result_carry NOT IN (" + DELTARATE
                                                              + "," + REGRESTOUTCARRY
                                                              + "," + DELTARATE_ADD
                                                              + "," + DELTARATE_MCD
                                                              + ")"                           + END_LINE +
                        "           UNION ALL" + END_LINE +
                        "           SELECT 1" + END_LINE +
                        "             FROM daccTrn_dbt" + END_LINE +
                        "            WHERE ac.t_accountId = t_accountId_receiver" + END_LINE +
                        "              AND t_state = 1" + END_LINE +
                        "              AND t_date_carry BETWEEN " + getSqlDate(AccInfo.DateIn) + " AND " + getSqlDate(AccInfo.DateOut) + END_LINE +
                        "              AND t_result_carry NOT IN (" + DELTARATE
                                                              + "," + REGRESTOUTCARRY
                                                              + "," + DELTARATE_ADD
                                                              + "," + DELTARATE_MCD
                                                              + ")"                           + END_LINE +
                        "          )" + END_LINE
                        ;
      end;
    end;
  end;

  if (AccInfo.AccountType != "")
    Where = Where + "AND LENGTH(TRANSLATE('|' || ac.t_Type_Account, " + 
                    "                     '|' || " + getSqlString(AccInfo.AccountType) + ", " +
                    "                     '|')) = LENGTH(ac.t_Type_Account) - LENGTH(" + getSqlString(AccInfo.AccountType) + ") + 1 " + END_LINE;
  end;

  if (AccInfo.AccountUserType != "")
    Where = Where + "AND " + getPatternFilterClause("ac.t_UserTypeAccount", AccInfo.AccountUserType, AccInfo.userTypeMethod) + END_LINE;
  end;

  if (AccInfo.cSetCr)
    accountType = "К";
  end;

  accountType = accountType + "ПМН";
  Where = Where + "AND (LENGTH(TRANSLATE('|' || ac.t_type_account, '|' || " + getSqlString(accountType)+ ", '|||||')) != LENGTH(ac.t_type_account)"
                + " or LENGTH (ac.t_type_account) is null)";// 02.06.2014 I-00491864-2 DPN

  if (AccInfo.excludeInternetAccount)

    var isContinuation = " CASE"
                + "\n" + "     WHEN EXISTS (SELECT NULL"
                + "\n" + "                    FROM DOBJATCOR_dbt atr"
                + "\n" + "                   WHERE atr.t_object = TO_CHAR(ac.t_chapter, 'FM00') || TO_CHAR(ac.t_code_currency, 'FM0000000') || ac.t_account"
                + "\n" + "                     AND atr.t_objectType = category.t_objectType"
                + "\n" + "                     AND atr.t_groupId = category.t_id"
                + "\n" + "                     AND atr.t_validToDate = DECODE (category.t_validFromDate, TO_DATE ('01.01.0001', 'DD.MM.YYYY'),"
                + "\n" + "                                                     category.t_validFromDate, category.t_validFromDate - 1)"
                + "\n" + "                 )"
                + "\n" + "     THEN 1"
                + "\n" + "     ELSE 0"
                + "\n" + " END";

    var hasContinuation = " CASE"
                + "\n" + "     WHEN EXISTS (SELECT NULL"
                + "\n" + "                    FROM DOBJATCOR_dbt atr"
                + "\n" + "                   WHERE atr.T_OBJECT = TO_CHAR(ac.t_chapter, 'FM00') || TO_CHAR(ac.t_code_currency, 'FM0000000') || ac.t_account"
                + "\n" + "                     AND atr.t_objectType = category.t_objectType"
                + "\n" + "                     AND atr.t_groupId = category.t_id"
                + "\n" + "                     AND atr.t_validFromDate = DECODE (category.t_validToDate, TO_DATE ('31.12.9999', 'DD.MM.YYYY'),"
                + "\n" + "                                                       category.t_validToDate, category.t_validToDate + 1)"
                + "\n" + "                 )"
                + "\n" + "     THEN 1"
                + "\n" + "     ELSE 0"
                + "\n" + " END";
    
    Where = Where + "AND (   EXISTS (SELECT NULL"
           + "\n" + "                  FROM DREPCATEGORY_VW category"
           + "\n" + "                 WHERE category.t_objectId = TO_CHAR(ac.t_chapter, 'FM00') || TO_CHAR(ac.t_code_currency, 'FM0000000') || ac.t_account"
           + "\n" + "                   AND category.t_value = 'И'"
           + "\n" + "                   AND category.t_id = 14"
           + "\n" + "                   AND category.t_objectType = " + OBJTYPE_ACCOUNT
           + "\n" + "                   AND category.t_isInstalledOverPeriod = 1"
           + "\n" + "                   AND (   (    category.t_isInstalledForBeginDate = 1"
           + "\n" + "                            AND category.t_isInstalledForEndDate = 0"
           + "\n" + "                            AND " + hasContinuation + " = 0"
           + "\n" + "                           )"
           + "\n" + "                         OR (    category.t_isInstalledForBeginDate = 0"
           + "\n" + "                             AND category.t_isInstalledForEndDate = 1"
           + "\n" + "                             AND " + isContinuation + " = 0"
           + "\n" + "                            )"
           + "\n" + "                         OR (    category.t_isInstalledForBeginDate = 0"
           + "\n" + "                             AND category.t_isInstalledForEndDate = 0"
           + "\n" + "                             AND (    " + hasContinuation + " = 0"
           + "\n" + "                                   OR " + isContinuation + " = 0"
           + "\n" + "                                 )"
           + "\n" + "                            )"
           + "\n" + "                        )"
           + "\n" + "                 )"
           + "\n" + "     OR NOT EXISTS (SELECT NULL"
           + "\n" + "                      FROM DREPCATEGORY_VW category"
           + "\n" + "                     WHERE category.t_objectId = TO_CHAR(ac.t_chapter, 'FM00') || TO_CHAR(ac.t_code_currency, 'FM0000000') || ac.t_account"
           + "\n" + "                       AND category.t_value = 'И'"
           + "\n" + "                       AND category.t_id = 14"
           + "\n" + "                       AND category.t_objectType = " + OBJTYPE_ACCOUNT
           + "\n" + "                       AND category.t_isInstalledOverPeriod = 1"
           + "\n" + "                   )"
           + "\n" + "    )" + END_LINE;
    end; 

  Where = Where + END_LINE;

  return Where;
END;

/* ORDER BY для выборки основных счетов */
private macro MakeAcOrderBy(AccInfo)
  var orderBy = "";

  for (var i, accInfo.kindSort)

    if (i == REP_PATTERNSORT_DEPARTMENT)
      orderBy = orderBy + "," + "t_department, t_branch ";
    elif (i == REP_PATTERNSORT_OPER)
      orderBy = orderBy + "," + "t_oper ";
    elif (i == REP_PATTERNSORT_CLIENT)
      orderBy = orderBy + "," + "t_nameClnt ";
    elif (i == REP_PATTERNSORT_ACCOUNT)
      orderBy = orderBy + "," + "t_acc ";
    elif (i == REP_PATTERNSORT_CHAPTER)
      orderBy = orderBy + "," + "t_chapter ";
    elif (i == REP_PATTERNSORT_SYSTEM_MAKET)
      orderBy = orderBy + "," + "t_sort ";
    end;

  end;


  // Тихомиров - сортировка для выписки
  if ((flag==3) or (flag==4))
     /*korkin for 154 t_acc */
     /*orderby="ORDER BY substr(t_acc,16,5)";*/
     /*SDA*/
     orderBy = orderBy + "," + "substr(t_acc,16,5)";
  end;


  if (orderBy != "")
    orderBy = "ORDER BY " + substr(orderBy, 2);
  end;

  return orderBy;
end;

/* Формирование SQL-запроса для отбора основных счетов ГКБО */
private MACRO MakeAccountQuery(Currency, AccInfo, requiredDate, isCache)

  macro makeRest(restDate, isEquivalent, needEquivalent)
    var restCurrencyClause;
    var queryText;

    if (isEquivalent and not needEquivalent)
        queryText = "0";
    else
        if (isEquivalent)
            restCurrencyClause = "t_restCurrency = 0";
        else
            restCurrencyClause = "t_restCurrency = ac.t_code_currency";
        end;

    queryText = "NVL((SELECT t_rest"
       + "\n" + "       FROM drestdate_dbt rest"
       + "\n" + "      WHERE rest.t_accountId = ac.t_accountId"
       + "\n" + "        AND rest." + restCurrencyClause
       + "\n" + "        AND rest.t_restDate = (SELECT MAX(maxDate.t_restDate)"
       + "\n" + "                                 FROM drestdate_dbt maxDate"
       + "\n" + "                                WHERE maxDate.t_accountId = ac.t_accountId"
       + "\n" + "                                  AND maxDate." + restCurrencyClause
       + "\n" + "                                  AND maxDate.t_restDate <= " + getSqlDate(restDate)
       + "\n" + "                              )"
       + "\n" + "    ), 0"
       + "\n" + "   )"
       ;
    end;

    return queryText;
  end;

  defaultParm(isCache, false);

  var Select;
  var From;
  var Where = "WHERE ", CmdText = "";
  var requiredDateString;

  if ((valType(requiredDate) != V_UNDEF) and ((requiredDate != NULL) or (requiredDate != date(0, 0, 0))))
       requiredDateString = ", " + string(getSqlDate(requiredDate));  
  else
       requiredDateString = "";
  end;

  if (isCache)

      Select = "SELECT ac.t_accountId        accId,"
      + "\n" + "       ac.t_Account          AccountNumber,"
      + "\n" + "       ac.t_chapter          chapterNumber,"
      + "\n" + "       CHR(1)                connAcc,"
      + "\n" + "       0                     connChapter,"
      + "\n" + "       ac.t_code_currency    curCode,"
      + "\n" + "   " + REP_SUBSYSTEMS_CB + " subsystem";

  else /* EVG 19/12/2013 Из старого макроса: Добавлено substr из 151*/
      Select = "SELECT ac.t_accountId                                                                   AccId,"
      + "\n" + "       ac.t_Account                                                                     AccountNumber,"
      + "\n" + "       substr(ac.t_NameAccount, 1, 120)                                                                 AccountName,"
      + "\n" + "       ac.t_Account                                                                     OdbAccount,"
      + "\n" + "       NVL((SELECT CASE"
      + "\n" + "                       WHEN 1 = " + b2i(accInfo.printFullNameClient)
      + "\n" + "                       THEN party.t_name" //substr(party.t_name, 1, 60)"
      + "\n" + "                       ELSE party.t_shortname" //substr(party.t_shortname, 1, 35)"
      + "\n" + "                   END"
      + "\n" + "              FROM dparty_dbt party"
      + "\n" + "             WHERE party.t_partyId = ac.t_client"
      + "\n" + "           ), CHR(1)"
      + "\n" + "          )                                                                             ClientName,"
      + "\n" + "       rsb_rep_pt.get_PartyInn(ac.t_Client, 1" + requiredDateString + ")                ClientInn,"
      + "\n" + "       NVL((SELECT substr(person.t_name, 1, 35)"
      + "\n" + "              FROM dperson_dbt person"
      + "\n" + "             WHERE person.t_oper = ac.t_oper"
      + "\n" + "           ), CHR(1)"
      + "\n" + "          )                                                                             OperName,"
      + "\n" + "       rsb_rep_ac.prevdatin(ac.t_accountId, ac.t_code_currency, 1)                      Dpd_R,"
      + "\n" + "       rsb_rep_ac.prevdatin(ac.t_accountId, ac.t_code_currency, 0)                      Dpd,"
      + "\n" + "       NVL((SELECT substr(fi.t_name, 1, 25)"
      + "\n" + "              FROM dfininstr_dbt fi"
      + "\n" + "             WHERE fi.t_fiId = ac.t_code_currency"
      + "\n" + "           ), CHR(1)"
      + "\n" + "          )                                                                             CurrencyName,"
      + "\n" + "   " + makeRest(accInfo.dateIn-1, false, accInfo.natCurEquivalent) + "                  AccountInRest,"
      + "\n" + "   " + makeRest(accInfo.dateIn-1,  true, accInfo.natCurEquivalent) + "                  AccountInRestEq,"
      + "\n" + "   " + makeRest(accInfo.dateOut,  false, accInfo.natCurEquivalent) + "                  AccountOutRest,"
      + "\n" + "   " + makeRest(accInfo.dateOut,   true, accInfo.natCurEquivalent) + "                  AccountOutRestEq,"
      + "\n" + "       ac.t_Type_Account                                                                TypeAccount,"
      + "\n" + "       ac.t_Chapter                                                                     ChapterNumber,"
      + "\n" + "       ac.t_Kind_Account                                                                KindAccount,"
      + "\n" + "       ac.t_Sort                                                                        Sort,"
      + "\n" + "       ac.t_Branch                                                                      Branch,"
      + "\n" + "       CHR(1)                                                                           connAcc,"
      + "\n" + "       0                                                                                connChapter,"
      + "\n" + "       ac.t_Department                                                                  Department,"
      + "\n" + "       ac.t_Code_Currency                                                               CurCode,"
      + "\n" + "   " + REP_SUBSYSTEMS_CB + "                                                            subsystem,"
      + "\n" + "   " + REP_SUBSYSTEMS_CB + "                                                            initialSubsystem,"
      + "\n" + "       NULL                                                                             RevalDocsExist   "; // 12.11.2007 ABP deprecated
  end;

  From = "\n" + "FROM daccount_dbt ac,"
       + "\n" + "     daccblnc_dbt ab"
       + "\n" + "";

  Where = Where + MakeAccWhere(Currency, AccInfo, isCache);

  CmdText = Select + From + Where;
  return CmdText;

END;

private macro makeAccountQueryText(accInfo, requiredDate, isCache)

    return makeAccountQuery(accInfo.currency, accInfo, requiredDate, isCache);

end;

/************************************************************************************************************************/
/************************************************  ОСНОВНЫЕ СЧЕТА  ******************************************************/
/**************************************************  ОКОНЧАНИЕ  *********************************************************/
/************************************************************************************************************************/

/* Печать приложений */
private MACRO ProcessFDocs(AccInfo, Docs) : TArray
    var i = 0;
    var stringalizedFD = TArray();
    var str : String;
    var fdoutput : TOFStream;
    FILE fdout() txt;

    macro FillDocumentBufferByLoansData(DocumentBuffer, DocStorage)

        if (DocStorage[DS_DOC] != 0)
            DocumentBuffer.rec.AccTrnId = DocStorage[DS_DOC];
            DocumentBuffer.GetEQ();
        else
            Copy(DocumentBuffer, DocStorage[DS_CBDOC]);
        end;

        return DocumentBuffer;
    end;

    macro FilterDocs(DocStorage, OutForm)
        return ((DocStorage[DS_DK] == OutForm) or (OutForm == ACC_FORMS_ALL));
    end;

    /* EVG 19/12/2013 Пользовательская функция, перенесена из 2030 */
    macro opername(id)
        var cmd = rsdcommand("select t_name from dperson_dbt where t_oper = ?");
        cmd.addparam("id", RSdBP_IN, id);
        cmd.execute();
        var rsd = rsdrecordset(cmd);
        if (rsd.movenext())
            return rsd.value(0);
        else
            return "";
        end;
    end;
    
    // KS 26.08.2010 I-056427 РС 6 ГЭБ, ВЫПИСКИ Определение шифра операции по проводке
    macro GetShifrOper(autokey)

        /* EVG 25/12/2013 Переход на 2031
        var cmd = rsdcommand("select t_shifr_oper from darhdoc_dbt where t_autokey = ?");*/
        var cmd = rsdcommand("select t_shifr_oper from dacctrn_dbt where t_acctrnid = ?");
        cmd.addparam("id", RSdBP_IN, autokey);
        cmd.execute();
        var rsd = rsdrecordset(cmd);
        if (rsd.movenext())
            return rsd.value(0);
        else
            return "";
        end;
    end;

    macro GetPrnForm(DocStorage)

        /*SDA*/ testevent(1);
        var cmdcc, rsdcc;
        // KS 26.08.2010 I-056427 РС 6 ГЭБ, ВЫПИСКИ Шифр операции для проводки
        var ShifrOper;
        if (DocStorage[DS_PAYM] != 0)
            //timeCounter13.start();
            var paymentsUtility = TPaymentsUtility(accInfo);
            accInfo.pr_pmpaym = paymentsUtility.getPaymentRecord(docStorage[DS_PAYM]);
            accInfo.pr_debit = paymentsUtility.getPaymentDebitPropertiesRecord(docStorage[DS_PAYM]);
            accInfo.pr_credit = paymentsUtility.getPaymentCreditPropertiesRecord(docStorage[DS_PAYM]);
            accInfo.pr_pmrmprop = paymentsUtility.getPaymentRPropertiesRecord(docStorage[DS_PAYM]);
            accInfo.pr_multydoc = paymentsUtility.getMultydocRecord(docStorage[DS_PAYM]);
            //timeCounter13.stop();



            /* EVG 25/12/2013 Большой пользовательский блок, начало */

            /*151*/
            // AAN 21.05.2013  C-20028-6  begin
            
            var flag_us_type = false;
            var cmd_sel = rsdcommand("SELECT instr (t_usertypeaccount, 'Ё' ) FROM daccount_dbt WHERE t_account = '" + AccInfo.account.acc + "'");
            cmd_sel.execute();
            var rsd_sql = rsdrecordset(cmd_sel);
            if (rsd_sql.movenext())
                if( rsd_sql.value(0) == 0 )
                    flag_us_type = true;
                end;
            end;
            
            if ( ((AccInfo.pr_pmpaym.rec.origin == 6) or (AccInfo.pr_pmpaym.rec.origin == 2100)) and ( flag_us_type == false )  ) // KS 14.12.2011 C-5692
                return PRN_SKIP;
            end;
            // AAN 21.05.2013  C-20028-6  END
            
            // KS 25.03.2011 ЭВ Irina K Ivanova исключть все DOCKIND =201 c Origin != Клиент банк
            if (( PRINT_ONLY_CLIENTBANK ) and ((AccInfo.pr_pmpaym.rec.DocKind == PS_CPORDER) or (AccInfo.pr_pmpaym.rec.DocKind == PS_PAYORDER)))
                if (AccInfo.pr_pmpaym.rec.DocKind == PS_CPORDER)
                    cmdcc = rsdcommand("select t_origin From dpscpord_dbt  where t_orderid = ?");
                else
                    cmdcc = rsdcommand("select t_origin From dpspayord_dbt where t_orderid = ?");
                end;
                cmdcc.addparam("", RSdBP_IN, AccInfo.pr_pmpaym.rec.paymentid);
                cmdcc.execute();
                rsdcc = rsdrecordset(cmdcc);
                if (rsdcc.movenext())
                    if ((rsdcc.value(0)  != 2) and (rsdcc.value(0)  != 14) and (GetShifrOper(DocStorage[0]) != 16)) //15.01.2014 DPN  I-00429034-5 Плат. орд. с шифром 16 должен печататься, как приложение к выписке(по просьбе Герман Елены)
                        return PRN_SKIP;
                    end;
                end;
            end;

            // 05.01.2010 ABP Обработка банковского ордера по 2360-У
            if (accInfo.pr_pmrmprop.rec.shifrOper == "17")
                // 05.01.2010 ABP Если встретился клиентский платежный документ, то печатается только кредитовый,
                //                дебетовую платежку клиент сам в банк принес, она у него и так в печатном виде имеется.
                if (in(accInfo.pr_pmpaym.rec.docKind, PS_CPORDER, PS_PAYORDER))
                    if (docStorage[DS_DK] == CREDIT_C)
                        /*SDA return PRN_RURPAYM;*/
                        return PRN_BNKO;
                    else
                        return PRN_SKIP;
                    end;
                end;

                // 05.01.2010 ABP Во всех остальных случаях при наличии связанного с проводкой платежа вызываем печать платежного документа.
                //                Макрос РБ сам разберет, что именно нужно печатать.
                /* SDA
                return PRN_RURPAYM;*/
                return PRN_BNKO;
            end;

            if ((DocStorage[DS_DK] == CREDIT_C) and (AccInfo.pr_pmpaym.rec.payerbankid != AccInfo.pr_pmpaym.rec.receiverbankid))
                cmdcc = rsdcommand("SELECT   COUNT (1) AS cnt                      "+
                                   "FROM   dobjatcor_dbt atcor, dobjattr_dbt attr  "+
                                   "WHERE       atcor.t_objecttype = 4             "+
                                   "AND atcor.t_groupid = 105                      "+
                                   "AND atcor.t_validtodate > to_date('"+{curdate}+"','dd.mm.yyyy') "+
                                   "AND attr.t_codelist IN (2)                     "+
                                   "AND atcor.t_groupid = attr.t_groupid           "+
                                   "AND attr.t_attrid = atcor.t_attrid             "+
                                   "AND attr.t_objecttype = atcor.t_objecttype     "+
                                   "AND atcor.t_object LIKE '%"+AccInfo.Account.Acc+"'");
                // cmdcc.addparam("date",RSDBP_IN,{curdate});
                //       cmdacc.addparam("acc",RSDBP_IN,AccInfo.Account.Acc);
                cmdcc.execute;
                rsdcc = rsdrecordset(cmdcc);
                if (rsdcc.movenext())
                    if (rsdcc.value(0) > 0)
                        return PRN_SKIP;
                    end;
                end;
            end;
            //       if (AccInfo.pr_pmpaym.rec.payerbankid != AccInfo.pr_pmpaym.rec.receiverbankid)
            // KS 27.03.2011 Какое-то странное для клиент-банка
            if ((AccInfo.pr_pmpaym.rec.DocKind == PS_CPORDER) or (AccInfo.pr_pmpaym.rec.DocKind == PS_PAYORDER))
                if (AccInfo.pr_pmpaym.rec.DocKind == PS_CPORDER)
                    cmdcc = rsdcommand("select t_origin From dpscpord_dbt  where t_orderid = ?");
                else
                    cmdcc = rsdcommand("select t_origin From dpspayord_dbt where t_orderid = ?");
                end;
                cmdcc.addparam("", RSdBP_IN, AccInfo.pr_pmpaym.rec.paymentid);
                cmdcc.execute();
                rsdcc = rsdrecordset(cmdcc);
                if (rsdcc.movenext())
                    if ((rsdcc.value(0)  == 2) or (rsdcc.value(0)  == 14))
                        cmdcc = rsdcommand("SELECT   COUNT (1) AS cnt                      "+
                                           "FROM   dobjatcor_dbt atcor, dobjattr_dbt attr  "+
                                           "WHERE       atcor.t_objecttype = 4             "+
                                           "AND atcor.t_groupid = 105                      "+
                                           "AND atcor.t_validtodate > to_date('"+{curdate}+"','dd.mm.yyyy') "+
                                           "AND attr.t_codelist IN (3)                     "+
                                           "AND atcor.t_groupid = attr.t_groupid           "+
                                           "AND attr.t_attrid = atcor.t_attrid             "+
                                           "AND attr.t_objecttype = atcor.t_objecttype     "+
                                           "AND atcor.t_object LIKE '%"+AccInfo.Account.Acc+"'");
                        // cmdcc.addparam("date",RSDBP_IN,{curdate});
                        // cmdacc.addparam("acc",RSDBP_IN,AccInfo.Account.Acc);
                        cmdcc.execute;
                        rsdcc = rsdrecordset(cmdcc);
                        if (rsdcc.movenext())
                            if (rsdcc.value(0) > 0)
                                return PRN_SKIP;
                            end;
                        end;
                    end;
                end;
            end;
            if (AccInfo.pr_pmpaym.rec.payerbankid == AccInfo.pr_pmpaym.rec.receiverbankid)
                cmdcc = rsdcommand("SELECT   COUNT (1) AS cnt                      "+
                                   "FROM   dobjatcor_dbt atcor, dobjattr_dbt attr  "+
                                   "WHERE       atcor.t_objecttype = 4             "+
                                   "AND atcor.t_groupid = 105                      "+
                                   "AND atcor.t_validtodate > ?                    "+
                                   "AND attr.t_codelist IN (1)                     "+
                                   "AND atcor.t_groupid = attr.t_groupid           "+
                                   "AND attr.t_attrid = atcor.t_attrid             "+
                                   "AND attr.t_objecttype = atcor.t_objecttype     "+
                                   "AND atcor.t_object LIKE '%"+AccInfo.Account.Acc+"'");
                cmdcc.addparam("date",RSDBP_IN,{curdate});
                // cmdacc.addparam("acc",RSDBP_IN,AccInfo.Account.Acc);
                cmdcc.execute;
                rsdcc = rsdrecordset(cmdcc);
                if (rsdcc.movenext())
                    if (rsdcc.value(0) > 0)
                        return PRN_SKIP;
                    end;
                end;
            end;

            if ((AccInfo.pr_pmpaym.rec.DocKind == PS_CPORDER) or (AccInfo.pr_pmpaym.rec.DocKind == PS_PAYORDER))
              // KS 27.04.2011
              if ((docStorage[DS_DK] == DEBIT_C))
                  if (AccInfo.pr_pmpaym.rec.DocKind == PS_CPORDER)
                    cmdcc = rsdcommand("select t_origin From dpscpord_dbt  where t_orderid = ?");
                  else
                    cmdcc = rsdcommand("select t_origin From dpspayord_dbt where t_orderid = ?");
                  end;
                  cmdcc.addparam("", RSdBP_IN, AccInfo.pr_pmpaym.rec.paymentid);
                  cmdcc.execute();
                  rsdcc = rsdrecordset(cmdcc);
                  if (rsdcc.movenext())
                    if ((rsdcc.value(0)  == 1)or // Не печатаю ручной ввод и файнридер
                        (rsdcc.value(0)  == 6))
                        return PRN_SKIP;
                    end;
                  end;
              end;
//              if (DocStorage[DS_DK] == CREDIT_C)
                if (AccInfo.pr_pmpaym.rec.DocKind == PS_CPORDER)
                  return PRN_CURPAYM;
                else
                  return PRN_RURPAYM;
                end;
//              else
//                return PRN_SKIP;
//              end;
            end;

            if (AccInfo.pr_pmpaym.rec.DocKind == CB_MULTYDOC)
               /*SDA - пропускаем печать приложений по Фронтовым кассовым мультивалюткам 
                     - все равно не работает из за особенностей вставки */
               /*да и вообще, глупость приложения по фронтой кассе печатать */
               if (AccInfo.pr_pmpaym.rec.origin == 1700)
                 return PRN_SKIP;
               end;
               return PRN_MDOC;
            end;

            /* мемордер или документ ПЗО */
            if ((AccInfo.pr_pmpaym.rec.DocKind == DLDOC_MEMORIALORDER) or (NVL(AccInfo.pr_pmrmprop.rec.ShifrOper, "") == ""))

               cmdcc = rsdcommand("SELECT   COUNT (1) AS cnt                      "+
                                  "FROM   dobjatcor_dbt atcor, dobjattr_dbt attr  "+
                                  "WHERE       atcor.t_objecttype = 4             "+
                                  "AND atcor.t_groupid = 105                      "+
                                  "AND atcor.t_validtodate > to_date('"+{curdate}+"','dd.mm.yyyy') "+
                                  "AND attr.t_codelist IN (6)                     "+
                                  "AND atcor.t_groupid = attr.t_groupid           "+
                                  "AND attr.t_attrid = atcor.t_attrid             "+
                                  "AND attr.t_objecttype = atcor.t_objecttype     "+
                                  "AND atcor.t_object LIKE '%"+AccInfo.Account.Acc+"'");

               cmdcc.execute;
               rsdcc = rsdrecordset(cmdcc);
               if (rsdcc.movenext())
                 if (rsdcc.value(0) > 0)
                  return PRN_SKIP;
                 end;
               end;

               if (DocStorage[DS_CUR] == NATCUR)
                 return PRN_RURMO;
               else
                 return PRN_CURMO;
               end;
            end;

            // KS 26.08.2010 I-056427 РС 6 ГЭБ, ВЫПИСКИ 
            // Шифр 17 всё равно печатаем банковским ордером
            // Шифр 03 не печатаем
            ShifrOper = GetShifrOper(DocStorage[0]);
            if ( (ShifrOper=="03") and (not PRINT_CASH) )
                return PRN_SKIP;
            end;
            cmdcc = rsdcommand("SELECT   COUNT (1) AS cnt                      "+
                               "FROM   dobjatcor_dbt atcor, dobjattr_dbt attr  "+
                               "WHERE       atcor.t_objecttype = 4             "+
                               "AND atcor.t_groupid = 105                      "+
                               "AND atcor.t_validtodate > to_date('"+{curdate}+"','dd.mm.yyyy') "+
                               "AND attr.t_codelist IN (6)                     "+
                               "AND atcor.t_groupid = attr.t_groupid           "+
                               "AND attr.t_attrid = atcor.t_attrid             "+
                               "AND attr.t_objecttype = atcor.t_objecttype     "+
                               "AND atcor.t_object LIKE '%"+AccInfo.Account.Acc+"'");
            cmdcc.execute;
            rsdcc = rsdrecordset(cmdcc);
            if (rsdcc.movenext())
                if (rsdcc.value(0) > 0)
                    return PRN_SKIP;
                end;
            end;


            /* EVG 25/12/2013 Большой пользовательский блок, окончание */



            // Входящие валютные платежи печатаются в форме сообщения SWIFT, независимо от шифра операции
            if (in(accInfo.pr_pmpaym.rec.docKind, WL_INDOC, WL_WIPM) and (accInfo.pr_pmpaym.rec.fiId != NATCUR))
              return PRN_CURPAYM;
            end;

            // Банковский ордер печатаем в форме банковского ордера по 2360-У
            if (nvl(accInfo.pr_pmrmprop.rec.shifrOper, "") == "17")
              return PRN_RURPAYM;
            end;

            // Мультивалютные документы печатаются в форме мемордера по 2161-У для мультивалютного документа.
            // Те платежи, для которых не нашлось соответствующей первички, будут обработаны макросом печати платежа в РБ по шифру операции.
            // Если же и шифр операции среди поддерживаемых не обнаружен, то будет напечан мемордер по 2161-У
            if ((accInfo.pr_pmpaym.rec.docKind == CB_MULTYDOC) and (accInfo.pr_multydoc.rec.autokey != 0))
              return PRN_MDOC;
            end;

            // Мемордер или документ ПЗО печатается в форме мемордера по 2161-У
            if ((accInfo.pr_pmpaym.rec.docKind == DLDOC_MEMORIALORDER) or (nvl(accInfo.pr_pmrmprop.rec.shifrOper, "") == ""))
              if (docStorage[DS_CUR] == NATCUR)
                return PRN_RURMO;
              else
                return PRN_CURMO;
              end;
            end;

            // Первички, которые умеет печатать prpmpaym.mac ему и отдадим
            if (arrFind(DocKinds, nvl(accInfo.pr_pmrmprop.rec.ShifrOper, "")) != -1)
              return PRN_RURPAYM;
            end;

            // Все остальное печатаем в форме мемордера по 2161-У
            if (docStorage[DS_CUR] == NATCUR)
              return PRN_RURMO;
            else
              return PRN_CURMO;
            end;
        end;

        // Мультивалютные проводки печатаем в форме мемордера по 2161-У
        if (docStorage[DS_CARRY] != 0)
          return PRN_RURMO;
        end;

        // Проводки, не привязанные к платежу, печатаем в форме мемордера по 2161-У
        if (docStorage[DS_CUR] == NATCUR)
            return PRN_RURMO;
        else
            return PRN_CURMO;
        end;
    end; //macro GetPrnForm(DocStorage)
  
    // KS I-066878 Тестирование RS V6. Приложение к выписке по лиц.счетам. Город
    var town_bank="";
    RECORD addr ( adress );
                      
    if( НайтиЮридическийАдресСубъекта( {OurBank}, addr) )
      town_bank = addr.CodeDistrict + ". " + addr.District;
    end;

//debugbreak;
    var fdArray;
    fdoutput = TOFStream("fdoutput");

    i = 0;
    while(i < Docs.DocStorage.Size)
      var fltDocs = FilterDocs(Docs.DocStorage[i], AccInfo.OutForm);
      if (fltDocs == false)
        i = i+1;
        continue;
      end;

      fdoutput.clear();
      fdoutput.setOutputFile();

      var printForm = GetPrnForm(Docs.DocStorage[i]);


      /* EVG 7/03/2014 Вариант, от которого отказались в ВУЗ - в случае, если выбран ексельный
         формат выписки, то и приложения печатаются в ексель штатными средствами WinRep.
         Оставил для примера - вдруг в другой компании захотят это.

      if( ( ReportType == REPTYPE_EXTENDED_XLS ) or ( ReportType == REPTYPE_XLS_BLANK ) )
         docnum = docnum+1;
         ExecMacroFile("pr_accst_wr", "PrintDoc", 1, AccInfo.pr_pmpaym, AccInfo.pr_debit, AccInfo.pr_credit, AccInfo.pr_pmrmprop);
      end;*/

      if (printForm == PRN_RURPAYM)

          docnum = docnum+1;

//          if ( PRINT_SEPARATOR ) // KS 18.04.2011
          if (( PRINT_SEPARATOR ) and ((not fgBank.is_SLD ) and (not fgBank.is_EXV_Volgograd) and (not fgBank.is_EXV_Voronezh) and (not fgBank.is_EXV_Stavropol)  and (not fgBank.is_EXV ) )) //dpn
             [(3R(s0p13.50h8.5v0s0b20T&l1X&l8D&l0O&a7L&12E];
          end;

          ExecMacroFile("pr_accst_rpm", "PrintDoc", 1, AccInfo.pr_pmpaym, AccInfo.pr_debit, AccInfo.pr_credit, AccInfo.pr_pmrmprop);


[                                 ┌────────────────────────────────┐
                                  │################################│
                                  │            ПРОВЕДЕНО           │
                                  │################################│
                                  │################################│
                                  │ #################БИК ######### │
                                  │ к/с ###########################│
                                  └────────────────────────────────┘                                    ]

          //(date(Docs.DataSet.Date_Carry ):c:f,opername(Docs.DataSet.doc_oper):c);         //vihrov 20.08.2010
          ( {Name_Bank}:c, // KS 23.08.2010 I-056427 РС 6 ГЭБ, ВЫПИСКИ
            date(accinfo.pr_pmpaym.rec.valuedate ):c:f, //vihrov 20.08.2010
            //opername(Docs.DataSet.doc_oper):c,  // KS I-078903
            opername(AccInfo.pr_pmpaym.rec.oper):c,    // KS I-078903 Операционист неверный
            town_bank:c,   // KS 15.09.2010 I-066878 Тестирование RS V6. Приложение к выписке по лиц.счетам.
            {mfo_bank}:c,
            {corac_bank}:c );
  
      elif (printForm == PRN_CURPAYM)

          docnum = docnum+1;
//          if ( PRINT_SEPARATOR ) // KS 18.04.2011
          if (( PRINT_SEPARATOR ) and ((not fgBank.is_SLD ) and (not fgBank.is_EXV_Volgograd) and (not fgBank.is_EXV_Voronezh) and (not fgBank.is_EXV_Stavropol)  and (not fgBank.is_EXV ) )) //dpn
             [(3R(s0p13.50h8.5v0s0b20T&l1X&l8D&l0O&a7L&12E];
          end;

          ExecMacroFile("pr_accst_cpm", "PrintDoc", 1, AccInfo.pr_pmpaym, AccInfo.pr_debit, AccInfo.pr_credit, AccInfo.pr_pmrmprop);

[                                 ┌────────────────────────────────┐
                                  │################################│
                                  │            ПРОВЕДЕНО           │
                                  │################################│
                                  │################################│
                                  │ #################БИК ######### │
                                  │ к/с ###########################│
                                  └────────────────────────────────┘                                    ]

          //(date(Docs.DataSet.Date_Carry ):c:f,opername(Docs.DataSet.doc_oper):c);         //vihrov 20.08.2010
          ( {Name_Bank}:c, // KS 23.08.2010 I-056427 РС 6 ГЭБ, ВЫПИСКИ
            date(accinfo.pr_pmpaym.rec.valuedate ):c:f, //vihrov 20.08.2010
            //opername(Docs.DataSet.doc_oper):c,  // KS I-078903
            opername(AccInfo.pr_pmpaym.rec.oper):c,    // KS I-078903 Операционист неверный
            town_bank:c,   // KS 15.09.2010 I-066878 Тестирование RS V6. Приложение к выписке по лиц.счетам.
            {mfo_bank}:c,
            {corac_bank}:c );

      elif (printForm == PRN_RURMO)

          //[(3R(s0p16.67h8.5v0s0b3T&l1O&l8D&l1X&a17L];
          docnum = docnum+1;
          if (( PRINT_SEPARATOR ) and (not fgBank.is_SLD ))  // KS 18.04.2011
             /* EVG 10/03/2014 Уменьшил шрифт и поле слева.
             [(3R(s0p13.50h8.5v0s0b4099T&a6L];*/
             [(3R(s0p15.00h8.5v0s0b4099T&a1L];
          end;
          //[(3R(s0p16.67h8.5v0s0b0T&l1X&l8D&l1O&a5L];

          AccInfo.pr_documentr = FillDocumentBufferByLoansData(AccInfo.pr_documentr, Docs.DocStorage[i]);
          ExecMacroFile("pr_accst_rmo", "PrintDoc", 1, AccInfo.pr_documentr);
          /* SDA 05.03.2012 - для мемориальных ордеров штампик уже есть, вставляем только разрыв страницы */ 
          [];

      elif (printForm == PRN_CURMO)
          //[(3R(s0p16.67h8.5v0s0b3T&l1O&l8D&l1X&a17L];
          docnum = docnum+1;
//          if ( PRINT_SEPARATOR ) // KS 18.04.2011
          if (( PRINT_SEPARATOR ) and (not fgBank.is_SLD ))  // KS 18.04.2011
             [(3R(s0p13.50h8.5v0s0b4099T&a6L];
          end;
          //[(3R(s0p16.67h8.5v0s0b0T&l1X&l8D&l1O&a5L];

          AccInfo.pr_documentc = FillDocumentBufferByLoansData(AccInfo.pr_documentc, Docs.DocStorage[i]);
          ExecMacroFile("pr_accst_cmo", "PrintDoc", 1, AccInfo.pr_documentc);

[                                  ┌───────────────────────────┐
                                   │         ПРОВЕДЕНО         │
                                   │ ######################### │
                                   │ ######################### │
                                   └───────────────────────────┘                                      ]
          ( date(Docs.DataSet.Date_Carry):c:f,
            {Name_Bank}:c // KS 23.08.2010 I-056427 РС 6 ГЭБ, ВЫПИСКИ
          );

      elif (printForm == PRN_MDOC)


          docnum = docnum+1;
//          if ( PRINT_SEPARATOR ) // KS 18.04.2011
          if (( PRINT_SEPARATOR ) and ((not fgBank.is_SLD ) and (not fgBank.is_EXV_Volgograd) and (not fgBank.is_EXV_Voronezh) and (not fgBank.is_EXV_Stavropol)  and (not fgBank.is_EXV ) )) //dpn 
             [(3R(s0p13.50h8.5v0s0b20T&l1X&l8D&l0O&a7L&12E];
          end;

          /* EVG 14/1/2014 Закомментил, в 2031 это не работает.
          AccInfo.pr_multydoc.rec.Autokey = Docs.DocStorage[i][DS_CARRY];
          AccInfo.pr_multydoc.GetEQ();*/
          ExecMacroFile("pr_accst_mcd", "PrintDoc", 1, accInfo.pr_multydoc, accInfo.pr_pmpaym, accInfo.pr_debit, accInfo.pr_credit, accInfo.pr_pmrmprop);

[                                 ┌────────────────────────────────┐
                                  │################################│
                                  │            ПРОВЕДЕНО           │
                                  │################################│
                                  │################################│
                                  │ #################БИК ######### │
                                  │ к/с ###########################│
                                  └────────────────────────────────┘                                    ]

          ( {Name_Bank}:c, // KS 23.08.2010 I-056427 РС 6 ГЭБ, ВЫПИСКИ
            date(Docs.DataSet.Date_Carry ):c:f,//opername(Docs.DataSet.doc_oper):c,
            opername(AccInfo.pr_pmpaym.rec.oper):c, // KS I-078903 Операционист неверный
            town_bank:c,   // KS 15.09.2010 I-066878 Тестирование RS V6. Приложение к выписке по лиц.счетам.
            {mfo_bank}:c,
            {corac_bank}:c );


      /* EVG Пользовательская реализация формы банк. ордера */
      elif (printForm == PRN_BNKO)
  
          //Sokolov по заявке I-00228765-2 Печать в банковском ордере наименования банка в счете 47423
          //LAO 28.02.2013 добавил + NO_PARALLEL
          schet_debet = AccInfo.pr_pmpaym.rec.payeraccount;
          schet_credit = AccInfo.pr_pmpaym.rec.receiveraccount;    
          textpoisk = "select count(0) from(SELECT /*+ NO_PARALLEL*/ distinct ac.t_client FROM daccount_dbt ac " +
                      " where ac.t_account = '" + schet_debet + "'" +
                        "  or ac.t_account = '" + schet_credit + "') tabl ";
          cmd_textpoisk = rsdcommand(textpoisk);
          resultat = RSDRecordSet(cmd_textpoisk);
          resultat.movenext;
          if(resultat.value(0) != 1) OnClient = false;
          else OnClient = true;
          end; // end I-00228765-2

//          if ( PRINT_SEPARATOR ) // KS 18.04.2011
          if (( PRINT_SEPARATOR ) and ((not fgBank.is_SLD ) and (not fgBank.is_EXV_Volgograd) and (not fgBank.is_EXV_Voronezh) and (not fgBank.is_EXV_Stavropol)  and (not fgBank.is_EXV ) ))  //dpn
             [(3R(s0p13.50h8.5v0s0b20T&l1X&l8D&l0O&a7L&12E];
          end;

          ExecMacroFile("pr_accst_rpm", "PrintDoc", 1, AccInfo.pr_pmpaym, AccInfo.pr_debit, AccInfo.pr_credit, AccInfo.pr_pmrmprop);
          /* SDA 07.02.2012 - для банковских ордеров штампик уже есть, вставляем только разрыв страницы */ 
          /* EVG  7/03/2014 Убрал разрыв, он уже печатается в первичке.
          [];*/

      end;

      fdoutput.resetOutputFile();

      open(fdout, fdoutput.getFileName());

      fdArray = TArray();
      str = "";
      while (next(fdout))
          fdArray.value(fdArray.size) = fdout.str;
      end;

      stringalizedFD.value(stringalizedFD.size) = fdArray;

      close(fdout);

      i = i+1;
    end; //while(i < Docs.DocStorage.Size)

    return stringalizedFD;
end;

/* Обработка документов счета */
private MACRO ProcessDocuments(accInfo, docs, viewPool)

    var query;
    var viewIterator;
    var needFooter = false;
    var isContinue = false;
    var fdocs;
    var carryDocument = TDocumentRecord();
    var i;

//debugbreak;

    if (accInfo.account.subsystem == REP_SUBSYSTEMS_CB)
      query = TDocumentQueryMaker(accInfo).getQuery();
    else
      query = ""; /* данные нужно собирать по документам RS-Loans */
    end;
    
    //debugbreak;
    docs.constructor(query, accInfo);

    isContinue = docs.next();
    if (isContinue or accInfo.cSetZTurn)
        needFooter = true;
        i = 0;
        while (i < viewPool.size)
            viewPool.value(i).initialize(accInfo);
            viewPool.value(i).printHeader(accInfo);
            i = i + 1;
        end;
    end;

    if ((not isContinue) and (needFooter))
        i = 0;
        while (i < viewPool.size)
            viewPool.value(i).printEmptyData();
            i = i + 1;
        end;
    end;

    while (isContinue)
        NDoc = NDoc+1;
        i = 0;
        while (i < viewPool.size)
            accInfo.statementLineNumber = accInfo.statementLineNumber + 1;

            carryDocument.note =                docs.docT;
            carryDocument.statementLineNumber = accInfo.statementLineNumber;
            carryDocument.date_carry =          String(docs.dataSet.date_carry : f);
            carryDocument.shifr_oper =          docs.shifr_oper;
            carryDocument.numb_document =       docs.numb_document;
            carryDocument.bic =                 docs.Bic;
            carryDocument.ground =              docs.ground;
            carryDocument.corrBankAcc =         docs.corrBankAcc;
            carryDocument.account =             docs.account;

            /*
            if( docs.sumCredit == $500 )
            debugbreak;
            end;*/

            /* EVG 4/03/2014 Перенёс доработку Амелина для выписок по внешнему запросу */
            /* EVG 19/03/2014 Для банка ВУЗ не нужна проверка пользовательского типа. Убрал для ВУЗ, для остальных - как было. */
            var BestimmungZahlungAusBuchen = false;
            if( fgBank.is_VUZ )
               BestimmungZahlungAusBuchen = true;
            else
               var user_type_acc = RSL_Account( docs.dataset.receiveraccount, docs.dataSet.code_currency );     // 24.07.2013 AAN  C-22055
               if( index( user_type_acc.rec.usertypeaccount, "Ю" ) )                                            // проверяем л/с на польз. тип Ю
                  BestimmungZahlungAusBuchen = true;
               end;
            end;

            if( BestimmungZahlungAusBuchen )
               Flag_acc_is_carry     = true;
               /* EVG 7/05/2014 Добавил передачу счёта из документа */
               carryDocument.account = docs.GetCorrectCbCorrespondingAccount( docs.DataSet.DK == DEBIT_C, @carryDocument.ground, docs.dataset.account );
               Flag_acc_is_carry     = false;
            end;
            // END 24.07.2013 AAN  C-22055
            // END  4.03.2014 EVG

            carryDocument.sumDebit =            docs.sumDebit;
            carryDocument.sumCredit =           docs.sumCredit;
            carryDocument.sumDebitEq =          docs.sumDebitEq;
            carryDocument.sumCreditEq =         docs.sumCreditEq;

            /* EVG 27/12/2013 Дополнительные свойства для печати расширенной выписки */
            carryDocument.nameBank =            docs.nameBank;
            carryDocument.nameCntrAgent =       docs.nameCntrAgent;
            carryDocument.formSum =             docs.formSum;

            viewPool.value(i).printRow(carryDocument);

            i = i + 1;
        end;
        isContinue = docs.next();
    end;

    if (needFooter)
        i = 0;
        while (i < viewPool.size)

            viewPool.value(i).printFooter(accInfo, docs);
            if (accInfo.outForm != ACC_FORMS_NOTHING)

                // Тихомиров - проверка категории //Kozina изменен запрос, т к в ВУЗе неправильно определен attrid категории
                cmdacc = rsdcommand("SELECT   COUNT (1) AS cnt                      "+
                              "FROM   dobjatcor_dbt atcor, dobjattr_dbt attr  "+
                              "WHERE       atcor.t_objecttype = 4             "+
                              "AND atcor.t_groupid = 105                      "+
                              "AND atcor.t_validtodate > to_date('"+{curdate}+"','dd.mm.yyyy') "+
                              "AND attr.t_codelist IN (5,7)                     "+ //27.06.2012 vihrov I-00192814-2 новую категорию добавил "все приложения = 7"
                              "AND atcor.t_objecttype = attr.t_objecttype    " + //А.Киселев не учли связку с типом объекта 24.02.2011
                              "AND atcor.t_groupid = attr.t_groupid           "+
                              "AND attr.t_attrid = atcor.t_attrid             "+
                              "AND atcor.t_object LIKE '%"+AccInfo.Account.Acc+"'");       
                //cmdacc.addparam("date",RSDBP_IN,{curdate});
                //       cmdacc.addparam("acc",RSDBP_IN,AccInfo.Account.Acc);
                cmdacc.execute;
                rsdacc = rsdrecordset(cmdacc);
                if (rsdacc.movenext())
                   if (rsdacc.value(0) > 0)
                      flagpril = 0;
                   end;
                end;

                if (flagpril)
                   fdocs = processFDocs(accInfo, docs);
                   var j = 0;
                   while (j < fdocs.size)
                       viewPool.value(i).printFD(fdocs.value(j));
                       j = j + 1;
                   end;
                end;
            end;
            i = i + 1;
        end;
    end;

END;

/* Коркин И.Н. по заявке I-068817. Обработка документов счета, для случая когда по категории не печатать выписки */
private MACRO ProcessDocumentsNotPrint(accInfo, docs, viewPool)

    var query;
    var caption;
    var needFooter = false;

    if (accInfo.account.subsystem == REP_SUBSYSTEMS_CB)
      query = TDocumentQueryMaker(accInfo).getQuery();
    else
      query = ""; /* данные нужно собирать по документам RS-Loans */
    end;
    
    docs.constructor(query, accInfo);

    while( docs.next() )
        NDoc = NDoc+1;
    end;

    /* EVG 20/03/2014 Нужно всё-таки вывести информацию о том, что выписки по этому счёту клиента не печатаются */
   // viewPool.value(0).printEmptyReport( "Для данного счёта установлен отказ от печати выписок (категория \"Отказ от печати\")" ); //13.05.2014 DPN I-00486083-2 Сказали, что не нужно:)

    /* EVG 13/06/2014 Совсем не вызывать printEmptyReport() нельзя, там добавляется srtFor(12), без него никак. Если не нужен текст про отказ от выписок (хотя странно, кому он мешает?),
       то можно передать пробел. */
    viewPool.value(0).printEmptyReport( " " );

END;

private macro insertCbAccount(accountQueryText, cacheAccountQueryText)
    debugbreak;
    var commandText =        "CREATE OR REPLACE VIEW " + cbAccountViewName
                    + "\n" + "("
                    + "\n" + " t_accId,"
                    + "\n" + " t_acc,"
                    + "\n" + " t_accName,"
                    + "\n" + " t_odbAccount,"
                    + "\n" + " t_nameClnt,"
                    + "\n" + " t_inn,"
                    + "\n" + " t_oper,"
                    + "\n" + " t_dpd_r,"
                    + "\n" + " t_dpd,"
                    + "\n" + " t_currencyName,"
                    + "\n" + " t_restIn,"
                    + "\n" + " t_restInEq,"
                    + "\n" + " t_restOut,"
                    + "\n" + " t_restOutEq,"
                    + "\n" + " t_typeAccount,"
                    + "\n" + " t_chapter,"
                    + "\n" + " t_kind_account,"
                    + "\n" + " t_sort,"
                    + "\n" + " t_branch,"
                    + "\n" + " t_connAcc,"
                    + "\n" + " t_connChapter,"
                    + "\n" + " t_department,"
                    + "\n" + " t_currency,"
                    + "\n" + " t_subsystem,"
                    + "\n" + " t_initialSubsystem,"
                    + "\n" + " t_revalDocsExist"
                    + "\n" + ")"
                    + "\n" + "AS"
                    + "\n" + accountQueryText;

    sql_execute(commandText);

    commandText =        "CREATE OR REPLACE VIEW " + cbCacheAccountViewName
                + "\n" + "("
                + "\n" + " t_accId,"
                + "\n" + " t_acc,"
                + "\n" + " t_chapter,"
                + "\n" + " t_connAcc,"
                + "\n" + " t_connChapter,"
                + "\n" + " t_currency,"
                + "\n" + " t_subsystem"
                + "\n" + ")"
                + "\n" + "AS"
                + "\n" + cacheAccountQueryText;

    sql_execute(commandText);

end;

private macro setCbAccountsViewName()
    var viewNumberDataSource = TRsbDataset("SELECT ddocinfo_rec_seq.nextval t_number FROM dual");

    viewNumberDataSource.setFieldType("t_number", V_INTEGER);

    if (viewNumberDataSource.next())
        cbAccountViewName = "drepaccstaccount_" + viewNumberDataSource.number;
    else
        exit(1);
    end;
end;

private macro setCacheCbAccountsViewName()
    var viewNumberDataSource = TRsbDataset("SELECT ddocinfo_rec_seq.nextval t_number FROM dual");

    viewNumberDataSource.setFieldType("t_number", V_INTEGER);

    if (viewNumberDataSource.next())
        cbCacheAccountViewName = "drepaccstaccount_" + viewNumberDataSource.number;
    else
        exit(1);
    end;
end;


// KS 21.05.2012 I-00164496
/*
        Функция создаёт объект Excel из шаблона (USERTEMPLSDIR)
                -       Крайне рекомендую использовать шаблоны в формате XLT или XLTX 
                        (и НЕ ИСПОЛЬЗОВАТЬ в качестве шаблона XLS и XLSX)
*/

private macro openExcelWithTemplate(Templ)
        var out, RegParam;
        Templ = strsubst(Templ,".xls",".xlt");
        if (IsStandAlone()) // 2х звенка
                if ((ValType(ex)!=V_UNDEF) and (ex.Visible==False))
                        ex = ActiveX("Excel.Application",NULL,false); 
                else
                        ex = ActiveX("Excel.Application",NULL,true);        
                end;
        else                // 3х звенка
                ob = CreateObject ("rsax","TRsAxServer","RsAxServer",false);
                ex = ob.CreateComObject ("Excel.Application");
        end; 

        GetRegistryValue("BANK_INI\\ОБЩИЕ ПАРАМЕТРЫ\\ДИРЕКТОРИИ\\USERTEMPLSDIR",2,RegParam);

        var temppath = findpath(Templ,RegParam);
        if (not temppath)
                msgbox("Не найден шаблон!");
                exit();
        end;
        
        ex.visible = false;
        obBook = ex.Workbooks.open(temppath,false); 
        obSheet = obBook.ActiveSheet();         
end;
// KS 21.05.2012 End I-00164496

/* Основной макрос формирования выписки */
MACRO PrintAccountStatement
   (
     DprtID,
     OrgStructure,
     IssueMode,
     NumPlan,
     Chapter,
     Currency,
     DateIn,
     DateOut,
     Client,
     Oper,
     BalanceMask,
     AccountMask,
     KindSort,
     OutForm,
     Alg,
     Subsystem,
     PrGround,
     DblPrint,
     DocOnlyData,
     NatCurEquivalent,
     SPODTurnsTotal,
     cSetA,
     cSetZTurn,
     cSetCr,
     cEveryDayOfPrd,
     cSetExcludeRevalue,
     ExcludeOcp,
     AccountType,
     AccountUserType,
     needText,
     needExcel,
     needWord,
     showStorno,
     userTypeMethod,
     excludeInternetAccount

    )

    /*Тихомиров Меню и обработка Excel*/
    subsystem = 2;
    flagprn = 0;
    textname = string(RANDOM(1000));
    array m;
    m(0)="Обычная";
    m(1)="Расширеная текстовая";
    m(2)="Расширеная Excel";
    m(3)="Excel на бланке";
    m(4)="Excel на бланке с дополнительной информацией";
    m(5)="Excel на бланке с доп. инф.(загрузка из Фронта)";
    m(6)="ДФР обычная";
    m(7)="ДФР Word";
    m(8)="Excel на бланке (без разбивки на страницы)";
    
    var RetVal = WELLDONE,
        DateInc, LastDate,
        AccInfo, CmdText,
        Docs,
        OldNDoc, AccCaption,
        LoansAccount;

    var viewIterator;

    var accountQueryForDocInfo;

    var notProcessingAccountClause;

    var cacheQueryMaker;
//  var profiler = TSQLProfiler(getTxtFileName("!pr_accstatement_profile"));
//  profiler.clear();
//  profiler.on();

    var action = TActionPanel();

    var i;

    /*151*/
    var j, mn=menu(m,"Выберите формат выписки","Выберите формат выписки:");
    //subsystem=2;
    flag=0;
    if( MsgBoxEx(" Выписка к внешнему запросу ?", MB_NO + MB_YES, IND_NO) == IND_YES)    // 24.07.2013 AAN  C-22055 вызов меню, для выбора вида выписки
        Flag_AccState_CB = true;
    end;


    /* ---------------------------------------------------- */
    /* EVG 31/12/2013 Большой пользовательский блок, начало */

    //Sokolov 14/11/2012 Статистика по видам отчетов
    strstat3 = "Select  count(t_oper) from dperson_dbt   where (t_name like ('%(RSSL)%') or t_name like ('%(RSTYLE)%'))   and t_oper = "+string({oper});
    sqlstat3 = rsdcommand(strstat3);
    rsstat2 = RSDRecordset(sqlstat3);
    rsstat2.movenext;
    If (rsstat2.value(0) < 1);  
        strstat1 = "select  USR_accstatement_stat_dbt.t_number_starts  from USR_accstatement_stat_dbt where t_num = "+string(mn);
        sqlstat1 = rsdcommand(strstat1);
        rsstat1 = RSDRecordset(sqlstat1);
        rsstat1.movenext;
        chetchik1 = rsstat1.value(0);
        //14.08.2013 LAO Ошибка pr_accstatement.mac в строке 5297[0]: неправильное приведение (SPECVAL + INTEGER), запрос может вернуть NULL
        if( ValType(chetchik1) == V_UNDEF )
         chetchik1=0;
        end; 
        chetchik1 = chetchik1 + 1;
        strstat2 = "update USR_accstatement_stat_dbt set t_number_starts =" + chetchik1+ ", t_oper = "+string({oper})+" where t_num = " + mn;
        sqlstat2 = rsdcommand(strstat2);
        sqlstat2.execute;
    end;  

    // Формат выписки: Расширеная текстовая
    if (mn==1) 
        front = false;
        PrGround=true;
        DblPrint=false;

        /* EVG 5/05/2014 Не будем переопределять признак "Эквивалент в нац. валюте"
        NatCurEquivalent=false;           //Glushin
        */

        SPODTurnsTotal=false;
        cSetA=false;
        cSetCr=true;
        //  cEveryDayOfPrd=false; SDA - 25.03.2012 - а просто научить пользователя не ставить крыжик?
        //cSetExcludeRevalue=true;
        ExcludeOcp=true;
        flag=1;
        /* EVG 7/03/2014 Если в панельке выбрано "С приложениями" = "всеми", то не нужно отказываться от печати приложений.
        OutForm=4;*/
        need_print = true;
        // EVG 27/12/2013 Запоминаем выбранный режим печати.
        ReportType = REPTYPE_EXTENDED;

    // Формат выписки: Обычная
    elif (mn==0)
        front = false;
        flagprn = 1;
        need_print = true;

    // Формат выписки: Расширеная Excel
    elif (mn==2)
        front = false;
        PrGround=true;
        DblPrint=false;

        /* EVG 5/05/2014 Не будем переопределять признак "Эквивалент в нац. валюте"
        NatCurEquivalent=false;*/

        SPODTurnsTotal=false;
        cSetA=false;
        need_print = true;
        //  cSetCr=false;
        //korkin
        /*  if ({oper} != 10191)
          cEveryDayOfPrd=false;
        end;*/
       // cSetExcludeRevalue=true; 25.11.2014 R-487982 DPN - Зачем наглухо запрещать печать переоценок? Для этого есть флаг 
        ExcludeOcp=true;
        flag=2;
        //OutForm=3;

        /* EVG 31/12/2013 Закомментил, попытаемся использовать штатный инструмент.
        if (IsStandAlone()) // Двухзвенка
            if ((ValType(ex)!=V_UNDEF) and (ex.Visible==False))
                ex = ActiveX("Excel.Application",NULL,false); 
            else
                ex = ActiveX("Excel.Application",NULL,true);
            end;
        else // Трехзвенка
            ob = CreateObject ("rsax","TRsAxServer","RsAxServer",false);
            ex = ob.CreateComObject ("Excel.Application");
        end;
        GetRegistryValue("BANK_INI\\ОБЩИЕ ПАРАМЕТРЫ\\ДИРЕКТОРИИ\\USERTEMPLSDIR",2,out);
        if (currency==0)
            Fulloutput = ternary(int(ex.version) > 11,FindPath(outputxa_2007, out),FindPath(outputxa, out)); // 11 = 2003 ексель, кол-во строк на листе 65тыс макс.

            if (not Fulloutput)
                msgbox("Не найден шаблон " + outputxa);
                exit();
            end;
            curr= 0;
        else
            NatCurEquivalent=true;
            mon=1;
            mon=money(mon);
            curr=currency;
            //    Fulloutput = FindPath(outputxas, out); //01.06.2012 vihrov так было
            Fulloutput = ternary(int(ex.version) > 11,FindPath(outputxas_2007, out),FindPath(outputxas, out)); // 01.06.2012 vihrov 11 = 2003 ексель, кол-во строк на листе 65тыс макс.
            if (not fulloutput)
                msgbox("Не найдена шаблон " + outputxas);
                exit();
            end;
        end; 
        //fulloutput = strsubst(strlwr(getcurdir(false)),"\\obj","")+strsubst(fulloutput,"..","");
        //  obBook = ex.Workbooks.open(fulloutput,false); 
        obBook = ex.Workbooks.add(fulloutput); // 01.06.2012 vihrov 
        obSheet = obBook.ActiveSheet(); 
        */

        /* EVG 31/12/2013 Добавил */
        needExcel = true;
        needText  = false;
        ReportType = REPTYPE_EXTENDED_XLS;

    // Формат выписки: Excel на бланке / Excel на бланке (без разбивки на страницы)
    elif ((mn==3) or (mn==8)) 
        if (mn==8)
            noPageBreaks = True;
        end;
        if (REPLACE_DOCKINDS != "")
            //  DocKinds     = ArrCreate("01", "05", "09", "17", ""); //По просьбе Анастасии (ГЭБ) вн т. 4231
            i = 0;
            DocKinds = TArray;
            var ind;
            var val;
            REPLACE_DOCKINDS = StrSubst(REPLACE_DOCKINDS," ","") + ",";
            while( REPLACE_DOCKINDS != "" )
                ind = index(REPLACE_DOCKINDS,",");
                val = substr(REPLACE_DOCKINDS,1,ind-1);
                REPLACE_DOCKINDS = substr(REPLACE_DOCKINDS,ind+1,strlen(REPLACE_DOCKINDS)-ind);

                DocKinds[i] = val;
                i = i + 1;
            end;
            DocKinds[i] = "";
        end;
        front = false;
        cSetZTurn=false;
        PrGround=true;
        DblPrint=false;

        /* EVG 5/05/2014 Не будем переопределять признак "Эквивалент в нац. валюте"
        NatCurEquivalent=false;*/

        SPODTurnsTotal=false;
        cSetA=false;
        //DAI R-257980 при интерфейсном запуске из вн. отч. признак "исключить корсчет" значимый
        if (GetIdentProgram() != RSB_MOD_REP)
          cSetCr=true;
        end;
        cEveryDayOfPrd=false;
       // cSetExcludeRevalue=true;  25.11.2014 R-487982 DPN - Зачем наглухо запрещать печать переоценок? Для этого есть флаг 
        ExcludeOcp=true;
        flag=3;
        //  OutForm=3;
        need_print = true;

        /* EVG 9/1/2014 Закомментил, используем штатный инструмент.
        if (IsStandAlone()) // Двухзвенка
            if ((ValType(ex)!=V_UNDEF) and (ex.Visible==False))
                ex = ActiveX("Excel.Application",NULL,false); 
            else
                ex = ActiveX("Excel.Application",NULL,true);
            end;
        else // Трехзвенка
            ob = CreateObject ("rsax","TRsAxServer","RsAxServer",false);
            ex = ob.CreateComObject ("Excel.Application");
        end; 
        GetRegistryValue("BANK_INI\\ОБЩИЕ ПАРАМЕТРЫ\\ДИРЕКТОРИИ\\USERTEMPLSDIR",2,out);
        //Fulloutput = FindPath(outputx, out);                    
        if (currency==0)
            //    Fulloutput = FindPath(outputx, out);
            Fulloutput = ternary(int(ex.version) > 11,FindPath(outputx_2007, out),FindPath(outputx, out)); // 01.06.2012 vihrov 11 = 2003 ексель, кол-во строк на листе 65тыс макс.
            if (not fulloutput)
                msgbox("Не найдена шаблон " + outputx);
                exit();
            end;
            curr= 0;
        else
            NatCurEquivalent=false;
            mon=1;
            mon=money(mon);
            curr=currency;
            //    Fulloutput = FindPath(outputxs, out);
            Fulloutput = ternary(int(ex.version) > 11,FindPath(outputxs_2007, out),FindPath(outputxs, out)); // 01.06.2012 vihrov 11 = 2003 ексель, кол-во строк на листе 65тыс макс.
            if (not fulloutput)
               msgbox("Не найдена шаблон " + outputxs);
               exit();
            end;
        end; 
        //  obBook = ex.Workbooks.open(fulloutput,false); 
        obBook = ex.Workbooks.add(fulloutput); // 01.06.2012 vihrov
        obSheet = obBook.ActiveSheet(); 
        */

        /* EVG 9/1/2014 Добавил */
        needExcel = true;
        needText  = false;
        ReportType = REPTYPE_XLS_BLANK;

    // Формат выписки: Excel на бланке с дополнительной информацией
    elif (mn==4)
      front = false;
      cSetZTurn=false;
      PrGround=true;
      DblPrint=false;

      /* EVG 5/05/2014 Не будем переопределять признак "Эквивалент в нац. валюте"
      NatCurEquivalent=false;*/

      SPODTurnsTotal=false;
      cSetA=false;
      cSetCr=true;
      cEveryDayOfPrd=false;
     // cSetExcludeRevalue=true; 25.11.2014 R-487982 DPN - Зачем наглухо запрещать печать переоценок? Для этого есть флаг 
      ExcludeOcp=true;
      flag=4;
      //  OutForm=3;
      need_print = true;
      sqltab = "DECLARE \n"
         +  " v_err EXCEPTION; \n"
         +  " PRAGMA EXCEPTION_INIT( v_err, -955 );\n"
         + "BEGIN EXECUTE IMMEDIATE 'CREATE TABLE daccstate_dbt"
         + " (  T_number Number (10), " 
         + "   T_OPER NUMBER(5), " 
         + "   T_date date, " 
         +   " T_info VARCHAR2(120), " 
         +   " T_activ char(1 char) )';\n " 
         + "EXCEPTION WHEN v_err THEN NULL; \n"
         + "END; \n";
      SQL_Execute(sqltab,"Создание таблицы отчета", false);
      // info = GetNote(); // 10.04.2012 vihrov отключен лишний скроллинг с ненужными сообщениями

      /* EVG 13/1/2014 Закомментил, используем штатный инструмент.
      if (IsStandAlone()) // Двухзвенка
         if ((ValType(ex)!=V_UNDEF) and (ex.Visible==False))
            ex = ActiveX("Excel.Application",NULL,false); 
         else
            ex = ActiveX("Excel.Application",NULL,true);
         end;
      else // Трехзвенка
         ob = CreateObject ("rsax","TRsAxServer","RsAxServer",false);
         ex = ob.CreateComObject ("Excel.Application");
      end; 
      GetRegistryValue("BANK_INI\\ОБЩИЕ ПАРАМЕТРЫ\\ДИРЕКТОРИИ\\USERTEMPLSDIR",2,out);
      //Fulloutput = FindPath(outputx, out);                    
      if (currency==0)
         //Fulloutput = FindPath(outputx, out);
         Fulloutput = ternary(int(ex.version) > 11,FindPath(outputx_2007, out),FindPath(outputx, out)); // 01.06.2012 vihrov 11 = 2003 ексель, кол-во строк на листе 65тыс макс.
         if (not fulloutput)
            msgbox("Не найдена шаблон " + outputx);
            exit();
         end;
         curr= 0;
      else
         NatCurEquivalent=false;
         mon=1;
         mon=money(mon);
         curr=currency;
         //Fulloutput = FindPath(outputxs, out);
         Fulloutput = ternary(int(ex.version) > 11,FindPath(outputxs_2007, out),FindPath(outputxs, out)); // 01.06.2012 vihrov 11 = 2003 ексель, кол-во строк на листе 65тыс макс.
         if (not fulloutput)
            msgbox("Не найдена шаблон " + outputxs);
            exit();
         end;
      end; 
      //obBook = ex.Workbooks.open(fulloutput,false); 
      obBook = ex.Workbooks.add(fulloutput); // 01.06.2012 vihrov
      obSheet = obBook.ActiveSheet(); 
      */

      /* EVG 13/1/2014 Добавил */
      needExcel = true;
      needText  = false;
      ReportType = REPTYPE_XLS_BLANK;
      NeedAddInfo = true;

   // Формат выписки: Excel на бланке с доп. инф.(загрузка из Фронта)
   elif (mn==5)
      OvConnection = Connect2Over();
      front = true;
      cSetZTurn=false;
      PrGround=true;
      DblPrint=false;

      /* EVG 5/05/2014 Не будем переопределять признак "Эквивалент в нац. валюте"
      NatCurEquivalent=false;*/

      SPODTurnsTotal=false;
      cSetA=false;
      cSetCr=true;
      cEveryDayOfPrd=false;
    //  cSetExcludeRevalue=true;  25.11.2014 R-487982 DPN - Зачем наглухо запрещать печать переоценок? Для этого есть флаг 
      ExcludeOcp=true;
      flag=4;
      //  OutForm=3;
      need_print = true;
      sqltab = "DECLARE \n"
         +  " v_err EXCEPTION; \n"
         +  " PRAGMA EXCEPTION_INIT( v_err, -955 );\n"
         + "BEGIN EXECUTE IMMEDIATE 'CREATE TABLE daccstate_dbt"
         + " (  T_number Number (10), " 
         + "   T_OPER NUMBER(5), " 
         + "   T_date date, " 
         +   " T_info VARCHAR2(120), " 
         +   " T_activ char(1 char) )';\n " 
         + "EXCEPTION WHEN v_err THEN NULL; \n"
         + "END; \n";
      SQL_Execute(sqltab,"Создание таблицы отчета", false);
      // info = GetNote(); // 10.04.2012 vihrov отключен лишний скроллинг с ненужными сообщениями

      /* EVG 13/1/2014 Закомментил, используем штатный инструмент.
      if (IsStandAlone()) // Двухзвенка
         if ((ValType(ex)!=V_UNDEF) and (ex.Visible==False))
            ex = ActiveX("Excel.Application",NULL,false); 
         else
            ex = ActiveX("Excel.Application",NULL,true);
         end;
      else // Трехзвенка
         ob = CreateObject ("rsax","TRsAxServer","RsAxServer",false);
         ex = ob.CreateComObject ("Excel.Application");
      end; 
      GetRegistryValue("BANK_INI\\ОБЩИЕ ПАРАМЕТРЫ\\ДИРЕКТОРИИ\\USERTEMPLSDIR",2,out);
      //Fulloutput = FindPath(outputx, out);                    
      if (currency==0)
         //Fulloutput = FindPath(outputx, out);
         Fulloutput = ternary(int(ex.version) > 11,FindPath(outputx_2007, out),FindPath(outputx, out)); // 01.06.2012 vihrov 11 = 2003 ексель, кол-во строк на листе 65тыс макс.
         if (not fulloutput)
            msgbox("Не найдена шаблон " + outputx);
            exit();
         end;
         curr= 0;
      else
         NatCurEquivalent=false;
         mon=1;
         mon=money(mon);
         curr=currency;
         //Fulloutput = FindPath(outputxs, out);
         Fulloutput = ternary(int(ex.version) > 11,FindPath(outputxs_2007, out),FindPath(outputxs, out)); // 01.06.2012 vihrov 11 = 2003 ексель, кол-во строк на листе 65тыс макс.
         if (not fulloutput)
            msgbox("Не найдена шаблон " + outputxs);
            exit();
         end;
      end; 
      //obBook = ex.Workbooks.open(fulloutput,false); 
      obBook = ex.Workbooks.add(fulloutput); // 01.06.2012 vihrov
      obSheet = obBook.ActiveSheet(); 
      */

      /* Если осталось открытое соединение, закрываем */
      if (OvConnection and (OvConnection.State == 1) )
         OvConnection.Close();
      end;

      /* EVG 13/1/2014 Добавил */
      needExcel = true;
      needText  = false;
      ReportType = REPTYPE_XLS_BLANK;
      NeedAddInfo = true;

   // Формат выписки: ДФР обычная
   elif (mn==6) /*Tovpeko*/
      front = false;
      flagprn = 1;
      print_once = true;
      need_print = false;
      LD = DateOut;

   // Формат выписки: ДФР Word
   elif (mn==7) /*Tovpeko*/
      msgbox("Выписка в WORD формируется ПО_ВСЕМ_ДНЯМ периода В_ОДНОЙ таблице без разбивки по дням!!!");
      front = false;
      flagprn = 0;
      print_once = true;
      need_print = false;
      cEveryDayOfPrd=true;  //**//
      LD = DateOut;
      row = 2;
      f = 5;
      str = 27;
      first_page = true;
      count_all_docs = 0;
      sum_all_d = 0;
      sum_all_k = 0;
      sum_all_out = 0;
      GetRegistryValue("BANK_INI\\ОБЩИЕ ПАРАМЕТРЫ\\ДИРЕКТОРИИ\\USERTEMPLSDIR",2,RegParam);
      Templ = "pr_accstate.dot";
      temppath = findpath(Templ,RegParam); 
      if (not temppath)
         msgbox("Не найдена LBR");
         exit();
      end;
      WordApp = CreateWordApplication();
      if (WordApp)
         WordDoc = WordApp.Documents.Add( temppath );
      end;
   elif (mn<0)
      return 0;
   end;

   /*Тихомиров Обработка введенного счета*/
   if ((flag==1) or(flag==2))
      j=0;
      /*
      while (j<strlen(accountmask))
       j=j+1;                     
        if ((substr(AccountMask,j,1)!=1) and (substr(AccountMask,j,1)!=0) and (substr(AccountMask,j,1)!=2) and (substr(AccountMask,j,1)!=3)
         and (substr(AccountMask,j,1)!=4) and (substr(AccountMask,j,1)!=5) and (substr(AccountMask,j,1)!=6)  and (substr(AccountMask,j,1)!=7)
         and (substr(AccountMask,j,1)!=8) and (substr(AccountMask,j,1)!=9))
          if ((substr(AccountMask,j,1)!="?") and (substr(AccountMask,j,1)!="*"))
           msgbox("Укажите номер лицевого счета, по которому выпускается выписка, соответствующий заданным параметрам обора и правам доступа (Присутствуют недопустимые символы)");
           RetVal = 9;
          end;
        end;
      end;
      if (strlen(accountmask) == 0)
         accountmask = "*";
      end;
      accountmasksql = strsubst (strsubst(AccountMask, "*", "%"), "?", "_");
      */
      // KS 23.04.2011 Боже мой!! Почему не устроила convertMaskToSQLFormat? Из-за скорости?
      accountmasksql = convertMaskToSQLFormat(AccountMask, "t_account");
      if (accountmasksql=="")
         accountmasksql = "(1=1)";
      end;
      if (DprtID == 1)
         dprts = " AND t_department = ?";
      else
         dprts = " AND t_branch = ?";
      end;
      cmd_sql = rsdcommand("SELECT COUNT (ROWID) AS cnt "+
                           "  FROM daccount_dbt "+
                           " WHERE " + accountmasksql +
                           dprts);
      cmd_sql.addparam("Branch",RSDBP_IN,DprtID);    
      cmd_sql.execute();
      rsd = rsdrecordset(cmd_sql);
      if ((rsd.movenext()) and (rsd.value(0) < 1))
         msgbox("Укажите номер лицевого счета, по которому выпускается выписка, соответствующий заданным параметрам обора и правам доступа (Количество счетов "+int(rsd.value(0))+")");
         return 0;
      else
         flagprn=1;
      end;
   end;
   // Флаг для печати одного счета
   if ((flag==3) or(flag==4))
      j=0;
      /*
      while (j<strlen(accountmask))
       j=j+1;                     
        if ((substr(AccountMask,j,1)!=1) and (substr(AccountMask,j,1)!=0) and (substr(AccountMask,j,1)!=2) and (substr(AccountMask,j,1)!=3)
         and (substr(AccountMask,j,1)!=4) and (substr(AccountMask,j,1)!=5) and (substr(AccountMask,j,1)!=6)  and (substr(AccountMask,j,1)!=7)
         and (substr(AccountMask,j,1)!=8) and (substr(AccountMask,j,1)!=9))
          if ((substr(AccountMask,j,1)!="?") and (substr(AccountMask,j,1)!="*") and (substr(AccountMask,j,1)!=",") and (substr(AccountMask,j,1)!=" "))
           msgbox("Укажите номер лицевого счета, по которому выпускается выписка, соответствующий заданным параметрам обора и правам доступа (Присутствуют недопустимые символы)");
           RetVal = 9;
          end;
        end;
      end;
      accountmasksql = strsubst (strsubst(AccountMask, "*", "%"), "?", "_");
      */

      // KS 23.04.2011 Боже мой!! Почему не устроила convertMaskToSQLFormat? Из-за скорости?
      accountmasksql = convertMaskToSQLFormat(AccountMask, "t_account");
      if (accountmasksql=="")
         accountmasksql = "(1=1)";
      end;
      if (DprtID == 1)
         dprts = " AND t_department = ?";
      else
         dprts = " AND t_branch = ?";
      end;
      cmd_sql = rsdcommand("SELECT COUNT (ROWID) AS cnt "+
                           "  FROM daccount_dbt "+
                           " WHERE " + accountmasksql +
                           dprts);
      cmd_sql.addparam("Branch",RSDBP_IN,DprtID);    
      cmd_sql.execute();
      rsd = rsdrecordset(cmd_sql);
      if ((rsd.movenext()) and (rsd.value(0) != 1))
      else
         flagprn = 1;
      end;
   end;


   /* EVG 31/12/2013 Большой пользовательский блок, окончание */
   /* ------------------------------------------------------- */

   AccInfo = TAccStatementInfo(DprtID, OrgStructure, IssueMode, NumPlan, Chapter, Currency, DateIn, DateOut,
                               Client, Oper, BalanceMask, AccountMask, KindSort, OutForm, Alg, Subsystem, PrGround,
                               DblPrint, DocOnlyData, NatCurEquivalent, SPODTurnsTotal, cSetA, cSetZTurn, cSetCr,
                               cEveryDayOfPrd, cSetExcludeRevalue, ExcludeOcp, AccountType, AccountUserType,
                               needText, needExcel, needWord, showStorno, userTypeMethod, excludeInternetAccount
                              );


   if (not (accInfo.needText or accInfo.needExcel or accInfo.needWord))
     msgbox("Ни один из форматов печати не выбран!");
     retVal = ERROR;
   end;

   /* Контроль открытых опердней */
   if ((RetVal == WELLDONE) and (RepOperdaysOpened(AccInfo.DepartmentList, AccInfo.DateIn, AccInfo.DateOut).ShouldContinue == false))
     RetVal = OPERDAYNOTPASSED;
   end;

   m_cachedHeaderMaker = TTableHeaderMaker(AccInfo);


   if (RetVal == WELLDONE)
      RetVal = InitPck(AccInfo);
   end;

   if (RetVal == WELLDONE)
      LastDate = AccInfo.DateOut;

      if (AccInfo.cEveryDayOfPrd == true)
         DateInc = 1;
      else  
         DateInc = NDays(AccInfo.DateOut)-NDays(AccInfo.DateIn)+1;
      end;

      NAcc = 0;
      while(AccInfo.DateIn <= LastDate)

         var viewPool = TArray();

         AccInfo.DateOut = AccInfo.DateIn + DateInc-1;

         /* EVG 20/03/2014 Корректировка для того, чтобы дата посл. проводки смотрелась по состоянию на дату окончания периода отчёта*/
         SQL_Execute("{ CALL rsb_rep_ac.set_dat(" + GetSQLDate(AccInfo.DateIn) + ", " + GetSQLDate(AccInfo.DateOut) + ") }");
         // 17.10.2014 R-475355-2 DPN - дата последней проводки должна сравниваться с датой начала периода
       //  SQL_Execute("{ CALL rsb_rep_ac.set_dat(" + GetSQLDate(AccInfo.DateOut) + ", " + GetSQLDate(AccInfo.DateOut) + ") }");

         SQL_Execute("{ CALL  rep_data.setBeginDate(" + GetSQLDate(AccInfo.DateIn) + ") }");
         SQL_Execute("{ CALL  rep_data.setEndDate(" +  GetSQLDate(AccInfo.DateOut) + ") }");

         if (   (accInfo.subsystem == REP_SUBSYSTEMS_ALL)
             or (accInfo.subsystem == REP_SUBSYSTEMS_LOANS)
            )
               sql_truncate(tempSortTableName);
         end;

         Docs = TDocument(AccInfo.OrgStructure);

         if (accInfo.subsystem == REP_SUBSYSTEMS_CB)
             action.beginAct(1000, "Получение данных о лицевых счетах ГКБО");
             cmdText = makeAccountQueryText(accInfo, dateOut);
             accountQueryForDocInfo = makeAccountQueryText(accInfo, dateOut, true);
             setCbAccountsViewName();
             setCacheCbAccountsViewName();
             insertCbAccount(cmdText, accountQueryForDocInfo);
             action.endAct();

         else

             action.beginAct(1000, "Получение данных о лицевых счетах RS-Loans");
             accInfo.createLoansAccount();
             action.endAct();

             // специальный вариант вставки данных из ГКБО с учетом обработанных счетов других подсистем
             action.beginAct(1000, "Получение данных о лицевых счетах ГКБО");
             cmdText = makeAccountQueryText(accInfo, dateOut);
             accountQueryForDocInfo = makeAccountQueryText(accInfo, dateOut, true);

             notProcessingAccountClause = "";

             cmdText = cmdText + notProcessingAccountClause;
             accountQueryForDocInfo = accountQueryForDocInfo + notProcessingAccountClause;

             setCbAccountsViewName();
             setCacheCbAccountsViewName();
             insertCbAccount(cmdText, accountQueryForDocInfo);
             action.endAct();

         end;

         cacheQueryMaker = TCacheQueryMaker(accInfo);
         accInfo.docInfo.cacheInformation(cacheQueryMaker.getMainQuery());
         TPaymentsUtility(accInfo).createData(accInfo.getCacheTableName());

         var accountGettingAction = TActionPanel();
         accountGettingAction.beginAct(100, "Выборка счетов");

         if (accInfo.subsystem == REP_SUBSYSTEMS_ALL)

           cmdText = "SELECT " + sqlGetFieldsString(cbAccountViewName)
            + "\n" + "  FROM " + cbAccountViewName
            + "\n" + " UNION ALL "
            + "\n" + "SELECT " + sqlGetFieldsString(cbAccountViewName)
            + "\n" + "  FROM " + tempSortTableName
            + "\n" + "   WHERE t_acc <> t_odbAccount ";

         elif (accInfo.subsystem == REP_SUBSYSTEMS_CB)

           cmdText = "SELECT " + sqlGetFieldsString(cbAccountViewName)
            + "\n" + "  FROM " + cbAccountViewName

         else

           cmdText = "SELECT " + sqlGetFieldsString(tempSortTableName)
            + "\n" + "  FROM " + cbAccountViewName + " acc" 
            + "\n" + "  WHERE EXISTS (SELECT 1 FROM " + tempSortTableName + " accLoans WHERE accLoans.t_acc = acc.t_acc)"
            + "\n" + " UNION ALL "
            + "\n" + "SELECT " + sqlGetFieldsString(tempSortTableName)
            + "\n" + "  FROM " + tempSortTableName
            + "\n" + "  WHERE t_acc <> t_odbAccount";
         end;

         CmdText = CmdText
          + "\n" + "";

         CmdText = CmdText + MakeAcOrderBy(AccInfo);
         AccInfo.Account = TRsbDataSet(CmdText);

         AccInfo.Account.SetFieldType("DPD",       V_DATE);
         AccInfo.Account.SetFieldType("DPD_R",     V_DATE);
         AccInfo.Account.SetFieldType("Currency",  V_INTEGER);
         AccInfo.Account.SetFieldType("RestIn",    V_MONEY);
         AccInfo.Account.SetFieldType("RestInEq",  V_MONEY);
         AccInfo.Account.SetFieldType("RestOut",   V_MONEY);
         AccInfo.Account.SetFieldType("RestOutEq", V_MONEY);
         AccInfo.Account.SetFieldType("Chapter",   V_INTEGER);
         
         accountGettingAction.endAct();

         if (accInfo.needText)
           viewPool.value(viewPool.size) = TPlainTextView(accInfo);
         end;

         if (accInfo.needExcel)
           viewPool.value(viewPool.size) = TExcelView(accInfo);
         end;

         if (accInfo.needWord)
           viewPool.value(viewPool.size) = TWordView(accInfo);
         end;

         AccCaption = "Формирование выписки за";
         if (AccInfo.DateIn == AccInfo.DateOut)
           AccCaption = AccCaption + " " + string(AccInfo.DateOut:f);
         else
           AccCaption = AccCaption + " период с " + string(AccInfo.DateIn:f) + " по " + string(AccInfo.DateOut:f);
         end;

         InitProgress(-1, "", AccCaption);

         var hasData : Bool;
         hasData = false;
         while(AccInfo.Next())
            hasData = true;

            //28.01.2013 AAN C-16016
            // для конкретного л/с получаем историю имён из примечания 7 и заталкиваем их попрядку
            // в AccInfo.account.accname чтобы потом из этого поля печатать
            var acc_name_note, str_ac_name = "", flag_skobki = true;
            acc_name_note = AccInfo.get_acc_name_note(AccInfo.Account.acc);         // получаем массив хранящий историю имён
            
            while(acc_name_note.movenext())
               if( acc_name_note.value("t_validtodate") < AccInfo.datein )          // если это имя стало неактуально до нач
                  continue;                                                         //  периода выписки то переходим к след наименованию
               end;
               if ( (acc_name_note.value("t_date") <= AccInfo.datein)               // 1) это единственное название для периода 
                    and (acc_name_note.value("t_validtodate") >= AccInfo.dateout))  // выписки
                  str_ac_name = acc_name_note.value("t_name_ac");
                  break;
               end;
               if( (acc_name_note.value("t_date") >= AccInfo.datein) 
                    and (acc_name_note.value("t_validtodate") >= AccInfo.dateout)) // 2) если назв последнее в периоде
                  str_ac_name = acc_name_note.value("t_name_ac");
                  continue;
               end;
               if( (acc_name_note.value("t_date") >= AccInfo.datein)                // 3) если назв входит 
                    and (acc_name_note.value("t_validtodate") <= AccInfo.dateout))  // в нутрь периода 
                  if( flag_skobki )
                     str_ac_name = str_ac_name + "      ( ";
                     flag_skobki = false;
                  end;
                  str_ac_name = str_ac_name +
                                "до" + substr(string ( acc_name_note.value("t_validtodate", null, V_DATE) +1 ), 1, 10) +
                                "  " +
                                acc_name_note.value("t_name_ac") + ", ";
                    continue;
               end;
               if( (acc_name_note.value("t_date") <= AccInfo.datein)                // 4) наизвание было актуально
                    and (acc_name_note.value("t_validtodate") <= AccInfo.dateout))  // в нутрь периода 
                  if( flag_skobki )
                     str_ac_name = str_ac_name + "      ( ";
                     flag_skobki = false;
                  end;
                  str_ac_name = str_ac_name +                                       // на начало периода выписки
                                "до" + substr(string( acc_name_note.value("t_validtodate", null, V_DATE) +1 ), 1, 10) +
                                "  " +
                                acc_name_note.value("t_name_ac");
               end;
            end;
            if( not flag_skobki )
               str_ac_name = str_ac_name + " ) ";
            end;
            AccInfo.account.accname = str_ac_name;
            AccInfo.account.t_accname = str_ac_name;
            
            // AND  28.01.2013 AAN C-16016
            
            accflag = 1;
            if (AccInfo.Account.currency)
               curr = AccInfo.Account.currency;
               //Fulloutput = FindPath(outputxas, out);
               /*var m_ex, m_ob;
               m_ob = CreateObject ("rsax","TRsAxServer","RsAxServer",IsStandAlone());
               m_ex = m_ob.CreateComObject ("Excel.Application", True);
               Fulloutput = ternary(int(m_ex.version) > 11,FindPath(outputxas_2007, out),FindPath(outputxas, out)); // 01.06.2012 vihrov 11 = 2003 ексель, кол-во строк на листе 65тыс макс.
                 */
            end; 
            NAcc = NAcc+1;
            OldNDoc = NDoc;
            if /*((not AccInfo.Account.currency) and*/ (not (flagprn))    //GSP по I-00227451-2 убрал проверку валюты (зачем она вообще была сделана?)
               // Тихомиров - проверка категории //Kozina изменен запрос, т к в ВУЗе неправильно определен attrid категории
               cmdacc = rsdcommand("SELECT   COUNT (1) AS cnt                      "+
                                   "FROM   dobjatcor_dbt atcor, dobjattr_dbt attr  "+
                                   "WHERE       atcor.t_objecttype = 4             "+
                                   "AND atcor.t_groupid = 105                      "+
                                   "AND atcor.t_validtodate > to_date('"+{curdate}+"','dd.mm.yyyy') "+
                                   "AND attr.t_codelist IN (4,5)                   "+
                                   " AND atcor.t_objecttype = attr.t_objecttype    " + //А.Киселев не учли связку с типом объекта 24.02.2011
                                   "AND atcor.t_groupid = attr.t_groupid           "+
                                   "AND attr.t_attrid = atcor.t_attrid             "+
                                   "AND atcor.t_object LIKE '%"+AccInfo.Account.Acc+"'");
                //cmdacc.addparam("date",RSDBP_IN,{curdate});
         //       cmdacc.addparam("acc",RSDBP_IN,AccInfo.Account.Acc);
                cmdacc.execute;
                rsdacc = rsdrecordset(cmdacc);
                if (rsdacc.movenext())
                  if (rsdacc.value(0) > 0)
                     accflag = 0;
                  end;
               end;
            end;
//msgbox (AccInfo.Account.Acc, " - ", accflag);
//debugbreak;
            flagpril = 1;
            Message("Обрабатывается л/с: "+AccInfo.Account.Acc);
            if ((AccInfo.Account.ODBAccount == "") and (AccInfo.Account.initialSubsystem == REP_SUBSYSTEMS_LOANS))
               if (not hasInvalidLoansAccount)
                  hasInvalidLoansAccount = true;
                  invalidLoansAccountProtocol = TOfstream("invalidLoansAccount");
                  invalidLoansAccountProtocol.setOutputFile();
                  println("Не обработаны следующие счета п/с \"Кредитование\":");
                  invalidLoansAccountProtocol.resetOutputFile();
               end;

               invalidLoansAccountProtocol.setOutputFile();
               println(AccInfo.Account.Acc);
               invalidLoansAccountProtocol.resetOutputFile();

            else
               /* Коркин И.Н. по заявке I-068817 */
               if (accflag)
                  ProcessDocuments(accInfo, docs, viewPool);
               /*VDN 25.05.2015 Убрал печать пустой выписки R-584964, I-00568416, R-585127*/
               /*else
                  ProcessDocumentsNotPrint(accInfo, docs, viewPool);*/
               end;

               NAcc = NAcc+1;
            end;


            /* EVG 7/03/2014 Для случая, когда выписка формируется в Excel, нам необходимо напечатать ещё приложения
               (если установлен признак их печати). Приложения печатаются в текст, от печати их в Excel заказчик отказался.
               Поэтому нам нужно проинициализировать новую выписку формата "Обычная", но напечатать её без, собственно,
               выписки :) - только приложения.
               Для печати приложений используем свой отдельный массив viewforFD - чтобы повторно впустую не проходить процедуру
               формирования выписки и приложений для Excel. */
//debugbreak;

            if( ( ReportType == REPTYPE_EXTENDED_XLS ) or ( ReportType == REPTYPE_XLS_BLANK ) )
              if (accflag)

                 var savedReportType = ReportType;

                 /* EVG 13/03/2014 Массив для сбора текстовых первичек при печати в Excel */
                 var viewforFD = TArray();

                 ReportType = REPTYPE_ORDINARY;
                 need_print = false;

                 viewforFD.value(0) = TPlainTextView(accInfo);

                 ProcessDocuments( accInfo, docs, viewforFD );

                 /* EVG 7/03/2014 Сохранение напечатанных приложений в общем массиве */
                 if( viewforFD.Size )
                    views.value( views.size ) = viewforFD;
                 end;

                 viewforFD = null;
                 need_print = true;
                 ReportType = savedReportType;

              end;
            end;


            UseProgress(NAcc);
         end;

         RemProgress();

         AccInfo.DateIn = AccInfo.DateIn+DateInc;
         if (cbAccountViewName != "")
            sql_execute("DROP VIEW " + cbAccountViewName);
            sql_execute("DROP VIEW " + cbCacheAccountViewName);
         end;

         if (hasData)
             views.value(views.size) = viewPool;
             hasData = false;
         end;

      end;
   end;


   var printAction = TActionPanel();
   printAction.beginAct(100, "Печать отчета");
   if (   ((NDoc == 0) and (NAcc != 0) and (not AccInfo.cSetZTurn) and (RetVal == WELLDONE)) //    RetVal = NODOC;
       or ((NAcc == 0) and (RetVal == WELLDONE)) //    RetVal = NOACC;
      )
     viewPool = TArray();

     // 05.04.2012 ABP Для вывода пустых отчетов
     if (accInfo.needText)
       viewPool.value(viewPool.size) = TPlainTextView(accInfo);
     end;

     if (accInfo.needExcel)
       viewPool.value(viewPool.size) = TExcelView(accInfo);
     end;

     if (accInfo.needWord)
       viewPool.value(viewPool.size) = TWordView(accInfo);
     end;

     views.value(0) = viewPool;

     i = 0;
     while (i < views.value(0).size)
       views.value(0).value(i).printEmptyReport();
       i = i + 1;
     end
   end;

   if (retVal == WELLDONE)
     i = 0;
     while (i < views.size)
       /* EVG 20/12/2013 Уже определён
       var j = 0;*/
       j = 0;
       while (j < views.value(i).size)
         //debugbreak;
         views.value(i).value(j).print();
         j = j + 1;
       end;
       i = i + 1;
     end;

   end;
   printAction.endAct();

   //profiler.off();

   if (f==5)
         WordDoc.Bookmarks("Last_Operation").Range.Text     =  AccInfo.DateOut;
         //WordDoc.Bookmarks("Amount").Range.Text        =  count_all_docs;
         WordDoc.Bookmarks("Sum_d").Range.Text         =  sum_all_d;
         WordDoc.Bookmarks("Sum_k").Range.Text         =  sum_all_k;
         WordDoc.Bookmarks("sum_kind_out").Range.Text  =  АП(AccInfo.Account.RestOut, AccInfo.Account.Kind_Account);
         WordDoc.Bookmarks("Sum_out").Range.Text       =  sum_all_out;
   end;

   println("Обработано счетов: ", NAcc);
   println("Обработано документов: ", NDoc);

   return retVal;
END;

// Вывод отчета и протоколов на экран
macro showReport()

    // Список некорректных счетов Loans
    if (hasInvalidLoansAccount)
        invalidLoansAccountProtocol.setOutputFile();
        println("");
        println("Неверно заданы счета ОДБ!!!");
        println("");
        println("Нажмите <Esc> для продолжения");
        invalidLoansAccountProtocol.resetOutputFile();
        invalidLoansAccountProtocol.show();
    end;

    var i;
    var j;
    var viewIterator;

    // Сначала выводим Excel и Word
    i = 0;
    while (i < views.size)
        j = 0;
        while (j < views.value(i).size)
            if (not isEqClass("TPlainTextView", views.value(i).value(j)))
                views.value(i).value(j).show();
            end;
            j = j + 1;
        end;
        i = i + 1;
    end;

    // Затем plain text. Во всех элементах массива views это представление связано с одним и тем же потоком вывода,
    // поэтому показываем только первое представление

    // EVG 14/1/2014 Добавил проверку на то, что plain text существует (иначе, в случае отказа от выбора формата 
    // выписки падает с ошибкой.
    if( valType( views.value(0) ) != V_UNDEF )
       j = 0;
       while (j < views.value(0).size)
           if (isEqClass("TPlainTextView", views.value(0).value(j)))
               views.value(0).value(j).show();
               break;
           end;
           j = j + 1;
       end;
    end;

end;

macro saveReport(reportName)

    var j = 0;
    while (j < views.value(0).size)
        if (isEqClass("TPlainTextView", views.value(0).value(j)))
            views.value(0).value(j).save(reportName);
            break;
        end;
        j = j + 1;
    end;

end;

macro batchProduce(reportName,
                   dprtID, orgStructure, issueMode, numPlan, chapter, currency, dateIn, dateOut, client, oper, balanceMask,
                   accountMask, kindSort, outForm, alg, subsystem, prGround, dblPrint, docOnlyData, natCurEquivalent,
                   spodTurnsTotal, cSetA, cSetZTurn, cSetCr, cEveryDayOfPrd, cSetExcludeRevalue, excludeOcp, accountType,
                   accountUserType, needText, needExcel, needWord, showStorno, userTypeMethod, excludeInternetAccount)

    var dialogFlag = setDialogFlag(0);

    printAccountStatement(dprtID, orgStructure, issueMode, numPlan, chapter, currency, dateIn, dateOut, client, oper, balanceMask,
                          accountMask, kindSort, outForm, alg, subsystem, prGround, dblPrint, docOnlyData, natCurEquivalent,
                          spodTurnsTotal, cSetA, cSetZTurn, cSetCr, cEveryDayOfPrd, cSetExcludeRevalue, excludeOcp, accountType,
                          accountUserType, needText, needExcel, needWord, showStorno, userTypeMethod, excludeInternetAccount);

    saveReport(reportName);

    setDialogFlag(dialogFlag);

end;