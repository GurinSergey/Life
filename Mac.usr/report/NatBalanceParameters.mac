/**
 * RS-Bank 6.0                                            R-Style Software Lab
 *
 * File Name   : NatBalanceParameters.mac
 * Description : Параметры отчета
 * Comment     :
 * @since      : 28.05.2010
 * @author     : Shestakov Dmitry
 * @version    : 6.00.020.30
 */

import ReportInter;
import repException;

import Reporting, ReportInter, Календарь, FIInter, PTInter, CTInter,
       PaymInter, OprInter, CurrInter, BankInter;
import cb_sql, globals, lib_str, lib_lang, lib_arr;
import acv;
import RsbObjFactory;

import param;

/**
 * Глобальная ссылка для хранения одиночки.
 */
private var m_parameters = null;

const DAT_SIGN = 0;
const DAT_TYPE = 1;

class recalcData(_curName : String, _curRate, _curRateDate : String)
    var curName     = _curName;
    var curRate     = _curRate;
    var curRateDate = _curRateDate;
end;

/**
 * Параметры отчета.
 */
private class TNatBalanceParameters(parmArray : TArray)
    /**
     * Код подразделения.
     */
    private var m_departmentCode : Integer;

    /**
     * Оргструктура.
     */
    private var m_orgStructure : Integer;

    /**
     * Режим выпуска.
     */
    private var m_issueMode : Integer;

    /**
     * Глава счетов.
     */
    private var m_chapter : Integer;

    /**
     * Счета, включаемые в отчет по нац. валюте.
     */
    private var m_natcurRepAccounts : Integer;

    /**
     * Номер плана счетов.
     */
    private var m_plan : Integer;

    /**
     * Вид отчетного периода.
     */
    private var m_periodKind : Integer;

    /**
     * Дата начала отчетного периода.
     */
    private var m_dateIn : Date;

    /**
     * Дата конца отчетного периода.
     */
    private var m_dateOut : Date;

    /**
     * Форма балансового отчета.
     */
    private var m_balanceForm : Integer;

    /**
     * Размерность денежных сумм.
     */
    private var m_moneyDimension : Integer;

    /**
     * Валюта пересчета.
     */
    private var m_transFiId : Integer;

    /**
     * Параметры пересчета.
     */
    private var m_recalcInfo : recalcData;

    /**
     * Итоги по разделам?
     */
    private var m_isPrintIssueItog : Bool;

    /**
     * Учет Спод?
     */
    private var m_isPrintSpod : Bool;

    /**
     * С апострофами?
     */
    private var m_isPrintApostrophe : Bool;

    /**
     * Печатать нулевые данные?
     */
    private var m_isPrintZeroData : Bool;

    /**
     * Признак исключения счетов ОВП
     */
    private var m_isExcludeOcp : Bool;

    /**
     * Печать отчета за каждый день периода?
     */
    private var m_isPrintEveryDay : Bool;

    private var m_departmentList : RepDepartmentList;

    private var m_ocpAccountServer : RepOcpAccountServer;

    private var m_recalcState : bool;

    private var m_accountTypeDefinitionMethod : Integer;

    /**
     * @param     departmentCode
     * @param     orgStructure
     * @param     issueMode
     *
     * @param     plan
     * @param     chapter
     * @param     natcurRepAccounts
     *
     * @param     periodKind
     * @param     dateIn
     * @param     dateOut
     *
     * @param     balanceForm
     * @param     dimension
     * @param     transFiId
     * @param     isPrintIssueItog
     *
     * @param     isPrintSpod
     * @param     isPrintApostrophe
     * @param     isPrintZeroData
     * @param     isExcludeOcp
     * @param     isPrintEveryDay
     */
    private macro constructor(parmArray : TArray)
        var i = -1;
        var errorCode;
        var accountTypeDefinitionMethod;

        m_departmentCode    = parmArray[i=i+1];
        m_orgStructure      = parmArray[i=i+1];
        m_issueMode         = parmArray[i=i+1];

        m_plan              = parmArray[i=i+1];
        m_chapter           = parmArray[i=i+1];
        m_natcurRepAccounts = parmArray[i=i+1];

        m_periodKind        = parmArray[i=i+1];
        m_dateIn            = parmArray[i=i+1];
        m_dateOut           = parmArray[i=i+1];

        m_balanceForm       = parmArray[i=i+1];
        m_moneyDimension    = parmArray[i=i+1];
        m_transFiId         = parmArray[i=i+1];
        m_isPrintIssueItog  = parmArray[i=i+1];

        m_isPrintSpod       = parmArray[i=i+1];
        m_isPrintApostrophe = parmArray[i=i+1];
        m_isPrintZeroData   = parmArray[i=i+1];
        //m_isExcludeOcp      = parmArray[i=i+1];
        m_isPrintEveryDay   = parmArray[i=i+1];

        m_departmentList   = RepDepartmentList(m_orgStructure, m_issueMode, m_departmentCode);
        m_ocpAccountServer = RepOcpAccountServer(m_chapter, ALLFININSTR, m_departmentList);

        getRegistryValue("BANK_INI\\ОБЩИЕ ПАРАМЕТРЫ\\ПЕРЕМЕННЫЕ\\DEFINEACCOUNTTYPE", V_STRING, accountTypeDefinitionMethod, errorCode);
        if (errorCode == 0)
            m_accountTypeDefinitionMethod = ternary(trim(strUpr(accountTypeDefinitionMethod)) == "TYPE", DAT_TYPE, DAT_SIGN);
        else
            m_accountTypeDefinitionMethod = DAT_TYPE;
        end;

        m_recalcInfo = null;
    end;

    macro getDepartmentCode() : Integer
        return m_departmentCode;
    end;

    macro getOrgStructure() : Integer
        return m_orgStructure;
    end;

    macro getIssueMode() : Integer
        return m_issueMode;
    end;

    macro getChapter() : Integer
        return m_chapter;
    end;

    macro getNatcurRepAccounts() : Integer
        return m_natcurRepAccounts;
    end;

    macro getPlan() : Integer
        return m_plan;
    end;

    macro getPeriodKind() : Integer
        return m_periodKind;
    end;

    macro getDateIn() : Date
        return m_dateIn;
    end;

    macro getDateOut() : Date
        return m_dateOut;
    end;

    macro getBalanceForm() : Integer
        return m_balanceForm;
    end;

    macro getMoneyDimension() : Integer
        return m_moneyDimension;
    end;

    macro getTransFiId() : Integer
        return m_transFiId;
    end;

    macro getRecalcInfo() : recalcData
        return m_recalcInfo;
    end;

    macro getIsPrintIssueItog() : Bool
        return m_isPrintIssueItog;
    end;

    macro getIsPrintSpod() : Bool
        return m_isPrintSpod;
    end;

    macro getIsPrintApostrophe() : Bool
        return m_isPrintApostrophe;
    end;

    macro getIsPrintZeroData() : Bool
        return m_isPrintZeroData;
    end;

    macro getIsExcludeOcp() : Bool
        return m_isExcludeOcp;
    end;

    macro getIsPrintEveryDay() : Bool
        return m_isPrintEveryDay;
    end;

    macro getDepartmentList() : RepDepartmentList
        return m_departmentList;
    end;

    macro getOcpAccountServer() : RepOcpAccountServer
        return m_ocpAccountServer;
    end;

    macro isRecalcInitiatedCorrectly() : bool
        return m_recalcState;
    end;

    /**
     * @param     blinfo
     * @param     chapter
     */
    macro getBlinfo(blinfo, chapter)
        blinfo.szBaseFileName = "blrept.tmp"; // наименование таблицы с рассчитанным балансом, обязательно нужно заполнить.
        blinfo.iChapter = chapter;
        execExp("blinfo.iPlanNumber" + chapter + " = m_plan");
        blinfo.iUnit = m_moneyDimension;
    end;

    macro getAccountTypeDefinitionMethod() : Integer
        return m_accountTypeDefinitionMethod;
    end;

    /**
     * @param     newM_dateIn
     */
    macro setDateIn(newM_dateIn : Date)
        m_dateIn = newM_dateIn;
    end;

    /**
     * @param     newM_dateOut
     */
    macro setDateOut(newM_dateOut : Date)
        m_dateOut = newM_dateOut;
    end;

    /**
     * @param     newM_recalcState
     */
    macro setRecalcState(newM_recalcState : bool)
        m_recalcState = newM_recalcState;
    end;

    macro setRecalcInfo(recalcInfo : recalcData)
        return m_recalcInfo = recalcInfo;
    end;

    /**
     * @param     newM_accountTypeDefinitionMethod
     */
    macro setAccountTypeDefinitionMethod(newM_accountTypeDefinitionMethod : Integer)
        m_accountTypeDefinitionMethod = newM_accountTypeDefinitionMethod;
    end;

    constructor(parmArray);
end;

/**
 * Точка доступа.
 */
macro natBalanceParameters() : TNatBalanceParameters
    var i = 0;
    var parmArray = TArray();
    if (m_parameters == null)
        if (parmCount() == 0)
            throw(TWrongParametersCountException(natBalanceParameters));
        end;

        while (i < parmCount())
            getParm(i, parmArray[i]);
            i = i + 1;
        end;

        m_parameters = TNatBalanceParameters(parmArray);
    end;

    return m_parameters;
end;
