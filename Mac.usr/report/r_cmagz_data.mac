/**
 *  RS-Bank 6.0                                           R-Style Software Lab
 *  Module  : r_cmagz_data.mac
 *  Purpose : Данныe для отчета "Кассовый журнал".
 *  Comment : Данныe для отчета "Кассовый журнал".
 *  @since    20.09.2010
 *  @author   Shestakov Dmitry
 *  @version  6.00.020.29
 */
/* 16.01.2014 GSP перенос пользовательских доработок из 2030 */
import RsbDataSet;
import cb_sql;
import FIInter;
import r_cmagz_parameters;

/**
 * Данныe для кассового журнала.
 */
class TCJData()

    private const CJ_FORM_DEBIT  = 1; // По приходу
    private const CJ_FORM_CREDIT = 2; // По расходу
    private const CJ_FORM_COMMON = 3; // Общий

    private const ALLCURRENCY    = -2; // по всем валютам, отличным от NATCUR
    private const AKMULTYCARRY   = 15;

    private const REP_PATTERNSORT_DATE             = 15;  //  G. По дате
    private const REP_PATTERNSORT_DATE_DOCUMENT    = 16;  //  H. По дате документа

    macro isAccountsExists()
        return TRsbDataSet("SELECT NULL "
                  + "\n" + "  FROM dual"
                  + "\n" + " WHERE EXISTS(SELECT NULL"
                  + "\n" + "                FROM daccount_dbt acc"
                  + "\n" + "               WHERE (    (REGEXP_LIKE(acc.t_balance, '^2020[27]')"
                  + "\n" + "                      AND (acc.t_type_account LIKE '%А%'))"
                  + "\n" + "                  OR (     REGEXP_LIKE(acc.t_balance, '^20208%')"
                  + "\n" + "                       AND (acc.t_type_account NOT LIKE '%А%')))"
                  + "\n" + "                 AND (acc.t_type_account NOT LIKE '%П%')"
                  + "\n" + "                 AND (" + cjParameters().getAccountFilter().GetAsSqlString("acc") + ")"
                         +                   ternary(    (cjParameters().getFiId() != ALLFININSTR)
                                                     and (cjParameters().getFiId() != ALLCURRENCY),
                    "\n" + "                 AND (acc.t_code_currency = " + cjParameters().getFiId() + ")", ""
                                                    )
                  + "\n" + "                 AND (    (acc.t_open_date <= TO_DATE('"+string(cjParameters().getDateOut()) +"','DD.MM.YYYY'))"
                  + "\n" + "                      AND (   (acc.t_close_date >= TO_DATE('"+string(cjParameters().getDateIn())  +"','DD.MM.YYYY'))"
                  + "\n" + "                           OR (acc.t_close_date < acc.t_open_date)"
                  + "\n" + "                          )"
                  + "\n" + "                     )"
                  + "\n" + "             )").next();
    end;

    macro getReportOpersDataSet(opers)
        var operStr = "";
        var i = 0;

        while (i < opers.size)
            operStr = operStr + opers[i] + ", ";
            i = i + 1;
        end;

        return TRsbDataSet("SELECT officer.t_post position, person.t_name name"
                  + "\n" + "  FROM dperson_dbt person"
                  + "\n" + "      INNER JOIN dofficer_dbt officer"
                  + "\n" + "          ON (officer. t_personid = person.t_partyid)"
                  + "\n" + " WHERE person.t_Oper IN(" + subStr(operStr, 1, strLen(operStr) - 2) + ")"
                  + "\n" + " ORDER BY person.t_Oper");
    end;

    /**
     * Текст запроса по одному направлению в рублях или в валюте.
     */
    private macro getOneWayQuery(isDebit : bool) : string

        var carryCashAccountIdAlias = ternary(isDebit, "t_accountId_payer", "t_accountId_receiver");
        var carryCashAccountAlias   = ternary(isDebit, "t_account_payer", "t_account_receiver");
        var carryCashSumAlias       = ternary(isDebit, "t_sum_payer", "t_sum_receiver");

        var carryCorrAccountIdAlias = ternary(isDebit, "t_accountId_receiver", "t_accountId_payer");
        var carryCorrAccountAlias   = ternary(isDebit, "t_account_receiver", "t_account_payer");

        var paymentCorrAccountAlias = ternary(isDebit, "t_receiveraccount", "t_payeraccount");

        var debitSign               = ternary(isDebit, "'X'", "CHR(1)");
        var symbolKind              = ternary(isDebit, CASHSYMB_TYPE_DEBET, CASHSYMB_TYPE_CREDIT);
        var revNonbalanceSymbols    = ternary(isDebit, "81, 96, 98", "80, 89, 97, 99, 100");

        var currencyFilterClause = "";

        var multycarryPackNumberClause     = "";

        if (cjParameters().getFiId() == ALLCURRENCY)
            currencyFilterClause = "\n" + "   AND (acc.t_code_currency != " + NATCUR + ")";
        elif (cjParameters().getFiId() == ALLFININSTR)
            currencyFilterClause = "";
        else
            currencyFilterClause = "\n" + "   AND (acc.t_code_currency = " + cjParameters().getFiId() + ")";
        end;

        // в фильтр по пачкам (подставляется выражение явно, как и в поле)
        var pack =
                            "CASE WHEN (pm.t_numberpack IS NOT NULL) AND (pm.t_numberpack != 0)"
            + "\n" + "            THEN pm.t_numberpack"
            + "\n" + "            ELSE NVL(d.t_number_pack, 0)"
            + "\n" + "       END";

        var nonbalanceClause = ternary(cjParameters().isNeedNonbalanceSymbols(),
              "\n" + "                    (    (symbl.t_kind = " + CASHSYMB_TYPE_NOTB + ")"
            + "\n" + "                     AND NOT (    REGEXP_LIKE(d." + carryCorrAccountAlias + ", '^2020[278]')"
            + "\n" + "                              AND (symbl.t_kind = " + CASHSYMB_TYPE_NOTB + ")"
            + "\n" + "                              AND TO_NUMBER(symbl.t_symbol) IN (" + revNonbalanceSymbols + ")"
            + "\n" + "                             )"
            + "\n" + "                    )"
            + "\n" + "                   ",
            "1 = 0");

        var qweryText =
                     "SELECT " + pack + " packNumber,"
            + "\n" + "       CASE WHEN (pmr.t_number IS NOT NULL) AND (pmr.t_number != CHR(1))"
            + "\n" + "            THEN pmr.t_number"
            + "\n" + "            ELSE d.t_numb_document"
            + "\n" + "       END num_docum,"
            + "\n" + "       CASE WHEN (pm." + paymentCorrAccountAlias + " IS NOT NULL) AND (pm." + paymentCorrAccountAlias + " != CHR(1))"
            + "\n" + "            THEN pm." + paymentCorrAccountAlias
            + "\n" + "            ELSE d." + carryCorrAccountAlias
            + "\n" + "       END acc,"
            + "\n" + "       CASE WHEN (pmr.t_shifroper IS NOT NULL) AND (pmr.t_shifroper != CHR(1))"
            + "\n" + "            THEN pmr.t_shifroper"
            + "\n" + "            ELSE d.t_shifr_oper"
            + "\n" + "       END shifr_docum,"
            + "\n" + "       d." + carryCashSumAlias + " documentSum,"
            + "\n" + "       CASE WHEN (acc.t_code_currency = " + NATCUR + ")"
            + "\n" + "            THEN '810'"
            + "\n" + "            ELSE fininstr.t_iso_number"
            + "\n" + "       END currencycode,"
            + "\n" + "       fininstr.t_name currencyName,"
            + "\n" + "       d.t_date_carry carryDate,"
            + "\n" + "       d." + carryCashAccountAlias + " cashAccount,"
            + "\n" + "       d.t_oper oper,"
            + "\n" + "       " + debitSign + " isDebit,"
            + "\n" + "       symbl.t_kind                    symblKind,"
            + "\n" + "       NVL(symbl.t_symbol, CHR(0))     symblCode,"
            + "\n" + "       symbl.t_sum                     symblSum,"
//            + "\n" + "       d.t_accTrnId appkey"
            + "\n" + "       d.t_accTrnId appkey,"    //GSP 2031
            + "\n" + "       d.t_ground ground"
            + "\n" + "  FROM daccount_dbt acc"
            + "\n" + "       INNER JOIN dacctrn_dbt d"
            + "\n" + "           ON     (acc.t_accountId = d." + carryCashAccountIdAlias + ")"
            + "\n" + "       INNER JOIN dfininstr_dbt fininstr"
            + "\n" + "           ON     (acc.t_code_currency = fininstr.t_fiid)"
            + "\n" + "       LEFT OUTER JOIN dsymbcash_dbt symbl"
            + "\n" + "           ON (    (symbl.t_accTrnId = d.t_accTrnId)"

            /* EVG 24/02/2014 Добавил t_dockind - без него не использует индекс DSYMBCASH_DBT_IDX4 и сильно тормозит
               (для инфо: 1 - рубли, 7 - валюта ). */
            + "\n" + "               AND (t_dockind = 1 OR t_dockind = 7) "
            
            + "\n" + "               AND ((symbl.t_kind = " + symbolKind + ") OR " + nonbalanceClause + ")"
            + "\n" + "              )"
            + "\n" + "       LEFT OUTER JOIN dpmdocs_dbt pmd"
            + "\n" + "           ON (pmd.t_accTrnId = d.t_accTrnId"
            + "\n" + "              )"
            + "\n" + "       LEFT OUTER JOIN dpmpaym_dbt pm"
            + "\n" + "           ON (pm.t_paymentid = pmd.t_paymentid)"
            + "\n" + "       LEFT OUTER JOIN dpmrmprop_dbt pmr"
            + "\n" + "           ON (pmr.t_paymentid = pmd.t_paymentid)"
            + "\n" + " WHERE d.t_chapter = 1"
            + "\n" + "   AND d.t_state = 1"
                         // кассовый счет должен быть на балансовом 20202, 20207
                         // с установленным системным типом "А"
            + "\n" + "   AND ( (REGEXP_LIKE(acc.t_balance, '^2020[27]')"
            + "\n" + "   AND (acc.t_type_account LIKE '%А%') )"
                         // кассовый счет должен быть на балансовом 20208
                         // с НЕустановленным системным типом "А"
            + "\n" + "   OR (acc.t_balance LIKE '20208%'"
            + "\n" + "   AND (acc.t_type_account NOT LIKE '%А%') ) )"
            + "\n" + "   AND (" + cjParameters().getAccountFilter().GetAsSqlString("acc") + ")"
                   +     currencyFilterClause
                         // кассовый счет должен быть открыт
            + "\n" + "   AND (    (acc.t_open_date <= TO_DATE('"+string(cjParameters().getDateOut()) +"','DD.MM.YYYY'))"
            + "\n" + "        AND (   (acc.t_close_date >= TO_DATE('"+string(cjParameters().getDateIn())  +"','DD.MM.YYYY'))"
            + "\n" + "             OR (acc.t_close_date < acc.t_open_date)"
            + "\n" + "            )"
            + "\n" + "       )"
                         // фильтр по дате проводки
            + "\n" + "   AND (    (d.t_date_carry >= TO_DATE('"+string(cjParameters().getDateIn())  +"','DD.MM.YYYY'))"
            + "\n" + "        AND (d.t_date_carry <= TO_DATE('"+string(cjParameters().getDateOut()) +"','DD.MM.YYYY'))"
            + "\n" + "       )"
                   +     ternary(cjParameters().getOper() != 0,
              "\n" + "   AND (" + ternary(cjParameters().isGroup(),
                                          "rsb_rep_ac.find_operingrp(d.t_oper," + cjParameters().getOper() + ", 1) = 0",
                                          "d.t_oper = " + cjParameters().getOper())
                          + ")", ""
                         )
                   +     ternary(cjParameters().getPackNumber() > 0,
              "\n" + "   AND (("+ pack +") = " + cjParameters().getPackNumber() + ")", ""
                         )
                   +     ternary(cjParameters().getAccountNumber() != "",
              "\n" + "   AND (" + ConvertMaskToSQLFormat(cjParameters().getAccountNumber(), "acc.t_Account") + ")", ""
                         );

        return qweryText;
    end;

    /**
     * Условие группирования записей.
     */
    private macro getRollupOrder(sourceAlias1 : string, sourceAlias2 : string) : string
        var result = "("  + ternary(cjParameters().isNeedDaysSplit(), sourceAlias1 + ".carryDate, ", "")
                          + sourceAlias1 + ".cashAccount, "
                          + sourceAlias1 + ".currencyCode, "
                          + sourceAlias1 + ".currencyName, "
                          + sourceAlias1 + ".isDebit), "
                          + ternary(cjParameters().isNeedOperGroup(), sourceAlias1 + ".oper, ", "")
                          + ternary(cjParameters().isNeedPackGroup(), sourceAlias1 + ".packNumber, ", "")
                    + "("
                          + ternary(not cjParameters().isNeedOperGroup(), sourceAlias1 + ".oper, ", "")
                          + ternary(not cjParameters().isNeedPackGroup(), sourceAlias1 + ".packNumber, ", "")
                          + sourceAlias1 + ".num_docum, "
                          + sourceAlias1 + ".appkey, "
                          + sourceAlias1 + ".acc, "
                          + sourceAlias1 + ".shifr_docum, "
                          + ternary(not cjParameters().isNeedDaysSplit(), sourceAlias1 + ".carryDate, ", "")
                          + sourceAlias1 + ".documentSum, "
                          + sourceAlias2 + ".symbAll, "
                          + sourceAlias2 + ".symbBal, "
                          + sourceAlias2 + ".symbNonBal), ("
                          + sourceAlias1 + ".symblKind, "
                          + sourceAlias1 + ".symblCode, "
//                          + sourceAlias1 + ".symblSum)";  //GSP 2031
                          + sourceAlias1 + ".symblSum, "
                          + sourceAlias1 + ".ground)";
        return result;
    end;

    /**
     * Список полей сортировки отчетов.
     */
    private macro getReportSortOder(sourceAlias : string) : string
        var sortPattern = cjParameters().getSortReportPattern();
        var orderBy = "isGlobalResult DESC, ";
        var i = 0;
        var reportFields = arrCreate(ternary(cjParameters().isNeedDaysSplit(),
                                             sourceAlias + ".carryDate, ", ""),
                                     sourceAlias + ".cashAccount, ",
                                     ternary(   (cjParameters().getFiId() == ALLFININSTR)
                                             or (cjParameters().getFiId() == ALLCURRENCY),
                                             sourceAlias + ".currencyCode, ", ""));

        while(i < sortPattern.size())
            if   (sortPattern(i) == REP_PATTERNSORT_DATE)
                orderBy = orderBy + sourceAlias + ".carryDate, ";
                reportFields[0] = "";
            elif (sortPattern(i) == REP_PATTERNSORT_ACCOUNT)
                orderBy = orderBy + sourceAlias + ".cashAccount, ";
                reportFields[1] = "";
            elif (sortPattern(i) == REP_PATTERNSORT_CURRENCY)
                orderBy = orderBy + sourceAlias + ".currencyCode, ";
                reportFields[2] = "";
            end;
            i = i + 1;
        end;

        i = 0;
        while (i < reportFields.size)
            orderBy = orderBy + reportFields[i];
            i = i + 1;
        end;

        orderBy = orderBy + sourceAlias + ".isDebit DESC, ";
        orderBy = orderBy + "isAccountResult DESC, ";

        // пользовательская сортировка по операционисту и/или пачке невозможна
        // порядок группировки четко задан в ТЗ и сортировка любым другим способом бессмысленна
        orderBy = orderBy + ternary(cjParameters().isNeedOperGroup(), sourceAlias + ".oper, isOperResult DESC, ", "");
        orderBy = orderBy + ternary(cjParameters().isNeedPackGroup(), sourceAlias + ".packNumber, isPackResult DESC, ", "");

        return substr(orderBy, 1, strlen(orderBy)-2);
    end;


    /**
     * Условие сортировки записей.
     */
    private macro getRecordSortOrder(sourceAlias : string) : string
        var sortPattern = cjParameters().getSortRecordPattern();
        var orderBy = "";
        var i = 0;
        var reportFields = arrCreate(ternary(cjParameters().isNeedDaysSplit(), sourceAlias + ".carryDate, ", ""),
                                     sourceAlias + ".cashAccount, ",
                                     sourceAlias + ".currencyCode, ");

        while(i < sortPattern.size())
            if   (sortPattern(i) == REP_PATTERNSORT_SUM_DOCUMENT)
                orderBy = orderBy + sourceAlias + ".documentSum DESC, ";
            elif (sortPattern(i) == REP_PATTERNSORT_DATE_DOCUMENT)
                orderBy = orderBy + sourceAlias + ".carryDate, ";
            end;
            i = i + 1;
        end;

        orderBy = orderBy + sourceAlias + ".num_docum, ";
        orderBy = orderBy + sourceAlias + ".appKey, ";
        orderBy = orderBy + "isDocumentResult DESC, ";
        orderBy = orderBy + sourceAlias + ".symblCode, ";

        return substr(orderBy, 1, strlen(orderBy)-2);
    end;

    /**
     * Поля-индикаторы агрегирующих записей.
     */
    private macro getGroupingSets(sourceAlias : string) : string
        var gSet =           "GROUPING_ID(" + sourceAlias + ".cashAccount,"
                                            + sourceAlias + ternary(cjParameters().isNeedOperGroup(),
                                                                    ".oper",
                                                                    ternary(cjParameters().isNeedPackGroup(),
                                                                            ".packNumber",
                                                                            ".num_docum")) + ","
                                            + ternary(cjParameters().isNeedOperGroup(),
                                                      sourceAlias + ternary(cjParameters().isNeedPackGroup(),
                                                                            ".packNumber",
                                                                            ".num_docum") + ",", "")
                                            + ternary(cjParameters().isNeedPackGroup(),
                                                      sourceAlias + ".num_docum, ", "")
                                            + sourceAlias + ".symblCode) resultLevel,"
            + "\n" + "       GROUPING(" + sourceAlias + ".cashAccount) isGlobalResult,"
            + "\n" + "       GROUPING(" + sourceAlias + ternary(cjParameters().isNeedOperGroup(),
                                                            ".oper",
                                                        ternary(cjParameters().isNeedPackGroup(),
                                                            ".packNumber",
                                                            ".num_docum"))
                                                                  + ") isAccountResult,"
            + "\n" +         ternary(cjParameters().isNeedOperGroup(),
                         "       GROUPING(" + sourceAlias + ternary(cjParameters().isNeedPackGroup(),
                                                                ".packNumber",
                                                                ".num_docum")
                                      + ")",
                                 "0")                              + " isOperResult,"
            + "\n" +         ternary(cjParameters().isNeedPackGroup(),
                         "       GROUPING(" + sourceAlias + ".num_docum" + ")",
                                 "0")                              + " isPackResult,"
            + "\n" + "       GROUPING(" + sourceAlias + ".symblCode)   isDocumentResult,";

        return gSet;
    end;

    /**
     * Агрегированные данные отчета.
     */
    macro getReportDataSet() : Object

        var isQueryStarted = false;
        var heapQweryText = "";
        var resultQweryText = "";

        if (in(cjParameters().getJournalKind(), CJ_FORM_COMMON, CJ_FORM_DEBIT))
            heapQweryText = heapQweryText +
                ternary(isQueryStarted, "\n" + "UNION ALL", "") + "\n" +  getOneWayQuery(true);
            isQueryStarted = true;
        end;

        if (in(cjParameters().getJournalKind(), CJ_FORM_COMMON, CJ_FORM_CREDIT))
            heapQweryText = heapQweryText +
                ternary(isQueryStarted, "\n" + "UNION ALL", "") + "\n" +  getOneWayQuery(false);
            isQueryStarted = true;
        end;

        resultQweryText =
                     "WITH heap AS ("
            + "\n" +  heapQweryText
            + "\n" + "),"
            + "\n" + "squant AS("
            + "\n" + "SELECT carryDate, isDebit, cashAccount, currencyCode, packNumber, num_docum, acc, appkey,"
            + "\n" + "       COUNT(*) symbAll,"
            + "\n" + "       COUNT(decode(symblKind, " + CASHSYMB_TYPE_DEBET + ", 1, " + CASHSYMB_TYPE_CREDIT + ", 1, NULL)) symbBal,"
            + "\n" + "       COUNT(decode(symblKind, " + CASHSYMB_TYPE_NOTB + ", 1, NULL)) symbNonBal"
            + "\n" + "  FROM heap"
            + "\n" + " GROUP BY carryDate, isDebit, cashAccount, currencyCode, packNumber, num_docum, acc, appkey"
            + "\n" + ")"
            + "\n" + "SELECT " + getGroupingSets("h")
            + "\n" + "       h.carryDate, h.cashAccount, h.currencyCode, h.currencyName, h.isDebit,"
            + "\n" + "       h.oper, h.packNumber,"
            + "\n" + "       DECODE(h.documentSum, NULL, sum(h.documentSum/q.symbAll), h.documentSum) aggregate,"
            + "\n" + "       h.num_docum, h.appkey, h.acc, h.shifr_docum,"
            + "\n" + "       h.symblKind, h.symblCode, h.symblSum,"
//            + "\n" + "       q.symbAll, q.symbBal, q.symbNonBal"     //GSP 2031
            + "\n" + "       q.symbAll, q.symbBal, q.symbNonBal, h.ground"
            + "\n" + "    FROM heap h"
            + "\n" + "         INNER JOIN squant q"
            + "\n" + "             ON(    h.carryDate   = q.carryDate"
            + "\n" + "                AND h.isDebit     = q.isDebit"
            + "\n" + "                AND h.cashAccount = q.cashAccount"
            + "\n" + "                AND h.packNumber  = q.packNumber"
            + "\n" + "                AND h.num_docum   = q.num_docum"
            + "\n" + "                AND h.acc         = q.acc"
            + "\n" + "                AND h.appkey      = q.appkey)"
            + "\n" + "GROUP BY ROLLUP(" + getRollupOrder("h", "q") + ")"
            + "\n" + "ORDER BY " + getReportSortOder("h") + ", " + getRecordSortOrder("h");

        if (cjParameters().isGroup() and (cjParameters().getOper() != 0))
            // Инициализация пакета rsb_rep_ac для фильтрации по группам операционистов
            var initializationCommand =
                         "BEGIN"
                + "\n" + "    rsb_rep_ac.set_dat(TO_DATE('" + string(cjParameters().getDateIn())  + "','DD.MM.YYYY'),"
                + "\n" + "                       TO_DATE('" + string(cjParameters().getDateOut()) + "','DD.MM.YYYY'));"
                + "\n" + "END;";
            sql_execute(initializationCommand);
        end;

        var dataSet = TRsbDataSet(resultQweryText);
        dataSet.SetFieldType("carryDate",    V_DATE);
        dataSet.SetFieldType("aggregate",    V_MONEY);
        dataSet.SetFieldType("symblSum",     V_MONEY);

        return dataSet;
    end;

    /**
     * Конструктор.
     */
    private macro constructor()
    end;

    constructor();
end;
