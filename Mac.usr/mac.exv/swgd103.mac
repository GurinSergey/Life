/****************************************************************************/
/*                   R-Style SoftWare Lab, RS-Bank 5.1                      */
/****************************************************************************/
/*                  Подсистема "Межбанковские расчеты"                      */
/* Генерация платежей по сообщениям SWIFT MT103                             */
/*                                                                          */
/*  Имя файла: swgd103.mac                                                  */
/*  Создан:    31.08.00                                      Алешин А.В.    */
/*  Изменен:   28.11.2013 Teleshova C-22504                                 */
/****************************************************************************/

import "swgendoc.mac";

/* Платежная инструкция "Клиентский перевод" */
class SingleCustomerCreditTransfer
 var
  TRF               :string,      /* Ссылочный номер операции */
  BankOperationCode :string,      /* Банковский операционный код */
  InstructionCode   :string,      /* Инструктирующие коды */
  ValueDate         :date,        /* Дата валютирования */
  Currency          :string,      /* Код валюты платежа */
  InstrCurrency     :string,      /* Код валюты актива */
  Sum               :money,      /* Сумма перевода */
  InstrSum          :money,      /* Сумма актива */
  ExchangeRate      :double,      /* Курс пересчета */
  Credit            :bool,        /* Признак дебета/кредита */
  Trans             :bool,        /* Признак транзитного */
  OrdCustomer       :Customer,    /* Приказодатель */
  SndBank           :Bank,        /* Банк-отправитель */
  OrdBank           :Bank,        /* Банк Приказодателя */
  Instructor        :Bank,        /* Инструктирующий банк */
  Sender            :Bank,        /* Отправитель */
  SndCorresp        :Bank,        /* Агент Отправителя */
  InterReimbur      :Bank,        /* Рамбурсирующий Посредник */
  RcvCorresp        :Bank,        /* Агент Получателя */
  Intermediary      :Bank,        /* Посредник */
  AccBank           :Bank,        /* Банк-держатель счета */
  BnfCustomer       :Customer,    /* Бенефициар */
  BnfInfo           :TBnfInfo,    /* Информация Бенефициару */
  ComissCharges     :integer,     /* Расходы корреспондентов */

  DirectAcc         :string,      /* Счет для идентификации корсхемы */
  DirectDKFlag      :string,             /* признак дебета-кредита счета для идентификации корсхемы */

  RcvInfo           :TRcvInfo100; /* Информация Получателю поле 72 */
  var SendersCharges = TArray;

  macro GetSendersChargesSize
     return SendersCharges.Size;
  end;

  TRF               = "";
  BankOperationCode = "";
  InstructionCode   = "";
  ValueDate         = date(0,0,0);
  Currency          = "";
  Sum               = $0;
  ExchangeRate      = 0.0;
  Credit            = false;
  Trans             = false;

  ComissCharges     = PM_CHRG_OUR;

  InstrCurrency = "";
  InstrSum      = $0;

  SendersCharges.Size = 0;  
  DirectAcc = "";

end; /* class SingleCustomerCreditTransfer */

var MT103 = SingleCustomerCreditTransfer;

macro Fill20( TRF )
  MT103.TRF = TRF;
  return TRUE;
end;

macro Fill13C( Code, GMT:TGMT )
  return TRUE;
end;

macro Fill23B( Code )
  MT103.BankOperationCode = Code;
  return TRUE;
end;

macro Fill23E( Code, Value )
  if( MT103.InstructionCode != "" )
    MT103.InstructionCode = MT103.InstructionCode + SYMB_ENDL;
  end;
  MT103.InstructionCode = MT103.InstructionCode + Code;
  if ( Value!="" )
     MT103.InstructionCode = MT103.InstructionCode + SYMB_SLASH + Value;
  end;
  return TRUE;
end;

macro Fill26T( Code )
  return TRUE;
end;

macro Fill32A( Date, Cur, Sum )
  MT103.ValueDate = Date;
  MT103.Currency  = Cur;
  MT103.Sum       = money(Sum);
  return TRUE;
end;

macro Fill33B( Cur, Sum )
  MT103.InstrCurrency  = Cur;
  MT103.InstrSum       = money(Sum);
  return TRUE;
end;

macro Fill36( Rate )
  MT103.ExchangeRate = Rate;
  return TRUE;
end;

macro Fill50A( BIC, Account, System, Code )
  MT103.OrdCustomer = Customer( "", Account, BIC );
  return TRUE;
end;

macro Fill50F(Account, CodeKind, Code, Name)
  var INN = "";
  if(CodeKind == PTCK_INN)
    INN = Code;
  end;
  MT103.OrdCustomer = Customer( Name, Account, Code, INN, CodeKind); 
  return TRUE;
end;

macro Fill50K( Address, Account, System, Code, INN )
  MT103.OrdCustomer = Customer( Address, Account, "", INN );
  return TRUE;
end;

macro Fill51A( BIC, Account, System, Code )
  MT103.SndBank = Bank( BIC, "", "", Account, System, Code );
  return TRUE;
end;

macro Fill52A( BIC, Account, System, Code )
  MT103.OrdBank = Bank( BIC, "", "", Account, System, Code );
  return TRUE;
end;

macro Fill52D( Address, Account, System, Code )
  MT103.OrdBank = Bank( "", Address, "", Account, System, Code );
  return TRUE;
end;

macro Fill53A( BIC, Account, System, Code, DKFlag )
  MT103.DirectAcc = Account;
  MT103.DirectDKFlag = DKFlag;
  MT103.SndCorresp = Bank( BIC, "", "", Account, System, Code );
  return TRUE;
end;

macro Fill53B( Branch, Account, System, Code, DKFlag )
  MT103.DirectAcc = Account;
  MT103.DirectDKFlag = DKFlag;
  MT103.SndCorresp = Bank( "", "", Branch, Account, System, Code );
  return TRUE;
end;

macro Fill53D( Address, Account, System, Code, INN, DKFlag)
  MT103.DirectAcc = Account;
  MT103.DirectDKFlag = DKFlag;
  MT103.SndCorresp = Bank( "", Address, "", Account, System, Code );
  return TRUE;
end;

macro Fill54A( BIC, Account, System, Code )
  MT103.RcvCorresp = Bank( BIC, "", "", Account, System, Code );
  return TRUE;
end;

macro Fill54B( Branch, Account, System, Code )
  MT103.RcvCorresp = Bank( "", "", Branch, Account, System, Code );
  return TRUE;
end;

macro Fill54D( Address, Account, System, Code )
  MT103.RcvCorresp = Bank( "", Address, "", Account, System, Code );
  return TRUE;
end;

macro Fill55A( BIC, Account, System, Code )
  MT103.InterReimbur = Bank( BIC, "", "", Account, System, Code );
  return TRUE;
end;

macro Fill55B( Branch, Account, System, Code )
  MT103.InterReimbur = Bank( "", "", Branch, Account, System, Code );
  return TRUE;
end;

macro Fill55D( Address, Account, System, Code )
  MT103.InterReimbur = Bank( "", Address, "", Account, System, Code );
  return TRUE;
end;

macro Fill56A( BIC, Account, System, Code )
  MT103.Intermediary = Bank( BIC, "", "", Account, System, Code );
  return TRUE;
end;

macro Fill56C( Account )
  MT103.Intermediary = Bank( "", "", "", Account, "", "" );
  return TRUE;
end;

macro Fill56D( Address, Account, System, Code )
  MT103.Intermediary = Bank( "", Address, "", Account, System, Code );
  return TRUE;
end;

macro Fill57A( BIC, Account, System, Code )
  MT103.AccBank = Bank( BIC, "", "", Account, System, Code );
  return TRUE;
end;

macro Fill57B( Branch, Account, System, Code )
  MT103.AccBank = Bank( "", "", Branch, Account, System, Code );
  return TRUE;
end;

macro Fill57C( Account )
  MT103.AccBank = Bank( "", "", "", Account, "", "" );
  return TRUE;
end;

macro Fill57D( Address, Account, System, Code )
  MT103.AccBank = Bank( "", Address, "", Account, System, Code );
  return TRUE;
end;

macro Fill59( Address, Account, System, Code, INN )
  MT103.BnfCustomer = Customer( Address, Account, "", INN );
  return TRUE;
end;

macro Fill59A( BIC, Account, System, Code )
  MT103.BnfCustomer = Customer( "", Account, BIC );
  return TRUE;
end;

macro Fill70( Str )
  MT103.BnfInfo = TBnfInfo( Str );
  return TRUE;
end;

macro Fill71A( ComissCharges )
  MT103.ComissCharges = ComissCharges;
  return TRUE;
end;

macro Fill71F( Cur, Sum )
  MT103.SendersCharges[MT103.GetSendersChargesSize] = TCharges( Cur, Sum );
  return TRUE;
end;

macro Fill71G( Cur, Sum )  
  MT103.SendersCharges[MT103.GetSendersChargesSize] = TCharges( Cur, Sum, {OurBank} );
  return TRUE;
end;

macro Fill72( Str, Narrative )
  MT103.RcvInfo = TRcvInfo100( Str, Narrative );
  return TRUE;
end;

macro Fill77B( Str )
  return TRUE;
end;

macro Fill77T( Str )
  return TRUE;
end;

/* Заполнение списка полей формы  MT103*/
var Fld20  = ТПолеФормы( TransactionReferenceNumberField,      FIELD_MANDATORY, "ReadTRF", "Fill20",  "" ),
    Fld13C = ТПолеФормы( TimeIndicationField,                  FIELD_OPTIONAL,  "Read13C", "Fill13C","" ),    
    Fld23B = ТПолеФормы( BankOperationCodeField_B,             FIELD_MANDATORY, "ReadCode","Fill23B","" ),    
    Fld23E = ТПолеФормы( InstructionCodeField,                 FIELD_OPTIONAL,  "ReadCode","Fill23E", "" ),    
    Fld26T = ТПолеФормы( TransactionTypeCodeField,             FIELD_OPTIONAL,  "ReadType","Fill26T", "" ),    
    Fld32A = ТПолеФормы( ValueDateCurrencyCodeAmountField_A,   FIELD_MANDATORY, "Read32A", "Fill32A", "" ),
    Fld33B = ТПолеФормы( CurrencyOriginalOrderedAmountField,   FIELD_OPTIONAL,  "Read32B", "Fill33B", "" ),    
    Fld36  = ТПолеФормы( ExchangeRateField,                    FIELD_OPTIONAL,  "ReadRate","Fill36",  "" ),    
    Fld50A = ТПолеФормы( OrderingCustomerField_A,              FIELD_OPTIONAL,  "ReadA",   "Fill50A", "" ),
    Fld50F = ТПолеФормы( OrderingCustomerField_F,              FIELD_OPTIONAL,  "Read50F", "Fill50F", "" ),
    Fld50K = ТПолеФормы( OrderingCustomerField_K,              FIELD_OPTIONAL,  "ReadD_",   "Fill50K", "" ),
    Fld51A = ТПолеФормы( SendingInstitutionField_A,            FIELD_OPTIONAL,  "ReadA",   "Fill51A", "" ),    
    Fld52A = ТПолеФормы( OrderingInstitutionField_A,           FIELD_OPTIONAL,  "ReadA",   "Fill52A", "" ),
    Fld52D = ТПолеФормы( OrderingInstitutionField_D,           FIELD_OPTIONAL,  "ReadD_",   "Fill52D", "" ),
    Fld53A = ТПолеФормы( Sender_sCorrespondentField_A,         FIELD_OPTIONAL,  "ReadA",   "Fill53A", "" ),
    Fld53B = ТПолеФормы( Sender_sCorrespondentField_B,         FIELD_OPTIONAL,  "ReadB",   "Fill53B", "" ),
    Fld53D = ТПолеФормы( Sender_sCorrespondentField_D,         FIELD_OPTIONAL,  "ReadD_",   "Fill53D", "" ),
    Fld54A = ТПолеФормы( Receiver_sCorrespondentField_A,       FIELD_OPTIONAL,  "ReadA",   "Fill54A", "" ),
    Fld54B = ТПолеФормы( Receiver_sCorrespondentField_B,       FIELD_OPTIONAL,  "ReadB",   "Fill54B", "" ),
    Fld54D = ТПолеФормы( Receiver_sCorrespondentField_D,       FIELD_OPTIONAL,  "ReadD_",   "Fill54D", "" ),
    Fld55A = ТПолеФормы( ThirdReimbursementInstitutionField_A, FIELD_OPTIONAL,  "ReadA",   "Fill55A", "" ),
    Fld55B = ТПолеФормы( ThirdReimbursementInstitutionField_B, FIELD_OPTIONAL,  "ReadB",   "Fill55B", "" ),
    Fld55D = ТПолеФормы( ThirdReimbursementInstitutionField_D, FIELD_OPTIONAL,  "ReadD_",   "Fill55D", "" ),
    Fld56A = ТПолеФормы( IntermediaryField_A,                  FIELD_OPTIONAL,  "ReadA",   "Fill56A", "" ),
    Fld56C = ТПолеФормы( IntermediaryField_C,                  FIELD_OPTIONAL,  "ReadC",   "Fill56C", "" ),
    Fld56D = ТПолеФормы( IntermediaryField_D,                  FIELD_OPTIONAL,  "ReadD_",   "Fill56D", "" ),
    Fld57A = ТПолеФормы( AccountWithInstitutionField_A,        FIELD_OPTIONAL,  "ReadA",   "Fill57A", "" ),
    Fld57B = ТПолеФормы( AccountWithInstitutionField_B,        FIELD_OPTIONAL,  "ReadB",   "Fill57B", "" ),
    Fld57C = ТПолеФормы( AccountWithInstitutionField_C,        FIELD_OPTIONAL,  "ReadC",   "Fill57C", "" ),
    Fld57D = ТПолеФормы( AccountWithInstitutionField_D,        FIELD_OPTIONAL,  "ReadD_",   "Fill57D", "" ),
    Fld59  = ТПолеФормы( BeneficiaryCustomerField,             FIELD_OPTIONAL,  "ReadD_",   "Fill59",  "" ),
    Fld59A = ТПолеФормы( BeneficiaryCustomerField_A,           FIELD_OPTIONAL,  "ReadA",   "Fill59A", "" ),
    Fld70  = ТПолеФормы( DetailsOfPaymentField,                FIELD_OPTIONAL,  "Read70",  "Fill70",  "" ),
    Fld71A = ТПолеФормы( DetailsOfChargesField_A,              FIELD_MANDATORY, "Read71A", "Fill71A", "" ),
    Fld71F = ТПолеФормы( SendersChargesField,                  FIELD_OPTIONAL,  "Read32B", "Fill71F", "" ),
    Fld71G = ТПолеФормы( ReceiversChargesField,                FIELD_OPTIONAL,  "Read32B", "Fill71G", "" ),
    Fld72  = ТПолеФормы( SenderToReceiverInformationField,     FIELD_OPTIONAL,  "Read72",  "Fill72",  "" ),
    Fld77B = ТПолеФормы( RegulatoryReportingField,             FIELD_OPTIONAL,  "Read77B", "Fill77B", "" ),
    Fld77T = ТПолеФормы( EnvelopeContentsField,                FIELD_OPTIONAL,  "Read77T", "Fill77T", "" );

macro ConstructMT103( RespID )
  var field_name, field_value, loop = 1, count = 0, wasRead = 1,
      result = TRUE, error, fld, BankCode;

  /* Последовательно считываем поля и заполняем лексемы */
  while( loop )
    fld = ПоляФормы.Value(count);
    if( wasRead AND (not СчитатьПоле( field_name, field_value )) )
      loop = 0;
    else
      if( (field_name != fld.Name) )
        if( fld.ПолеОбязательно )
          std.msg( "Не указано обязательное поле " + fld.Name );
          result = FALSE;
          loop = 0;
        else
          /* Пропускаем необязательные поля */
          wasRead = 0;
        end;
      else
        if( fld.ОбработатьПолеФормы( field_value ) )
          if( fld.ВыполнитьФункцияБлока  )
            if( (fld.Name == InstructionCodeField) OR (fld.Name == TimeIndicationField) OR
                (fld.Name == SendersChargesField) )
              count = count - 1;
            end;
            wasRead = 1;
          else
            std.msg("Ошибка при выполнении функции блока " + fld.Name);
            result = FALSE;
            loop = 0;
          end;
        else
          std.msg("Ошибка при обработке поля формы " + fld.Name);
          result = FALSE;
          loop = 0;
        end;
      end;
      count = count + 1;
    end;
  end;

  if( result == FALSE )
    return result;
  end;

  /* Отправитель - респондент */
  BankCode = ПолучитьКодСубъекта( RespID, PTCK_SWIFT, error );
  MT103.Sender   = Bank( BankCode );

  MT103.Credit = TRUE; /* входящие клиентские переводы - кредитовые */
  MT103.Trans  = MT103.AccBank.IsSet() ; /* документ транзитный - если указан банк бенефициара */

  /* Инструктирующий банк */
  if( MT103.RcvInfo.INS != "")
    /* настоятельно рекомендуется в INS передавать BIC */
    if( ReadBIC( MT103.RcvInfo.INS, 1, BankCode ) ) /* попытка чтения из INS кода BIC инструктирующего банка */
      MT103.Instructor = Bank( BankCode );
    else /* если не BIC, то Name & Address */
      MT103.Instructor = Bank( "", MT103.RcvInfo.INS );
    end;
  end;

  return TRUE;
end; /* ConstructMT103 */

macro GenDoc( addrMes )
  debugbreak;
  var error, count;

  SetBuff( wlmes, addrMes );

  PrintLog(2,"Генерация платежа по МТ103");

  ClearRecord(wlpmpaym);
  ClearRecord(wlpmrmprop);  
  InitPMPROP(wlpmpropdeb);
  InitPMPROP(wlpmpropcred);
  //TAM 25.12.2013
  MT103 = null;
  MT103 = SingleCustomerCreditTransfer;

  if( not ConstructMT103( wlmes.OutsideAbonentID ) )
    return FALSE;
  end;

  /* Заполнение учетных буферов */
  /* Платеж */
  wlpmpaym.Payer                 = MT103.OrdCustomer.PartyID;
  wlpmpaym.PayerAccount          = Substr(MT103.OrdCustomer.Account, 1, 25); //TAM 12.12.2013 C-22504
  wlpmpaym.PayerCode             = MT103.OrdCustomer.Code;
  wlpmpaym.PayerCodeKind         = MT103.OrdCustomer.CodeKind;
  wlpmpaym.ReceiverAccount       = MT103.BnfCustomer.Account;
  //wlpmpaym.Futurereceiveraccount = MT103.BnfCustomer.Account; //TAM 06.11.2014
  wlpmpaym.ReceiverCode          = MT103.BnfCustomer.Code;
  wlpmpaym.ReceiverCodeKind      = MT103.BnfCustomer.CodeKind;
  wlpmpaym.Amount                = MT103.Sum;
  wlpmpaym.PayAmount             = MT103.Sum;
  wlpmpaym.BaseAmount            = MT103.Sum;
  wlpmpaym.ValueDate             = {curdate};// TAM 28.11.2013 C-22504 - загружаем текущим днём MT103.ValueDate;

  if( not ПолучитьФинИнПоISO( MT103.Currency, wlfininstr ) )
    std.msg( "Не определена валюта сообщения по коду ISO: " +  MT103.Currency );
    return FALSE;
  end;
  wlpmpaym.FIID     = wlfininstr.FIID;
  wlpmpaym.PayFIID  = wlfininstr.FIID;
  wlpmpaym.BaseFIID = wlfininstr.FIID;
  //TAM 26.11.2014 I-00534967-2
  wlpmpaym.fiid_futurerecacc = wlfininstr.FIID;

  /* Платежи с конверсией */
  if(MT103.InstrCurrency != "")
    if( not ПолучитьФинИнПоISO( MT103.InstrCurrency, wlfininstr ) )
      std.msg( "Не определена валюта инструктируемой суммы по коду ISO: " +  MT103.InstrCurrency );
      return FALSE;
    end;
    wlpmpaym.OrderFIID   = wlfininstr.FIID;
    wlpmpaym.OrderAmount = MT103.Sum;//MT103.InstrSum; TAM 06.11.2014
  else
    wlpmpaym.OrderFIID   = wlpmpaym.BaseFIID;
    wlpmpaym.OrderAmount = wlpmpaym.BaseAmount;
  end;

  if ( MT103.OrdBank.IsSet() )
     wlpmpaym.PayerBankID = MT103.Sender.PartyID; //TAM 28.11.2013 C-22504 MT103.OrdBank.PartyID;
  else
     wlpmpaym.PayerBankID = MT103.Sender.PartyID;// TAM 28.11.2013 C-22504 wlmes.OutsideAbonentID;
  end;

  /* Дебетовые свойства платежа */
  if ( wlpmpaym.ValueDate==date(0,0,0) )
     wlpmpropdeb.TransferDate = {curdate};
  else
     wlpmpropdeb.TransferDate = wlpmpaym.ValueDate;
  end;
  wlpmpropdeb.PayFIID  = wlpmpaym.PayFIID;
  if ( MT103.OrdBank.IsSet() )
     wlpmpropdeb.CodeKind = MT103.Sender.CodeKind; //TAM 28.11.2013 C-22504 MT103.OrdBank.CodeKind;
     wlpmpropdeb.BankCode = MT103.Sender.CodeBank; //TAM 28.11.2013 C-22504 MT103.OrdBank.CodeBank;
     if ( MT103.Instructor.IsSet() )
        wlpmpropdeb.CorrCodeKind = MT103.Instructor.CodeKind;
        wlpmpropdeb.CorrCode     = MT103.Instructor.CodeBank;
        wlpmpropdeb.CorrID       = MT103.Instructor.PartyID;
     else
        wlpmpropdeb.CorrCodeKind = MT103.Sender.CodeKind;
        wlpmpropdeb.CorrCode     = MT103.Sender.CodeBank;
        wlpmpropdeb.CorrAcc      = MT103.Sender.Account;
        wlpmpropdeb.CorrID       = MT103.Sender.PartyID;
     end;
  else
     wlpmpropdeb.CodeKind = MT103.Sender.CodeKind;
     wlpmpropdeb.BankCode = MT103.Sender.CodeBank;

     if ( MT103.SndCorresp.IsSet() )
        wlpmpropdeb.CorrCodeKind = MT103.SndCorresp.CodeKind;
        wlpmpropdeb.CorrCode     = MT103.SndCorresp.CodeBank;
        wlpmpropdeb.CorrID       = MT103.SndCorresp.PartyID;
     end;
  end;

  if ( MT103.SndCorresp.IsSet() OR
       MT103.InterReimbur.IsSet() OR
       MT103.RcvCorresp.IsSet() )
     if ( (not MT103.OrdBank.IsSet()) AND (not MT103.Instructor.IsSet()) )
        wlpmpropdeb.InstructionAbonent = INS_ABONENT_BANK;
     elif ( (not MT103.OrdBank.IsSet()) OR (not MT103.Instructor.IsSet()) )
       wlpmpropdeb.InstructionAbonent = INS_ABONENT_CORR;
     end;
  end;

  if ( MT103.RcvCorresp.IsSet() )
     wlpmpropdeb.OurCorrCodeKind = MT103.RcvCorresp.CodeKind;
     wlpmpropdeb.OurCorrCode     = MT103.RcvCorresp.CodeBank;
     wlpmpropdeb.OurCorrID       = MT103.RcvCorresp.PartyID;
  elif ( (MT103.SndCorresp.IsSet()) AND 
         (not MT103.RcvCorresp.IsSet()) AND
         (MT103.SndCorresp.PartyID!=wlpmpropdeb.CorrID) )
     wlpmpropdeb.OurCorrCodeKind = MT103.SndCorresp.CodeKind;
     wlpmpropdeb.OurCorrCode     = MT103.SndCorresp.CodeBank;
     wlpmpropdeb.OurCorrID       = MT103.SndCorresp.PartyID;
  end;

  /* Если в 53 указан только счет, считаем это явным заданием корсчета */
  if( MT103.DirectAcc != "" )
    wlpmpropdeb.OurCorrAcc   = MT103.DirectAcc;
    if(MT103.DirectDKFlag == "C")
      wlpmpropdeb.InOurBalance = ""; /* Счет указан в балансе корреспондента */
    elif(MT103.DirectDKFlag == "D")
      wlpmpropdeb.InOurBalance = "X"; /* Счет указан в нашем балансе */
    end;
    if( wlpmpropdeb.OurCorrID <= 0 )
      wlpmpropdeb.OurCorrID    = wlmes.OutsideAbonentID; /* Явно прописываем корреспондента, чтобы правильно определилась с/р */
    end;
  end;

  /* Реквизиты платежа, характерные для R-макета */
  wlpmrmprop.Number                = MT103.TRF;
  wlpmrmprop.PayDate               = {curdate}; //TAM 28.11.2013 C-22504 MT103.ValueDate;
  wlpmrmprop.Date                  = {curdate}; //TAM 28.11.2013 C-22504 MT103.ValueDate;
  wlpmrmprop.ClientDate            = {curdate}; //TAM 28.11.2013 C-22504 MT103.ValueDate;
  //TAM 26.11.2014 I-00534967-2
  wlpmpaym.payerbankenterdate      = {curdate};
  if ( MT103.OrdBank.IsSet() )
     wlpmrmprop.PayerBankName         = MT103.Sender.Name; //TAM 28.11.2013 C-22504    MT103.OrdBank.Name;
     wlpmrmprop.PayerCorrAccNostro    = MT103.Sender.Account; //TAM 28.11.2013 C-22504 MT103.OrdBank.Account;
     if ( MT103.Instructor.IsSet() )
        wlpmrmprop.PayerCorrBankName     = MT103.Instructor.Name;
     else
        wlpmrmprop.PayerCorrBankName     = MT103.Sender.Name;     
     end;
  else
     wlpmrmprop.PayerBankName         = MT103.Sender.Name;
     wlpmrmprop.PayerCorrAccNostro    = MT103.Sender.Account;
  end;
  wlpmrmprop.PayerName             = MT103.OrdCustomer.Name;
  wlpmrmprop.PayerINN              = MT103.OrdCustomer.INN;
  wlpmrmprop.ReceiverName          = MT103.BnfCustomer.Name;
  wlpmrmprop.ReceiverINN           = MT103.BnfCustomer.INN;
  wlpmrmprop.Priority              = 5;
  wlpmrmprop.PartyInfo             = MT103.RcvInfo.REC;
  // TAM 28.11.2013 C-22504
  // wlpmrmprop.Ground                = "Зачислено согласно кредитового авизо от " + string({curdate});
  wlpmrmprop.Ground                = MT103.BnfInfo.Text;
  if( MT103.RcvInfo.NZP != "" )
    wlpmrmprop.Ground = wlpmrmprop.Ground + "\n" + MT103.RcvInfo.NZP;
  end;

  /*wlpmrmprop.MessageType           = Transfer; #59030*/ 
  wlpmrmprop.PaymentKind           = "Н";
  wlpmrmprop.ProcessKind           = " 1";
  wlpmrmprop.ShifrOper             = "01";

  wlpmrmprop.ComissCharges         = MT103.ComissCharges;

  /* Записываем полное содержимое поля */
  wlpmrmprop.AdditionalInfo        = MT103.RcvInfo.Str;
  wlpmrmprop.InstructionCode       = MT103.InstructionCode;
  
  /* Кредитовые свойства платежа */
  if( wlpmpaym.ValueDate==date(0,0,0) )
    wlpmpropcred.TransferDate = {curdate};
  else
    wlpmpropcred.TransferDate = wlpmpaym.ValueDate;
  end;
  wlpmpropcred.PayFIID  = wlpmpaym.PayFIID;
  wlpmpropcred.CodeKind = MT103.AccBank.CodeKind;
  wlpmpropcred.BankCode = MT103.AccBank.CodeBank;

  // TAM 09.12.2013 C-22504 - получатель наш банк
  if(ПолучитьКодСубъекта({OurBank}, PTCK_BIC) == "046311808")
    wlpmpaym.ReceiverBankID = MT103.AccBank.PartyID;
    wlpmrmprop.ReceiverBankName = MT103.AccBank.Name;
    wlpmrmprop.ReceiverCorrAccNostro = MT103.AccBank.Account;
    wlpmpropcred.CodeKind = PTCK_SWIFT;
    wlpmpropcred.BankCode = MT103.AccBank.CodeBank;
  else
    wlpmpaym.ReceiverBankID = {OurBank};
    wlpmrmprop.ReceiverBankName = {Name_Bank};
    wlpmpropcred.CodeKind = PTCK_BIC; //TAM 28.11.2013 C-22504
    wlpmpropcred.BankCode = ПолучитьКодСубъекта(wlpmpaym.ReceiverBankID, PTCK_BIC); //TAM 28.11.2013 C-22504
  end;
  
  
  /*if( MT103.Trans )
    wlpmpaym.ReceiverBankID = MT103.AccBank.PartyID;
    wlpmrmprop.ReceiverBankName = MT103.AccBank.Name;
    wlpmrmprop.ReceiverCorrAccNostro = MT103.AccBank.Account;
  else
    if( wlpmpropcred.BankCode != "" )
      // получаем ID банка по коду
      wlpmpaym.ReceiverBankID = ПолучитьКодСубъекта( wlpmpropcred.BankCode, wlpmpropcred.CodeKind, error );
    else
      // определяем банк по счету получателя
      wlpmpaym.ReceiverBankID = GetOwnerID( wlpmpaym.PayFIID, wlpmpaym.ReceiverAccount );
    end;
    
    if( wlpmpaym.ReceiverBankID == 0 )
      wlpmpaym.ReceiverBankID = {OurBank};
      wlpmrmprop.ReceiverBankName = {Name_Bank};
    else
      ПолучитьНаименованиеКлиента( wlpmpaym.ReceiverBankID, wlpmrmprop.ReceiverBankName );
    end;
    wlpmpropcred.CodeKind = PTCK_BIC; //TAM 28.11.2013 C-22504
    wlpmpropcred.BankCode = ПолучитьКодСубъекта(wlpmpaym.ReceiverBankID, PTCK_BIC); //TAM 28.11.2013 C-22504
  end; */
  
  wlpmpropdeb.Corschem = ПолучитьКорсхемуПоУмолчанию( wlmes.OutsideAbonentID, wlpmpropdeb.PayFIID, 1, "К", -1, -1, 0, -1, wlpmpropdeb.OurCorrAcc , 
                                                      NULL, false, wlmes.TpSchemID, wlpmpropdeb.InOurBalance, wlpmpropdeb.OurCorrID);
  if(wlpmpropdeb.Corschem != -1)
    wlpmpropdeb.CorrPosType = PM_CORRPOS_TYPE_USER;
  end;

  ПользовательскаяДоработкаПлатежа( wlmes, wlpmpaym, wlpmpropdeb, wlpmpropcred, wlpmrmprop );
  
  if( not ВставитьПлатеж( wlpmpaym, wlpmpropdeb, wlpmpropcred, wlpmrmprop ) )
    std.msg("Ошибка при сохранении платежа");
    return FALSE;
  end;

  var PaymentObj = RsbPayment( wlpmpaym.PaymentID );

  /* Узел Приказодателя - A,D */
  PaymentObj.Routes.InsertRouteNode( RTDIR_IN, MT103.OrdBank.GetRoute() );
  /* Узел Инструктирующего банка - A(реком.),D */
  PaymentObj.Routes.InsertRouteNode( RTDIR_IN, MT103.Instructor.GetRoute() );
  /* Узел Отправителя - A */
  PaymentObj.Routes.InsertRouteNode( RTDIR_IN, MT103.Sender.GetRoute(), true );
  /* Узел Корреспондента Отправителя - A,B,D */
  PaymentObj.Routes.InsertRouteNode( RTDIR_IN, MT103.SndCorresp.GetRoute() );
  /* Узел Рамбурсирующего Посредника - A,B,D */
  PaymentObj.Routes.InsertRouteNode( RTDIR_IN, MT103.InterReimbur.GetRoute() );
  /* Узел Корреспондента Получателя - A,B,D */
  PaymentObj.Routes.InsertRouteNode( RTDIR_IN, MT103.RcvCorresp.GetRoute() );
  /* Узел Посредника - A(реком.),D */
  PaymentObj.Routes.InsertRouteNode( RTDIR_OUT, MT103.Intermediary.GetRoute() );
  /* Узел Банка Бенефициара - A,B,D */
  PaymentObj.Routes.InsertRouteNode( RTDIR_OUT, MT103.AccBank.GetRoute() );

  if( PaymentObj.Update() )
    std.msg("Ошибка при сохранении платежа");
    return FALSE;
  end;

  count = 0;
  while( count<MT103.GetSendersChargesSize )
     if ( not MT103.SendersCharges[count].InsertCharges )
        std.msg("Ошибка при сохранении расходов отправителя");
        return FALSE;
     end;
     count = count + 1;
  end;

  return TRUE;

  OnError(er) /* обработка ошибок времени выполнения */
    ExeptionMessage(er);
    return FALSE;
end;