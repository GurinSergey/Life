/****************************************************************************/
/*                   R-Style SoftWare Lab, RS-Bank 5.1                      */
/****************************************************************************/
/*                  Подсистема "Межбанковские расчеты"                      */
/* Генерация сообщения по SBRF3 0B1                                         */
/*                                                                          */
/*  Имя файла: sbgm0B1.mac                                                  */
/*  Создан:  17.07.00                                        Алешин А.В.    */
/****************************************************************************/

import "cbsbmes.mac", "sbgenmes.mac";

/* Генерация сообщений 0B1-0B5 по платежу */ 
macro GenMes( TypeMes, MacroProc, Parm )
  var RsPaym = RsbPayment( wlpmpaym.PaymentID );

  if( not GenMesSBRF3Str( TypeMes, RsPaym, MacroProc, Parm ) )
    return FALSE;
  end;

  SetParm( 2, Parm );

  return TRUE; /* Успешное завершение */

  OnError(er) /* обработка ошибок */
    ExeptionMessage(er);
    return FALSE;
end;

/* Релиз 0B1 */
macro GenMes0B1( addrMes, addrPm )
   var format = true;
   SetBuff( wlpmpaym, addrPm );
   return GenMes( type_001, "SB_ЗаписатьПолеЛог", format );
end;

/* Релиз 0B1J */
macro GenMes0B1PIB( addrMes, addrPm )
   var BCI = "";
   SetBuff( wlpmpaym, addrPm );
   if( not GenMes( type_001, "SB_ЗаполнитьПоле", BCI ) )
     return false;
   end;
   
   SB_ЗаписатьПолеЛог( SB_Tag_PIB, BCI, true );

   return true;

   OnError(er) /* обработка ошибок */
     ExeptionMessage(er);
     return false;
end;

/* Релиз 0B2 */
macro GenMes0B2( addrMes, addrPm )
   var format = true;
   SetBuff( wlpmpaym, addrPm );
   return GenMes( type_002, "SB_ЗаписатьПолеЛог", format );
end;

/* Релиз 0B2J */
macro GenMes0B2PIB( addrMes, addrPm )
   var BCI = "";
   SetBuff( wlpmpaym, addrPm );
   if( not GenMes( type_002, "SB_ЗаполнитьПоле", BCI ) )
     return false;
   end;

   SB_ЗаписатьПолеЛог( SB_Tag_PIB, BCI, true );

   return true;

   OnError(er) /* обработка ошибок */
     ExeptionMessage(er);
     return false;
end;

/* Релиз 0B3 */
macro GenMes0B3( addrMes, addrPm )
   var format = true;
   SetBuff( wlpmpaym, addrPm );
   return GenMes( type_003, "SB_ЗаписатьПолеЛог", format );
end;

/* Релиз 0B3J */
macro GenMes0B3PIB( addrMes, addrPm )
   var BCI = "";
   SetBuff( wlpmpaym, addrPm );
   if( not GenMes( type_003, "SB_ЗаполнитьПоле", BCI ) )
     return false;
   end;

   SB_ЗаписатьПолеЛог( SB_Tag_PIB, BCI, true );

   return true;

   OnError(er) /* обработка ошибок */
     ExeptionMessage(er);
     return false;
end;

/* Релиз 0B4 */
macro GenMes0B4( addrMes, addrPm )
   var format = true;
   SetBuff( wlpmpaym, addrPm );
   return GenMes( type_004, "SB_ЗаписатьПолеЛог", format );
end;

/* Релиз 0B4J */
macro GenMes0B4PIB( addrMes, addrPm )
   var BCI = "";
   SetBuff( wlpmpaym, addrPm );
   if( not GenMes( type_004, "SB_ЗаполнитьПоле", BCI ) )
     return false;
   end;

   SB_ЗаписатьПолеЛог( SB_Tag_PIB, BCI, true );

   return true;

   OnError(er) /* обработка ошибок */
     ExeptionMessage(er);
     return false;
end;

/* Релиз 0B5 */
macro GenMes0B5( addrMes, addrPm )
   var format = true;
   SetBuff( wlpmpaym, addrPm );
   return GenMes( type_005, "SB_ЗаписатьПолеЛог", format );
end;

/* Релиз 0B5J */
macro GenMes0B5PIB( addrMes, addrPm )
   var BCI = "";
   SetBuff( wlpmpaym, addrPm );
   if( not GenMes( type_005, "SB_ЗаполнитьПоле", BCI ) )
     return false;
   end;

   SB_ЗаписатьПолеЛог( SB_Tag_PIB, BCI, true );

   return true;

   OnError(er) /* обработка ошибок */
     ExeptionMessage(er);
     return false;
end;

private macro CheckPaym( addr, err_msg, form )

  var ВидКодаСтр, error, CodeKind, PartyID, SubTypeDoc, ИскатьВышестоящих,
      
      INN_Payer,
      KindCode_Payer,
      Code_Payer,
      INN_Receiver,
      KindCode_Receiver,
      Code_Receiver,
      len_field_value,
      PayerMesCode, 
      ReceiverMesCode;

  var CPaym:RsbPayment;
  
  SetBuff( wlpmpaym,  addr );
  CPaym = RsbPayment( wlpmpaym.PaymentID );

  INN_Payer         = SB_RemoveKPP(CPaym.PayerINN);
  INN_Receiver      = SB_RemoveKPP(CPaym.ReceiverINN);

  KindCode_Payer    = CPaym.PayerBankCodeKind;
  Code_Payer        = CPaym.PayerBankCode;
  KindCode_Receiver = CPaym.ReceiverBankCodeKind;
  Code_Receiver     = CPaym.ReceiverBankCode;

//RR 18.08.11 по заявками I-00085761-2, I-00085597-2, I-00085616-2.

  /*Зубко С. Так как при выгрузке документов с шифром 02, 16 возникали ошибки, то с SDA принято решение выгружать простые платежки, чтобы избавится от неприятностей*/
/*  CPaym.ShifrOper = "01";
  /*Так как правил "нагорячую", то вставил заглушку, если свойство не переопределится*/
  if( CPaym.ShifrOper != "01" )
    RunError( "|Попытка выгрузить документ с шифром операции не 01 !" );
  end;
*/
  debugbreak;
  // Подтип документа, определяем по шифру операции (только для форм 0B1, 0B3, 0B5) 
  SubTypeDoc = 0;
/*
  if( (form == sign_0B1) OR (form == sign_0B5) )    
    if ( int(substr(CPaym.ShifrOper, 1, 2)) == 6 )
       SubTypeDoc = 8; /* Инкассовое поручение */ 
    elif ( int(substr(CPaym.ShifrOper, 1, 2)) == 8 )
       SubTypeDoc = 5; /* аккредитив */ 
    elif ( int(substr(CPaym.ShifrOper, 1, 2)) == 16 )
       SubTypeDoc = 4; /* платежный ордер */ 
    elif ( int(substr(CPaym.ShifrOper, 1, 2)) == 9 ) 
       SubTypeDoc = 6; /* мемориальный ордер */ 
    end;
  elif( form == sign_0B3 )
    if ( int(substr(CPaym.ShifrOper, 1, 2)) == 16 )
       SubTypeDoc = 4; /* платежный ордер */ 
    end;
  end;
*/
  // Проверить наличие кода банка
  ИскатьВышестоящих = 1;
  if ( ( Code_Payer == "" ) AND ( Code_Receiver != "" ) ) /* документ кредитовый */
      KindCode_Payer = KindCode_Receiver;
      Code_Payer = ПолучитьКодСубъекта( {OurBank}, KindCode_Payer, error, ИскатьВышестоящих);
      if ( error != 0 )
         err_msg = "Не найден код нашего банка вида " + string(KindCode_Payer);
         SetParm( 1, err_msg );
         return 1;                  
      end;
  end;

  if ( ( Code_Receiver == "" ) AND ( Code_Payer != "" ) ) /* документ дебетовый */
      KindCode_Receiver = KindCode_Payer;
      Code_Receiver = ПолучитьКодСубъекта( {OurBank}, KindCode_Receiver, error, ИскатьВышестоящих);
      if ( error != 0 )
         err_msg = "Не найден код нашего банка вида " + string(KindCode_Receiver);
         SetParm( 1, err_msg );
         return 1;                  
      end;
  end;  

  // Проверить коды клиринга
  CodeKind = PTCK_CLIRING;

  // Участник-отправитель 

/*  if( CPaym.PayerMesBankID == {OurBank} )
    PartyID = {OurBank};
    ИскатьВышестоящих = 1;
  else
    PartyID = CPaym.PayerMesBankID;
    ИскатьВышестоящих = 0;
  end;
*/
  /*Зубко С. Так как PartyID определялось 0, то сделал вот так*/
  PartyID = {OurBank};
  ИскатьВышестоящих = 1;

  PayerMesCode = ПолучитьКодСубъекта( PartyID, CodeKind, error, ИскатьВышестоящих );

  if( error != 0 )
    /* Не найден такой код */
    err_msg = "1 Не найден код клиринга банка участника-отправителя";
    SetParm( 1, err_msg );
    return 1;                  
  end;

  // Участник-получатель 
/*
  if( CPaym.ReceiverMesBankID == {OurBank} )
    PartyID = {OurBank};
    ИскатьВышестоящих = 1;
  else
    PartyID = CPaym.ReceiverMesBankID;
    ИскатьВышестоящих = 0;
  end;

  ReceiverMesCode = ПолучитьКодСубъекта( PartyID, CodeKind, error, ИскатьВышестоящих);
*/
  /*Зубко С. Так как PartyID определялось 0, то сделал так, чтобы код получаетеля определялся по коду банка-получателя*/
  PartyID = CPaym.ReceiverBankID;
  ИскатьВышестоящих = 1;

  ReceiverMesCode = ПолучитьКодСубъекта( PartyID, CodeKind, error, ИскатьВышестоящих);

  /*Зубко 
    Нашли при возвратах
    Если отправляем, например, на ВОЛГО-ВЯТСКИЙ БАНК СБЕРБАНКА РФ г. НИЖНИЙ НОВГОРОД, то кода клиринга этого банка нет в справочнике
    В этом случае нам необходимо подставить САРАТОВСКОЕ ОСБ N 8622
    В панеле по F11 определяется правильно, поэтому берем оттуда: CPaym.ReceiverMesBankID
  */
  if( error != 0 )
    /* Не найден такой код */
    ReceiverMesCode = ПолучитьКодСубъекта( CPaym.ReceiverMesBankID, CodeKind, error, ИскатьВышестоящих);
  end;

  debugbreak;
  if( error != 0 )
    //Gurin S. 09.02.2015 Берем код клиринга с единственного подразделения, где он существует, ищем по БИКу
    var id = execSqlSelect("select t_objectid id from dobjcode_dbt where t_objecttype = 3 and t_codekind = 3 and t_code = '046311649'");
    id.movenext();
    ReceiverMesCode = ПолучитьКодСубъекта( id.value("id"), CodeKind, error, ИскатьВышестоящих);
  end;

  if( error != 0 )
    /* Не найден такой код */
    err_msg = "1 Не найден код клиринга банка участника-получателя";
    SetParm( 1, err_msg );
    return 1;                  
  end;

  // Участник отправиель не должен совпадать с участником-получателем 
  if( PayerMesCode == ReceiverMesCode )
    err_msg = "Код участника-отправителя не может совпадать с кодом участника-получателя";
    SetParm( 1, err_msg );
    return 1;             
  end;

  // Проверить валюту:
  f_sbfininstr.FIID = CPaym.ReceiverFIID;
  if( not getEQ( f_sbfininstr ) )
    err_msg = "Код финансового инструмента "+CPaym.ReceiverFIID+" не найден в справочнике";
    SetParm( 1, err_msg );
    return 1;             
  end;
 
  // Проверить ИНН плательщика
  if( ((form != sign_0B3) OR (SubTypeDoc != 4)) AND ((form != sign_0B5) OR (SubTypeDoc != 6)) )
    len_field_value = StrLen( INN_Payer );
    /* Длина ИНН должна быть 10 или 12 символов */
    if( (len_field_value != 10) AND (len_field_value != 12) AND (len_field_value != 0) )
      err_msg = "Поле ИНН плательщика должно содержать 10 или 12 символов";
      SetParm( 1, err_msg );
      return 1;             
    end;
  end;

  // Проверить банк плательщика (только если документ исходящий)
  // Банк-плательщик, заполняется по банку-создателю 
  if( CPaym.IsExternal() )
    if( not CPaym.IsExternalIncoming() )
      /* Ищем БИК по ЦБ с учетом вышестоящих организаций */
      Code_Payer = ПолучитьКодСубъекта( CPaym.PayerBankID, PTCK_BIC, error, 1 );
      if( error != 0 )
        /* Не найден такой код */
        err_msg = "Для банка-плательщика не найден код с видом кода: " + PTCK_BIC;
        SetParm( 1, err_msg );
        return 1;             
      end;
      /* Ищем субъекта */
      PartyID = ПолучитьКодСубъекта( Code_Payer, PTCK_BIC, Error );
      if( Error != 0 )
        err_msg = "Не найден субъект с кодом: " + Code_Payer;
        SetParm( 1, err_msg );
        return 1;             
      end;
      if( ПолучитьСубъекта(PartyID, cb_sbparty) != 0 )
        err_msg = "Не найден субъект с идентификатором: " + PartyID;
        SetParm( 1, err_msg );
        return 1;             
      end;
      if( PartyID != CPaym.PayerBankID )
        f_cbdprt.PartyID = PartyID;
        if( not GetEQ(f_cbdprt))
          err_msg = "Не найдена запись в справочнике отделений банков с ID = " + PartyID;
          SetParm( 1, err_msg );
          return 1;             
        end;
      end;
    end;
  end;

  // Проверить вид платежной системы по SBRF3
  ВидКодаСтр = ПолучитьВидКодаSBRF3( PTCK_BIC );
  if( ВидКодаСтр == "" ) /* Не найден такой вид кода */      
    err_msg = "Невозможно определить платежную систему банка-создателя|для вида кода " + string(PTCK_BIC);
    SetParm( 1, err_msg );
    return 1;             
  end;
 
  /* Информация о первичном документе */
  if( ((form != sign_0B3) OR (SubTypeDoc != 4)) AND ((form != sign_0B5) OR (SubTypeDoc != 6)) )
    /* ИНН получателя */
    len_field_value = StrLen( INN_Receiver );
    /* Длина ИНН должна быть 10 или 12 символов */
    if( (len_field_value != 10) AND (len_field_value != 12) AND (len_field_value != 0) )
      /*Зубко С. Платежи с нулевым "0" мы можем пропускать*/
      if((len_field_value == 1 ) and (INN_Receiver != "0"))
        err_msg = "Поле ИНН получателя должно содержать 10 или 12 символов";
        SetParm( 1, err_msg );
        return 1;             
      end;
    end;
  end;

  // Проверка банка=получателя
  if( CPaym.IsExternal() AND not CPaym.IsExternalIncoming() AND ((form != sign_0B3) OR (SubTypeDoc != 4)) )
    /* Ищем БИК по ЦБ с учетом вышестоящих организаций */
    Code_Receiver = ПолучитьКодСубъекта( CPaym.ReceiverBankID, PTCK_BIC, error, 1 );
    if( error != 0 )
      /* Не найден такой код */
      err_msg = "Для банка-получателя не найден код с видом кода: " + PTCK_BIC;
      SetParm( 1, err_msg );
      return 1;             
    end;
    /* Ищем субъекта */
    PartyID = ПолучитьКодСубъекта( Code_Receiver, PTCK_BIC, Error );
    if( Error != 0 )
      err_msg = "Не найден субъект с кодом: " + Code_Receiver;
      SetParm( 1, err_msg );
      return 1;             
    end;
    /* Если банк-получатель и вышестоящая организация это один и тот же субъект */
    if( ПолучитьСубъекта(PartyID, cb_sbparty) != 0 )
      err_msg = "Не найден субъект с идентификатором: " + PartyID;
      SetParm( 1, err_msg );
      return 1;             
    end;
    /* Корсчет определяем по справочнику отделений банков */
    if( PartyID != CPaym.ReceiverBankID )
      f_cbdprt.PartyID = PartyID;
      if( not GetEQ(f_cbdprt))
        err_msg = "Не найдена запись в справочнике отделений банков с ID = " + PartyID;
        SetParm( 1, err_msg );
        return 1;             
      end;
    end;
  end;

  // Проверка налоговых реквизитов
  if( ((form == sign_0B1) OR (form == sign_0B5)) AND ((SubTypeDoc == 0) OR (SubTypeDoc == 4) OR (SubTypeDoc == 8/*6?*/)) )
    if( CPaym.TaxPmPeriod!="" )
      if( (strlen(CPaym.TaxPmPeriod) != 1) AND (strlen(CPaym.TaxPmPeriod)!=8) AND (strlen(CPaym.TaxPmPeriod) != 10) )
         err_msg = "Неверно задан налоговый период";
         SetParm( 1, err_msg );
         return 1;             
      end;
    end;
    if( CPaym.TaxPmDate != "" )
      if( (strlen(CPaym.TaxPmDate) !=1)  AND (strlen(CPaym.TaxPmDate) !=10) )
         err_msg = "Неверно задана дата налогового документа";
         SetParm( 1, err_msg );
         return 1;             
      end;
    end;
  end; 

  // Проверка данных по аккредитиву, только для исходящих (т.е. для 0B1) 
  if( (form == sign_0B1) AND (SubTypeDoc == 5) )
    /* Аккредитивы в электронном виде можно направить только внутри Сбербанка */
    if( IsBankType( CPaym.ReceiverBankID, PT_KIND_SAVINGS_BANK ) )
      /* Проверяем по шифру операции */
      if( CPaym.ShifrOper == "08" )    
        /* Номер счета поставщика */
        if( CPaym.AkkrAccRealReceiver == "" )
          err_msg = "Для аккредитива не заполнено поле 'Счет получателя'";
          SetParm( 1, err_msg );
          return 1;             
        end;
        
        /* Дата аккредитива */
        if( CPaym.AkkrDate == date(0,0,0) )
          err_msg = "Для аккредитива не заполнено поле 'Cрок действия'";      
          SetParm( 1, err_msg );
          return 1;             
        end;
      
        /* Приложение к аккредитиву */
        if(CPaym.AkkrAddDocs == "" )
          err_msg = "Для аккредитива не заполнено поле 'Приложение к аккредитиву'";
          SetParm( 1, err_msg );
          return 1;             
        end;

        /* Дополнительные условия аккредитива */
        if( CPaym.AkkrAddCondition == "" )
          err_msg = "Для аккредитива не заполнено поле 'Дополнительные условия'";
          SetParm( 1, err_msg );
          return 1;             
        end;

        /* Требуемые документы */
        if( CPaym.AkkrRepresentation == "" )
          err_msg = "Для аккредитива не заполнено поле 'Платеж по представлению'";
          SetParm( 1, err_msg );
          return 1;             
        end;

        /* Условие оплаты: без акцепта/с акцептом */
        ClearRecord(cb_namealg);
        cb_namealg.iTypeAlg = 2987;
        cb_namealg.iNumberAlg = CPaym.AkkrPayCondition;
        if( not getEQ(cb_namealg) )
          err_msg = "Для аккредитива не заполнено поле 'Условие оплаты аккредитива'";
          SetParm( 1, err_msg );
          return 1;             
        end;
      else
        err_msg = "Данный ПД не является аккредитивом";
        SetParm( 1, err_msg );
        return 1;             
      end;
    else
      err_msg = "Аккредитив в электронном виде можно направлять только в учреждения Сбербанка";
      SetParm( 1, err_msg );
      return 1;             
    end;
  end;

  return 0; /* Успешное завершение */

end;

macro CheckPaym0B1( addr )
  var err_msg:string = "", err;
  debugbreak;
  err = CheckPaym(addr, err_msg, sign_0B1);
  if(err)
    MemoryError(err, err_msg);
    return false;
  end;
  return true;
end;

macro CheckPaym0B2( addr )
  var err_msg:string = "", err;
  err = CheckPaym(addr, err_msg, sign_0B2);
  if(err)
    MemoryError(err, err_msg);
    return false;
  end;
  return true;
end;

macro CheckPaym0B3( addr )
  var err_msg:string = "", err;
  err = CheckPaym(addr, err_msg, sign_0B3);
  if(err)
    MemoryError(err, err_msg);
    return false;
  end;
  return true;
end;

macro CheckPaym0B4( addr )
  var err_msg:string = "", err;
  err = CheckPaym(addr, err_msg, sign_0B4);
  if(err)
    MemoryError(err, err_msg);
    return false;
  end;
  return true;
end;

macro CheckPaym0B5( addr )
  var err_msg:string = "", err;
  err = CheckPaym(addr, err_msg, sign_0B5);
  if(err)
    MemoryError(err, err_msg);
    return false;
  end;
  return true;

end;
