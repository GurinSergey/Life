//-----------------------------------------------------------------------------------------
// ë¢Æ§≠Î© ¨•¨Æ‡§•‡
// Ç.ÉÆ‡´•≠™Æ + á„°™Æ 
// v.2
//-----------------------------------------------------------------------------------------
import globals, ä†´•≠§†‡Ï, fiInter, oralib, likepy,lib_types;/*, oratools, iif, escseq;*/
Private var _sqlString;

Macro Capture ( str )
    _sqlString = String (_sqlString, " ", str);
End;
//-----------------------------------------------------------------------------------------

Macro StartCapture
    _sqlString = "";
    SetOutHandler ("Capture");
End;
//-----------------------------------------------------------------------------------------

Macro EndCapture
    SetOutHandler ();
End;

//Macro iif ( cond, val1, val2 )
//    if ( cond ) return val1; end;
//    return val2;
//End;


Class (TRecHandler) TReportParm
    InitTRecHandler ("unitmo", "RSU_EV.lbr", true);

    Var done = false;

    Macro Handler ( dlg, cmd, id, key )
        if ( (cmd == DLG_INIT) and (dlg.("Rub")) )
            DisableFields (dlg, FldIndex ("Currency"));
            UpdateFields (dlg);
        
        elif ( (cmd == DLG_KEY) and (key == 317) and (id == FldIndex ("Date")) )
            dlg.(id) = GetDateByCalendar (dlg.(id));
        
        elif ( (cmd == DLG_KEY) and (key == 317) and (id == FldIndex ("Chapter")) )
            if ( ListChapter (key = TRecHandler ("obchaptr")) )
                dlg.("Chapter") = key.("Chapter");
            end;

        elif ( (cmd == DLG_KEY) and (key == 317) and (id == FldIndex ("Oper")) )
            if ( ListOper (key = TRecHandler ("person")) )
                dlg.("Oper") = key.("Oper");
            end;

        elif ( (cmd == DLG_KEY) and (key == 32) and ((id == FldIndex ("Rub")) or (id == FldIndex ("Cur")) or (id == FldIndex ("Mult"))) )
            dlg.("Rub") = dlg.("Cur") = dlg.("Mult") = "";
            dlg.(id) = "X";
            if ( (dlg.("Cur")) or (dlg.("Mult")) )
                EnableFields (dlg, FldIndex ("Currency"));
            else
                DisableFields (dlg, FldIndex ("Currency"));
            end;
            UpdateFields (dlg);
        elif ( (cmd == DLG_KEY) and (key == 317) and (id == FldIndex ("Currency")) )
            if ( ListFI (FIKIND_CURRENCY, 0, key = TRecHandler ("fininstr")) )
/*Lex - 07.07.2009*/
//                dlg.("Currency") = key.("iso_number");
                dlg.("Currency") = key.("codeinaccount");
            end;

        elif ( (cmd == DLG_SAVE) and (not done) )
            return CM_CANCEL;

        elif ( (cmd == DLG_KEY) and (key == 316) )
            if ( (dlg.("Currency")) and (èÆ´„Á®‚ÏäÆ§î®≠à≠ (String (dlg.("Currency"))) < 0) )
                MsgBox ("ç•™Æ‡‡•™‚≠Æ „™†ß†≠ ™Æ§ ¢†´Ó‚Î");
                SetFocus (dlg, FldIndex ("Currency"));
            else
                done = true;
                return CM_SAVE;
            end;

        end;
    End;
    
    Macro Run
        done = false;
        if ( this.("Date") == Date (0,0,0) ) this.("Date") = {curdate}; end;
        if ( this.("Chapter") == 0) this.("Chapter") = 1; end;
        if ( (this.("Rub") == "") and (this.("Cur") == "") and (this.("Mult") == "") ) this.("Rub") = "X"; end;

        return RunDialog (this, R2M (this, "Handler"));
    End;
End;
//-----------------------------------------------------------------------------------------

Macro GetSumRubEq ( kind, key )
    Var sql = "select t_sum from darhdoc_dbt where t_connappkind = :kind and t_connappkey = :key";
    sql = ExecSqlSelect (sql, MakeArray (SqlParam ("kind", kind), SqlParam ("key", key)), false);
    if ( sql.MoveNext () ) return Money(sql.value (0)); end;
    return $0;
End;
//-----------------------------------------------------------------------------------------

PRIVATE MACRO IsResident( PartyID ):bool
  VAR select:string = " select party.T_NotResident " +
                      " from   dparty_dbt party "+
                      " where  party.T_PARTYID = :PartyID";
  VAR params:TArray = makeArray( SQLParam( "PartyID", PartyID ) );
  VAR rset:RsdRecordset = execSQLselect( select, params, TRUE );

  if( rset and rset.moveNext() )
    if( rset.value(0) == "X" )
      return false;
    end;
  end;     

  return true;
END;


Macro Report ( parm )

    SetOutput (GetTxtFileName ("p_unitmo"));

    [#] ({Name_Bank}); [ ]; 
    [                                                               ëÇéÑçõâ åÖåéêàÄãúçõâ éêÑÖê éí ##########] (parm.("Date"));

    [ ];
    if ( Parm.("Cur") )
        [⁄ƒƒƒƒƒƒ¬ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¬ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¬ƒƒƒƒƒƒƒƒƒƒƒƒƒ¬ƒƒƒƒƒƒƒƒƒƒƒƒ¬ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¬ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¬ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
         ≥  ¸   ≥ çÆ¨•‡ ·Á•‚† ØÆ §•°•‚„ ≥çÆ¨•‡ ·Á•‚† ØÆ ™‡•§®‚„ ≥ë„¨¨† Ê®‰‡†¨®≥ç†®¨•≠Æ¢†≠®•≥ ë„¨¨† Ø‡ÆØ®·ÏÓ ¢ ®≠. ¢†´Ó‚• ≥ ë„¨¨† Ê®‰‡†¨® ¢ ≥                ëÆ§•‡¶†≠®• ÆØ•‡†Ê®®               ≥
         ≥      ≥                       ≥                       ≥¢ ®≠. ¢†´Ó‚• ≥®≠. ¢†´Ó‚Î  ≥                             ≥ ‡„°´•¢Æ¨ Ì™¢®¢. ≥                                                  ≥
         ≥      ≥                       ≥                       ≥             ≥            ≥                             ≥ ®≠. ¢†´Ó‚Î      ≥                                                  ≥
         √ƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¥];
    elif ( Parm.("Rub") )
        [⁄ƒƒƒƒƒƒ¬ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¬ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¬ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¬ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¬ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
         ≥  ¸   ≥ çÆ¨•‡ ·Á•‚† ØÆ §•°•‚„ ≥çÆ¨•‡ ·Á•‚† ØÆ ™‡•§®‚„ ≥  ë„¨¨† Ê®‰‡†¨®  ≥              ë„¨¨† Ø‡ÆØ®·ÏÓ              ≥                         ëÆ§•‡¶†≠®• ÆØ•‡†Ê®®                      ≥
         ≥      ≥                       ≥                       ≥                 ≥                                          ≥                                                                  ≥
         ≥      ≥                       ≥                       ≥                 ≥                                          ≥                                                                  ≥
         √ƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¥];
    else
        [⁄ƒƒƒƒƒƒ¬ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¬ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¬ƒƒƒƒƒƒƒƒƒƒƒƒƒ¬ƒƒƒƒƒƒƒƒƒƒƒƒ¬ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¬ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¬ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
         ≥  ¸   ≥ çÆ¨•‡ ·Á•‚† ØÆ §•°•‚„ ≥çÆ¨•‡ ·Á•‚† ØÆ ™‡•§®‚„ ≥ë„¨¨† Ê®‰‡†¨®≥ç†®¨•≠Æ¢†≠®•≥ ë„¨¨† Ê®‰‡†¨® ¢ ≥   ë„¨¨† Ø‡ÆØ®·ÏÓ ¢ ‡„°´ÔÂ   ≥                ëÆ§•‡¶†≠®• ÆØ•‡†Ê®®               ≥
         ≥      ≥                       ≥                       ≥¢ ®≠. ¢†´Ó‚• ≥®≠. ¢†´Ó‚Î  ≥     ‡„°´ÔÂ      ≥                             ≥                                                  ≥
         ≥      ≥                       ≥                       ≥             ≥            ≥                 ≥                             ≥                                                  ≥
         √ƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¥];
    end;

    StartCapture ();
    if ( Parm.("Mult") )
        [select dmultycar_dbt.*, 
                decode (t_fiid_to, 0, t_amount_from, t_amount_to) cursum,
                decode (t_fiid_from, 0, t_amount_from, t_amount_to) rubsum,
                decode (t_fiid_to, 0, t_fiid_from, t_fiid_to) fiid
         from dmultycar_dbt where t_date_value = :dt and t_chapter=:ch and t_number_pack = :pk
                                  and ((select t_oper from darhdoc$_dbt where t_connappkind=dmultycar_dbt.t_iapplicationkind and t_connappkey=dmultycar_dbt.t_applicationkey and rownum=1)=:op1 or :op2 = 0)
                                  and 0 in (t_fiid_from, t_fiid_to)
                                  and (decode (t_fiid_to, 0, t_fiid_from, t_fiid_to) = :cur1 or :cur2 = 0)
         order by decode (t_fiid_to, 0, t_amount_from, t_amount_to)]
    else
        [select * from ############ where t_date_carry = :dt and t_chapter=:ch and t_number_pack=:pk
                                          and t_result_carry <> 14
                                          and (t_oper=:op1 or :op2= 0)
                                          and (t_code_currency = :cur1 or :cur2 = 0)]
        (iif (parm.("Rub"), "darhdoc_dbt", "darhdoc$_dbt"));

        if ( parm.("Cur") )
            println ("and not exists (select 1 from daccount$_dbt where daccount$_dbt.t_chapter=darhdoc$_dbt.t_chapter and t_account IN (darhdoc$_dbt.t_account_payer, darhdoc$_dbt.t_account_receiver) and t_type_account like '%ô%')");
        end;

        println ("order by t_sum");
    end;
    EndCapture ();

    Var Curr, sum = $0, sumL = Tarray (), sumeq = TArray (), eq, x = 0, lines = 0;
    if ( Parm.("Rub") )
        Curr = 0;
    else
        Curr = iif (parm.("Currency") == 0, 0, èÆ´„Á®‚ÏäÆ§î®≠à≠ (String (parm.("Currency"))));
    end;

    Var sql = ExecSqlSelect (_sqlString,MakeArray (SqlParam ("dt", parm.("Date")),
                                        SqlParam ("ch", parm.("Chapter")),
                                        SqlParam ("pk", parm.("NumberPack")),
                                        SqlParam ("op1", parm.("Oper")),
                                        SqlParam ("op2", parm.("Oper")),
                                        SqlParam ("cur1", Curr),
                                        SqlParam ("cur2", Curr))
                             , false );

    while ( sql.MoveNext () )
        if ( parm.("Rub") )
            [≥######≥#######################≥#######################≥#################≥##########################################≥##################################################################≥]
            (String (sql.value ("t_numb_document")):w,
             String (sql.value ("t_account_payer")):f,
             String (sql.value ("t_account_receiver")):f,
             Money  (sql.value ("t_sum")):a,
             RubToStrAlt (Money(sql.value ("t_sum"))):w,
             String (sql.value ("t_ground")):w);
            sum = sum + Money(sql.value ("t_sum"));
        elif ( parm.("Cur") )
            eq = GetSumRubEq (sql.value ("t_iapplicationkind"), sql.value ("t_applicationkey"));

            [≥######≥#######################≥#######################≥#############≥############≥#############################≥#################≥##################################################≥]
            (String (sql.value ("t_numb_document")):w,
             String (sql.value ("t_account_payer")):f,
             String (sql.value ("t_account_receiver")):f,
             Money  (sql.value ("t_sum")):a,
             GETFINAME ( Int(sql.value ("t_code_currency"))),
             CurToStrAlt (Money  (sql.value ("t_sum")), null, null, int (èÆ´„Á®‚ÏäÆ§î®≠à≠ (sql.value ("t_code_currency")))):w,
             eq:a,
             String (sql.value ("t_ground")):w);
            if ( sumL [Int (sql.value ("t_code_currency"))] == NULL )
                sumL [Int (sql.value ("t_code_currency"))] = Money  (sql.value ("t_sum"));
                sumeq [Int (sql.value ("t_code_currency"))] = eq;
            else
                sumL [Int (sql.value ("t_code_currency"))] = sumL [Int (sql.value ("t_code_currency"))] + Money  (sql.value ("t_sum"));
                sumeq [Int (sql.value ("t_code_currency"))] = sumeq [Int (sql.value ("t_code_currency"))] + eq;
            end;
        else
            [≥######≥#######################≥#######################≥#############≥############≥#################≥#############################≥##################################################≥]
            (String (sql.value ("t_numb_document")):w,
             String (sql.value ("t_account_from")):f,
             String (sql.value ("t_account_to")):f,
             Money  (sql.value ("cursum")):a,
             GETFINAME (Int (sql.value ("fiid"))),
             Money  (sql.value ("rubsum")):a,
             RubToStr (Money  (sql.value ("rubsum"))):w,
             String (sql.value ("t_ground")):w);
            if ( sumL [Int (sql.value ("fiid"))] == NULL )
                sumL [Int (sql.value ("fiid"))] = Money  (sql.value ("cursum"));
                sumeq [Int (sql.value ("fiid"))] = Money  (sql.value ("rubsum"));
            else
                sumL [Int (sql.value ("fiid"))] = sumL [Int (sql.value ("fiid"))] + Money  (sql.value ("cursum"));
                sumeq [Int (sql.value ("fiid"))] = sumeq [Int (sql.value ("fiid"))] + Money  (sql.value ("rubsum"));
            end;
        end;
    end;

    if ( parm.("Rub") )
        [√ƒƒƒƒƒƒ¡ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¡ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¥
         ≥#####                                                 ≥#################≥##########################################≥                               #                                  ≥
         ¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¡ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¡ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¡ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ]
        ("àíéÉé", sum:a, RubToStrAlt (sum):w, "X");
    else
        if ( Parm.("Cur") )
            [√ƒƒƒƒƒƒ¡ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¡ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¥];
        else
            [√ƒƒƒƒƒƒ¡ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¡ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¥];
        end;
        while ( x < sumL.Size )
            if ( sumL [x] )
                if ( Parm.("Cur") )
                    [≥######################################################≥#############≥      #     ≥#############################≥#################≥                          #                       ≥]
                    ("àíéÉé èé "+èÆ´„Á®‚ÏäÆ§î®≠à≠ (x), sumL [x]:a, "X", CurToStrAlt (sumL [x], null, null, int (èÆ´„Á®‚ÏäÆ§î®≠à≠ (x))):w, SumEq [x]:a, "X");
                else
                    [≥######################################################≥#############≥      #     ≥#################≥#############################≥                          #                       ≥]
                    ("àíéÉé èé "+èÆ´„Á®‚ÏäÆ§î®≠à≠ (x), sumL [x]:a, "X":c, sumEq [x]:a, RubToStr (sumEq [x]):w, "X");
                end;
                lines = lines + 1;
                sum = sum + SumEq [x];
            end;
            x = x + 1;
        end;
        if ( lines > 1 )
            if ( Parm.("Cur") )
                [≥######################################################≥#############≥      #     ≥#############################≥#################≥                          #                       ≥]
                ("ÇëÖÉé", "X":c, "X", "X":c, sum:a, "X");
            else
                [≥######################################################≥#############≥      #     ≥#################≥#############################≥                          #                       ≥]
                ("ÇëÖÉé", "X":c, "X":c, sum:a, RubToStrAlt (sum):w, "X");
            end;
        end;
        if ( parm.("Cur") )
            [¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¡ƒƒƒƒƒƒƒƒƒƒƒƒƒ¡ƒƒƒƒƒƒƒƒƒƒƒƒ¡ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¡ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¡ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ];
        else
            [¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¡ƒƒƒƒƒƒƒƒƒƒƒƒƒ¡ƒƒƒƒƒƒƒƒƒƒƒƒ¡ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¡ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¡ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ];
        end;
    end;


    [ ]; [ ]; [ ]; [ èÆ§Ø®·® _____________________];

    SetOutput ();

    file out () txt;
    if ( not Open (out, GetTxtFileName ("p_unitmo")) )
        MsgBox ("éË®°™† Æ‚™‡Î‚®Ô ‰†©´† Æ‚Á•‚†");
    else
        ViewFile (out);
    end;
End;
//-----------------------------------------------------------------------------------------

MACRO Print_unitmo()

   Var Parm = TReportParm ();

   while ( Parm.Run () ) 
       Report (Parm);
   end;

   Exit (1);
END;