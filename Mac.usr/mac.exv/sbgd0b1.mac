/****************************************************************************/
/*                   R-Style SoftWare Lab, RS-Bank 5.1                      */
/****************************************************************************/
/*                  Подсистема "Межбанковские расчеты"                      */
/* Генерация платежей по сообщениям SBRF3 сигнатура 0B1                     */
/*                                                                          */
/*  Имя файла: sbgd0b1.mac                                                  */
/*  Создан:    20.07.00                                      Алешин А.В.    */
/****************************************************************************/
/*Зубко С. 01.02.2011
  Явно прописал, что сообщение получаем от Саратовского ОСБ (5486220000), 
  так как справочника отделений СБ РФ в RS-Bank нет.
  Pay.Sender.CodeBank = "5486220000";*/

import "sbgendoc.mac", "akkrtls.mac";

RECORD wl_akkr(pmakkr);

class FinancialDocument
 var
  Number          :string,      /* Ссылочный номер операции */
  Reference       :string,      /* Информация о первичном документе */
  ValueDate       :date,        /* Дата валютирования */
  PayDate         :date,        /* Срок платежа */
  ClientDate      :date,        /* Дата приема документа от клиента */
  LastDate        :date,        /* Дата последней обработки */
  FIID            :integer,     /* ID валюты */
  Sum             :money,      /* Сумма перевода */
  Credit          :bool,        /* Признак дебета/кредита */
  ValueDateNotSet :bool,        /* Дата валютирования не указана в сообщении */
  ClientDateNotSet:bool,        /* Дата приема докумета от клиента не указана в сообщении */
  OrdCustomer     :SbCustomer,  /* Приказодатель */
  OrdBank         :SbBank,      /* Банк Приказодатель */
  Sender          :SbBank,      /* Участник - Отправитель */
  Receiver        :SbBank,      /* Участник - Получатель */
  Intermediary    :SbBank,      /* Банк- Посредник */
  AccBank         :SbBank,      /* Банк-бенефициара */
  BnfCustomer     :SbCustomer,  /* Бенефициар */
  Ground          :string,      /* Информация Бенефициару */
  ComissCharges   :integer,     /* Расходы корреспондентов */
  MessageType     :string,      /* Тип сообщения */
  Priority        :integer,     /* Очередность платежа */
  ShifrOper       :string,      /* Шифр операции */
  PartyInfo       :string,      /* Информация Получателю */
  TypeDocument    :string,      /* Тип документа */
  FI_Code         :string,      /* Пользоват. код валюты */
  SubTypeDocument :string,      /* Подтип документа */
  ServiceType     :string,      /* Тип обслуживания */
  PaymKind        :string,      /* Вид платежа */
  DateChargeOffPayer:date,       /* Списано со счета плательщика */
  DateMarkRec     :date,        /* Дата отметки банка получателя */ 
  DateCI2         :date,        /* Дата плмещения в картотеку */
  DateMarkPay     :date,        /* Дата отметки банка плательщика */ 
  TaxAuthorState  :string,      /* Статус составителя документа */
  BttTICode       :string,      /* Код бюджетной классификации */
  OKATOCode       :string,      /* Код OKATO */
  TaxPmGround     :string,      /* Основание налогового платежа */
  TaxPmPeriod     :string,      /* Налоговый период */
  TaxPmNumber     :string,      /* Номер налогового документа */
  TaxPmDate       :string,      /* Дата налогового документа */
  TaxPmType       :string,      /* Тип налогового платежа */
  AmountRest      :money,      /* Сумма остатка к оплате */
  ShifrBasicDoc   :string,      /* Шифр оплачиваемого документа */
  DateBasicDoc    :date,        /* Дата оплачиваемого документа */
  CountPartPay    :integer,     /* Номер частичной оплаты */
  ReserveField1   :string,      /* Резервное поле */
  ReserveField2   :string,      /* Резервное поле */
  TegDE           :integer,
  ReceiverCorrAccNostro:string,  
  NumberDoc       :string,      /* Номер оплачиваемого документа */
  /*Для аккредитивов*/
  Representation  :string,      /*Платеж по представлению*/
  AddCondition    :string,      /*Дополнительные условия*/
  PayCondition    :string,      /*Условия оплаты*/
  AkkrCover       :string,      /*Покрытие*/
  AkkrType        :string,      /*Тип аккредитива*/
  SrokDeist       :string,         /*Срок действия аккредитива*/
  AcceptTerm      :integer,     /*Условие акцепта*/
  Accept          :integer,     /*Состояние акцепта*/
  AkkrAddDocs     :string;      /*Приложение к аккредитиву*/

  ReceiverCorrAccNostro = "";
  TegDE = 2;
  ReserveField1 = "";
  ReserveField2 = "";
  DateChargeOffPayer = date(0,0,0);
  DateMarkRec = date(0,0,0);
  DateCI2 = date(0,0,0);
  DateMarkPay = date(0,0,0);
  TaxAuthorState = "";
  BttTICode = "";
  OKATOCode = "";
  TaxPmGround = "";
  TaxPmPeriod = "";
  TaxPmNumber = "";
  TaxPmDate = "";
  TaxPmType = "";
  AmountRest = $0;
  ShifrBasicDoc = "";
  DateBasicDoc = date(0,0,0);
  CountPartPay = 0;
  NumberDoc = "";

  Number          = "";
  Reference       = "";
  Sum             = $0;
  Credit          = false;
  Ground          = "";
  MessageType     = "";
  ShifrOper       = "";
  PartyInfo       = "";
  SubTypeDocument = "";
  ServiceType     = "";

  ValueDate           = date(0,0,0);
  ClientDate          = date(0,0,0);
  LastDate            = date(0,0,0);
  PayDate             = {curdate};
  FIID                = 0;
  FI_Code             = "???";
  ValueDateNotSet     = false;
  ClientDateNotSet    = false;
  TypeDocument        = "";
  Priority            = 5;
  BnfCustomer.Account = "0";
  Representation      = "";
  AddCondition        = "";
  PayCondition        = "";
  AkkrCover           = "";
  AkkrType            = "";
  AkkrAddDocs         = ""; 
  PaymKind            = "Э";
  SrokDeist           = ""; 
end; /* class FinancialDocument */

var Pay = FinancialDocument;

/* Разбор полей сообщения */
macro ToMakePayment( IsPIB )
  var field_name, field_value, result = TRUE, CodeKind, SBRFStr = "", i, dblSum, FieldMes="";

  /* Формируем строку сообщения СБРФ */
  if( not SB_MakeSBRF3Message( IsPIB, SBRFStr ) )
    return false;
  end;

  /* Проверяем ЭЦП входящего сообщения */
  if( not SBCheckKey( SBRFStr ) )
    return false;
  end;

  /* Gurin S. R-411876-2 16.07.2014 Обнуляем свойства класса Pay*/
  Pay = FinancialDocument;

  /* Номер клиентского документа берется из последних шести цифр идентификационного блока бизнес-сообщения 
     этот кусок можно взять из wlmes.trn, куда не записывается только сигнатура, если присутствует поле
     IN, то номер клиентского документа переопределится, см. ЗАП.№105693 */
  Pay.Number = TrimZero( Substr( wlmes.trn, 17, 6 ) );

  /* Последовательно считываем и обрабатываем поля */
  while( result AND (SB_СчитатьПолеИзСообщения( field_name, field_value, SBRFStr) == 0) )
    if(   field_name == "DT" )   /* Тип документа */
      Pay.TypeDocument = field_value;
    elif( field_name == "UT" )   /* Подтип документа */
      Pay.SubTypeDocument = field_value;
    elif( field_name == "PA" ) /* Участник отправитель */
      /*Pay.Sender.CodeBank = field_value;*/
      /*Зубко Явно прописал, что сообщение получаем от Саратовского ОСБ (5486220000),
      так как справочника отделений СБ РФ в RS-Bank нет.*/
      Pay.Sender.CodeBank = "5486220000";
      Pay.Sender.CodeKind = PTCK_CLIRING;
    elif( field_name == "RC" ) /* Участник получатель */
      Pay.Receiver.CodeBank = field_value;
      Pay.Receiver.CodeKind = PTCK_CLIRING;
    elif( field_name == "AM" ) /* Сумма */      
      if ( Pay.TegDE==2 )
         Pay.Sum = money( field_value )/100;
      elif ( Pay.TegDE<2 )
         dblSum = doubleL( field_value )/100;
         i = Pay.TegDE;
         while( i<2 )
            i = i+1;
            dblSum = dblSum*10;
         end;
         Pay.Sum = money( dblSum );
      else
         dblSum = doubleL( field_value )/100;
         i = Pay.TegDE;
         while( i>2 )
            i = i-1;
            dblSum = dblSum/10;
         end;
         Pay.Sum = money( dblSum );
      end;
    elif( field_name == "AA" )
      Pay.ReceiverCorrAccNostro = field_value;
    elif( field_name == "DE" ) /* Сумма */
      Pay.TegDE = int(field_value);
      if ( Pay.TegDE<2 )
         i = Pay.TegDE;
         while( i<2 )
            i = i+1;
            Pay.Sum = Pay.Sum*10;
            Pay.AmountRest = Pay.AmountRest*10;
         end;
      else
         i = Pay.TegDE;
         while( i>2 )
            i = i-1;
            Pay.Sum = Pay.Sum/10;
            Pay.AmountRest = Pay.AmountRest/10;
         end;
      end;
    elif( field_name == "VD" ) /* Дата валютирования */
      Pay.ValueDate = ДДММГГДата(field_value);
    elif ( field_name == "SH" )
      Pay.ShifrOper = field_value;
    elif( field_name == "CU" ) /* Вид активов */
      
      Pay.FIID = NATCUR;
    elif( field_name == "MT" )   /* Тип сообщения */
      Pay.MessageType = field_value;
    elif( field_name == "PN" )   /* Наименование плательщика */
      Pay.OrdCustomer.Name = field_value;
    elif( field_name == "SI" )   /* ИНН плательщика */
      Pay.OrdCustomer.INN = field_value;
    elif( field_name == "SA" )   /* Номер счета плательщика */
      Pay.OrdCustomer.Account = field_value;
    elif( field_name == "SF" )   /* Номер филиала плательщика */
      Pay.ReserveField1 = field_value;
    elif( field_name == "SB" )   /* Наименование банка плательщика */
      Pay.OrdBank.Name = field_value;
    elif( field_name == "SN" )   /* Код банка плательщика */
      Pay.OrdBank.CodeBank = field_value;
    elif( field_name == "SK" )   /* Доп. код банка плательщика */
      Pay.OrdBank.Account = field_value;
    elif( field_name == "SS" )   /* Код расчетной системы банка плательщика */
      CodeKind = ПолучитьВидКодаПоSBRF3( field_value );
      if( CodeKind )
        Pay.OrdBank.CodeKind = CodeKind;
      else
        std.msg( "|Не определен вид кода банка плательщика по коду расчетной системы: " + field_value );
        result = FALSE;
      end;
    elif( field_name == "IB" )   /* Наименование банка посредника */
      Pay.Intermediary.Name = field_value;
    elif( field_name == "IC" )   /* Код банка посредника */
      Pay.Intermediary.CodeBank = field_value;
    elif( field_name == "IK" )   /* Доп. код банка посредника */
      Pay.Intermediary.Account = field_value;
    elif( field_name == "IS" )   /* Код расчетной системы банка посредника */
      CodeKind = ПолучитьВидКодаПоSBRF3( field_value );
      if( CodeKind )
        Pay.Intermediary.CodeKind = CodeKind;
      else
        std.msg( "|Не определен вид кода банка посредника по коду расчетной системы: " + field_value );
        result = FALSE;
      end;
    elif( field_name == "RN" )   /* Наименование получателя */
      Pay.BnfCustomer.Name = field_value;
    elif( field_name == "RI" )   /* ИНН получателя */
      Pay.BnfCustomer.INN = field_value;
    elif( field_name == "RA" )   /* Номер счета получателя */
      Pay.BnfCustomer.Account = field_value;
    elif( field_name == "RF" )   /* Номер филиала получателя */
      Pay.ReserveField2 = field_value;
    elif( field_name == "BN" )   /* Наименование банка получателя  */
      Pay.AccBank.Name = field_value;
    elif( field_name == "BC" )   /* Код банка получателя */
      Pay.AccBank.CodeBank = field_value;
    elif( field_name == "BK" )   /* Доп. код банка получателя */
      Pay.AccBank.Account = field_value;
    elif( field_name == "RS" )   /* Код расчетной системы банка получателя */
      CodeKind = ПолучитьВидКодаПоSBRF3( field_value );
      if( CodeKind )
        Pay.AccBank.CodeKind = CodeKind;
      else
        std.msg( "|Не определен вид кода банка получателя по коду расчетной системы: " + field_value );
        result = FALSE;
      end;
    elif( field_name == "PP" ) /* Назначение платежа */
      Pay.Ground = field_value;
    elif( field_name == "MP" ) /* Информация участника */
      Pay.PartyInfo = field_value;
    elif( field_name == "SC" ) /* Условия перевода */
        Pay.ComissCharges = field_value;

      if ( SubStr( field_value, 2, 1 ) == "1" )
        Pay.PaymKind = "П";
      elif ( SubStr( field_value, 2, 1 ) == "2" )
        Pay.PaymKind = "Т";
      else
        Pay.PaymKind = "Э";
      end;
    elif( field_name == "SD" ) /* Срок платежа */
      Pay.PayDate = ДДММГГДата(field_value);
    elif( field_name == "IN" )   /* Информация о внесистемном документе */
      /* Номер клиентского документа */
      Pay.Number = TrimZero( Substr( field_value, 4, 6 ) );
      /* Дата приема документа от клиента */
      /* Pay.ClientDate = ДДММГГДата( Substr( field_value, 10, 6 ) ); */
      /* Очередность платежа */
      field_value = Substr( field_value, 16, 1 );
      if (field_value != "")
        Pay.Priority = int( field_value );
      end;      
    elif( field_name == "PT" )   /* Тип обслуживания */
      Pay.ServiceType = field_value;
    elif( field_name == "LD" )   /* Дата последней обработки */
      Pay.LastDate = ДДММГГДата(field_value);
    elif( field_name == "ST" )   /* Информация о первичном документе */
      Pay.Reference = field_value;
    elif( field_name == "ED" )   /* Дата окончания обслуживания */
      Pay.ClientDate = ДДММГГДата(field_value);
    elif( field_name == "DD" )   /* Дата отметки банка получателя */
      Pay.DateMarkRec = ДДММГГДата(field_value);
    elif( field_name == "DH" )   /* Списано со счета плательщика */
      Pay.DateChargeOffPayer = ДДММГГДата(field_value);
    elif( field_name == "DK" )   /* Дата помещения в картотеку */
      Pay.DateCI2 = ДДММГГДата(field_value);
    elif( field_name == "DO" )   /* Дата отметки банка плательщика */
      Pay.DateMarkPay = ДДММГГДата(field_value);
    elif( field_name == "KP" )
      Pay.OrdCustomer.KPP = field_value;
    elif( field_name == "KR" )
      Pay.BnfCustomer.KPP = field_value;
    elif( field_name == "NS" )
      Pay.TaxAuthorState = field_value;
      if ( Pay.TaxPmDate=="" )
         Pay.TaxPmDate = "0"; /* Если не заполнен тег ND, но есть NS, то 0 */
      end;
    elif( field_name == "NB" )
      Pay.BttTICode = field_value;
    elif( field_name == "NC" )
      Pay.OKATOCode = field_value;
    elif( field_name == "NO" )
      Pay.TaxPmGround = field_value;
    elif( field_name == "NP" )
      Pay.TaxPmPeriod = field_value;
    elif( field_name == "NN" )
      Pay.TaxPmNumber = field_value;
    elif( field_name == "ND" )
      Pay.TaxPmDate = ДатаДДpММpГГГГ( ДДММГГДата(field_value) );
    elif( field_name == "NE" )
      Pay.TaxPmDate = field_value;
    elif( field_name == "NT" )
      Pay.TaxPmType = field_value;
    elif( field_name == "QA" ) /* Сумма остатка платежа (частичная оплата) */         
      if ( Pay.TegDE==2 )
         Pay.AmountRest = money( field_value )/100 ;
      elif ( Pay.TegDE<2 )
         dblSum = doubleL( field_value )/100;
         i = Pay.TegDE;
         while( i<2 )
            i = i+1;
            dblSum = dblSum*10;
         end;
         Pay.AmountRest = money( dblSum );
      else
         dblSum = doubleL( field_value )/100;
         i = Pay.TegDE;
         while( i>2 )
            i = i-1;
            dblSum = dblSum/10;
         end;
         Pay.AmountRest = money( dblSum );
      end;
    elif( field_name == "QC" ) /* Шифр оплачиваемого документа */
      Pay.ShifrBasicDoc = field_value;
    elif( field_name == "QD" ) /* Дата оплачиваемого документа */
      Pay.DateBasicDoc = ДДММГГДата(field_value);
    elif( field_name == "QO" ) /* Номер частичной оплаты */
      Pay.CountPartPay = int(field_value);
    elif( field_name == "QN" ) /* Номер оплачиваемого платежа */
      Pay.NumberDoc = TrimZero(field_value);
    elif( field_name == "TD" ) /* условия представления */
      Pay.Representation = field_value;
    elif( field_name == "DU" ) /* дополнительные условия */
      Pay.AddCondition = field_value;
    elif( field_name == "AD" ) /* срок действия аккредитива */
      Pay.SrokDeist = field_value;
    elif( field_name == "AE" ) /* приложение к аккредитивум */
      Pay.AkkrAddDocs = SB_ДекодироватьШестнадцатирично(field_value);
    elif( field_name == "UO" ) 
      /* условия оплаты */
      Pay.PayCondition = ПолучитьУсловиеОплаты(field_value);
      /* покрытие */
      Pay.AkkrCover    = ПолучитьПокрытие(field_value);
      /* тип аккредитива */
      Pay.AkkrType = ПолучитьТипАккредитива(field_value);
      /* срок действия аккредитива */
      if(Pay.SrokDeist == "")
         Pay.SrokDeist = ПолучитьСрокАккредитива(field_value);
      end;
    end;
  end;

  if( not result )
    return result;
  end;

  if (Pay.OrdCustomer.INN == "0")
      Pay.OrdCustomer.INN="";
  end;
  
  if (Pay.BnfCustomer.INN == "0")
      Pay.BnfCustomer.INN = "";   
  end;
     
  if (Pay.TaxAuthorState!="") 
     if (Pay.BttTICode =="")
        Pay.BttTICode =   "0000000000000000000";
        FieldMes = FieldMes + " Код КБК,";
     end;
    if (Pay.OKATOCode == "")
        Pay.OKATOCode =   "0000000000";       
         FieldMes = FieldMes + " ОКАТО,";
    end;

    if (Pay.TaxPmGround == "" )
       Pay.TaxPmGround = "00";
       FieldMes = FieldMes + " Основание платежа,";
    end;
    if ( Pay.TaxPmGround == "")
       Pay.TaxPmGround = "00000000";
       FieldMes = FieldMes + " Налоговый период,";
    end;
    if (Pay.TaxPmNumber == "")
       Pay.TaxPmNumber = "000000000000000";
       FieldMes = FieldMes + " Налоговый номер";
    end;
    if (Pay.TaxPmDate == "")
      Pay.TaxPmDate =   "000000";
      FieldMes = FieldMes + " Дата,";
    end;
    if (Pay.TaxPmType == "")
      Pay.TaxPmType =   "00";
      FieldMes = FieldMes + " Тип платежа,";
    end;

    if (strlen(FieldMes)>0)
      // Удалим последнюю запятую
      FieldMes = substr(FieldMes,1,strlen(FieldMes)-1);
      // Теперь в конце мы выведем то что было заменено
      println (
           string("Принят ошибочно оформленный документ № "+substr(FieldMes,17,6) 
           +" от " +  substr(FieldMes,1,6) + " на сумму " + Money(Pay.Sum)
           +",номер счета плательщика " + Pay.OrdCustomer.Account + ", номер счета получателя "
           +Pay.BnfCustomer.Account + ".Поля документа: " +FieldMes+ " заполнены нулями."
              ));
    end;
  end;   
  
  /* Банк Приказодателя */
  if( Pay.OrdBank.IsSet() )
    if( Pay.OrdBank.SetBank() == -1)
      std.msg( Pay.OrdBank.GetErrMsg("банк плательщика") );
      return false;
    end;
  end;
  
  /* Участник - отправитель */
  if( Pay.Sender.IsSet() )
    if( Pay.Sender.SetBank() == -1)
      std.msg( Pay.Sender.GetErrMsg("участник - отправитель") );
      return false;
    end;
  end;

  /* Участник - получатель */
  if( Pay.Receiver.IsSet() )
    if( Pay.Receiver.SetBank() == -1)
      std.msg( Pay.Receiver.GetErrMsg("участник - получатель") );
      return false;
    end;
  end;

  /* Посредник */
  if( Pay.Intermediary.IsSet() )
    if( Pay.Intermediary.SetBank() == -1)
      std.msg( Pay.Intermediary.GetErrMsg("банк посредник") );
      return false;
    end;
  end;

  /* Банк получатель */
  if( Pay.AccBank.IsSet() )
    if( Pay.AccBank.SetBank() == -1)
      std.msg( Pay.AccBank.GetErrMsg("банк получатель") );
      return false;
    end;
  end;

  /* Нулевые даты заполняем сроком платежа */
  if( Pay.ValueDate == date(0,0,0) )
    Pay.ValueDate       = Pay.PayDate;
    Pay.ValueDateNotSet = true;
  end;
  
  if( Pay.ClientDate == date(0,0,0) )
    Pay.ClientDate       = Pay.PayDate;
    Pay.ClientDateNotSet = true;
  end;

  /* Тип документа */
  if( Pay.TypeDocument == "" )
    if( f_wlmesfrm.Name == sign_0B1 ) /* Платежное поручение, платежный ордер */
      Pay.TypeDocument = type_001;
    elif( f_wlmesfrm.Name == sign_0B2 ) /* Платежное требование */
      Pay.TypeDocument = type_002;
    elif( f_wlmesfrm.Name == sign_0B3 ) /* Платежное требование-поручение */
      Pay.TypeDocument = type_003;
    elif( f_wlmesfrm.Name == sign_0B4 ) /* Дебетовое авизо */
      Pay.TypeDocument = type_004;
    elif( f_wlmesfrm.Name == sign_0B5 ) /* Кредитовое авизо, платежный ордер */
      Pay.TypeDocument = type_005;
    end;
  end;

  /* Признак дебета/кредита */
  if( (Pay.TypeDocument == type_001) OR (Pay.TypeDocument == type_005) )
    Pay.Credit = TRUE;
  else
    Pay.Credit = FALSE;
  end;

  if(Pay.TypeDocument == type_004) 
    Pay.AcceptTerm = PM_DEMAND_TERM_WITHOUTACCEPT;
    Pay.Accept     = PM_DEMAND_ACCEPT_NONE;
  elif(Pay.TypeDocument == type_003) 
    Pay.AcceptTerm = PM_DEMAND_TERM_ACCEPT;
    Pay.Accept     = PM_DEMAND_ACCEPT_WAIT;
  end;

  /* Шифр операции */
  if( Pay.ShifrOper=="" )
    if( Pay.TypeDocument == type_001 ) /* Платежное поручение, платежный ордер */
/*      if( Pay.SubTypeDocument == sub_type_4 )
        Pay.ShifrOper = "16";    /* Платежный ордер */
      elif( Pay.SubTypeDocument == sub_type_5 )
        Pay.ShifrOper = "08";    /* Аккредитив */
      elif( Pay.SubTypeDocument == sub_type_8 )
        Pay.ShifrOper = "06";    /* Инкассовое поручение */
      elif( Pay.SubTypeDocument == sub_type_9 )
        Pay.ShifrOper = "02";
      else
*/
        Pay.ShifrOper = "01";    /* Платежное поручение */
/*      end;*/
    elif( Pay.TypeDocument == type_002 ) /* Платежное требование */
      Pay.ShifrOper = "02";
    elif( Pay.TypeDocument == type_003 ) /* Платежное требование-поручение */
      Pay.ShifrOper = "05";
    elif( Pay.TypeDocument == type_004 ) /* Дебетовое авизо */
      Pay.ShifrOper = "12";
    elif( Pay.TypeDocument == type_005 ) /* Кредитовое авизо, платежный ордер */
/*
      if( Pay.SubTypeDocument == sub_type_4 )
        Pay.ShifrOper = "16";    /* Платежный ордер */
      elif( Pay.SubTypeDocument == sub_type_5 )
        Pay.ShifrOper = "08";    /* Аккредитив */
      elif( Pay.SubTypeDocument == sub_type_6 )
        Pay.ShifrOper = "09";    /* Мемориальный ордер */
      elif( Pay.SubTypeDocument == sub_type_8 )
        Pay.ShifrOper = "06";    /* Инкассовое поручение */
      elif( Pay.SubTypeDocument == sub_type_9 )
        Pay.ShifrOper = "02";   
      else
        Pay.ShifrOper = "12";    /* Кредитовое авизо */
      end;
*/
       Pay.ShifrOper = "01";    /* Кредитовое авизо */
    end;
  end;

  return result;
end; /* ToMakePayment */

/* Генерация платежей по ответным сообщениям СБРФ */
macro GenDocExec( IsPIB )
  var error, CorrID, CorrCodeKind, CorrCodeBank;

  /*  Очищаем структуры платежа */
  ClearRecord(wlpmpaym);
  ClearRecord(wlpmrmprop);  
  ClearRecord(wlpmdemand);
  ClearRecord(wl_akkr);

  InitPMPROP(wlpmpropdeb);
  InitPMPROP(wlpmpropcred);

  /* Предварительное заполнение класса Pay на отснове ответного сообщения */
  if( not ToMakePayment( IsPIB ) )
    return FALSE;
  end;

  /* Заполнение учетных буферов RS-Bank */
  wlpmpaym.PayerAccount          = Pay.OrdCustomer.Account;
  wlpmpaym.ReceiverAccount       = Pay.BnfCustomer.Account;
  wlpmpaym.Amount                = Pay.Sum;
  wlpmpaym.PayAmount             = Pay.Sum;
  wlpmpaym.BaseAmount            = Pay.Sum;
  wlpmpaym.ValueDate             = Pay.ValueDate;
  wlpmpaym.FIID                  = Pay.FIID;
  wlpmpaym.PayFIID               = Pay.FIID;
  wlpmpaym.BaseFIID              = Pay.FIID;
  wlpmpaym.PayerMesBankID        = Pay.Sender.PartyID;
  wlpmpaym.ReceiverMesBankID     = Pay.Receiver.PartyID;
  wlpmpaym.ReceiverBankMarkDate  = Pay.DateMarkRec;
  wlpmpaym.I2PlaceDate           = Pay.DateCI2;
  wlpmpaym.PayerBankMarkDate     = Pay.DateMarkPay;
  wlpmpaym.PartPaymRestAmountMain = Pay.AmountRest;
  wlpmpaym.PartPaymShifrMain     = Pay.ShifrBasicDoc;
  wlpmpaym.PartPaymDateMain      = Pay.DateBasicDoc;
  wlpmpaym.PartPaymNumber        = Pay.CountPartPay;
  wlpmpaym.PartPaymNumMain       = Pay.NumberDoc;

  if( Pay.Credit )
    /* Если указан банк приказодателя (банк-плательщик) */
    if( Pay.OrdBank.IsSet() )
      CorrID       = Pay.OrdBank.PartyID;
      CorrCodeKind = Pay.OrdBank.CodeKind;
      CorrCodeBank = Pay.OrdBank.CodeBank;
      if ( CorrID < 0 )
         std.msg( "Не найден банк-плательщик с кодом " +
                  Pay.OrdBank.CodeBank + " и видом кода " + Pay.OrdBank.CodeKind);
         return FALSE;
      end;
    else
      CorrID       = wlmes.OutsideAbonentID;
      CorrCodeKind = Pay.Sender.CodeKind;
      CorrCodeBank = Pay.Sender.CodeBank;
    end;                    
  else
    /* Если указан банк бенефициара (банк-получатель) */
    if( Pay.AccBank.IsSet() )    
      CorrID       = Pay.AccBank.PartyID;
      CorrCodeKind = Pay.AccBank.CodeKind;
      CorrCodeBank = Pay.AccBank.CodeBank;
      if ( CorrID < 0 )
         std.msg( "Не найден банк-получатель с кодом " +
                  Pay.AccBank.CodeBank + " и видом кода " + Pay.AccBank.CodeKind);
         return FALSE;
      end;
    else
      CorrID       = wlmes.OutsideAbonentID;
      CorrCodeKind = Pay.Receiver.CodeKind;
      CorrCodeBank = Pay.Receiver.CodeBank;
    end;
  end;                      

  /* Реквизиты платежа, характерные для R-макета */
  wlpmrmprop.Number                = Pay.Number;
  wlpmrmprop.Reference             = Pay.Reference;
  wlpmrmprop.PayDate               = Pay.PayDate;
  wlpmrmprop.Date                  = Pay.PayDate;
  wlpmrmprop.ClientDate            = Pay.ClientDate;
  wlpmrmprop.PayerBankName         = Pay.OrdBank.Name;
  wlpmrmprop.PayerCorrAccNostro    = Pay.OrdBank.Account;
  wlpmrmprop.PayerName             = Pay.OrdCustomer.Name;
  wlpmrmprop.PayerINN              = ConstructINN(Pay.OrdCustomer.INN,Pay.OrdCustomer.KPP);
  wlpmrmprop.ReceiverBankName      = Pay.AccBank.Name;
  if ( Pay.ReceiverCorrAccNostro!="" )
     wlpmrmprop.ReceiverCorrAccNostro = Pay.ReceiverCorrAccNostro;
  else
     wlpmrmprop.ReceiverCorrAccNostro = Pay.AccBank.Account;
  end;
  wlpmrmprop.ReceiverName          = Pay.BnfCustomer.Name;
  wlpmrmprop.ReceiverINN           = ConstructINN(Pay.BnfCustomer.INN, Pay.BnfCustomer.KPP);
  wlpmrmprop.Ground                = Pay.Ground;
  wlpmrmprop.Priority              = Pay.Priority;
  wlpmrmprop.MessageType           = Pay.MessageType;
  wlpmrmprop.PartyInfo             = Pay.PartyInfo;
  wlpmrmprop.PaymentKind           = Pay.PaymKind;
  wlpmrmprop.ProcessKind           = " 1";
  wlpmrmprop.ShifrOper             = Pay.ShifrOper;
  if(Pay.ComissCharges)
  wlpmrmprop.ComissCharges         = Pay.ComissCharges;
  end;
  wlpmrmprop.PayerChargeOffDate    = Pay.DateChargeOffPayer;
  wlpmrmprop.TaxAuthorState        = Pay.TaxAuthorState;
  wlpmrmprop.BttTICode             = Pay.BttTICode;
  wlpmrmprop.OKATOCode             = Pay.OKATOCode;
  wlpmrmprop.TaxPmGround           = Pay.TaxPmGround;
  wlpmrmprop.TaxPmPeriod           = Pay.TaxPmPeriod;
  wlpmrmprop.TaxPmNumber           = Pay.TaxPmNumber;
  wlpmrmprop.TaxPmDate             = Pay.TaxPmDate;
  wlpmrmprop.TaxPmType             = Pay.TaxPmType;
  
  if(Pay.MessageType == "137")  //Срочное
    wlpmrmprop.Instancy = 1;
  elif(Pay.MessageType == "139") //Срочное с уведомлением
    wlpmrmprop.Instancy = 1;
    wlpmrmprop.NeedNotify = "X";
  end;

  if(Pay.ShifrOper = "08"   /* Аккредитив */)
     /* условия представления */
     if( Pay.Representation )
        wl_akkr.Representation = Pay.Representation; 
     end;  
     /* дополнительные условия */
     if( Pay.AddCondition )
        wl_akkr.AddCondition   = Pay.AddCondition;
     end;  
     /* условия оплаты */
     if( Pay.PayCondition )
        wl_akkr.PayCondition   = Pay.PayCondition;
     end;  
     wl_akkr.Type = ПроставитьОтзывностьИПокрытие2(Pay.AkkrType,Pay.AkkrCover);

     /* счет получателя */
     if( Pay.ReceiverCorrAccNostro )
        wl_akkr.AccRealReceiver = Pay.ReceiverCorrAccNostro;
     end;  
     /* Срок действия аккредитива */
     if( Pay.SrokDeist )
        wl_akkr.Date = ДДММГГДата(Pay.SrokDeist);
     end;
  end;

  /* Если кредитовый - заполняем свойства дебета */
  if( Pay.Credit )
    wlpmpaym.PayerBankID    = CorrID;

    wlpmpropdeb.CodeKind  = CorrCodeKind;
    wlpmpropdeb.BankCode  = CorrCodeBank;
    wlpmpropdeb.PayFIID   = wlpmpaym.PayFIID;
    wlpmpropdeb.TransferDate = Pay.PayDate;
    wlpmpropdeb.SettlementSystemCode = wlmes.TRN;
    wlpmpropdeb.Corschem = ПолучитьКорсхемуПоУмолчанию( wlmes.OutsideAbonentID, wlpmpropdeb.PayFIID, 1, "К", -1, -1, 0, -1, "", NULL, false, wlmes.TpSchemID);
    wlpmpropdeb.CorrPosType = PM_CORRPOS_TYPE_USER;

    if( Pay.AccBank.IsSet() )
       wlpmpaym.ReceiverBankID = Pay.AccBank.PartyID;

       wlpmpropcred.CodeKind = Pay.AccBank.CodeKind;
       wlpmpropcred.BankCode = Pay.AccBank.CodeBank;
       wlpmpropcred.PayFIID  = wlpmpaym.PayFIID;
       wlpmpropcred.TransferDate = Pay.PayDate;

       ПользовательскаяДоработкаПлатежа( wlmes, wlpmpaym, wlpmpropdeb, wlpmpropcred, wlpmrmprop );
       if(Pay.ShifrOper = "08"   /* Аккредитив */)
          if( not ВставитьПлатеж( wlpmpaym, wlpmpropdeb, wlpmpropcred, wlpmrmprop, PRT_Credit, 0, wl_akkr, Pay.AkkrAddDocs ) )
             std.msg("Ошибка при сохранении платежа");
             return FALSE;
          end;
       else
       if( not ВставитьПлатеж( wlpmpaym, wlpmpropdeb, wlpmpropcred, wlpmrmprop ) )
         std.msg("Ошибка при сохранении платежа");
         return FALSE;
       end;
       end;
    else
       wlpmpaym.ReceiverBankID = {OurBank};
       ПользовательскаяДоработкаПлатежа( wlmes, wlpmpaym, wlpmpropdeb, 0, wlpmrmprop );
       if(Pay.ShifrOper = "08"   /* Аккредитив */)
          if( not ВставитьПлатеж( wlpmpaym, wlpmpropdeb, 0, wlpmrmprop, PRT_Credit, 0, wl_akkr, Pay.AkkrAddDocs ) )
             std.msg("Ошибка при сохранении платежа");
             return FALSE;
          end;
       else
       if( not ВставитьПлатеж( wlpmpaym, wlpmpropdeb, 0, wlpmrmprop ) )
         std.msg("Ошибка при сохранении платежа");
         return FALSE;
       end;
    end;    
    end;    
  else    
    wlpmpaym.ReceiverBankID = CorrID;

    wlpmpropcred.CodeKind = CorrCodeKind;
    wlpmpropcred.BankCode = CorrCodeBank;
    wlpmpropcred.PayFIID  = wlpmpaym.PayFIID;
    wlpmpropcred.TransferDate = Pay.PayDate;
    wlpmpropcred.SettlementSystemCode = wlmes.TRN;
    wlpmpropcred.Corschem = ПолучитьКорсхемуПоУмолчанию( wlmes.OutsideAbonentID, wlpmpropcred.PayFIID, 1, "Д", -1, -1, 0, -1, "", NULL, false, wlmes.TpSchemID);
    wlpmpropcred.CorrPosType = PM_CORRPOS_TYPE_USER;

    if((Pay.TypeDocument == type_004) OR (Pay.TypeDocument == type_003))
      wlpmdemand.AcceptTerm = Pay.AcceptTerm;
      wlpmdemand.Accept     = Pay.Accept;
    end;  
    
    if( Pay.OrdBank.IsSet() )
       wlpmpaym.PayerBankID    = Pay.OrdBank.PartyID;

       wlpmpropdeb.CodeKind  = Pay.OrdBank.CodeKind;
       wlpmpropdeb.BankCode  = Pay.OrdBank.CodeBank;
       wlpmpropdeb.PayFIID   = wlpmpaym.PayFIID;
       wlpmpropdeb.TransferDate = Pay.PayDate;

       ПользовательскаяДоработкаПлатежа( wlmes, wlpmpaym, wlpmpropdeb, wlpmpropcred, wlpmrmprop );

       if( not ВставитьПлатеж( wlpmpaym, wlpmpropdeb, wlpmpropcred, wlpmrmprop, PRT_Debet , wlpmdemand) )
         std.msg("Ошибка при сохранении платежа");
         return FALSE;
       end;
    else
       wlpmpaym.PayerBankID    = {OurBank};
       ПользовательскаяДоработкаПлатежа( wlmes, wlpmpaym, 0, wlpmpropcred, wlpmrmprop);       

       if( not ВставитьПлатеж( wlpmpaym, 0, wlpmpropcred, wlpmrmprop, PRT_Debet , wlpmdemand) )
         std.msg("Ошибка при сохранении платежа");
         return FALSE;
       end;
    end;    
  end;

  /* Вставляем примечание - тип обслуживания */
  if( Pay.ServiceType != "" )
    if( not ВставитьПримечание( PM_NOTEKIND_SBRFSERVICETYPE, Pay.ServiceType ) )
      std.msg("Ошибка при вставке примечания платежа" );
      return FALSE;
    end;
  end;

  /* Вставляем примечание - номер филиала плательщика */
  if( Pay.ReserveField1 != "" )
    if( not ВставитьПримечание( PM_NOTEKIND_SBRFRESERVEFIELD1, Pay.ReserveField1 ) )
      std.msg("Ошибка при вставке примечания платежа" );
      return FALSE;
    end;
  end;

  /* Вставляем примечание - номер филиала получателя */
  if( Pay.ReserveField2 != "" )
    if( not ВставитьПримечание( PM_NOTEKIND_SBRFRESERVEFIELD2, Pay.ReserveField2 ) )
      std.msg("Ошибка при вставке примечания платежа" );
      return FALSE;
    end;
  end;

  /* Вставляем примечание - дата последней обработки */
  if( Pay.LastDate != date(0,0,0) )
    if( not ВставитьПримечание( PM_NOTEKIND_SBRFLASTDATE, Pay.LastDate ) )
      std.msg("Ошибка при вставке примечания платежа" );
      return FALSE;
    end;
  end;  

  /* Вставляем примечание - дата валютирования рассчитана автоматически */
  if( Pay.ValueDateNotSet == true )
    if( not ВставитьПримечание( PM_NOTEKIND_SBRFVALUEDATEAUTO, "X" ) )
      std.msg("Ошибка при вставке примечания платежа" );
      return FALSE;
    end;
  end;  

  /* Вставляем примечание - дата приема документа от клиента рассчитана автоматически */
  if( Pay.ClientDateNotSet == true )
    if( not ВставитьПримечание( PM_NOTEKIND_SBRFCLIENTDATEAUTO, "X" ) )
      std.msg("Ошибка при вставке примечания платежа" );
      return FALSE;
    end;
  end;  

  return TRUE;

  OnError(er) /* Обработка ошибок времени выполонения */
    ExeptionMessage(er);
    return FALSE;
end;

/* Релиз 0B5 */
macro GenDoc( addrMes )

  SetBuff( wlmes, addrMes );

  PrintLog(2,"Генерация платежа по форме 0B4-0B5");
  
  return GenDocExec( false );
end;

/* Релиз 0B5J */
macro GenDocPIB( addrMes )

  SetBuff( wlmes, addrMes );

  PrintLog(2,"Генерация платежа по форме 0B4J-0B5J");

  return GenDocExec( true );
end;
