/****************************************************************************/
/*                   R-Style SoftWare Lab, RS-Bank 5.1                      */
/****************************************************************************/
/*                  Подсистема "Межбанковские расчеты"                      */
/*                      Импорт  сообщений  СМБР                             */
/*                                                                          */
/*  Имя файла: wlsbrfin.mac                                                 */
/*  Создан:  03.03.00                                         AAV           */
/****************************************************************************/
/*Зубко С. 01.02.2011
  Явно прописал, что сообщение получаем от Саратовского ОСБ (5486220000), 
  так как справочника отделений СБ РФ в RS-Bank нет.
  AgentID = ПолучитьКодСубъекта( "5486220000", PTCK_CLIRING, error );*/


import "wlsblist.mac", "cb_sql.mac", cryptdlm, oralib, likepy;

const CONTEXTID_INSERT_SIGN_SBRF3 = "ТранспортМБР|4|Макрос";

/***************************************************************************/
/*  Функция считывания этикетки файла с SBRF сообщением                    */
/***************************************************************************/
macro СчитатьЭтикетку( Отправитель, Получатель, ТипСообщения )
  var строка, длина, error;

  /* Считываем загловок */
  длина = strlen( FileSBRF3Head );
  if ( длина>strlen(FileSBRFListHead) )
     длина = strlen(FileSBRFListHead);
  end;
  строка = СчитатьБлок( длина );
  if( (длина == КонецФайла) OR (длина == 0) OR 
      ( (строка!=substr(FileSBRF3Head,1,длина)) AND
        (строка!=substr(FileSBRFListHead,1,длина)) ) )
    ErrImport( "Этикетка - Не найден заголовок сообщения" );
    return FALSE;
  end;

  if ( (строка==substr(FileSBRF3Head,1,длина)) AND 
       (длина<strlen(FileSBRF3Head)) )
     длина = strlen(FileSBRF3Head)-длина;
     строка = строка + СчитатьБлок( длина );
     if( (длина == КонецФайла) OR (длина == 0) OR (строка!=FileSBRF3Head) )
        ErrImport( "Этикетка - Не найден заголовок сообщения" );
        return FALSE;
     else
        setparm( 2, SBRF3_TYPE );
     end;
  end;

  if ( (строка==substr(FileSBRFListHead,1,длина)) AND 
       (длина<strlen(FileSBRFListHead)) )
     длина = strlen(FileSBRFListHead)-длина;
     строка = строка + СчитатьБлок( длина );
     if( (длина == КонецФайла) OR (длина == 0) OR (строка!=FileSBRFListHead) )
        ErrImport( "Этикетка - Не найден заголовок сообщения" );
        return FALSE;
     else
        setparm( 2, STLIST_TYPE );
     end;
  end;

  /* Считываем получателя */
  длина = SB_abonent_len;
  строка = СчитатьБлок( длина );
  if( (длина == КонецФайла) OR (длина == 0) )
    ErrImport( "Этикетка - Неверный получатель сообщения" );
    return FALSE;
  else
    SetParm( 1, строка );
  end;

  /* Считываем отправителя - до конца строки */
  длина = ДлинаСтроки;
  строка = СчитатьСтроку( длина );
  if( (длина == КонецФайла) OR (длина == 0) )
    ErrImport( "Этикетка - Не задан отправитель сообщения" );
    return FALSE;
  else
    SetParm( 0, SubStr(строка, 1, SB_abonent_len) );
  end;

  return TRUE;
end;

macro СчитатьСигнатуру(Сигнатура)
  var pos, длина;
  pos = 1;
  длина = SB_sign_len;
  Сигнатура = SubStr( СчитаннаяСтрока, pos, длина );
  if( Сигнатура == "" )
    ErrImport( "Идентификатор - Не найдена сигнатура сообщения" );
    return FALSE;
  end;

  pos = pos + длина;
  СчитаннаяСтрока = SubStr( СчитаннаяСтрока, pos );

  SetParm(0,Сигнатура);
  return TRUE;
end;

/* Считать идентификаторы сообщения */
macro СчитатьИдентификатор( ДатаСоздания, Создатель, НомерДокумента )
  var pos, длина, str;

  pos = 1;
  НомерДокумента = SubStr( СчитаннаяСтрока, pos, SB_date_len + SB_creator_len + SB_number_len );
  
  длина = SB_date_len;
  str = SubStr( СчитаннаяСтрока, pos, длина );
  if( str == "" )
    ErrImport( "Идентификатор - Не найдена Дата Создания" );
    return FALSE;
  end;
  ДатаСоздания = ДДММГГДата( str );

  pos = pos + длина;
  длина = SB_creator_len;
  Создатель = SubStr( СчитаннаяСтрока, pos, длина );
  if( Создатель == "" )
    ErrImport( "Идентификатор - Не найден Участник - создатель" );
    return FALSE;
  end;

  pos = pos + длина;
  длина = SB_number_len;

  pos = pos + длина;
  СчитаннаяСтрока = SubStr( СчитаннаяСтрока, pos );
  
  SetParm(0,ДатаСоздания);
  SetParm(1,Создатель);
  SetParm(2,НомерДокумента);

  return TRUE;
end;

macro СчитатьИдентификатор0SA( Отправитель, ДатаСоздания, НомерДокумента, СсылкаНаДокумент, СигнатураДокумента )
  var pos, str;
  pos = 1;
  СигнатураДокумента = SubStr( СчитаннаяСтрока, pos, SB_sign_len );
  pos = pos + SB_sign_len;
  СсылкаНаДокумент = SubStr( СчитаннаяСтрока, pos, SB_date_len + SB_creator_len + SB_number_len );
  НомерДокумента = string( Отправитель, СсылкаНаДокумент );
  str = SubStr( СчитаннаяСтрока, pos, SB_date_len );
  if( str == "" )
    ErrImport( "Идентификатор - Не найдена Дата Создания" );
    return FALSE;
  end;
  ДатаСоздания = ДДММГГДата( str );  
  SetParm(1,ДатаСоздания);
  SetParm(2,НомерДокумента);
  SetParm(3,СсылкаНаДокумент);
  SetParm(4,СигнатураДокумента);
  return true;
end;

/* прочитать текстовый блок неизвестной формы */
/* 0 - OK  */
/* 1 - EOF */
macro ReadUnknownMsg()
  std.out(2, СчитаннаяСтрока );
  return 0;
end;

/* Выбираем параметр обмена в соответствии со способом хранения полей релиза */
macro ВыбратьПараметрОбмена( RlsName, Suffix )
  std.out(3, "             ",suffix );
  if( substr( RlsName, strlen(RlsName)-strlen(Suffix)+1,strlen(Suffix))==Suffix )
    std.out(3, "     TRUE        " + RlsName );
    return TRUE;
  else
    std.out(3, "     FALSE       " + RlsName + " Must be" + RlsName + Suffix );
    return FALSE;
  end;
end;

/* Проверка принадлежности элемента массиву */
macro ElemInArr( arr, elem )
   var i = 0;
   while ( i < arr.Size)
       if (arr.Value(i) == elem )
           return TRUE;
       end;
       i  = i + 1;
   end;
   return FALSE;
end;

/* Считывание и запись сообщения и его полей */
macro СчитатьБлокЦелевойИнформации
( 
  Сигнатура, 
  Отправитель, 
  Получатель, 
  ДатаСоздания, 
  Создатель, 
  НомерДокумента, 
  СсылкаНаДокумент, 
  ТипСообщения, 
  IsPIB:bool, 
  AddSign:bool 
)
  var continue0, НомерФормы = 0, result, stat, AgentID, oldKey, sqltmp;
  var кодПоля, ЗначениеПоля; /* Содержимое текущего поля */
  var OutsideAbonentID, РелизФормы, TpShemID, error, ВидСообщения, Ключ, InsideAbonentID, Suffix = "";  
  var pos, Сумма = $0, Валюта = "", count = 0, rsms;
  var tags = TArray; /*массив считанных тегов*/
  var CryptoAPI = RsCryptoAPI();
  var rs:object;
  var select:string;
  var params:TArray;

  std.out(1,"Прочитано сообщение: сигнатура "+Сигнатура+" от "+Отправитель
            + " датой " + ДатаСоздания + " номер " + НомерДокумента );
  
  if ( (Сигнатура==sign_0SA) and (substr(СчитаннаяСтрока,26,2)!="00") )
     НомерФормы = ОпределитьФорму( Транспорт, sign_0SAERR, ВидСообщения );
     if( НомерФормы == -1 )
        Сигнатура = sign_0SAERR;
     end;
  else
     
     НомерФормы = ОпределитьФорму( Транспорт, Сигнатура, ВидСообщения );
  end;
  if( НомерФормы == -1 )
     SetParm( 1, НомерФормы );
     ErrImport( string("Не определен номер формы - ",Сигнатура,", сообщение игнорируется ",Транспорт," ", Сигнатура," ",ВидСообщения) );
     return ReadUnknownMsg();
  end;

  /* При импорте сообщений с объединенными полями ищем релиз с суффиксом "J" */
  if( (IsPIB == true) AND (ТипСообщения != STLIST_TYPE) AND (Сигнатура!=sign_0SA) )
    Suffix = "J";
  end;
  
  TpShemID = ОпределитьТранспортнуюСхемуПоКоду( Отправитель, ВидКодаТранспорта, 
                                                Отправитель, ВидКодаТранспорта, 
                                                Получатель, ВидКодаТранспорта, 
                                                Транспорт, НомерФормы, РелизФормы,
                                                "ВыбратьПараметрОбмена", Suffix, wlsess.TpFrmtID );
  if( TpShemID == -1 )
    ErrImport( string("Не определена транспортная схема") );
    return -1;
  end;  

  /* Определим отправителя */
  OutsideAbonentID = ПолучитьКодСубъекта( Отправитель, ВидКодаТранспорта, error );
  if( error )
    ErrImport( string("Не определен отправитель сообщения по коду субъекта: ", Отправитель ));
    return -1;
  end;

  if( OutsideAbonentID == {OurBank} )
     OutsideAbonentID = {OurBank};
  end;

  /* Определим создателя */
  if ( Сигнатура!=sign_0SA )
     /*AgentID = ПолучитьКодСубъекта( Создатель, PTCK_CLIRING, error );*/
     /*Зубко Явно прописал, что сообщение получаем от Саратовского ОСБ (5486220000), 
       так как справочника отделений СБ РФ в RS-Bank нет.*/
     AgentID = ПолучитьКодСубъекта( "5486220000", PTCK_CLIRING, error );
     if( error )
       ErrImport( string("Не определен создатель сообщения по коду субъекта: ", Создатель ));
       return -1;
     end;

     if( AgentID == {OurBank} )
        AgentID = {OurBank};
     end;
  end;

  InsideAbonentID = ПолучитьКодСубъекта( Получатель, ВидКодаТранспорта, error );
  if( error )
    ErrImport( string("Не определен получатель сообщения по коду субъекта: ", Отправитель ));
    return -1;
  end;

  /* Если уже было такое сообщение от корреспондента - не закачиваем */
  /* Пропускаем подтверждения на платежи, находящиеся в картотеке у корреспондента, */
  /* поскольку ранее было получено подтверждение отказа */
  select = "select mes.t_RlsFormID from dwlmes_dbt mes "+
           "where  mes.t_Direct='X' and "
                  "mes.t_Department =:OperD and "+ 
                  "mes.t_TRN =:NumberDoc and "+
                  "mes.t_OutsideAbonentID = :OutsideAbonentID and "+
                  "mes.t_OutsideAbonentDate = :DataCreate";  
  params = makeArray( SQLParam("OperD",            {OperDprt}),
                      SQLParam("NumberDoc",        НомерДокумента),
                      SQLParam("OutsideAbonentID", OutsideAbonentID),  
                      SQLParam("DataCreate",       ДатаСоздания));  

  rs = execSQLselect( select, params, FALSE );

  continue0 = rs.MoveNext();
  while( continue0 )
    if( rs.value(0) == РелизФормы )
        std.out( 1, "Cообщение уже было принято - игнорируется" );
        if ( ТипСообщения==STLIST_TYPE )
           /* Если выписка надо прервать работу */
           return 3;
        else
           return 0;
        end;
    end;
    continue0 = rs.MoveNext();
  end;

  ClearRecord( wlmes );
  wlmes.TpSchemID           = TpShemID;
  wlmes.RlsFormID           = РелизФормы;
  wlmes.Kind                = ВидСообщения;
  wlmes.TRN                 = НомерДокумента;
  wlmes.RelatedRef          = СсылкаНаДокумент;
  wlmes.OutsideAbonentDate  = ДатаСоздания;
  if ( Сигнатура!=sign_0SA )     
     wlmes.AgentID             = AgentID;
  end;
  wlmes.OutsideAbonentID    = OutsideAbonentID;
  wlmes.InsideAbonentID     = InsideAbonentID;  
  /* Если есть настройка МППК и сообщения по данной форме подписываются, то проставляем признак в сообщение */
  if( (AddSign == true) AND SB_FormNeedSing(Сигнатура) )
    wlmes.Signed = SET_CHAR;
  end;
  /* Подкачиваем коды субъектов  */
  FillMesCode( TRANSP_SMBR, wlmes );
    
  if( not СоздатьЗапись( wlmes ) )
    ErrImport( "Невозможно создать запись по форме: " + Сигнатура );
    return -1;
  end;

  /* Считываем и сохраняем ЭЦП сообщения */
  if( (AddSign == true) AND SB_FormNeedSing(Сигнатура) )
    if( ReadFieldSBRF3( Ключ, SB_Tag_KeyField, СчитаннаяСтрока ) )
      rsms = RsbMessage( wlmes.MesID );
      if( not CryptoAPI.InsertExternal( CONTEXTID_INSERT_SIGN_SBRF3, rsms, Ключ, "", 0 ))
        ErrImport( String("Ошибка при сохранении ЭЦП сообщения c номером ", НомерДокумента, "|", GetErrMsg()) );
        return -1;
      end;
    else
       ErrImport( String("В сообщениии с номером ",  НомерДокумента, "  не задан ключ (тэг \'", SB_Tag_KeyField, "')" ) );
       return -1;
    end;  
  end;

  /* Записывем поля сообщения */
  if( ТипСообщения==STLIST_TYPE )   /* Выписка, поля хранятся в отдельных тэгах */  
    result = ПрочитатьПоляВыписки();
  elif( (IsPIB == true) OR (Сигнатура==sign_0SA) )             /* Все поля сообщения хранятся в одном поле */
    if( not ОбработатьПоле( SB_Tag_PIB, СчитаннаяСтрока ) )
      ErrImport("Не обработали поле: " + SB_Tag_PIB);
      result = -1;
    else
      if( ВидСообщения == MESKIND_PAYMENT )
         if ( index(СчитаннаяСтрока, "|MT3:137|") or index(СчитаннаяСтрока, "|MT3:139|"))
            /* Срочное сообщение */
            wlmes.Importance = 1;
            if( not ОбновитьЗапись( wlmes ) )
              ErrImport( "Невозможно обновить запись по форме: " + Сигнатура );
              return -1;
            end;
         end;
         // Для платежей заполняем в отчете сумму и валюту
         pos = index(СчитаннаяСтрока, "|AM17:");
         Сумма = moneyL(SubStr(СчитаннаяСтрока, pos + 6, 17));
         pos = index(СчитаннаяСтрока, "|CU3:");
         Валюта = SubStr(СчитаннаяСтрока, pos + 5, 3);
      end;

      result = 0;
    end;    
  else                              /* Поля хранятся в отдельных тэгах */    
    continue0 = 1;
    /* Последовательно читаем поля сообщения */
    while( continue0 )
       stat = SB_СчитатьПолеИзСообщения( кодПоля, ЗначениеПоля, СчитаннаяСтрока );
       if( stat == 1 )
          result = 0;
       elif( stat == 2 )
          ErrUnknownField( кодПоля );
          result = -1;
       elif( stat == 3 )
          ErrImport("Неожиданный конец файла");
          result = -1;
       elif( stat == 4 )
          ErrImport("Неверный формат поля");
          result = -1;
       elif( stat == 5 )
          result = 0;
       elif( stat == 6 )
          result = 3;
       elif( stat == 7 )
          result = 0;
       elif( stat == 8 )
          result = 0;
       end;
       if( stat )
          continue0 = 0;
       end;

       if( ElemInArr( tags, кодПоля ) and not (stat == 8) )  
           ErrImport( "В сообщениии дублируется тег: " + кодПоля );
           return -1;
       end;
       if( (stat == 0) OR (stat == 7) )
         if( not ОбработатьПоле( кодПоля, ЗначениеПоля ) )
           ErrImport("Не обработали поле: " + кодПоля);
           continue0 = 0;
           result = -1;
         end;

         // Для платежей заполняем в отчете сумму и валюту
         if( ВидСообщения == MESKIND_PAYMENT )
           if((кодПоля == "MT") AND ((int(ЗначениеПоля)==137) OR (int(ЗначениеПоля)==139)))
              /* Срочное сообщение */
              wlmes.Importance = 1;
              if( not ОбновитьЗапись( wlmes ) )
                ErrImport( "Невозможно обновить запись по форме: " + Сигнатура );
                return -1;
              end;
           end;
           if( кодПоля == SB_Tag_Amount )
             Сумма = moneyL(ЗначениеПоля)/100;
           elif( кодПоля == SB_Tag_Currency)
             Валюта = ЗначениеПоля;
           end;
         end;
       end;
       tags(count) = кодПоля;
       count = count + 1;
    end;
  end;

  AddRepElem(wlmes.Kind, Сигнатура, Валюта, Сумма);

  return result;
end;


/***************************************************************************/
/*  Функция считывания сообщения в формате SBRF3                           */
/*  Возвращает:                                                            */
/*             0 - все ОК                                                  */
/*             1 - сообщение не найдено                                    */
/*             2 - найден разделитель сообщений                            */
/*             3 - найден конец файла                                      */
/*            -1 - ошибка при обработке сообщения (ругается сама)          */
/***************************************************************************/
macro ОбработатьСообщение( Отправитель, Получатель, ТипСообщения, IsPIB:bool, AddSign:bool )

  /* Вспомогательные переменные */
  var Строка, длина, Сигнатура, result, ДатаСоздания, Создатель, НомерДокумента;
  var СсылкаНаДокумент = "", СигнатураДокумента = "";

  /* Считываем загловок */
  длина = ДлинаСтроки;
  строка = СчитатьСтроку( длина );
  Строка = Trim( Строка );
  if( (длина == КонецФайла) OR (длина == 0) )
    ErrImport("Не найден конец файла: " + FileSBRF3Foot);
    return -1; /* Достигнут конец файла */
  elif( (substr(Строка,1,3) == FileSBRF3Foot) )
    return 3; /* Достигнут конец файла */
  else 
    СчитаннаяСтрока = Строка;
  end;

  /*std.out( 2, string(" СчитаннаяСтрока :", СчитаннаяСтрока) );*/
  if ( not СчитатьСигнатуру(Сигнатура) )
     return -1;
  end;

  if ( Сигнатура!=sign_0SA )
     if( not СчитатьИдентификатор( ДатаСоздания, Создатель, НомерДокумента ) )
       return -1;
     end;
  else
     if( not СчитатьИдентификатор0SA( Отправитель, ДатаСоздания, НомерДокумента, СсылкаНаДокумент, СигнатураДокумента ) )
       return -1;
     end;
  end;
  result = СчитатьБлокЦелевойИнформации( Сигнатура, 
                                         Отправитель, 
                                         Получатель, 
                                         ДатаСоздания, 
                                         Создатель, 
                                         НомерДокумента, 
                                         СсылкаНаДокумент, 
                                         ТипСообщения, 
                                         IsPIB, 
                                         AddSign );
  if( Сигнатура == -1 )
    return 0;
  end; /* пропускаем неизвестные формы */
  if( result == 1 )
    result = 2;
  elif( result )
    return result;
  end;

  return result;
end;

/* Процедура импорта сообщений СБРФ */
macro SBRF3InProcExec( TpID:integer, importFileName:string, IsPIB:bool )
  var Отправитель, Получатель, ТипСообщения, stat;
  var continue0, Документов = 0;
  var InsertSign:bool, CryptoAPI = RsCryptoAPI(); 

  ImpReport.size = 0;

  Транспорт = TpID;
  ВидКодаТранспорта = PTCK_SBRF;
  ПерейтиВНачалоФайла();
  /*SDA - формирование номеров рейсов */
  var RaceNumber = GetLastNumberRace({curdate},wlsess.TPFRMTID)+1; 
  println("НОМЕР РЕЙСА: ", RaceNumber);
  println("НОМЕР СЕАНСА: ", wlsess.number);
  SetNumberRace(RaceNumber,wlsess.SESSIONID); 


  /* Считываем заголовок файла */
  if( not СчитатьЭтикетку(Отправитель, Получатель, ТипСообщения) )
    return FALSE;
  end;

  /* Считываем один раз настройку необходимости сохранения ЭЦП сообщений */
  InsertSign = CryptoAPI.IsCryptoActionNeeded( CONTEXTID_INSERT_SIGN_SBRF3, 370 );

  /* Считываем сообщения */
  continue0 = TRUE;
  while( continue0 )
     stat = ОбработатьСообщение( Отправитель, Получатель, ТипСообщения, IsPIB, InsertSign );
     if( stat == 1 )
       continue0 = FALSE;
     elif( stat == 3 ) /* найден конец файла */
       continue0 = FALSE;
     elif( stat == -1 )
       return FALSE;
     elif( stat == 0 )
     end;
     Документов = Документов + 1;                                    
     Message("Идет прием сообщений. Обработано: ", Документов );
  end;

  PrintImportReport();
  return true;
end;

/* Макрос экспорта для релизов сообщений, хранящих тэги в отдельных полях */
macro SBRF3InProc( TpID, importFileName,addrSess )
  SetBuff( wlsess, addrSess );
  return SBRF3InProcExec( TpID, importFileName, false );
end;

/* Макрос экспорта для релизов сообщений, хранящих тэги в одном поле */
macro SBRF3InProcPIB( TpID, importFileName, addrSess )
  SetBuff( wlsess, addrSess );
  return SBRF3InProcExec( TpID, importFileName, true );
end;
