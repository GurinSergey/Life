/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   EVG Макрос выпуска отчёта "Справка о платежах в иностранной валюте"
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/

import PaymInter, FIInter, CTInter, Cb_SQL, globals, Календарь, pm_common;

record Department ("dp_dep.dbt");

const  KEY_F1       = 315,
       KEY_F2       = 316,
       KEY_F3       = 317,
       KEY_F9       = 323,
       KEY_ESC      = 27,
       KEY_SPACE    = 32,
       KEY_ENTER    = 13;

/* Примечание "Сообщение RS-Payments" */
const NOTEKIND_RSPMMESSAGE = 122;

var Totals:Object;


/* Библиотека диалогов */
var DlgLbrPath, DlgLbrName;
GetRegistryValue("BANK_INI\\ОБЩИЕ ПАРАМЕТРЫ\\ДИРЕКТОРИИ\\LBRDIR", V_STRING, DlgLbrPath);
DlgLbrName = "FrnPaym.lbr";
DlgLbrPath = FindPath(DlgLbrName, DlgLbrPath);
var dlg = tRecHandler("FrnPaym", DlgLbrPath, true);


/* Файл вывода */
var ReportPath = "", ErrCode = 0;
GetRegistryValue("BANK_INI\\ОБЩИЕ ПАРАМЕТРЫ\\ДИРЕКТОРИИ\\TEXTDIR", V_STRING, ReportPath, ErrCode);
if (ErrCode > 0)
   ReportPath = "..\\TXTFILE";
end;
ReportPath = ReportPath + "\\rpForeignPaym." + UserNumber;

class TotalsCls()
 
 var ReportTotal = $0,
     SchemeTotal = TArray(),
     CorrName    = TArray(),
     CorrVal     = TArray(),
     CorrTotal   = TArray(),
     CorrIDs     = TArray();

     
 macro AddRepTotal ( Val )
    ReportTotal = ReportTotal + Val;
 end;


 macro AddSchTotal ( SchID, Val )

    if ( ValType(SchemeTotal(SchID)) == V_UNDEF )
       SchemeTotal(SchID) = Val;
    else
       SchemeTotal(SchID) = SchemeTotal(SchID) + Val;
    end;
    //msgbox (SchID, "|", SchemeTotal(SchID));
    //println(Schid, " -- ", Val, " -- ", SchemeTotal(SchID));

 end;


 macro AddCorrTotal ( CorrID, Val )

    if ( ValType(CorrTotal(CorrID)) == V_UNDEF )
       CorrTotal(CorrID) = Val;
    else
       CorrTotal(CorrID) = CorrTotal(CorrID) + Val;
    end;

 end;


 macro AddCorrName ( CorrID, Val )

    if ( ValType(CorrName(CorrID)) == V_UNDEF )
       CorrName(CorrID) = Val;
    end;

 end;


 macro AddCorrVal ( CorrID, Val )

    if ( ValType(CorrVal(CorrID)) == V_UNDEF )
       CorrVal(CorrID) = Val;
    end;

 end;
 

 macro AddCorrID ( CorrID )

    var i = 0;

    while ( i < CorrIDs.Size )
       if ( CorrIDs(i) == CorrID )
          return;
       end;
       i = i + 1;
    end;

    CorrIDs( CorrIDs.Size ) = CorrID;
 end;


end;  // class TotalsCls()


class MessageField( Id, Value )

 var FieldID    = Id,
     FieldValue = strSubst(Value, StrFor(13), "");

end;

var MessageFieldsCollection = TArray();


MACRO ParceMessageNote( Note, Sum )

 var RestNote, Id, Value;

 const Separator = ":",
       FieldEnd  = StrFor(13) + StrFor(10) + Separator;


 MessageFieldsCollection = Null;
 MessageFieldsCollection = TArray();

       /*
       if (sum == $956.14)
          debugbreak;
          //msgbox ( subStr(RsPmNote, index(RsPmNote, ":58D:")+5,  index(RsPmNote, ":")) );
       end;*/
    

 RestNote = Note;

 while ( strLen(RestNote) > 0 )

    if ( subStr(RestNote, 1, 1) == Separator )
       Id = subStr(RestNote, 2, 2);
       RestNote = subStr(RestNote, 2);
    end;

    RestNote = subStr(RestNote, index(RestNote, Separator) + 1);

    /* В самом конце примечания окончание поля вырезано, поэтому последнее поле надо
       обрабатывать иначе. */
    if (index(RestNote, FieldEnd) > 0)
       Value    = subStr(RestNote, 1, index(RestNote, FieldEnd) - 1);
       RestNote = subStr(RestNote, index(RestNote, FieldEnd) + 2);
    else
       Value    = RestNote;
       RestNote = "";
    end;

    MessageFieldsCollection(MessageFieldsCollection.Size) = MessageField( Id, Value );
 end;

 if (MessageFieldsCollection.Size())
    return true;
 end;

 return false;
END;


MACRO GetValueById( Id )

//debugbreak;
 var i = 0;
 while ( i < MessageFieldsCollection.Size )

    if ( MessageFieldsCollection(i).FieldId == id )
       return MessageFieldsCollection(i).FieldValue;
    end;

    i = i + 1;
 end;

 return "";
END;


MACRO GetStrSwiftFields()

 var i = 0, id = 0,
     StrSwiftFields = "";

 while ( i < MessageFieldsCollection.Size )

    id = int(MessageFieldsCollection(i).FieldId);

    /* EVG 13/10/09 По просьбе Артамоновой, все SWIFT-поля.
    /* Только поля 56 - 72, кроме 70 */
    if ( (int(Id) >= 56) and (int(Id) <= 72) and (int(Id) != 70) )
    */
       StrSwiftFields = StrSwiftFields + ":" + Id + ":" + MessageFieldsCollection(i).FieldValue +
                        StrFor(10);
    //end;

    i = i + 1;
 end;

 return StrSwiftFields;

END;


/* Найдем имя по Partyid */
MACRO GetClientName(id)

 var  sl=string(" select t_name from dparty_dbt t where t.t_PartyID=",id);
 var  DataS=TRsbDataSet(sl);

  if( DataS.moveNext())
    return DataS.name;
  else
    msgbox("Субъект не найден в party.dbt");
    return "-";
  end;

END;



MACRO EventHandler (dlg, cmd, id, key) 

   var const_mess = "~ESC~ Выход ~F2~ Выполнить ~F3~ Список ~SPACE~ Установить ";
   var dep = TBFile ("dp_dep.dbt", "R", 0),
       party = TRecHandler("party.dbt");

   /*Первоначальная инициализация полей*/
   if(cmd == DLG_INIT)

      dep.Clear();
      dep.rec.Code = 1;
      dep.GetEQ();
      Copy (Department, dep);
      ПолучитьСубъекта(dep.rec.PartyID, party);

      dlg.rec.Branch     = dep.rec.Name;
      dlg.rec.BranchName = party.rec.Name;
      dlg.rec.ReportDate = {curDate};
      dlg.rec.Priority   = 0;

      message (const_mess);

      UpdateFields(dlg); 
      SetFocus(dlg, 0)
   end;
   
   

   if (cmd == DLG_REMFOCUS)

      /*Проверка корректности дат отчета*/
      if (FldName(dlg,id) == "ReportDate")
         if ( dlg.rec.ReportDate > {curdate} )
            MsgBox("Дата отчёта не может быть больше даты текущего операционного дня");
            return CM_CANCEL;
         end;
      end;

      UpdateFields(dlg); 
   end;


   
   if (cmd == DLG_KEY)

     /*Выход из диалогового окна формирования отчета*/
     if (KEY == KEY_ESC)
       return exit(1);//CM_CANCEL;

     /*Выбор данных из списка*/
     elif ( KEY == KEY_F3)

        /*Выбор подразделения банка из списка подразделений */
        if (FldName(dlg,id) == "Branch")
           if (ListDepartment (Department))
              dlg.rec.Branch = Department.Name;
              dlg.rec.BranchName = GetClientName(Department.PartyID);

              UpdateFields(dlg);
           end;
        end;

        /*Выбор даты из календаря*/
        if (FldName(dlg,id) == "ReportDate")
           dlg.rec.ReportDate = GetDateByCalendar (dlg.rec.ReportDate);
        end;
        
     elif ( KEY == KEY_F2 )          //Проверки при вводе

        if ( dlg.rec.ReportDate > {curdate} )
           MsgBox("Дата отчёта не может быть больше даты текущего операционного дня");
           return CM_IGNORE;
        end;
         
        /* Проверка ввода подразделения */
        if ( trim(dlg.rec.Branch) == "" )
           MsgBox("Пожалуйста, выберите подразделение для отчёта");
           return CM_IGNORE;
        end;

        return CM_SAVE;

     elif ( KEY == KEY_ENTER )
      if (FldName(dlg,id) == "Priority")
         SetFocus(dlg, 0);
         return CM_IGNORE;
      end;

     elif ( KEY == KEY_F9 )
        return CM_IGNORE;

     end;
   
   end;
        
END;



MACRO PrintHead ( RepDate, Priority )

//PrintLn("E(3R(s0p10.00h8.5v0s0b4099T&a0L&l1O&l4E&l8D ");

 [
                                                                 СПРАВКА № #
                                                    о платежах клиентов в иностранной валюте,
                                                     принятых к исполнению на #
 ](Priority:l, RepDate:m)


END;



MACRO PrintPartHeader ( Schem, Fiid )
 var query, rs, schemPrm = "";

//debugbreak;
 query = " Select trim(prt.t_Name) || ', ' || fi.t_CCY  || ', ' || sch.t_Account SchemPrm, prt.t_Name CorrName, fi.t_Definition ValName, " +
         "        ORA_HASH(sch.t_CorrID || sch.t_FIID, 10000000) CorrID "
         "   From DCorschem_dbt sch, DParty_dbt prt, DFininstr_dbt fi " +
         "  Where sch.t_Number  = " + Schem +
         "    and sch.t_FIID    = " + Fiid +
         "    and prt.t_PartyID = sch.t_CorrID " +
         "    and fi.t_FIID     = sch.t_FIID ";
 rs = rsdRecordSet(query);
 if (rs and rs.MoveNext())
    schemPrm = rs.Value("schemPrm", null, V_STRING);
    // Добавление корреспондента для вывода в итоги
    Totals.AddCorrName ( rs.Value("CorrID", null, V_INTEGER), rs.Value("CorrName", null, V_STRING) );
    Totals.AddCorrVal  ( rs.Value("CorrID", null, V_INTEGER), rs.Value("ValName", null, V_STRING) );
    Totals.AddCorrID   ( rs.Value("CorrID", null, V_INTEGER) );
 end;
 // KS 15.06.2012 Добавлю поле ВСП
 [
        #
        ┌───┬──────────────────────┬─────────────────────┬───┬──────┬─────────────────┬──────────┬───────────────────────────────────────────────┐
        │ № │    Наименование      │     Номер счета     │ВСП│ Код  │  Сумма платежа  │   Дата   │              Поля сообщения SWIFT             │
        │п/п│    отправителя       │     отправителя     │   │валюты│                 │валютир-я │                                               │
        ├─1─┼──────────2───────────┼──────────3──────────┼─4─┼──5───┼────────6────────┼────7─────┼───────────────────────8───────────────────────┤
 ] (schemPrm);
 /*
 [
        #
        ┌───┬──────────────────────┬─────────────────────┬──────┬─────────────────┬──────────┬───────────────────────────────────────────────┐
        │ № │    Наименование      │     Номер счета     │ Код  │  Сумма платежа  │   Дата   │              Поля сообщения SWIFT             │
        │п/п│    отправителя       │     отправителя     │валюты│                 │валютир-я │                                               │
        ├─1─┼──────────2───────────┼──────────3──────────┼──4───┼────────5────────┼────6─────┼───────────────────────7───────────────────────┤
 ] (schemPrm);

 [
        #
        ┌───┬───────────────────────────┬─────────────────────┬──────┬─────────────────┬──────────┬──────────────────────────────┬─────────────────────────────────┐
        │ № │      Наименование         │     Номер счета     │ Код  │  Сумма платежа  │   Дата   │          Основание           │       Поля сообщения SWIFT      │
        │п/п│      отправителя          │     отправителя     │валюты│                 │валютир-я │           платежа            │                                 │
        ├─1─┼────────────2──────────────┼──────────3──────────┼──4───┼────────5────────┼────6─────┼──────────────7───────────────┼────────────────8────────────────┤
 ] (schemPrm);*/

END;

//MACRO PrintLine_Payment(LineNumber, SenderName, SenderAcc, CurCode, PaymAmount, ValueDate, Ground, PmSwiftFields)
// KS 15.06.2012 Добавлю поле ВСП
MACRO PrintLine_Payment(LineNumber, SenderName, SenderAcc, NodeCode, CurCode, PaymAmount, ValueDate, Ground, PmSwiftFields)

// KS 15.06.2012 Добавлю поле ВСП
 [      │###│ #################### │#####################│###│ ###  │ ############### │##########│ ############################################# │]
 (LineNumber:c, 
     SenderName:w, 
        SenderAcc:w, 
         NodeCode, // KS 15.06.2012 Добавлю поле ВСП
           CurCode, 
              PaymAmount, 
                 ValueDate, 
                    //Ground:w, 
                       PmSwiftFields:w
 );

 /*
 [      │###│ #################### │#####################│ ###  │ ############### │##########│ ############################################# │]
 (LineNumber:c, 
     SenderName:w, 
        SenderAcc:w, 
           CurCode, 
              PaymAmount, 
                 ValueDate, 
                    //Ground:w, 
                       PmSwiftFields:w
 );

  [      │###│ ######################### │#####################│ ###  │ ############### │##########│ ############################ │ ############################### │]
 (LineNumber:c, 
     SenderName:w, 
        SenderAcc:w, 
           CurCode, 
              PaymAmount, 
                 ValueDate, 
                    Ground:w, 
                       PmSwiftFields:w

 );*/

END;

MACRO PrintLine_SWIFT ( SenderName, SenderAcc, CurCode, PaymAmount, ValueDate, Ground )

// KS 15.06.2012 Добавлю поле ВСП
 [      │   │                      │                     │   │      │                 │          │                                               │
        │   │ #################### │#####################│   │ ###  │ ############### │##########│                                               │]
 (SenderName:w, 
     SenderAcc:w, 
        CurCode, 
           PaymAmount:r, 
              ValueDate:c
                 //Ground:w
 );

 /*
 [      │   │                      │                     │      │                 │          │                                               │
        │   │ #################### │#####################│ ###  │ ############### │##########│                                               │]
 (SenderName:w, 
     SenderAcc:w, 
        CurCode, 
           PaymAmount:r, 
              ValueDate:c
                 //Ground:w
 );

 [      │   │                           │                     │      │                 │          │                              │                                 │
        │   │ ######################### │#####################│ ###  │ ############### │##########│ ############################ │                                 │]
 (SenderName:w, 
     SenderAcc:w, 
        CurCode, 
           PaymAmount:r, 
              ValueDate:c, 
                 Ground:w
 );*/

END;


MACRO PrintLineSeparator()

// KS 15.06.2012 Добавлю поле ВСП
 [      ├───┼──────────────────────┼─────────────────────┼───┼──────┼─────────────────┼──────────┼───────────────────────────────────────────────┤];
 /*
 [      ├───┼──────────────────────┼─────────────────────┼──────┼─────────────────┼──────────┼───────────────────────────────────────────────┤];

 [      ├───┼───────────────────────────┼─────────────────────┼──────┼─────────────────┼──────────┼──────────────────────────────┼─────────────────────────────────┤];
 */

END;



MACRO PrintPartFooter(PartTotal, CurrName)

// KS 15.06.2012 Добавлю поле ВСП
 [      └───┴──────────────────────┴─────────────────────┴───┴──────┴─────────────────┴──────────┴───────────────────────────────────────────────┘
                                                         ИТОГО: ############### #                                                                                   ]
 (PartTotal:a, CurrName:l);
 /*
 [      └───┴──────────────────────┴─────────────────────┴──────┴─────────────────┴──────────┴───────────────────────────────────────────────┘
                                                         ИТОГО: ############### #                                                                                   ]
 (PartTotal:a, CurrName:l);


 [      └───┴───────────────────────────┴─────────────────────┴──────┴─────────────────┴──────────┴──────────────────────────────┴─────────────────────────────────┘
                                                         ИТОГО: ############### #                                                                                   ]
 (PartTotal:a, CurrName:l);*/

END;



MACRO PrintFooter()
 private var n = 0,
         CorrId = 0;

 println("\n\n");

 while (n < Totals.CorrIDs.Size)

    CorrId = Totals.CorrIDs.(n);

    if ( valType(Totals.CorrName.( CorrId )) != V_UNDEF)
       [ИТОГО: #
                #]
       (                Totals.CorrName.( CorrId ), 
         string( string(Totals.CorrTotal.( CorrId ):a) + " " + 
                        Totals.CorrVal.( CorrId ):l) );
    end;

    n = n + 1;
 end;

 /*
 while (n < Totals.CorrName.Size)

    if ( valType(Totals.CorrName.(n)) != V_UNDEF)
       [ИТОГО: #
                #]
       ( Totals.CorrName.(n), string(Totals.CorrTotal.(n) + " " + Totals.CorrVal.(n):l) );
    end;

    n = n + 1;
 end;*/
END;



MACRO ShowReport()

  file rep () txt;

  SetOutPut(null, true);
  Open(rep, ReportPath);

  ViewFile(rep);

END;



MACRO GetSWIFTFieldValue( MesID, TpFldName )

 var query, rs;

    query = " Select val.t_Value " +
            "   From DWlMesVal_dbt val, DWlTpFld_dbt wlt "
            "  Where val.t_MesID     = " + MesID +
            "    and wlt.t_TpID      = 2 " +                                    // 2 - SWIFT
            "    and wlt.t_TpFieldID = val.t_TpFieldID " +
            "    and wlt.t_Name like ('" + string(TpFldName) + "%') ";
    rs = rsdRecordSet(query);
    if (rs and rs.MoveNext())
       return rs.Value(0, null, V_STRING);
    end;

    return "";
END;

// KS 15.06.2012 Опеределю ВСП
MACRO getNodeByAcc(pAcnt)
 var query, cmd, rs;

    query = "select dp.t_name " +
            "  from daccount_dbt acc, ddp_dep_dbt dp " +
            " where acc.t_account = ? " +
            "   and dp.t_code = acc.t_branch";

    cmd = RsdCommand(query);
    cmd.AddParam("accnt", RSDBP_IN, pAcnt);
    rs = RsdRecordSet(cmd);
    if (rs and rs.MoveNext())
       return rs.Value(0, null, V_STRING);
    end;

    return "";
END;

MACRO MakeReport ( BranchID, RepDate, Priority )

 var query, rs, rs1;

 var AccMaskStr = "'30109', '30110', '30114', '30102'",
     CredAccExcludeStr = "'30109'";

 var CurrSchem = 0,
     SchemUniID= 0,
     LastSchem = 0,
     LastCurNm = "",
     CorrespondentUniID = 0;

 var Counter, First, PriorityClause, RsPmNote, MesID, Field50, Field32, Field70, ReceiverBankSwiftCode, ErrCode;

 var LineNumber    = 0,
     SenderName    = "",
     SenderAcc     = "",
     NodeCode      = "", // KS 15.06.2012 Добавлю поле ВСП
     CurCode       = "",
     CurName       = "",
     PaymAmount    = $0,
     ValueDate     = "",
     Ground        = "",
     PmSwiftFields = "";

 var swSenderName  = "", 
     swSenderAcc   = "",
     swCurCode     = "", 
     swPaymAmount  = "", 
     swValueDate   = "", 
     swGround      = "";

  PriorityClause = "";
  if (Priority > 0)
     PriorityClause = " and paym.t_NumberPack = " + Priority;
  end;

 query = " Select count(*) " +
         "   From DPmPaym_dbt paym, DPmProp_dbt prop, DCorSchem_dbt sch, DFininstr_dbt fi " +
         "  Where paym.t_EndDepartment   = " + BranchID +
         /* Т.к. обрабатываются и входящие платежи, эти проверки не нужны.
         "    and paym.t_PayerBankID     = " + {OurBank} +       //   -- исходящий
         "    and paym.t_ReceiverBankID <> " + {OurBank} +       //   -/
         */
         "    and paym.t_ValueDate       = " + GetSQLDate(RepDate) +
         "    and paym.t_FIID           <> " + NatCur 
         + PriorityClause +
         //"    and paym.t_PaymStatus      = 32000 " +    // Только закрытые
         "    and prop.t_PaymentID       = paym.t_PaymentID " +

         "    and ( subStr (paym.t_FuturePayerAccount, 1, 5) in ( " + AccMaskStr + " ) " +
         "          or  " +
         "          subStr (paym.t_FutureReceiverAccount, 1, 5) in ( '30110', '30114' )  ) " +
         "    and subStr (paym.t_FutureReceiverAccount, 1, 5) not in ( " + CredAccExcludeStr + " ) " +
         "    and prop.t_DebetCredit     = 1  " +                // Всегда исходящая с/р!
         //"    and prop.t_Group           = 1  " +                // Документ внешний
         /*
         "    and ( (subStr (paym.t_FuturePayerAccount, 1, 5) in ( " + AccMaskStr + " ) " +
         "           and prop.t_DebetCredit     = 0  " +                // Входящая с/р - из свойств по дебету
         "          )                                " +
         "          or                                                                   " +
         "          (subStr (paym.t_FutureReceiverAccount, 1, 5) in ( " + AccMaskStr + " )  " +
         "           and prop.t_DebetCredit     = 1  " +                // Исходящая с/р - из свойств по кредиту
         "          )                                " +
         "        )                                  " +
         */
         /* Т.к. обрабатываются и входящие платежи, эти проверки не нужны.
         "    and paym.t_FutureReceiverAccount = paym.t_FuturePayerAccount " +
         */
         "    and sch.t_fiid             = paym.t_fiid " +
         "    and sch.t_Number           = prop.t_CorSchem " +
         "    and fi.t_fiid              = paym.t_fiid ";
 rs = rsdRecordSet(query, RSDVAL_CLIENT, RSDVAL_STATIC);
 if (rs and rs.MoveNext())
    Counter = rs.value(0, null, V_INTEGER);
 end;

 
 query = " Select paym.t_Payer Payer, paym.t_PaymentID PaymID, paym.t_ValueDate ValueDate, paym.t_PayFIID fiid, paym.t_PayerAccount pAcnt, paym.t_PayAmount amnt, " +
         "        prop.t_CorSchem schem, fi.t_ISO_Number CurCode, paym.t_NumberPack pck, " +
         "        ORA_HASH(prop.t_CorSchem || paym.t_PayFIID, 10000000) schemUniID, " +
         "        ORA_HASH(sch.t_CorrID    || sch.t_FIID, 10000000) corrUniID " +
         "   From DPmPaym_dbt paym, DPmProp_dbt prop, DCorSchem_dbt sch, DFininstr_dbt fi " +
         "  Where paym.t_EndDepartment   = " + BranchID +
         /* Т.к. обрабатываются и входящие платежи, эти проверки не нужны.
         "    and paym.t_PayerBankID     = " + {OurBank} +       //   -- исходящий
         "    and paym.t_ReceiverBankID <> " + {OurBank} +       //   -/
         */
         "    and paym.t_ValueDate       = " + GetSQLDate(RepDate) +
         "    and paym.t_FIID           <> " + NatCur 
         + PriorityClause +
         //"    and paym.t_PaymStatus      = 32000 " +    // Только закрытые
         "    and prop.t_PaymentID       = paym.t_PaymentID " +

         "    and ( subStr (paym.t_FuturePayerAccount, 1, 5) in ( " + AccMaskStr + " ) " +
         "          or  " +
         "          subStr (paym.t_FutureReceiverAccount, 1, 5) in ( '30110', '30114' )  ) " +
         "    and subStr (paym.t_FutureReceiverAccount, 1, 5) not in ( " + CredAccExcludeStr + " ) " +
         "    and prop.t_DebetCredit     = 1  " +                // Всегда исходящая с/р!
         //"    and prop.t_Group           = 1  " +                // Документ внешний
         /*
         "    and ( (subStr (paym.t_FuturePayerAccount, 1, 5) in ( " + AccMaskStr + " ) " +
         "           and prop.t_DebetCredit     = 0  " +                // Входящая с/р - из свойств по дебету
         "          )                                " +
         "          or                                                                   " +
         "          (subStr (paym.t_FutureReceiverAccount, 1, 5) in ( " + AccMaskStr + " )  " +
         "           and prop.t_DebetCredit     = 1  " +                // Исходящая с/р - из свойств по кредиту
         "          )                                " +
         "        )                                  " +
         */
         /* Т.к. обрабатываются и входящие платежи, эти проверки не нужны.
         "    and paym.t_FutureReceiverAccount = paym.t_FuturePayerAccount " +
         */
         "    and sch.t_fiid             = paym.t_Payfiid " +
         "    and sch.t_Number           = prop.t_CorSchem " +
         "    and fi.t_fiid              = paym.t_Payfiid " +
         " Order By CurCode asc, schem asc, paym.t_Amount ";
 rs = rsdRecordSet(query, RSDVAL_CLIENT, RSDVAL_STATIC);
 First   = true;
 Totals  = TotalsCls();
//msgbox (query);
//debugbreak;

 initProgress(Counter, "Выполняется формирование отчёта...", "Валютные платежи за " + RepDate);
 while ( rs.MoveNext() )

    PaymAmount = $0;
    SenderName = SenderAcc = NodeCode = CurCode = CurName = ValueDate = Ground = PmSwiftFields = "";
    swSenderName = swSenderAcc = swPaymAmount = swCurCode = swValueDate = swGround = "";
    Field50 = Field32 = Field70 = ReceiverBankSwiftCode = "";
    MesID = 0;

    CurrSchem = rs.value("schem", null, V_INTEGER);
    SchemUniID = rs.value("schemUniID", null, V_INTEGER);
    CorrespondentUniID = rs.value("corrUniID", null, V_INTEGER);

/*
if (SQL_ConvTypeSum(  rs.Value("amnt", null, V_MONEY) ) == $113800)
debugbreak;
//msgbox (query);
end;*/

    query = " Select nvl(pty.t_name, rmpr.T_PAYERNAME) sendername, rmpr.t_Ground Ground,fi.t_ISO_Number CurCode, fi.t_Definition CurName " +
            "   From dpmpaym_dbt pm, dpmrmprop_dbt rmpr, dfininstr_dbt fi, dparty_dbt pty " +
            "  Where pm.t_PaymentID   = " + rs.Value("PaymID", null, V_INTEGER) +
            "    and rmpr.t_PaymentID = pm.t_PaymentID " + 
            "    and fi.t_FIID        = " + rs.Value("fiid",   null, V_INTEGER) +
            "    AND pm.t_Payer       = pty.t_PartyID (+)";


    rs1 = rsdRecordSet(query);

    if (rs1 and rs1.MoveNext())
       SenderName = rs1.Value("SenderName", null, V_STRING);
       // KS 15.06.2012 Добавлю поле ВСП
       if (NodeCode == "")
         NodeCode = getNodeByAcc(rs.Value("pAcnt", null, V_STRING));
       end;
       // KS 15.06.2012 End Добавлю поле ВСП
       CurCode    = rs1.Value("CurCode", null, V_STRING);
       CurName    = rs1.Value("CurName", null, V_STRING);
       Ground     = rs1.Value("Ground", null, V_STRING);
    end;


    SenderAcc  = SQL_ConvTypeStr(  rs.Value("pAcnt",     null, V_STRING) );              
    PaymAmount = SQL_ConvTypeSum(  rs.Value("amnt",      null, V_MONEY) );               
    ValueDate  = SQL_ConvTypeDate( rs.Value("ValueDate", null, V_DATE) );                
    
    
    rs1 = null;
/*
    query = " Select ':' || wlt.t_name || ':' || val.t_Value strSwiftFields, mes.t_MesID MesID " +
            "   From DWlPm_dbt wlp, DWlMesLnk_dbt lnk, DWlMes_dbt mes, DWlMesVal_dbt val, DWlTpFld_dbt wlt " +
            "  Where wlp.t_PaymentID = " + rs.Value("PaymID", null, V_INTEGER) +       // t_PaymentID
            "    and lnk.t_ObjKind   = " + OBJTYPE_PAYMENT +
            "    and lnk.t_ObjID     = wlp.t_WlPmID " +
            "    and mes.t_MesID     = lnk.t_MesID " +
            "    and val.t_MesID     = mes.t_MesID " +
            "    and wlt.t_TpID      = 2 " +                                    // 2 - SWIFT
            "    and wlt.t_TpFieldID = val.t_TpFieldID " ;
           /*
            "    and wlt.t_name NOT like ('20%') " +
            "    and wlt.t_name NOT like ('21%') " +
            "    and wlt.t_name NOT like ('23%') " +
            "    and wlt.t_name NOT like ('32%') " +
            "    and wlt.t_name NOT like ('50%') " +
            "    and wlt.t_name NOT like ('70%') " ;*/
*/
//SDA - требуется только последнее сообщение по платежу
	query =  " SELECT ':' || wlt.t_name || ':' || val.t_value strswiftfields, "+
		 "       mes.t_mesid mesid "+
		 "  FROM dwlmes_dbt mes, dwlmesval_dbt val, dwltpfld_dbt wlt "+
		 " WHERE mes.t_mesid = "+
		 "          (SELECT MAX (t.t_mesid) "+
		 "             FROM dwlmes_dbt t, dwlpm_dbt wlp, dwlmeslnk_dbt lnk "+
		 "            WHERE wlp.t_paymentid = "+ rs.Value("PaymID", null, V_INTEGER) +       // t_PaymentID
		 "              AND lnk.t_objkind = "+ OBJTYPE_PAYMENT +
		 "              AND lnk.t_objid = wlp.t_wlpmid "+
		 "              AND t.t_mesid = lnk.t_mesid) "+
		 "   AND val.t_mesid = mes.t_mesid "+
		 "   AND wlt.t_tpid = 2 "+
		 "   AND wlt.t_tpfieldid = val.t_tpfieldid ";

    rs1 = rsdRecordSet(query);
    while (rs1 and rs1.MoveNext())
       PmSwiftFields = PmSwiftFields + rs1.Value("strSwiftFields", null, V_STRING) + "                                                                                ";    // Пробелы для того, чтобы переносилась строчка
       MesID = rs1.Value("MesID", null, V_INTEGER);
    end;

    //PmSwiftFields = strSubst(PmSwiftFields, strFor(10), " ");    // Убираем концы строк
    PmSwiftFields = strSubst(PmSwiftFields, strFor(10) + strFor(10), strFor(10));    // Двойной конец строки заменяем на одинарный
    
    
    /* Только если сообщение есть */
    if (rs1)
       Field50 = GetSWIFTFieldValue( MesID, 50 );
       Field32 = GetSWIFTFieldValue( MesID, 32 );
       Field70 = GetSWIFTFieldValue( MesID, 70 );

       swSenderAcc  = subStr(Field50, 1, Index(Field50, strFor(10)) );  // Первая строка
       swSenderName = subStr(Field50, Index(Field50, strFor(10))+1 );   // Строки, кроме первой

       swValueDate  = subStr(Field32, 1, 6);
       swCurCode    = subStr(Field32, 7, 3);
       swPaymAmount = subStr(Field32, 10);

       swGround     = Field70;

       ReceiverBankSwiftCode = GetSWIFTFieldValue( MesID, 57 );
    end;

    /* Если сообщения нет, смотрим примечание */
    if (strLen(swSenderName) == 0)

       RsPmNote = ReadNoteForPayment ( rs.Value("PaymID", null, V_INTEGER), NOTEKIND_RSPMMESSAGE );
    
       if (ParceMessageNote( RsPmNote, PaymAmount ))
          Field50 = GetValueById( 50 );
          Field32 = GetValueById( 32 );
          Field70 = GetValueById( 70 );

          swSenderAcc  = subStr(Field50, 1, Index(Field50, strFor(10)) );  // Первая строка
          swSenderName = subStr(Field50, Index(Field50, strFor(10))+1 );   // Строки, кроме первой

          swValueDate  = subStr(Field32, 1, 6);
          swCurCode    = subStr(Field32, 7, 3);
          swPaymAmount = subStr(Field32, 10);

          swGround     = Field70;

          PmSwiftFields = GetStrSwiftFields();

          ReceiverBankSwiftCode = GetValueById( 57 );
       end;
    
    end;
    
    //if ( ReceiverBankSwiftCode != ПолучитьКодСубъекта({OurBank}, PTCK_SWIFT, ErrCode) )
       if (SchemUniID != LastSchem)
          if (not first)
             PrintPartFooter(Totals.SchemeTotal.(LastSchem), LastCurNm);
          end;
          PrintPartHeader(CurrSchem, rs.Value("fiid", null, V_INTEGER));
          LineNumber = 0;
       else
          PrintLineSeparator();
       end;
       First = false;

       LineNumber = LineNumber + 1;
       useProgress(LineNumber);

       

       //PrintLine_Payment ( LineNumber, SenderName, SenderAcc, CurCode, PaymAmount, ValueDate, Ground, PmSwiftFields );
       // KS 15.06.2012 Добавлю поле ВСП
       PrintLine_Payment ( LineNumber, SenderName, SenderAcc, NodeCode, CurCode, PaymAmount, ValueDate, Ground, PmSwiftFields );

 
       PrintLine_SWIFT ( swSenderName, swSenderAcc, swCurCode, swPaymAmount, swValueDate, swGround );

       //debugbreak;
       Totals.AddRepTotal  (PaymAmount);
       Totals.AddSchTotal  (SchemUniID, PaymAmount);
       Totals.AddCorrTotal (CorrespondentUniID, PaymAmount);

       LastSchem = SchemUniID;
       LastCurNm = CurName;
    //end;
    
 end;


//debugbreak;
//msgbox (LastSchem, "|", Totals.SchemeTotal.(LastSchem));
 if (valType(Totals.SchemeTotal.(LastSchem)) > V_UNDEF)
    PrintPartFooter(Totals.SchemeTotal.(LastSchem), LastCurNm);
 else
    println ("\n\n Платежи с указанными параметрами отсутствуют.");
 end;
 remProgress();

END;







/*Точка входа в макрос*/
while (RunDialog(dlg, "EventHandler"))

  SetOutPut (ReportPath, false);

  PrintHead ( dlg.rec.ReportDate, int(dlg.rec.Priority) );

  MakeReport ( Department.Code, dlg.rec.ReportDate, int(dlg.rec.Priority) );

  PrintFooter();

  ShowReport();

end;









