/*                                                                                                                       
  ╔═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗
  ║ZUB                                                                                                                  ║
  ╠════════════╦════════════════════════════════════════════════════════════════════════════════════════════════════════╣
  ║Filename    ║ ZubRunScroll.mac                                                                                       ║
  ╟────────────╫────────────────────────────────────────────────────────────────────────────────────────────────────────╢
  ║Description ║ Вспомогательная библиотека для работы со скроллингами.                                                 ║
  ║            ║                                                                                                        ║
  ╟────────────╫────────────────────────────────────────────────────────────────────────────────────────────────────────╢
  ║            ║ ┌───────┬───────┬────────────┬────────────────────────────────────────────────────────────────────────┐║
  ║Revision    ║ │Версия │ Автор │ Дата       │ Описание                                                               │║   
  ║            ║ ├───────┼───────┼────────────┼────────────────────────────────────────────────────────────────────────┤║
  ║            ║ │1.0    │ Lex   │ 13-02-2009 │ Создание                                                               │║   
  ║            ║ ├───────┼───────┼────────────┼────────────────────────────────────────────────────────────────────────┤║   
  ║            ║ │1.1    │ Lex   │ 19-11-2009 │ Обработка выделенных в скроллинге записей                              │║   
  ║            ║ ├───────┼───────┼────────────┼────────────────────────────────────────────────────────────────────────┤║   
  ║            ║ │1.2    │ Lex   │ 20-11-2009 │ 1. Константы                                                           │║   
  ║            ║ │       │       │            │ 2. Удаление столбцов                                                   │║   
  ║            ║ │       │       │            │ 3. Обновление рекордсета и скроллинга                                  │║   
  ║            ║ ├───────┼───────┼────────────┼────────────────────────────────────────────────────────────────────────┤║   
  ║            ║ │1.3    │ Lex   │ 15-01-2010 │ Добавил кнопок                                                         │║   
  ║            ║ ├───────┼───────┼────────────┼────────────────────────────────────────────────────────────────────────┤║   
  ║            ║ │1.4    │ Lex   │ 26-08-2010 │ Работа с параметризованными запросами                                  │║   
  ║            ║ ├───────┼───────┼────────────┼────────────────────────────────────────────────────────────────────────┤║   
  ║            ║ │       │       │            │                                                                        │║   
  ║            ║ │       │       │            │                                                                        │║   
  ║            ║ └───────┴───────┴────────────┴────────────────────────────────────────────────────────────────────────┘║
  ╚════════════╩════════════════════════════════════════════════════════════════════════════════════════════════════════╝
*/ 
/************************************************************************************************************************  
                                                   Примеры работы

///////////////Обычная работа////////////////
import ZubRunScroll;

var Scroll = BMWScroll;

macro Press_F2(cmd, rsd, id, key)
   msgbox(rsd.value("t_uscreditnumber", NULL, V_STRING));
end;

Scroll.SqlText = "SELECT * FROM dcredit_c_dbt";
Scroll.SetMacroOnKeys(316, "Press_F2");
Scroll.Scroll;


///////////////Параметризованные запросы////////////////
import ZUBRunScroll1;

var scroll = ZUBScroll;

scroll.SqlText = "SELECT * FROM dcredit_c_dbt WHERE t_creditnumber = ?";
scroll.Params[scroll.Params.Size] = 5;
scroll.Scroll;


///////////////MultiSelect////////////////
import ZUBRunScroll;

var i = 0, j;

var Scroll = ZUBScroll;

macro MS_F2_Start(cmd, rsd, id, key)
   InitProgress(GetMultiCount(rsd));
end;

macro MS_F2(cmd, rsd, id, key)
   UseProgress(i=i+1);
   j = 0;
   while(j <= 1000)
     j = j + 1;
   end;
   return CM_MSEL_CONT_CLEAR;
end;

macro MS_F2_End(cmd, rsd, id, key)
  RemProgress;
end;


Scroll.SqlText = "SELECT * FROM dcredit_c_dbt";
Scroll.SetMacroOnKeysMultiSel(316, "MS_F2_Start", "MS_F2", "MS_F2_End");
Scroll.Scroll;
************************************************************************************************************************/

import rsd;

/*Константы с типами столбцов*/
const ZUB_SCR_COL_EDITABLE    = 1, //редактируемое
      ZUB_SCR_COL_NONEDITABLE = 2, //нередактируемое
      ZUB_SCR_COL_SCROLLABLE  = 5; //прокручиваемое

/*Константы с режимами обновления скроллинга*/
const ZUB_SCR_UPDTCUR  = 1,    // Обновить текущую запись на экране (не ясно, работает ли из RSL)
      ZUB_SCR_UPDTREC  = 2,    // Обновить текущую запись, загрузив из файла
      ZUB_SCR_UPDTSCRL = 3,    // Обновить изображение всей области скролинга
      ZUB_SCR_UPDTZOOM = 4,    // Обновить страницу и скролинг начиная с RecPos
      ZUB_SCR_UPDTPAGE = 5;    // Обновить страницу записей и область скролинга


/*Клавиши с названиями и кодами*/
CLASS ZUBScrollKeys
   var KbArray = TArray();
   private var i = 0;

   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_F1";           KbArray[i][1] = 315;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_F2";           KbArray[i][1] = 316;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_F3";           KbArray[i][1] = 317;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_F4";           KbArray[i][1] = 318;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_F5";           KbArray[i][1] = 319;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_F6";           KbArray[i][1] = 320;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_F7";           KbArray[i][1] = 321;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_F8";           KbArray[i][1] = 322;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_F9";           KbArray[i][1] = 323;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_F10";          KbArray[i][1] = 324;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_F11";          KbArray[i][1] = 389;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_F12";          KbArray[i][1] = 390;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Ctrl_F1";      KbArray[i][1] = 350;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Ctrl_F2";      KbArray[i][1] = 351;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Ctrl_F3";      KbArray[i][1] = 352;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Ctrl_F4";      KbArray[i][1] = 353;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Ctrl_F5";      KbArray[i][1] = 354;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Ctrl_F6";      KbArray[i][1] = 355;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Ctrl_F7";      KbArray[i][1] = 356;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Ctrl_F8";      KbArray[i][1] = 357;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Ctrl_F9";      KbArray[i][1] = 358;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Ctrl_F10";     KbArray[i][1] = 359;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Ctrl_F11";     KbArray[i][1] = 393;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Ctrl_F12";     KbArray[i][1] = 394;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Alt_F1";       KbArray[i][1] = 360;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Alt_F2";       KbArray[i][1] = 361;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Alt_F3";       KbArray[i][1] = 362;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Alt_F4";       KbArray[i][1] = 363;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Alt_F5";       KbArray[i][1] = 364;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Alt_F6";       KbArray[i][1] = 365;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Alt_F7";       KbArray[i][1] = 366;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Alt_F8";       KbArray[i][1] = 367;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Alt_F9";       KbArray[i][1] = 368;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Alt_F10";      KbArray[i][1] = 369;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Alt_F11";      KbArray[i][1] = 395;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Alt_F12";      KbArray[i][1] = 396;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Shift_F1";     KbArray[i][1] = 340;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Shift_F2";     KbArray[i][1] = 341;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Shift_F3";     KbArray[i][1] = 342;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Shift_F4";     KbArray[i][1] = 343;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Shift_F5";     KbArray[i][1] = 344;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Shift_F6";     KbArray[i][1] = 345;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Shift_F7";     KbArray[i][1] = 346;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Shift_F8";     KbArray[i][1] = 347;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Shift_F9";     KbArray[i][1] = 348;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Shift_F10";    KbArray[i][1] = 349;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Shift_F11";    KbArray[i][1] = 391;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Shift_F12";    KbArray[i][1] = 392;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Alt_0";        KbArray[i][1] = 385;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Alt_1";        KbArray[i][1] = 376;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Alt_2";        KbArray[i][1] = 377;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Alt_3";        KbArray[i][1] = 378;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Alt_4";        KbArray[i][1] = 379;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Alt_5";        KbArray[i][1] = 380;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Alt_6";        KbArray[i][1] = 381;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Alt_7";        KbArray[i][1] = 382;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Alt_8";        KbArray[i][1] = 383;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Alt_9";        KbArray[i][1] = 384;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Del";          KbArray[i][1] = 339;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Ins";          KbArray[i][1] = 338;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Alt_A";        KbArray[i][1] = 286;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Alt_B";        KbArray[i][1] = 304;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Alt_C";        KbArray[i][1] = 302;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Alt_D";        KbArray[i][1] = 288;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Alt_E";        KbArray[i][1] = 274;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Alt_F";        KbArray[i][1] = 289;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Alt_G";        KbArray[i][1] = 290;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Alt_H";        KbArray[i][1] = 291;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Alt_I";        KbArray[i][1] = 279;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Alt_J";        KbArray[i][1] = 292;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Alt_K";        KbArray[i][1] = 293;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Alt_L";        KbArray[i][1] = 294;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Alt_M";        KbArray[i][1] = 306;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Alt_N";        KbArray[i][1] = 305;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Alt_O";        KbArray[i][1] = 280;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Alt_P";        KbArray[i][1] = 281;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Alt_Q";        KbArray[i][1] = 272;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Alt_R";        KbArray[i][1] = 275;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Alt_S";        KbArray[i][1] = 287;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Alt_T";        KbArray[i][1] = 276;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Alt_U";        KbArray[i][1] = 278;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Alt_W";        KbArray[i][1] = 273;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Alt_V";        KbArray[i][1] = 303;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Alt_X";        KbArray[i][1] = 301;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Alt_Y";        KbArray[i][1] = 277;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Alt_Z";        KbArray[i][1] = 300;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Ctrl_A";       KbArray[i][1] =   1;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Ctrl_B";       KbArray[i][1] =   2;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Ctrl_C";       KbArray[i][1] =   3;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Ctrl_D";       KbArray[i][1] =   4;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Ctrl_E";       KbArray[i][1] =   5;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Ctrl_F";       KbArray[i][1] =   6;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Ctrl_G";       KbArray[i][1] =   7;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Ctrl_H";       KbArray[i][1] =   8;
//   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Ctrl_I";       KbArray[i][1] =   9;
//   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Ctrl_J";       KbArray[i][1] =  10;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Ctrl_K";       KbArray[i][1] =  11;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Ctrl_L";       KbArray[i][1] =  12;
//   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Ctrl_M";       KbArray[i][1] =  13;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Ctrl_N";       KbArray[i][1] =  14;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Ctrl_O";       KbArray[i][1] =  15;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Ctrl_P";       KbArray[i][1] =  16;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Ctrl_Q";       KbArray[i][1] =  17;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Ctrl_R";       KbArray[i][1] =  18;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Ctrl_S";       KbArray[i][1] =  19;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Ctrl_T";       KbArray[i][1] =  20;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Ctrl_U";       KbArray[i][1] =  21;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Ctrl_W";       KbArray[i][1] =  23;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Ctrl_V";       KbArray[i][1] =  22;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Ctrl_X";       KbArray[i][1] =  24;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Ctrl_Y";       KbArray[i][1] =  25;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Ctrl_Z";       KbArray[i][1] =  26;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Left";         KbArray[i][1] = 331;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Up";           KbArray[i][1] = 328;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Right";        KbArray[i][1] = 333;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Down";         KbArray[i][1] = 336;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Home";         KbArray[i][1] = 327;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_End";          KbArray[i][1] = 335;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_PgUp";         KbArray[i][1] = 329;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_PgDown";       KbArray[i][1] = 337;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Ctrl_Left";    KbArray[i][1] = 371;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Ctrl_Up";      KbArray[i][1] = 397;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Ctrl_Right";   KbArray[i][1] = 372;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Ctrl_Down";    KbArray[i][1] = 401;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Ctrl_Home";    KbArray[i][1] = 375;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Ctrl_End";     KbArray[i][1] = 373;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Ctrl_PgUp";    KbArray[i][1] = 388;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Ctrl_PgDn";    KbArray[i][1] = 374;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Alt_Left";     KbArray[i][1] = 411;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Alt_Up";       KbArray[i][1] = 408;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Alt_Right";    KbArray[i][1] = 413;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Alt_Down";     KbArray[i][1] = 416;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Alt_Home";     KbArray[i][1] = 407;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Alt_End";      KbArray[i][1] = 415;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Alt_PgUp";     KbArray[i][1] = 409;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Alt_PgDn";     KbArray[i][1] = 417;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Tab";          KbArray[i][1] =   9;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Shift_Tab";    KbArray[i][1] = 271;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Ctrl_Tab";     KbArray[i][1] = 404;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Esc";          KbArray[i][1] =  27;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Space";        KbArray[i][1] =  32;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Ctrl_Space";   KbArray[i][1] = 259;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Enter";        KbArray[i][1] =  13;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Ctrl_Enter";   KbArray[i][1] =  10;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Alt_Enter";    KbArray[i][1] = 422;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Asterisk";     KbArray[i][1] =  42;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Alt_Asterisk"; KbArray[i][1] = 311;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Ctrl_Asterisk";KbArray[i][1] = 406;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Minus";        KbArray[i][1] =  45;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Alt_Minus";    KbArray[i][1] = 330;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Ctrl_Minus";   KbArray[i][1] = 398;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Plus";         KbArray[i][1] =  43;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Alt_Plus";     KbArray[i][1] = 334;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Ctrl_Plus";    KbArray[i][1] = 400;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Ctrl_Alt_F7";  KbArray[i][1] = 768;

   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_a";  KbArray[i][1] = 97;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_b";  KbArray[i][1] = 98;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_c";  KbArray[i][1] = 99;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_d";  KbArray[i][1] = 100;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_e";  KbArray[i][1] = 101;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_f";  KbArray[i][1] = 102;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_g";  KbArray[i][1] = 103;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_h";  KbArray[i][1] = 104;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_i";  KbArray[i][1] = 105;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_j";  KbArray[i][1] = 106;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_k";  KbArray[i][1] = 107;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_l";  KbArray[i][1] = 108;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_m";  KbArray[i][1] = 109;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_n";  KbArray[i][1] = 110;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_o";  KbArray[i][1] = 111;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_p";  KbArray[i][1] = 112;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_q";  KbArray[i][1] = 113;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_r";  KbArray[i][1] = 114;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_s";  KbArray[i][1] = 115;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_t";  KbArray[i][1] = 116;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_u";  KbArray[i][1] = 117;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_v";  KbArray[i][1] = 118;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_w";  KbArray[i][1] = 119;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_x";  KbArray[i][1] = 120;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_y";  KbArray[i][1] = 121;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_z";  KbArray[i][1] = 122;

   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Shift_a";  KbArray[i][1] = 65;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Shift_b";  KbArray[i][1] = 66;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Shift_c";  KbArray[i][1] = 67;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Shift_d";  KbArray[i][1] = 68;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Shift_e";  KbArray[i][1] = 69;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Shift_f";  KbArray[i][1] = 70;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Shift_g";  KbArray[i][1] = 71;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Shift_h";  KbArray[i][1] = 72;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Shift_i";  KbArray[i][1] = 73;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Shift_j";  KbArray[i][1] = 74;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Shift_k";  KbArray[i][1] = 75;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Shift_l";  KbArray[i][1] = 76;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Shift_m";  KbArray[i][1] = 77;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Shift_n";  KbArray[i][1] = 78;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Shift_o";  KbArray[i][1] = 79;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Shift_p";  KbArray[i][1] = 80;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Shift_q";  KbArray[i][1] = 81;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Shift_r";  KbArray[i][1] = 82;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Shift_s";  KbArray[i][1] = 83;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Shift_t";  KbArray[i][1] = 84;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Shift_u";  KbArray[i][1] = 85;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Shift_v";  KbArray[i][1] = 86;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Shift_w";  KbArray[i][1] = 87;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Shift_x";  KbArray[i][1] = 88;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Shift_y";  KbArray[i][1] = 89;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Shift_z";  KbArray[i][1] = 90;

   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_а";  KbArray[i][1] = 160;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_б";  KbArray[i][1] = 161;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_в";  KbArray[i][1] = 162;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_г";  KbArray[i][1] = 163;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_д";  KbArray[i][1] = 164;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_е";  KbArray[i][1] = 165;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_ё";  KbArray[i][1] = 241;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_ж";  KbArray[i][1] = 166;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_з";  KbArray[i][1] = 167;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_и";  KbArray[i][1] = 168;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_к";  KbArray[i][1] = 170;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_л";  KbArray[i][1] = 171;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_м";  KbArray[i][1] = 172;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_н";  KbArray[i][1] = 173;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_о";  KbArray[i][1] = 174;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_п";  KbArray[i][1] = 175;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_р";  KbArray[i][1] = 224;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_с";  KbArray[i][1] = 225;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_т";  KbArray[i][1] = 226;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_у";  KbArray[i][1] = 227;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_ф";  KbArray[i][1] = 228;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_х";  KbArray[i][1] = 229;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_ц";  KbArray[i][1] = 230;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_ч";  KbArray[i][1] = 231;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_ш";  KbArray[i][1] = 232;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_щ";  KbArray[i][1] = 233;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_ъ";  KbArray[i][1] = 234;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_ы";  KbArray[i][1] = 235;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_ь";  KbArray[i][1] = 236;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_э";  KbArray[i][1] = 237;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_ю";  KbArray[i][1] = 238;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_я";  KbArray[i][1] = 239;

   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Shift_а";  KbArray[i][1] = 128;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Shift_б";  KbArray[i][1] = 129;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Shift_в";  KbArray[i][1] = 130;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Shift_г";  KbArray[i][1] = 131;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Shift_д";  KbArray[i][1] = 132;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Shift_е";  KbArray[i][1] = 133;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Shift_ё";  KbArray[i][1] = 240;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Shift_ж";  KbArray[i][1] = 134;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Shift_з";  KbArray[i][1] = 135;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Shift_и";  KbArray[i][1] = 136;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Shift_к";  KbArray[i][1] = 138;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Shift_л";  KbArray[i][1] = 139;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Shift_м";  KbArray[i][1] = 140;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Shift_н";  KbArray[i][1] = 141;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Shift_о";  KbArray[i][1] = 142;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Shift_п";  KbArray[i][1] = 143;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Shift_р";  KbArray[i][1] = 144;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Shift_с";  KbArray[i][1] = 145;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Shift_т";  KbArray[i][1] = 146;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Shift_у";  KbArray[i][1] = 147;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Shift_ф";  KbArray[i][1] = 148;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Shift_х";  KbArray[i][1] = 149;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Shift_ц";  KbArray[i][1] = 150;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Shift_ч";  KbArray[i][1] = 151;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Shift_ш";  KbArray[i][1] = 152;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Shift_щ";  KbArray[i][1] = 153;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Shift_ъ";  KbArray[i][1] = 154;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Shift_ы";  KbArray[i][1] = 155;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Shift_ь";  KbArray[i][1] = 156;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Shift_э";  KbArray[i][1] = 157;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Shift_ю";  KbArray[i][1] = 158;
   i = KbArray.Size; KbArray[i] = TArray(); KbArray[i][0] = "Kb_Shift_я";  KbArray[i][1] = 159;


   macro GetValue(ConstName)
     i = 0;

     while (i < KbArray.Size)
       if (KbArray[i][0] == ConstName)
         return KbArray[i][1];
       end;

       i = i + 1;
     end;

     return -1;
   end;

   macro GetName(ConstValue)
     i = 0;

     while (i < KbArray.Size)
       if (KbArray[i][1] == ConstValue)
         return KbArray[i][0];
       end;

       i = i + 1;
     end;

     return "";
   end;
END;


/*Процедуры, описывающие действия при нажатии*/
CLASS ZUBScrollKbProc
   macro On_Kb_F1(RecordSet, Command, id, key)
   end;
   macro On_Kb_F2(RecordSet, Command, id, key)
   end;
   macro On_Kb_F3(RecordSet, Command, id, key)
   end;
   macro On_Kb_F4(RecordSet, Command, id, key)         
   end;
   macro On_Kb_F5(RecordSet, Command, id, key)         
   end;
   macro On_Kb_F6(RecordSet, Command, id, key)         
   end;
   macro On_Kb_F7(RecordSet, Command, id, key)         
   end;
   macro On_Kb_F8(RecordSet, Command, id, key)         
   end;
   macro On_Kb_F9(RecordSet, Command, id, key)         
   end;
   macro On_Kb_F10(RecordSet, Command, id, key)        
   end;
   macro On_Kb_F11(RecordSet, Command, id, key)        
   end;
   macro On_Kb_F12(RecordSet, Command, id, key)        
   end;
   macro On_Kb_Ctrl_F1(RecordSet, Command, id, key)    
   end;
   macro On_Kb_Ctrl_F2(RecordSet, Command, id, key)    
   end;
   macro On_Kb_Ctrl_F3(RecordSet, Command, id, key)    
   end;
   macro On_Kb_Ctrl_F4(RecordSet, Command, id, key)    
   end;
   macro On_Kb_Ctrl_F5(RecordSet, Command, id, key)    
   end;
   macro On_Kb_Ctrl_F6(RecordSet, Command, id, key)    
   end;
   macro On_Kb_Ctrl_F7(RecordSet, Command, id, key)    
   end;
   macro On_Kb_Ctrl_F8(RecordSet, Command, id, key)    
   end;
   macro On_Kb_Ctrl_F9(RecordSet, Command, id, key)    
   end;
   macro On_Kb_Ctrl_F10(RecordSet, Command, id, key)   
   end;
   macro On_Kb_Ctrl_F11(RecordSet, Command, id, key)   
   end;
   macro On_Kb_Ctrl_F12(RecordSet, Command, id, key)   
   end;
   macro On_Kb_Alt_F1(RecordSet, Command, id, key)   
   end;
   macro On_Kb_Alt_F2(RecordSet, Command, id, key)     
   end;
   macro On_Kb_Alt_F3(RecordSet, Command, id, key)     
   end;
   macro On_Kb_Alt_F4(RecordSet, Command, id, key)     
   end;
   macro On_Kb_Alt_F5(RecordSet, Command, id, key)     
   end;
   macro On_Kb_Alt_F6(RecordSet, Command, id, key)     
   end;
   macro On_Kb_Alt_F7(RecordSet, Command, id, key)     
   end;
   macro On_Kb_Alt_F8(RecordSet, Command, id, key)     
   end;
   macro On_Kb_Alt_F9(RecordSet, Command, id, key)     
   end;
   macro On_Kb_Alt_F10(RecordSet, Command, id, key)    
   end;
   macro On_Kb_Alt_F11(RecordSet, Command, id, key)    
   end;
   macro On_Kb_Alt_F12(RecordSet, Command, id, key)   
   end;
   macro On_Kb_Shift_F1(RecordSet, Command, id, key)   
   end;
   macro On_Kb_Shift_F2(RecordSet, Command, id, key)   
   end;
   macro On_Kb_Shift_F3(RecordSet, Command, id, key)   
   end;
   macro On_Kb_Shift_F4(RecordSet, Command, id, key)   
   end;
   macro On_Kb_Shift_F5(RecordSet, Command, id, key)   
   end;
   macro On_Kb_Shift_F6(RecordSet, Command, id, key)   
   end;
   macro On_Kb_Shift_F7(RecordSet, Command, id, key)   
   end;
   macro On_Kb_Shift_F8(RecordSet, Command, id, key)   
   end;
   macro On_Kb_Shift_F9(RecordSet, Command, id, key)   
   end;
   macro On_Kb_Shift_F10(RecordSet, Command, id, key)  
   end;
   macro On_Kb_Shift_F11(RecordSet, Command, id, key)  
   end;
   macro On_Kb_Shift_F12(RecordSet, Command, id, key)  
   end;
   macro On_Kb_Alt_0(RecordSet, Command, id, key)  
   end;
   macro On_Kb_Alt_1(RecordSet, Command, id, key)      
   end;
   macro On_Kb_Alt_2(RecordSet, Command, id, key)      
   end;
   macro On_Kb_Alt_3(RecordSet, Command, id, key)      
   end;
   macro On_Kb_Alt_4(RecordSet, Command, id, key)      
   end;
   macro On_Kb_Alt_5(RecordSet, Command, id, key)      
   end;
   macro On_Kb_Alt_6(RecordSet, Command, id, key)      
   end;
   macro On_Kb_Alt_7(RecordSet, Command, id, key)      
   end;
   macro On_Kb_Alt_8(RecordSet, Command, id, key)      
   end;
   macro On_Kb_Alt_9(RecordSet, Command, id, key)      
   end;
   macro On_Kb_Del(RecordSet, Command, id, key)    
   end;
   macro On_Kb_Ins(RecordSet, Command, id, key)    
   end;
   macro On_Kb_Alt_A(RecordSet, Command, id, key)      
   end;
   macro On_Kb_Alt_B(RecordSet, Command, id, key)      
   end;
   macro On_Kb_Alt_C(RecordSet, Command, id, key)      
   end;
   macro On_Kb_Alt_D(RecordSet, Command, id, key)      
   end;
   macro On_Kb_Alt_E(RecordSet, Command, id, key)      
   end;
   macro On_Kb_Alt_F(RecordSet, Command, id, key)      
   end;
   macro On_Kb_Alt_G(RecordSet, Command, id, key)      
   end;
   macro On_Kb_Alt_H(RecordSet, Command, id, key)      
   end;
   macro On_Kb_Alt_I(RecordSet, Command, id, key)      
   end;
   macro On_Kb_Alt_J(RecordSet, Command, id, key)      
   end;
   macro On_Kb_Alt_K(RecordSet, Command, id, key)      
   end;
   macro On_Kb_Alt_L(RecordSet, Command, id, key)      
   end;
   macro On_Kb_Alt_M(RecordSet, Command, id, key)      
   end;
   macro On_Kb_Alt_N(RecordSet, Command, id, key)      
   end;
   macro On_Kb_Alt_O(RecordSet, Command, id, key)      
   end;
   macro On_Kb_Alt_P(RecordSet, Command, id, key)      
   end;
   macro On_Kb_Alt_Q(RecordSet, Command, id, key)      
   end;
   macro On_Kb_Alt_R(RecordSet, Command, id, key)      
   end;
   macro On_Kb_Alt_S(RecordSet, Command, id, key)      
   end;
   macro On_Kb_Alt_T(RecordSet, Command, id, key)      
   end;
   macro On_Kb_Alt_U(RecordSet, Command, id, key)      
   end;
   macro On_Kb_Alt_W(RecordSet, Command, id, key)      
   end;
   macro On_Kb_Alt_V(RecordSet, Command, id, key)      
   end;
   macro On_Kb_Alt_X(RecordSet, Command, id, key)      
   end;
   macro On_Kb_Alt_Y(RecordSet, Command, id, key)      
   end;
   macro On_Kb_Alt_Z(RecordSet, Command, id, key)     
   end;
   macro On_Kb_Ctrl_A(RecordSet, Command, id, key)     
   end;
   macro On_Kb_Ctrl_B(RecordSet, Command, id, key)     
   end;
   macro On_Kb_Ctrl_C(RecordSet, Command, id, key)     
   end;
   macro On_Kb_Ctrl_D(RecordSet, Command, id, key)     
   end;
   macro On_Kb_Ctrl_E(RecordSet, Command, id, key)     
   end;
   macro On_Kb_Ctrl_F(RecordSet, Command, id, key)     
   end;
   macro On_Kb_Ctrl_G(RecordSet, Command, id, key)     
   end;
   macro On_Kb_Ctrl_H(RecordSet, Command, id, key)     
   end;
//   macro On_Kb_Ctrl_I(RecordSet, Command, id, key)     
//   end;
//   macro On_Kb_Ctrl_J(RecordSet, Command, id, key)     
//   end;
   macro On_Kb_Ctrl_K(RecordSet, Command, id, key)     
   end;
   macro On_Kb_Ctrl_L(RecordSet, Command, id, key)     
   end;
//   macro On_Kb_Ctrl_M(RecordSet, Command, id, key)     
//   end;
   macro On_Kb_Ctrl_N(RecordSet, Command, id, key)     
   end;
   macro On_Kb_Ctrl_O(RecordSet, Command, id, key)     
   end;
   macro On_Kb_Ctrl_P(RecordSet, Command, id, key)     
   end;
   macro On_Kb_Ctrl_Q(RecordSet, Command, id, key)     
   end;
   macro On_Kb_Ctrl_R(RecordSet, Command, id, key)     
   end;
   macro On_Kb_Ctrl_S(RecordSet, Command, id, key)     
   end;
   macro On_Kb_Ctrl_T(RecordSet, Command, id, key)     
   end;
   macro On_Kb_Ctrl_U(RecordSet, Command, id, key)     
   end;
   macro On_Kb_Ctrl_W(RecordSet, Command, id, key)     
   end;
   macro On_Kb_Ctrl_V(RecordSet, Command, id, key)     
   end;
   macro On_Kb_Ctrl_X(RecordSet, Command, id, key)     
   end;
   macro On_Kb_Ctrl_Y(RecordSet, Command, id, key)     
   end;
   macro On_Kb_Ctrl_Z(RecordSet, Command, id, key)     
   end;
   macro On_Kb_Left(RecordSet, Command, id, key)     
   end;
   macro On_Kb_Up(RecordSet, Command, id, key)     
   end;
   macro On_Kb_Right(RecordSet, Command, id, key)     
   end;
   macro On_Kb_Down(RecordSet, Command, id, key)       
   end;
   macro On_Kb_Home(RecordSet, Command, id, key)       
   end;
   macro On_Kb_End(RecordSet, Command, id, key)       
   end;
   macro On_Kb_PgUp(RecordSet, Command, id, key)       
   end;
   macro On_Kb_PgDown(RecordSet, Command, id, key)  
   end;
   macro On_Kb_Ctrl_Left(RecordSet, Command, id, key)  
   end;
   macro On_Kb_Ctrl_Up(RecordSet, Command, id, key) 
   end;
   macro On_Kb_Ctrl_Right(RecordSet, Command, id, key) 
   end;
   macro On_Kb_Ctrl_Down(RecordSet, Command, id, key)  
   end;
   macro On_Kb_Ctrl_Home(RecordSet, Command, id, key)  
   end;
   macro On_Kb_Ctrl_End(RecordSet, Command, id, key) 
   end;
   macro On_Kb_Ctrl_PgUp(RecordSet, Command, id, key)  
   end;
   macro On_Kb_Ctrl_PgDn(RecordSet, Command, id, key)  
   end;
   macro On_Kb_Alt_Left(RecordSet, Command, id, key) 
   end;
   macro On_Kb_Alt_Up(RecordSet, Command, id, key)
   end;
   macro On_Kb_Alt_Right(RecordSet, Command, id, key)  
   end;
   macro On_Kb_Alt_Down(RecordSet, Command, id, key)   
   end;
   macro On_Kb_Alt_Home(RecordSet, Command, id, key)   
   end;
   macro On_Kb_Alt_End(RecordSet, Command, id, key)  
   end;
   macro On_Kb_Alt_PgUp(RecordSet, Command, id, key)   
   end;
   macro On_Kb_Alt_PgDn(RecordSet, Command, id, key)   
   end;
   macro On_Kb_Tab(RecordSet, Command, id, key)   
   end;
   macro On_Kb_Shift_Tab(RecordSet, Command, id, key)  
   end;
   macro On_Kb_Ctrl_Tab(RecordSet, Command, id, key)  
   end;
   macro On_Kb_Esc(RecordSet, Command, id, key)      
   end;
   macro On_Kb_Space(RecordSet, Command, id, key)      
   end;
   macro On_Kb_Ctrl_Space(RecordSet, Command, id, key)
   end;
   macro On_Kb_Enter(RecordSet, Command, id, key) 
   end;
   macro On_Kb_Ctrl_Enter(RecordSet, Command, id, key)
   end;
   macro On_Kb_Asterisk(RecordSet, Command, id, key) 
   end;
   macro On_Kb_Alt_Asterisk(RecordSet, Command, id, key)
   end;
   macro On_Kb_Ctrl_Asterisk(RecordSet, Command, id, key)
   end;
   macro On_Kb_Minus(RecordSet, Command, id, key)  
   end;
   macro On_Kb_Alt_Minus(RecordSet, Command, id, key)  
   end;
   macro On_Kb_Ctrl_Minus(RecordSet, Command, id, key) 
   end;
   macro On_Kb_Plus(RecordSet, Command, id, key) 
   end;
   macro On_Kb_Alt_Plus(RecordSet, Command, id, key)  
   end;
   macro On_Kb_Ctrl_Plus(RecordSet, Command, id, key)  
   end;
   macro On_Kb_Ctrl_Alt_F7(RecordSet, Command, id, key)
   end;

   macro On_Kb_a(RecordSet, Command, id, key)
   end;
   macro On_Kb_b(RecordSet, Command, id, key)
   end;
   macro On_Kb_c(RecordSet, Command, id, key)
   end;
   macro On_Kb_d(RecordSet, Command, id, key)
   end;
   macro On_Kb_e(RecordSet, Command, id, key)
   end;
   macro On_Kb_f(RecordSet, Command, id, key)
   end;
   macro On_Kb_g(RecordSet, Command, id, key)
   end;
   macro On_Kb_h(RecordSet, Command, id, key)
   end;
   macro On_Kb_i(RecordSet, Command, id, key)
   end;
   macro On_Kb_j(RecordSet, Command, id, key)
   end;
   macro On_Kb_k(RecordSet, Command, id, key)
   end;
   macro On_Kb_l(RecordSet, Command, id, key)
   end;
   macro On_Kb_m(RecordSet, Command, id, key)
   end;
   macro On_Kb_n(RecordSet, Command, id, key)
   end;
   macro On_Kb_o(RecordSet, Command, id, key)
   end;
   macro On_Kb_p(RecordSet, Command, id, key)
   end;
   macro On_Kb_q(RecordSet, Command, id, key)
   end;
   macro On_Kb_r(RecordSet, Command, id, key)
   end;
   macro On_Kb_s(RecordSet, Command, id, key)
   end;
   macro On_Kb_t(RecordSet, Command, id, key)
   end;
   macro On_Kb_u(RecordSet, Command, id, key)
   end;
   macro On_Kb_v(RecordSet, Command, id, key)
   end;
   macro On_Kb_w(RecordSet, Command, id, key)
   end;
   macro On_Kb_x(RecordSet, Command, id, key)
   end;
   macro On_Kb_y(RecordSet, Command, id, key)
   end;
   macro On_Kb_z(RecordSet, Command, id, key)
   end;

   macro On_Kb_Shift_a(RecordSet, Command, id, key)
   end;
   macro On_Kb_Shift_b(RecordSet, Command, id, key)
   end;
   macro On_Kb_Shift_c(RecordSet, Command, id, key)
   end;
   macro On_Kb_Shift_d(RecordSet, Command, id, key)
   end;
   macro On_Kb_Shift_e(RecordSet, Command, id, key)
   end;
   macro On_Kb_Shift_f(RecordSet, Command, id, key)
   end;
   macro On_Kb_Shift_g(RecordSet, Command, id, key)
   end;
   macro On_Kb_Shift_h(RecordSet, Command, id, key)
   end;
   macro On_Kb_Shift_i(RecordSet, Command, id, key)
   end;
   macro On_Kb_Shift_j(RecordSet, Command, id, key)
   end;
   macro On_Kb_Shift_k(RecordSet, Command, id, key)
   end;
   macro On_Kb_Shift_l(RecordSet, Command, id, key)
   end;
   macro On_Kb_Shift_m(RecordSet, Command, id, key)
   end;
   macro On_Kb_Shift_n(RecordSet, Command, id, key)
   end;
   macro On_Kb_Shift_o(RecordSet, Command, id, key)
   end;
   macro On_Kb_Shift_p(RecordSet, Command, id, key)
   end;
   macro On_Kb_Shift_q(RecordSet, Command, id, key)
   end;
   macro On_Kb_Shift_r(RecordSet, Command, id, key)
   end;
   macro On_Kb_Shift_s(RecordSet, Command, id, key)
   end;
   macro On_Kb_Shift_t(RecordSet, Command, id, key)
   end;
   macro On_Kb_Shift_u(RecordSet, Command, id, key)
   end;
   macro On_Kb_Shift_v(RecordSet, Command, id, key)
   end;
   macro On_Kb_Shift_w(RecordSet, Command, id, key)
   end;
   macro On_Kb_Shift_x(RecordSet, Command, id, key)
   end;
   macro On_Kb_Shift_y(RecordSet, Command, id, key)
   end;
   macro On_Kb_Shift_z(RecordSet, Command, id, key)
   end;

   macro On_Kb_а(RecordSet, Command, id, key)
   end;
   macro On_Kb_б(RecordSet, Command, id, key)
   end;
   macro On_Kb_в(RecordSet, Command, id, key)
   end;
   macro On_Kb_г(RecordSet, Command, id, key)
   end;
   macro On_Kb_д(RecordSet, Command, id, key)
   end;
   macro On_Kb_е(RecordSet, Command, id, key)
   end;
   macro On_Kb_ё(RecordSet, Command, id, key)
   end;
   macro On_Kb_ж(RecordSet, Command, id, key)
   end;
   macro On_Kb_з(RecordSet, Command, id, key)
   end;
   macro On_Kb_и(RecordSet, Command, id, key)
   end;
   macro On_Kb_к(RecordSet, Command, id, key)
   end;
   macro On_Kb_л(RecordSet, Command, id, key)
   end;
   macro On_Kb_м(RecordSet, Command, id, key)
   end;
   macro On_Kb_н(RecordSet, Command, id, key)
   end;
   macro On_Kb_о(RecordSet, Command, id, key)
   end;
   macro On_Kb_п(RecordSet, Command, id, key)
   end;
   macro On_Kb_р(RecordSet, Command, id, key)
   end;
   macro On_Kb_с(RecordSet, Command, id, key)
   end;
   macro On_Kb_т(RecordSet, Command, id, key)
   end;
   macro On_Kb_у(RecordSet, Command, id, key)
   end;
   macro On_Kb_ф(RecordSet, Command, id, key)
   end;
   macro On_Kb_х(RecordSet, Command, id, key)
   end;
   macro On_Kb_ц(RecordSet, Command, id, key)
   end;
   macro On_Kb_ч(RecordSet, Command, id, key)
   end;
   macro On_Kb_ш(RecordSet, Command, id, key)
   end;
   macro On_Kb_щ(RecordSet, Command, id, key)
   end;
   macro On_Kb_ъ(RecordSet, Command, id, key)
   end;
   macro On_Kb_ы(RecordSet, Command, id, key)
   end;
   macro On_Kb_ь(RecordSet, Command, id, key)
   end;
   macro On_Kb_э(RecordSet, Command, id, key)
   end;
   macro On_Kb_ю(RecordSet, Command, id, key)
   end;
   macro On_Kb_я(RecordSet, Command, id, key)
   end;

   macro On_Kb_Shift_а(RecordSet, Command, id, key)
   end;
   macro On_Kb_Shift_б(RecordSet, Command, id, key)
   end;
   macro On_Kb_Shift_в(RecordSet, Command, id, key)
   end;
   macro On_Kb_Shift_г(RecordSet, Command, id, key)
   end;
   macro On_Kb_Shift_д(RecordSet, Command, id, key)
   end;
   macro On_Kb_Shift_е(RecordSet, Command, id, key)
   end;
   macro On_Kb_Shift_ё(RecordSet, Command, id, key)
   end;
   macro On_Kb_Shift_ж(RecordSet, Command, id, key)
   end;
   macro On_Kb_Shift_з(RecordSet, Command, id, key)
   end;
   macro On_Kb_Shift_и(RecordSet, Command, id, key)
   end;
   macro On_Kb_Shift_к(RecordSet, Command, id, key)
   end;
   macro On_Kb_Shift_л(RecordSet, Command, id, key)
   end;
   macro On_Kb_Shift_м(RecordSet, Command, id, key)
   end;
   macro On_Kb_Shift_н(RecordSet, Command, id, key)
   end;
   macro On_Kb_Shift_о(RecordSet, Command, id, key)
   end;
   macro On_Kb_Shift_п(RecordSet, Command, id, key)
   end;
   macro On_Kb_Shift_р(RecordSet, Command, id, key)
   end;
   macro On_Kb_Shift_с(RecordSet, Command, id, key)
   end;
   macro On_Kb_Shift_т(RecordSet, Command, id, key)
   end;
   macro On_Kb_Shift_у(RecordSet, Command, id, key)
   end;
   macro On_Kb_Shift_ф(RecordSet, Command, id, key)
   end;
   macro On_Kb_Shift_х(RecordSet, Command, id, key)
   end;
   macro On_Kb_Shift_ц(RecordSet, Command, id, key)
   end;
   macro On_Kb_Shift_ч(RecordSet, Command, id, key)
   end;
   macro On_Kb_Shift_ш(RecordSet, Command, id, key)
   end;
   macro On_Kb_Shift_щ(RecordSet, Command, id, key)
   end;
   macro On_Kb_Shift_ъ(RecordSet, Command, id, key)
   end;
   macro On_Kb_Shift_ы(RecordSet, Command, id, key)
   end;
   macro On_Kb_Shift_ь(RecordSet, Command, id, key)
   end;
   macro On_Kb_Shift_э(RecordSet, Command, id, key)
   end;
   macro On_Kb_Shift_ю(RecordSet, Command, id, key)
   end;
   macro On_Kb_Shift_я(RecordSet, Command, id, key)
   end;
END;


/*Процедуры по умолчанию. Ничего не делают, возвращают значение.*/
macro ScrollResultIgnore(rsd, cmd, id, key)
   return CM_IGNORE;
end;

macro ScrollResultSelect(rsd, cmd, id, key)
   if(cmd.RecCount == 0)
     return CM_IGNORE;
   end;

   return CM_SELECT;
end;

macro ScrollResultDefault(rsd, cmd, id, key)
   return CM_DEFAULT;
end;

macro ScrollResultCancel(rsd, cmd, id, key)
   return CM_CANCEL;
end;

macro ScrollOnInit(rsd, cmd, id, key)
end;



/*Столбцы скроллинга*/
CLASS ZUBScrollColumns
  var CArray = TArray();
  var Count = 0;

  /*Добавить один столбец*/
  macro Add (fld, head, width, fldtype)
     var l_fld, 
         l_head, 
         l_width, 
         l_fldtype, 
         l_decPoint;

     if((ValType(fld) == V_UNDEF) OR (fld == NULL))
       return;
     else
       l_fld = fld;
     end;

     if(ValType(head) == V_UNDEF)
       l_head = NULL;
     else
       l_head = head;
     end;

     if(ValType(width) == V_UNDEF)
       l_width = NULL;
     else
       l_width = width;
     end;

     if(ValType(fldtype) == V_UNDEF)
       l_fldtype = ZUB_SCR_COL_NONEDITABLE;
     elif(    (fldtype != ZUB_SCR_COL_EDITABLE) 
          and (fldtype != ZUB_SCR_COL_NONEDITABLE) 
          and (fldtype != ZUB_SCR_COL_SCROLLABLE)
         )
       l_fldtype = ZUB_SCR_COL_NONEDITABLE;
     else
       l_fldtype = fldtype;
     end;

     if (not GetParm(5, l_decPoint))
       l_decPoint = -1;
     end;

     CArray.value (Count * 6)     = l_fld;      /*имя поля в источнике данных. Этот атрибут необходимо задать обязательно.*/
     CArray.value (Count * 6 + 1) = l_head;     /*заголовок колонки. Если атрибут не задан, в качестве заголовка используется название поля.*/
     CArray.value (Count * 6 + 2) = l_width;    /*начальная ширина колонки. Если атрибут не задан, используется автоматическое вычисление ширины колонки.*/
     CArray.value (Count * 6 + 3) = l_fldtype;  /*тип поля. 1 - редактируемое, 2 - нередактируемое, 5 - прокручиваемое. Если атрибут не задан используется 1*/
     CArray.value (Count * 6 + 4) = l_decPoint; /*количество знаков после точки для числовых полей*/
     CArray.value (Count * 6 + 5) = 0;          /*зарезервировано*/

     Count = Count + 1;
  end;

  /*Удалить все столбцы*/
  macro Clear
    CArray.Size = 0;
    Count = 0;
  end;
END;/*ZUBScrollColumns*/


macro UpdateCatch(rsd)
 rsd.Update;

 onError
   return;
end;

/*Сам скроллинг*/
CLASS ZUBScroll
  var DlgRec         = null;

  var SqlText        = null; //Текст запроса для построения скроллинга
  var RecordSet      = null; //Рекордсет для построения скроллинга
  var Command        = null; //RSCommand для построения скроллинга
  var Params         = TArray();//Парметры для RSCommand
  Params.Size = 0;

  var ScrollPrompt   = null; //Сообщение, выводимое в нижнюю строку вместе со скроллингом
  var ScrollHead     = null; //Заголовок скроллинга
  var ScrollReadOnly = false;//Скроллинг только для чтения
  var ScrollUniqName = null; //Уникальное имя данного окна просмотра. Используется для сохранения и восстановления изменений, которые вносятся пользователем во внешний вид колонок: их ширины, позиции на экране, видимость. Если имя не задано все визуальные атрибуты колонок будут иметь изначальные значения по умолчанию
  var ScrollX        = null; //Координата X верхнего левого угла (если равен -1, то выполняется центрирование окна по горизонтали)
  var ScrollY        = null; //Координата Y верхнего левого угла (если равен -1, то выполняется центрирование окна по вертикали)
  var ScrollCX       = null; //Ширина окна прокрутки набора данных
  var ScrollCY       = null; //Высота окна прокрутки набора данных
  var ScrollFocused  = true; //если равен true, то фокус ввода будет установлен на скроллинг, иначе на первое поле, либо поле, заданное при обработке сообщения DLG_INIT (работает только если DlgRec не null)
  var ScrollEvproc   = -1; //используемый обработчик сообщений или null, если обработчик не нужен. Обработчик  задаётся именем RSL процедуры, ссылкой на RSL процедуру, либо ссылкой на метод  (для встаиваемых в диалоговое окно, скроллингов)

  var Columns        = ZUBScrollColumns; // Столбцы скроллинга

  var Keys               = ZUBScrollKeys;
  var KbProc             = ZUBScrollKbProc;
  var Keys_MSel          = TArray; 
      Keys_MSel.Size     = 0;
  var KbProc_MSel_Start  = ZUBScrollKbProc;
  var KbProc_MSel        = ZUBScrollKbProc;
  var KbProc_MSel_End    = ZUBScrollKbProc;

  private var sql, head, prompt;
  var was_getrecordset = false;
  private var i = 0;


  macro CreateCommand
    this.UpdateSqlText;

    Command = RSDCommand(sql);
  end;

  macro GetRecordSet
    var i = 0;

    this.CreateCommand;

    while(i < Params.Size)
      this.Command.addParam("parm" + i, RSDBP_IN, Params[i]);

      i = i + 1;
    end;

    this.Command.execute();
    this.RecordSet = RSDRecordSet(Command, RSDVAL_CLIENT, RSDVAL_STATIC);

    was_getrecordset = true;
  end;

  macro CreateRecordSet
    this.GetRecordSet;
  end;

  macro GetProcPropName(keyname)
    return "On_" + keyname;
  end;
                                                                    
  macro SetMacroOnKeys(key_, macroname)
    if (Keys.GetName(key_) != "")
      GenAttach ( KbProc, GetProcPropName(Keys.GetName(key_)), macroName);
    end;
  end;

  macro SetMacroOnKeysMultiSel(key_, macroname_start, macroname, macroname_end)
    if (Keys.GetName(key_) != "")
      Keys_MSel[Keys_MSel.Size] = key_;

      if((macroname_start != NULL) AND (macroname_start != ""))
         GenAttach ( KbProc_MSel_Start, GetProcPropName(Keys.GetName(key_)), macroname_start);
      end;

      if((macroname != NULL) AND (macroname != ""))
         GenAttach ( KbProc_MSel, GetProcPropName(Keys.GetName(key_)), macroname);
      end;

      if((macroname_end != NULL) AND (macroname_end != ""))
         GenAttach ( KbProc_MSel_End, GetProcPropName(Keys.GetName(key_)), macroname_end);
      end;
    end;
  end;

  macro UpdateSqlText
    var s;

    if (GetParm(1, s))
      SqlText = s;
    end;

    sql = SqlText;
  end;

  macro Scroll
    macro ZUBScrolDefaultEvProc(RecordSet, Command, id, key)
      private var i;
      private var PropName;

      if (Command == DLG_INIT)
         ScrollOnInit(RecordSet, Command, id, key);
         i = 0;
         while(i < Keys_MSel.Size)
           AddMultiAction (RecordSet, Keys_MSel[i]);
           i = i + 1;
         end;
      end;

      if (Command == DLG_KEY)
         i = 0;

         while(i < Keys.KbArray.Size)

           if((Keys.KbArray[i][1] == key) and (GenPropID (KbProc, GetProcPropName(Keys.KbArray[i][0])) >= 0))
               return GenRun(KbProc, GetProcPropName(Keys.KbArray[i][0]), RecordSet, Command, id, key);
           end;

           i = i + 1;
         end;
      end;

      if (Command == DLG_MSELSTART)
         i = 0;

         while(i < Keys.KbArray.Size)

           if((Keys.KbArray[i][1] == key) and (GenPropID (KbProc_MSel_Start, GetProcPropName(Keys.KbArray[i][0])) >= 0))
               return GenRun(KbProc_MSel_Start, GetProcPropName(Keys.KbArray[i][0]), RecordSet, Command, id, key);
           end;

           i = i + 1;
         end;
      end;

      if (Command == DLG_MSEL)
         i = 0;

         while(i < Keys.KbArray.Size)

           if((Keys.KbArray[i][1] == key) and (GenPropID (KbProc_MSel, GetProcPropName(Keys.KbArray[i][0])) >= 0))
               return GenRun(KbProc_MSel, GetProcPropName(Keys.KbArray[i][0]), RecordSet, Command, id, key);
           end;

           i = i + 1;
         end;
      end;

      if (Command == DLG_MSELEND)
         i = 0;

         while(i < Keys.KbArray.Size)

           if((Keys.KbArray[i][1] == key) and (GenPropID (KbProc_MSel_End, GetProcPropName(Keys.KbArray[i][0])) >= 0))
               return GenRun(KbProc_MSel_End, GetProcPropName(Keys.KbArray[i][0]), RecordSet, Command, id, key);
           end;

           i = i + 1;
         end;
      end;

      return CM_DEFAULT;
    end;

    var stat;
    var LScrollEvproc;

    if (not GetParm(1, sql))
      sql = SqlText;
    end;

    if (not GetParm(2, head))
      head = ScrollHead;
    end;

    if (not GetParm(3, prompt))
      prompt = ScrollPrompt;
    end;

    if (not was_getrecordset)
      GetRecordSet;
    end;

    LScrollEvproc =  ScrollEvproc;

    if (DlgRec == null)
      if  (LScrollEvproc == -1)
        LScrollEvproc = "ZUBScrolDefaultEvProc";
      end;

      if (Columns.Count == 0)
        stat = RunScroll(RecordSet,          null,           null, ScrollUniqName, LScrollEvproc, head, prompt, ScrollReadOnly, ScrollX, ScrollY, ScrollCX, ScrollCY);
      else
        stat = RunScroll(RecordSet, Columns.Count, Columns.CArray, ScrollUniqName, LScrollEvproc, head, prompt, ScrollReadOnly, ScrollX, ScrollY, ScrollCX, ScrollCY);
      end;
    else
      if(LScrollEvproc == -1)
        LScrollEvproc = null;
      end;

      if (Columns.Count == 0)
        stat = AddScroll(DlgRec, RecordSet,          null,           null, LScrollEvproc, ScrollReadOnly, ScrollFocused);
      else
        stat = AddScroll(DlgRec, RecordSet, Columns.Count, Columns.CArray, LScrollEvproc, ScrollReadOnly, ScrollFocused);
      end;
    end;

    return stat;
  end;
END;/*ZUBScroll*/


