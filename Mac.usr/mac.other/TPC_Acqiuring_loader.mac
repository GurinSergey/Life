/* ---------------------------------------------------------------------------------------------------------------
 * Макрос массового формирования платежей бухгалтерии банка по Excel-файлу Universal Report
 * zip_z.
 *
 * @begin  : 2010-12-22
 * @end    : 2010-12-22
 *
 * @changes: 2010-12-23 zip_z уточнены реквизиты формирования платежных документов по информации dsprterm_usr
 *           2010-12-24 zip_z изменена объектная модель и структура макроса, оптимизация быстродействия.
 *           // KS 24.05.2012 C-10270 Проверка 101
 *           2013-09-11 Yushmanov C-22159 изменена процедура формирования документов по эквайрингу
 *           2014-03-14 Vaschenko изменен алгоритм сбора статистики по созданных документах
 *           2015-04-15 VEA C-39364 Настройка счетов для Солидарности
 *----------------------------------------------------------------------------------------------------------------*/

import Rsd, rcw, rsexts;
import globals, oralib, likePy;
import "fg_Life_parm.mac", "lib_fg.mac";

import BankInter;
import PaymInter;
import OprInter;

import "diver.mac";// KS 24.05.2012 C-10270 Проверка 101

private const ERR_EXIT_SUCCESS = 0;
private const ERR_EXIT_FAILURE = 1;
private const SPECVAL = 26;

const XL_COLUMN_A = 1;
const XL_COLUMN_B = 2;
const XL_COLUMN_C = 3;
const XL_COLUMN_D = 4;
const XL_COLUMN_E = 5;
const XL_COLUMN_F = 6;
const XL_COLUMN_G = 7;
const XL_COLUMN_H = 8;
const XL_COLUMN_I = 9;
const XL_COLUMN_J = 10;
const XL_COLUMN_K = 11;
const XL_COLUMN_L = 12;
const XL_COLUMN_M = 13;
const XL_COLUMN_N = 14;
const XL_COLUMN_O = 15;

var errCode = 0;

var XL; // для коннекта с экселем
var XL_Sheet;
var XL_Book;
var XL_CurrentRowNumber = 0; // главный счетчик по входному файлу

var PACK_NUMBER_OURBANK = 1;
var PACK_NUMBER_OUTSIDE_BANK = 605;
var PACK_NUMBER_MEMORDER = 1505;

var ACC_PRBB_PAYER_OURCARD   = "30232810529000060071";
var ACC_PRBB_DEBTSET_DEBET   = "30233810719000060071";
var ACC_VUZ_PAYER_OURCARD    = "30232810601080000004";
var ACC_VUZ_PAYER_OTHERCARD  = "30233810201080000005";
var ACC_EXV_DEBTSET_DEBET    = "30233810800000010285";
var ACC_EXV_DEBTSET_CREDIT   = "30232810500000010285";
var ACC_VUZ_DEBTSET_DEBET    = "47423810201080000099";
var ACC_VUZ_DEBTSET_CREDIT   = "30232810501080000010";
var ACC_GEB_DEBTSET_DEBET    = "30233810919000070004";
var ACC_GEB_DEBTSET_CREDIT   = "30232810309000270004";
var ACC_SLD_DEBTSET_DEBET    = "30233810119000060071"; //2015-04-15 VEA
var ACC_SLD_DEBTSET_CREDIT   = "30232810229030060071";

    //если значение из реестра получить не удалось, переменная своего текущего значения не изменит
    GetRegistryValue ( "PRBB\\ACQUIRING\\PACK_NUMBER_OURBANK",      0, PACK_NUMBER_OURBANK      );
    GetRegistryValue ( "PRBB\\ACQUIRING\\PACK_NUMBER_OUTSIDE_BANK", 0, PACK_NUMBER_OUTSIDE_BANK );
    GetRegistryValue ( "PRBB\\ACQUIRING\\PACK_NUMBER_MEMORDER",     0, PACK_NUMBER_MEMORDER     );
    GetRegistryValue ( "PRBB\\ACQUIRING\\ACC_PRBB_PAYER_OURCARD",   0, ACC_PRBB_PAYER_OURCARD   );
    GetRegistryValue ( "PRBB\\ACQUIRING\\ACC_PRBB_DEBTSET_DEBET",   0, ACC_PRBB_DEBTSET_DEBET   );
    GetRegistryValue ( "PRBB\\ACQUIRING\\ACC_VUZ_PAYER_OURCARD",    0, ACC_VUZ_PAYER_OURCARD    );
    GetRegistryValue ( "PRBB\\ACQUIRING\\ACC_VUZ_PAYER_OTHERCARD",  0, ACC_VUZ_PAYER_OTHERCARD  );
    GetRegistryValue ( "PRBB\\ACQUIRING\\ACC_EXV_DEBTSET_DEBET",    0, ACC_EXV_DEBTSET_DEBET    );
    GetRegistryValue ( "PRBB\\ACQUIRING\\ACC_EXV_DEBTSET_CREDIT",   0, ACC_EXV_DEBTSET_CREDIT   );
    GetRegistryValue ( "PRBB\\ACQUIRING\\ACC_VUZ_DEBTSET_DEBET",    0, ACC_VUZ_DEBTSET_DEBET    );
    GetRegistryValue ( "PRBB\\ACQUIRING\\ACC_VUZ_DEBTSET_CREDIT",   0, ACC_VUZ_DEBTSET_CREDIT   );
    GetRegistryValue ( "PRBB\\ACQUIRING\\ACC_GEB_DEBTSET_DEBET",    0, ACC_GEB_DEBTSET_DEBET    ); //2015-04-15 VEA
    GetRegistryValue ( "PRBB\\ACQUIRING\\ACC_GEB_DEBTSET_CREDIT",   0, ACC_GEB_DEBTSET_CREDIT   );


macro PM_CreateMemorialOrder (p_payer_account, 
                              p_receiver_account,  
                              p_value_date, 
                              p_num_doc, 
                              p_oper, 
                              p_debet_sum, 
                              p_ground, 
                              p_pack )

    var Memorial            = RsbMemorialOrder ( );
    var Payment             = Memorial.Payment ( );

    Memorial.State          = 0;
    Memorial.Oper           = {oper};
    Memorial.Chapter        = 1;
    Memorial.Code_Currency  = 0;
    Memorial.Kind_Oper      = " 4";
    //Gurin S. 23.06.2015 R-595472-2
    //Memorial.Origin         = 1;
    Memorial.Origin         = 2600; //Получен из ПЦ (эквайринг)
    Memorial.LaunchOper     = false;

    Payment.DocKind         = 70;
    Payment.Purpose         = PM_PURP_MEMORDER;
    Payment.ShifrOper       = "09";

    Payment.BaseFIID            = 0;
    Payment.Number              = p_num_doc;
    Payment.Ground              = p_ground;
    Payment.PayerAmount         = 
    Payment.ReceiverAmount      = 
    Payment.BaseAmount          = p_debet_sum;
    Payment.ValueDate           = 
    Payment.Date                = 
    Payment.ClientDate          = {CurDate};
    Payment.PayerBankEnterDate  = p_value_date;
    
    Payment.IsPlanPaym          = "X";
    Payment.PaymentKind         = "Н";//"Э"; Gurin S. 23.07.2013
    Payment.Priority            = 6;
    Payment.NumberPack          = p_pack;

    Payment.SetPayerPI ( PAYMENTS_GROUP_INTERNAL,          
                         {OurBank},
                         3,
                         {MFO_BANK},
                         {NAME_BANK},
                         {CORAC_BANK},
                         0,
                         1,
                         p_payer_account);

    Payment.SetReceiverPI ( PAYMENTS_GROUP_INTERNAL,       
                            {OurBank},
                            3,
                            {MFO_BANK},
                            {NAME_BANK},
                            {CORAC_BANK},
                            0,
                            1,
                            p_receiver_account);
                               
    return Memorial.Update();

OnError(Err)
    MsgBox(Err.Message,"| at ",Err.Line,"|in ",Err.Module); 
end;


macro PM_CreateBankPayment (p_payer_account, 
                            p_receiver_account,  
                            p_value_date, 
                            p_num_doc, 
                            p_oper, 
                            p_debet_sum, 
                            p_ground, 
                            p_pack, 
                            p_mfo_receiver, 
                            p_receiver_name, 
                            p_receiver_inn )

    // Платеж ББ

    var BankPaym = RsbBankPayment ();

    BankPaym.Status     = 1; 
    //Gurin S. 23.06.2015 R-595472-2
    //BankPaym.Origin     = 0; // Ручной ввод
    BankPaym.Origin     = 2600; //Получен из ПЦ (эквайринг)
    BankPaym.Oper       = p_oper; 
    BankPaym.LaunchOper = false;

    var Payment = BankPaym.Payment;

    Payment.DocKind     = 16;
    Payment.Ground      = p_ground;
    Payment.ShifrOper   = "01"; 
    Payment.Number      = p_num_doc;
    Payment.BaseFIID    = 0;
    Payment.PaymentKind = "Н"; //"Э"; Gurin S. 23.07.2013
    Payment.Priority    = 6;
    Payment.NumberPack  = p_pack;
    Payment.Purpose     = 15; /*PM_PURP_BANKPAYMENT*/
    Payment.IsPlanPaym  = "X";

    Payment.ClientDate     = 
    Payment.Date           = 
    Payment.ValueDate      = {CurDate};

    Payment.ReceiverAmount = 
    Payment.PayerAmount    = 
    Payment.BaseAmount     = p_debet_sum;

    Payment.PayerBankEnterDate = p_value_date;

    Payment.SetPayerPI (PAYMENTS_GROUP_INTERNAL,
                        {OurBank},
                        3,
                        {MFO_BANK},
                        {NAME_BANK},
                        {CORAC_BANK},
                        0,
                        1,
                        p_payer_account,
                        {OurBank});

    if (p_mfo_receiver == {MFO_BANK}) // внутренный платеж
        Payment.SetReceiverPI ( PAYMENTS_GROUP_INTERNAL,
                                {OurBank},
                                3,
                                {MFO_BANK},
                                {NAME_BANK},
                                {CORAC_BANK},
                                0,
                                1,
                                p_receiver_account);
    else
        Payment.SetReceiverPI ( PAYMENTS_GROUP_EXTERNAL, // Group // UNDEF
                                0,                    // BankID
                                3,                    // BankCodeKind 
                                p_mfo_receiver,       // {MFO_BANK},
                                "",                   // BankName
                                "",                   // CorrAcc
                                0,                    // FIID        
                                1,                    // Chapter      
                                p_receiver_account,   // Account      
                                0,                    // Client       
                                p_receiver_name,      // ClientName   
                                p_receiver_inn        // ClientINN    
                            );
    end;

    return BankPaym.Update ();

OnError(Err)
    MsgBox(Err.Message,"| at ",Err.Line,"|in ",Err.Module); 
end;

/*----------------------------------------------------------------------------------------------------------------
 * Чтение значения ячейки 
 *        _Row              - строка 
 *        _Col              - столбец
 *        _RSLDataType      - RSL-тип содержимого 
 *---------------------------------------------------------------------------------------------------------------*/
macro XL_ReadCell ( _Row, _Col, _RSLDataType)
    if ( ValType ( _RSLDataType ) == V_UNDEF)
        return XL_Sheet.cells (_Row, _Col).value;
    elif ( _RSLDataType  == V_INTEGER)
        return int (XL_Sheet.cells (_Row, _Col).text);
    elif (  _RSLDataType == V_DOUBLE)
        return double (XL_Sheet.cells (_Row, _Col).text);
    elif (  _RSLDataType == V_MONEY)
        return money (XL_Sheet.cells (_Row, _Col).value);
    elif (  _RSLDataType == V_STRING)
        return string (XL_Sheet.cells (_Row, _Col).value);
    else
        return trim (XL_Sheet.cells (_Row, _Col).text);
    end;

OnError(Err)
    MsgBox(Err.Message,"| at ",Err.Line,"|in ",Err.Module); 
end;


// класс для одной записи из загружаемого файла.
class XLAcquiringRecord (_RecordNumber, 
                         _OwnerPOS, 
                         _CompanyName, 
                         _CompanyAddress, 
                         _ID_POS, 
                         _CarryDate,
                         _TotalAmount, 
                         _ISOCurrencyCode, 
                         _FeePercent, 
                         _CarryAmount, 
                         _FeeAmount, 
                         _CardHolder, 
                         _CardAccount, 
                         _CardType, 
                         _PaymentGround )

    var RecordNumber    = _RecordNumber;    /* № п/п               */
    var OwnerPOS        = _OwnerPOS;        /* Владелец Устройства */
    var CompanyName     = _CompanyName;     /* Компания            */
    var CompanyAddress  = _CompanyAddress;  /* Адрес               */
    var ID_POS          = _ID_POS;          /* Устройство          */
    var TotalAmount     = _TotalAmount;     /* Запрошенная сумма   */
    var ISOCurrencyCode = _ISOCurrencyCode; /* Валюта              */
    var FeePercent      = _FeePercent;      /* Процент комиссии    */
    var CarryAmount     = _CarryAmount;     /* Сумма к выдаче      */
    var FeeAmount       = _FeeAmount;       /* Комиссия            */
    var CardHolder      = _CardHolder;      /* Владелец карты      */
    var CardAccount     = _CardAccount;     /* Номер карты         */
    var CardType        = _CardType;        /* Тип карты           */
    var PaymentGround   = _PaymentGround;   /* Основание платежа   */

    private var dd   = 0;
    private var mm   = 0;
    private var yyyy = 0;

    if (index (_CarryDate, ".") == 5) // yyyy.mm.dd
        yyyy = int (substr (string (_CarryDate), 1, 4));
        mm   = int (substr (string (_CarryDate), 6, 2));
        dd   = int (substr (string (_CarryDate), 9, 2));

    elif (index (_CarryDate, ".") == 3) // dd.mm.yyyy
        dd   = int (substr (string (_CarryDate), 1, 2));
        mm   = int (substr (string (_CarryDate), 4, 2));
        yyyy = int (substr (string (_CarryDate), 7, 4));
    end;

    var CarryDate  = string (date (dd, mm, yyyy)); /* Дата Проводки */

    // ---------------------------------------------------------------------------------------------
    //макрос вставки одной считанной записи из эксель-файла в одну из временных таблиц
    macro Insert ()

        private var sqlquery;
        private var xl_id_pos;
        private var xl_carrydate;
        private var xl_cardholder;

        if (substr(this.recordnumber,1,5) == "Итого") //итоговая запись по терминалу

            xl_id_pos     = XL_ReadCell (XL_CurrentRowNumber - 1, XL_COLUMN_E, V_STRING);
            xl_carrydate  = XL_ReadCell (XL_CurrentRowNumber - 1, XL_COLUMN_F, V_STRING);
            xl_cardholder = XL_ReadCell (XL_CurrentRowNumber - 1, XL_COLUMN_L, V_STRING);

            sqlquery = "insert into dacquiring_amount_usr"
              + "\n" + "            (m_id_pos, m_carrydate, m_cardholder,"
              + "\n" + "             m_totalamount, m_carryamount, m_feeamount)"
              + "\n" + "     values (:m_id_pos, :m_carrydate, :m_cardholder,"
              + "\n" + "             :m_totalamount, :m_carryamount, :m_feeamount);";

            ExecSQL (sqlquery, makeArray (SQLParam("m_id_pos"     , trim  (xl_id_pos       )),
                                          SQLParam("m_carrydate"  , trim  (xl_carrydate    )),
                                          SQLParam("m_cardholder" , trim  (xl_cardholder   )),
                                          SQLParam("m_totalamount", double(this.totalamount)),
                                          SQLParam("m_carryamount", double(this.carryamount)),
                                          SQLParam("m_feeamount"  , double(this.feeamount  )) ), true);

        else //запись с отдельным платежом по терминалу

            sqlquery = "insert into dacquiring_record_usr "
                     + "\n        (m_recordnumber, m_ownerpos, m_companyname, "
                     + "\n         m_companyaddress, m_id_pos, m_totalamount, m_isocurrencycode, "
                     + "\n         m_feepercent, m_carryamount, m_feeamount, m_cardholder, "
                     + "\n         m_cardaccount, m_cardtype, m_paymentground, "
                     + "\n         m_carrydate "
                     + "\n        ) "
                     + "\n values (:m_recordnumber, :m_ownerpos, :m_companyname, "
                     + "\n         :m_companyaddress, :m_id_pos, :m_totalamount, :m_isocurrencycode, "
                     + "\n         :m_feepercent, :m_carryamount, :m_feeamount, :m_cardholder, "
                     + "\n         :m_cardaccount, :m_cardtype, :m_paymentground, "
                     + "\n         :m_carrydate "
                     + "\n        ) ";

            ExecSQL (sqlquery, makeArray (SQLParam ( "m_recordnumber"   , int    ( this.recordnumber    ) ),
                                          SQLParam ( "m_ownerpos"       , trim   ( this.ownerpos        ) ),
                                          SQLParam ( "m_companyname"    , trim   ( this.companyname     ) ),
                                          SQLParam ( "m_companyaddress" , trim   ( this.companyaddress  ) ),
                                          SQLParam ( "m_id_pos"         , trim   ( this.id_pos          ) ),
                                          SQLParam ( "m_totalamount"    , double ( this.totalamount     ) ),
                                          SQLParam ( "m_isocurrencycode", trim   ( this.isocurrencycode ) ),
                                          SQLParam ( "m_feepercent"     , double ( this.feepercent      ) ),
                                          SQLParam ( "m_carryamount"    , double ( this.carryamount     ) ),
                                          SQLParam ( "m_feeamount"      , double ( this.feeamount       ) ),
                                          SQLParam ( "m_cardholder"     , trim   ( this.cardholder      ) ),
                                          SQLParam ( "m_cardaccount"    , trim   ( this.cardaccount     ) ),
                                          SQLParam ( "m_cardtype"       , trim   ( this.cardtype        ) ),
                                          SQLParam ( "m_paymentground"  , trim   ( this.paymentground   ) ),
                                          SQLParam ( "m_carrydate"      , trim   ( this.carrydate       ) ) ), true);
        end;

    OnError
        printprops (this);
    end;

end;


class XLAcquiringLoader

    const TYPE_FORMAT_NEW = 1;
    const TYPE_FORMAT_OLD = 2;

    var XL_Format_Type   = 0;          // формат данных
    var XL_WorkBook_Path = "c:/rspar"; // путь с входными файлами
    
    // -----------------------------------------------------------------------------------------------------
    // Флаги, необходимые для работы служебных механизмов типа XL_IsReadableRecord () и XL_FileContinues
    // -----------------------------------------------------------------------------------------------------
    
    private var XL_IsWorking         = true;  // флаг работы цикла
    private var XL_IsEmptyRowNumber1 = false; // флаг пустой строки 1
    private var XL_IsEmptyRowNumber2 = false; // флаг пустой строки 2
    private var XL_IsEmptyRowNumber3 = false; // флаг пустой строки 3
    private var XL_IsEmptyRowNumber4 = false; // флаг пустой строки 4
    private var XL_IsEmptyRowNumber5 = false; // флаг пустой строки 5
    private var XL_IsEmptyRowNumber6 = false; // флаг пустой строки 6

    //информация о формируемом платеже
    private var number_doc = 0;
    private var p_payer_account = "";
    private var p_receiver_account = "";
    private var p_debet_sum = 0;
    private var p_ground = "";

    private var AcquiringRecord;
    private var tmp_sqlquery;
    private var term_sqlquery;
    private var client_sqlquery;

    //флаги постановки/снятия задолженности (для формирования мемордера вне зависимости от наличия номера пачки)
    private var setting_debt : bool = false;
    private var unsetting_debt : bool = false;

    /*---------------------------------------------------------------------------------------
      * Временные переменные для формирования сводного отчета по выгруженным платежам
      *---------------------------------------------------------------------------------------*/
    var rep_count_badsum            = 0;
    var rep_count_terminal_notfound = 0;
    var rep_count_terminal_block    = 0;
    var rep_count_zeroamount        = 0;
    var rep_count_debt_set          = 0;
    var rep_count_debt_closed_full  = 0;
    var rep_count_debt_closed_part  = 0;
    var rep_documents_total         = 0;

    var rep_amount_transfer         = 0;
    var rep_amount_commission       = 0;
    var rep_amount_payments         = 0;
    var rep_amount_debts_set        = 0;
    var rep_amount_debts_clear      = 0;
    var rep_amount_total            = 0;

    var ExcelData; // здесь будут храниться сведения, загруженные из файла Excel (XLAcquiringRecord)
    
    /*----------------------------------------------------------------------------------------------------------------
     * Нахождение записи, соответствующей POS-терминалу с идентификатором ID в пользовательском справочнике  
     * dsprterm_usr. Если соответствующую запись найти удалось, возвращается объект RSDRecordset со структурой,
     * напоминающей dsprterm_usr%rowtype:
     *           - t_name_firm
     *           - t_name_office
     *           - t_percent_value
     *           - t_acc_postuplen
     *           - t_acc_oplat
     *           - t_acc_percent
     *           - t_mfo_receiver
     *           - m_innkpp
     *           - t_account_receiver
     *           - t_number_dogovor
     *---------------------------------------------------------------------------------------------------------------*/
     
    macro EQ_FindRecordByPOS_ID (ID)
        var sql = "select m.t_name_firm, m.t_name_office, m.t_percent_value, m.t_acc_postuplen, m.t_acc_oplat,"
         + "\n" + "       m.t_acc_percent, m.t_mfo_receiver,"
         + "\n" + "       trim (both chr (1) from (m.t_inn_receiver || '/' || m.t_kpp_receiver)) m_innkpp,"
         + "\n" + "       m.t_account_receiver, m.t_number_dogovor"
         + "\n" + "  from dsprterm_usr m"
         + "\n" + " where m.t_number_terminal = :n";

        sql = ExecSQLSelect (sql, makeArray (SQLParam ("n", ID)));
        
        if (sql.MoveNext)
            return sql;
        end;

        return false;

    OnError(Err)
        MsgBox(Err.Message,"| at ",Err.Line,"|in ",Err.Module); 
    end;


    /*------------------------------------------------------------------------------------------------------------
     * Макрос определяет, продолжается ли файл Excel, либо же достигнут конец файла.
     * У Universal Report нет механизмов, которые вставляют что-то типа EOF в конец своего отчета, поэтому определяем
     * конец файла, если видим, что встречаются семь незначащих строк, идущих подряд.
     *-------------------------------------------------------------------------------------------------------------*/
    macro XL_FileContinues ()
        var tmp = XL_ReadCell (XL_CurrentRowNumber, XL_COLUMN_G);

        if   (    (ValType (tmp) == V_UNDEF) 
              and (not XL_IsEmptyRowNumber1) ) 
            XL_IsEmptyRowNumber1 = true;

        elif (    (ValType (tmp) == V_UNDEF) 
              and (not XL_IsEmptyRowNumber2) ) 
            XL_IsEmptyRowNumber2 = true;

        elif (    (ValType (tmp) == V_UNDEF) 
              and (not XL_IsEmptyRowNumber3) ) 
            XL_IsEmptyRowNumber3 = true;

        elif (    (ValType (tmp) == V_UNDEF) 
              and (not XL_IsEmptyRowNumber4) ) 
            XL_IsEmptyRowNumber4 = true;

        elif (    (ValType (tmp) == V_UNDEF) 
              and (not XL_IsEmptyRowNumber5) ) 
            XL_IsEmptyRowNumber5 = true;

        elif (    (ValType (tmp) == V_UNDEF) 
              and (not XL_IsEmptyRowNumber6) ) 
            XL_IsEmptyRowNumber6 = true;

        elif (ValType (tmp) != V_UNDEF)
            XL_IsEmptyRowNumber1 = false;
            XL_IsEmptyRowNumber2 = false;
            XL_IsEmptyRowNumber3 = false;
            XL_IsEmptyRowNumber4 = false;
            XL_IsEmptyRowNumber5 = false;
            XL_IsEmptyRowNumber6 = false;

        else
            XL_IsWorking = false;
        end; 

        return XL_IsWorking;

    OnError(Err)
        MsgBox(Err.Message,"| at ",Err.Line,"|in ",Err.Module); 
    end;


    /*------------------------------------------------------------------------------------------------------------
     * Макрос определяет значащую часть записи Excel - то есть ту строку, которую действительно нужно читать.
     * Возвращает true - если читать НУЖНО и false - если нет.
     *------------------------------------------------------------------------------------------------------------*/
    macro XL_IsReadableRecord ( )
        var colD = XL_ReadCell (XL_CurrentRowNumber, XL_COLUMN_D),
            colA = XL_ReadCell (XL_CurrentRowNumber, XL_COLUMN_A);

        if (((ValType (colD) != V_DOUBLE) and (ValType (colD) != V_UNDEF) and (trim (colD) != "Адрес"))
          or (substr (colA, 1, 5) == "Итого"))
            return true;
        end;

        return false;

    OnError(Err)
        MsgBox(Err.Message,"| at ",Err.Line,"|in ",Err.Module); 
    end;


    /*----------------------------------------------------------------------------------------------------------------
     * Макрос проверяет, существует ли в книге Excel лист с заданным именем
     * Если существует, то возвращает порядковый номер этого листа; иначе - 0
     *---------------------------------------------------------------------------------------------------------------*/
    macro XL_ExistSheet ( what )
        var i = 1;
        while (i <= XL.Sheets.Count)
            if (XL.Sheets.Item (i).Name == what)
                return true;
            end;
            i = i + 1;
        end;

        return false;

    OnError(Err)
        MsgBox(Err.Message,"| at ",Err.Line,"|in ",Err.Module); 
    end;


    /*----------------------------------------------------------------------------------------------------------------
     * Макрос считывает суммы и коды терминала из файла процессинга; 
     * Считанные данные заполняются в ExcelData - объект класса XLAcquiringRecord
     *---------------------------------------------------------------------------------------------------------------*/
    macro XL_ReadFile ( )
        if (XL_Format_Type = TYPE_FORMAT_NEW)
            initprogress (-1, "", "Обработка файла отчета по POS-терминалам");
            XL_CurrentRowNumber = 2;

            while ( XL_FileContinues ) // пока файл не закончился
                if (XL_IsReadableRecord)
                    ExcelData = XLAcquiringRecord (XL_ReadCell (XL_CurrentRowNumber, XL_COLUMN_A, V_STRING),
                                                   XL_ReadCell (XL_CurrentRowNumber, XL_COLUMN_B, V_STRING),
                                                   XL_ReadCell (XL_CurrentRowNumber, XL_COLUMN_C, V_STRING),
                                                   XL_ReadCell (XL_CurrentRowNumber, XL_COLUMN_D, V_STRING),
                                                   XL_ReadCell (XL_CurrentRowNumber, XL_COLUMN_E, V_STRING),
                                                   XL_ReadCell (XL_CurrentRowNumber, XL_COLUMN_F, V_STRING),
                                                   XL_ReadCell (XL_CurrentRowNumber, XL_COLUMN_G, V_MONEY ),
                                                   XL_ReadCell (XL_CurrentRowNumber, XL_COLUMN_H, V_STRING),
                                                   XL_ReadCell (XL_CurrentRowNumber, XL_COLUMN_I, V_DOUBLE),
                                                   XL_ReadCell (XL_CurrentRowNumber, XL_COLUMN_J, V_MONEY ),
                                                   XL_ReadCell (XL_CurrentRowNumber, XL_COLUMN_K, V_MONEY ),
                                                   XL_ReadCell (XL_CurrentRowNumber, XL_COLUMN_L, V_STRING),
                                                   XL_ReadCell (XL_CurrentRowNumber, XL_COLUMN_M, V_STRING),
                                                   XL_ReadCell (XL_CurrentRowNumber, XL_COLUMN_N, V_STRING),
                                                   XL_ReadCell (XL_CurrentRowNumber, XL_COLUMN_O, V_STRING));
                    ExcelData.Insert ();
                end;
                useprogress(XL_CurrentRowNumber); 
                XL_CurrentRowNumber = XL_CurrentRowNumber + 1;

            end;

            remprogress;

        else
            Msgbox ("Старый формат файла выгрузки более не поддерживается");
        end;

    OnError(Err)
        MsgBox(Err.Message,"| at ",Err.Line,"|in ",Err.Module); 
    end;

    /*-----------------------------------------------------------------------------------------------------
     * Макрос инициализации главного объекта (XLAcquiringLoader)
     *-----------------------------------------------------------------------------------------------------*/
    macro XL_Init ()
        var errCode;
        var result;

        if ( GetRegistryValue("PRBB/ACQUIRING/IMPORT_DIRECTORY", V_STRING, XL_WorkBook_Path, errCode) and not errCode)

            XL = CreateObject("rsax", "TRsAxServer", "RsBankAxServer", false).CreateComObject("Excel.Application",true);

            XL.application.defaultfilepath = XL_WorkBook_Path; // путь по умолчанию
            // окно выбора файла
            XL_WorkBook_Path = xl.application.GetOpenFileName ("Все файлы (*.*),*.*", null, "Выберите файл для загрузки");

            if (XL_WorkBook_Path == v_undef)
                msgbox("Действие отменено пользователем.|Файл не был загружен.");
                exit ();

            elif (XL_WorkBook_Path == false)
                msgbox ("Загружаемый файл не соотвествует требуемому формату");
                exit ();
            end;

            XL_Book  = XL.Workbooks.Open (XL_WorkBook_Path); 
            XL_Sheet = XL_Book.ActiveSheet (); 

            if (XL_ExistSheet ("OLE_DS Sheet"))
                XL_Format_Type = TYPE_FORMAT_NEW;
            else
                XL_Format_Type = TYPE_FORMAT_OLD;
            end;

        else
            Msgbox ("Не найдена настройка реестра PRBB/ACQUIRING/IMPORT_DIRECTORY"
                    "|Загрузка документов прервана");
            Exit ();
        end;


    OnError(Err)
        MsgBox(Err.Message,"| at ",Err.Line,"|in ",Err.Module); 
    end;


    /*-----------------------------------------------------------------------------------------------------
     * Макрос-обёртка генерации банковского ордера
     *-----------------------------------------------------------------------------------------------------*/    
    private macro XL_CreateBankorder ( )
        var p_receiver_name;
        var p_mfo_receiver;
        var p_receiver_inn;
        var p_number_pack;
        var stat;

        number_doc = number_doc + 1;
        //Gurin S. 23.06.2015 R-595472-2
        if(substr(string(number_doc),strlen(string(number_doc))-2) == "000")
           number_doc = number_doc + 1;
        end;

        //подбираем счёт оплаты
        if (p_payer_account == "") //если счет назначен "снаружи", то не задаём его здесь

            if (_bank.is_PRBB())
                p_payer_account = ACC_PRBB_PAYER_OURCARD;
            elif (_bank.is_GEB())
                p_payer_account = ACC_GEB_DEBTSET_CREDIT;
            elif (_bank.is_SLD()) //2015-04-15 VEA
                p_payer_account = ACC_SLD_DEBTSET_CREDIT;
            elif (_bank.is_VUZ())
                if  ((StrUpr(term_sqlquery.value("cardholder")) == StrUpr("ВУЗ-банк"))
                  or (StrUpr(term_sqlquery.value("cardholder")) == StrUpr("ВУЗбанк")))
                    p_payer_account = ACC_VUZ_PAYER_OURCARD;
                else
                    p_payer_account = ACC_VUZ_PAYER_OTHERCARD;
                end;
            else
                p_payer_account = AcquiringRecord.value("t_Acc_Oplat");
            end;
        end;

        if (p_receiver_account == "")
            p_receiver_account = AcquiringRecord.value("t_Account_Receiver");
        end;

        if (p_debet_sum == 0) //если сумма платежа назначена "снаружи", то не задаём её здесь
            p_debet_sum = double(term_sqlquery.value("carryamount"));
        end;

        if (    (AcquiringRecord.value ("m_innkpp") != "")
            and (AcquiringRecord.value ("m_innkpp") != strFor (1))
            and (AcquiringRecord.value ("m_innkpp") != strFor (0))
            and (AcquiringRecord.value ("m_innkpp") != "/"))
            p_receiver_inn = AcquiringRecord.value ("m_innkpp");
        else
            p_receiver_inn = "";
        end;

        if (   (AcquiringRecord.value ("t_MFO_Receiver") == {mfo_bank}) 
            or (AcquiringRecord.value ("t_MFO_Receiver") == "") 
            or (AcquiringRecord.value ("t_MFO_Receiver") == strFor (1))
            or (AcquiringRecord.value ("t_MFO_Receiver") == strFor (0))
            ) // "свой банк"

            p_number_pack  = PACK_NUMBER_OURBANK;
            p_mfo_receiver = {mfo_bank};

        else // "чужой банк"
            p_mfo_receiver  = AcquiringRecord.value ("t_MFO_Receiver");
            p_receiver_name = AcquiringRecord.value ("t_Name_Firm");
            p_number_pack   = PACK_NUMBER_OUTSIDE_BANK;
        end;

        if (p_ground == "") //если основание платежа назначено "снаружи", то не задаём его здесь
            p_ground = "Оплата операций по пластиковым картам за " +
                        substr (string ( term_sqlquery.value ("m_carrydate") ), 1, 10) +
                       " " +
                        string (AcquiringRecord.value ("t_name_office")) +
                       "; комиссия " +
                        string (AcquiringRecord.value ("t_Percent_Value"):0:3) +
                       "% - " +
                        money(term_sqlquery.value("feeamount")) +
                       " согласно договору " +
                        AcquiringRecord.value ("t_number_dogovor") +
                       ". НДС не облагается.";
        end;

        stat = PM_CreateBankPayment (p_payer_account,
                                     p_receiver_account,
                                     term_sqlquery.value ("m_carrydate"),
                                     number_doc,
                                     {oper},
                                     p_debet_sum,
                                     p_ground,
                                     p_number_pack,
                                     p_mfo_receiver,
                                     p_receiver_name,
                                     p_receiver_inn );

        if (stat == ERR_EXIT_SUCCESS)
            [ББ:  Дт ###################### Кт ###################### = ################ (ok)] 
                    (p_payer_account,          p_receiver_account,      money(p_debet_sum));
            rep_amount_payments = rep_amount_payments + p_debet_sum;
            rep_documents_total = rep_documents_total + 1;
            rep_amount_total    = rep_amount_total    + p_debet_sum;
        else
            [ББ:  Дт ###################### Кт ###################### = ################ (-error)] 
                    (p_payer_account,          p_receiver_account,      money(p_debet_sum));
        end;

        p_debet_sum = 0;
        p_ground = "";
        p_payer_account = "";
        p_receiver_account = "";

        return stat;

    end;


    /*-----------------------------------------------------------------------------------------------------
     * Макрос-обёртка генерации мемориального ордера
     *-----------------------------------------------------------------------------------------------------*/
    private macro XL_CreateMemorder ( )
        var p_value_date;
        var stat;

        if ((PACK_NUMBER_MEMORDER != 0) or setting_debt or unsetting_debt)
        /* мемордера не формируются, если в реестре установлена нулевая пачка для них */
        /* но формируются, если нужно установить/погасить задолженность */
            number_doc = number_doc + 1;
            //Gurin S. 23.06.2015 R-595472-2
            if(substr(string(number_doc),strlen(string(number_doc))-2) == "000")
               number_doc = number_doc + 1;
            end;

            //подбираем счета оплаты
            if   (setting_debt and _bank.is_PRBB())
                p_payer_account = ACC_PRBB_DEBTSET_DEBET;
                p_receiver_account = ACC_PRBB_PAYER_OURCARD;
            elif (unsetting_debt and _bank.is_PRBB())
                p_payer_account = ACC_PRBB_PAYER_OURCARD;
                p_receiver_account = ACC_PRBB_DEBTSET_DEBET;
            elif (setting_debt and _bank.is_EXV())
                p_payer_account = ACC_EXV_DEBTSET_DEBET;
                p_receiver_account = ACC_EXV_DEBTSET_CREDIT;
            elif (unsetting_debt and _bank.is_EXV())
                p_payer_account = ACC_EXV_DEBTSET_CREDIT;
                p_receiver_account = ACC_EXV_DEBTSET_DEBET;
            elif (setting_debt and _bank.is_GEB())
                p_payer_account = ACC_GEB_DEBTSET_DEBET;
                p_receiver_account = ACC_GEB_DEBTSET_CREDIT;
            elif (unsetting_debt and _bank.is_GEB())
                p_payer_account = ACC_GEB_DEBTSET_CREDIT;
                p_receiver_account = ACC_GEB_DEBTSET_DEBET;
            elif (setting_debt and _bank.is_VUZ())
                p_payer_account = ACC_VUZ_DEBTSET_DEBET;
                p_receiver_account = ACC_VUZ_DEBTSET_CREDIT;
            elif (unsetting_debt and _bank.is_VUZ())
                p_payer_account = ACC_VUZ_DEBTSET_CREDIT;
                p_receiver_account = ACC_VUZ_DEBTSET_DEBET;
            elif (setting_debt and _bank.is_SLD()) //2015-04-15 VEA
                p_payer_account = ACC_SLD_DEBTSET_DEBET;
                p_receiver_account = ACC_SLD_DEBTSET_CREDIT;
            elif (unsetting_debt and _bank.is_SLD())
                p_payer_account = ACC_SLD_DEBTSET_CREDIT;
                p_receiver_account = ACC_SLD_DEBTSET_DEBET;
            end;

            if (p_payer_account == "") //если счет уже назначен, то не задаём его здесь
                if (_bank.is_PRBB())
                    p_payer_account = ACC_PRBB_PAYER_OURCARD;
                elif (_bank.is_SLD())                              // 2015-04-15 VEA
                    p_payer_account = ACC_SLD_DEBTSET_CREDIT;
                elif (_bank.is_VUZ())
                    if  ((StrUpr(term_sqlquery.value("cardholder")) == StrUpr("ВУЗ-банк"))
                      or (StrUpr(term_sqlquery.value("cardholder")) == StrUpr("ВУЗбанк")))
                        p_payer_account = ACC_VUZ_PAYER_OURCARD;
                    else
                        p_payer_account = ACC_VUZ_PAYER_OTHERCARD;
                    end;
                else
                    p_payer_account = AcquiringRecord.value("t_Acc_Oplat");
                end;
            end;

            if (p_receiver_account == "")
                p_receiver_account = AcquiringRecord.value ("t_acc_percent");
            end;

            //подбираем сумму платежа
            if (setting_debt)
                p_debet_sum = term_sqlquery.value("negamount");
                p_ground = "Требование к " + client_sqlquery.value("t_name_firm") +
                           " за " + substr(string(term_sqlquery.value("m_carrydate")),1,10);
            end;

            if (p_debet_sum == 0) //если сумма платежа назначена "снаружи", то не задаём её здесь
                p_debet_sum = double(term_sqlquery.value("feeamount"));
            end;

            if (p_ground == "") //если основание платежа назначено "снаружи", то не задаём его здесь
                p_ground = "Комиссия банка по операциям в торговых точках за " +
                            substr (string (term_sqlquery.value ("m_carrydate")), 1, 10) +
                           " " +
                            string (AcquiringRecord.value ("t_name_office")) +
                           ", комиссия " +
                            string (AcquiringRecord.value ("t_percent_value"):0:3) +
                           " % - согласно договору " +
                            string (AcquiringRecord.value ("t_number_dogovor"));
            end;

            p_value_date = term_sqlquery.value ("m_carrydate");

            stat = PM_CreateMemorialOrder (p_payer_account,
                                           p_receiver_account,
                                           {CurDate}, // p_value_date,
                                           number_doc,
                                           {oper},
                                           p_debet_sum,
                                           p_ground,
                                           PACK_NUMBER_MEMORDER
                                           );

            if (stat == ERR_EXIT_SUCCESS)
                [МО:  Дт ###################### Кт ###################### = ################ (ok)]
                         (p_payer_account,         p_receiver_account,      money(p_debet_sum));
                if (setting_debt)
                    rep_amount_debts_set = rep_amount_debts_set + p_debet_sum;
                    rep_count_debt_set = rep_count_debt_set + 1;
                elif (unsetting_debt)
                    rep_amount_debts_clear = rep_amount_debts_clear + p_debet_sum;
                else
                    rep_amount_commission = rep_amount_commission + p_debet_sum;
                end;
                rep_documents_total   = rep_documents_total + 1;
                rep_amount_total      = rep_amount_total + p_debet_sum;
            else
                [МО:  Дт ###################### Кт ###################### = ################ (-error)]
                         (p_payer_account,         p_receiver_account,      money(p_debet_sum));
            end;

            p_debet_sum = 0;
            p_ground = "";
            p_payer_account = "";
            p_receiver_account = "";
            setting_debt = false;
            unsetting_debt = false;

        end;

    end;

    /*-----------------------------------------------------------------------------------------------------
     * Макрос генерации платежей
     *-----------------------------------------------------------------------------------------------------*/
    macro XL_CreatePayments ( )
        var j = 0;
        var s = 0;
        var d;
        var debt = 0;
        var del_sqlquery;
        var debt_sqlquery;
        var tsp_detail : bool = true; //флаг "детализировать платежи по ТСП"

        initprogress (-1, "", "Подготовка платежей");

        // устанавливаем счётчик номеров документов
        number_doc = int( substr( string( date()), 1, 2) + "000");

        println ("Детализированный протокол вставки платежей");

        /* проверяем все платежи на разные условия, так как впоследствии некоторые из них могут быть проведены группой */
        tmp_sqlquery = RsdRecordSet(string(
               "select distinct"
            +"\n       rtrim(usr.m_id_pos,chr(255)) m_id_pos,"
            +"\n       nvl(term.t_client_block,chr(1)) t_client_block"
            +"\n  from dacquiring_record_usr usr, dsprterm_usr term"
            +"\n where usr.m_id_pos = term.t_number_terminal(+)"));

        while (tmp_sqlquery.MoveNext)

            if (not EQ_FindRecordByPOS_ID(tmp_sqlquery.value ("m_id_pos")))
                // платежи без информации о терминале заносятся в отчёт и исключаются из дальнейшей обработки

                println ("В справочнике не найдена запись о POS-терминале с ID " + tmp_sqlquery.value ("m_id_pos"));
                rep_count_terminal_notfound = rep_count_terminal_notfound + 1;
                rep_count_badsum            = rep_count_badsum + 1;

                del_sqlquery = RsdCommand(String(
                    "delete from dacquiring_record_usr usr"
                +"\n where rtrim(usr.m_id_pos,chr(255)) = '" + tmp_sqlquery.value("m_id_pos") + "'" ));
                del_sqlquery.execute;

            elif (tmp_sqlquery.value("t_client_block") == "X")
                //платежи заблокированных клиентов исключаются из дальнейшей обработки

                println ("POS-терминал с ID " + tmp_sqlquery.value ("m_id_pos") + " заблокирован. " +
                         "Платежи исключены из обработки.");
                rep_count_badsum         = rep_count_badsum + 1;
                rep_count_terminal_block = rep_count_terminal_block + 1;

                del_sqlquery = RsdCommand(String(
                    "delete from dacquiring_record_usr usr"
                +"\n  where rtrim(usr.m_id_pos,chr(255)) = '" + tmp_sqlquery.value("m_id_pos") + "'" ));
                del_sqlquery.execute;

            end;
        end;

        remprogress ();
        initprogress (-1, "", "Вставка платежей");

        // перебираем всех клиентов
        client_sqlquery = RsdRecordSet(string(
           "select distinct "
        +"\n       max(s.t_name_firm) t_name_firm, s.t_inn_receiver,"
        +"\n       nvl((select sum(h.t_debt_rest) from dacquiring_history_usr h where h.t_inn_receiver = s.t_inn_receiver),0) t_debt,"
        +"\n       nvl(max(t_no_tsp_detail),chr(1)) no_tsp_detail"
        +"\n  from dsprterm_usr s"
        +"\n where upper(s.t_number_terminal) in"
        +"\n    (select distinct upper(rtrim(m_id_pos,chr(255))) from dacquiring_record_usr)"
        +"\n group by s.t_inn_receiver"
        +"\n order by t_name_firm"));

        while (client_sqlquery.MoveNext)

            debt = 0;

            if (client_sqlquery.value("no_tsp_detail") != "X") //с детализацией по ТСП
                //перебираем все терминалы клиента
                term_sqlquery = RsdRecordSet(string(
                   "select r.m_id_pos"
                +"\n      ,a.m_totalamount    totalamount"
                +"\n      ,a.m_carryamount    carryamount"
                +"\n      ,a.m_feeamount      feeamount"
                +"\n      ,max(r.m_carrydate) m_carrydate"
                +"\n      ,0 - sum(case when r.m_carryamount < 0 then r.m_carryamount else 0 end) negamount"
                +"\n      ,a.m_carryamount - sum(case when r.m_carryamount < 0 then r.m_carryamount else 0 end) posamount"
                +"\n      ,0 - sum(case when r.m_feeamount < 0 then r.m_feeamount else 0 end) feenegamount"
                +"\n      ,sum(case when r.m_feeamount > 0 then r.m_feeamount else 0 end)     feeposamount"
                +"\n      ,max(r.m_cardholder) cardholder"
                +"\n  from dacquiring_record_usr r, dacquiring_amount_usr a"
                +"\n where r.m_id_pos = a.m_id_pos"
                +"\n   and upper(r.m_id_pos) in"
                +"\n    (select distinct upper(rtrim(t_number_terminal,chr(255))) from dsprterm_usr"
                +"\n      where t_inn_receiver = '" + client_sqlquery.value("t_inn_receiver") + "')"
                +"\n group by r.m_id_pos, a.m_totalamount, a.m_carryamount, a.m_feeamount"
                +"\n order by negamount desc"));

            else //без детализации по ТСП
                //собираем суммы по всем терминалам клиента
                term_sqlquery = RsdRecordSet(string(
                   "select max(a.m_id_pos)      m_id_pos"
                +"\n      ,sum(a.m_totalamount) totalamount"
                +"\n      ,sum(a.m_carryamount) carryamount"
                +"\n      ,sum(a.m_feeamount)   feeamount"
                +"\n      ,max(a.m_carrydate)   m_carrydate"
                +"\n      ,0 - sum(r.negamount) negamount"
                +"\n      ,sum(a.m_carryamount) - sum(r.negamount) posamount"
                +"\n      ,0 - sum(r.feenegamount) feenegamount"
                +"\n      ,sum(r.feeposamount)     feeposamount"
                +"\n      ,max(r.m_cardholder)     cardholder"
                +"\n  from dacquiring_amount_usr a,"
                +"\n      (select m_id_pos"
                +"\n             ,max(m_cardholder) m_cardholder"
                +"\n             ,sum(case when m_carryamount < 0 then m_carryamount else 0 end) negamount"
                +"\n             ,sum(case when m_feeamount < 0 then m_feeamount else 0 end)     feenegamount"
                +"\n             ,sum(case when m_feeamount > 0 then m_feeamount else 0 end)     feeposamount"
                +"\n             ,sum(case when m_carryamount > 0 then m_carryamount else 0 end) posamount"
                +"\n         from dacquiring_record_usr"
                +"\n        group by m_id_pos ) r"
                +"\n where a.m_id_pos = r.m_id_pos"
                +"\n   and upper(a.m_id_pos) in"
                +"\n      (select distinct upper(rtrim(t_number_terminal,chr(255))) from dsprterm_usr"
                +"\n        where t_inn_receiver = '" + client_sqlquery.value("t_inn_receiver") + "')"));

            end; //if (tsp_detail)

            while (term_sqlquery.MoveNext)

                j = j + 1;
                useprogress(j);

                AcquiringRecord = EQ_FindRecordByPOS_ID (term_sqlquery.value ("m_id_pos"));

                if (term_sqlquery.value("negamount") != 0) //ставим в долг отриц. суммы
                    
                    setting_debt = true;
                    XL_CreateMemorder();

                    /* заносим задолженность в справочник */
                    del_sqlquery = RsdCommand(string(
                       "update dsprterm_usr"
                    +"\n   set t_debt = nvl(t_debt,0) + abs(" + term_sqlquery.value("negamount") + ")"
                    +"\n where upper(t_number_terminal) in"
                    +"\n (select upper(t_number_terminal) from dsprterm_usr where t_inn_receiver = '" +
                                                           client_sqlquery.value("t_inn_receiver") + "')"));
                    del_sqlquery.execute;

                    /* заносим задолженность в историю */
                    del_sqlquery = RsdCommand("insert into dacquiring_history_usr values (?,?,?,?,?,chr(0),?,?)");
                    DtTmSplit(term_sqlquery.value("m_carrydate"), d);
                    del_sqlquery.AddParam("ID",        RSDBP_IN, 0);
                    del_sqlquery.AddParam("INN",       RSDBP_IN, client_sqlquery.value("t_inn_receiver"));
                    del_sqlquery.AddParam("CarryDate", RSDBP_IN, d);
                    del_sqlquery.AddParam("Amount",    RSDBP_IN, money(term_sqlquery.value("negamount")));
                    del_sqlquery.AddParam("Fee",       RSDBP_IN, money(term_sqlquery.value("feenegamount")));
                    del_sqlquery.AddParam("CurAmount", RSDBP_IN, money(term_sqlquery.value("negamount")));
                    del_sqlquery.AddParam("CurFee",    RSDBP_IN, money(term_sqlquery.value("feenegamount")));
                    del_sqlquery.Execute();

                end; //if negamount != 0

                debt_sqlquery = RsdRecordSet(string(
                   "select sum(h.t_feeamount)        feeamount"
                +"\n      ,round(nvl(sum(h.t_debt_rest),0), 2) debt"
                +"\n      ,sum(h.t_feeamount + h.t_carryamount) totalamount"
                +"\n  from dacquiring_history_usr h "
                +"\n where h.t_closed != chr(88)"
                +"\n   and h.t_inn_receiver = '" + client_sqlquery.value("t_inn_receiver") + "'"));
                debt_sqlquery.MoveNext;

                debt = debt_sqlquery.value("debt"); 
                /*VDN 10.08.2015 R-612416 Проверим, беда со сравнением данных с плавающей точкой в переменных, которым значение присвоено из вне*/
                if (debt > 0)
                    var cmd = RSDRecordSet (string("select case when "+ term_sqlquery.value("posamount") +" > 0 then "+ term_sqlquery.value("posamount") +" else 0 end posamount from dual"));                     
                    cmd.movenext();
                end;
                //if ((debt > 0) and (term_sqlquery.value("posamount") > 0)) //гасим долг                    
                if ((debt > 0) and (cmd.value("posamount") > 0)) //гасим долг                    

                    unsetting_debt = true;
                    if (debt < term_sqlquery.value("posamount"))
                        p_debet_sum = debt;
                    else
                        p_debet_sum = term_sqlquery.value("posamount");
                    end;
                    s = p_debet_sum;
                    var change_summ = p_debet_sum;
                    p_ground = "Возмещение требования к " + client_sqlquery.value("t_name_firm");
                    XL_CreateMemorder();                    
                    
                    /* VDN 14.03.2014 собираем информациюю о задолжености клиента*/
                    var summ_debt = RSDRecordSet(string("select h.t_debt_rest debt, t_id"
                                                  +"\n     from dacquiring_history_usr h" 
                                                  +"\n     where h.t_closed != chr(88)"
                                                  +"\n           and h.t_inn_receiver = '" + client_sqlquery.value("t_inn_receiver") + "'"
                                                  +"\n                       order by t_id"));
                                                  
                    /* VDN 14.03.2014 проверяем каждую запись истории задолженности клиента*/
                    debugbreak;
                    while (summ_debt.MoveNext)                      
                        if (summ_debt.value(0) > change_summ)
                            rep_count_debt_closed_part = rep_count_debt_closed_part + 1;
                        else
                            rep_count_debt_closed_full = rep_count_debt_closed_full + 1;
                        end;
                        /* уменьшаем на сумму погашенного долга*/
                        change_summ = change_summ - summ_debt.value(0);
                        if (change_summ <= 0)
                           break;
                        end;
                    end;
                    
                    /* уменьшаем задолженность в справочнике истории задолженностей */
                    del_sqlquery = RsdCommand(string(
                       "DECLARE"
                    +"\n     v_debt NUMBER;"
                    +"\n     v_sum NUMBER;"
                    +"\n     v_fee NUMBER;"
                    +"\n     v_fee_debt NUMBER;"
                    +"\n     v_id NUMBER;"
                    +"\n     v_inn VARCHAR2(25);"
                    +"\n BEGIN"
                    +"\n     v_sum := " + s + ";"
                    +"\n     v_fee := " + term_sqlquery.value("feeposamount") + ";"
                    +"\n     v_inn := '" + client_sqlquery.value("t_inn_receiver") + "';"
                    +"\n     WHILE (v_sum > 0)"
                    +"\n     LOOP"
                    +"\n         select t_debt_rest, t_fee_rest, t_id into v_debt, v_fee_debt, v_id"
                    +"\n           from dacquiring_history_usr"
                    +"\n          where t_id = (select min(t_id)"
                    +"\n                          from dacquiring_history_usr"
                    +"\n                         where t_inn_receiver = v_inn and t_debt_rest > 0);"
                    +"\n         IF    v_sum = v_debt THEN"
                    +"\n             update dacquiring_history_usr"
                    +"\n                set t_debt_rest = 0, t_fee_rest = 0, t_closed = 'X'"
                    +"\n              where t_id = v_id;"
                    +"\n             v_sum := 0;"
                    +"\n         ELSIF v_sum < v_debt THEN"
                    +"\n             update dacquiring_history_usr"
                    +"\n                set t_debt_rest = (t_debt_rest - v_sum), t_fee_rest = (t_fee_rest - v_fee)"
                    +"\n              where t_id = v_id;"
                    +"\n             v_sum := 0;"
                    +"\n             v_fee := 0;"
                    +"\n         ELSIF v_sum > v_debt THEN"
                    +"\n             update dacquiring_history_usr"
                    +"\n                set t_debt_rest = 0, t_fee_rest = 0, t_closed = 'X'"
                    +"\n              where t_id = v_id;"
                    +"\n             v_sum := v_sum - v_debt;"
                    +"\n             v_fee := v_fee - v_fee_debt;"
                    +"\n         END IF;"
                    +"\n     END LOOP;"
                    +"\n     EXCEPTION"
                    +"\n         WHEN NO_DATA_FOUND THEN v_sum := 0;"
                    +"\n END;" ));
                    del_sqlquery.execute;

                end; //if Debt > 0 and posamount > 0

                if (debt < term_sqlquery.value("posamount")) //возмещаем, если осталось

                    del_sqlquery = RsdRecordSet(string(
                       "select nvl(sum(t_fee_rest),0)                  t_fee_rest"
                    +"\n      ,nvl(sum(t_carryamount - t_feeamount),0) t_carryamount" //нужна первоначальная сумма проводки, т.е. общая сумма - комиссия
                    +"\n  from dacquiring_history_usr"
                    +"\n where t_inn_receiver = '" + client_sqlquery.value("t_inn_receiver")+ "'"
                    +"\n   and t_closed != chr(88)" ));
                    del_sqlquery.MoveNext;

                    p_debet_sum = term_sqlquery.value("posamount") - debt;
                    if (debt == 0)
                        p_ground = "Оплата операций по пластиковым картам за " +
                                    substr (string ( term_sqlquery.value ("m_carrydate") ), 1, 10) +
                                   " " +
                                    string (AcquiringRecord.value ("t_name_office")) +
                                   "; комиссия " +
                                    string (AcquiringRecord.value("t_Percent_Value"):0:3) +
                                   "% - " +
                                    money(term_sqlquery.value("feeposamount")) +
                                   " согласно договору " +
                                    AcquiringRecord.value("t_number_dogovor") +
                                   ". НДС не облагается.";
                    else
                        p_ground = "Оплата операций по пластиковым картам за " +
                                    substr (string ( term_sqlquery.value ("m_carrydate") ), 1, 10) +
                                   " " +
                                    string (AcquiringRecord.value ("t_name_office")) +
                                   "; комиссия " +
                                    string (AcquiringRecord.value("t_Percent_Value"):0:3) +
                                   "% - " +
                                    money(term_sqlquery.value("feeposamount") - debt_sqlquery.value("feeamount")) +
                                   " за минусом суммы возврата в " + money(debt_sqlquery.value("totalamount")) +
                                   " согласно договору " +
                                    AcquiringRecord.value("t_number_dogovor") +
                                   ". НДС не облагается.";
                    end;
                    XL_CreateBankorder();   

                    XL_CreateMemorder();

                end; //if Debt < posamount

                /* VDN 14.03.2014 изменил и перенес счетчик в момент гашения долга*/
                //увеличиваем счётчики погашения задолженностей
                /*debt_sqlquery = RsdRecordSet(string(
                   "select nvl(sum(h.t_debt_rest),0) debt"
                +"\n  from dacquiring_history_usr h "
                +"\n where h.t_closed != chr(88)"
                +"\n   and h.t_inn_receiver = '" + client_sqlquery.value("t_inn_receiver") + "'"));
                //debt_sqlquery.MoveNext;
                
                //если долг был и было чем его гасить, значит, и погашение было
                if ((debt > 0) and (term_sqlquery.value("posamount") > 0))
                    while (debt_sqlquery.MoveNext)
                        if  (debt_sqlquery.value("debt") == 0) //полное или частичное?
                            rep_count_debt_closed_full = rep_count_debt_closed_full + 1;
                        else
                            rep_count_debt_closed_part = rep_count_debt_closed_part + 1;
                        end;
                    end;
                end;*/

            end; //while (term_sqlquery.MoveNext)

        end; //while (client_sqlquery.MoveNext)

        remprogress ();
        
        if (tmp_sqlquery)
        [ ────────────────────────────────────────────────────────────────────────────────────────];
        [       Сводная информация:                                                               ];
        [     ───────────────────────────────────────────────────────────────────────────         ];
        [       Количество найденных сумм:                          ###################           ](j:r);
        [       Количество забракованных сумм:                      ###################           ](rep_count_badsum:r);
        [       ├─ документов с ненайденными терминалами            ###################           ](rep_count_terminal_notfound:r);
        [       ├─ документов с заблокированными терминалами        ###################           ](rep_count_terminal_block:r);
        [       └─ нулевых сумм                                     ###################           ](rep_count_zeroamount:r);
        [       Количество сформированных требований:               ###################           ](rep_count_debt_set:r);
        [       Количество требований, погашенных полностью:        ###################           ](rep_count_debt_closed_full:r);
        [       Количество требований, погашенных частично:         ###################           ](rep_count_debt_closed_part:r);
        [       Количество сформированных документов:               ###################           ](rep_documents_total:r);
        [       - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -           ];
        [       Сумма документов с переводами:                      ###################           ](money(rep_amount_transfer):r);
        [       Сумма документов с комиссиями:                      ###################           ](money(rep_amount_commission):r);
        [       Сумма документов с оплатами:                        ###################           ](money(rep_amount_payments):r);
        [       Сумма документов с требованиями:                    ###################           ](money(rep_amount_debts_set):r);
        [       Сумма документов с погашением требований:           ###################           ](money(rep_amount_debts_clear):r);
        [       Общая сумма документов:                             ###################           ](money(rep_amount_total):r);
        end;
    end;

    XL_Init ();
    XL_ReadFile ();

    RslDefCon.BeginTrans();

    XL_CreatePayments ();

    RslDefCon.CommitTrans();

    XL.Quit ();

    XL_Sheet = null;
    XL_Book  = null;

OnError(err)
    RslDefCon.RollbackTrans();
    println(err.Message);

end;

// ----- entry point  ---------------------------------------------------------------------------------------

    if(not ВходитВГруппу({oper},101))
        msgbox("Вы не включены в группу \"101 - Работы по эквайрингу\" ");
        return 1;
    end;

    ExecSQL ("truncate table dacquiring_amount_usr", null, false);
    ExecSQL ("truncate table dacquiring_record_usr", null, false);

    var r = XLAcquiringLoader ();
    r = null;

    ExecSQL ("truncate table dacquiring_amount_usr", null, false);
    ExecSQL ("truncate table dacquiring_record_usr", null, false);