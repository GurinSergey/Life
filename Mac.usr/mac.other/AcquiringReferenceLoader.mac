/* ---------------------------------------------------------------------------------------------------------------
 * Макрос массового формирования записей справочника терминалов эквайринга из Excel-файла
 * Юшманов, по заявке C-24625
 *
 * @begin  : 2013-10-28
 * @end    : 2013-10-30
 *
 * @changes: 
 *
 *----------------------------------------------------------------------------------------------------------------*/

import BankInter;
import "diver.mac";
import lib_fg;

private const REP_SIZE = 2; //размер структуры массива с ошибками: код ошибки, детализация ошибки
private const ERR_NOT_UNIQUE = 0;
private const ERR_PARAM_MISSING = 1;
private const ERR_COMISS_NOT_FOUND = 2;
private const ERR_PARAM_TOO_LONG = 3;
private const ERR_WRONG_BANK = 4;

const XL_COLUMN_A = 1;
const XL_COLUMN_B = 2;
const XL_COLUMN_C = 3;
const XL_COLUMN_D = 4;
const XL_COLUMN_E = 5;
const XL_COLUMN_F = 6;
const XL_COLUMN_G = 7;
const XL_COLUMN_H = 8;
const XL_COLUMN_I = 9;
const XL_COLUMN_J = 10;

var XL;
var XL_Sheet;
var XL_Book;
var XL_CurrentRowNumber = 0; // главный счетчик по входному файлу

var ErrReport = "";
var Reports = TArray;
var rc = 0;
var FileTermCount = 0;
var InsertedTermCount = 0;

/*----------------------------------------------------------------------------------------------------------------
 * Чтение значения ячейки 
 *        _Row              - строка 
 *        _Col              - столбец
 *        _RSLDataType      - RSL-тип содержимого 
 *---------------------------------------------------------------------------------------------------------------*/
macro XL_ReadCell ( _Row, _Col, _RSLDataType)
    if ( ValType ( _RSLDataType ) == V_UNDEF)
        return XL_Sheet.cells (_Row, _Col).value;
    elif ( _RSLDataType  == V_INTEGER)
        return int (XL_Sheet.cells (_Row, _Col).text);
    elif (  _RSLDataType == V_DOUBLE)
        return double (XL_Sheet.cells (_Row, _Col).text);
    elif (  _RSLDataType == V_MONEY)
        return money (XL_Sheet.cells (_Row, _Col).value);
    elif (  _RSLDataType == V_STRING)
        return string (XL_Sheet.cells (_Row, _Col).value); // !!
    else
        return trim (XL_Sheet.cells (_Row, _Col).text);
    end;

OnError(Err)
    MsgBox(Err.Message,"| at ",Err.Line,"|in ",Err.Module); 
end;


// класс для одной записи из загружаемого файла. Считываются только записи с данными по терминалу
class XLAcquiringRecord (_RecordNumber,
                         _BankName, 
                         _CompanyName, 
                         _CompanyAddress, 
                         _InnReceiver, 
                         _KppReceiver,
                         _AccountReceiver, 
                         _BankBIC, 
                         _ID_POS, 
                         _FeePercent )
 
    var RecordNumber    = _RecordNumber;    /* № п/п                */
    var BankName        = _BankName;        /* Банк                 */
    var CompanyName     = _CompanyName;     /* Название фирмы       */
    var CompanyAddress  = _CompanyAddress;  /* Название филиала     */
    var InnReceiver     = _InnReceiver;     /* ИНН получателя       */
    var KppReceiver     = _KppReceiver;     /* КПП получателя       */
    var AccountReceiver = _AccountReceiver; /* Счет получателя      */
    var BankBIC         = _BankBIC;         /* БИК Банка получателя */
    var IdPos           = _ID_POS;          /* Номер терминала      */
    var FeePercent      = _FeePercent;      /* Комиссия             */
    
    var ACC_OPLAT;
    if   (_bank.is_EXV) ACC_OPLAT = "30232810500000010285";
    elif (_bank.is_VUZ) ACC_OPLAT = "30233810201080000005";
    else                ACC_OPLAT = "30233810609000060071";
    end;
    
    // ---------------------------------------------------------------------------------------------
    
    macro Insert ()

        private var sqlquery;
        private var AccPercent;
        private var curbank = "";

        FileTermCount = FileTermCount + 1;

        if   (_bank.is_PRBB) curbank = "ПРББ";
        elif (_bank.is_VUZ)  curbank = "ВУЗ";
        elif (_bank.is_GEB)  curbank = "ГЭБ";
        elif (_bank.is_EXV)  curbank = "ЭВ";
        end;

        //для проверки уникальности карточки по полю "номер терминала"
        sqlquery = RsdRecordSet(string(
            "select * from dsprterm_usr where t_number_terminal = '" + IdPos + "'"));

        //проверяем наличие всех обязательных параметров в файле
        if   (BankName != curbank)
            Reports[rc*REP_SIZE + 0] = ERR_WRONG_BANK;
            Reports[rc*REP_SIZE + 1] = "Устройство " + IdPos + " по '" + CompanyName + "' не может быть введено: " +
                                       "указан неверный банк";
            rc = rc + 1;
        elif (IdPos == "")
            Reports[rc*REP_SIZE + 0] = ERR_PARAM_MISSING;
            Reports[rc*REP_SIZE + 1] = "Устройство ??? по '" + CompanyName + "' не может быть введено: " +
                                       "в файле отсутствует параметр 'Номер терминала'";
            rc = rc + 1;
        //проверяем уникальность карточки
        elif (sqlquery.MoveNext)
            Reports[rc*REP_SIZE + 0] = ERR_NOT_UNIQUE;
            Reports[rc*REP_SIZE + 1] = "Устройство " + IdPos + " по '" + CompanyName + "' уже существует.";
            rc = rc + 1;
        elif (strlen(IdPos) > 12)
            Reports[rc*REP_SIZE + 0] = ERR_PARAM_MISSING;
            Reports[rc*REP_SIZE + 1] = "Устройство " + IdPos + " по '" + CompanyName + "' не может быть введено: " +
                                       "параметр 'Название фирмы' превышает установленную длину в 12 символов";
            rc = rc + 1;
        elif (CompanyName == "")
            Reports[rc*REP_SIZE + 0] = ERR_PARAM_MISSING;
            Reports[rc*REP_SIZE + 1] = "Устройство " + IdPos + " по '" + CompanyName + "' не может быть введено: " +
                                       "в файле отсутствует параметр 'Название фирмы'";
            rc = rc + 1;
        elif (CompanyAddress == "")
            Reports[rc*REP_SIZE + 0] = ERR_PARAM_MISSING;
            Reports[rc*REP_SIZE + 1] = "Устройство " + IdPos + " по '" + CompanyName + "' не может быть введено: " +
                                       "в файле отсутствует параметр 'Название филиала'";
            rc = rc + 1;
        elif (FeePercent == "")
            Reports[rc*REP_SIZE + 0] = ERR_PARAM_MISSING;
            Reports[rc*REP_SIZE + 1] = "Устройство " + IdPos + " по '" + CompanyName + "' не может быть введено: " +
                                       "в файле отсутствует параметр 'Комиссия'";
            rc = rc + 1;
        elif (BankBIC == "")
            Reports[rc*REP_SIZE + 0] = ERR_PARAM_MISSING;
            Reports[rc*REP_SIZE + 1] = "Устройство " + IdPos + " по '" + CompanyName + "' не может быть введено: " +
                                       "в файле отсутствует параметр 'БИК банка получателя'";
            rc = rc + 1;
        elif (InnReceiver == "")
            Reports[rc*REP_SIZE + 0] = ERR_PARAM_MISSING;
            Reports[rc*REP_SIZE + 1] = "Устройство " + IdPos + " по '" + CompanyName + "' не может быть введено: " +
                                       "в файле отсутствует параметр 'ИНН получателя'";
            rc = rc + 1;
        elif (KppReceiver == "")
            Reports[rc*REP_SIZE + 0] = ERR_PARAM_MISSING;
            Reports[rc*REP_SIZE + 1] = "Устройство " + IdPos + " по '" + CompanyName + "' не может быть введено: " +
                                       "в файле отсутствует параметр 'КПП получателя'";
            rc = rc + 1;
        elif (AccountReceiver == "")
            Reports[rc*REP_SIZE + 0] = ERR_PARAM_MISSING;
            Reports[rc*REP_SIZE + 1] = "Устройство " + IdPos + " по '" + CompanyName + "' не может быть введено: " +
                                       "в файле отсутствует параметр 'Счет получателя'";
            rc = rc + 1;
                
        else
            //подбираем счёт комиссии
            if   (not CompareStrWithMasks("M?????UP",IdPos))
                AccPercent = "70601810100006203240";
            elif (not CompareStrWithMasks("M?????KB",IdPos))
                AccPercent = "70601810400006203241";
            elif (not CompareStrWithMasks("M?????UE",IdPos))
                AccPercent = "70601810400006203240";
            elif (not CompareStrWithMasks("M?????KE",IdPos))
                AccPercent = "70601810700006203241";
            elif (not CompareStrWithMasks("M?????UV",IdPos))
                AccPercent = "70601810400006203240";
            elif (not CompareStrWithMasks("M?????KU",IdPos))
                AccPercent = "70601810700006203241";
            elif (not CompareStrWithMasks("M?????UG",IdPos))
                AccPercent = "70601810500006203193";
            elif (not CompareStrWithMasks("M?????KG",IdPos))
                AccPercent = "70601810100006203195";
            else
                AccPercent = "";
                Reports[rc*REP_SIZE + 0] = ERR_COMISS_NOT_FOUND;
                Reports[rc*REP_SIZE + 1] = "Не найден счёт комиссии для '" + CompanyName + "' по устройству " + IdPos;
                rc = rc + 1;
            end;

            //блок проверок на соответствие принимаемых параметров условиям на таблице dsprterm_usr
            if (double(KppReceiver) == 0)
                KppReceiver = "";
            end;

            if   (strlwr(substr(CompanyName,1,30)) == "индивидуальный предприниматель")
                CompanyName = "ИП" + substr(CompanyName,31);
            elif (strlwr(substr(CompanyName,1,40)) == "общество с ограниченной ответственностью")
                CompanyName = "ООО" + substr(CompanyName,41);
            elif (strlwr(substr(CompanyName,1,29)) == "закрытое акционерное общество")
                CompanyName = "ЗАО" + substr(CompanyName,30);
            end;

            if (strlen(CompanyName) > 60)
                CompanyName = substr(CompanyName,1,60);
                Reports[rc*REP_SIZE + 0] = ERR_PARAM_TOO_LONG;
                Reports[rc*REP_SIZE + 1] = "По устройству " + IdPos + " параметр 'Название фирмы' " +
                                           "превышает 60 символов и будет обрезан.";
                rc = rc + 1;
            end;

            if (strlen(CompanyAddress) > 60)
                CompanyAddress = substr(CompanyAddress,1,60);
                Reports[rc*REP_SIZE + 0] = ERR_PARAM_TOO_LONG;
                Reports[rc*REP_SIZE + 1] = "По устройству " + IdPos + " параметр 'Название филиала' " +
                                           "превышает 60 символов и будет обрезан.";
                rc = rc + 1;
            end;

            if (strlen(FeePercent) > 8)
                FeePercent = substr(FeePercent,1,8);
                Reports[rc*REP_SIZE + 0] = ERR_PARAM_TOO_LONG;
                Reports[rc*REP_SIZE + 1] = "По устройству " + IdPos + " параметр 'Комиссия' " +
                                           "превышает 8 символов и будет обрезан.";
                rc = rc + 1;
            end;

            if (strlen(BankBIC) > 10)
                BankBIC = substr(BankBIC,1,10);
                Reports[rc*REP_SIZE + 0] = ERR_PARAM_TOO_LONG;
                Reports[rc*REP_SIZE + 1] = "По устройству " + IdPos + " параметр 'БИК банка' " +
                                           "превышает 10 символов и будет обрезан.";
                rc = rc + 1;
            end;

            if (strlen(InnReceiver) > 13)
                InnReceiver = substr(InnReceiver,1,13);
                Reports[rc*REP_SIZE + 0] = ERR_PARAM_TOO_LONG;
                Reports[rc*REP_SIZE + 1] = "По устройству " + IdPos + " параметр 'ИНН получателя' " +
                                           "превышает 13 символов и будет обрезан.";
                rc = rc + 1;
            end;

            if (strlen(KppReceiver) > 10)
                KppReceiver = substr(KppReceiver,1,10);
                Reports[rc*REP_SIZE + 0] = ERR_PARAM_TOO_LONG;
                Reports[rc*REP_SIZE + 1] = "По устройству " + IdPos + " параметр 'КПП получателя' " +
                                           "превышает 10 символов и будет обрезан.";
                rc = rc + 1;
            end;

            if (strlen(AccountReceiver) > 21)
                AccountReceiver = substr(AccountReceiver,1,21);
                Reports[rc*REP_SIZE + 0] = ERR_PARAM_TOO_LONG;
                Reports[rc*REP_SIZE + 1] = "По устройству " + IdPos + " параметр 'Счёт получателя' " +
                                           "превышает 21 символ и будет обрезан.";
                rc = rc + 1;
            end;

            //вставляем запись в справочник терминалов
            sqlquery = "insert into dsprterm_usr"
              + "\n" + "            (T_CODE_FIRM       "
              + "\n" + "            ,T_OPEN_CLOSE      "
              + "\n" + "            ,T_NAME_FIRM       "
              + "\n" + "            ,T_CODE_OFFICE     "
              + "\n" + "            ,T_NAME_OFFICE     "
              + "\n" + "            ,T_NUMBER_TERMINAL "
              + "\n" + "            ,T_PERCENT_VALUE   "
              + "\n" + "            ,T_ACC_POSTUPLEN   "
              + "\n" + "            ,T_ACC_OPLAT       "
              + "\n" + "            ,T_ACC_PERCENT     "
              + "\n" + "            ,T_MFO_RECEIVER    "
              + "\n" + "            ,T_INN_RECEIVER    "
              + "\n" + "            ,T_KPP_RECEIVER    "
              + "\n" + "            ,T_ACCOUNT_RECEIVER"
              + "\n" + "            ,T_NUMBER_DOGOVOR  "
              + "\n" + "            ,T_RESERVE         "
              + "\n" + "            ,T_DEBT )          "
              + "\n" + "     values (chr(1) "           // T_CODE_FIRM
              + "\n" + "            ,chr(1) "           // T_OPEN_CLOSE
              + "\n" + "            ,:m_name_firm "     // T_NAME_FIRM
              + "\n" + "            ,chr(1) "           // T_CODE_OFFICE
              + "\n" + "            ,:m_address_firm "  // T_NAME_OFFICE
              + "\n" + "            ,:m_id_pos "        // T_NUMBER_TERMINAL
              + "\n" + "            ,:m_fee_percent "   // T_PERCENT_VALUE
              + "\n" + "            ,chr(1) "           // T_ACC_POSTUPLEN
              + "\n" + "            ,:m_acc_oplat "     // T_ACC_OPLAT
              + "\n" + "            ,:m_acc_percent "   // T_ACC_PERCENT
              + "\n" + "            ,:m_mfo_bank "      // T_MFO_RECEIVER
              + "\n" + "            ,:m_inn_receiver "  // T_INN_RECEIVER
              + "\n" + "            ,:m_kpp_receiver "  // T_KPP_RECEIVER
              + "\n" + "            ,:m_acc_receiver "  // T_ACCOUNT_RECEIVER
              + "\n" + "            ,chr(1) "           // T_NUMBER_DOGOVOR
              + "\n" + "            ,'' "               // T_RESERVE
              + "\n" + "            ,0 );";             // T_DEBT

            ExecSQL (sqlquery, makeArray (SQLParam("m_name_firm"   , CompanyName),
                                          SQLParam("m_address_firm", CompanyAddress),
                                          SQLParam("m_id_pos"      , IdPos),
                                          SQLParam("m_fee_percent" , string(FeePercent)),
                                          SQLParam("m_acc_oplat"   , ACC_OPLAT),
                                          SQLParam("m_acc_percent" , AccPercent),
                                          SQLParam("m_mfo_bank"    , BankBIC),
                                          SQLParam("m_inn_receiver", InnReceiver),
                                          SQLParam("m_kpp_receiver", KppReceiver),
                                          SQLParam("m_acc_receiver", AccountReceiver)));

            InsertedTermCount = InsertedTermCount + 1;

        end; //проверка уникальности номера терминала и счёта получателя

    OnError
        printprops (this);
    end;
    
end;


class XLAcquiringLoader

    const TYPE_FORMAT_NEW = 1;
    const TYPE_FORMAT_OLD = 2;

    var XL_Format_Type   = 0;          // формат данных
    var XL_WorkBook_Path = "c:/rspar"; // путь с входными файлами
    
    // -----------------------------------------------------------------------------------------------------
    // Флаги, необходимые для работы служебных механизмов типа XL_IsReadableRecord () и XL_FileContinues
    // -----------------------------------------------------------------------------------------------------
    
    private var XL_IsWorking         = true;  // флаг работы цикла
    private var XL_IsEmptyRowNumber1 = false; // флаг пустой строки 1
    private var XL_IsEmptyRowNumber2 = false; // флаг пустой строки 2
    private var XL_IsEmptyRowNumber3 = false; // флаг пустой строки 3
    private var XL_IsEmptyRowNumber4 = false; // флаг пустой строки 4
    private var XL_IsEmptyRowNumber5 = false; // флаг пустой строки 5
    private var XL_IsEmptyRowNumber6 = false; // флаг пустой строки 6
    private var AcquiringRecord;

    var ExcelData; // здесь будут храниться сведения, загруженные из файла Excel (XLAcquiringRecord)
 
    /*------------------------------------------------------------------------------------------------------------
     * Макрос определяет, продолжается ли файл Excel, либо же достигнут конец файла.
     * У Universal Report нет механизмов, которые вставляют что-то типа EOF в конец своего отчета, поэтому определяем
     * конец файла, если видим, что встречаются семь незначащих строк, идущих подряд.
     *-------------------------------------------------------------------------------------------------------------*/
    macro XL_FileContinues ()
        var tmp = XL_ReadCell (XL_CurrentRowNumber, XL_COLUMN_G);
                
        if   (    (ValType (tmp) == V_UNDEF) 
              and (not XL_IsEmptyRowNumber1) ) 
            XL_IsEmptyRowNumber1 = true;
        
        elif (    (ValType (tmp) == V_UNDEF) 
              and (not XL_IsEmptyRowNumber2) ) 
            XL_IsEmptyRowNumber2 = true;
        
        elif (    (ValType (tmp) == V_UNDEF) 
              and (not XL_IsEmptyRowNumber3) ) 
            XL_IsEmptyRowNumber3 = true;
        
        elif (    (ValType (tmp) == V_UNDEF) 
              and (not XL_IsEmptyRowNumber4) ) 
            XL_IsEmptyRowNumber4 = true;
        
        elif (    (ValType (tmp) == V_UNDEF) 
              and (not XL_IsEmptyRowNumber5) ) 
            XL_IsEmptyRowNumber5 = true;
            
        elif (    (ValType (tmp) == V_UNDEF) 
              and (not XL_IsEmptyRowNumber6) ) 
            XL_IsEmptyRowNumber6 = true;
        
        elif (ValType (tmp) != V_UNDEF)
            XL_IsEmptyRowNumber1 = false;
            XL_IsEmptyRowNumber2 = false;
            XL_IsEmptyRowNumber3 = false;
            XL_IsEmptyRowNumber4 = false;
            XL_IsEmptyRowNumber5 = false;
            XL_IsEmptyRowNumber6 = false;
        
        else
            XL_IsWorking = false;
        end; 
        
        return XL_IsWorking;
        
    OnError(Err)
        MsgBox(Err.Message,"| at ",Err.Line,"|in ",Err.Module); 
    end;
    
    
    /*------------------------------------------------------------------------------------------------------------
     * Макрос определяет значащую часть записи Excel - то есть ту строку, которую действительно нужно читать.
     * Возвращает true - если читать НУЖНО и false - если нет.
     * Проверяет наличие счёта получателя.
     *------------------------------------------------------------------------------------------------------------*/
    macro XL_IsReadableRecord ( )
        
        var tmp = XL_ReadCell (XL_CurrentRowNumber, XL_COLUMN_G);

        return StrIsNumber(tmp);
    
    OnError(Err)
        MsgBox(Err.Message,"| at ",Err.Line,"|in ",Err.Module); 
    end;
    
    
    /*----------------------------------------------------------------------------------------------------------------
     * Макрос проверяет, существует ли в книге Excel лист с заданным именем
     * Если существует, то возвращает порядковый номер этого листа; иначе - 0
     *---------------------------------------------------------------------------------------------------------------*/
    macro XL_ExistSheet ( what )
        var i = 1;
        while (i <= XL.Sheets.Count)
            if (XL.Sheets.Item (i).Name == what)
                return true;
            end;
            i = i + 1;
        end;
        
        return false;
    
    OnError(Err)
        MsgBox(Err.Message,"| at ",Err.Line,"|in ",Err.Module); 
    end;


    /*----------------------------------------------------------------------------------------------------------------
     * Макрос считывает суммы и коды терминала из файла процессинга; 
     * Считанные данные заполняются в ExcelData - объект класса XLAcquiringRecord
     *---------------------------------------------------------------------------------------------------------------*/
    macro XL_ReadFile ( )
        if (XL_Format_Type = TYPE_FORMAT_NEW)
            initprogress (-1, "", "Обработка файла отчета по POS-терминалам");
            XL_CurrentRowNumber = 2;
            
            while ( XL_FileContinues ) // пока файл не закончился
                if (XL_IsReadableRecord)
                    ExcelData = XLAcquiringRecord (XL_ReadCell (XL_CurrentRowNumber, XL_COLUMN_A, V_UNDEF),
                                                   XL_ReadCell (XL_CurrentRowNumber, XL_COLUMN_B, V_UNDEF),
                                                   XL_ReadCell (XL_CurrentRowNumber, XL_COLUMN_C, V_UNDEF),
                                                   XL_ReadCell (XL_CurrentRowNumber, XL_COLUMN_D, V_UNDEF),
                                                   XL_ReadCell (XL_CurrentRowNumber, XL_COLUMN_E, V_UNDEF),
                                                   XL_ReadCell (XL_CurrentRowNumber, XL_COLUMN_F, V_UNDEF),
                                                   XL_ReadCell (XL_CurrentRowNumber, XL_COLUMN_G, V_UNDEF),
                                                   XL_ReadCell (XL_CurrentRowNumber, XL_COLUMN_H, V_UNDEF),
                                                   XL_ReadCell (XL_CurrentRowNumber, XL_COLUMN_I, V_UNDEF),
                                                   XL_ReadCell (XL_CurrentRowNumber, XL_COLUMN_J, V_UNDEF));
                    ExcelData.Insert (); //вставляем в таблицу DSPRTERM_USR
                end;
                useprogress(XL_CurrentRowNumber); 
                XL_CurrentRowNumber = XL_CurrentRowNumber + 1;
            
            end;

            remprogress;
           
        else
            Msgbox ("Старый формат файла выгрузки более не поддерживается");
        end; 
    
    OnError(Err)
        MsgBox(Err.Message,"| at ",Err.Line,"|in ",Err.Module); 
    end;


    /*----------------------------------------------------------------------------------------------------------------
     * Макрос печатает таблицу с результатами загрузки терминалов в справочник 
     * Циклично считываются пары значений из массива с ошибками и выводятся группами по типам ошибок.
     *---------------------------------------------------------------------------------------------------------------*/
    macro XL_PrintReport ( )
        var i = 0;
        var t = 0;
        var first_row = true; //для отсечения первого разделителя строк

        println("Устройств в файле: "   + FileTermCount     + "\n" +
                "Устройств загружено: " + InsertedTermCount + "\n");

        if (rc != 0)
           /*[─│┌┬┐├┼┤└┴┘];*/
            [Протокол ошибок:];
            [┌───────────────────────────────┬────────────────────────────────────────────────────────────────────────────────────────────────────────────┐];

            //выводим ошибки терминалов с неверным банком
            for (i, 0, rc-1)
                if (Reports[i*REP_SIZE + 0] == ERR_WRONG_BANK)
                    if (not first_row)
                    [├───────────────────────────────┼────────────────────────────────────────────────────────────────────────────────────────────────────────────┤];
                    end;
                    [│ ############################# │ ########################################################################################################## │]
                    ("Объект не создан", Reports[i*REP_SIZE+1]:w);
                    first_row = false;
                end;
            end;

            //выводим ошибки неуникальности терминалов
            for (i, 0, rc-1)
                if (Reports[i*REP_SIZE + 0] == ERR_NOT_UNIQUE)
                    if (not first_row)
                    [├───────────────────────────────┼────────────────────────────────────────────────────────────────────────────────────────────────────────────┤];
                    end;
                    [│ ############################# │ ########################################################################################################## │]
                    ("Объект не создан", Reports[i*REP_SIZE+1]:w);
                    first_row = false;
                end;
            end;

            //выводим ошибки недостающих параметров
            for (i, 0, rc-1)
                if (Reports[i*REP_SIZE + 0] == ERR_PARAM_MISSING)
                    if (not first_row)
                    [├───────────────────────────────┼────────────────────────────────────────────────────────────────────────────────────────────────────────────┤];
                    end;
                    [│ ############################# │ ########################################################################################################## │]
                    ("Объект не создан", Reports[i*REP_SIZE+1]:w);
                    first_row = false;
                end;
            end;

            //выводим ошибки ненайденных комиссий
            for (i, 0, rc-1)
                if (Reports[i*REP_SIZE + 0] == ERR_COMISS_NOT_FOUND)
                    if (not first_row)
                    [├───────────────────────────────┼────────────────────────────────────────────────────────────────────────────────────────────────────────────┤];
                    end;
                    [│ ############################# │ ########################################################################################################## │]
                    ("Счёт комиссии не найден", Reports[i*REP_SIZE+1]:w);
                    first_row = false;
                end;
            end;

            //выводим сообщения об урезании параметров
            for (i, 0, rc-1)
                if (Reports[i*REP_SIZE + 0] == ERR_PARAM_TOO_LONG)
                    if (not first_row)
                    [├───────────────────────────────┼────────────────────────────────────────────────────────────────────────────────────────────────────────────┤];
                    end;
                    [│ ############################# │ ########################################################################################################## │]
                    ("Параметр слишком длинный", Reports[i*REP_SIZE+1]:w);
                    first_row = false;
                end;
            end;

            [└───────────────────────────────┴────────────────────────────────────────────────────────────────────────────────────────────────────────────┘];
        end;

    OnError(Err)
        MsgBox(Err.Message,"| at ",Err.Line,"|in ",Err.Module); 
    end;

    /*-----------------------------------------------------------------------------------------------------
     * Макрос инициализации главного объекта (XLAcquiringLoader)
     *-----------------------------------------------------------------------------------------------------*/
    macro XL_Init ()
        var errCode;
        var result;
        
        if ( GetRegistryValue("PRBB/ACQUIRING/IMPORT_DIRECTORY", V_STRING, XL_WorkBook_Path, errCode) and not errCode)

            XL = CreateObject("rsax", "TRsAxServer", "RsBankAxServer", false).CreateComObject("Excel.Application",true);
            
            XL.application.defaultfilepath = XL_WorkBook_Path; // путь по умолчанию
            // окно выбора файла
            XL_WorkBook_Path = xl.application.GetOpenFileName ("Все файлы (*.*),*.*", null, "Выберите файл для загрузки");

            if (XL_WorkBook_Path == v_undef)
                msgbox("Действие отменено пользователем.|Файл не был загружен.");
                exit ();
            
            elif (XL_WorkBook_Path == false)
                msgbox ("Загружаемый файл не соотвествует требуемому формату");
                exit ();
            end;
            
            XL_Book  = XL.Workbooks.Open (XL_WorkBook_Path);
            XL_Sheet = XL_Book.ActiveSheet ();

            if (XL_ExistSheet ("OLE_DS Sheet"))
                XL_Format_Type = TYPE_FORMAT_NEW;
            else
                XL_Format_Type = TYPE_FORMAT_OLD;
            end;
         
        else
            Msgbox ("Не найдена настройка реестра PRBB/ACQUIRING/IMPORT_DIRECTORY"
                    "|Загрузка справочника прервана");
            Exit ();
        end;


    OnError(Err)
        MsgBox(Err.Message,"| at ",Err.Line,"|in ",Err.Module); 
    end;
    

    XL_Init ();
    XL_ReadFile ();
    XL_PrintReport ();
    
    XL.Quit ();
    
    XL_Sheet = null;
    XL_Book  = null;
end;

// ----- entry point  ---------------------------------------------------------------------------------------

    if(not ВходитВГруппу({oper},101))
        msgbox("Вы не включены в группу '101 - Работы по эквайрингу' ");
        return 1;
    end;

    var r = XLAcquiringLoader ();
    r = null;