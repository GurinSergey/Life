import bankinter,oralib,likepy,RSD;

/*13.03.2013 Chesnokov D.S. логгирование запуска для поиска неиспользуемых макросов*/
ExecmacroFile("lib_log.mac", "LogProcedure", "Regtools.mac");

var stat, Regpath,ParentId= 0,PrevKeyId = 0,error,_i=0;
array aSegment;
macro ChrSplitStr(cStr,aSegment,cChr);
var
  cC= Trim(cStr),i=0,j=-1,l=StrLen(cC),segment="";
  While (i<l)
    if ((i=StrBrk((cC=substr(cC,i+1)),cChr))==0) i=l+1; end; 
       segment=substr(cC,1,i-1);
     if (trim(segment) != "")
      aSegment((j=j+1))=segment;
     end;
  end;
end;

macro Getregkey(Regpath);
/*
private var params:TArray = makeArray( SQLParam( "Regpath",Regpath));
private var stat:integer = execStoredFunc( "RSB_COMMON.GetRegParm", V_INTEGER, params );
return stat;
*/
var stat =  rsdrecordset(" SELECT RSB_common.GetRegParm( '"+Regpath+"') from dual ");
var RegKey:integer = 0;
  if ( stat.movenext() )
   RegKey=stat.value(0);
  end;
return int(RegKey);
end;

macro GetregkeyPathName(RegKey);

var stat =  rsdrecordset("SELECT reg.T_name from dregparm_dbt reg where reg.T_KEYID = " + RegKey);

var RegKeyPath="";
  if ( stat.movenext() )
   RegKeyPath=stat.value(0);
  end;

debugbreak;
debugbreak;
debugbreak;
debugbreak;

return RegKeyPath;

	
end;



macro GetregkeyPath(RegKey);
//private var params1:TArray = makeArray( SQLParam( "RegKey",RegKey));
//private var stat = execStoredFunc( "RSB_COMMON.GetRegKeyPath", v_string , params1 );
var stat =  rsdrecordset(" SELECT RSB_common.GetRegKeyPath( "+RegKey+") from dual ");
var RegKeyPath="";
  if ( stat.movenext() )
   RegKeyPath=stat.value(0);
  end;
return RegKeyPath;
end;

macro SetRegpath(PARENTID,tNAME,TYPE,GLOBAL,DESCRIPTION,SECURITY);

if (valtype(tNAME) == v_undef) tNAME = ""; end;
if (valtype(TYPE) == v_undef) TYPE = 2; end;
if ((valtype(GLOBAL) == v_undef) or (Trim(GLOBAL) ==""))   GLOBAL = "#"; end;
if ((valtype(DESCRIPTION) == v_undef) or (Trim(DESCRIPTION) =="")) DESCRIPTION = strfor(0); end;
if ((valtype(SECURITY) == v_undef) or (Trim(SECURITY) =="")) SECURITY = "#"; end;
/*
private var sqltext = "insert into dregparm_dbt (T_KEYID,T_PARENTID,T_NAME,T_TYPE,T_GLOBAL,T_DESCRIPTION,T_SECURITY) "+
                      "\n values (0,:PARENTID, :NAME, :TYPE, :GLOBAL, :DESCRIPTION, decode('"+SECURITY+"', 'X', 'X', null ))";

private var params:TArray = makeArray(  SQLParam( "PARENTID",PARENTID),
					SQLParam( "NAME",tNAME),
					SQLParam( "TYPE",TYPE),
					SQLParam( "GLOBAL",GLOBAL),
					SQLParam( "DESCRIPTION",DESCRIPTION) /*,
					SQLParam( "SECURITY",SECURITY)*/);

private var stat = execSQL( sqltext, params);
*/

private var sqltext = "insert into dregparm_dbt (T_KEYID,T_PARENTID,T_NAME,T_TYPE,T_GLOBAL,T_DESCRIPTION,T_SECURITY) "+
                      "\n values (0,"+PARENTID+",'"+tNAME+"',"+TYPE+",decode('"+GLOBAL+"', 'X', 'X', null ),'"+DESCRIPTION+"',decode('"+SECURITY+"', 'X', 'X', null ))";
private var rsdcomm_ = rsdcommand(sqltext);
rsdcomm_.Execute;
//msgbox(stat);
return stat;
end;

macro SetRegpathParm(KEYID,TYPE,GLOBAL,DESCRIPTION,SECURITY);

if (valtype(TYPE) == v_undef) TYPE = 2; end;
if ((valtype(GLOBAL) == v_undef) or (Trim(GLOBAL) ==""))   GLOBAL = "#"; end;
if ((valtype(DESCRIPTION) == v_undef) or (Trim(DESCRIPTION) =="")) DESCRIPTION = " "; end;
if ((valtype(SECURITY) == v_undef) or (trim(SECURITY) =="")) SECURITY = "#"; end;
/*
private var sqltext = "update dregparm_dbt  set  T_TYPE = :TYPE ,"+
                                             "\n T_GLOBAL = :GLOBAL ,"+
                                             "\n T_DESCRIPTION = :DESCRIPTION ,"+
                                             "\n T_SECURITY = :SECURITY " +
                                             "\n WHERE T_KEYID = :KEYID ";


private var params:TArray = makeArray(  SQLParam( "TYPE",TYPE),
					SQLParam( "GLOBAL",GLOBAL),
					SQLParam( "DESCRIPTION",DESCRIPTION),
					SQLParam( "SECURITY",SECURITY),
					SQLParam( "KEYID",KeyID));

private var stat = execSQL( sqltext, params);
*/

private var sqltext = "update dregparm_dbt  set  T_TYPE = "+ TYPE+ " ,"+
                                             "\n T_GLOBAL = decode('"+GLOBAL+"', 'X', 'X', null ),"+
                                             "\n T_DESCRIPTION = '"+ DESCRIPTION +"',"+
                                             "\n T_SECURITY = decode('"+SECURITY+"', 'X', 'X', null ) "+
                                             "\n WHERE T_KEYID ="+ KEYID;


private var rsdcomm_ = rsdcommand(sqltext);
rsdcomm_.Execute;
//private var stat = execSQL( sqltext );
return stat;
end;



macro InsertRegPath(pValue,TYPE,GLOBAL,DESCRIPTION,SECURITY);
// debugbreak;
 if  ((pValue == "BANK_INI\\123456789") OR (pValue == "BANK_INI\\123456789\\QWERTY"))
	debugbreak;
 end;
 asize(aSegment,0);
//debugbreak;

 ChrSplitStr(pValue,aSegment,"\\");
 _i = 0;
 while (_i < asize(aSegment))
 if (trim(aSegment(_i)) != "")
  if (_i == 0)
   Regpath =aSegment(_i);
  else
   Regpath =string(Regpath,"\\",aSegment(_i));
  end;
  stat = Getregkey(Regpath);
// var  _xpath = GetregkeyPath(stat);

   println (Regpath + "  --  " + stat);

//   if (valtype(_xpath) != v_string)
   if (GetregkeyPathName(stat) == "")

     if (_i==0) 
        ParentId = 0; 
     else 
        ParentId = PrevKeyId; 
	println ("[+[+["+ParentId+"]+]+]]");
     end;
	println ("[[["+ParentId+"]]]]");
       SetRegpath(ParentId,aSegment(_i));
   end;
  
       PrevKeyId = stat;
   RsdCommand("COMMIT;").Execute;
  _i=_i+1;
  end; /*if trim */
 end;

/*
 RsdCommand("COMMIT;").Execute;
private var  params = makeArray( SQLParam (":1", "DREGPARM_DBT_SEQ"));
   execStoredfunc ("RSB_AINC.restore_seq", V_UNDEF, params);
*/
// stat = Getregkey(pValue);
 PrevKeyId = Getregkey(Regpath);
 SetRegpathParm(PrevKeyId,TYPE,GLOBAL,DESCRIPTION,SECURITY);

end;
/*  точка входа */

//InsertRegPath("PRBB\\super TEST\\БАНКА",2,"X","dfvdsvs","X"); 
//InsertRegPath("super TEST",2,"","",""); 


