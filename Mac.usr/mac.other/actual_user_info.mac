/************************************************************************************************************************
  Название макроса: actual_user_info.mac
  Описание        : Процедура актуализации информации о пользователях
  Автор           : DPN
  Изменения       :12.09.2014 R-449700-2 DPN Появился банк "Солидарность", исключён "ЭВ - Ульяновск" 
************************************************************************************************************************/



import rcw, rsexts, RSD;
import globals, oralib;
import "fg_Life_parm.mac";
import BankInter;
import  likePy;
import Календарь;
import RsbFormsInter;

class UserData
    var rs;
    
    macro generateFileName(name:String): String
        name = name + {oper}+ "_" + date + "_" + time;
        name = StrSubst ( name, ".", "_" );
        name = StrSubst ( name, ":", "_" );
        name = "../txtfile/" +StrSubst ( name, " ", "_" ) + ".txt";
        return name;
    end;
    
    macro correctName()
    var sqlUpdateName, selectDiffernt;
    var i = 0;
//-------------------------------------------------------------------------------
//            Исправляет поле ФИО сотрудника согласно файлу Excel
//-------------------------------------------------------------------------------

//-------------------------------------Для лога----------------------------------
        selectDiffernt = " SELECT VUT.T_ID, VUT.T_ID_PRBB,prs.T_NAME oldName, VUT.T_NAME newName" +"\n"+
                         " FROM virtual_user_temp vut, dperson_dbt prs"                           +"\n"+ 
                         " WHERE vut.T_ID = prs.T_OPER"                                           +"\n"+
                         " AND initcap(vut.T_NAME) != initcap(prs.T_NAME)"                        +"\n"+
                         " AND prs.T_USERBLOCKED != chr(88) "                                     +"\n"+
                         " AND PRS.T_ISDELETED != chr(88) "                                       +"\n"+
                         " AND PRS.T_USERCLOSED != chr(88)";
        rs = TRsbDataSet(selectDiffernt);
       
           [     Список переименованных сотрудников];
           [    ┌───────────────┬──────────────┬───────────────────────────────────┬───────────────────────────────────┐];
           [    │ Номер в банке │ Номер в ПРББ │        Имя в RS-Bank (было)       │       Имя в RS-Bank (стало)       │];
           [    ├───────────────┼──────────────┼───────────────────────────────────┼───────────────────────────────────┤];
        
        while (rs.movenext)
           [    │     #####     │     #####    │ ################################# │ ################################# │]
               (rs.value("T_ID"), rs.value("T_ID_PRBB"), rs.value("oldName"), rs.value("newName"));
               i = i +1;
        end;
        
           [    └───────────────┴──────────────┴───────────────────────────────────┴───────────────────────────────────┘];
           [     Всего: ####                                                                              ] (i:l);
           [ ];
        
//------------------------------------Апдейт поля ФИО------------------------------------------------------------------
        sqlUpdateName = " UPDATE dperson_dbt prs" +"\n"+
                        " SET prs.T_NAME = (SELECT initcap(VUT.T_NAME)"                       +"\n"+
                        "                   FROM virtual_user_temp vut "                      +"\n"+
                        "                   WHERE vut.T_ID = prs.T_OPER "                     +"\n"+
                        "                   AND initcap(vut.T_NAME) != initcap(prs.T_NAME))"  +"\n"+
                        " WHERE EXISTS     (SELECT 1 "                                        +"\n"+
                        "                   FROM virtual_user_temp vut "                      +"\n"+
                        "                   WHERE vut.T_ID = prs.T_OPER"                      +"\n"+
                        "                   AND initcap(vut.T_NAME) != initcap(prs.T_NAME)"   +"\n"+
                        "                   AND prs.T_USERBLOCKED != chr(88) "                +"\n"+
                        "                   AND PRS.T_ISDELETED != chr(88) "                  +"\n"+
                        "                   AND PRS.T_USERCLOSED != chr(88))";

       rs = RsdCommand(sqlUpdateName);
       rs.execute();
    end;
    
    macro lockUser()
    var selectLock, sqlUpdatelock;
    var i = 0;
//-------------------------------------------------------------------------------
//           Блокирует пользователей у которых статус уволена/декрет
//-------------------------------------------------------------------------------

//-------------------------------------Для лога----------------------------------
        selectLock = " SELECT vut.T_ID, VUT.T_ID_PRBB, VUT.T_VIRTUAL_NAME, VUT.T_NAME, VUT.T_STATUS" +"\n"+
                      " FROM virtual_user_temp vut, dperson_dbt prs"                                 +"\n"+
                      " WHERE vut.T_ID = prs.T_OPER "                                                +"\n"+
                      " AND VUT.T_STATUS != chr(1)"                                                  +"\n"+
                      " AND prs.T_USERBLOCKED != chr(88) "                                           +"\n"+
                      " AND PRS.T_ISDELETED != chr(88) "                                             +"\n"+
                      " AND PRS.T_USERCLOSED != chr(88)";
        rs = TRsbDataSet(selectLock);
        
            [     Список заблокированных сотрудников];
            [    ┌───────────────┬──────────────┬───────────────────────────────────┬───────────────────────────────────┬──────────────────┐];
            [    │ Номер в банке │ Номер в ПРББ │          ФИО сотрудника           │           Имя в RS-Bank           │     Причина      │];
            [    ├───────────────┼──────────────┼───────────────────────────────────┼───────────────────────────────────┼──────────────────┤];
        
        while (rs.movenext)
            [    │     ######    │    ######    │   #############################   │   #############################   │   ############   │] 
                 (rs.value("T_ID"):c, rs.value("T_ID_PRBB"):c, rs.value("T_VIRTUAL_NAME"):c, rs.value("T_NAME"):c, rs.value("T_STATUS"):c);
                 i = i +1;
        end;
        
            [    └───────────────┴──────────────┴───────────────────────────────────┴───────────────────────────────────┴──────────────────┘];
            [     Всего: ####                                                                              ] (i:l);
            [ ];
            
//----------------------------------Блокировка пользователей-----------------------------------
        sqlUpdateLock =  " UPDATE dperson_dbt prs"                            +"\n"+
                         " SET PRS.T_USERBLOCKED = chr(88)"                   +"\n"+
                         " where exists (SELECT 1 "                           +"\n"+
                         "               FROM virtual_user_temp vut "         +"\n"+
                         "               WHERE vut.T_ID = prs.T_OPER "        +"\n"+
                         "               AND VUT.T_STATUS != chr(1)"          +"\n"+
                        "                AND prs.T_USERBLOCKED != chr(88) "   +"\n"+
                        "                AND PRS.T_ISDELETED != chr(88) "     +"\n"+
                        "                AND PRS.T_USERCLOSED != chr(88))";
        rs = RsdCommand(sqlUpdateLock);
        rs.execute();
    end;
    
    macro correctVirtualName()
        var selectVirtual, sqlUpdateVirtual;
        var i = 0;
//----------------------------------------------------------------------------------------------------------
// Записывает в графу "Наименование "виртуального" Пользователя" отчёта "Пользователи и их меню(person_lnk)" 
// Наименование пользователя из ПРББ и их номер в ПРББ
//----------------------------------------------------------------------------------------------------------

//--------------------------------------Для лога------------------------------------------------------------

        selectVirtual = " SELECT PRS.T_USER, PRS.T_NAMEUSER, INITCAP(vut.T_VIRTUAL_NAME) || ' ' || VUT.T_ID_PRBB virtual " +"\n"+
                        " FROM virtual_user_temp vut, dperson_lnk_dbt prs , dperson_dbt pers                             " +"\n"+                    
                        " WHERE PRS.T_USER = VUT.T_ID                                                                    " +"\n"+
                        " AND prs.T_NAMEUSER != INITCAP(vut.T_VIRTUAL_NAME) || chr(1) || VUT.T_ID_PRBB                   " +"\n"+
                        " AND vut.T_ID = pers.T_OPER                                                                     " +"\n"+
                        " AND pers.T_USERBLOCKED != chr(88)                                                              " +"\n"+
                        " AND PeRS.T_ISDELETED != chr(88)                                                                " +"\n"+
                        " AND PeRS.T_USERCLOSED != chr(88)                                                               ";

        rs = TRsbDataSet(selectVirtual);
       
           [     Список сотрудников, для которых были внесены изменения в поле "Наименование "виртуального" Пользователя" отчёта "Пользователи и их меню(person_lnk)];
           [    ┌───────────────┬────────────────────────────────────┬────────────────────────────────────┐];
           [    │ Номер в банке │Наименов. вирт. пользователя (было) │Наименов. вирт. пользователя (стало)│];
           [    ├───────────────┼────────────────────────────────────┼────────────────────────────────────┤];
        
        while (rs.movenext)
           [    │     #####     │  ################################# │  ################################# │]
               (rs.value("T_USER"), rs.value("T_NAMEUSER"), rs.value("virtual"));
               i = i +1;
        end;
        
           [    └───────────────┴────────────────────────────────────┴────────────────────────────────────┘];
           [     Всего: ####                                                                              ] (i:l);
           [ ];
        
       
        sqlUpdateVirtual = " UPDATE dperson_lnk_dbt prs"                                                             +"\n"+
                           " SET prs.T_NAMEUSER = (SELECT (INITCAP(vut.T_VIRTUAL_NAME) || chr(1) || VUT.T_ID_PRBB)"  +"\n"+
                           "                       FROM virtual_user_temp vut"                                       +"\n"+
                           "                       WHERE PRS.T_USER = VUT.T_ID)"                                     +"\n"+
                           " WHERE EXISTS (SELECT 1"                                                                 +"\n"+
                           "               FROM virtual_user_temp vut, dperson_dbt pers"                             +"\n"+
                           "               WHERE PRS.T_USER = VUT.T_ID"                                              +"\n"+
                           "               AND vut.T_ID = pers.T_OPER "                                              +"\n"+                        
                           "               AND pers.T_USERBLOCKED != chr(88) "                                       +"\n"+
                           "               AND PeRS.T_ISDELETED != chr(88) "                                         +"\n"+
                           "               AND PeRS.T_USERCLOSED != chr(88))";
                          
        rs = RsdCommand(sqlUpdateVirtual);
        rs.execute();
    end;
//------------------------------------------------------------------------------------
// Делает резервную копию всех изменённых данных
//------------------------------------------------------------------------------------
    macro resCopy()
       var rCopy = " INSERT INTO user_actual_rollback "                                                                   + "\n" +
                   "             (t_id,  t_person_name, t_persone_userblocked, t_prs_lnk_nameuser, T_systime)"            + "\n" +
                   "             SELECT vut.t_id, prs.t_name, prs.t_userblocked, pers.t_nameuser, "                       + "\n" +
                   "                     To_date('" + {curDate} + " " +  time()+ "', 'dd.mm.yyyy hh24:mi:ss')"            + "\n" +
                   "             FROM virtual_user_temp vut, dperson_dbt prs, dperson_lnk_dbt pers"                       + "\n" +
                   "              WHERE   pers.t_user(+) = prs.t_oper AND prs.t_oper = vut.t_id";
       rs = RsdCommand(rCopy);
       rs.execute();
   end;
      
//------------------------------------------------------------------------------------
// Восстанавливает все изменённые данные
//------------------------------------------------------------------------------------   
    macro dataBack() 
        var backPersone, backPersoneLnk;
        var user : UserData;
        var timeBack;
        var fname;
        rsldefcon.BeginTrans;
        backPersone = " UPDATE dperson_dbt prs                                "  + "\n" +
                      " SET prs.T_NAME = (SELECT initcap(uar.T_PERSON_NAME)   "  + "\n" +                   
                      "                   FROM user_actual_rollback uar       "  + "\n" +                  
                      "                   WHERE uar.T_ID = prs.T_OPER  ),     "  + "\n" +
                      " PRS.T_USERBLOCKED = (SELECT uar.T_PERSONE_USERBLOCKED "  + "\n" +                   
                      "                      FROM user_actual_rollback uar    "  + "\n" +                  
                      "                      WHERE uar.T_ID = prs.T_OPER)     "  + "\n" +
                      " WHERE EXISTS     (SELECT 1                            "  + "\n" +            
                      "                   FROM user_actual_rollback uar       "  + "\n" +            
                      "                   WHERE uar.T_ID = prs.T_OPER )" ;
       rs = RsdCommand(backPersone);
       rs.execute();  

       backPersoneLnk = " UPDATE dperson_lnk_dbt prs " 
                        " SET PRS.T_NAMEUSER = (SELECT uar.T_PRS_LNK_NAMEUSER " + "\n" +  
                        "                       FROM user_actual_rollback uar " + "\n" +                                     
                        "                       WHERE PRS.T_USER = uar.T_ID)  " + "\n" +  
                        " WHERE EXISTS (SELECT 1                              " + "\n" +  
                        "               FROM user_actual_rollback uar         " + "\n" +                   
                        "               WHERE PRS.T_USER = uar.T_ID)          ";

       rs = RsdCommand(backPersoneLnk); 
       rs.execute();
       rsldefcon.CommitTrans;
       
       timeBack = " select TO_char(uar.T_systime, 'dd.mm.yyyy hh24:mi:ss') time " +  
                        " from user_actual_rollback uar where rownum = 1 "; 
       rs = TRsbDataSet(timeBack);
      
       
      
       
       fname = user.generateFileName("rollback");
       setOutput(fname, true);

       if (not rs.movenext())
           [ ];
           [     Процедура восстановления данных не выполнена];
           [     Нет данных для отката];
           [     Место размещения файла-отчёта: ########################################################################################] (fname:l);
           return false;
       else
            [ ];
            [     Данные о сотрудниках были восстановлены до состояния на: ########################] (rs.value("time"));
            [     Наименование банка: ####################################################] ({name_Bank});
            [     Дата/Время запуска процедуры: ########## ########] ({curDate}, time());
            [     Процедуру запустил пользователь номер: ##### ##############################################] ({oper}, {name_oper});
            [     Место размещения файла-отчёта: ########################################################################################] (fname:l);
       end;
       setOutput(null, true);
       viewFile(fname); 
       close(fname);
        exit(1);         
       return true; 
    end;       
    OnError();
    if (RSLDefCon.IsinTrans)
           RSLDefCon.RollbackTrans;
    end;
    return false;
end;

class XLRecord (_id, 
                _idPRBB, 
                _name, 
                _virtualName, 
                _stat 
               )
    
    var id = _id;                   /* Номмер пользователя в текущем банке */
    var idPRBB = _idPRBB;           /* Номер пользователя в ПРББ           */
    var name = _name;               /* ФИО                                 */
    var virtualName = _virtualName; /* виртуальный пользователь            */
    var stat = _stat;               /* Статус(уволена,декрет)              */

    
        
    macro logfile(argument: TArray)
        var i = 1;
        var arLength = argument.size;
            [    │     ######    │    ######    │   #############################   │   #############################   │   ############   │] 
            (id:c, idPRBB:c, virtualName:c, name:c, stat:c);
    end;

// ---------------------------------------------------------------------------------------------
    macro Insert () 
        private var sqlquery;
        if (stat == "Undefined")
            stat = "";
        end;
        if (idPRBB == 0) 
            idPRBB = "";
            sqlquery = "insert into virtual_user_temp "                                       +
                                   "               (T_ID, T_NAME, T_VIRTUAL_NAME, T_STATUS) " +
                                   "        values (:t_id, :t_name, :t_virtualName, :t_stat )";

            ExecSQL (sqlquery, makeArray (SQLParam ( "t_id"          ,    int  ( this.id ) ),
                                          SQLParam ( "t_name"        ,    trim ( this.name ) ),
                                          SQLParam ( "t_virtualName" ,    trim ( this.virtualName ) ),
                                          SQLParam ( "t_stat"        ,    trim ( this.stat ) ) ), true);
        else                                  
            sqlquery = "insert into virtual_user_temp " +
                                   "               (T_ID, T_ID_PRBB, T_NAME, T_VIRTUAL_NAME, T_STATUS) " +
                                   "        values (:t_id, :t_idPRBB, :t_name, :t_virtualName, :t_stat )";

            ExecSQL (sqlquery, makeArray (SQLParam ( "t_id"          ,    int  ( this.id ) ),
                                          SQLParam ( "t_idPRBB"      ,    int  ( this.idPRBB ) ),
                                          SQLParam ( "t_name"        ,    trim ( this.name ) ),
                                          SQLParam ( "t_virtualName" ,    trim ( this.virtualName ) ),
                                          SQLParam ( "t_stat"        ,    trim ( this.stat ) ) ), true); 
        end;
             [    │     ######    │    ######    │   #############################   │   #############################   │   ############   │] 
            (this.id:c, idPRBB:c, this.virtualName:c, this.name:c, this.stat :c);  
    end;
end;
class XLLoader
 
    const XL_COLUMN_A = 1;
    const XL_COLUMN_B = 2;
    const XL_COLUMN_C = 3;
    const XL_COLUMN_D = 4;
    const XL_COLUMN_E = 5;
    const XL_COLUMN_F = 6;
    const XL_COLUMN_G = 7;
    const XL_COLUMN_H = 8;
    const XL_COLUMN_I = 9;
    const XL_COLUMN_J = 10;
    const XL_COLUMN_K = 11;
    const XL_COLUMN_L = 12;
    const XL_COLUMN_M = 13;
    const XL_COLUMN_N = 14;
    const XL_COLUMN_O = 15;
    
    var XL;                                                              // для коннекта с экселем
    var XL_Sheet;                                                        // для коннекта с экселем
    var XL_Book;                                                         // для коннекта с экселем
    var XL_WorkBook_Path          = "c:/rspar";                          // путь с входными файлами
    private var fgBank;                                                  // Для определения банка
    // -----------------------------------------------------------------------------------------------------
    // Флаги, необходимые для работы служебных механизмов типа XL_IsReadableRecord () и XL_FileContinues ()
    // -----------------------------------------------------------------------------------------------------
    
    private var XL_IsWorking                 = true;  // флаг работы цикла
    private var XL_IsEmptyRow         = false;        // флаг пустой строки 1
    private var XL_CurrentRowNumber          = 0;     // главный счетчик по входному файлу
    private var ExcelData;                            // здесь будут храниться сведения, загруженные из файла Excel (XLAcquiringRecord)
    private var XL_CurrentColumnNumber = 0;           // выбранная колонка файла Excel(соответствует текущему банку)
    private var BIC = 0;
    //--------------------------------------------------------------------------------------------
    //    Определяем текущий банк
    //--------------------------------------------------------------------------------------------
    macro bankIdentify()
        fgBank = fg_life_subject({OurBank});

        if (fgBank.is_VUZ ) 
            XL_CurrentColumnNumber = XL_COLUMN_D;
        elif(fgBank.is_SLD )                       //12.09.2014 R-449700-2 DPN
            XL_CurrentColumnNumber = XL_COLUMN_H;  //12.09.2014 R-449700-2 DPN
        elif(fgBank.is_EXV_Volgograd ) 
            XL_CurrentColumnNumber = XL_COLUMN_F;
        elif(fgBank.is_EXV_Voronezh ) 
            XL_CurrentColumnNumber = XL_COLUMN_G;
       // elif(fgBank.is_EXV_Ulyanovsk )             //12.09.2014 R-449700-2 DPN 
       //     XL_CurrentColumnNumber = XL_COLUMN_H;  //12.09.2014 R-449700-2 DPN
        elif(fgBank.is_EXV_Stavropol ) 
            XL_CurrentColumnNumber = XL_COLUMN_I;
        elif(fgBank.is_EXV ) 
            XL_CurrentColumnNumber = XL_COLUMN_E;
        elif(fgBank.is_NBS ) 
            XL_CurrentColumnNumber = XL_COLUMN_J;
        elif(fgBank.is_GEB ) 
            XL_CurrentColumnNumber = XL_COLUMN_K;
        end;
        
        return XL_CurrentColumnNumber;
    end;
 
  //----------------------------------------------------------------------------------------------------------
    /*----------------------------------------------------------------------------------------------------------------
     * Чтение значения ячейки 
     *        _Row              - строка 
     *        _Col              - столбец
     *        _RSLDataType      - RSL-тип содержимого 
     *---------------------------------------------------------------------------------------------------------------*/
    macro XL_ReadCell ( _Row, _Col, _RSLDataType)
        if ( ValType ( _RSLDataType ) == V_UNDEF)
            return XL_Sheet.cells (_Row, _Col).value;
        elif ( _RSLDataType  == V_INTEGER)
            return int (XL_Sheet.cells (_Row, _Col).text);
        elif (  _RSLDataType == V_DOUBLE)
            return double (XL_Sheet.cells (_Row, _Col).text);
        elif (  _RSLDataType == V_MONEY)
            return money (XL_Sheet.cells (_Row, _Col).value);
        elif (  _RSLDataType == V_STRING)
            return string(XL_Sheet.cells (_Row, _Col).value); 
        else
            return trim (XL_Sheet.cells (_Row, _Col).text);
        end;
    end;
    
    /*------------------------------------------------------------------------------------------------------------
     * Макрос определяет, продолжается ли файл Excel, либо же достигнут конец файла.
     * Если видим, что встречаются семь незначащих строк, идущих подряд...
     *-------------------------------------------------------------------------------------------------------------*/
    macro XL_FileContinues ()
        var tmp = XL_ReadCell (XL_CurrentRowNumber, XL_COLUMN_A); 
                
        if ((ValType (tmp) == V_UNDEF) and (not XL_IsEmptyRow) ) 
            XL_IsEmptyRow = true;
            XL_IsWorking = false;
        end; 
        
        return XL_IsWorking;
    end;
    
    
    /*------------------------------------------------------------------------------------------------------------
     * Макрос определяет значащую часть записи Excel - то есть ту строку, которую действительно нужно читать.
     * Возвращает true - если читать НУЖНО и false - если нет.
     *------------------------------------------------------------------------------------------------------------*/
    macro XL_IsReadableRecord ( )
        var tmp = XL_ReadCell (XL_CurrentRowNumber, XL_CurrentColumnNumber);
        
        if (ValType (tmp) != V_UNDEF) 
            return true;
        else         
            return false;
        end;
    end;

    //---------------------------------------------------------------------------------------------------------------
    //   Чистит временную таблицу
    //---------------------------------------------------------------------------------------------------------------
    macro delAll(s:String)
        rsldefcon.beginTrans();
            var del = "DELETE from "+ s + " vut";
            var rs = RsdCommand(del);
            rs.execute();
        rsldefcon.CommitTrans;
        onError   
            if (RSLDefCon.IsinTrans)
                RSLDefCon.RollbackTrans;
                msgbox("Не выполнено! Ошибка при удалении данных из временной таблицы " + s);
                exit(1);
            end;
    end;
    /*----------------------------------------------------------------------------------------------------------------
     * Считанные данные заполняются в ExcelData - объект класса XLAcquiringRecord
     *---------------------------------------------------------------------------------------------------------------*/
    
    macro XL_ReadFile ( )
        var ExcelData;
        var curr_column;
        var user:UserData;
        var i = 0;
        
        var fname = user.generateFileName("persone_changes");        
        setOutput (fname, true);
        
        initprogress (-1, "", "Обработка файла...");
        XL_CurrentRowNumber = 3; 
        
        curr_column = bankIdentify(); 
        delAll("user_actual_rollback");        
        delAll("virtual_user_temp");
        
        [  Процедура актуализации данных о сотрудниках банка. Журнал событий.];
        [  Наименование банка: ####################################################] ({name_Bank});
        [  Дата/Время запуска процедуры: ########## ########] ({curDate}, time());
        [  Процедуру запустил пользователь номер: ##### ##############################################] ({oper}, {name_oper});
        [  Место размещения ЛОГ-файла: ########################################################################################] (fname:l);
        [ ];
        [  История изменений:];
        [ ];
        [     Список отобранных данных из таблицы Excel по банку ####################################################] ({name_Bank});
        [    ┌───────────────┬──────────────┬───────────────────────────────────┬───────────────────────────────────┬──────────────────┐];
        [    │ Номер в банке │ Номер в ПРББ │          ФИО сотрудника           │           Имя в RS-Bank           │      Статус      │];
        [    ├───────────────┼──────────────┼───────────────────────────────────┼───────────────────────────────────┼──────────────────┤];
        while ( XL_FileContinues ) // пока файл не закончился
            if (XL_IsReadableRecord)
                ExcelData = XLRecord (XL_ReadCell (XL_CurrentRowNumber, curr_column, V_INTEGER),
                                                   XL_ReadCell (XL_CurrentRowNumber, XL_COLUMN_C, V_INTEGER),
                                                   XL_ReadCell (XL_CurrentRowNumber, XL_COLUMN_M, V_STRING),
                                                   XL_ReadCell (XL_CurrentRowNumber, XL_COLUMN_B, V_STRING),
                                                   XL_ReadCell (XL_CurrentRowNumber, XL_COLUMN_L, V_STRING));
                ExcelData.Insert ();
                i = i + 1;
            end;
            useprogress(XL_CurrentRowNumber); 
            XL_CurrentRowNumber = XL_CurrentRowNumber + 1;
        end;
       [    └───────────────┴──────────────┴───────────────────────────────────┴───────────────────────────────────┴──────────────────┘];
       [     Всего: #### ] (i:l);
       [ ];
 
       rsldefcon.beginTrans();
         user.resCopy();
         user.correctName();
         user.correctVirtualName();
         user.lockUser();
       rsldefcon.CommitTrans;
             
       setOutput (null, true);
       remprogress;   
       viewFile(fname);        
       onError   
           if (RSLDefCon.IsinTrans)
               RSLDefCon.RollbackTrans;
               msgbox("Не выполнено! SQL Error");
           end; 
    end;

    /*-----------------------------------------------------------------------------------------------------
     * Макрос инициализации объекта (XLLoader)
     *-----------------------------------------------------------------------------------------------------*/
    macro XL_Init ()
        var errCode;
        var result;
        XL = CreateObject ("rsax", "TRsAxServer", "RsBankAxServer", false).CreateComObject ("Excel.Application",true);
        XL.application.defaultfilepath = XL_WorkBook_Path; // путь по умолчанию
        XL_WorkBook_Path = xl.application.GetOpenFileName ("Все файлы (*.*),*.*", null, "Выберите файл для загрузки"); // окно выбора файла
        if ((index(XL_WorkBook_Path, ".xls") == 0) and (index(XL_WorkBook_Path, ".xlsx") == 0))
            XL_WorkBook_Path = false;
        end;
          
            
        if (XL_WorkBook_Path == false)
            msgbox ("Файл не выбран либо не соотвествует требуемому формату. Файл не был загружен.");
            exit ();
        end;
        XL_Book  = XL.Workbooks.Open (XL_WorkBook_Path); 
        XL_Sheet = XL_Book.ActiveSheet (); 
    end;
    
    macro GetBacktrace ()
        printProps (this);
    end;

    XL_Init ();
    XL_ReadFile ();
        
    XL.Quit ();
    
    XL_Sheet = null;
    XL_Book  = null;
end;

class(TRsbPanel) MainPanel();
    InitTRsbPanel();
    setCaption("Процедура актуализации информации о сотруднике");
    setStatus("Esc - Выход, Выполнить - Начать процедуру актуализации, Восстановить - Откат до предыдущего состояния");
    var buttonRefresh:TRsbPushButton = TRsbPushButton("Выполнить");
    var buttonRollback:TRsbPushButton = TRsbPushButton("Восстановить");
    var labelWarning: TRsbLabel = TRsbLabel(15, 1, "Внимание!!!");
    var labelWarning2: TRsbLabel = TRsbLabel(2, 2, "Перед импортом файла убедитесь в корректности");
    var labelWarning3: TRsbLabel = TRsbLabel(12, 3, "его содержимого!!!");
    
    setSize(35,7);
    setPosition(43,18);

    buttonRefresh.setPosition(7,5);
    buttonRefresh.setSize(9,1);
    buttonRefresh.onClicked(R2M(this,"OnClickedGO"));
    
    buttonRollback.setPosition(20,5);
    buttonRollback.setSize(9,1);
    buttonRollback.onClicked(R2M(this,"OnClickedBack"));
    
    addLabel(labelWarning);
    addLabel(labelWarning2);
    addLabel(labelWarning3);
    addControl(buttonRefresh);
    addControl(buttonRollback);
    
     macro OnClickedGO(RsbEvent)
        if (RsbEvent != RSB_EV_BUTTON_CLICKED) // Вобще то должен быть знак "==", но так оно почему-то не работает
            close(1);
            var r = XLLoader ();
            r = null;
            exit(1);
            
        end;
        return true;
    end ;
    
    macro OnClickedBack(RsbEvent)
        if (RsbEvent != RSB_EV_BUTTON_CLICKED) // Вобще то должен быть знак "==", но так оно почему-то не работает
            close(1);
            var u = UserData();
            u.dataBack();           
        end;
        return true;
    end ;
    
end;

// ----- entry point  ---------------------------------------------------------------------------------------
if ({inn_Bank} == "7729086087") //Нельзя запускать на ПРББ (согласно ТЗ)
   [ ];
   [          Невозможно запустить данную процедуру в "Пробизнесбанке"] ;
    exit(0);
end;
var panel:TRsbPanel = MainPanel;
panel.run;

    
   