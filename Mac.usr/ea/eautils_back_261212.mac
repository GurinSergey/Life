//-----------------------------------------------------------------------------------------
// Выгрузка в электронный архив
// Библиотека общих констант и функций
// В.Горленко
// @changes 2012-02-09 zip_z. Добавлено определение пути к библиотеке ресурсов
// @changes 2012-05-25 Gurin S. N. I-00198390-1 
// @changes 2012-07-23 Жаворонкова Н. (joy) I-00224657-2
//          2012-12-26 Жаворонкова Н. (joy) I-00291358-3 Исправление отбора косячного мультика
//-----------------------------------------------------------------------------------------
import oralib, likepy, globals, rslx, rcw, rsexts, activex;

Var Versions = MakeArray ("Rs-Bank 20.29 (STANDART)", 
                          "Rs-Bank 20.29 (QUICK MULTYDOC)",
                          "Rs-Bank 20.30" );

Const   V_SPECVAL = 26, 
        M_UPLOAD = 1,
        M_UPLOADREG = 2,
        M_LOAD = 3,
        IdList = 5002,
        CodeForMO = "0401108",
        CodeForBO = "0401067",
        FirstState = 2, // статус присваемый по умолчанию при выгрузке
        kbF2 = 316, 
        kbF3 = 317, 
        kbF4 = 318,
        kbF5 = 319, 
        kbF6 = 320, 
        kbF7 = 321,
        kbF8 = 322, 
        kbF9 = 323, 
        kbCtrlF2 = 351, 
        kbCtrlF6 = 355, 
        kbIns = 338, 
        kbDel = 339,
        kbESC = 27,
        kbEnter = 13, 
        kbSpace = 32,
        Templs_Dir_Term1 = "Templs",
        Templs_Dir_Term2 = "Templs\\Templs.usr";

var Templs_Dir_SP = "..\\Templs\\Templs.usr\\";
var NameTxtFile = "earep_txt." + UserNumber;

Private var Query;
//-----------------------------------------------------------------------------------------
macro getResourceLibPath () // zip_z. add
    const LBR_REGISTRY_PATH = "BANK_INI/ОБЩИЕ ПАРАМЕТРЫ/ДИРЕКТОРИИ/LBRDIR";
    const LBR_NAME_FILE     = "ea.lbr";
    var libraryFilePath, libraryDirPath, errCode;
    
    if ( getRegistryValue ( LBR_REGISTRY_PATH, V_STRING, libraryDirPath, errCode ) and not errCode )
        libraryFilePath = findPath ( LBR_NAME_FILE, libraryDirPath );   
    else
        libraryFilePath = LBR_NAME_FILE;
    end;
    
   return libraryFilePath;
end;

//-----------------------------------------------------------------------------------------

Macro Capture ( str )
    Query = Query + str;
End;
//-----------------------------------------------------------------------------------------

Macro StartCapture
    Query = "";
    SetOutHandler ("Capture");
End;

Macro yyyymmdd  (dt)
var dd, mm, yyyy;
DateSplit (dt, dd, mm, yyyy);
return String (yyyy:4:o, "-", mm:2:o, "-", dd:2:o);
end;
//-----------------------------------------------------------------------------------------

Macro EndCapture
    SetOutHandler (NULL);
    return Query;
End;

//-----------------------------------------------------------------------------------------
/*Rogl add. В рамакх устранения замечания о пересылке шаблонов Excel c СП на Терминал*/
MACRO NewExcelWorkbook2 (Visible, ExcelFileName)

   if (ExcelApplication == null)
      if (isStandAlone())
         ExcelApplication = ActiveX("Excel.Application", null, true);
      else
         if (startAX == null)
            startAX = CreateObject("rsax", "TRsAxServer", "LoansAxServer", isStandalone());
         end;
         ExcelApplication = startAX.CreateComObject("Excel.Application");
      end;
   end;

   ExcelApplication.Workbooks.Add (ExcelFileName);

   if (ValType (Visible) == V_BOOL)
      ExcelApplication.Visible = Visible;
   end;

   ActiveSheet = ExcelApplication.ActiveSheet;
   return true;

   onError (err)
      ExcelError(err, false);
      Exit(1);
END;

//-----------------------------------------------------------------------------------------
/*Rogl add. Вычисляем папку для временных файлов на терминале*/
macro GetWorkDirName() : string
   var DirName:string = "", /* Строка с именем пути                         */
       StrErr :string = ""; /* Строка с ошибкой определения временной папки */

   GetRegistryValue( "BANK_INI\\ОБЩИЕ ПАРАМЕТРЫ\\ДИРЕКТОРИИ\\TEXTDIR", V_STRING, DirName, StrErr );

   if( DirName ) /* Если в настройке указан каталог для временных файлов, работаем в этом направлении */

       //msgbox(string("В реестре найден каталог текстовых файлов: ", DirName));

       /* Если первый символ в DirName - это точка, то значит путь относительный, */
       /* тогда приклеем к нему CurDir терминала, иначе путь абсолютный */

       if( SubStr(DirName, 1, 1) == "." )
           DirName = "$" + GetCurDir(TRUE) + replace (DirName, "..","");
       end;

       //msgbox(string("А это его модификация для терминала: ", DirName));

       if (existFile(DirName))
          //msgbox(string("Он существует на терминале, поэтому его и возвращаем: ", DirName));
          return DirName;
       end;
   end;

   //msgbox(string("С настройкой из реестра ничего не вышло, поэтому ищем TMP-каталог в переменных окружения"));

   DirName = "$" + GetEnv("TEMP");
   if( NOT DirName )
       DirName = "$" + GetEnv("TMP");
   end;

   //msgbox(string("В переменных окружения нашли это: ", DirName));

   if (existFile(DirName))
      //msgbox(string("Он существует на терминале, поэтому его и возвращаем: ", DirName));
      return DirName;
   end;

   msgbox("Ошибка поиска папки для временных файлов на терминале");

   return "";
end;

//-----------------------------------------------------------------------------------------
/*Rogl add. В рамакх устранения замечания о пересылке шаблонов Excel c СП на Терминал*/
Macro Check_templ (Name_file_templ)
   var Templs_Dir_Term = GetWorkDirName;
/*   var TermFileName = toAnsi(MergeFile( "$"+Templs_Dir_Term2+"\\", Name_file_templ ));*/
   var TermFileName = toAnsi(Name_file_templ);
   var SPFileName;

   if (Templs_Dir_Term=="")
      return "";
   end;

   GetRegistryValue("BANK_INI\\ОБЩИЕ ПАРАМЕТРЫ\\ДИРЕКТОРИИ\\USERTEMPLSDIR",2,SPFileName);

   SPFileName = findpath (Name_file_templ,SPFileName+";"+Templs_Dir_SP);

   if (not existFile(SPFileName))
      Msgbox(string("Шаблон отсутствует в папке СП: |",SPFileName));
      return "";
   end;

/* MakeDir ("$"+Templs_Dir_Term1);
   MakeDir ("$"+Templs_Dir_Term2);*/

   //msgbox(string("Сейчаc будет копирование: ", SPFileName,"|",Templs_Dir_Term+"\\"+TermFileName));

   if( not CopyFile(SPFileName, Templs_Dir_Term+"\\"+TermFileName) )
     Msgbox("Ошибка при передаче файла на терминал\n" + Templs_Dir_Term+"\\"+TermFileName);
   end;

   return replace(Templs_Dir_Term+"\\"+TermFileName,"$","");
End;

//-----------------------------------------------------------------------------------------

//-----------------------------------------------------------------------------------------
/*Rogl add. В рамакх устранения замечания о пересылке шаблонов Excel c СП на Терминал*/
Macro Copy_text (Name_file)
   var Templs_Dir_Term = GetWorkDirName;

   var TermFileName = toAnsi(Name_file);
   var SPFileName;

   if (Templs_Dir_Term=="")
      return "";
   end;
   SPFileName = "..\\txtfile\\" + NameTxtFile;

   if (not existFile(SPFileName))
      Msgbox(string("Транспортный временный файл не найден: |",SPFileName));
      return "";
   end;

   if( not CopyFile(SPFileName, Templs_Dir_Term+"\\"+TermFileName) )
     Msgbox("Ошибка при передаче файла на терминал\n" + Templs_Dir_Term+"\\"+TermFileName);
   end;

   return replace(Templs_Dir_Term+"\\"+TermFileName,"$","");
End;

//-----------------------------------------------------------------------------------------

Macro SaveSeans ( NumSeans:@Integer, xml, Type, Path, IdSeansRef, pRdt )
    if ( GenerateReference (IdSeansRef, NumSeans) )
        return 0;
    end;

    if ( Type == "Р" )
        xml.OpenXml (NumSeans, "SRV", pRdt); //SRV
    else
        xml.OpenXml (NumSeans, null, pRdt);
    end;

    Var sql = ExecSql ("insert into user_easeans values ((select nvl (max(t_id), 0)+1 from user_easeans), :id, :type, :bdate, trunc (sysdate), to_date ('01010001'||to_char (sysdate, 'hh24miss'), 'ddmmyyyyhh24miss'), :fname) returning t_id into :res",
                       MakeArray (SqlParam ("id", NumSeans), SqlParam ("type", Type), SqlParam ("bdate", pRdt), SqlParam ("fname", MergeFile (Path, xml.xmlName)), SqlParam ("res", V_INTEGER, RSDBP_RETVAL)), true);

    if ( sql != NULL )
        return int (sql.value ("res"));
    end;
    return 0;
End;
//-----------------------------------------------------------------------------------------

Macro DateTimeStr ( Dt, Tm )
    Var y, m, d;
    DateSplit (Dt, d, m, y);
    return String (y:4:o, "-", m:2:o, "-", d:2:o, "T", StrSubst (String (Tm), " ", "0"));
End;
//-----------------------------------------------------------------------------------------

Macro iif ( cond, v1, v2 )
    if ( cond ) return v1; end;
    return v2;
End;
//-----------------------------------------------------------------------------------------

//-----------------------------------------------------------------------------------------

macro GetMainSQL ( IsReport )

    Var SubQuery1 = "", // код ДЭВ
        SubQuery2 = ""; // вид хранения
    Var SubQuery3 = "", // код ДЭВ для 2го документа основания
        SubQuery4 = ""; // вид хранения 2го документа основания
    var SubQuery5, SubQuery6, SubQuery7; 

    // Формируем на основе настроек условия для выбора кода ДЭВ и выбора способа харенения
/*
    Var sql   = "select user_eadev.*, rtrim ((select (sys_xmlagg(xmlelement(col, t_dockind||',')).extract('/ROWSET/COL/text()')).getstringval() from USER_EAPAYMKIND where t_devkind = t_id), ',') DocKinds from user_eadev where t_kind = 0 order by t_id";
    Var query = "select * from user_eapaymkind where t_devkind=:id and t_origin != chr (1) order by t_dockind", rs, y;

    sql = ExecSqlSelect (sql);
    while ( sql.MoveNext () )
        if ( (ValType (sql.value ("dockinds")) != V_SPECVAL) and (sql.value ("dockinds")) ) // к виду ДЭВ привязаны виды первичных док-ов
            if ( SubQuery1 == "" )
                SubQuery1 = SubQuery2 = SubQuery3 = SubQuery4 = "case when";
                SubQuery2 = SubQuery2 + "     paymentKind = 'П' then 0 \n when";
                SubQuery4 = SubQuery4 + "     paymentKind2 = 'П' then 0 \n when";

                SubQuery1 = SubQuery1 + "     t_shifroper = '03' and  t_dockind in (70) then '0402009' \n when "; //заплатка для кассовых мемордеров
                SubQuery1 = SubQuery1 + "     t_shifroper = '04' and  t_dockind in (70) then '0402008' \n when "; //не вписывается в технологию 
                SubQuery3 = SubQuery3 + "     t_shifroper = '03' and  t_dockind in (70) then '0402009' \n when "; //настроечных таблиц
                SubQuery3 = SubQuery3 + "     t_shifroper = '04' and  t_dockind in (70) then '0402008' \n when "; 

                SubQuery2 = SubQuery2 + "     t_shifroper in ('03','04') and  t_dockind in (70) then 0 \n when "; //заплатка для кассовых мемордеров
                SubQuery4 = SubQuery4 + "     t_shifroper in ('03','04') and  t_dockind in (70) then 0 \n when "; //не вписывается в технологию настроечных таблиц
            else
                SubQuery1 = SubQuery1 + "     when";
                SubQuery2 = SubQuery2 + "     when";
                SubQuery3 = SubQuery3 + "     when";
                SubQuery4 = SubQuery4 + "     when";
            end;
            if ( sql.value ("t_always") == "" )
                SubQuery1 = SubQuery1 + " IsMainCarry = 0 and ";
                SubQuery2 = SubQuery2 + " IsMainCarry = 0 and ";
                SubQuery3 = SubQuery3 + " IsMainCarry = 0 and ";
                SubQuery4 = SubQuery4 + " IsMainCarry = 0 and ";
            end;
            if ( (ValType (sql.value ("t_shifr")) != V_SPECVAL) and (sql.value ("t_shifr")) ) // задан отбор по шифру операции
                SubQuery1 = SubQuery1 + " t_shifroper ";
                SubQuery2 = SubQuery2 + " t_shifroper ";
                SubQuery3 = SubQuery3 + " t_shifroper2 ";
                SubQuery4 = SubQuery4 + " t_shifroper2 ";
                if ( Index (sql.value ("t_shifr"), ",") ) // несколько шифров
                    SubQuery1 = SubQuery1 + "in ('"+StrSubst (sql.value ("t_shifr"), ",", "','")+"') and ";
                    SubQuery2 = SubQuery2 + "in ('"+StrSubst (sql.value ("t_shifr"), ",", "','")+"') and ";
                    SubQuery3 = SubQuery3 + "in ('"+StrSubst (sql.value ("t_shifr"), ",", "','")+"') and ";
                    SubQuery4 = SubQuery4 + "in ('"+StrSubst (sql.value ("t_shifr"), ",", "','")+"') and ";
                else
                    SubQuery1 = SubQuery1 + "= '"+sql.value ("t_shifr")+"' and ";
                    SubQuery2 = SubQuery2 + "= '"+sql.value ("t_shifr")+"' and ";
                    SubQuery3 = SubQuery3 + "= '"+sql.value ("t_shifr")+"' and ";
                    SubQuery4 = SubQuery4 + "= '"+sql.value ("t_shifr")+"' and ";
                end;
            end;
            SubQuery1 = SubQuery1 + " t_dockind in ("+sql.value ("dockinds")+") then '"+sql.value ("t_code")+"'\n";
            SubQuery2 = SubQuery2 + " t_dockind in ("+sql.value ("dockinds")+") then ";
            SubQuery3 = SubQuery3 + " t_dockind2 in ("+sql.value ("dockinds")+") then '"+sql.value ("t_code")+"'\n";
            SubQuery4 = SubQuery4 + " t_dockind2 in ("+sql.value ("dockinds")+") then ";
            rs = ExecSqlSelect (query, MakeArray (SqlParam ("id", sql.value ("t_id"))), false);
            y = rs.MoveNext ();
            if ( y ) // заданы исключения по происхождению
                SubQuery2 = SubQuery2 + "case when ";
                SubQuery4 = SubQuery4 + "case when ";
                while ( y )
                    SubQuery2 = SubQuery2 + "(t_dockind=" + rs.value ("t_dockind") + " and Origin in ("+rs.value ("t_origin")+")) ";
                    SubQuery4 = SubQuery4 + "(t_dockind2=" + rs.value ("t_dockind") + " and Origin2 in ("+rs.value ("t_origin")+")) ";
                    y = rs.MoveNext ();
                    if ( y ) SubQuery2 = SubQuery2 + "or "; end;
                    if ( y ) SubQuery4 = SubQuery4 + "or "; end;
                end;
                SubQuery2 = SubQuery2 + "then "+abs (int (sql.value ("t_storekind"))-1)+" else " + int (sql.value ("t_storekind")) + " end";
                SubQuery4 = SubQuery4 + "then "+abs (int (sql.value ("t_storekind"))-1)+" else " + int (sql.value ("t_storekind")) + " end";
            else
                SubQuery2 = SubQuery2 + int (sql.value ("t_storekind"));
                SubQuery4 = SubQuery4 + int (sql.value ("t_storekind"));
            end;
            SubQuery2 = SubQuery2 + "\n";
            SubQuery4 = SubQuery4 + "\n";
        end;
    end;
    if ( SubQuery1 )
        SubQuery1 = SubQuery1 + "end";
        SubQuery2 = SubQuery2 + "end";
    end;
    if ( SubQuery3 )
        SubQuery3 = SubQuery3 + "end";
        SubQuery4 = SubQuery4 + "end";
    end;
    if ( SubQuery1 == "" ) SubQuery1 = SubQuery2 = SubQuery3 = SubQuery4 = "''";  end;
*/
    if ( IsReport == "X" ) 
       SubQuery5 = SubQuery6 = SubQuery7 = " ";  
    else
       SubQuery5 = "                                   and not exists (select 1 from user_ealog where t_abs_id = 'PAYMENT_' || t_paymentid and t_state != 4 and t_bankdate = date_carry ) -- ";
       SubQuery6 = "                                   and not exists (select 1 from user_ealog where t_abs_id = 'PAYMENT_' || t_paymentid2 and t_state != 4 and t_bankdate = date_carry ) --t_state != 4 and ";
       SubQuery7 = "      where not exists (select 1 from user_ealog where t_state != 4 and t_bankdate = date_carry and t_abs_id = devid) ";
    end;

    StartCapture ();
debugbreak;
//Gurin S. N. добавил oper_control в MakeXMLByCarryRub(Cur)
    [select t_dockind,
            case
               when t_code_currency = 0 and IsMulty = 0 then
                  user_ea.MakeXMLByCarryRub (t_Autokey, t_iapplicationkind, t_applicationkey, DEVID, BaseDoc, t_dockind, StoreKindMO, oper_control, podpis1, podpis2, t_shifroper, t_department, Is_Extern)
               when t_code_currency != 0 and IsMulty = 0 then
                  user_ea.MakeXMLByCarryCur (t_Autokey, t_iapplicationkind, t_applicationkey, DEVID, BaseDoc, t_dockind, StoreKindMO, oper_control, podpis1, podpis2, t_shifroper, t_department, Is_Extern)
               when IsMulty = 1 then
                  user_ea.MakeXMLByMultyCar (t_connappkind, t_connappkey, DEVID, BaseDoc, t_dockind, StoreKindMO, podpis1, podpis2, t_shifroper, t_department, Is_Extern)
               when IsMulty = 2 then
                  user_ea.MakeXMLByBadMulty (DEVID, BaseDoc, t_paymentid, t_dockind, StoreKindMO, podpis1, podpis2, t_shifroper, t_department, Is_Extern)
            end MOxml,
            devCode,
            decode (devCode, null, null, devCode2) devCode2,
            StoreKind, StoreKindMO,
            StoreKind2,
            decode (BaseDoc, 0, null, 'PAYMENT_'||BaseDoc) BaseDoc, 
            Origin,
            Origin2,
            t_code_currency,
            IsMulty,
            DevId,
            decode (ExtUploadDoc,  null,null, 'PAYMENT_'||t_paymentid) ExtDevId,
            decode (ExtUploadDoc2, null,null, 'PAYMENT_'||t_paymentid2) ExtDevId2,
            lpad (to_char(to_number(trim(pm_scrhlp.GetDepartmentName (t_department)))),2,'0') dprt,
            pm_scrhlp.GetNodeName (t_branch) branch,                                      
            ExtUploadDoc,
            ExtUploadDoc2,
            decode (ExtUploadDoc,  null, null, user_ea.MakeXMLByPayment (ExtUploadDoc, BaseDoc, date_carry, t_dockind, StoreKind, devCode, Origin, t_iapplicationkind, t_applicationkey, oper_control, podpis1, podpis2, t_shifroper1, t_department, Is_Extern)) PMxml,
            decode (ExtUploadDoc2, null, null, user_ea.MakeXMLByPayment (ExtUploadDoc2,BaseDoc, date_carry, t_dockind2,StoreKind2,devCode2,Origin2,0, '0',oper_control2, podpis1, podpis2, t_shifroper1, t_department, Is_Extern)) PMxml2,
            decode (ExtUploadDoc, null,null, oper_control) oper_control,
            decode (ExtUploadDoc2, null,null, oper_control2) oper_control2,
            t_chapter,
            vidopr,
            otdel,
            podotdel,
            Carry_Account_payer, Carry_Account_receiver,
            Is_extern
       from (
          select 
            case when t_docKind not in (15,70) and t_chapter <> 1 then 1 else to_number(NVL(StoreKind,1)) end StoreKindMO,  
            ss.*,
            (select decode (ff.t_PersonID, null, null, (select t_name from dparty_dbt where t_PartyID = ff.t_PersonID))
             from dofficer_dbt ff 
             where ff.t_partyID = dp.t_partyID and ff.t_isfirstperson = 'X' and rownum = 1) podpis1,
            (select decode (ff.t_PersonID, null, null, (select t_name from dparty_dbt where t_PartyID = ff.t_PersonID))
             from dofficer_dbt ff 
             where ff.t_partyID = dp.t_partyID and ff.t_issecondperson = 'X' and rownum = 1) podpis2
          from (  
            select
                    decode (t_PaymentId,
                            null,
                            null,
                            (SELECT devcode
                             FROM TABLE(user_ea.Get_dev_prop (
                                          t_dockind,              --   p_dockind      - вид документа (70 - мемордер, 201 - рублевый платеж РКО и т.п.)
                                          Origin,                 --   p_origin       - происхождение
                                          paymentKind,            --   p_paymentKind  - вид отправки (интересен только 'П' почта)
                                          t_shifroper,            --   p_shifroper    - вид операции (шифр)
                                          Carry_Number_pack,      --   p_Pack         - номер пачки
                                          t_chapter,              --   p_Chapter    - глава
                                          t_typedocument,
                                          Carry_Account_payer,    --   p_Debet       - счет по дебету
                                          code_currency_payer,    --   p_Fiid_Debet  - Id финансового инструмента по дебету
                                          Carry_Account_receiver, --   p_Credit       - счет по кредиту
                                          code_currency_receiver, --   p_Fiid_Credit - Id финансового инструмента по кредиту
                                          IsMainCarry )))         --   p_IsMainCarry  - номер проводки в составе платежа. Используется только в процедуре выгрузки в ЭА, иначе передавать null
                            ) devCode,
                    decode (ATTRID, null,
                            (SELECT storeKind
                             FROM TABLE(user_ea.Get_dev_prop (
                                          t_dockind,              --   p_dockind      - вид документа (70 - мемордер, 201 - рублевый платеж РКО и т.п.)
                                          Origin,                 --   p_origin       - происхождение
                                          paymentKind,            --   p_paymentKind  - вид отправки (интересен только 'П' почта)
                                          t_shifroper,            --   p_shifroper    - вид операции (шифр)
                                          Carry_Number_pack,      --   p_Pack         - номер пачки
                                          t_chapter,              --   p_Chapter    - глава
                                          t_typedocument,
                                          Carry_Account_payer,    --   p_Debet       - счет по дебету
                                          code_currency_payer,    --   p_Fiid_Debet  - Id финансового инструмента по дебету
                                          Carry_Account_receiver, --   p_Credit       - счет по кредиту
                                          code_currency_receiver, --   p_Fiid_Credit - Id финансового инструмента по кредиту
                                          IsMainCarry )))         --   p_IsMainCarry  - номер проводки в составе платежа. Используется только в процедуре выгрузки в ЭА, иначе передавать null
                            , ATTRID) StoreKind,
                    decode (t_PaymentId2,
                            null,
                            null,
                            (SELECT devcode
                             FROM TABLE(user_ea.Get_dev_prop (
                                          t_dockind2,             --   p_dockind      - вид документа (70 - мемордер, 201 - рублевый платеж РКО и т.п.)
                                          Origin2,                --   p_origin       - происхождение
                                          paymentKind2,           --   p_paymentKind  - вид отправки (интересен только 'П' почта)
                                          t_shifroper2,           --   p_shifroper    - вид операции (шифр)
                                          0,                      --   p_Pack         - номер пачки
                                          1,                      --   p_Chapter    - глава
                                          null,
                                          '',                     --   p_Debet       - счет по дебету
                                          0,                      --   p_Fiid_Debet  - Id финансового инструмента по дебету
                                          '',                     --   p_Credit       - счет по кредиту
                                          0,                      --   p_Fiid_Credit - Id финансового инструмента по кредиту
                                          null )))                --   p_IsMainCarry  - номер проводки в составе платежа. Используется только в процедуре выгрузки в ЭА, иначе передавать null
                            ) devCode2,
                    decode (ATTRID2, null,
                            (SELECT storeKind
                             FROM TABLE(user_ea.Get_dev_prop (
                                          t_dockind2,             --   p_dockind      - вид документа (70 - мемордер, 201 - рублевый платеж РКО и т.п.)
                                          Origin2,                --   p_origin       - происхождение
                                          paymentKind2,           --   p_paymentKind  - вид отправки (интересен только 'П' почта)
                                          t_shifroper2,           --   p_shifroper    - вид операции (шифр)
                                          0,                      --   p_Pack         - номер пачки
                                          1,                      --   p_Chapter    - глава
                                          null,
                                          '',                     --   p_Debet       - счет по дебету
                                          0,                      --   p_Fiid_Debet  - Id финансового инструмента по дебету
                                          '',                     --   p_Credit       - счет по кредиту
                                          0,                      --   p_Fiid_Credit - Id финансового инструмента по кредиту
                                          null )))                --   p_IsMainCarry  - номер проводки в составе платежа. Используется только в процедуре выгрузки в ЭА, иначе передавать null
                              , ATTRID2) StoreKind2,
                    t_connappkind, t_connappkey,
                    decode (t_paymentid2, null, t_paymentid, t_paymentid2) BaseDoc,
                    decode (BaseDoc,  UniquePaymentId,  BaseDoc ) ExtUploadDoc,
                    decode (BaseDoc2, UniquePaymentid2, BaseDoc2) ExtUploadDoc2,
                    Origin,
                    Origin2,
                    t_code_currency,
                    IsMulty,
                    DevId,
                    t_paymentid,
                    t_paymentid2,
                    t_valuedate,
                    date_carry,
                    t_department,
                    t_Autokey,
                    t_branch, t_chapter,
                    t_dockind,
                    t_dockind2,
                    t_iapplicationkind,
                    t_applicationkey,
                    oper_control, 
                    oper_control2 ,
                    case when t_docKind not in (15,70) and t_chapter <> 1 then '09' else t_shifroper end t_shifroper,
                    t_shifroper1,
                    t_shifroper2,
                    vidopr,
                    otdel,
                    podotdel,
                    Carry_Account_payer,   
                    code_currency_payer,   
                    Carry_Account_receiver,
                    code_currency_receiver,
                    Is_extern,
                    t_typedocument
               from (select s.*,
                             user_ea.GetOrigin (t_dockind, t_paymentid) Origin,
                             user_ea.GetOrigin (t_dockind2, t_paymentid2) Origin2,
                             decode (row_number () over(partition by t_paymentid order by t_applicationkey), 1, t_paymentid, NULL) uniquePaymentId,
                             --Это для того, чтобы считывать информацию о платеже только один раз (!) в рамкой данной выборки 
                             decode (row_number () over(partition by decode(t_paymentid2, null, t_paymentid, t_paymentid2) order by t_applicationkey), 1, t_paymentid2, NULL) uniquePaymentId2
                             --Это для того, чтобы считывать информацию о платеже только один раз (!) в рамкой данной выборки 
                        from (select *
                                from (select IsMulty,
                                             t_code_currency,
                                             t_paymentid,
                                             t_paymentid2,
                                             t_valuedate,
                                             date_carry,
                                             t_dockind,
                                             t_dockind2,
                                             IsMainCarry,
                                             case
                                               when IsMulty != 2 and t_paymentid is not null 
                                                    #
                                               then t_paymentid
                                               else 0
                                             end BaseDoc,
                                             case
                                                when IsMulty != 2 and t_paymentid2 is not null 
                                                    #
                                                then t_paymentid2
                                               else 0
                                             end BaseDoc2,
                                             t_oper,
                                             t_shifroper,
                                             t_shifroper1,
                                             t_shifroper2,
                                             t_department,
                                             t_Autokey,
                                             t_branch, t_chapter,
                                             t_iapplicationkind,
                                             t_applicationkey,
                                             t_connappkind,
                                             t_connappkey,
                                             UQADID,
                                             case
                                               when IsMulty = 1 then
                                                  'CARRY_M_'||Mcarryid --lpad(t_connappkind, 5, '0') || t_connappkey
                                               when IsMulty = 2 then -- "косячный" мултик без multycar.dbt
                                                  'PAYMENTm' || t_paymentid
                                               when t_code_currency = 0 then
                                                  'CARRY_R_'||t_Autokey --lpad(t_iapplicationkind, 5, '0') || t_applicationkey
                                               else
                                                  'CARRY_V_'||t_Autokey --lpad(t_iapplicationkind, 5, '0') || t_applicationkey
                                             end DEVID,
                                             paymentKind,
                                             paymentKind2,
                                             ATTRID,
                                             ATTRID2,
                                             oper_control, 
                                             oper_control2,
                                     vidopr,
                                     otdel,
                                     podotdel,
                                             Carry_Number_pack,
                                             case
                                               when IsMulty = 1 then
                                                  (select dm.t_account_from FROM dmultycar_dbt dm where dm.t_iapplicationkind = t_connappkind and dm.t_applicationkey = t_connappkey )  
                                               when IsMulty = 2 then -- "косячный" мултик без multycar.dbt
                                                  Payment_Account_payer
                                               else
                                                  Carry_Account_payer
                                             end Carry_Account_payer,
                                             case
                                               when IsMulty = 1 then
                                                  (select dm.t_account_to FROM dmultycar_dbt dm where dm.t_iapplicationkind = t_connappkind and dm.t_applicationkey = t_connappkey )  
                                               when IsMulty = 2 then -- "косячный" мултик без multycar.dbt
                                                  Payment_Account_receiver
                                               else
                                                  Carry_Account_receiver
                                             end Carry_Account_receiver,
                                             case
                                               when IsMulty = 1 then
                                                  (select dm.t_fiid_from FROM dmultycar_dbt dm where dm.t_iapplicationkind = t_connappkind and dm.t_applicationkey = t_connappkey )  
                                               when IsMulty = 2 then -- "косячный" мултик без multycar.dbt
                                                  Payment_Fiid_payer
                                               else
                                                  t_code_currency
                                             end code_currency_payer,
                                             case
                                               when IsMulty = 1 then
                                                  (select dm.t_fiid_to FROM dmultycar_dbt dm where dm.t_iapplicationkind = t_connappkind and dm.t_applicationkey = t_connappkey )  
                                               when IsMulty = 2 then -- "косячный" мултик без multycar.dbt
                                                  Payment_Fiid_receiver
                                               else
                                                  t_code_currency
                                             end code_currency_receiver,
                                             Is_extern,
                                             t_typedocument
                                        from (select case
                                                       when (select min(t_id_step) from doprdocs_dbt where t_dockind = 1 and t_id_operation = opdoc.t_id_operation) = opdoc.t_id_step 
                                                         and ((pmpaym.t_dockind not in (400, 430, 440) 
                                                             and pmpaym.t_futurereceiveraccount = docs.t_account_receiver) 
                                                           or (pmpaym.t_dockind in (400, 430, 440) 
                                                             and pmpaym.t_futurepayeraccount = docs.t_account_receiver)) 
                                                         and pmpaym.t_amount = docs.t_sum 
                                                       then 1
                                                       else 0
                                                     end IsMainCarry,
                                                     case
                                                       when docs.IsMulty = 1 then 1
                                                       when docs.IsMulty = 0 and docs.t_code_currency != 0 and pmpaym.t_dockind = 15 then 2
                                                       else 0
                                                     end IsMulty, -- мультивалютная проводка
                                                     docs.t_code_currency, -- валюта проводки
                                                     docs.t_oper, -- операционист
                                                     docs.t_iapplicationkind,
                                                     docs.t_applicationkey,
                                                     docs.t_connappkind,
                                                     docs.t_connappkey,
                                                     docs.t_department,
                                                     docs.t_Autokey,
                                                     docs.t_branch, docs.t_chapter, 
                                                     pmpaym.t_paymentid, -- ИД первичного документа (или документа-основания)
                                                     pmpaym.t_dockind, -- вид первичного документа
                                                     pmpaym.t_valuedate,
                                                     pmpaym.t_payeraccount Payment_Account_payer,
                                                     pmpaym.t_receiveraccount Payment_Account_receiver,
                                                     pmpaym.t_fiid Payment_Fiid_payer,
                                                     pmpaym.t_Payfiid Payment_Fiid_receiver,
                                                     docs.t_date_carry date_carry,
                                                     docs.UQADID, -- Уникальный в рамках мультивалютного док-та платеж
                                                     docs.Mcarryid,
                                                     prop.t_shifroper,
                                                     decode(ctg.t_ATTRID,1,0,2,1) ATTRID,  
                                                     decode(ctg2.t_ATTRID,1,0,2,1) ATTRID2,  
                                                     decode (NVL(prop.t_paymentkind,'Э'), chr (0), 'Э', NVL(prop.t_paymentkind,'Э')) paymentKind,
                                                     decode (prop.t_shifroper,'16',pmpaym2.t_paymentid) t_paymentid2, -- ИД 2 первичного документа (или документа-основания)
                                                     decode (prop.t_shifroper,'16',pmpaym2.t_dockind) t_dockind2, -- вид 2 первичного документа
                                                     prop.t_shifroper t_shifroper1,
                                                     decode (prop.t_shifroper,'16',prop2.t_shifroper) t_shifroper2,
                                                     decode (prop.t_shifroper,'16',decode (NVL(prop2.t_paymentkind,'Э'), chr (0), 'Э', NVL(prop2.t_paymentkind,'Э'))) paymentKind2,
                                                     /*decode (op.T_ID_OPERATION, null, null, 
                                                             (select t_oper from doprstep_dbt control_step 
                                                              where control_step.T_ID_OPERATION = op.T_ID_OPERATION 
                                                                and control_step.t_kind_action = 208  and rownum=1)) oper_control,
                                                     decode (op2.T_ID_OPERATION, null, null, 
                                                             (select t_oper from doprstep_dbt control_step2 
                                                              where control_step2.T_ID_OPERATION = op2.T_ID_OPERATION 
                                                                and control_step2.t_kind_action = 208  and rownum=1)) oper_control2,*/
                                                     /*decode (docs.t_userfield2,'','',docs.t_userfield2) oper_control,
                                                     decode(docs.t_userfield2,'','',docs.t_userfield2) oper_control2,*/
                                                     decode (docs.t_userfield2,'','',docs.t_userfield2) oper_control,
                                                     decode(docs.t_userfield2,'','',docs.t_userfield2) oper_control2,
                                 docs.t_kind_oper vidopr,
                                                     nvl((select otd.t_code1 from dop_otdel_dbt otd 
                                                          where otd.t_oper = docs.t_oper 
                                                            and ((otd.t_dateend = to_date('01010001','ddmmyyyy') and otd.t_datebegin <= docs.t_date_carry) or (docs.t_date_carry between t_datebegin and t_dateend)) 
                                                            and rownum = 1)
                                                         , 1) otdel,
                                                     nvl((select otd.t_code2 from dop_otdel_dbt otd 
                                                          where otd.t_oper = docs.t_oper 
                                                            and ((otd.t_dateend = to_date('01010001','ddmmyyyy') and otd.t_datebegin <= docs.t_date_carry) or (docs.t_date_carry between t_datebegin and t_dateend))
                                                            and rownum = 1)
                                                     , 1) podotdel,
                                                     docs.t_Number_pack Carry_Number_pack,
                                                     docs.t_Account_payer Carry_Account_payer,
                                                     docs.t_Account_receiver Carry_Account_receiver,
                                                     case when pr_d.t_group = 1 or pr_k.t_group = 1 then 1 else 0 end Is_extern,
                                                     docs.t_typedocument
                                                from (select arh.t_autokey MVPid,
                                                             0 isMulty,
                                                             NULL UQADID,
                                                             0 Mcarryid,
                                                             arh.*
                                                        from darhdoc_dbt arh
                                                       where t_chapter in (1, 3, 4)
                                                         and t_date_carry = :dtrub
                                                         and t_result_carry != 14 --кроме покрытия
                                                         and (not exists
                                                              (select 1
                                                                 from dmultycar_dbt
                                                                where t_iapplicationkind =
                                                                      t_connappkind
                                                                  and t_applicationkey =
                                                                      t_connappkey) or
                                                              t_result_carry = 83) -- рублевые проводки за исключением покрытия от МВП
                                                      union
                                                      select (select nvl(max(t_autokey),
                                                                         arh.t_autokey)
                                                                from darhdoc$_dbt
                                                               where t_connappkey =
                                                                     multy.t_applicationkey
                                                                 and t_connappkind =
                                                                     multy.t_iapplicationkind) MVPid,
                                                             decode(multy.t_carryid,
                                                                    null,
                                                                    0,
                                                                    1) IsMult,
                                                         /* 23-07-2012 Жаворонкова (joy) I-00224657-2 добавла pd перед t_applicationkey, а то вылетали с ошибкой из-за неоднозначно определенного столбца */
                                                             decode (row_number () over(partition by pd.t_paymentid order by pd.t_applicationkey), 1, t_paymentid, NULL) UQADID,
                                                             multy.t_carryid Mcarryid,
                                                             arh.*
                                                        from darhdoc$_dbt arh
                                                        left outer join dmultycar_dbt multy on multy.t_iapplicationkind =
                                                                                               t_connappkind
                                                                                           and multy.t_applicationkey =
                                                                                               t_connappkey
                                                        left outer join dpmdocs_dbt pd on pd.t_applicationkind=arh.t_iapplicationkind and pd.t_applicationkey=arh.t_applicationkey
                                                       where arh.t_chapter in (1, 3, 4)
                                                         and arh.t_date_carry =
                                                             :dtcur) docs -- валютные проводки с привязкой к инормации о МВП
                                                left outer join dpmdocs_dbt pmdoc on pmdoc.t_applicationkind =
                                                                                     docs.t_iapplicationkind
                                                                                 and pmdoc.t_applicationkey =
                                                                                     docs.t_applicationkey -- привязка провокди к платежу
                                                left outer join dpmpaym_dbt pmpaym on pmpaym.t_paymentid =
                                                                                      pmdoc.t_paymentid -- платеж
                                                left outer join dpmprop_dbt pr_d on pr_d.t_paymentid =  pmdoc.t_paymentid and pr_d.t_debetcredit = 0
                                                left outer join dpmprop_dbt pr_k on pr_k.t_paymentid = pmdoc.t_paymentid and pr_k.t_debetcredit = 1
                                                left outer join dpmrmprop_dbt prop on prop.t_paymentid =
                                                                                      pmpaym.t_paymentid -- свойства
                                                left outer join doprdocs_dbt opdoc on opdoc.t_dockind = 1
                                                                                  and opdoc.t_documentid =
                                                                                      lpad(docs.t_iapplicationkind,
                                                                                           5,
                                                                                           '0') ||
                                                                                      docs.t_applicationkey -- привязка проводки к операции
                                                left outer join dpmlink_dbt pmlink on t_purposepayment = pmpaym.T_PAYMENTID and t_linkkind = 2 and t_purposepayment <> T_INITIALPAYMENT
                                                left outer join dpmpaym_dbt pmpaym2 on pmpaym2.T_PAYMENTID = PMLINK.T_INITIALPAYMENT  
                                                left outer join dpmrmprop_dbt prop2 on prop2.t_paymentid = pmpaym2.t_paymentid -- свойства
                                                left outer join dobjatcor_dbt ctg on ctg.t_objecttype = 501 
                                                                                  and ctg.t_object = lpad(to_char(pmpaym.t_paymentid),10,'0') 
                                                                                  and ctg.T_GROUPID = 1010 
                                                                                  and ctg.t_General = CHR(88) 
                                                                                  and ctg.t_validtodate = to_date('31129999','ddmmyyyy')   
                                                left outer join dobjatcor_dbt ctg2 on ctg2.t_objecttype = 501 
                                                                                  and ctg2.t_object = lpad(to_char(pmpaym2.t_paymentid),10,'0') 
                                                                                  and ctg2.T_GROUPID = 1010 
                                                                                  and ctg2.t_General = CHR(88) 
                                                                                  and ctg2.t_validtodate = to_date('31129999','ddmmyyyy')   
                                                /*left outer join doproper_dbt op on op.t_dockind = pmpaym.t_dockind and op.t_documentid = lpad(to_char(pmpaym.t_paymentid),34,'0')
                                                left outer join doproper_dbt op2 on op.t_dockind = pmpaym2.t_dockind and op.t_documentid = lpad(to_char(pmpaym2.t_paymentid),34,'0')*/
                                               where docs.MVPid = docs.t_autokey -- исключаем валютные проводки входящие в МВП кроме первой
                                                 --and docs.t_account_payer like '32201%'
                                                 and not (pmpaym.t_dockind is not null and
                                                      pmpaym.t_dockind = 15 and
                                                      pmpaym.t_payeraccount =
                                                      docs.t_account_payer and
                                                      pmpaym.t_receiveraccount =
                                                      docs.t_account_receiver
                                                      /* 2012-12-26 joy I-00291358-3 Проверяем только рубли, а то отсекается лишнее, напр. мультик с одинаковой валютой по Д и К (ага, и такое есть :( )*/
                                                      and t_code_currency = 0) -- исключаем рублевое покрытие от "кривых" МВП
                                              ))) s
                          #
                       )
              where (not (IsMulty = 2 and UQADID is null)) -- отсекаем повторы от "кривых" МВП с корреспонденцией валюта-валюта
             ) ss 
             left outer join ddp_dep_dbt dp on dp.t_code = ss.t_department
             left outer join dparty_dbt pp on pp.t_PartyID = dp.t_partyID 
             )
    ] (SubQuery5, SubQuery6, SubQuery7);

end;


macro GetOperSQL

   StartCapture ();
   [select id_oper||';'||
          trim(decode (pp.t_Name1, NUll, decode(n1,CHR(1),'',n1), decode(pp.t_Name1,CHR(1),'',pp.t_Name1)))||';'||
          trim(decode (pp.t_Name2, NUll, n2, decode(pp.t_Name2,CHR(1),'',pp.t_Name2)))||';'||
          trim(decode (pp.t_Name3, NUll, n3, decode(pp.t_Name3,CHR(1),'',pp.t_Name3)))||';'||
          t_CodeDepart tt
          --fff.t_Name,
          --fff.t_PartyID,
          --pp.t_Name1,
          --pp.t_Name2, 
          --pp.t_Name3 
   from (
   select ff.id_oper,
          n1, n2,
          case 
          when n_ = '*****' then '' 
          else n_
          end n3,
          ff.t_Name,
          ff.t_CodeDepart,
          ff.t_PartyID
   from (
       select f.id_oper,
              n1,
              case 
              when n_ = '*****' then '' 
              when n_ like '_.' then n_ 
              when n_ like '_.%' then Substr(n_,1,2) 
              when n_ like '% %' then Substr(n_,1,instr(n_,' ')-1) 
              else n_
              end n2,
              case 
              when n_ = '*****' then '*****' 
              when n_ like '_.' then '*****'  
              when n_ like '_.%' then trim(Substr(n_,3)) 
              when n_ like '% %' then Substr(n_,instr(n_,' ')+1) 
              else '*****'
              end n_,
              f.t_Name,
              f.t_CodeDepart,
              f.t_PartyID
       from (
           select
              lpad(:CodeDep, 2 ,'0')||'_'||p.t_oper id_oper,
              case 
              when lower(p.t_Name) like '%робот%' then p.t_Name  
              when lower(p.t_Name) like '%style%' then p.t_Name  
              when lower(p.t_Name) like '%тест%' then p.t_Name  
              when p.t_Name like '% _.%' then Substr(p.t_Name,1,instr(p.t_Name,' ')-1) 
              when p.t_Name like '% %' then Substr(p.t_Name,1,instr(p.t_Name,' ')-1) 
              else p.t_Name
              end n1,
              case 
              when lower(p.t_Name) like '%робот%' then '*****'   
              when lower(p.t_Name) like '%style%' then '*****'   
              when lower(p.t_Name) like '%тест%' then '*****'
              when p.t_Name like '% _.%' then Substr(p.t_Name,instr(p.t_Name,' ')+1) 
              when p.t_Name like '% %' then Substr(p.t_Name,instr(p.t_Name,' ')+1) 
              else '*****'
              end n_,
              p.t_Name,
              p.t_CodeDepart,
              p.t_PartyID
           from dperson_dbt p ) f ) ff ) fff  
   left outer join ddp_dep_dbt d on d.t_code = fff.t_CodeDepart
   left outer join dpersn_dbt pp on pp.t_PersonID = fff.t_PartyID
   --where pp.t_Name1 is null 
   order by fff.id_oper 
    ];

end;

macro GetDepartSQL

   StartCapture ();
   [select :CodeDep, t_code||';'||t_name||';'||(select t_name from dparty_dbt where t_partyid = t.t_partyid)||';'||t_parentcode||';'||(select t_name from ddp_dep_dbt where t_code = t.t_parentcode) tt 
    from ddp_dep_dbt t order by t_code
    ];

end;
