//-----------------------------------------------------------------------------------------
// Электронный архив, выгрузка
// В. Горленко
//-----------------------------------------------------------------------------------------
// Changes:

// Жаворонкова Н. (joy) I-00274012-1 24-10-2012 Исправление передаваемого параметра + обработка выгрузки в реестр отчетов
// Жаворонкова Н. (joy) Адаптация под сборку 2031
import oralib, likepy, lib_str, ea_xml, globals, eautils, rsexts;

Private var Protokol; // объект класса CProtokol
var Protokol_Put, cnt_all;

// список аттрибутов для ДЭВ вида "документ"                           
Private var FieldList = MakeArray ("docStartDate", 
                                   "docCreateDate",
                                   "accountNumber",
                                   "docId",
                                   "docNumber",
                                   "employee",
                                   "accountKrNumber",
                                   "creditSum",
                                   "debitSum",
                                   "sum",
                                   "sumInWords",
                                   "payer",
                                   "payerBankBIK",
                                   "payerBank",
                                   "payerBankAccNumber",
                                   "recipientBankBIK",
                                   "recipientBankAccNumber",
                                   "recipient",
                                   "paymentOrder",
                                   "payerINN",
                                   "recipientINN",
                                   "payerKPP",
                                   "recipientKPP",
                                   "kbk",
                                   "okato",
                                   "paymentBase",
                                   "taxPeriod",
                                   "paymentBaseDocNumber",
                                   "paymentBaseDocDate",
                                   "paymentType",
                                   "paymentTerm",
                                   "acceptTime",
                                   "acceptTimeEnd",
                                   "symbol1",
                                   "symbol1Sum",
                                   "symbol2",
                                   "symbol2Sum",
                                   "symbol3",
                                   "symbol3Sum",
                                   "symbol4",
                                   "symbol4Sum",
                                   "symbol5",
                                   "symbol5Sum",
                                   "symbol6",
                                   "symbol6Sum",
                                   "personIdentDocOrg",
                                   "docCode",
                                   "freeField1",
                                   "freeField2",
                                   "freeField3",
                                   "freeField4",
                                   "compilerBank",
                                   "compilerBankBIC",
                                   "direction",
                                   "debitSumChar",
                                   "creditSumChar",
                                   "sumChar",
                                   "sumCurInWords",
                                   "docStartDateInWords",
                                   "sumCur2InWords",
                                   "storeKind",
                                   "operationId",
                                   "partId",
                                   "operationTypeRef",
                                   "currency",
                                   "pack",
                                   "corschem",
                                   "numoperation",
                                   "typedoc",
                                   "usertypedoc",
                                   "ground",
                                   "docKindRSB",
                                   "fioclient", 
                                   "fio",
                                   "control",
                                   "podpis1",
                                   "podpis2",
                                   "acceptterm",
                                   "creatorstatus",
                                   "origin",
                                   "codevo",
                                   "codecomiss",
                                   "isCorrect",
                                   "paymentKind",
                                   "recipientBank",
                                   "operationType",
                                   "paymentPurposeCode",
                                   "paymentPurpose",
                                   "payerStatus",
                                   "remittanceDate",
                                   "paymentReceiptDate",
                                   "placementInCardsDate",
                                   "partPaymentNumber",
                                   "paymentOrderNumber",
                                   "paymentOrderDate",
                                   "partPaymentSum",
                                   "remainsPaymentSum","remainsPaymentSumChar",
                                   "chargeOffDate",
                                   "paymentTime",
                                   "accredTime",
                                   "operationContent",
                                   "accountDebNumberName",
                                   "accountKrNumberName",
                                   "countrypayer",
                                   "countryreceiver");

//-----------------------------------------------------------------------------------------

// заполняем временную таблицу с названиями валют из Locale.ini для формирования сумм прописью
Private macro FillCurrenciName
    Var f = TStreamDoc (".\\locale.ini", "R");
    Var kind, str, query = "select t_fiid from dfininstr_dbt where t_fi_kind = 1 and t_iso_number = :iso", sql;
    Var n1, n2, n3, i;

    if ( ExecSql ("truncate table user_eacurr", NULL, false) == NULL )
        return false;
    end;

    while ( f.ReadLine (@str) )
        str = Trim (str);
        if ( (SubStr (str, 1, 3) == "CUR") and ((SubStr (str, 7, 1) == "A") or (SubStr (str, 7, 1) == "B")) )
            sql = ExecSqlSelect (query, MakeArray (SqlParam ("iso", int (SubStr (str, 4, 3)))), false);
            if ( sql.MoveNext () )
                kind = SubStr (str, 7, 1);
                str = Trim (Substr (str, 8));
                i = index (str, ",");
                if ( i )
                    n1 = SubStr (str, 1, i-1);
                    str = SubStr (str, i+1);
                end;
                i = index (str, ",");
                if ( i )
                    n2 = SubStr (str, 1, i-1);
                    str = SubStr (str, i+1);
                end;
                i = index (str, ",");
                if ( i )
                    n3 = SubStr (str, 1, i-1);
                    str = SubStr (str, i+1);
                end;

                if ( kind == "A" ) // еденицы нац. валюты
                    if ( ExecSql ("MERGE INTO user_eacurr USING (select :n1 n1, :n2 n2, :n3 n3, :fiid fiid from dual) ON (t_fiid=fiid) "+
                                  "WHEN NOT MATCHED THEN INSERT VALUES (fiid, n1, n2, n3, '???', '???', '???') "+
                                  "WHEN MATCHED THEN UPDATE SET r0=n1, r1=n2, r2=n3",
                                  MakeArray (SqlParam ("n1", n1), SqlParam ("n2", n2), SqlParam ("n3", n3), SqlParam ("fiid", sql.value (0))), false) == NULL )
                        return false;
                    end;
                elif ( kind == "B" ) // копейки
                    if ( ExecSql ("MERGE INTO user_eacurr USING (select :n1 n1, :n2 n2, :n3 n3, :fiid fiid from dual) ON (t_fiid=fiid) "+
                                  "WHEN NOT MATCHED THEN INSERT VALUES (fiid, '???', '???', '???', n1, n2, n3) "+
                                  "WHEN MATCHED THEN UPDATE SET k0=n1, k1=n2, k2=n3",
                                  MakeArray (SqlParam ("n1", n1), SqlParam ("n2", n2), SqlParam ("n3", n3), SqlParam ("fiid", sql.value (0))), false) == NULL )
                        return false;
                    end;

                end;
            end;
        end;
    end;
    return ExecSql ("insert into user_eacurr  values (-1, '???', '???', '???', '???', '???', '???')", NULL, false) != NULL;
  OnError (err)
    Exit (0, err.Message);
End;
//-----------------------------------------------------------------------------------------

// переносит аттрибуты в отдельные узлы XML
Private macro SetAttributesMO ( xml, buf )
    Var xml0 = ActiveX ("Microsoft.XMLDOM");
    Var y = 0, val;
    if ( xml0.LoadXml (buf) )
        while ( y < FieldList.Size )
            val = xml0.childNodes.item (0).getAttribute (FieldList [y]);
            //if ( ValType (val) == V_DATE ) msgbox (val); end;
            if (ValType (val) != V_SPECVAL ) 
                if (FieldList [y] == "employee")
                  xml.InsertAttr (FieldList [y], Setup.AbsCode+"_"+val);
                else
                  xml.InsertAttr (FieldList [y], val);
                end;
            elif ( (FieldList [y] == "payerBankBIK")
                    or (FieldList [y] == "recipientBankBIK") 
                    or (FieldList [y] == "operationId") 
                  )
                xml.InsertAttr (FieldList [y], "");
            end;
            y = y + 1;
        end;
    end;
End;

Private macro SetAttributes ( xml, buf )
    Var xml0 = ActiveX ("Microsoft.XMLDOM");
    Var y = 0, val;
    if ( xml0.LoadXml (buf) )
        while ( y < FieldList.Size )
            val = xml0.childNodes.item (0).getAttribute (FieldList [y]);
            //if ( ValType (val) == V_DATE ) msgbox (val); end;
            // Rogl modify 14.06.2012
            if (ValType (val) != V_SPECVAL ) 
                if (FieldList [y] == "employee")
                  xml.InsertAttr (FieldList [y], Setup.AbsCode+"_"+val);
                else
                  xml.InsertAttr (FieldList [y], val);
                end;
            else
                xml.InsertAttr (FieldList [y], "");
            end;
            y = y + 1;
        end;
    end;
End;

//-----------------------------------------------------------------------------------------

// добавление выгруженной записи в журнал
Private macro SaveToLog ( DevId, DevKind, Type, Code, IdSeanse, crDate, crTime, BaseDoc )
// 27.05.2014 joy добавлено and t_bankdate = bdate, иначе находились ДЭВ по старым документам, выгруженным до конвертации. 
    return ExecSql ("merge into user_ealog using (select :absid absid, :state state, :bdat bdate, :oper oper, :devkind devkind, :typ typ, :code code, :sid sid, :cdt cdt, :ctm ctm, :basedoc basedoc from dual) on (t_abs_id=absid and t_bankdate = bdate) "+
                    "WHEN NOT MATCHED THEN INSERT values (absid, state, bdate, trunc (cdt), to_date ('01010001'||to_char (ctm, 'hh24miss'), 'ddmmyyyyhh24miss'), oper, devkind, typ, code, sid, 0, chr (1), basedoc) "+
                    "WHEN MATCHED THEN UPDATE SET t_state = state, t_seanse = sid, t_sysdate=cdt, t_systime = ctm, t_regseanse=0",
                    MakeArray (SqlParam ("absid", DevId),
                               SqlParam ("state", FirstState),
                               SqlParam ("bdate", Parm.("Date")),
                               SqlParam ("oper", {oper}),
                               SqlParam ("devkind", DevKind),
                               SqlParam ("typ", Type),
                               SqlParam ("code", Code),
                               SqlParam ("sid", IdSeanse),
                               SqlParam ("cdt", crDate),
                               SqlParam ("ctm", crTime),
                               SqlParam ("basedoc", BaseDoc))) != NULL;
End;

// процедура выгрузки для версии Rs-Bank 20.29 (QUICK MULTYDOC)
Private macro UploadV1
    Var xml, sql, DevCode = "", cdt, ctm, codeForm;
    Var v_Devcode;
//Setoutput ("..\1_ea.txt");

    Protokol.JRN_status1;

    GetMainSQL ("");
//debugbreak;
/*sql = EndCapture ();
println (sql);
setoutput (null);
viewfile("..\1_ea.txt");
exit(0);*/

    // если выгрузка по определенному коду ДЭВ
    if ( Parm.KindDoc != 0 )
        sql = "select t_code from user_eadev where t_kind = 0 and t_id = :id";
        sql = ExecSqlSelect (sql, MakeArray (SqlParam ("id", Parm.KindDoc)), false);
        if ( sql.MoveNext () )
            DevCode = sql.value (0);
            if ( DevCode != CodeForMO )
                println ("Where devcode = '", DevCode, "'"); // добавляем фильтр по виду ДЭВ
            end;
        end;
    end;

    BegAction (0, "Идет отбор документов, ждите...", false);
    sql = ExecSqlSelect (EndCapture (), MakeArray (SqlParam ("dtrub", Parm.("Date")), SqlParam ("dtend", Parm.("Date"))), false);

    Var y = sql.MoveNext (), cnt = 0, cntAtFile = 0, PackCnt = 0, IdSeans, NumSeans;
    EndAction ();
    InitProgress (-1, null, "Выгрузка документов");

    xml = TXml ();

    while ( y )
	// выгрузка мемордера из архдока
        if ( ( (DevCode == "") or (DevCode == CodeForMO) ) // фильтр по виду докумнета
             and not (InList (sql.value ("t_dockind"), 410, 420, 430, 440)) ) //Обломаем выгрузку МО для кассовых (только д-основание)

            if ( (Setup.MaxCountDEV != 0) and (cntAtFile == Setup.MaxCountDEV) ) // новый файл
                Protokol.PutSeans (NumSeans, "Док-т", MergeFile (Setup.OutPath, xml.xmlName), cntAtFile);
                cntAtFile = 0;
                xml.CloseXml ();
                IdSeans = NULL;
                xml = TXml ();
               
                cntAtFile = 0;
            end;
            cntAtFile = cntAtFile + 1;
            if ( IdSeans == NULL )
                IdSeans = SaveSeans (@NumSeans, xml, "О", Setup.OutPath, Setup.IdSeansRef, Parm.("Date"));
                if ( IdSeans == 0 ) 
                    Protokol.Put ("Ошибка формирования номера сеанса, аварийное завершение");
                    return false; 
                end;
            end;

            xml.NewDoc ("О");
            SetAttributesMO (xml, sql.value ("MOxml"));


            // Rogl modify 14.06. Существенно изменил условия присвоения суффиксов
             if (      (     (Substr(sql.value ("Carry_Account_payer")   ,1,5)=="20202")
                          or (Substr(sql.value ("Carry_Account_payer")   ,1,5)=="20203")
                          or (Substr(sql.value ("Carry_Account_payer")   ,1,5)=="20206")
                          or (Substr(sql.value ("Carry_Account_payer")   ,1,5)=="20207")
                          or (Substr(sql.value ("Carry_Account_receiver"),1,5)=="20202")
                          or (Substr(sql.value ("Carry_Account_receiver"),1,5)=="20203")
                          or (Substr(sql.value ("Carry_Account_receiver"),1,5)=="20206")
                          or (Substr(sql.value ("Carry_Account_receiver"),1,5)=="20207")  )
                   and (Substr(sql.value ("Carry_Account_payer")    ,1,5)!="70608")
                   and (Substr(sql.value ("Carry_Account_receiver") ,1,5)!="70603")
                   and (    (valtype(sql.value("StoreKind"))==v_SpecVal)
                         or (sql.value ("StoreKind")==1)   )
                 )
                 CodeForm = CodeForMO+"_k";
            elif  (valtype(sql.value("StoreKind"))==v_SpecVal)
               if ( (Sql.value("devcode")==CodeForBO) and (Sql.value("t_chapter")==1) )
                  CodeForm = CodeForBO+"_e";
               else
                  CodeForm = CodeForMO+"_e";
               end;
            else
              if ( ( Sql.value ("devcode") == CodeForBO ) and (Sql.value("t_chapter")==1) )
                  CodeForm = CodeForBO+iif (sql.value ("StoreKind"), "_e", "_b");
              else
                  CodeForm = CodeForMO+iif (sql.value ("StoreKind"), "_e", "_b");
              end;
            end;
            xml.InsertElem ("formCode", CodeForm);
            xml.InsertElem ("codeABS", Setup.AbsCode);
            xml.InsertElem ("depNumber", Setup.AbsCode+sql.value ("dprt"));
            xml.InsertElem ("creationDateTime", DateTimeStr (cdt = Date, ctm = Time));
            xml.InsertElem ("vspNumber", sql.value ("branch"));
           // 04.03.2014 joy t_code_currency меняем на t_fiid_payer if ( not SaveToLog (sql.value ("devId"), 0, iif (sql.value ("IsMulty")==0, iif (sql.value ("t_code_currency"), "В", "Р"), "М"), CodeForm, IdSeans, cdt, ctm, sql.value ("BaseDoc")) )
            if ( not SaveToLog (sql.value ("devId"), 0, iif (sql.value ("IsMulty")==0, iif (sql.value ("code_currency_payer"), "В", "Р"), "М"), CodeForm, IdSeans, cdt, ctm, sql.value ("BaseDoc")) )
              Protokol.Put (String ("Ошибка записи в лог: devId= ", sql.value ("devId")));
            end;

            UseProgress (cnt = cnt+1);
        end;

        // выгрузка документа-основания
        if ( (ValType (sql.value ("ExtUploadDoc")) != V_SPECVAL) and (ValType (sql.value ("DevCode")) != V_SPECVAL)
             and (sql.value("devcode") != CodeForBO)   // залипуха для блокировки выгрузки банковского ордера
            //04.03.2014 joy t_code_currency меняем на t_fiid_payer. and (not (InList (sql.value ("t_dockind"), 27, 202, 320) and sql.value ("t_code_currency"))) //костыль чтобы не выгружался валютный платеж
             and (not (InList (sql.value ("t_dockind"), 27, 202, 320) and sql.value ("code_currency_payer")))
           )
            if ( (DevCode == "") or (sql.value ("DevCode") == DevCode) )     // фильтр на вид документа
                if ( (Setup.MaxCountDEV != 0) and (cntAtFile == Setup.MaxCountDEV) ) // новый файл
                    Protokol.PutSeans (NumSeans, "Док-т", MergeFile (Setup.OutPath, xml.xmlName), cntAtFile);
                    cntAtFile = 0;
                    xml.CloseXml ();
                    IdSeans = NULL;
                    xml = TXml ();
                    
                    cntAtFile = 0;
                end;
                cntAtFile = cntAtFile + 1;

                if ( IdSeans == NULL )
                    IdSeans = SaveSeans (@NumSeans, xml, "О", Setup.OutPath, Setup.IdSeansRef, Parm.("Date"));
                    if ( IdSeans == 0 ) 
                        Protokol.Put ("Ошибка формирования номера сеанса, аварийное завершение");
                        return false; 
                    end;
                end;

                xml.NewDoc ("О");
                SetAttributes (xml, sql.value ("PMxml"));

                if (InList (sql.value ("t_dockind"), 410, 420, 430, 440)) //Кассовые идут без деления на МО + д-основание и они всегда бумажные!
                   if ( (valtype(sql.value("StoreKind"))!=v_SpecVal)
                        and (sql.value("StoreKind")==1) )//Это исключения (например навешанная категория или указана пачка для элктронных)
                                                         //Сюда также попадут подкрепления банкоматов например
                       v_Devcode = Sql.value ("devcode")+"_e";
                   else
                       v_Devcode = Sql.value ("devcode")+"_b";
                   end;
                else
                   v_Devcode = Sql.value ("devcode")+"_i"; //+iif (sql.value ("StoreKind"), "e", "b"));
                end;
                xml.InsertElem ("formCode", v_Devcode);
                xml.InsertElem ("codeABS", Setup.AbsCode);
                xml.InsertElem ("depNumber", Setup.AbsCode+sql.value ("dprt"));
                xml.InsertElem ("creationDateTime", DateTimeStr (cdt = Date, ctm = Time));
                xml.InsertElem ("vspNumber", sql.value ("branch"));
               // 04.03.2014 joy t_code_currency меняем на t_fiid_payer. if ( not SaveToLog (sql.value ("extdevId"), 0, iif (sql.value ("t_code_currency"), "В", "Р"), v_Devcode, IdSeans, cdt, ctm, sql.value ("BaseDoc")) )
               if ( not SaveToLog (sql.value ("extdevId"), 0, iif (sql.value ("code_currency_payer"), "В", "Р"), v_Devcode, IdSeans, cdt, ctm, sql.value ("BaseDoc")) )
                   Protokol.Put (String ("Ошибка записи в лог: extdevId= ", sql.value ("extdevId")));
                end;

                UseProgress (cnt = cnt+1);
            end;
        end;

        // выгрузка 2го документа-основания
        if ( (ValType (sql.value ("ExtUploadDoc2")) != V_SPECVAL) and (ValType (sql.value ("DevCode2")) != V_SPECVAL)
             and (sql.value("devcode") != CodeForBO)   // залипуха для блокировки выгрузки банковского ордера
             // 04.03.2014 joy t_code_currency меняем на t_fiid_payer. and (not (InList (sql.value ("t_dockind"), 27, 202, 320) and sql.value ("t_code_currency"))) //костыль чтобы не выгружался валютный платеж
             and (not (InList (sql.value ("t_dockind"), 27, 202, 320) and sql.value ("code_currency_payer")))
           )
            if ( (DevCode == "") or (sql.value ("DevCode2") == DevCode) )     // фильтр на вид документа
                if ( (Setup.MaxCountDEV != 0) and (cntAtFile == Setup.MaxCountDEV) ) // новый файл
                    Protokol.PutSeans (NumSeans, "Док-т", MergeFile (Setup.OutPath, xml.xmlName), cntAtFile);
                    cntAtFile = 0;
                    xml.CloseXml ();
                    IdSeans = NULL;
                    xml = TXml ();
                    
                    cntAtFile = 0;
                end;
                cntAtFile = cntAtFile + 1;

                if ( IdSeans == NULL )
                    IdSeans = SaveSeans (@NumSeans, xml, "О", Setup.OutPath, Setup.IdSeansRef, Parm.("Date"));
                    if ( IdSeans == 0 ) 
                        Protokol.Put ("Ошибка формирования номера сеанса, аварийное завершение");
                        return false; 
                    end;
                end;

                xml.NewDoc ("О");
                SetAttributes (xml, sql.value ("PMxml2"));
                xml.InsertElem ("formCode", Sql.value ("devcode2")+"_i");//+iif (sql.value ("StoreKind"), "e", "b"));
                xml.InsertElem ("codeABS", Setup.AbsCode);
                xml.InsertElem ("depNumber", Setup.AbsCode+sql.value ("dprt"));
                xml.InsertElem ("creationDateTime", DateTimeStr (cdt = Date, ctm = Time));
                xml.InsertElem ("vspNumber", sql.value ("branch"));
                // 04.03.2014 joy t_code_currency меняем на t_fiid_payer. if ( not SaveToLog (sql.value ("extdevId2"), 0, iif (sql.value ("t_code_currency"), "В", "Р"), sql.value ("devcode2")+"_i", IdSeans, cdt, ctm, sql.value ("BaseDoc")) )
                   if ( not SaveToLog (sql.value ("extdevId2"), 0, iif (sql.value ("code_currency_payer"), "В", "Р"), sql.value ("devcode2")+"_i", IdSeans, cdt, ctm, sql.value ("BaseDoc")) )
                   Protokol.Put (String ("Ошибка записи в лог: extdevId2= ", sql.value ("extdevId2")));
                end;

                UseProgress (cnt = cnt+1);
            end;
        end;

        y = sql.MoveNext ();
    end;
    if ( cntAtFile )
        Protokol.PutSeans (NumSeans, "Док-т", MergeFile (Setup.OutPath, xml.xmlName), cntAtFile);
        xml.CloseXml ();
    end;
    cnt_all = cnt_all + cnt;
    RemProgress ();
    return true;
End;

//-----------------------------------------------------------------------------------------

Macro UploadRepV1
    Var xml, sql, DevCode = "", docId, codeForm, dprt, NameFile;
    Var cdt, ctm, rdt, cdt_str, ctm_str, rdt_str, rdt_str1; 
    Var stat, cnt = 0, IdSeans, NumSeans;

    Macro Process_Report
       var sql;

       cdt = Date; 
       ctm = Time;                                                                                        
       rdt = Parm.("Date");
       cdt_str = strsubst(string(SubStr(string(cdt),9,2),SubStr(string(cdt),4,2),SubStr(string(cdt),1,2))," ","0"); 
       ctm_str = strsubst(string(SubStr(string(ctm),1,2),SubStr(string(ctm),4,2),SubStr(string(ctm),7,2))," ","0"); 
       rdt_str = strsubst(string(SubStr(string(rdt),9,2),SubStr(string(rdt),4,2),SubStr(string(rdt),1,2))," ","0"); 
       rdt_str1= strsubst(strLpad(string(rdt),10,"0")," ","0"); 
       docId    = string(DevCode,"_",rdt_str);
       NameFile = string(DevCode,"_",cdt_str,"_",ctm_str,"_",rdt_str,".txt");
                                                                                   
       if (DevCode=="Regb")

          sql = "select t_state from user_ealog where t_ABS_ID = :id and t_bankdate = :bd";
          sql = ExecSqlSelect (sql, MakeArray (SqlParam ("id", docId), SqlParam ("bd", rdt)), false); //28.05.2014 joy Добавлена проверка даты выгрузки
          if ( sql.MoveNext () )
              if (sql.value (0) != 4)
                  return true; //не надо выгружать
              end;
          end;

          BegAction (0, "Выполняется отчет "+docId+"...", false);

          if( NOT ExistFile(Setup.OutPath+"_") )
             MakeDir( Setup.OutPath+"_" );
          end;
          if( NOT ExistFile(Setup.OutPath) )
             msgbox(string("Ошибка создания директории ",Setup.OutPath));
             return false;
          end;
//debugbreak;
          SetOutput(Setup.OutPath+"\\"+NameFile);

          /*ExecMacroFile ("EA_BK_OPACC.MAC", "Report_ea", "Rs-Bank 20.29", rdt, rdt, rdt); joy I-00274012-1 24-10-2012 передаем параметр по-другому */
          ExecMacroFile ("EA_BK_OPACC.MAC", "Report_ea", Setup.AbsVersion, rdt, rdt, rdt);
          SetOutput(null);
          EndAction ();
       else
          return true;
       end;

       xml = TXml ();

       IdSeans = SaveSeans (@NumSeans, xml, "О", Setup.OutPath, Setup.IdSeansRef, Parm.("Date"));
       if ( IdSeans == 0 ) 
           Protokol.Put ("Ошибка формирования номера сеанса, аварийное завершение");
           return false; 
       end;

       xml.NewDoc ("О");
       xml.InsertAttr ("docId", docID);
       xml.InsertAttr ("docStartDate", rdt_str1);
       xml.InsertAttr ("docEndDate",   rdt_str1);
       xml.InsertElem ("formCode", DevCode);
       xml.InsertElem ("codeABS", Setup.AbsCode);
       xml.InsertElem ("depNumber", Setup.AbsCode+dprt);
       xml.InsertElem ("creationDateTime", DateTimeStr (cdt, ctm));
       xml.InsertElem ("vspNumber", Setup.AbsCode+dprt);
       xml.InsertElem ("fileName", NameFile);

       Protokol.PutSeans (NumSeans, "Отчет", MergeFile (Setup.OutPath, xml.xmlName), 1);
       xml.CloseXml ();

       if ( not SaveToLog (docID, 1, "R", DevCode, IdSeans, cdt, ctm, "") )
              Protokol.Put (String ("Ошибка записи в лог: devId= ", docID));
              return false;
       end;

       UseProgress (cnt = cnt+1);
       cnt_all = cnt_all + 1;
       return true;
    End;

    /***************************/
    sql = "select lpad (to_char(to_number(trim(pm_scrhlp.GetDepartmentName (t_code)))),2,'0') dprt from ddp_dep_dbt where t_Parentcode = 0";
    sql = ExecSqlSelect (sql, null, false);
    if ( sql.MoveNext () )
       dprt = sql.value ("dprt");
    else
       Protokol.Put ("Ошибка вычисления кода головного банка");
       return false; 
    end;


    // если выгрузка по определенному коду ДЭВ
    if ( Parm.KindRep != 0 )
        sql = "select t_code from user_eadev where t_kind = 1 and t_id = :id";
        sql = ExecSqlSelect (sql, MakeArray (SqlParam ("id", Parm.KindRep)), false);
        if ( sql.MoveNext () )
            DevCode = sql.value (0);
        end;
    end;

    if (DevCode!="")
       if (not Process_Report) 
          return false;
       end;
    else
       sql = ExecSqlSelect ("select t_code from user_eadev where t_kind = 1", null, false);

       stat = sql.MoveNext ();

       InitProgress (4, null, "Выгрузка отчетов");

       while ( stat )
          DevCode = sql.value("t_code");
          if (not Process_Report) 
             return false; 
          end;
          stat = sql.MoveNext ();
       end;
       RemProgress ();

    end;

    return true;
End;

//-----------------------------------------------------------------------------------------

Private macro Upload
    Var sql, query, rs, y;
    Var stat;

    Protokol = CProtokol (Parm.("Date"));
    Protokol.Put ("Выгрузка ДЭВ в электронный архив");
    Protokol.Put (String ("Дата: ", Date (), " Время: ", Time ()));
    Protokol.Put (String ("Операционист: ", {oper}));
    Protokol.Put (String ("Выгрузка документов: ", iif (Parm.("checkDoc"), "Да", "Нет")));
    if ( Parm.("checkDoc") )
        Protokol.Put (String ("Виды документов: ", Parm.("DocKind")));
    end;
    Protokol.Put (String ("Выгрузка отчетов: ", iif (Parm.("checkRep"), "Да", "Нет")));
    if ( Parm.("checkRep") )
        Protokol.Put (String ("Виды отчетов: ", Parm.("RepKind")));
    end;
    Protokol.Put ("");
    cnt_all = 0;

    ExecSql ("begin user_ea.SetVersion ('"+Setup.AbsVersion+"'); end;");

    stat = true;
    if ( Parm.("CheckDoc") )
        if ( Setup.AbsVersion == "Rs-Bank 20.29 (QUICK MULTYDOC)" )
            stat = UploadV1;
        elif ( Setup.AbsVersion == "Rs-Bank 20.30" )
            stat = UploadV1;
        else
            MemoryError (1, "Не реализовано для указанной версии");
            return false;
        end;
    end;
    if (not stat)
       return false;
    end;
    if ( Parm.("CheckRep") )
        if ( Setup.AbsVersion == "Rs-Bank 20.29 (QUICK MULTYDOC)" )
            stat = UploadRepV1;
        elif ( Setup.AbsVersion == "Rs-Bank 20.30" )
            stat = UploadRepV1;
        else
            MemoryError (1, "Не реализовано для указанной версии");
            return false;
        end;
    end;
    return stat;

End;
//-------------------------------------------------------------------------------------------
Private macro Upload_oper
    Var sql;

    GetOperSQL ("");
    sql = ExecSqlSelect (EndCapture (), MakeArray (SqlParam ("CodeDep", Setup.AbsCode)), false);

    Var y = sql.MoveNext (), cnt = 0, cntAtFile = 0, PackCnt = 0, IdSeans, NumSeans;


    SetOutput(Setup.OutPath+"\\oper_"+Setup.AbsCode+".txt");
    while ( y )
       println(toANSI(sql.value ("tt"),true));
       y = sql.MoveNext ();
    end;
    SetOutput(null);

end;

Private macro Upload_depart
    Var sql;

    GetDepartSQL ("");
    sql = ExecSqlSelect (EndCapture (), MakeArray (SqlParam ("CodeDep", Setup.AbsCode)), false);

    Var y = sql.MoveNext (), cnt = 0, cntAtFile = 0, PackCnt = 0, IdSeans, NumSeans;


    SetOutput(Setup.OutPath+"\\depart_"+Setup.AbsCode+".txt");
    while ( y )
       println(toANSI(sql.value ("tt"),true));
       y = sql.MoveNext ();
    end;
    SetOutput(null);

end;




//-----------------------------------------------------------------------------------------

// выгрузка ДЭВ
Private macro UploadDEV
    Var tm = Time ();

    if ( not FillCurrenciName () )
        MemoryError (1, "Ошибка заполнения таблицы наименований валют");
        return false;
    end;
    Upload_oper ();
    Upload_depart ();

    Var res = Upload ();
    Protokol.Put (String ("Выгружено документов: ", cnt_all));
    Protokol.PutTime (int (Time ()-tm));
    Protokol.JRN_status2;

    if ( not IsShedulerRunning () )
        Protokol.View ();
    end;
    return res;
End;
//-----------------------------------------------------------------------------------------

// прописать в журнале номер сеанса выгрузки в реестр
//28.05.2014 joy В рамках адаптации для 2031 добавлен прием параметра  bankdate
Private macro UpdateLogStatus ( idlog, idseans, bankdate )
    return ExecSql ("update user_ealog set t_regseanse=:1 where t_abs_id = :2 and t_bankdate = :3",
                    MakeArray (SqlParam ("1", idseans), SqlParam ("2", idlog), SqlParam ("3", bankdate)), false) != NULL;
End;
//-----------------------------------------------------------------------------------------

// формирование реестра сверки
Private macro UploadReg
    Var tm = Time ();
    Protokol = CProtokol (Parm.("Date"));
    Protokol.Put ("Выгрузка реестра сверки ДЭВ");
    Protokol.Put (String ("Дата: ", Date (), " Время: ", Time ()));
    Protokol.Put (String ("Операционист: ", {oper}));
/* joy 26.03.2014 R-345744 Для версии 2031 меняем таблицы в запросе
//joy I-00274012-1 24-10-2012 Обрабатываем случай, когда t_devtype (вдруг) не Р, B, M, еще есть ведь и отчеты
//     Var sql = "select log.*, nvl (prop.t_number, decode (t_devtype, 'Р', NVL(arub.t_numb_document,' '), 'В', NVL(acur.t_numb_document,' '), 'М', NVL(mult.t_numb_document,' '))) t_number, "+
     Var sql = "select log.*, nvl (prop.t_number, decode (t_devtype, 'Р', NVL(arub.t_numb_document,' '), 'В', NVL(acur.t_numb_document,' '), 'М', NVL(mult.t_numb_document,' '), ' ')) t_number, "+
              "count (1) over () cnt from user_ealog log "+
              "left outer join darhdoc_dbt arub on arub.t_autokey=to_number (substr(t_abs_id, 9)) and t_devtype = 'Р' and t_abs_id like 'CARRY_R_%' "+
              "left outer join darhdoc$_dbt acur on acur.t_autokey=to_number (substr(t_abs_id, 9)) and t_devtype = 'В' and t_abs_id like 'CARRY_V_%' "+
              "left outer join dmultycar_dbt mult on mult.t_carryid=to_number (substr(t_abs_id, 9)) and t_devtype = 'М' and t_abs_id like 'CARRY_M_%' "+
              "left outer join dpmpaym_dbt paym on paym.t_paymentid = to_number (substr(t_abs_id,9)) and t_abs_id like 'PAYMENT_%' "+
              "left outer join dpmrmprop_dbt prop on prop.t_paymentid = paym.t_paymentid and t_abs_id like 'PAYMENT%' "+
              "where log.t_bankdate = :dt and log.t_regseanse = 0";
*/
    Var sql = "select log.*, nvl (prop.t_number, decode (t_devtype, 'Р', NVL(arub.t_numb_document,' '), 'В', NVL(acur.t_numb_document,' '), 'М', NVL(mult.t_numb_document,' '), ' ')) t_number, "+
              "count (1) over () cnt from user_ealog log "+
              "left outer join dacctrn_dbt arub on arub.t_acctrnid=to_number (substr(t_abs_id, 9)) and t_devtype = 'Р' and t_abs_id like 'CARRY_R_%' "+
              "left outer join dacctrn_dbt acur on acur.t_acctrnid=to_number (substr(t_abs_id, 9)) and t_devtype = 'В' and t_abs_id like 'CARRY_V_%' "+
              "left outer join dacctrn_dbt mult on mult.t_acctrnid=to_number (substr(t_abs_id, 9)) and t_devtype = 'М' and t_abs_id like 'CARRY_M_%' "+
              "left outer join dpmpaym_dbt paym on paym.t_paymentid = to_number (substr(t_abs_id,9)) and t_abs_id like 'PAYMENT_%' "+
              "left outer join dpmrmprop_dbt prop on prop.t_paymentid = paym.t_paymentid and t_abs_id like 'PAYMENT%' "+
              "where log.t_bankdate = :dt and log.t_regseanse = 0";

    sql = ExecSqlSelect (sql, MakeArray (SqlParam ("dt", Parm.("Date"))), false);

    BegAction (500, "Выборка данных, ждите...", false);
    Var y = sql.MoveNext (), cnt = 0, cntAtFile = 0, IdSeans, NumSeans, xml = TXml (), atr;
    EndAction ();

    InitProgress (int (sql.value ("cnt")), NULL, "Выгрузка реестра");
    while ( y )
        if ( false )//(Setup.MaxCountDEV != 0) and (cntAtFile == Setup.MaxCountDEV) )
            Protokol.PutSeans (NumSeans, "Реестр", MergeFile (Setup.OutPath, xml.xmlName), cntAtFile);
            cntAtFile = 0;
            xml.CloseXml ();
            IdSeans = NULL;
            xml = TXml ();
           
            cntAtFile = 0;
        end;
        cntAtFile = cntAtFile + 1;
        if ( IdSeans == NULL )
            IdSeans = SaveSeans (@NumSeans, xml, "Р", Setup.OutPath, Setup.IdSeansRef, Parm.("Date"));
            if ( IdSeans == 0 ) 
                Protokol.Put ("Ошибка формирования номера сеанса, аварийное завершение");
                return false; 
            end;
            xml.akt.appendChild (atr = xml.xml.createElement ("listDate"));
            atr.appendChild (xml.xml.createTextNode (yyyymmdd (Parm.("Date"))));

            xml.akt.appendChild (atr = xml.xml.createElement ("codeABS"));
            atr.appendChild (xml.xml.createTextNode (Setup.("CodeAbs")));
        end;

        xml.NewDoc ("Р");

        xml.InsertElem ("creationDateTime", DateTimeStr (Date (sql.value ("t_sysdate")), Time (sql.value ("t_systime"))));
        xml.InsertElem ("docId", sql.value ("t_abs_id"));
        xml.InsertElem ("formCode", sql.value ("t_devcode"));
        xml.InsertElem ("docNumber", sql.value ("t_number"));

        UpdateLogStatus (sql.value ("t_abs_id"), IdSeans, Parm.("Date")); //28.05.2014 joy Добавлена передача параметра Parm.("Date")

        UseProgress (cnt = cnt+1);
        y = sql.MoveNext ();
    end;
    Protokol.Put ("Выгружено "+cnt+" записей");
    Protokol.PutTime (int (Time ()-tm));
    xml.CloseXml ();
    Protokol.View ();
End;
//-----------------------------------------------------------------------------------------