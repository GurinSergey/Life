/*Формирование и обработка XML-файлов для электронного архива*/
import /*ea_utils, */rcw, lib_str;

var 
  PathIn   = "..\\import\\ea\\in\\",  /*Каталог входщих файлов*/
  PathOut  = "..\\import\\ea\\out\\", /*Каталог исходящих файлов*/
  PathArh  = "..\\import\\ea\\arh\\", /*Каталог обработанных входящих файлов*/
  PathLog  = "..\\import\\ea\\log\\"; /*Каталог протоколов обработанных файлов*/

private  file logFile() txt append; /*протокол обработки файла*/

/*Класс для работы с xml файлами*/
class TXml()

  /*Настраиваимые свойства*/
  var 
    FlagLog = false; /*Флаг формирования протокола обработки файла*/

  var 
    xmlName = "", /*имя xml файла*/
    logName = "", /*имя лога*/
    xml,     /*xml объект*/
    startAX; /*для запуска ActiveX*/

  /*XML-блоки файла выгрузки*/
  var akt, /*akt:archiveKit*/ 
      doc; /*archiveKitDoc*/ 
 
  private var {oper};

  /*Инициализация объекта*/
  macro Init()   
    if (true)//IsStandAlone())
       xml = ActiveX("Microsoft.XMLDOM");//,null,false);
    else
       if (startAX == null)
         startAX = CreateObject("rsax", "TRsAxServer", "RsAxServer", false);
       end;
       xml = startAX.CreateComObject("Microsoft.XMLDOM", false);
    end;
  end;
  
  /*Формирование имени для исходящего файла*/
  macro FormFileName(pSeansID, pRdt)    
    xmlName = strsubst(string("AK",
                              SubStr(string(date),9,2),SubStr(string(date),4,2),SubStr(string(date),1,2),
                              "_",strLpad(string(pSeansID),6,"0"),
                              "_",SubStr(string(pRdt),9,2),SubStr(string(pRdt),4,2),SubStr(string(pRdt),1,2),
                              ".xml"),
                       " ","0");
  end;

  macro FormFileNameSRV(pSeansID, pRdt)    
    xmlName = strsubst(string("DR_",
                              SubStr(string(date),9,2),SubStr(string(date),4,2),SubStr(string(date),1,2),
                              "_",strLpad(string(pSeansID),6,"0"),
                              "_",SubStr(string(pRdt),9,2),SubStr(string(pRdt),4,2),SubStr(string(pRdt),1,2),
                              ".xml"),
                       " ","0");
  end;

  /*Формирование имени для файла для отчета*/
/*
  macro FormFileNameRep(pRepCode, dt_create_str, )    
    xmlName = string("AK_",pRepCode,"_",SubStr(string(date),9,2),SubStr(string(date),4,2),SubStr(string(date),1,2),".xml");
  end;
*/

  /*Открытие файла протокола с именем name.
    Если предан параметр mode и равен true. то старый лог с таким же именем удаляется*/
  macro OpenLog(name,mode)
    if (not FlagLog) return; end;
    if ((ValType(name)==V_UNDEF) or (name==""))
      MsgBox("Не задано имя файла поротокола");
      return false;
    end;
    logName = PathLog+name+".log";
    if ((ValType(mode)==V_BOOL) and (mode==true))
      Close(logFile);
      DelFile(logName);
    end;
    if (not Open(logFile,logName))
      MsgBox("Ошибка открытия файла пороткола ",logName);
      return false;
    end;
    return true;
  end;

  /*Закрытие файла протокола*/
  macro CloseLog()
    if (not FlagLog) return; end;
    Close(logFile);
  end;

  /*Вывод на экран файла протокола*/
  macro ViewLog()
    if (not FlagLog) return; end;
    CloseLog();
    ViewFile(logName);
  end;

  /*Вывод строки в файл протокола*/
  macro WriteLog()
    if (not FlagLog) return; end;
    var str = "", i = 1, MsgParam;
    while(GetParm(i,MsgParam))
       str=str+String(MsgParam);
       i=i+1;
    end;
    insert(logFile,str);
  end;

  /*Формирование XML-блока для нового документа*/
  macro NewDoc(Type)
    /*Следующий документ*/
    if ( Type == "Р" )
       doc=xml.createElement("listDoc");
    else
       doc=xml.createElement("archiveKitDoc");
    end; 
    akt.appendChild(doc);
  end;

  /*Создание файла (основной блок инициализации)
     pCod - код который будет добавлен в имя файла выгрузки (для формирования имени файла)
     pTyp - тип файла выгрузки (REP - отчет, SRV - реестр сверки, порчее или пусто - документ)
     pRdt - дата документов (отчетов) */
  macro OpenXml(pCod, pTyp, pRdt)

    /*Формирование имени файла*/
    if ((ValType(pTyp)!=V_UNDEF) and (pTyp=="SRV"))
      FormFileNameSRV(pCod, pRdt);
    else
      FormFileName(pCod, pRdt);
    end;

    if (xmlName=="")
      msgbox("Не задано имя XML файла");
      return false;
    end;
    /*Открыть протокол*/
    OpenLog(xmlName,true);

    /*Установить флаг монопольной работы с файлом*/
    //FlagFileName=PathLog+xmlName+".flg";
    //SetControl(true,FlagFile,FlagFileName);

    WriteLog("Формирование файла: ",xmlName);
    WriteLog("        Дата,время: ",date()," ",time());
    WriteLog("      Пользователь: ",{oper});
    WriteLog();
  
    xml.appendChild(xml.createProcessingInstruction("xml"," version='1.0' encoding='UTF-8'"));  
    //xml.appendChild(xml.createProcessingInstruction("xml"," version='1.0' encoding='windows-1251'"));      

    if (pTyp=="SRV")
      akt = xml.createElement("akt:list");
    else
       akt = xml.createElement("akt:archiveKit");
    end;
    akt.setAttribute("xmlns:akt", "http://ru.sbrf.carch");
    akt.setAttribute("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
    xml.appendChild(akt);
    
    //NewDoc();

    return true;

    onError (er)
      MsgBox (er.Message,"| Модуль:",er.Module,"| строка:",er.Line);
      return false;
  end;  

  /*Завершение работы */
  macro CloseXml()
    //SetControl(false,FlagFile,FlagFileName);
    xml.Save(Mergefile (Setup.OutPath,xmlName)); 
  end;

  /*Вывод на экран*/
  macro ViewXml()
    ViewFile(MergeFile (Setup.OutPath+xmlName));
  end;

  /*Создание прикладного атрибута*/
  macro InsertAttr(pNam,pVal)
    var app, atr, val;
    /*Создание элементов*/
    app = xml.createElement("appliedAttributs");
    atr = xml.createElement("attributeName");
    val = xml.createElement("value");
    /*Создание текстовых узлов*/
    atr.appendChild(xml.createTextNode(pNam));
    val.appendChild(xml.createTextNode(pVal));
    /*Размещение элементов в дереве*/
    app.appendChild(atr);
    app.appendChild(val);
    doc.appendChild(app);
  end;

  /*Создание прикладного элемена*/
  macro InsertElem(pNam,pVal)
    var atr;
    atr = xml.createElement(pNam);
    atr.appendChild(xml.createTextNode(pVal));
    doc.appendChild(atr);
  end;

  Init();

end;
end.
var x; 
   x=TXml();
   /*printobject(x.xml);
   printprops(x.xml);*/
   
   /*Инициализация XML-объекта. Передается ID-сеанса (для формирования имени файла)*/
   x.OpenXml(0);

   /*Запись атрибутов документа*/
   x.InsertAttr("ATTRIB1","VALUE1");
   x.InsertAttr("ATTRIB2","VALUE2");
   x.InsertElem("ATT1","VAL1");

   /*Атрибуты следующего документа*/
   x.NewDoc();
   x.InsertAttr("ATTRIB3","VALUE3");
   x.InsertElem("ATT2","VAL2");
   x.InsertElem("ATT3","VAL3");
   
   /*Завершение создания XML-файла*/
   x.CloseXml();

   /*При необходимости можно посмотреть файл*/
   x.ViewXml();

   /*Работа с протоколом (опция). Если протокол не нужен вообще, то при создании объекта TXml, установить свойство TXml.FlagLog=false*/
   x.WriteLog("Формирование файла завершено");
   x.ViewLog();
   
