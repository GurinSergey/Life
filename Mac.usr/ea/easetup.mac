//-----------------------------------------------------------------------------------------
// Электронный архив - настроечная часть
// В. Горленко
// @changes: 2012-02-09 zip_z. изменения в алгоритме поиска библиотеки ресурсов
//-----------------------------------------------------------------------------------------
import oralib, likepy, bankinter, eautils;

// соответствие вида первичного документа справочнику происхождений
Private var Origins = TArray ();
Origins [201] = 1650;
Origins [202] = 1655;
Origins [200] = 1660;
Origins [ 16] = 1665;
Origins [ 70] = 1670;
Origins [ 15] = 1671;
Origins [400] = 1672;
Origins [430] = 1672;
Origins [440] = 1672;
Origins [203] = 1673;
//-----------------------------------------------------------------------------------------

// закладка
Class CBookmark ( _Bookmark )
    Var Bookmark = _Bookmark;
End;
//-----------------------------------------------------------------------------------------

// проверяет есть ли пересечения множеств Shifr1Str и Shifr2Str. ShifrNStr - строка занчений перечисленных через запятую
Private macro ПересечениеМножестваШифров ( Shifr1Str, Shifr2Str )
    if ( (ValType (Shifr1Str) == V_SPECVAL) or (Shifr1Str == "") or (ValType (Shifr2Str) == V_SPECVAL) or (Shifr2Str == "") )
        return true;
    end;

    Shifr2Str = Shifr2Str + ",";
    Var x = 1;
    while ( x < StrLen (Shifr1Str) )
        if (Index (Shifr2Str, SubStr (Shifr1Str, x, 2)+",") )
            return true;
        end;
        x = x + 3;
    end;
    return false;
End;
//-----------------------------------------------------------------------------------------

// класс для корректировки списка шифров операций
Class (ToolsDataAdapter) CEditShifr ( Shifr )
    Var Data = Shifr; // список шифров через запятую
    if ( Data ) Data = Data + ","; end;
    Var curRec = TRecHandler ("RShifrOper", MakeArray ("Shifr", V_STRING, 5, 0, 5, "Name", V_STRING, 100, 0, 100), FALSE);
    Var Navigator = 0;

    InitToolsDataAdapter ();

    SetCurrentRecord (curRec);

    Macro InitRec
        Var sql = "select t_comment from dcipher_dbt where t_shifr_oper = :1";
        CurRec.("Shifr") = SubStr (Data, Navigator, 2);
        sql = ExecSqlSelect (sql, MakeArray (SqlParam ("1", CurRec.("Shifr"))), false);
        if ( sql.MoveNext () )
            CurRec.("Name") = sql.value (0);
        end;
    End;
    
    Macro MoveFirst
        if ( StrLen (Data) )
            Navigator = 1;
            InitRec ();
            return true;
        end;
        return false;
    End;

    Macro MoveLast
        if ( StrLen (Data) )
            Navigator = StrLen (Data)-2;
            InitRec ();
            return true;
        end;
        return false;
       
    End;

    Macro MoveNext
        if ( StrLen (Data) - Navigator > 3 )
            Navigator = Navigator + 3;
            InitRec ();
            return true;
        end;
        Navigator = 0;
        return false;
    End;

    Macro MovePrev
        if ( Navigator > 3 )
            Navigator = Navigator - 3;
            InitRec ();
            return true;
        end;
        Navigator = 0;
        return false;
    End;

    Macro MoveToBookmark ( Bookmark )
        if ( Navigator = Index (Data, Bookmark.Bookmark+",") )
            InitRec ();
            return true;
        end;
        Navigator = 0;
        return false;
    End;

    Macro GetBookmark
        if ( Navigator == 0 )
            return false;
        end;
        return CBookmark (CurRec.("Shifr"));
    End;

    Macro RecordInsert
        Var x = 1;
        while ( x <= StrLen (Data) - 2 )
            if ( SubStr (Data, x, 2) > CurRec.("Shifr") )
                break;
            end;
            x = x + 3;
        end;
        Data = SubStr (Data, 1, x-1) + CurRec.("Shifr") + "," + SubStr (Data, x);
        return true;
    End;

    Macro RecordUpdate
        return false;
    End;

    Macro RecordDelete
        if ( Navigator == 0 )
            return false;
        end;
        Data = StrSubst (Data, SubStr (Data, Navigator, 3), "");
        if ( Data == "," ) Data = ""; end;
        return true;
    End;

    Macro GetFileName
        return "ShifrOper";
    End;

    Macro GetLastStatus
        return 0;
    End;

    // обработчик нажатия Enter в скроллинге
    Macro SelectHandler ( rs, cmd, id, key )
        if ( (cmd == DLG_KEY) and (key == kbEnter) and (ValType (rs.value (0)) != V_SPECVAL) )
            return CM_SELECT;
        end;
    End;

    // выбор шифра операции из справочника
    Macro SelectShifr
        Var sql = "select * from dcipher_dbt";
        if ( Data )
            // исключаем уже выбранные шифры
            sql = sql + " where t_shifr_oper not in ('"+StrSubst (SubStr (Data, 1, StrLen (Data)-1), ",", "','")+"')";
        end;
        
        sql = sql + " order by t_shifr_oper";
        sql = ExecSqlSelect (sql, NULL, NULL, RSDVAL_CLIENT, RSDVAL_STATIC);
        if ( RunScroll (sql, 2, MakeArray ("t_Shifr_oper", "Шифр", 4, 0, 4, 0, "t_comment", "Описание", 40, 0, 40, 0),
                        NULL, R2M (this, "SelectHandler"), "Шифры операций", "Enter Выбор  ESC Отмена", true, 1, 1, 60, 30) )
            return sql.value ("t_shifr_oper");
        end;
        return "";
    End;

    // обработчик скроллинга
    Macro Handler ( rs, cmd, id, key )

        if ( (cmd == DLG_KEY) and (key == kbDel) and (Data != "") and GetTrue (true, "Удалить запись?") )
            if ( RecordDelete () )
                GoToScroll (rs);
                UpdateScroll (rs, 5);
            end;
        elif ( (cmd == DLG_KEY) and (key == kbIns) )
            key = SelectShifr ();
            if ( key )
                CurRec.("Shifr") = key;
                if ( RecordInsert () )
                    GoToScroll (rs);
                    UpdateScroll (rs, 4);
                end;
            end;
        end;
    End;

    Macro Run
        RunScroll (this, 2, MakeArray ("Shifr", "Шифр", 4, 0, 4, 0, "Name", "Наименование", 40, 0, 40, 0),
                   null, R2M (this, "Handler"), "Шифры операций", "Ins Удалить  Del Добавить  ESC Выход", TRUE, 10, 12, 50, 18);
        if ( Data )
            return SubStr (Data, 1, StrLen (Data)-1);
        end;
        return "";
    End;

End;
//-----------------------------------------------------------------------------------------

// класс показывает список происхождений для вида первички с возможностьб отметки - электронное или бумажное хранение
Private class (ToolsDataAdapter) COriginList ( _DocKind, _OriginList, _StoreKind )
    Var OriginList = _OriginList; // список происхождений с отличным от остальных видом хранения
    Var StoreKind = _StoreKind;   // вид хранения для данного вида первички
    if ( OriginList )
        OriginList = OriginList + ",";
    end;

    Var DocKind = _DocKind;
    Var ListNum = Origins [DocKind];
    Var curRec = TRecHandler ("ROriginList", MakeArray ("Origin", V_INTEGER, 5, 0, 5, "Name", V_STRING, 100, 0, 100, "Electro", V_STRING, 2, 0, 1, "Paper", V_STRING, 2, 0, 1), FALSE);
    Var Recordset = RsdCommand ("select * from dllvalues_dbt where t_list = :list order by t_element");
    Recordset.AddParam ("id", V_INTEGER, ListNum);
    Recordset = RsdRecordset (Recordset, RSDVAL_CLIENT, RSDVAL_STATIC);

    InitToolsDataAdapter ();

    SetCurrentRecord (curRec);

    Macro InitRec
        curRec.("Origin") = Recordset.value ("t_element");
        curRec.("Name") = Recordset.value ("t_name");
        curRec.("Paper") = curRec.("Electro") = "";

        if ( Index (OriginList, curRec.("Origin")+",") )
            if ( StoreKind == 0 )
                curRec.("Electro") = "X";
            else
                curRec.("Paper") = "X";
            end;
        else
            if ( StoreKind == 1 )
                curRec.("Electro") = "X";
            else
                curRec.("Paper") = "X";
            end;
        end;
        return true;
    End;

    Macro MoveFirst
        if ( Recordset.MoveFirst () )
            return InitRec ();
        end;
        return false;
    End;

    Macro MoveLast
        if ( Recordset.MoveLast () )
            return InitRec ();
        end;
        return false;
    End;

    Macro MoveNext
        if ( Recordset.MoveNext () )
            return InitRec ();
        end;
        return false;
    End;

    Macro MovePrev
        if ( Recordset.MovePrev () )
            return InitRec ();
        end;
        return false;
    End;

    Macro MoveToBookmark ( _Bookmark )
        if ( Recordset.Move (_Bookmark, BOOKMARK) )
            return InitRec ();
        end;
        return false;
    End;

    Macro GetBookmark
        return Recordset.Bookmark;
    End;

    Macro GetFileName
        return "OriginList";
    End;

    Macro GetLastStatus
        return 0;
    End;

    Macro RecordUpdate
        if ( curRec.("Paper") )
            if ( Index (OriginList, curRec.("Origin") + ",") == 0 )
                OriginList = OriginList + curRec.("Origin") + ",";
            end;
        else
            OriginList = StrSubst (OriginList, curRec.("Origin")+",", "");
        end;
        return true;
    End;

    Macro Handler ( rs, cmd, id, key )
        if ( (cmd == DLG_KEY) and (key == kbSpace) )
            if ( id == 2 )
                if ( StoreKind == 1 )
                    curRec.("Electro") = "X";
                    curRec.("Paper") = "";
                else
                    curRec.("Electro") = "";
                    curRec.("Paper") = "X";
                end;
                RecordUpdate ();
                UpdateScroll (rs);
            elif ( id == 3 )
                if ( StoreKind == 0 )
                    curRec.("Electro") = "X";
                    curRec.("Paper") = "";
                else
                    curRec.("Electro") = "";
                    curRec.("Paper") = "X";
                end;
                RecordUpdate ();
                UpdateScroll (rs);
            end;
        end;
    End;
    
    Macro List
        RunScroll (this, 4, MakeArray ("Origin", "Ном.", 5, 0, 0, 0, "Name", "Наименование", 40, 0, 40, 0, "Electro", "Э", 1, 0, 2, 0, "Paper", "Б", 1, 0, 2, 0),
                   NULL, R2M (this, "Handler"), "Происхождения документа", "Пробел Отметить  ESC Выход", TRUE);
        if ( OriginList )
            return SubStr (OriginList, 1, StrLen (OriginList)-1);
        end;
        return "";
    End;
End;
//-----------------------------------------------------------------------------------------

// справочник видов первичных документов, используется для добавления нового вида первички в виду ДЭВ
Private class CSelectDocKind ( _Id )
    Var RecId = _Id;    // USER_EADEV.T_ID
    Var Result:Integer = 0;
    Var ResultName:String;

    Macro Handler ( rs, cmd, id, key )
        if ( (cmd == DLG_KEY) and (key == kbEnter) and (ValType (rs.value (0)) != V_SPECVAL) )
            Result = rs.value ("t_dockind");
            ResultName = rs.value ("t_name");
            return CM_SELECT;
        end;
    End;

    Macro List
        // ищем виды первички которые уже привязаны к кодам ДЭВ у которых пересекаются использованные шифры
        Var sql = "select t_shifr from user_eadev where t_id = :id", Shifr = "", DocKinds = "", Where = "";
        sql = ExecSqlSelect (sql, MakeArray (SqlParam ("id", RecId)));
        if ( Sql.MoveNext () ) Shifr = sql.value (0); end;

        sql = "select t_id, t_shifr, (select (sys_xmlagg(xmlelement(col, t_dockind||',')).extract('/ROWSET/COL/text()')).getstringval() from USER_EAPAYMKIND where t_devkind = t_id) DocKinds from user_eadev where t_id != :id";
        sql = ExecSqlSelect (sql, MakeArray (SqlParam ("id", RecId)));
        while ( sql.MoveNext () )
            if ( ПересечениеМножестваШифров (Shifr, sql.value ("t_shifr")) )
                if ( ValType (sql.value ("DocKinds")) != V_SPECVAL )
                    DocKinds = DocKinds + sql.value ("DocKinds");
                end;
            end;
        end;
        // найденные виыд первички исключаем из списка
        if ( DocKinds )
            Where = " and t_dockind not in (" + SubStr (DocKinds, 1, StrLen (DocKinds)-1) + ") ";
        end;

        sql = "select * from doprkdoc_dbt where t_program != chr (0)"+Where+" and t_dockind not in (select t_dockind from user_eapaymkind where t_devkind = :id) start with t_dockind=29 connect by prior t_dockind=t_parentdockind order by t_dockind";
        sql = ExecSqlSelect (sql, MakeArray (SqlParam ("id", RecId)), NULL, RSDVAL_CLIENT, RSDVAL_STATIC);
        return RunScroll (sql, 2, MakeArray ("t_dockind", "Вид", 5, 0, 0, 0, "t_name", "Наименование", 40, 0, 40, 0),
                          NULL, R2M (this, "Handler"), "Выиды документов", "Enter Выбрать  ESC Отмена", true, 1, 1);
        
    End;
End;
//-----------------------------------------------------------------------------------------

// список видов первичных ждокументов, привязанных к коду ДЭВ
Private class CPrimdocList ( _id, _StoreKind )
    Var RecId = _id, // USER_EADEV.T_ID
        StoreKind = _StoreKind;

    Macro Handler ( rs, cmd, id, key )
        if ( (cmd == DLG_KEY) and (key == kbIns) )
            // Добавляем вид первички
            key = CSelectDocKind (RecId);
            if ( key.List () )
                if ( ExecSql ("insert into user_eapaymkind values (:1, :2, chr (1))", MakeArray (SqlParam ("1", RecId), SqlParam ("2", key.Result)), false) == NULL )
                    MsgBox ("Ошибка добавления записи");
                    return CM_IGNORE;
                end;
                rs.AddNew ();
                rs.value ("t_devkind") = RecId;
                rs.value ("t_dockind") = key.Result;
                rs.value ("t_name") = key.ResultName;
                rs.Update ();
                GoToScroll (rs);
                UpdateScroll (rs);
            end;
        elif ( (cmd == DLG_KEY) and (key == kbDel) and (ValType (rs.value (0)) != V_SPECVAL) and GetTrue (true, "Удалить запись?") )
            // удаляем вид первички
            rs.Delete ();
            if ( rs.RecCount )
                GoToScroll (rs);
                UpdateScroll (rs, 5);
            else
                return CM_SELECT;
            end;
        elif ( (cmd == DLG_KEY) and (key == kbF5) and (ValType (rs.value (0)) != V_SPECVAL) )
            // список происхождений
            cmd = "select t_origin from user_eapaymkind where t_devkind=:1 and t_dockind=:2";
            cmd = ExecSqlSelect (cmd, MakeArray (SqlParam ("1", RecId), SqlParam ("2", rs.value ("t_dockind"))), false);
            if ( cmd.MoveNext () )
                cmd = cmd.value (0);
            end;
            key = COriginList (rs.value ("t_dockind"), cmd, StoreKind).List ();
            if ( cmd != key )
                if ( ExecSql ("update user_eapaymkind set t_origin = NVL (:0, chr (1)) where t_devkind=:1 and t_dockind=:2", MakeArray (SqlParam ("0", key), SqlParam ("1", RecId), SqlParam ("2", rs.value ("t_dockind"))), false) == NULL )
                    MsgBox ("Ошибка обновления записи");
                end;
            end;
        end;
    End;
    
    Macro List
        // NewConnection для коррекктной работы InsertCommand и DeleteCommand, в 6.30 можно убрать
        Var NewConnection = RsdConnection (RsdEnvironment ("RDDrvO", "RDDrvO.dll"), GetIniString ("CONNSTRING", "rsreq.ini"));
        Var rs = RsdCommand ("select t_devkind, t_dockind, (select t_name from doprkdoc_dbt where t_dockind=user_eapaymkind.t_dockind) t_name from user_eapaymkind where t_devkind=:id order by t_dockind");
        rs.AddParam ("id", V_INTEGER, RecId);

        rs = RsdRecordset (rs, RSDVAL_CLIENT, RSDVAL_STATIC);
        rs.InsertCommand = RsdCommand (NewConnection, "select ? from dual");
        rs.InsertCommand.AddUserCmdParam ("", "t_dockind", RSDRVER_NEWVAL);
        rs.DeleteCommand = RsdCommand (NewConnection, "delete USER_EAPAYMKIND where t_devkind=? and t_dockind=?");
        rs.DeleteCommand.AddUserCmdParam ("", "t_devkind", RSDRVER_OLDVAL);
        rs.DeleteCommand.AddUserCmdParam ("", "t_dockind", RSDRVER_OLDVAL);

        while ( RunScroll (rs, 2, MakeArray ("t_dockind", "Вид", 4, 0, 0, 0, "t_name", "Наименование", 30, 0, 30, 0),
                           NULL, R2M (this, "Handler"), "Первичные докумнты", "Ins Добавить  Del Удалить  F5 Происхождения  ESC Отмена", true, 5, 5) )
        end;
    End;
End;

//-----------------------------------------------------------------------------------------
// Rogl add 15.04
// список пачек
Private class CPackList ()
    Var Npack, StoreKind;

    Macro Handler ( rs, cmd, id, key )
        if ( (cmd == DLG_KEY) and (key == kbIns) )
            // Добавляем пачку
            Npack = 0;
            if (GetInt (Npack, "Номер пачки", 4))
                if ( ExecSql ("insert into USER_EAPACK values (:1, 0)", MakeArray (SqlParam ("1", Npack)), false) == NULL )
                    MsgBox ("Ошибка добавления записи");
                    return CM_IGNORE;
                end;
                rs.AddNew ();
                rs.value ("t_Pack") = Npack;
                rs.value ("t_Storekind") = 0;
                rs.Update ();
                GoToScroll (rs);
                UpdateScroll (rs);
            end;
        elif ( (cmd == DLG_KEY) and (key == kbDel) and (ValType (rs.value (0)) != V_SPECVAL) and GetTrue (true, "Удалить запись?") )
            // удаляем пачку
            rs.Delete ();
            if ( rs.RecCount )
                GoToScroll (rs);
                UpdateScroll (rs, 5);
            else
                return CM_SELECT;
            end;
        elif ( (cmd == DLG_KEY) and (key == kbSpace) and (ValType (rs.value (0)) != V_SPECVAL) )
            if (rs.value ("t_Storekind") == 0) rs.value ("t_Storekind") = 1;
            else rs.value ("t_Storekind") = 0;
            end;
            rs.Update ();
            UpdateScroll (rs, 5);
        end;
    End;
    
    Macro List
        // NewConnection для коррекктной работы InsertCommand и DeleteCommand, в 6.30 можно убрать
        Var NewConnection = RsdConnection (RsdEnvironment ("RDDrvO", "RDDrvO.dll"), GetIniString ("CONNSTRING", "rsreq.ini"));
        Var rs = RsdCommand ("select t_Pack, t_Storekind from USER_EAPACK order by t_Pack");

        rs = RsdRecordset (rs, RSDVAL_CLIENT, RSDVAL_STATIC);
        rs.InsertCommand = RsdCommand (NewConnection, "select ? from dual");
        rs.InsertCommand.AddUserCmdParam ("", "t_Pack", RSDRVER_NEWVAL);
        rs.DeleteCommand = RsdCommand (NewConnection, "delete USER_EAPACK where t_Pack=?");
        rs.DeleteCommand.AddUserCmdParam ("", "t_Pack", RSDRVER_OLDVAL);

        while ( RunScroll (rs, 2, MakeArray ("t_Pack", "Пачка", 6, 0, 0, 0, "t_Storekind", "Вид хранения (0-бумажный)", 6, 0, 0, 0),
                           NULL, R2M (this, "Handler"), "Вид хранения по пачкам", "Ins Добавить  Del Удалить  Space Вид хранения   ESC Отмена", true, 25, 5) )
        end;
    End;
End;

//-----------------------------------------------------------------------------------------

// Диалог настроек кода ДЭВ
Private class (TRecHandler) CPDSetup ( _id, _code, _name )
    Var RecId = _id, // USER_EADEV.T_ID
        Code = _code, Name = _name;

    // 2012-02-09 zip_z. >
    // Var PrevBuf = TRecHandler ("devsetup", "ea.lbr", true);
    // InitTRecHandler ("devsetup", "ea.lbr", true);
    Var PrevBuf = TRecHandler ("devsetup", getResourceLibPath (), true);
    InitTRecHandler ("devsetup", getResourceLibPath (), true);
    // < 2012-02-09 zip_z.
    
    Macro IsChange
        Var x = 0;
        while ( x < FldNumber () )
            if ( PrevBuf.(x) != this.(x) )
                return true;
            end;
            x = x + 1;
        end;
        return false;
    End;

    Macro Save
        Var Store = 0;
        if ( this.("StoreKind") == "Электронное" )
            Store = 1;
        end;

        if ( ExecSql ("update user_eadev set t_shifr=nvl(:1, chr(1)), t_always=nvl (:2, chr (0)), t_storekind=:3 where t_id=:4",
                      MakeArray (SqlParam ("1", this.("Shifr")), SqlParam ("2", this.("Check1")), SqlParam ("3", Store), SqlParam ("4", RecId)), false) == NULL )
            MsgBox ("Ошибка сохранения записи");
            return false;
        end;
        return true;
    End;

    Macro Handler ( dlg, cmd, id, key )
        if ( (cmd == DLG_KEY) and (key == kbF3) and (id == FldIndex ("Shifr")) )
            dlg.(id) = CEditShifr (dlg.(id)).Run ();

        elif ( (cmd == DLG_KEY) and (key == kbSpace) and (id == FldIndex ("check1")) )
            dlg.("check1") = "X";
            dlg.("check2") = "";
            UpdateFields (dlg);

        elif ( (cmd == DLG_KEY) and (key == kbSpace) and (id == FldIndex ("check2")) )
            dlg.("check2") = "X";
            dlg.("check1") = "";
            UpdateFields (dlg);

        elif ( (cmd == DLG_KEY) and (key == kbESC) and IsChange () )
            key = MsgBoxEx ("Запись была изменена, обновить?", MB_YES+MB_NO+MB_CANCEL);
            if ( key == IND_CANCEL )
                return CM_IGNORE;
            elif ( key == IND_YES )
                return CM_SAVE;
            end;

        elif ( (cmd == DLG_KEY) and (key == kbSpace) and (id == FldIndex ("StoreKind")) )
            if ( this.("StoreKind") == "Бумажное" )
                this.("StoreKind") = "Электронное";
            else
                this.("StoreKind") = "Бумажное";
            end;
        elif ( (cmd == DLG_SAVE) and (not Save ()) )
            return CM_CANCEL;
        end;
    End;

    Macro Run
        Var sql = ExecSqlSelect ("select t_shifr, t_always, t_storekind from user_eadev where t_id=:id", MakeArray (SqlParam ("id", RecId)), false);
        if ( sql.MoveNext () )
            if ( sql.value ("t_always") == "X" )
                this.("check1") = "X";
            else
                this.("check2") = "X";
            end;
            this.("shifr") = sql.value ("t_shifr");
            if ( sql.value ("t_storekind") == 0 )
                this.("storekind") = "Бумажное";
            else
                this.("storekind") = "Электронное";
            end;
        end;
        this.("Code") = code;
        this.("Name") = name;
        Copy (PrevBuf, this);
        return RunDialog (this, R2M (this, "Handler"));
    End;
End;
//-----------------------------------------------------------------------------------------

// список кодов ДЭВ
Private class CFormsSetup
    Macro Handler ( rs, cmd, id, key )
        if ( (cmd == DLG_KEY) and (key == kbEnter) )
            if ( rs.value ("t_kind") == 0 )
                CPDSetup (rs.value ("t_id"), rs.value ("t_code"), rs.value ("t_name")).Run ();
            end;
            return CM_IGNORE;

        elif ( (cmd == DLG_KEY) and (key == kbF5) )
            if ( rs.value ("t_kind") == 0 )
                CPrimdocList (rs.value ("t_id"), rs.value ("t_storekind")).List ();
            end;
        // Rogl add 15.04
        elif ( (cmd == DLG_KEY) and (key == kbF6) )
             CPackList ().List ();
        elif ( (cmd == DLG_INREC) )
            if ( rs.value ("t_kind") == 0 )
                // Rogl modify 15.04
                Message ("Enter Настройка  F5 Первичные документы   F6 пачки   ESC Выход");
            else
                Message ("Enter Настройка  ESC Выход");
            end;
        end;
    End;

    Macro List
        Var rs = ExecSqlSelect ("select decode (t_kind, 0, 'ПД', 1, 'Отчет') kind, t_kind, t_code, t_name, t_id, t_storekind from user_eadev order by t_id", NULL, NULL, RSDVAL_CLIENT, RSDVAL_STATIC);

        // Rogl modify 15.04
        return RunScroll (rs, 3, MakeArray ("kind", "Тип", 6, 0, 6, 0, "t_code", "Код", 10, 0, 10, 0, "t_name", "Описание", 60, 0, 60, 0),
                          null, R2M (this, "Handler"), "Список видов ДЭВ", "Enter Настройка   F5 Первичные документы   F6 пачки ESC Выход",
                          true, 0, 0);
    End;
End;
//-----------------------------------------------------------------------------------------

// Диалог корректировки настроек
Private class (TrecHandler) CSetupEdit
    
    // 2012-02-09 zip_z. >
    // Var PrevBuf = TRecHandler ("setup", "ea.lbr", true);
    // InitTRecHandler ("setup", "ea.lbr", true);
    Var PrevBuf = TRecHandler ("setup", getResourceLibPath (), true);
    InitTRecHandler ("setup", getResourceLibPath (), true);
    // < 2012-02-09 zip_z.
    
    Macro IsChange
        Var x = 0;
        while ( x < FldNumber () )
            if ( PrevBuf.(x) != this.(x) )
                return true;
            end;
            x = x + 1;
        end;
        return false;
    End;

    Macro Save
        return Setup.Save (this.("AbsCode"), this.("Version"), this.("MaxCount"), this.("Arhiv"), this.("OutPath"), this.("InPath"), this.("ReportPath"), this.("ArhPath"), this.("LogPath"));
    End; 

    Macro Handler ( dlg, cmd, id, key )
        if ( (cmd == DLG_KEY) and (key == kbF5) )
            CFormsSetup.List ();
        elif ( (cmd == DLG_KEY) and (key == kbF3) and (StrLen (FldName (id))-Index (FldName (id), "Path") == 3) )
            SelectFolder (dlg.(id));
        elif ( (cmd == DLG_KEY) and (key == kbF3) and (id == FldIndex ("Version")) )
            key = menu (Versions, null, null, 41, 9);
            if ( key >= 0 )
                dlg.(id) = Versions (key);
            end;
        elif ( (cmd == DLG_KEY) and (key == kbESC) and IsChange () )
            key = MsgBoxEx ("Запись изменена, обновить?", MB_YES+MB_NO+MB_CANCEL);
            if ( key == IND_YES )
                return CM_SAVE;
            elif ( key == IND_CANCEL )
                return CM_IGNORE;
            end;
        elif ( (cmd == DLG_SAVE) and (not Save ()) )
            return CM_CANCEL;
        end;
    End;

    Macro Run
        this.("AbsCode")    = Setup.AbsCode;
        this.("Version")    = Setup.AbsVersion;
        this.("MaxCount")   = Setup.MaxCountDEV;
        this.("Arhiv")      = Setup.ArhivCount;
        this.("OutPath")    = Setup.OutPath;
        this.("InPath")     = Setup.InPath;
        this.("ReportPath") = Setup.ReportPath;
        this.("ArhPath")    = Setup.ArhPath;
        this.("LogPath")    = Setup.LogPath;
        Copy (PrevBuf, this);
        return RunDialog (this, R2M (this, "Handler"));
    End;
End;
//-----------------------------------------------------------------------------------------

CSetupEdit.Run ();