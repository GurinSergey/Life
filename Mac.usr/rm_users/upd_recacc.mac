import rsd, FIInter;

const EUR = 45, USD = 41;

private macro ПроверитьВалютныйСчет(acnt, cur)

var SQL, cmd, rs;

SQL = "SELECT * FROM daccount$_dbt WHERE t_account = ? AND t_chapter = 1 AND t_code_currency = ?";

cmd = RsdCommand(SQL);
cmd.AddParam("acnt", RSDBP_IN, acnt);
cmd.AddParam("cur", RSDBP_IN, cur);
cmd.Execute();

rs = RsdRecordSet(cmd);
 
  if(rs.MoveNext())
    return true;
  end;

return false;

end;



private macro НайтиВалютныйТранзитныйСчет(blnc, clnt, cur)

var SQL, cmd, rs;

SQL = "SELECT t_account as account FROM daccount$_dbt WHERE t_balance = ? AND t_chapter = 1 AND t_code_currency = ? AND instr(t_type_account,'Y') != 0 AND t_client = ?";

cmd = RsdCommand(SQL);
cmd.AddParam("blnc", RSDBP_IN, blnc);
cmd.AddParam("cur",  RSDBP_IN, cur );
cmd.AddParam("clnt", RSDBP_IN, clnt);
cmd.Execute();

rs = RsdRecordSet(cmd);
 
  if(rs.MoveNext())
    return rs.Value("account");
  end;

return "";

end;



private macro ПодставитьСчет(acnt, paym, fiid, ratedef)

var cmd;
var course = ratedef.rate / ratedef.scale / pow(10, ratedef.point);

cmd = RSDCommand("update dpmpaym_dbt " + 
                 "   set t_futurereceiveraccount = ? " +
                 "       t_receiveraccount = ? " +
                 "       t_payfiid = ? " +
                 "       t_fiid_futurerecacc = ? " +
                 "       t_payamount = round(t_payamount * ?,2), " +
                 "       t_futurereceiveramount = round(t_futurereceiveramount * ?,2), " +
                 "       t_rate = ?, " +
                 "       t_baserate = ?, " +
                 "       t_scale = ?, " +
                 "       t_basescale = ?, " +
                 "       t_point = ?, " +
                 "       t_basepoint = ?, " +
                 "       t_ratedate = ?, " +
                 " where t_paymentid = ?");


cmd.addparam("", RSDBP_IN, acnt);
cmd.addparam("", RSDBP_IN, acnt);
cmd.addparam("", RSDBP_IN, fiid);
cmd.addparam("", RSDBP_IN, fiid);
cmd.addparam("", RSDBP_IN, course);
cmd.addparam("", RSDBP_IN, course);
cmd.addparam("", RSDBP_IN, ratedef.rate);
cmd.addparam("", RSDBP_IN, ratedef.rate);
cmd.addparam("", RSDBP_IN, ratedef.scale);
cmd.addparam("", RSDBP_IN, ratedef.scale);
cmd.addparam("", RSDBP_IN, ratedef.point);
cmd.addparam("", RSDBP_IN, ratedef.point);
cmd.addparam("", RSDBP_IN, {curdate});

cmd.addparam("paym", RSDBP_IN, paym);
cmd.execute();

  return true;

OnError

  return false;

end;


/* ------------------------------- Основная процедура ------------------------------------------------------ */
macro СменитьСчетВПлатеже(paym, acnt, clnt)

var SQL, cmd, rs;

var blnc = substr(acnt,1,5);
var cur =  substr(acnt,6,3);
var fiid, code, acnt2;

var ratedef = TRecHandler("ratedef.dbt");

SQL = "SELECT t_fiid FROM dfininstr_dbt WHERE t_fi_code = ? AND t_fi_kind = 1";  /* Получим FIID валюты счета */

cmd = RsdCommand(SQL);
cmd.AddParam("cur", RSDBP_IN, cur);
cmd.Execute();

rs = RsdRecordSet(cmd);

  if(rs.MoveNext())
    fiid = rs.Value(0);
  else
    MsgBox("Не найдена валюта счета " + acnt);
    return false;
  end;

  if(ПроверитьВалютныйСчет(acnt, fiid))  /* Проверим наличие л/с получателя, указанного в исходном платеже */
    return true;
  end;

  /* Счет не существует, подставляем счет в другой валюте */
  /* Преобразование валют - если изначально указан счет в 840, подставляем 978, и наоборот */
  if  (fiid == USD)
       fiid =  EUR;
       if(ПолучитьКурс(ratedef, fiid, USD, 7) == 0);
          ПолучитьЗначениеКурса(ratedef, {curdate});
       end;
  elif(fiid == EUR)
       fiid =  USD;
       if(ПолучитьКурс(rate, fiid, EUR, 7) == 0);
          ПолучитьЗначениеКурса(ratedef, {curdate});
       end;
  else
    MsgBox("Не определена валюта для конвертации");
    return false;
  end;


acnt2 = НайтиВалютныйТранзитныйСчет(blnc, clnt, fiid);

  if(strlen(acnt2) == 0)
    MsgBox("Не удалось найти счет в другой валюте для подстановки");
    return false;
  end;

  if(not(ПодставитьСчет(acnt2, paym, fiid, ratedef)))
    MsgBox("Не удалось заменить счет, указанный в платеже, на счет в другой валюте");
    return false;
  end;

return true;

end;
