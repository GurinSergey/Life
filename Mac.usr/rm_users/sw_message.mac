//--------------------------------------------------------------------------------------------------
// @desc: Привязка SWIFT-сообщений к платежам RS-Bank через примечание #151
// @changes: 2011-06-15 zip_z. - первоначальная реализация
//      2011-07-05 zip_z. - реализован парсер нового формата файла платежа
//      2012-12-20 zip_z. - C-16228
//      2013-02-25 zip_z. - I-00329006
//--------------------------------------------------------------------------------------------------


import BankInter;
import rsexts;
import rcw;
import oralib, likepy;
import treport;

const CONST_REGISTRY_PATH = "PRBB/MESSWIFTPATH";

var work_directory_path;
var work_directory_mask = "/*.*";
var work_directory_list;

var full_file_path;
var errCode;

var answer;

const SW_FTYPE_20      = 1;
const SW_FTYPE_32A_DATE   = 2;
const SW_FTYPE_32A_CURRENCY = 3;
const SW_FTYPE_32A_AMOUNT  = 4;
const SW_FTYPE_50K_CUSTOMER = 5;
const SW_FTYPE_RECEIVERCODE = 6;

class SWIFTFieldContainer ()
    var m_trn      = null;
    var m_reference   = null;
    var m_date_value  = null;  
    var m_fiid     = null;
    var m_code_currency = null;
    var m_amount    = null;
    var m_payeraccount = null;
    var m_receivercode = null;
    var m_paymentid   = null;
    var m_receivername = null;    
end;

class SWIFTLinkLogContainer ( _num, _refer, _referpaym, _amount, _fiid, _receiveraccount, _valuedate, _receiver, _bankcode, _islinked )
    var m_num            = _num;
    var m_refer           = _refer;
    var m_referpaym       = _referpaym;
    var m_amount          = _amount;
    var m_fiid            = _fiid;
    var m_receiveraccount = _receiveraccount;
    var m_valuedate       = _valuedate;
    var m_receiver        = _receiver;
    var m_bankcode        = _bankcode;
    var m_islinked        = _islinked;
    
    macro append ( )
        var sql = "insert into usr_swlink_report_tmp (num, refer, referpaym, amount, fiid, receiveraccount, valuedate, receiver, bankcode, islinked) "
            " values  (:m_num, :m_refer, :m_referpaym, :m_amount, :m_fiid, :m_receiveraccount, :m_valuedate, :m_receiver, :m_bankcode, :m_islinked)";
        var param = MakeArray (SQLParam ("m_num",             this.m_num             ),
                               SQLParam ("m_refer",           this.m_refer           ),
                               SQLParam ("m_referpaym",       this.m_referpaym       ),
                               SQLParam ("m_amount",          this.m_amount          ),
                               SQLParam ("m_fiid",            this.m_fiid            ),
                               SQLParam ("m_receiveraccount", this.m_receiveraccount ),
                               SQLParam ("m_valuedate",       this.m_valuedate       ),
                               SQLParam ("m_receiver",        this.m_receiver        ),
                               SQLParam ("m_bankcode",        this.m_bankcode        ),
                               SQLParam ("m_islinked",        this.m_islinked        ));
        ExecSQL (sql, param, false);
    end;

end;



macro GetReport ()
    var {curdate};

    [###############################################################################################################################################################################################################################################################################

    #####################################################################################################
    ] (
    string ("Обработка исходящих SWIFT-сообщений за дату ", {curdate}):c, string ("Привязанные SWIFT-сообщения к документам"):l);
    
    var sql = "with report as ( select  count (1) dup, "
        "              rep.refer, "
        "              rep.referpaym, "
        "              rep.amount, "
        "              rep.fiid, "
        "              rep.receiveraccount, "
        "              rep.valuedate, "
        "              rep.receiver, "
        "              rep.bankcode "
        "          from  usr_swlink_report_tmp rep "
        "          where  rep.islinked = chr (88) "
        "        group by  rep.refer, rep.referpaym, rep.amount, rep.fiid, rep.receiveraccount, rep.valuedate, rep.receiver, rep.bankcode) "
        "select  to_char (rownum) as num, r.* from  report r";
    sql = ExecSQLSelect (sql, null, false);
    
    var i;
    var report_has_data = false;
    // if (sql.moveNext)
    //   sql.movePrev ();

    var table = CTableReport();
    table.addColumn ("Номер",        5, AL_LEFT);
    table.addColumn ("Референс|Payments",  20, AL_LEFT);
    table.addColumn ("Референс|RS-Bank",   20, AL_LEFT);
    table.addColumn ("Сумма",        20, AL_LEFT);
    table.addColumn ("Валюта",        5, AL_LEFT);
    table.addColumn ("БИК банка|получателя", 12, AL_LEFT);
    table.addColumn ("Счет получателя",   22, AL_LEFT);
    table.addColumn ("Дата|валютирования",  12, AL_LEFT);
    table.addColumn ("Получатель",      40, AL_LEFT);

    table.printHead();

    while (sql.moveNext)
        report_has_data = true;
        if ((i = sql.value ("dup")) > 1)
        while (i > 1)
            table.printStringTransferByWord (int (sql.value ("num")), sql.value ("referpaym"), sql.value ("refer"), sql.value ("amount"), sql.value ("fiid"), sql.value ("bankcode"), sql.value ("receiveraccount"), date (sql.value ("valuedate")), sql.value ("receiver") );
            i = i - 1;
        end;

        else
        table.printStringTransferByWord (sql.value ("num"), sql.value ("referpaym"), sql.value ("refer"), sql.value ("amount"), sql.value ("fiid"), sql.value ("bankcode"), sql.value ("receiveraccount"), date (sql.value ("valuedate")), sql.value ("receiver") );
        end;
    end;
    
    table.printBottom();

    if (report_has_data)
        [
        
        Итого: ##############
    
        ] (sql.value ("num"));
    else
        [ Привязанные сообщения отсутствуют
        
        Итого: 0
    
        ];


    end;

    [
    ####################################################################################################
    ] (string ("SWIFT-сообщения без привязки "):l);
    
    table = sql = report_has_data = null;

    sql = execSQLSelect ("select to_char (rownum) as num, referpaym, amount, fiid, receiveraccount, valuedate, bankcode from usr_swlink_report_tmp where islinked != chr (88)");

    table = CTableReport ();

    table.addColumn ("Номер",        5, AL_LEFT);
    table.addColumn ("Референс|Payments",  20, AL_LEFT);
    table.addColumn ("Сумма",        20, AL_LEFT);
    table.addColumn ("Валюта",        5, AL_LEFT);
    table.addColumn ("Счет получателя",   22, AL_LEFT);
    table.addColumn ("Дата|валютирования",  12, AL_LEFT);
    table.addColumn ("БИК банка|получателя", 12, AL_LEFT);

    table.printHead ();

    while (sql.MoveNext ())
        report_has_data = true;
        table.printStringTransferByWord (sql.value ("num"), sql.value ("referpaym"), sql.value ("amount"), sql.value ("fiid"), sql.value ("receiveraccount"), date (sql.value ("valuedate")), sql.value ("bankcode"));
    end;
    
    table.printBottom();

    if (report_Has_Data)
    [ 
        Итого: ############## ] (sql.value ("num"));
    else

    [ SWIFT-сообщения без привязки отсутствуют.
        Итого: 0 ];
    end;

    
    

onError end;

macro noteExists (paymentID)
    var sql = ExecSQLSelect ("select 1 from dnotetext_dbt where t_objecttype = 501 and t_notekind = 151 and t_documentid = lpad (to_char (:paymentid), 10, '0')", MakeArray (SQLParam ("paymentid", paymentID)));
    return sql.moveNext ();
end;


macro SW_FindPaymentAndInsertNotetext (obj, notetext)
    var sql = "select rm.t_paymentID, upper (rm.t_receivername) as t_receivername "
         " from dpmpaym_dbt pm, dpmrmprop_dbt rm "
         " where pm.t_paymentID = rm.t_paymentID "
         "   and pm.t_payfiid = :m_payfiid "
         "   and pm.t_amount = :m_amount "
         "   and pm.t_valuedate = :m_valuedate "
         "   and t_payeraccount = :m_payeraccount";
    var paymentID;

    sql = ExecSQLSelect (sql, MakeArray (
                     SQLParam ("m_payfiid", obj.m_code_currency),
                     SQLParam ("m_amount", obj.m_amount),
                     SQLParam ("m_valuedate", obj.m_date_value),
                     SQLParam ("m_payeraccount", obj.m_payeraccount)
                    ));
    
    
    if (not sql.moveNext)
        return false;
    else
        obj.m_paymentid = paymentID = sql.value ("t_paymentid");
        obj.m_receivername = sql.value ("t_receivername");
    end;
    
    if (answer == false) // заменять существующие примечания
        sql = " merge into  dnotetext_dbt nt"
              "    using  (  select  1 from dual) tmp"
              "      on  (  nt.t_objecttype = 501 and nt.t_documentid = lpad (to_char (:m_paymentid1), 10, '0')"
              "         and nt.t_notekind = 151 and nt.t_validtodate = to_date ('31.12.9999', 'dd.mm.yyyy'))"
              "  when matched then update set nt.t_text = utl_raw.cast_to_raw (:m_notetext1), nt.t_oper = rsbsessiondata.oper, nt.t_branch = rsbsessiondata.operdprt"
              "  when not matched then insert (nt.t_id, nt.t_objecttype, nt.t_documentid, nt.t_notekind,"
              "                 nt.t_oper, nt.t_date, nt.t_time, nt.t_text, nt.t_validtodate,"
              "                 nt.t_branch, nt.t_numsession)"
              "     values  (0, 501, lpad (to_char (:m_paymentid2), 10, '0'), 151,"
              "          rsbsessiondata.oper, sysdate, sysdate, utl_raw.cast_to_raw (:m_notetext2), to_date ('31.12.9999', 'dd.mm.yyyy'),"
              "          rsbsessiondata.operdprt, 0)";
    
        if (null == ExecSQL (sql, MakeArray (SQLParam ("m_paymentid1", paymentID), 
                                             SQLParam ("m_notetext1", notetext),
                                             SQLParam ("m_paymentid2", paymentID), 
                                             SQLParam ("m_notetext2", notetext)), true))
            return false;
        end;
    
    else // оставлять существующие примечания
        if (noteExists (paymentID))
            return true;
        else
            sql = "insert into dnotetext_dbt nt (nt.t_id, nt.t_objecttype, nt.t_documentid, nt.t_notekind, nt.t_oper, nt.t_date, nt.t_time, nt.t_text, "
                  "               nt.t_validtodate, nt.t_branch, nt.t_numsession) "
                  " values  (0, 501, lpad (to_char (:m_paymentid), 10, '0'), 151, rsbsessiondata.oper, sysdate, sysdate, utl_raw.cast_to_raw (:m_notetext),"
                  "      to_date ('31.12.9999', 'dd.mm.yyyy'), rsbsessiondata.operdprt, 0)";
            if (null == ExecSQL (sql, MakeArray (SQLParam ("m_paymentid", paymentID), SQLParam ("m_notetext", notetext))))
               return false;
            end;
        end;
    end;

    return true;
end;

macro SW_Parse (c_str, ftype)
    var retval = "";
    var sql;
    if   (ftype == SW_FTYPE_20)
        retval = trim (c_str);
    elif (ftype == SW_FTYPE_32A_DATE)
        retval = date (trim (substr (c_str, strbrk (c_str, "0123456789"))));
    elif (ftype == SW_FTYPE_32A_CURRENCY)
        retval = trim (substr (trim (substr (c_str, 1 + index (c_str, ":"))), 1, index (c_str, " "))); 
        if (StrLen (retval) != 3) // другой алгоритм для другого формата файла
            retval = trim (substr (c_str, index (c_str, ":")+2, 3));
        end;
    elif (ftype == SW_FTYPE_32A_AMOUNT)
        retval = money (strsubst ((trim (substr(substr (c_str, strbrk (c_str, "0123456789")), 1, index (substr (c_str, strbrk (c_str, "0123456789")), " ")))), ",", "."));
    elif (ftype == SW_FTYPE_50K_CUSTOMER)
        retval = trim (substr (c_str, 1 + index (c_str, "/")));
    elif (ftype == SW_FTYPE_RECEIVERCODE)
        retval = substr (trim (substr (c_str, index (c_str, ":") + 1)), 1, 8);
    end;
    return retval;
end;

macro SW_ReadFile (path:string)
    file f_pointer () txt;
    open (f_pointer, path);

    var obj = SWIFTFieldContainer ();
    var actionLog;
    var SWIFTMessage = ""; 
    var sql;
    
    var p_islinked = "";
    var p_receivername = "";
    
    var retval = true;
    while (next (f_pointer))
        if (index (f_pointer.str, "To  ") or index (f_pointer.str, "Receiver "))
            obj.m_receivercode = SW_Parse (f_pointer.str, SW_FTYPE_RECEIVERCODE);
     
        // имя поля может быть с пробелом внутри, а может и без...
        elif (index (f_pointer.str, "20 :") or index (f_pointer.str, "20:")) 
            next (f_pointer);
            obj.m_reference = SW_Parse (f_pointer.str, SW_FTYPE_20);
            obj.m_trn = substr (obj.m_reference, 2);
     
        elif (index (f_pointer.str, "32A:"))
            next (f_pointer);
            obj.m_date_value = SW_Parse (f_pointer.str, SW_FTYPE_32A_DATE); 
            
            next (f_pointer);
            obj.m_fiid = SW_Parse (f_pointer.str, SW_FTYPE_32A_CURRENCY);
            
            if (obj.m_fiid == "RUB") obj.m_fiid == "RUR"; end; 
            
            sql = "select t_fiid from dfininstr_dbt where t_ccy = :fi_code and t_fi_kind = 1";
            sql = ExecSQLSelect (sql, MakeArray (SQLParam ("fi_code", obj.m_fiid)));
            
            if (sql.moveNext ())
                obj.m_code_currency = sql.value ("t_fiid");
            else
                obj.m_code_currency = -1;
            end;
            
            next (f_pointer);
            obj.m_amount = SW_Parse (f_pointer.str, SW_FTYPE_32A_AMOUNT); 
    
        elif (index (f_pointer.str, "50K:"))
            next (f_pointer);
            obj.m_payeraccount = SW_Parse (f_pointer.str, SW_FTYPE_50K_CUSTOMER);
            break; // оптимизация :)
        end;

    end;
    
    // ежели все поля объекта заполнены (т.е. текстовое SWIFT-сообщение из Payments валидное)
    if ( (obj.m_date_value  != null) and (obj.m_fiid != null) and (obj.m_code_currency != null) and (obj.m_amount  != null) and (obj.m_payeraccount != null) )
        rewind (f_pointer);
        // формируем сообщение для вставки в примечание
        while (next (f_pointer))
            SWIFTMessage = SWIFTMessage + f_pointer.str + "\n";
        end;
        // ежели длина не превышает максимально допустимой для вставки в RAW (1500) и найдена привязка - всё хорошо
        retval = ((strlen (SWIFTMessage) < 1500) and (SW_FindPaymentAndInsertNotetext (obj, SWIFTMessage)));
        if (retval) // выводим в лог
            p_islinked = "X";
            p_receivername = obj.m_receivername;
        else
            p_islinked = "";
            p_receivername = "";
        end;
        actionLog = SWIFTLinkLogContainer (0, obj.m_trn, obj.m_reference, obj.m_amount, obj.m_fiid, obj.m_payeraccount, obj.m_date_value, p_receivername, obj.m_receivercode, p_islinked);
        actionLog.append ();
    else
        retval = false;
    end;
    close (f_pointer);
    return retval;
end; 

// -------------------------------------------------------------------------------------------------
// Начало работы
// -------------------------------------------------------------------------------------------------
if ((GetRegistryValue ( CONST_REGISTRY_PATH, V_STRING, work_directory_path, errCode )) and ( not errCode) )
    ExecSQL ("delete usr_swlink_report_tmp", null);
    GetTrue (answer, "Оставить существующие примечания?");

    work_directory_list = TDirList (string (work_directory_path, work_directory_mask), "f");
    work_directory_list.sort (0);
    var work_directory_filecounter = 0;
    
    var i;
    for (i, 0, work_directory_list.count - 1)
        // full_file_path = string (work_directory_path, "\\", work_directory_list.name (i));
        // I-00329006
        full_file_path = mergeFile (work_directory_path, work_directory_list.name (i));
        Message ("обрабатывается файл " + (i+1) + " из " + work_directory_list.count + " -> " + work_directory_list.name (i)); // 
        if (SW_ReadFile (full_file_path))
            if (not removeFile (full_file_path))
                msgbox ("Невозможно удалить файл", full_file_path, "Проверьте наличие прав на запись в каталог", work_directory_path);
            end;
        end;
    end;
    
    GetReport ();
    ExecSQL ("delete usr_swlink_report_tmp", null);

else
    msgbox ("Не удалось получить значение настройки " + CONST_REGISTRY_PATH + 
        "|Проверьте параметры реестра настроек банка!");
    exit (1);
end;

