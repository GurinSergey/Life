/************************************************************************/
/*         Автоматизированная банковская система RS-Bank V6             */
/*                 Copyright (c) R-Style Software Lab                   */
/*                                                                      */
/*  Имя файла      : prpmboi.mac                                        */
/*                                                                      */
/*  Описание       : Печатная форма банковского ордера по 2360-У        */
/*                                                                      */
/*  Программист    : Смирнов С.В.                                       */
/*                                                                      */
/*  Создан         : 04.01.10                                           */
/*                                                                      */
/************************************************************************/

import FIInter, PaymInter, prpm, oralib, prnlib, pmcarfun;
import gnd120p; //SDA 05.02.2012 C-8518
import "cbRepFun.mac", "MoCommon.mac"; // KS 16.11.2010 I-080113 При распечатке на банковском ордере нет штампа

const NOT_PRINT_AMOUNT = -$1;
const NOT_PRINT_FIID = -1;

private const PRINT_BY_PAYMENT  = 0;
private const PRINT_BY_CARRY    = 1;
private const SET_CHAR = "X";

var pr_document:TRecHandler = TRecHandler("acctrn.dbt", "bank.def");

/* --------------------------------------------
   Получение полного наименования клиента счёта
   -------------------------------------------- */
//PRIVATE MACRO GetClientFullName( Chapter:integer, FIID:integer, Account:string ):string
PRIVATE MACRO GetClientFullName( Chapter:integer, Account:string ):string

  var query:string = 
  "select pt.t_Name "
    "from daccount_dbt ac, "
         "dparty_dbt pt "
   "where ac.t_Chapter = :Chapter "
     //"and ac.t_Code_Currency = :FIID "
     "and ac.t_Account = :Account "
     "and pt.t_PartyID = ac.t_Client";

  var params:TArray = TArray();
  params.value( 0 ) = SQLParam( "Chapter", Chapter );
  //params.value( 1 ) = SQLParam( "FIID"   , FIID    );
  params.value( 1 ) = SQLParam( "Account", Account );

  var rs:RsdRecordset = execSQLselect( query, params );

  if( rs.moveNext() )
    return rs.value(0);
  else
    return "";
  end;

END;

// Получить атрибуты связанного с проводкой платежа
PRIVATE MACRO GetPaymentAttrByCarry(acctrnid, Priority:@integer, PayerName:@string, ReceiverName:@string)

  var select = "select rm.t_Priority, rm.t_PayerName, rm.t_ReceiverName "
               "from dpmdocs_dbt  pd, dpmrmprop_dbt rm "
                 "where PD.T_ACCTRNID = :acctrnid "
                 "and rm.t_PaymentID = pd.t_PaymentID ";

  var params:TArray = makeArray( SQLParam( "acctrnid", acctrnid ));

  var rs:RsdRecordset = execSQLselect( select, params );

  if( rs.moveNext() )
    Priority = rs.value(0);
    PayerName      = rs.value(1);
    ReceiverName   = rs.value(2);
  else
    Priority = 0;
    PayerName      = "";
    ReceiverName   = "";
  end;
    
  var stat = 0, RegValue;
  if(not Priority and (V_INTEGER == GetRegistryValue( "CB\\PAYMENTS\\MAXPRIORITY", V_INTEGER, RegValue, stat ) and (stat == 0)))
    Priority = RegValue;
  elif(not Priority)
    Priority = 6;
  end;
  
  SetParm( 3, Priority     );
  SetParm( 4, PayerName    );
  SetParm( 5, ReceiverName );
END;

// Класс списка ПИ
/*PRIVATE CLASS (TArray)TPIList(_Side)
  var IsAddPI : bool = false, // ПИ разноски?
        Side  : integer = _Side;
END;*/
/* -----------------------------------------------------------
   Структура данных печатной формы.
   Нужна, чтобы отвязаться от структуры платежа на случай, 
   если понадобится печать проводки в форме банковского ордера.
   ----------------------------------------------------------- */

PRIVATE CLASS TBankOrderPrintData

  PRIVATE CLASS TPayInstruction
    var ClientName : string,
        Account    : string,
        Amount     : money,
        FIID       : integer;
  END;

  var Number       : string,
      DocumentDate : date,
      BaseAmount   : money,
      BaseFIID     : integer,
      ShifrOper    : string,
      Priority     : integer,
      DebetPIList  : TArray,
      CreditPIList : TArray,
      Ground       : string,
      TypeDocument     : string,
      PayAmount        : money, 
      Amount           : money, 
      FIID             : integer,
      PayFIID          : integer,
      IsDebrazn        : bool,
      IsCredrazn    : bool, 
      PrintType        : integer,
      PaymentId        : integer,
      MinimizationTurn : string,
      I2_Date      : date, //SDA 05.02.2012 C-8518
      Oper         : integer; // KS 12.12.2011 I-00131545

  /* -----------------------------------
     Проинициализировать данными платежа
     ----------------------------------- */
  MACRO InitByPayment( pmpaym:TRecHandler, pmrmprop:TRecHandler )

    PaymentId    = pmpaym.rec.PaymentId;
    Number       = pmrmprop.rec.Number;
    DocumentDate = pmrmprop.rec.Date;
    BaseAmount   = pmpaym.rec.BaseAmount;
    BaseFIID     = pmpaym.rec.BaseFIID;
    ShifrOper    = pmrmprop.rec.ShifrOper;
    Priority     = pmrmprop.rec.Priority;
    Ground       = pmrmprop.rec.Ground;
    TypeDocument = pmpaym.rec.TypeDocument;
    PayAmount    = pmpaym.rec.PayAmount; 
    Amount       = pmpaym.rec.Amount;
    FIID         = pmpaym.rec.FIID;
    PayFIID      = pmpaym.rec.PayFIID;
    IsDebrazn    = false;
    IsCredrazn   = false;
    MinimizationTurn = pmpaym.rec.MinimizationTurn;
    PrintType    = PRINT_BY_PAYMENT;

    I2_Date      = pmpaym.rec.I2PlaceDate; //SDA 05.02.2012 C-8518
    Oper         = pmpaym.rec.Oper; // KS 12.12.2011 I-00131545

    if( not ShifrOper )
      ShifrOper = "17";
    end;
    if( not Priority )
      Priority = 6;
    end;
    if( not BaseAmount )
      if( pmpaym.rec.IsFixAmount and ( pmpaym.rec.FIID == pmpaym.rec.BaseFIID ) )
        BaseAmount = pmpaym.rec.Amount;
      elif( ( not pmpaym.rec.IsFixAmount ) and ( pmpaym.rec.PayFIID == pmpaym.rec.BaseFIID ) )
        BaseAmount = pmpaym.rec.PayAmount;
      end;
    end;
  
    /* Заполнение счетов и сумм по дебету и кредиту.
       Если счёт задан в платеже, оттуда и берём.
       Иначе считаем, что есть разноска. */

    MACRO FillPIList( PIList:TArray, payment:RsbPayment, side:integer )
      var pmaddpi:TRecHandler = TRecHandler( "pmaddpi.dbt" );
      var pi:TPayInstruction;
      var stat:integer = payment.PIList( side ).First();
      while( not stat )
        stat = payment.PIList( side ).Current( pmaddpi );
        if( not stat )
          pi = TPayInstruction();
          pi.Account    = pmaddpi.rec.Account;
          pi.Amount     = pmaddpi.rec.Amount;
          pi.FIID       = pmaddpi.rec.FIID;
          //pi.ClientName = GetClientFullName( payment.Chapter, pi.FIID, pi.Account );
          pi.ClientName = GetClientFullName( payment.Chapter, pi.Account );
          PIList.value( PIList.size ) = pi;
          stat = payment.PIList( side ).Next();
        end;
      end;
      if (side == PRT_Debet)
        IsDebrazn = true; 
      elif (side == PRT_Credit)
        IsCredrazn = true; 
      end;
    END;
    
    var pi:TPayInstruction,
        payment:RsbPayment;

    DebetPIList = TArray;
    if( pmpaym.rec.PayerAccount )
      pi = TPayInstruction();
      pi.Account    = pmpaym.rec.PayerAccount;
      pi.Amount     = pmpaym.rec.Amount;
      pi.FIID       = pmpaym.rec.FIID;
      //pi.ClientName = GetClientFullName( pmpaym.rec.Chapter, pi.FIID, pi.Account );
      pi.ClientName = GetClientFullName( pmpaym.rec.Chapter, pi.Account );
      DebetPIList.value(0) = pi;
    else
      payment = RsbPayment( pmpaym.rec.PaymentID );
      FillPIList( DebetPIList, payment, PRT_Debet );
    end;

    CreditPIList = TArray;
    if( pmpaym.rec.ReceiverAccount )
      pi = TPayInstruction();
      pi.Account    = pmpaym.rec.ReceiverAccount;
      //Gurin S. 12.03.2014 I-00471670-2 Сделал как было в 20.30
      if(pmpaym.rec.FIID == pmpaym.rec.PayFIID)
        pi.Amount = NOT_PRINT_AMOUNT;
        //pi.FIID   = NOT_PRINT_FIID;
      else
        pi.Amount = pmpaym.rec.PayAmount;
        //pi.FIID       = pmpaym.rec.PayFIID;
      end;
      pi.FIID       = pmpaym.rec.PayFIID;
      //pi.ClientName = GetClientFullName( pmpaym.rec.Chapter, pi.FIID, pi.Account );
      pi.ClientName = GetClientFullName( pmpaym.rec.Chapter, pi.Account );
      CreditPIList.value(0) = pi;
    else
      if( payment == NULL )
        payment = RsbPayment( pmpaym.rec.PaymentID );
      end;
      FillPIList( CreditPIList, payment, PRT_Credit );
    end;
  
  END;
  
  /* -----------------------------------
     Проинициализировать данными проводки
     ----------------------------------- */
  MACRO InitByCarry( document:TRecHandler )
  
    private var _Priority     =  0,
                PayerName     = "",
                ReceiverName  = "";
    GetPaymentAttrByCarry(document.rec.AccTrnID, @_Priority, @PayerName, @ReceiverName);

    Number       = document.rec.Numb_Document;
    DocumentDate = document.rec.Date_Carry;
    BaseAmount   = document.rec.Sum_Payer;
    BaseFIID     = document.rec.FIID_Payer;
    ShifrOper    = "17";
    Ground       = document.rec.Ground;
    Priority     = _Priority;
    TypeDocument = document.rec.TypeDocument;
    Amount       = document.rec.Sum_Payer;
    FIID         = document.rec.FIID_Payer;
    PrintType    = PRINT_BY_CARRY;
    Oper         = document.rec.Oper; // KS 12.12.2011 I-00131545
    
    var pi:TPayInstruction;
    
    pi = TPayInstruction();
    pi.Account    = document.rec.Account_Payer;
    pi.Amount     = document.rec.Sum_Payer;
    pi.FIID       = document.rec.FIID_Payer;
    debugbreak;
    //Gurin S. 05.05.2014 I-00484767-2 --2031
    //pi.ClientName = GetClientFullName( document.rec.Chapter, document.rec.Code_Currency, document.rec.Account_Payer );
    pi.ClientName = GetClientFullName( document.rec.Chapter, document.rec.Account_Payer );
    DebetPIList = TArray;
    DebetPIList.value(0) = pi;

    pi = TPayInstruction();
    pi.Account    = document.rec.Account_Receiver;
    pi.Amount     = IfThenElse( document.rec.FIID_Payer == document.rec.FIID_Receiver, NOT_PRINT_AMOUNT, document.rec.Sum_Receiver );
    pi.FIID       = IfThenElse( ( ( document.rec.FIID_Receiver == 0/*NATCUR*/ ) or 
                                  ( document.rec.FIID_Payer    == document.rec.FIID_Receiver ) ), NOT_PRINT_FIID, document.rec.FIID_Receiver );
    //pi.ClientName = GetClientFullName( document.rec.Chapter, document.rec.Code_Currency, document.rec.Account_Receiver );
    pi.ClientName = GetClientFullName( document.rec.Chapter, document.rec.Account_Receiver );
   
    PayAmount = document.rec.Sum_Receiver;
    PayFIID   = document.rec.FIID_Receiver;
    CreditPIList  = TArray;
    CreditPIList.value(0) = pi;

  END;

END;

/* -----------------------------------------------
   Непосредственно печать по подготовленным данным
   ----------------------------------------------- */

PRIVATE MACRO DoPrintBankOrder( data:TBankOrderPrintData, ncopy:integer ):bool

  private macro GetSumNatCur(TrnId:integer):money
    var sqlString, rs, cmd, Summ;
    sqlString = " select acctrn.t_Sum_NatCur from dacctrn_dbt acctrn where acctrn.t_AcctrnId = " + TrnId;
    cmd = RSDCommand( sqlString );
    rs = RsdRecordset( cmd );
    if( rs AND rs.moveNext() )
      Summ  = rs.value(0);
    end;
    return Summ;
  end;

  private macro PrintSumSubEq(data:TBankOrderPrintData):bool                                                             
    var stat = 0, RegValue;
    GetRegistryValue( "COMMON\\ПЕЧАТЬ\\ОРДЕР\\ВЫВОДИТЬ_ЭКВИВАЛЕНТ", V_BOOL, RegValue, stat ); 
    if(RegValue)
      if ((data.PrintType == PRINT_BY_PAYMENT) and (data.FIID != data.PayFIID))
        return true;
      elif ((data.PrintType == PRINT_BY_CARRY) and (data.FIID != NATCUR))
        return true;
      else
        return false;
      end;
    else
      return false;
    end;    
  end;

  MACRO PrintPayInstructions( PIList:TArray )
    array aClientName;
    var i:integer = 0, j:integer, nrows:integer = 0, fiCode:string, Amount:string;

    while( i < PIList.size )
      asize( aClientName, 0 );
      StrSplit( PIList.value( i ).ClientName, aClientName, 37, 37, 1 );
      if( (PIList.value( i ).FIID == NATCUR) or (PIList.value( i ).FIID == NOT_PRINT_FIID))
        fiCode = "";
      else
        fiCode = GetFICode( PIList.value( i ).FIID, null, FICK_ISONUMBER );
      end;
      if(PIList.value( i ).Amount == NOT_PRINT_AMOUNT)
        Amount = "";
      else
        Amount = string(PIList.value( i ).Amount:f);
      end;
      [#####################################│ ####################### │#################│ ###]
      ( aClientName( 0 ):l,
        PIList.value( i ).Account:f,
        Amount:r,
        fiCode );
      j = 1;
      while( j < asize( aClientName ) )
        [#####################################│                         │                 │    ]
        ( aClientName( j ):l );
        j = j + 1;
      end;
      nrows = nrows + asize( aClientName );
      i = i + 1;
    end;

    while( nrows < 4 )
      [                                     │                         │                 │    ];
      nrows = nrows + 1;
    end;

  END;

  var l_date = DL_DateToStr(data.DocumentDate); // KS 16.11.2010 Дата прописью. локальная переменная. I-080113
  var l_oper = GetOperName(data.Oper); // KS 16.11.2010 Операционист. локальная переменная. I-080113
  
  array aBaseAmount, aGround, RubEq;

  var val;
  var i:integer = 0, stat;
  var SameFIID:bool = false;
  var tempsum:money =$0;
  var SummRub:money = $0;
  var Sum1,Sum2:money = $0;
  var isDigit = false;
  var tmp: string;

  if( ( GetRegistryValue( "COMMON\\ПЕЧАТЬ\\ОРДЕР\\ДРОБНАЯ_ЧАСТЬ_ЦИФРАМИ", V_BOOL, isDigit, stat ) == V_INTEGER ) and 
      ( stat == 0 ) )
    isDigit = FALSE;
  end;
  
  if (data.IsDebrazn)                                     
    while (i < data.DebetPIList.size-1)
      if (data.DebetPIList[i].FIID == data.DebetPIList[i+1].FIID)
        SameFIID = true;  
      else
        SameFIID = false;
        break;
      end;
      i= i + 1; 
    end;
    i = 0;
    if (SameFIID)        
      while (i < data.DebetPIList.size)
        tempsum = tempsum + data.DebetPIList[i].Amount;
      i = i + 1;
      end;
      val = data.DebetPIList[0].FIID;
    elif (not SameFIID)
      tempsum = data.PayAmount;
      val = data.PayFIID;
    end;
  else
    tempsum = data.Amount;
    val = data.FIID;
  end;

  tmp = CurToStrAlt( tempsum, null, null, int(GetFICode(val, null, FICK_ISONUMBER )));
  if((not isDigit) and (tempsum == int(tempsum)))
    tmp = substr(tmp, 1, index(tmp, " 00"));
  end;
  StrSplit( tmp, aBaseAmount, 67, 67, 3 );

  if (PrintSumSubEq(data))
    if (data.PrintType == PRINT_BY_CARRY)
      ConvSum( SummRub, tempsum, data.DocumentDate, val, NATCUR );
    elif(data.PrintType == PRINT_BY_PAYMENT)
      var carries : TArray;
      var carry   : TPaymentCarryInfo;
      carries = PM_GetAllCarries( data.PaymentId, 1 ); /*CHAPT1*/              
      if( carries.size )
        i = 0;
        tempsum = 0;
        while (i < carries.size)                   
          carry = carries[i];
          tempsum = tempsum + GetSumNatCur(carry.ACCTRNID);
          i = i + 1;
        end;
        SummRub = tempsum;
      else

        if ((data.FIID != data.PayFIID) and (data.FIID !=NATCUR) and (data.PayFIID != NATCUR))
          ConvSum( Sum1, data.Amount, data.DocumentDate, data.FIID, NATCUR );
          ConvSum( Sum2, data.PayAmount, data.DocumentDate, data.PayFIID, NATCUR );    
          SummRub = min(Sum1, Sum2);

        elif ((data.FIID == data.PayFIID) and (data.FIID !=NATCUR) and (data.PayFIID != NATCUR)) 
          ConvSum( SummRub, data.Amount, data.DocumentDate, data.FIID, NATCUR );

        elif ((data.FIID != data.PayFIID) and (data.FIID == NATCUR))
          if (data.MinimizationTurn == SET_CHAR)
            ConvSum( Sum1, data.PayAmount, data.DocumentDate, data.PayFIID, NATCUR );
            SummRub = min(Sum1, data.Amount);
          else
            SummRub = data.Amount;
          end;

        elif ((data.FIID != data.PayFIID) and (data.PayFIID == NATCUR))
          if (data.MinimizationTurn == SET_CHAR)
            ConvSum( Sum1, data.Amount, data.DocumentDate, data.FIID, NATCUR );
            SummRub = min(Sum1,data.PayAmount);
          else
            SummRub = data.PayAmount;
          end;
        elif (data.IsDebetrazn) 
          tempsum = 0;
          Sum1 = 0;
          while (i < data.DebetPIList.size)
            ConvSum( Sum1, data.DebetPIList[i].Amount, data.DocumentDate, data.DebetPIList[i].FIID, NATCUR );
            tempsum = tempsum + Sum1;
            i = i + 1;
          end;
          SummRub = tempsum;
        elif (data.IsCredrazn)
          tempsum = 0;
          Sum1 = 0;
          while (i < data.CreditPIList.size)
            ConvSum( Sum1, data.CreditPIList[i].Amount, data.DocumentDate, data.CreditPIList[i].FIID, NATCUR );
            tempsum = tempsum + Sum1;
            i = i + 1;
          end;
          SummRub = tempsum;          
        end;
      end;   
    end;
    tmp = RubToStrAlt(SummRub, NULL, NULL);
    if((not isDigit) and (SummRub == int(SummRub)))
      tmp = substr(tmp, 1, index(tmp, " 00"));
    end;
    StrSplit(tmp, RubEq, 63, 63, 2);
  else
    StrSplit(" ", RubEq, 63, 63, 2);    
  end;

  StrSplit( data.Ground, aGround, 63, 63, 8 );

  while( ncopy > 0 )

    [                                                                                      ┌─────────┐
                                                                                           │ 0401067 │
                                                                                           └─────────┘
        ############## БАНКОВСКИЙ ОРДЕР № ###############      ##########
                                                          ────────────────────────
                                                                   Дата

     ──────────┬─────────────────────────────────────────────────────────────────────┬──────────┬─────
     Сумма     │ ################################################################### │Вид оп.   │  ##
     прописью  │ ################################################################### ├──────────┼─────
               │ ################################################################### │Очер.плат.│  ##
     ──────────┴──────────────────────────┬─────────────────────────┬────────────────┴──────────┴─────
               Плательщик                 │          Счет №         │               Сумма             
                                          │                         │
     ─────────────────────────────────────┼─────────────────────────┼─────────────────┬───────────────]
    ( IfThenElse( IsCORRECTING( data.TypeDocument ), "ИСПРАВИТЕЛЬНЫЙ", "              " ),
      data.Number:l, data.DocumentDate:f,
      aBaseAmount( 0 ):l, data.ShifrOper,
      aBaseAmount( 1 ):l,
      aBaseAmount( 2 ):l, data.Priority:l );

    PrintPayInstructions( data.DebetPIList );
    
    [─────────────────────────────────────┼─────────────────────────┤                 │
               Получатель                 │          Счет №         │                 │
                                          │                         │                 │
     ─────────────────────────────────────┼─────────────────────────┤                 │];

    PrintPayInstructions( data.CreditPIList );
    
    [─────────────────────────────────────┴─────────────────────────┼─────────────────┴───────────────
                           Назначение платежа                       │
                                                                    │
     ───────────────────────────────────────────────────────────────┼─────────────────────────────────
     ###############################################################│           Отметки банка         
     ###############################################################│
     ###############################################################│
     ###############################################################│
     ###############################################################│
     ###############################################################│
     ###############################################################│
     ###############################################################│
     ───────────────────────────────────────────────────────────────┤             подписи             
     ###############################################################│
     ###############################################################│
                                                                    │]
    ( aGround( 0 ), 
      aGround( 1 ), 
      aGround( 2 ), 
      aGround( 3 ), 
      aGround( 4 ), 
      aGround( 5 ), 
      aGround( 6 ), 
      aGround( 7 ),
      RubEq( 0 ),          
      RubEq( 1 ) );


  if ((data.I2_Date == date(0,0,0)) or (valtype(data.paymentID) == v_undef)) //если на картотеке не был или печатают от проводки в главной книге

    [───────────────────────────────────────────────────────────────┤             подписи             
                                                                    │
                                                                    │
                                                                    │];


// KS 16.11.2010 Штампики подписи по заявке I-080113
    [
                           ┌───────────────────────────────────────────────────────┐
                           │ ########################################## ПРОВЕДЕНО  │
                           │ ############################  ####################### │
                           └───────────────────────────────────────────────────────┘]
    ({Name_Bank}:c,l_oper,l_date:r);


    // EVG 13/03/2014 Это пришло к нам в виде каммента неизвестного лица. Открыл обратно по просьбе Елены Ш.
    // KS 14.02.2012 Штамп только тогда когда шаг контроля есть

    /* EVG 13/03/2014 Банковские ордера вообще-то не особо контролируются, поэтому я убрал эту проверку.
       Если всё-таки окажется необходимо проверять наличие шага контроля (и БО с контролем найдутся),
       то нужно раскомментить.

    var select, params, rs;
    select = " select st.t_Symbol " +
             "   from doproper_dbt op, doprstep_dbt st" +
             "  where op.t_DocKind      = :DocKind " +
             "    and op.t_DocumentID   = LPAD(:DocumentID, 34, '0') " +
             "    and st.t_ID_Operation = op.t_ID_Operation " +
             "    and st.t_IsExecute    = 'X' " +
             "    and st.t_Symbol       = 'К' " ;

    params = makeArray( SQLParam( "DocKind"   , 286/*data.DocKind*/   ),
                        SQLParam( "DocumentID", data.PaymentID ));
       
    rs = execSQLselect( select, params, false );

    if( rs and rs.moveNext() )
    */

      [                      ┌───────────────────────────────────────────────────────┐
                             │#######################################################│       
                             │                                     ОТКОНТРОЛИРОВАНО  │
                             │                               ####################### │
                             └───────────────────────────────────────────────────────┘] /*SDA добавил разрыв страницы для возможности массовой печати */
      ({Name_Bank}:c,l_date:r);
    // EVG 13/03/2014 end;
    // KS end


//SDA 05.02.2012 C-8518
// в случае, если банковскому ордеру довелось побывать на картотеке
  else //(data.I2_Date != date(0,0,0))

 var partPayList  :TPartPayList; //SDA 05.02.2012 C-8518
     partPayList  = TPartPayList(data.paymentID);

   [────────┬────────────┬────────────┬──────────────┬─────────────┼──────────    Дата помещения
      N ч.  │   N плат.  │  Дата      │  Сумма       │   Сумма     │ Подпись      в картотеку   
      плат. │   ордера   │  плат.     │  частичного  │   остатка   │              ##########    
            │            │  ордера    │  платежа     │   платежа   │              
    ────────┼────────────┼────────────┼──────────────┼─────────────┼────────── ](data.I2_Date);
      i = 0;
      while(i < partPayList.size)
        [  ##### │ ########## │ ########## │ ############ │ ########### │]
        ( partPayList.Value(i).SubPurp:l, 
          partPayList.Value(i).Number:l, 
          partPayList.Value(i).PayDate:f:c,
          partPayList.Value(i).Amount:l:f,
          partPayList.Value(i).Rest:l:f );
        i=i+1;
      end;
      if( partPayList.size )
        [ ───────┴────────────┴────────────┴──────────────┴─────────────┴──────────
        ];
      end;
  end; //SDA 05.02.2012 C-8518


    if ((ncopy > 1) or (IsOprMultiExec()))
       [];
    end;

    ncopy = ncopy - 1;

  end;

  return true;

END;

/* ----------------------------------------------------------------------
   Вызов печати банковского ордера из других макросов.
   ---------------------------------------------------------------------- */
MACRO PrintBankOrder( ncopy:integer ):bool

  var isPrintEOF:bool;               // Печать символа окончания листа
  if( not GetParm( 1, isPrintEOF ) ) // по умолчанию печатать надо
    isPrintEOF = true;
  end;        
  var stat = 0;
  var data:TBankOrderPrintData = TBankOrderPrintData();
  
  if(pr_document.rec.AccTrnID > 0)
    data.InitByCarry( pr_document );
  elif(pr_pmpaym.rec.PaymentID > 0) 
    data.InitByPayment( pr_pmpaym, pr_pmrmprop );
  end;
  if( pr_PrintEA )
    PrintEAHeader();
  end;

  stat = DoPrintBankOrder( data, ncopy );
  if( isPrintEOF )
    PrintEOF();
  end;
  return stat;
END;
