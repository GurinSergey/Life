//-----------------------------------------------------------------------------
// Блок     : 29014  - "Предобработка платежа банка"
//            29015  - "Предобработка требования банка"
//            29016  - "Предобработка клиентского платежа"
//            29017  - "Предобработка кассового документа"
//            29018  - "Предобработка мемориального документа"
// Шаг      : 60(50) - "Проверка остатков по счетам"
// Описание : Общие функции
// KS 25.11.2013 Адаптация под 31ю сборку
//-----------------------------------------------------------------------------
import pm_common, pm_setst, "cbsttls.mac";

CONST PAYMERR_NORESERVCREDIT = 5;

PRIVATE MACRO IsSFOrigin( Payment:RsbPayment ):bool
  var obj:object = NULL;
  
  IF( ( Payment.DocKind == DLDOC_BANKPAYMENT ) or ( Payment.DocKind == DLDOC_BANKCLAIM ) )
    IF( Payment.DocKind == DLDOC_BANKPAYMENT )
      obj = GenObject( "RsbBankPayment", Payment.DocumentID );
    ELSE
      obj = GenObject( "RsbBankClaim", Payment.DocumentID );
    END;
    return (obj.Origin == MEMORDER_FDOC_SF);
  
  ELIF( Payment.DocKind == BBANK_CPORDER )
    obj = GenObject( "RsbBbCpOrder", Payment.DocumentID );
    return (obj.Origin == CP_OR_SF);
  END;

  return false;
end;

// Проверка на порожденность от клиентского платежа
MACRO ПорожденКлиентскимПлатежом(DocumentID:integer)
  var Query: string = " SELECT * "+
                      " FROM doprdocs_dbt d , doproper_dbt o "+
                      " WHERE d.t_DocKind = : DocKind AND "+
                      "       d.t_DocumentID = : DocumentID AND "+
                      "       d.t_ID_Operation = o.t_ID_Operation AND "+
                      "       o.t_DocKind = : DocKindOper ",
      params: TArray = makeArray( SQLParam( "DocKind"    , CASH_PS_OUTORDER),
                                  SQLParam( "DocumentID" , string( DocumentID:34:o ) ),
                                  SQLParam( "DocKindOper", PS_PAYORDER     ));

  return existsSQLselect( Query, params );
END;

// ----------------------------------------------------------------------------
// На ручную обработку
// ----------------------------------------------------------------------------
macro PM_ToManual( Payment:RsbPayment, note_text:string ):integer

  if( УстановитьСтатусыПлатежа( OPR_PAYM_MANUAL, OPR_PAYM_ST_MANUAL_NEED, OPR_PAYM_DO, OPR_PM_ST_ENTER ) )
    msgbox("Ошибка при установке сегментов статуса экземпляра операции");
    return 1;
  end;
  if( note_text != "" ) // Заполнить примечание
    if( Payment.Notes.AddNote( PM_NOTEKIND_DENIALGROUND, note_text ) != 0 )
      msgbox( "Ошибка при вставке примечания платежа" );
      return 1;
    end;
  end;

  return 0;
end;

//Отвергнуть документ с заполнением примечания причины отказа
macro RejectPayment(Payment:RsbPayment, NoteText)
  
  Payment.PaymStatus = PM_REJECTED;
  PM_SetPrimDocumentState( Payment, DOCUMENT_ST_REJECTED );

  if( УстановитьСтатусыПлатежа( OPR_PAYM_STATE, OPR_PM_ST_REJECT ) )
    msgbox("Ошибка при установке сегментов статуса экземпляра операции");
    return 1;
  end;

  // Заполнить примечание
  if( Payment.Notes.AddNote( PM_NOTEKIND_DENIALGROUND, NoteText ) != 0 )
    msgbox( "Ошибка при вставке примечания платежа" );
    return 1;
  end;
  return 0;
end;

//-----------------------------------------------------------------------------
// Формирование сообщения о отсутствии свободного остатка
//-----------------------------------------------------------------------------
MACRO ErrFreeAmount( Payment:RsbPayment, acclaim:TRecHandler ):string                                      
  if( acclaim.rec.ClaimId )                                                                                
    if( acclaim.rec.RestKind == 1 )                                                                        
      return "На счет плательщика " + Payment.PayerAccount + " наложен полный арест";                      
    else                                                                                                   
      return "На счет плательщика " + Payment.PayerAccount + " наложен частичный арест";                   
    end;                                                                                                   
  else                                                                                                     
    if(IsSFOrigin(Payment))                                                                                
      return "Недостаточно средств на счете плательщика " + Payment.PayerAccount + " для оплаты комиссии"; 
    else                                                                                                   
      return "Недостаточно средств на счете плательщика " + Payment.PayerAccount;                          
    end;                                                                                                   
  end;                                                                                                     
END;

//-----------------------------------------------------------------------------
// Предупредить об отсутсвии средств на корсчете ЛОРО
//-----------------------------------------------------------------------------
private macro GetActionErrFreeAmountLORO( Payment:RsbPayment ):integer

  Array Text;
  Array Buttons;

  var DialogFlag = TSetDialogFlag(1);

  var result:integer = GetCachedVar( "StageLORO_BBANKPAYMENT" + string( Payment.PayerAccount ) );
  if( ValType( result ) == V_UNDEF )

    Text(0) = "На корреспондентском счете ЛОРО " + Payment.PayerAccount + " недостаточно средств. Поместить документ в очередь к корсчету ЛОРО?";
    
    Buttons(0) = "В очередь";
    Buttons(1) = "Отвергнуть";

    result = ConfWin( Text, Buttons );

    if( IsOprMultiExec() )
      SetCachedVar( "StageLORO_BBANKPAYMENT" + string( Payment.PayerAccount ), result );
    end;
  end;

  return result;
end;

macro CheckReceiverAccount(Account, FIID, Amount, ValueDate)
  
  var  KindAccount,
       TypeAccount,
       PairAccount;
    
  var rs:RsdRecordset,
      Query: string = " SELECT d.t_Kind_Account, d.t_Type_Account, d.t_PairAccount "+
                  " FROM daccount_dbt d "+
                  " WHERE d.t_Account       = :Account "+                       
                  "   AND d.t_Chapter       = :Chapter "+                 
                  "   AND d.t_Code_Currency = :FIID    ",

              
  params: TArray = makeArray( SQLParam( "Account" , Account ),
                              SQLParam( "Chapter" , CHAPT1  ),
                              SQLParam( "FIID"    , FIID    ));
                                  
  rs = execSQLselect( Query, params , true  );
  if( rs.MoveNext() and rs )

    params = makeArray( SQLParam( "p_Amount"         , Amount    ),
                      SQLParam( "p_ReceiverAccount", Account   ),
                      SQLParam( "p_Chapter"        , CHAPT1    ),
                      SQLParam( "p_FIID"           , FIID      ),
                      SQLParam( "p_Date"           , ValueDate ),
                      SQLParam( "p_TypeAcc"        , rs.Value(1) ),
                      SQLParam( "p_Kind_Account"   , rs.Value(0) ),
                      SQLParam( "p_PairAccount"    , rs.Value(2) )
                    );

    if(execStoredFunc( "PM_RESTFUN.CheckRestForAccountCredit", V_INTEGER, params ) > 0)
      return false;
    end;   
  end;   
  return true;
end;


macro GetFreeAmountWithOver( Payment)

  var RestDebetFact;
/*  var RestDebetFact = AccGetFreeAmount( Payment.PayerAccount, CHAPT1, Payment.PayerFIID, Payment.Priority, Payment.ClaimID, {curdate} );*/
/*SDA */
  AccGetFreeAmount( RestDebetFact, null, Payment.PayerAccount, CHAPT1, Payment.PayerFIID, {curdate}, Payment.Priority, Payment.ClaimID); /* с учетом претензий */

  var cmd, rs, RestDebet;

// KS 25.11.2013 Адаптация под 31ю сборку
//  if (Payment.PayerFIID != 0)
//     cmd = RSDCommand("select t_planrest, t_type_account, t_limit from daccount$_dbt where t_chapter = 1 and t_code_currency = ? and t_account = ?");
     cmd = RSDCommand("select rsi_rsb_account.planrestac(t_account,t_code_currency,?,t_chapter) t_planrest, " + "\n" +
                      "       t_type_account, " + "\n" +
                      "       rsi_rsb_account.GetAccLimit(t_account,t_chapter,t_code_currency,?) t_limit " + "\n" +
                      "  from daccount_dbt where t_chapter = 1 and t_code_currency = ? and t_account = ?");
     cmd.addparam("restdate", RSDBP_IN, {curdate});
     cmd.addparam("bankdate", RSDBP_IN, {curdate});
     cmd.addparam("fiid"    , RSDBP_IN, Payment.PayerFIID);
     cmd.addparam("acc"     , RSDBP_IN, Payment.PayerAccount);
/*
  else
     cmd = RSDCommand("select t_planrest, t_type_account, t_limit from daccount_dbt where t_chapter = 1 and t_account = ?");
     cmd.addparam("acc", RSDBP_IN, Payment.PayerAccount);
  end;
*/

  rs = RSDRecordset(cmd);
  rs.MoveNext();
  RestDebet = money(rs.value(0));

  if (RestDebetFact < RestDebet)
     RestDebet = RestDebetFact; //возвращаем наименьший остаток
  end;

  if (index(rs.value("t_type_account"), "О")!=0)
     RestDebet = RestDebet + rs.value("t_limit");
  end;

  /* EVG 18/03/2014 Нужно округлять, т.к. особенности представления числовых типов данных 
     (2073.96999999999900000000 < 2073.97000000000000000000)
  return RestDebet;*/
  return round( RestDebet, 2 );

end;

//-----------------------------------------------------------------------------
// Общие проверки остатков по счетам
//-----------------------------------------------------------------------------
MACRO PM_CheckAccRestCommon( Payment:RsbPayment ):integer

  var DocKind:integer = Payment.DocKind;
  var RestDebet;
  var RestCredit;
  var Rest;
  var obj:object;
  var stat:integer = 0;
  var acclaim :TRecHandler = TRecHandler( "acclaim.dbt" );
  var CheckILORO = true;
  var DialogFlag;

  if( ( Payment.DocKind == DLDOC_BANKPAYMENT ) or ( Payment.DocKind == BBANK_CPORDER ) )
    if( СчетПассивный( Payment.PayerAccount, CHAPT1, Payment.PayerFIID ) and 
        ( not ЕстьПарныйСчет( Payment.PayerAccount, CHAPT1, Payment.PayerFIID ) ) )
      //Seleznev включил возможность пользоваться овердрафтом
      //RestDebet = AccGetFreeAmount( Payment.PayerAccount, CHAPT1, Payment.PayerFIID, Payment.Priority, Payment.ClaimID, {curdate}, acclaim );
      RestDebet = GetFreeAmountWithOver( Payment);
//      if( RestDebet < Payment.FuturePayerAmount )
      if( RestDebet < Payment.PayerAmount )
        msgbox( ErrFreeAmount( Payment, acclaim ) );
        return 1;
      end;
    end;

    //Gurin S. 09.02.2015 R-541020-2 Учитываем овердрафт
    RestDebet = GetFreeAmountWithOver(Payment);
    if (not(RestDebet > Payment.PayerAmount))
       if( not CheckReceiverAccount( Payment.FutureReceiverAccount, Payment.FutureReceiverFIID, Payment.FutureReceiverAmount, Payment.ValueDate ) )
          return PAYMERR_NORESERVCREDIT;
       end;
    end;

  elif( Payment.DocKind == DLDOC_BANKCLAIM )
    if( ( not ПлатежВнешний( Payment ) ) and СчетПассивный( Payment.PayerAccount, CHAPT1, Payment.PayerFIID ) and
        ( not ЕстьПарныйСчет( Payment.PayerAccount, CHAPT1, Payment.PayerFIID ) ) )
      if( stat = CheckRestAndMakeReserve(Payment, true, true, true, true, GetOprStatus(OPR_PAYM_PERMISSION), NULL, true) )
        return stat;
      end;
    end;
  
    if( not CheckReceiverAccount( Payment.FutureReceiverAccount, Payment.FutureReceiverFIID, Payment.FutureReceiverAmount, Payment.ValueDate ) )
      return PAYMERR_NORESERVCREDIT;
    end;

  elif( ( Payment.DocKind == PS_PAYORDER ) or ( Payment.DocKind == PS_CPORDER ) or ( Payment.DocKind == PS_INRQ ) )
  
    if( Payment.PrimDocKind != DOC_BO_PAYMENT )
       if( not ОбслуживаетсяКлиент( ОпределитьРеальногоПлательщика( Payment ), PTSK_PAY ) )
         msgbox("Счет плательщика не принадлежит клиенту. Ошибка выбора операции");
         return 1;
       end;
    end;

    /* EVG Проверка отменена по просьбе банка.
    if( СчетАктивный( Payment.PayerAccount, CHAPT1, Payment.PayerFIID ) or
        ЕстьПарныйСчет( Payment.PayerAccount, CHAPT1, Payment.PayerFIID ) )
      msgbox( "Счет не принадлежит клиенту" );
      return 1;
    end;*/

  elif( ( Payment.DocKind == CASH_BOF_ADDORDER ) or
        ( Payment.DocKind == CASH_PS_INCORDER  ) or
        ( Payment.DocKind == CASH_PS_OUTORDER  ) or
        ( Payment.DocKind == CASH_BOF_INCORDER ) or
        ( Payment.DocKind == CASH_BOF_OUTORDER ) )
  
  
  elif( /*( Payment.DocKind == DLDOC_MEMORIALORDER ) or*/ ( Payment.DocKind == CB_MULTYDOC) )

    if( Payment.DocKind == DLDOC_MEMORIALORDER )
      obj = GenObject( "RsbMemorialOrder", Payment.DocumentID );
    elif( Payment.DocKind == CB_MULTYDOC )
      obj = GenObject( "RsbMultyDoc", Payment.DocumentID );
    end;
    
    if( СчетПассивный( Payment.PayerAccount, obj.Chapter, Payment.PayerFIID ) and 
        ( not ЕстьПарныйСчет( Payment.PayerAccount, obj.Chapter, Payment.PayerFIID ) ) )
      //Seleznev включил возможность пользоваться овердрафтом
      //RestDebet = AccGetFreeAmount( Payment.PayerAccount, obj.Chapter, Payment.PayerFIID, Payment.Priority, Payment.ClaimID, {curdate} );
      RestDebet = GetFreeAmountWithOver(Payment);
      if( RestDebet < Payment.FuturePayerAmount )
        msgbox( "Недостаточно средств для списания" );
        return 1;
      end;
    end;

    if( СчетАктивный( Payment.FutureReceiverAccount, obj.Chapter, Payment.FutureReceiverFIID ) and
        ( ( Payment.ToBackOffice == "" ) or ( Payment.NotForBackOffice == "X" ) ))  
      if( not CheckReceiverAccount( Payment.FutureReceiverAccount, Payment.FutureReceiverFIID, Payment.FutureReceiverAmount, Payment.ValueDate ) )
        return PAYMERR_NORESERVCREDIT;
      end;
    end;
  end;

  return 0;
END;
