import PaymInter, OprInter, FIInter, SFInter, oralib, likepy, cbctuncs, pm_tools, sfgetcat, InsCarryDoc;
// KS 03.12.2013 Перенос пользовательских доработок в 31ю сборку
/* EVG */
import cb_sql;

//Возможные исходы событий
private const PMSF_ACTION_OK    :integer = 0, //Ok
              PMSF_ACTION_ERROR :integer = 1; //Возникла ошибка

macro PayBenFromCorr():bool
  var PayBenFromCorr:bool = false;
  var err:integer = 0;

  GetRegistryValue( "PS\\CPORDER\\ORDER\\PAYBENFROMCORR", V_BOOL, PayBenFromCorr, err );
  if( err != 0 )
    msgbox(" Ошибка чтения настройки PS\\CPORDER\\ORDER\\PAYBENFROMCORR ");
    return false;
  end;

  return PayBenFromCorr;
end;


/* EVG */
macro SelectSI( pFeeType, pFeeNumber, pFIID, outAccount:@string )
   var SQL, rs;

   SQL =       "SELECT sett.t_account ";
   SQL = SQL + "  FROM dsettacc_dbt sett, dsfssi_dbt si ";
   SQL = SQL + " WHERE si.t_objecttype = " + OBJTYPE_SFCOMISS;
   SQL = SQL + "   AND si.t_objectid = LPAD (" + GetSQLString(pFeeType) + ", 5, '0') || ";
   SQL = SQL + "                       LPAD (" + GetSQLString(pFeeNumber) + ", 5, '0') ";
   SQL = SQL + "   AND si.t_fikind = 1 ";
   SQL = SQL + "   AND si.t_fiid = " + pFIID;
   SQL = SQL + "   AND sett.t_settaccid = si.t_setaccid ";
   rs = rsdRecordSet(SQL);
   if (rs and rs.MoveNext())
      outAccount = rs.value(0, null, V_STRING);
      return true;
   end;

   return false;
end;

//-----------------------------------------------------------------------------
// Оплата комиссии типа BEN (комиссии передаются первым параметром)
//-----------------------------------------------------------------------------
macro PayCommisArrayBEN( OprComList:TArray, PaymentObj:RsbPayment, CommisPayerAccount:string, CommisPayerFIID:integer )
  //file oprcom( "oprsfcom.dbt" );
  file contr( "sfcontr.dbt") key 0;
  file sfcomiss( "sfcomiss.dbt" );
  // для обработки единовременных
  var sicredit = TRecHandler("sfsi.dbt");
  var siNDS    = TRecHandler("sfsi.dbt");

  var NewTaxSum, NewNDSSum, СуммаДебета, deltaBaseAmount, delta, Department:integer;
  var i:integer = 0;
  RECORD oprcom( oprsfcom );
  var CarryKind = GetPaymentCarryKind( PaymentObj );
  var PayerChargeOffSum = $0;// сумма списания со счета плательщика

  /* EVG */
  var ComisReceiverAccount,
      CommisReceiverFIID;
 
  while( i < OprComList.Size )

    Copy(oprcom, OprComList[i]);

    /* EVG В принципе, сумма здесь не может быть нулевой, но ещё одна проверка - не повредит, т.к. из-за нулевой 
       суммы лезут непонятные пользователям ошибки. */
    if (oprcom.Sum > $0)
       
       NewTaxSum = oprcom.Sum; 
       NewNDSSum = oprcom.SumNDS;
       Department = -1;

       // Найти договор обслуживания, заданный oprcom.SfContrID    
       contr.ID = oprcom.SfContrID;
       if( not getEQ( contr ) )
         MsgBox("Не найден договор обслуживания: ", oprcom.SfContrID);
         return PMSF_ACTION_ERROR;
       end;

       // Найти комиссию sfcomiss, заданную oprcom.FeeType и oprcom.CommNumber
       sfcomiss.feeType = oprcom.FeeType;
       sfcomiss.number = oprcom.CommNumber;
       if( not getEQ( sfcomiss ) )
         MsgBox("Не найдена комиссия");
         return PMSF_ACTION_ERROR;
       end;

       // Вид создаваемых платежных инструкций ПЗО
       var kindSfSiCredit = IfThenElse( oprcom.IsIncluded == "X", CALC_SFSI_KIND   , COMISS_SFSI_KIND ); 
       var kindSfSiNDS    = IfThenElse( oprcom.IsIncluded == "X", CALCNDS_SFSI_KIND, NDS_SFSI_KIND    );

       // Получить платежные инструкции
       if( ( not GetDefComSfSi( oprcom.feeType, oprcom.ID, kindSfSiCredit, "", NULL, NULL, NULL, sicredit ) ) or
           ( oprcom.SumNDS != 0 and 
             not GetDefComSfSi( oprcom.feeType, oprcom.ID, kindSfSiNDS   , "", NULL, NULL, NULL, siNDS    ) ) )
         MsgBox("Ошибка при взятии платежных инструкций");
         return PMSF_ACTION_ERROR;
       end;

       // Проверить наличие валюты в sicredit
       if( sicredit.rec.FIID < 0 )
         msgbox("Не задана валюта в ПИ ПЗО");
         return PMSF_ACTION_ERROR;
       end;

       if( (sicredit.rec.Account == "") or
           (not AccountExistOpen(sicredit.rec.FIID, sicredit.rec.Account, 1/*CHAPT1*/, Department)) 
         )
         msgbox("Не задан получатель в ПИ ПЗО");
         return PMSF_ACTION_ERROR;
       end;
       
       // проверить, чтобы получатель ПЗО находился в нашем банке (в филиале pmpaym.Department);
       if( Department != PaymentObj.Department )
         msgbox("При оплате комиссий проводками счет получателя комиссий должен быть в нашем банке");
         return PMSF_ACTION_ERROR;
       end;


       /* EVG Если в СПИ получателя комиссии (доходов) оказался счёт в иной валюте, чем валюта платежа,
          попробуем найти СПИ получателя в валюте платежа. */
       ComisReceiverAccount = sicredit.rec.Account;
       CommisReceiverFIID   = sicredit.rec.FIID;
       if ( sicredit.rec.FIID != PaymentObj.BaseFIID )
          if ( SelectSI( sfcomiss.feeType, sfcomiss.number, PaymentObj.BaseFIID, @ComisReceiverAccount ) )
             CommisReceiverFIID = PaymentObj.BaseFIID;
          end;
       end;

       
       /* EVG 
       if( oprcom.FIID_Sum != sicredit.rec.FIID )
         if( ConvSum(NewTaxSum, oprcom.Sum, PaymentObj.ValueDate, oprcom.FIID_Sum, sicredit.rec.FIID) )
       */
       if( oprcom.FIID_Sum != CommisReceiverFIID )
         if( ConvSum(NewTaxSum, oprcom.Sum, PaymentObj.ValueDate, oprcom.FIID_Sum, CommisReceiverFIID) )
           msgbox("Невозможно конвертировать сумму комиссии");
           return PMSF_ACTION_ERROR;
         end;
         if( oprcom.SumNDS > 0 )
           if( ConvSum( NewNDSSum, oprcom.SumNDS, PaymentObj.ValueDate, oprcom.FIID_Sum, siNDS.FIID ) )
             msgbox("Невозможно конвертировать сумму НДС");
             return PMSF_ACTION_ERROR;
           end;
         end;
       end;


       // Сформировать проводку (возможно, мультивалютную) оплаты комиссии
       var accTrn:object = PaymentObj.MakeTransaction();

       if( accTrn == NULL )
         msgbox("Ошибка при создании проводки оплаты комиссии");
         return PMSF_ACTION_ERROR;
       end;

    accTrn.Chapter       = PaymentObj.Chapter;    
    accTrn.Ground        = "Комиссия за перевод платежного поручения №" + PaymentObj.Number + " от " + PaymentObj.Date + ".";
    accTrn.Date_Carry    = PaymentObj.ValueDate;
    accTrn.Department    = PaymentObj.Department;
    accTrn.ResultCarry   = SFPAY_CARRY;

       accTrn.FIIDPayer     = CommisPayerFIID;
       accTrn.AccountPayer  = CommisPayerAccount;

    if( ConvSum(СуммаДебета, oprcom.Sum, PaymentObj.ValueDate, oprcom.FIID_Sum, accTrn.FIIDPayer) )
         msgbox("Невозможно конвертировать сумму комиссии");
         return PMSF_ACTION_ERROR;
       end;

       accTrn.SumPayer         = СуммаДебета;
       
       /* EVG
       accTrn.AccountReceiver  = sicredit.rec.Account;
       accTrn.FIIDReceiver     = sicredit.rec.FIID;*/
       accTrn.AccountReceiver  = ComisReceiverAccount;
       accTrn.FIIDReceiver     = CommisReceiverFIID;

       accTrn.SumReceiver      = NewTaxSum;
    accTrn.ClaimID          = GetClaimID( PaymentObj, accTrn.AccountPayer, accTrn.Chapter, accTrn.FIIDPayer );
    accTrn.Status_After     = CarryKind;

    PayerChargeOffSum = PayerChargeOffSum + accTrn.SumPayer;

       if( not accTrn.Carry )
         msgbox("Ошибка при актуализации проводки|оплаты комиссии за перевод");
         return PMSF_ACTION_ERROR;
       end;

       // Уменьшить сумму платежа на сумму комиссии
    if( oprcom.FIID_Sum != PaymentObj.BaseFIID )
      if( ConvSum(deltaBaseAmount, oprcom.Sum, PaymentObj.ValueDate, oprcom.FIID_Sum, PaymentObj.BaseFIID) )
           msgbox("Невозможно конвертировать сумму комиссии");
           return PMSF_ACTION_ERROR;
         end;
         PaymentObj.FutureBaseAmount = PaymentObj.FutureBaseAmount - deltaBaseAmount;
         PaymentObj.ActuateFutureAmounts( TBA_AMOUNT );
       else
      PaymentObj.FutureBaseAmount = PaymentObj.FutureBaseAmount - oprcom.Sum;
      PaymentObj.ActuateFutureAmounts( TBA_AMOUNT );
      deltaBaseAmount = oprcom.Sum;
       end;

    end;  // if (oprcom.Sum > $0)

    if( NewNDSSum != 0 )
      var accNDSTrn:object = PaymentObj.MakeTransaction();

      if( accNDSTrn == NULL )
        msgbox("Ошибка при создании проводки по переводу НДС");
        return PMSF_ACTION_ERROR;
      end;

      // НДС по комиссии за перевод 
      accNDSTrn.Chapter       = PaymentObj.Chapter;
      accNDSTrn.Ground        = "НДС по комиссии за перевод платежного поручения №" + PaymentObj.Number + " от " + PaymentObj.Date + ".";
      accNDSTrn.Date_Carry    = PaymentObj.ValueDate;
      accNDSTrn.Department    = PaymentObj.Department;
      accNDSTrn.ResultCarry   = SFPAY_CARRY;

      accNDSTrn.FIIDPayer     = CommisPayerFIID;
      accNDSTrn.AccountPayer  = CommisPayerAccount;
      
      if( ConvSum(СуммаДебета, oprcom.SumNDS, PaymentObj.ValueDate, oprcom.FIID_Sum, accNDSTrn.FIIDPayer) )
        msgbox("Невозможно конвертировать сумму комиссии");
        return PMSF_ACTION_ERROR;
      end;

      accNDSTrn.SumPayer        = СуммаДебета;
      accNDSTrn.FIIDReceiver    = siNDS.FIID;
      accNDSTrn.SumReceiver     = NewNDSSum;
      accNDSTrn.AccountReceiver = siNDS.Account;
      accNDSTrn.ClaimID         = GetClaimID( PaymentObj, accNDSTrn.AccountPayer, accNDSTrn.Chapter, accNDSTrn.FIIDPayer );
      accNDSTrn.Status_After    = CarryKind;    

      PayerChargeOffSum = PayerChargeOffSum + accNDSTrn.SumPayer;
      
      if( not accNDSTrn.Carry )
        msgbox("Ошибка при актуализации проводки НДС по комиссии за перевод");
        return PMSF_ACTION_ERROR;
      end;

      // Уменьшить сумму платежа на сумму NDS:
      if( oprcom.FIID_Sum != PaymentObj.BaseFIID )
        if( ConvSum(deltaBaseAmount, oprcom.SumNDS, PaymentObj.ValueDate, oprcom.FIID_Sum, PaymentObj.BaseFIID) )
          msgbox("Невозможно конвертировать сумму комиссии");
          return PMSF_ACTION_ERROR;
        end;
        PaymentObj.FutureBaseAmount = PaymentObj.FutureBaseAmount - deltaBaseAmount;
        PaymentObj.ActuateFutureAmounts( TBA_AMOUNT );
      else
        PaymentObj.FutureBaseAmount = PaymentObj.FutureBaseAmount - oprcom.SumNDS;
        PaymentObj.ActuateFutureAmounts( TBA_AMOUNT );
        deltaBaseAmount = oprcom.SumNDS;
      end;

    end;


    /* EVG To 2030 Trying to enable the command below
       EVG Вызывает ошибку "Сообщение 1" */
    if( SfComSetState( oprcom, OPRSFCOM_STATUS_PAY ) )
      msgbox("Ошибка при смене статуса комиссии");
      return PMSF_ACTION_ERROR;
    end;

    i = i + 1;

  end;

  if( CarryKind == ACCTRN_STATUS_DOCUMENT )
    ChangeReserve( GetClaimID( PaymentObj, PaymentObj.PayerAccount, PaymentObj.Chapter, PaymentObj.PayerFIID ), PayerChargeOffSum );
  end;

  if( (PaymentObj.FutureBaseAmount <= 0) or (PaymentObj.FuturePayerAmount <= 0) or (PaymentObj.FutureReceiverAmount <= 0) )
    msgbox("Сумма комиссий должна быть меньше суммы платежа");
    return PMSF_ACTION_ERROR;
  end;

  return PMSF_ACTION_OK;

end;

//-----------------------------------------------------------------------------
// Оплата комиссии типа BEN (комиссии определяются автоматически)
//-----------------------------------------------------------------------------
macro PayCommisBEN( PaymentObj:RsbPayment, CommisPayerAccount:string, CommisPayerFIID:integer )
  var OprComList:TArray = TArray();
  var i:integer;
  file oprcom( "oprsfcom.dbt" );
  
  if( PaymentObj.ComissCharges != PM_CHRG_BEN )
    return PMSF_ACTION_ERROR;
  end;

  if( CommisPayerAccount == "" )
    MsgBox("Не определен плательщик комиссии");
    return PMSF_ACTION_ERROR;
  end;

  // Найти все комиссии, рассчитанные для операции, но еще не оплаченные
  var select = " select oprcom.t_ID " +
                 " from doprsfcom_dbt oprcom, dpmpaym_dbt pmpaym, doproper_dbt oproper " +
                " where pmpaym.t_PaymentID = :PaymentID " +
                  " and oproper.t_DocumentID = LPAD(pmpaym.t_PaymentID, 34, '0') " +
                  " and oproper.t_DocKind = pmpaym.t_DocKind " +
                  " and oprcom.t_ID_Operation = oproper.t_ID_Operation " +
                  " and oprcom.t_ID_Paystep = 0 " +
                  " and oprcom.t_Department = pmpaym.t_Department ";

  var params = makeArray( SQLParam( "PaymentID", PaymentObj.PaymentID ) );
  var rs = execSQLselect( select, params, TRUE );

  while( rs and rs.moveNext() )

    oprcom.ID = rs.value(0);
    if( not getEQ( oprcom ) )
      MsgBox("Не найдена единовременная комиссия с ID = ", rs.value(0));
      return PMSF_ACTION_ERROR;
    end;

    i = OprComList.size;
    OprComList[i] = TRecHandler("oprsfcom.dbt");
    Copy(OprComList[i], oprcom);

  end;

  return PayCommisArrayBEN( OprComList, PaymentObj, CommisPayerAccount, CommisPayerFIID );

end;
