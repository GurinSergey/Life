/*
$Name: ic_accoplist.mac
$Module: ББ
$Description: сервис выписки
*/

import CurrInter, FIInter, oralib, likepy;

class TExtractInfo
  var NumRowStat: Integer = 0;
  var InBalance : Money = $0;
  var InCurRate : Double = 0;
  var InBalanceNatCur: Money = $0;
  var TotalTurnDeb: Money = $0;
  var TotalTurnCre: Money = $0;
  var OutBalance: Money = $0;
  var OutCurRate: Double = 0;
  var OutBalanceNatCur: Money = $0;
  var DateLastMov: Date = NULL;
  var PayDocList: TArray = TArray();
end;

class TContrParty
  var BankBIC: String;
  var BankName: String;
  var Account: String;
  var Name: String;
  var INN: String;
  var PartyID: Integer;
end;

class TExtractDoc(TypeAccStat)
  var PaymentID: Integer;
  var PostDate: Date;
  var InBalance: Money;
  var TurnType: Integer;
  var Amount: Money;
  var CurRate: Double;
  var AmountNatCur: Money;
  var DocKind: String = NULL;
  var DocNumber: String = NULL;
  var DocDate: Date = NULL;
  var Ground: String = NULL;
  var IsTax: Integer;
  var CounterParty: TContrParty = NULL;

  if (TypeAccStat == 2)
    CounterParty = TContrParty();
  end;
end;

macro GetRateCB(FIID, D: date)
  var ft;
  record rate(ratedef);
  if (FIID == 0)
    return 1;
  end;
  ft = ПолучитьКурс(rate, NATCUR, FIID, 7);
  if (ft == 0)
    ft = ПолучитьЗначениеКурса(rate, D);
  end;
  if (ft != 0)
    ft = ПолучитьКурс(rate, NATCUR, FIID);
    if (ft == 0)
      ft = ПолучитьЗначениеКурса(rate, D);
    end;
  end;
  return ConvertSum($1, rate.rate, rate.scale, rate.point, rate.isinverse);
end;

macro GetAccountOperList(
                          AccountID: Integer, //Идентификатор счета в АБС
                          AccountNumber: String, //Номер счета (внешний) в АБС
                          DateFrom: date, //Начальная дата периода выписки
                          DateTo: date, //Конечная дата периода выписки
                          TypeAccStat: integer, //Тип выписки Возможные значения:(1 - краткая; 2 - расширенная.)
                          NationalCurrency: integer, //Признак национальной валюты Признак необходимости возврата сумм в национальной валюте. Возможные значения:0 - нет; 1 - да (по умолчанию)
                          MaxRowResponse: integer //Максимальное количество строк в ответе
                        )
  /*var   inter_mode = SetDialogFlag(0);
  var   stats = SetRSTrace(true);
  SetDialogFlag(inter_mode);*/

  var txtDir;
  GetRegistryValue("BANK_INI\\ОБЩИЕ ПАРАМЕТРЫ\\ДИРЕКТОРИИ\\TEXTDIR", V_STRING, txtDir);
  SetOutput(txtDir + "\\OutAccOpList.txt", true);
  println("Start check time: ", time():m);
  if (NationalCurrency == NULL)
    NationalCurrency = 1;
  end;
  if (((AccountID == NULL) or (AccountID <= 0)) and ((AccountNumber == NULL) or (AccountNumber == "")))
    RunError("Не указаны параметры счета для формирования выписки");
  end;
  if ((TypeAccStat != 1) and (TypeAccStat != 2))
    RunError("Некорректное значение параметра <Тип выписки>");
  end;
  if ((NationalCurrency != 0) and (NationalCurrency != 1))
    RunError("Некорректное значение параметра <Признак национальной валюты>");
  end;
  var cmd;
  var FIID;
  var Result: TExtractInfo = TExtractInfo();

  if (AccountID)
    cmd = execSQLSelect("select t_Account, t_Code_Currency, t_Open_Date, t_Close_Date, t_Branch from daccount_dbt where t_AccountID = ?", MakeArray(SQLParam("", AccountID)));
    if (not cmd.moveNext())
      RunError("Не найден счет с идентификатором " + AccountID);
    end;
    FIID = cmd.value(1);
    AccountNumber = cmd.value(0);
  else
    cmd = execSQLSelect("select acc.t_AccountID, fi.t_FIID, acc.t_Open_Date, acc.t_Close_Date, acc.t_Branch from daccount_dbt acc, dfininstr_dbt fi " +
                        " where acc.t_Account = ? and acc.t_Chapter = 1 and acc.t_Code_Currency = fi.t_FIID and fi.t_CodeInAccount = ?", 
                        MakeArray(SQLParam("", AccountNumber), SQLParam("", substr(AccountNumber, 6, 3))));
    if (not cmd.moveNext())
      RunError("Не найден счет " + AccountNumber);
    end;
    FIID = cmd.value(1);
    AccountID = cmd.value(0);
  end;
  if ((DateFrom != NULL) and (DateFrom != date(0,0,0)) and (DateTo != NULL) and (DateTo != date(0,0,0)) and (DateFrom > DateTo))
    RunError("Дата начала периода выписки не может быть больше даты окончания периода выписки");
  end;
  if ((DateFrom == NULL) or (DateFrom == date(0,0,0)))
    DateFrom = cmd.value(2);
  elif ((cmd.value(3) != date(0,0,0)) and (DateFrom > cmd.value(3)))
    return Result;
  end;
  if ((DateTo == NULL) or (DateTo == date(0,0,0)))
    cmd = execSQLSelect("select greatest(?, t_Curdate) from dcurdate_dbt where t_Branch = ? and t_IsMain = 'X'", MakeArray(SQLParam("", cmd.value(3)), SQLParam("", cmd.value(4))));
    if (not cmd.moveNext())
      DateTo = date(0,0,0);
    else
      DateTo = cmd.value(0);
    end;
  elif (DateTo < cmd.value(2))
    return Result;
  end;

  var ncText = "";
  if (NationalCurrency == 0)
    ncText = " and decode(t_AccountID_Payer, ?, t_Sum_Payer, t_Sum_Receiver) <> 0";
  end;

  var sql_text = string("SELECT NVL (ad.t_PaymentID, 0) t_PaymentID, \n",
                             "       ad.t_Date_Carry t_PostDate, \n",
                             "         RSB_ACCOUNT.restall (?, \n",
                             "                              1, \n",
                             "                              ?, \n",
                             "                              ?- 1, \n",
                             "                              NULL) \n",
                             "       + SUM (ad.t_AmountWithSign) \n",
                             "            OVER (ORDER BY \n",
                             "                     ad.t_Date_Carry, \n",
                             "                     ad.t_SystemDate, \n",
                             "                     ad.t_SystemTime, \n",
                             "                     ad.t_AccTrnID \n",
                             "                  ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) \n",
                             "       - ad.t_AmountWithSign \n",
                             "          t_InBalance, \n",
                             "       ad.t_TurnType, \n",
                             "       ad.t_Amount, \n",
                             "       ad.t_AmountNatCur, \n",
                             "       ad.t_DocKind, \n",
                             "       ad.t_DocNumber, \n",
                             "       ad.t_DocDate, \n",
                             "       ad.t_Ground2 t_Ground, \n",
                             "       ad.t_BankBIC, \n",
                             "       ad.t_BankName, \n",
                             "       ad.t_Account, \n",
                             "       ad.t_Name, \n",
                             "       ad.t_IsTax, \n",
                             "       DECODE (ad.t_UsePayment, \n",
                             "               1, ad.t_INN, \n",
                             "               NVL (PM_SCRHLP.GetPartyCode (ad.t_PartyID, 16), CHR (1))) \n",
                             "          t_INN, \n",
                             "       ad.t_PartyID, \n",
                             "       ROWNUM t_RowNum \n",
                             "  FROM (SELECT CASE \n",
                             "                  WHEN ad.t_UsePayment = 0 THEN acc.t_Client \n",
                             "                  WHEN ad.t_TurnType = 1 THEN pmpaym.t_Receiver \n",
                             "                  ELSE pmpaym.t_Payer \n",
                             "               END \n",
                             "                  t_PartyID, \n",
                             "               DECODE (ad.t_UsePayment, \n",
                             "                       0, NVL ( (SELECT p.t_Name \n",
                             "                                   FROM dparty_dbt p \n",
                             "                                  WHERE p.t_PartyID = acc.t_Client), \n",
                             "                               CHR (1)), \n",
                             "                       t_ClientName) \n",
                             "                  t_Name, \n",
                             "               CASE \n",
                             "                  WHEN pmpaym.t_PaymentID IS NULL \n",
                             "                  THEN \n",
                             "                     DECODE (ad.t_TurnType, \n",
                             "                             1, ad.t_Account_Receiver, \n",
                             "                             ad.t_Account_Payer) \n",
                             "                  ELSE \n",
                             "                     DECODE (ad.t_TurnType, \n",
                             "                             1, pmpaym.t_ReceiverAccount, \n",
                             "                             pmpaym.t_PayerAccount) \n",
                             "               END \n",
                             "                  t_Account, \n",
                             "               CASE \n",
                             "                  WHEN ad.t_UsePayment = 0 \n",
                             "                  THEN \n",
                             "                     NVL (PM_SCRHLP.GetPartyCode ( \n",
                             "                             (SELECT t_PartyID \n",
                             "                                FROM ddp_dep_dbt \n",
                             "                               WHERE t_Code = ad.t_Department), \n",
                             "                             3                               /*CNST.PTCK_BIC*/ \n",
                             "                              ), \n",
                             "                          CHR (1)) \n",
                             "                  ELSE \n",
                             "                     NVL ( \n",
                             "                        ad.t_BankCode, \n",
                             "                        CASE \n",
                             "                           WHEN t_TurnType = 1 \n",
                             "                           THEN \n",
                             "                              NVL ( \n",
                             "                                 PM_SCRHLP.GetPartyCode ( \n",
                             "                                    pmpaym.t_ReceiverBankID, \n",
                             "                                    3                        /*CNST.PTCK_BIC*/ \n",
                             "                                     ), \n",
                             "                                 CHR (1)) \n",
                             "                           ELSE \n",
                             "                              NVL ( \n",
                             "                                 PM_SCRHLP.GetPartyCode ( \n",
                             "                                    pmpaym.t_PayerBankID, \n",
                             "                                    3                        /*CNST.PTCK_BIC*/ \n",
                             "                                     ), \n",
                             "                                 CHR (1)) \n",
                             "                        END) \n",
                             "               END \n",
                             "                  t_BankBIC, \n",
                             "               DECODE (ad.t_TurnType, 1, -ad.t_Amount, ad.t_Amount) t_AmountWithSign, \n",
                             "               ad.* \n",
                             "          FROM (SELECT NVL (prp.t_ShifrOper, ad.t_Shifr_Oper) t_DocKind, \n",
                             "                       NVL (prp.t_Number, ad.t_Numb_Document) t_DocNumber, \n",
                             "                       NVL (prp.t_Date, ad.t_Date_Carry) t_DocDate, \n",
                             "                       NVL (prp.t_Ground, ad.t_Ground) t_Ground2, \n",
                             "                       NVL2( prp.t_TaxAuthorState, decode(prp.t_TaxAuthorState, chr(1), 1, 2), 1) t_IsTax, \n",
                             "                       DECODE (pp.t_CodeKind, 3                --CNST.PTCK_BIC \n",
                             "                                               , pp.t_BankCode, NULL) \n",
                             "                          t_BankCode, \n",
                             "                       CASE \n",
                             "                          WHEN ad.t_PaymentID IS NULL \n",
                             "                          THEN \n",
                             "                             NVL ( \n",
                             "                                (SELECT p.t_Name \n",
                             "                                   FROM ddp_dep_dbt dp, dparty_dbt p \n",
                             "                                  WHERE     dp.t_Code = ad.t_Department \n",
                             "                                        AND p.t_PartyID = dp.t_PartyID), \n",
                             "                                CHR (1)) \n",
                             "                          WHEN ad.t_TurnType = 1 \n",
                             "                          THEN \n",
                             "                             prp.t_ReceiverBankName \n",
                             "                          ELSE \n",
                             "                             prp.t_PayerBankName \n",
                             "                       END \n",
                             "                          t_BankName, \n",
                             "                       DECODE (ad.t_TurnType, \n",
                             "                               1, prp.t_ReceiverName, \n",
                             "                               prp.t_PayerName) \n",
                             "                          t_ClientName, \n",
                             "                       DECODE (ad.t_TurnType, \n",
                             "                               1, ad.t_Sum_Payer, \n",
                             "                               ad.t_Sum_Receiver) \n",
                             "                          t_Amount, \n",
                             "                       ad.t_Sum_NatCur t_AmountNatCur, \n",
                             "                       CASE \n",
                             "                          WHEN    ad.t_PaymentID IS NULL \n",
                             "                               OR EXISTS \n",
                             "                                     (SELECT 1 \n",
                             "                                        FROM dpmaddpi_dbt pma \n",
                             "                                       WHERE     pma.t_PaymentID = \n",
                             "                                                    ad.t_PaymentID \n",
                             "                                             AND pma.t_DebetCredit = ad.t_TurnType) \n",
                             "                          THEN \n",
                             "                             0 \n",
                             "                          ELSE \n",
                             "                             1 \n",
                             "                       END \n",
                             "                          t_UsePayment, \n",
                             "                       DECODE (t_TurnType, \n",
                             "                               1, NVL (prp.t_ReceiverINN, CHR (1)), \n",
                             "                               NVL (prp.t_PayerINN, CHR (1))) \n",
                             "                          t_INN, \n",
                             "                       ad.* \n",
                             "                  FROM (  SELECT pmd.t_PaymentID, \n",
                             "                                 DECODE ( \n",
                             "                                    ?, \n",
                             "                                    ad.t_AccountID_Receiver, ad.t_AccountID_Payer, \n",
                             "                                    ad.t_AccountID_Receiver) \n",
                             "                                    t_AccountID, \n",
                             "                                 DECODE (?, ad.t_AccountID_Payer, 1, 0) \n",
                             "                                    t_TurnType, \n",
                             "                                 ad.* \n",
                             "                            FROM dacctrn_dbt ad, dpmdocs_dbt pmd \n",
                             "                           WHERE     ad.t_Chapter = 1 \n",
                             "                                 AND ad.t_State = 1 \n",
                             "                                 AND (   ad.t_AccountID_Payer = ?\n",
                             "                                      OR ad.t_AccountID_Receiver = ?) \n",
                             "                                 AND ad.t_Date_Carry BETWEEN ? AND ?\n",
                                                               ncText,
                             "                                 AND pmd.t_AccTrnID(+) = ad.t_AccTrnID) ad, \n",
                             "                       dpmprop_dbt pp, \n",
                             "                       dpmrmprop_dbt prp \n",
                             "                 WHERE     pp.t_PaymentID(+) = ad.t_PaymentID \n",
                             "                       AND pp.t_DebetCredit(+) = ad.t_TurnType \n",
                             "                       AND prp.t_PaymentID(+) = ad.t_PaymentID) ad, \n",
                             "               dpmpaym_dbt pmpaym, \n",
                             "               daccount_dbt acc \n",
                             "         WHERE     acc.t_AccountID = ad.t_AccountID \n",
                             "               AND pmpaym.t_PaymentID(+) = ad.t_PaymentID) ad \n");

  var Params = MakeArray(
                               SQLParam("", AccountNumber), SQLParam("", FIID), SQLParam("", DateFrom), 
                               SQLParam("", AccountID), SQLParam("", AccountID), SQLParam("", AccountID), SQLParam("", AccountID),
                               SQLParam("", DateFrom), SQLParam("", DateTo));
  if (NationalCurrency == 0)
    Params[Params.size] = SQLParam("", AccountID);
  end;

  if (MaxRowResponse)
    sql_text = string("select t_PaymentID, \n",
                      "       t_PostDate, \n",
                      "       t_InBalance, \n",
                      "       t_TurnType, \n",
                      "       t_Amount, \n",
                      "       t_AmountNatCur, \n",
                      "       t_DocKind, \n",
                      "       t_DocNumber, \n",
                      "       t_DocDate, \n",
                      "       t_Ground, \n",
                      "       t_BankBIC, \n",
                      "       t_BankName, \n",
                      "       t_Account, \n",
                      "       t_Name, \n",
                      "       t_IsTax, \n",
                      "       t_INN, \n",
                      "       t_PartyID \n",
                      "  from ( \n",
                      sql_text, ") \n",
                      " where t_RowNum > (select count(*) FROM dacctrn_dbt ad WHERE ad.t_Chapter = 1 \n",
                             "                                 AND ad.t_State = 1 \n",
                             "                                 AND (   ad.t_AccountID_Payer = ?\n",
                             "                                      OR ad.t_AccountID_Receiver = ?) \n",
                             "                                 AND ad.t_Date_Carry BETWEEN ? AND ?) - ?\n");
    Params[Params.size] = SQLParam("", AccountID);
    Params[Params.size] = SQLParam("", AccountID);
    Params[Params.size] = SQLParam("", DateFrom);
    Params[Params.size] = SQLParam("", DateTo);
    Params[Params.size] = SQLParam("", MaxRowResponse);
  end;
  println("Start exec time: ", time():m);
  cmd = execSQLSelect(sql_text, Params);
  println("Exec time: ", time():m);
  var itemIndex = 0;
  while (cmd.moveNext())
    itemIndex = itemIndex + 1;
    println("Start line ", itemIndex, ": ", time():m);
    var elem = TExtractDoc(TypeAccStat);

    elem.PaymentID = cmd.value("t_PaymentID");
    elem.PostDate = cmd.value("t_PostDate");
    elem.InBalance = cmd.value("t_InBalance");
    elem.TurnType = IfThenElse(cmd.value("t_TurnType") == 1, 0, 1);
    elem.Amount = cmd.value("t_Amount");
    if (NationalCurrency == 1)
      elem.AmountNatCur = cmd.value("t_AmountNatCur");
      if (elem.Amount == 0)
        elem.CurRate = 0;
      else
        elem.CurRate = elem.AmountNatCur / elem.Amount;
      end;
    end;
    elem.IsTax = cmd.value("t_IsTax");
    if (TypeAccStat == 2)
      elem.DocKind = cmd.value("t_DocKind");
      elem.DocNumber = cmd.value("t_DocNumber");
      elem.DocDate = cmd.value("t_DocDate");
      elem.Ground = cmd.value("t_Ground");
      elem.CounterParty.BankBIC = cmd.value("t_BankBIC");
      elem.CounterParty.BankName = cmd.value("t_BankName");
      elem.CounterParty.Account = cmd.value("t_Account");
      elem.CounterParty.Name = cmd.value("t_Name");
      elem.CounterParty.INN = cmd.value("t_INN");
      elem.CounterParty.PartyID = cmd.value("t_PartyID");
    end;

    Result.PayDocList[Result.PayDocList.size] = elem;
    Result.NumRowStat = Result.NumRowStat + 1;
    println("End line ", itemIndex, ": ", time():m);
  end;

  if (FIID == 0)
    Result.InBalance = RestA(AccountNumber, DateFrom - 1);
    Result.OutBalance = RestA(AccountNumber, DateTo);
  else
    Result.InBalance = RestAC(AccountNumber, FIID, DateFrom - 1);
    Result.OutBalance = RestAC(AccountNumber, FIID, DateTo);
  end;
  if (NationalCurrency  == 1)
    Result.InCurRate = GetRateCB(FIID, DateFrom);
    Result.InBalanceNatCur = RestA(AccountNumber, DateFrom - 1, NULL, NULL, FIID, NATCUR);
    Result.OutCurRate = GetRateCB(FIID, DateTo);
    Result.OutBalanceNatCur = RestA(AccountNumber, DateTo, NULL, NULL, FIID, NATCUR);
  end;
  println("Start TotalTurnDeb: ", time():m);
  cmd = execSQLSelect("select NVL(sum(t_Sum_Payer), 0) from dacctrn_dbt where t_Chapter = 1 and t_State = 1 and t_AccountID_Payer = ? and t_Date_Carry BETWEEN ? AND ?",
                      MakeArray(SQLParam("", AccountID), SQLParam("", DateFrom), SQLParam("", DateTo)));
  cmd.moveNext();
  Result.TotalTurnDeb = cmd.value(0);
  println("Start TotalTurnCre: ", time():m);

  cmd = execSQLSelect("select NVL(sum(t_Sum_Receiver), 0) from dacctrn_dbt where t_Chapter = 1 and t_State = 1 and t_AccountID_Receiver = ? and t_Date_Carry BETWEEN ? AND ?",
                      MakeArray(SQLParam("", AccountID), SQLParam("", DateFrom), SQLParam("", DateTo)));
  cmd.moveNext();
  Result.TotalTurnCre = cmd.value(0);
  println("Start DateLastMov: ", time():m);

  cmd = execSQLSelect(string("select NVL(Max(t_Date_Carry), to_date('01010001', 'DDMMYYYY')) ",
                             "  from dacctrn_dbt where t_Chapter = 1 and t_State = 1 ",
                             "   and (t_AccountID_Payer = ? or t_AccountID_Receiver = ?) and t_Date_Carry < ? ",
                             "   and decode(t_AccountID_Payer, ?, t_Sum_Payer, t_Sum_Receiver) <> 0"),
                      MakeArray(SQLParam("", AccountID), SQLParam("", AccountID), SQLParam("", DateFrom), SQLParam("", AccountID)));
  if (cmd.moveNext() and (cmd.value(0) != date(0,0,0)))
    Result.DateLastMov = cmd.value(0);
  end;
  println("Full time: ", time():m);
  SetOutput(NULL, true);

  /*inter_mode = SetDialogFlag(0);
  stats = SetRSTrace(false);
  SetDialogFlag(inter_mode);*/

  return Result;
end;