/*
  Перевод пользователей и клиентов в другой узел ТС.
*/

import "globals.mac", rsd, oralib, FIInter;

class reportData ()
  var
    contractsNamesArray       = TArray, // Наименовавние контракта (поле t_name) 
    contractsNumsArray        = TArray, // Наименование контракта (поле t_number) 
    contractsObjArray         = TArray, // Счет под договору обслуживания (поле t_object) 
    accountsArray             = TArray, // Номер счета (поле t_account)
    accountsParties           = TArray, // Код субъекта-экономики (поле t_client)
    accountMasterArray        = TArray, // Номер хозяина-операциониста (поле t_oper)
    userNumsArray             = TArray, // Номера операционистов (поля t_opernum)
    userNamesArray            = TArray, // ФИО операционистов (поля t_name)

    contractsResults  = TArray,
    accountsResults   = TArray,
    usersResults      = TArray,

    sourceOperNum,  // Код текущего операциониста
    sourceOperName, // ФИО текущего операциониста
    sourceNodeCode, // Исходный узел ТС(код)
    sourceNodeName, // Исходный узел ТС(наименование)

    targetNodeCode, // Целевой узел ТС(код)
    targetNodeName, // Целевой узел ТС(наименование)
    targetOperNum,  // Целевой операционист(номер)
    targetOperName, // Целевой операционист(ФИО)

    tempNodeCodes    = TArray,   // Код субъекта экономики-владельца переводимых счетов
    tempNodeNames    = TArray;   // Наименование субъекта экономики-владельца переводимых счетов
end;

var bTransferUsers, bTransferAccounts, bTransferContracts;
var targetNodeCode = -1, targetFilial = -1, targetOper = -1;

var transferStatus = 0, repData : reportData; 

private const RESULT_CODE_CHECKERROR    = -1; // Пользователь уже привязан к целевому узлу ТС.
private const RESULT_CODE_OK            = 0;
private const RESULT_CODE_ERROR         = 1;  // <код ошибки: "Попытка перевода между филиалами">

private const RESULT_CODE_ERROR_STRING = "Попытка перевода между филиалами";

private macro reportGetNodeInfo()
  var cmd = RsdCommand;

  cmd.CmdText = "SELECT int.t_sourceNodeCode, dep.t_name FROM dinternodetransfer_tmp int, ddp_dep_dbt dep WHERE dep.t_code = int.t_sourceNodeCode";

  cmd.execute();

  var rs = RsdRecordset(cmd);

  if(rs.moveNext())
    repData.sourceNodeCode = rs.value(0);
    repData.sourceNodeName = rs.value(1);
  end;

  cmd = RsdCommand;

  cmd.CmdText = "SELECT t_name FROM ddp_dep_dbt WHERE t_code = ?";

  cmd.addParam("", RSDBP_IN, repData.targetNodeCode);

  cmd.execute();

  rs = RsdRecordset(cmd);

  if(rs.moveNext())
    repData.targetNodeName = rs.value(0);
  end;
end;

private macro reportGetAccountMasterInfo(partyID)
  var cmd = RsdCommand;

  cmd.CmdText = "SELECT pc.t_code, p.t_name FROM dpartcode_dbt pc, dparty_dbt p WHERE pc.t_codekind = 1 AND pc.t_partyid = 14 AND p.t_partyid = pc.t_partyid AND ROWNUM < 2";

  cmd.addParam("", RSDBP_IN, partyID);
  cmd.execute();

  var rs = RsdRecordset(cmd);

  if(rs.moveNext())
    repData.tempNodeCodes[repData.tempNodeCodes.size()] = rs.value(0);
    repData.tempNodeNames[repData.tempNodeNames.size()] = rs.value(1);
  end;
end;

private macro reportGetOpers()
  var cmd = RsdCommand;

  cmd.CmdText = "SELECT t_opernum, t_opername, t_result FROM dtransferuser_tmp";

  cmd.execute();

  var rs = RsdRecordset(cmd);

  if(rs.moveNext())
    repData.userNumsArray[repData.userNumsArray.size()]     = rs.value(0);
    repData.userNamesArray[repData.userNamesArray.size()]   = rs.value(1);
    repData.usersResults[repData.usersResults.size()]       = rs.value(2);
  end;
end;

private macro reportGetAccounts()
  var cmd, i = 0;

  while(i < repData.usersResults.size())
    cmd = RsdCommand;

    cmd.CmdText = "SELECT t_account, t_result, t_client FROM dtransferacc_tmp WHERE t_oper = ?";
    cmd.addParam("", RSDBP_IN, repData.userNumsArray[i]);

    cmd.execute();

    var rs = RsdRecordset(cmd);

    while(rs.moveNext())
      repData.accountsArray[repData.accountsArray.size()]           = rs.value(0);
      repData.accountsResults[repData.accountsResults.size()]       = rs.value(1);
      repData.accountsParties[repData.accountsParties.size()]       = rs.value(2);
      repData.accountMasterArray[repData.accountMasterArray.size()] = repData.userNumsArray[i];
    end;

    i = i + 1;
  end;
end;

private macro reportGetContracts()
  var cmd, i = 0;

  while(i < repData.accountsResults.size())
    cmd = RsdCommand;

    cmd.CmdText = "SELECT t_name, t_number, t_result FROM dtransfercontr_tmp WHERE t_object = ?";
    cmd.addParam("", RSDBP_IN, repData.accountsArray[i]);

    cmd.execute();

    var rs = RsdRecordset(cmd);

    while(rs.moveNext())
      repData.contractsNamesArray[repData.contractsNamesArray.size()]         = rs.value(0);
      repData.contractsNumsArray[repData.contractsNumsArray.size()]           = rs.value(1);
      repData.contractsObjArray[repData.contractsObjArray.size()]             = repData.accountsArray[i];
      repData.contractsResults[repData.contractsResults.size()]               = rs.value(2);
    end;

    i = i + 1;
  end;
end;

private macro printReportHeader()
  [Протокол работы процедуры перевода пользователей и их клиентов в другой узел ТС         
                                                                          ];
  [Дата:   ##########                                   ](date());
  [Время:  ########                                     ](time());
  [Пользователь: ##### ###################################### ]({oper}, {Name_Oper});
  [                                                                       ];
  [Переводить: 
    из узла ТС # #                                                   
    в узел ТС # #](repData.sourceNodeCode, repData.sourceNodeName, repData.targetNodeCode, repData.targetNodeName);
  [                                                                       ];          
  [На пользователя:    # #                                                ](repData.targetOperNum, repData.targetOperName);
  [-----------------------------------------------------------------------];
end;

private macro printReportContent()
  var usersTransferedWithoutErrors = 0,
      accountsTransferedWithoutErrors = 0,
      contractsTransferedWithoutErrors = 0,
      usersTransferedWithErrors = 0,
      accountsTransferedWithErrors = 0,
      contractsTransferedWithErrors = 0;

  var i = 0, j = 0, z = 0;

  while(i < repData.usersResults.size())
    if(repData.usersResults[i] == 0)
      usersTransferedWithoutErrors = usersTransferedWithoutErrors + 1;
    else
      usersTransferedWithErrors = usersTransferedWithErrors + 1;
    end;

    i = i + 1;
  end;

  i = 0;

  while(i < repData.accountsResults.size())
    if(repData.accountsResults[i] == 0)
      accountsTransferedWithoutErrors = accountsTransferedWithoutErrors + 1;
    else
      accountsTransferedWithErrors = accountsTransferedWithErrors + 1;
    end;

    i = i + 1;
  end;

  i = 0;

  while(i < repData.contractsResults.size())
    if(repData.contractsResults[i] == 0)
      contractsTransferedWithoutErrors = contractsTransferedWithoutErrors + 1;
    else
      contractsTransferedWithErrors = contractsTransferedWithErrors + 1;
    end;

    i = i + 1;
  end;  

  i = 0;

  while(i < repData.accountsParties.size())
    reportGetAccountMasterInfo(repData.accountsParties[i]);

    i = i + 1;
  end;



  [Переведено:        
    пользователей              #
    лицевых счетов             #
    договоров обслуживания РКО # ](usersTransferedWithoutErrors, accountsTransferedWithoutErrors, contractsTransferedWithoutErrors);
  [                                                                         ];
  [Ошибок перевода:
    пользователей              #
    лицевых счетов             #
    договоров обслуживания РКО # ](usersTransferedWithErrors, accountsTransferedWithErrors, contractsTransferedWithErrors);
  [-------------------------------------------------------------------------];
  
  i = 0;

  while(i < repData.usersResults.size())
    [                                                                       ];

    if(repData.usersResults[i] == RESULT_CODE_CHECKERROR)
      [(-):####:#](repData.userNumsArray[i], repData.userNamesArray[i]);   
    elif(repData.usersResults[i] == RESULT_CODE_ERROR)
      [(x):####:#](repData.userNumsArray[i], repData.userNamesArray[i]);  
    else
      [####:#](repData.userNumsArray[i], repData.userNamesArray[i]);
    end;

    [    ############:#                                                     ](repData.tempNodeCodes[z], repData.tempNodeNames[z]);
         
    j = 0;

    while(j < repData.accountsResults.size())
      if(repData.accountsResults[j] == RESULT_CODE_CHECKERROR)
        [        (-):#](repData.accountsArray[j]:f);   
      elif(repData.accountsResults[j] == RESULT_CODE_ERROR)
        [        (x):#](repData.accountsArray[j]:f);  
      else 
        [        #](repData.accountsArray[j]:f);
      end;

      z = 0;

      while(z < repData.contractsResults.size())
        if(repData.contractsObjArray[z] == repData.accountsArray[j])
          if(repData.contractsResults[z] == RESULT_CODE_CHECKERROR)
            [            (-):###############:#](repData.contractsNumsArray[z], repData.contractsNamesArray[z]);   
          elif(repData.contractsResults[z] == RESULT_CODE_ERROR)
            [            (x):###############:#](repData.contractsNumsArray[z], repData.contractsNamesArray[z]);  
          else 
            [            ###############:#](repData.contractsNumsArray[z], repData.contractsNamesArray[z]);
          end;
        end;

        z = z + 1;
      end;

      j = j + 1;
    end;
        
    i = i + 1;
  end;
end;

private macro printReport()
  reportGetOpers();
  reportGetAccounts();
  reportGetContracts();
  reportGetNodeInfo();

  printReportHeader();
  printReportContent();
end;

private macro getBoolParameters()
  var cmd = RsdCommand;

  cmd.CmdText = "SELECT t_userTransfer, t_accountTransfer, t_contractTransfer FROM dinternodetransfer_tmp";

  cmd.execute();

  var rs = RsdRecordset(cmd);

  if(rs.moveNext())
    bTransferUsers      = rs.value("t_userTransfer");
    bTransferAccounts   = rs.value("t_accountTransfer");
    bTransferContracts  = rs.value("t_contractTransfer");
  end;
end;

private macro getTargetFilial()
  var cmd = RsdCommand;

  cmd.CmdText = "SELECT DECODE(dep.t_parentcode, 0, dep.t_code, dep.t_parentcode) FROM ddp_dep_dbt dep WHERE dep.t_code = ?";

  cmd.addParam("", RSDBP_IN, targetNodeCode);

  cmd.execute();

  var rs = RsdRecordset(cmd);

  if(rs.moveNext())
    targetFilial = rs.value(0);
  end;
end;

private macro getInternodeParameters()
  var cmd = RsdCommand;

  /* EVG 28/02/2014 Пользователь может быть и не указан в разделе "Цель перевода", такой вариант предусмотрен в ТЗ.
  cmd.CmdText = "SELECT int.t_targetNodeCode, int.t_targetOper, p.t_name FROM dinternodetransfer_tmp int, dperson_dbt p WHERE p.t_oper = int.t_targetOper";*/
  cmd.CmdText = "SELECT int.t_targetNodeCode, int.t_targetOper, p.t_name FROM dinternodetransfer_tmp int, dperson_dbt p WHERE p.t_oper (+)= int.t_targetOper";

  cmd.execute();

  var rs = RsdRecordset(cmd);

  if(rs.moveNext())
    targetNodeCode    = rs.value(0);
    targetOper        = rs.value(1);

    //debugbreak;
    /* EVG 28/02/2014 Перевод пользователя в другое подразделение вместе со своими счетами - счета остаются за старым пользователем
       (реализовано для случая, когда пользователь выбран один). */
    if( targetOper == 0 )
       var n = 0;
       cmd.CmdText = "SELECT 0, t_opernum, t_opername FROM dtransferuser_tmp WHERE t_result = 0";
       cmd.execute();
       rs = RsdRecordset(cmd);
       while( rs.moveNext() )
          targetOper = rs.value(1);
          n = n + 1;
       end;

       if( n > 1 )
          msgbox( "Перевод пользователя со своими счетами реализован только для варианта, когда в параметрах задан конкретный пользователь" );
          return false();
       end;
    end;


    repData.targetNodeCode = targetNodeCode;
    repData.targetOperNum  = targetOper;
    repData.targetOperName  = rs.value(2)
  end;

  if(targetNodeCode != -1)
    getTargetFilial();

    return true;
  end;

  return false;
end;

private macro transferIsNeeded()
  if((bTransferUsers == "X") OR (bTransferAccounts == "X") OR (bTransferContracts == "X"))
      return getInternodeParameters();
  else
    return false;
  end;
end;

private macro prepareUserTransfer()
  var cmd = RsdCommand, rs, i = 0;
  var opernums = TArray, filials = TArray;

  /* Отбираем массив пользователей (их номер и филиалы) */
  cmd.CmdText = "SELECT tu.t_opernum, DECODE(dep.t_parentcode, 0, dep.t_code, dep.t_parentcode) FROM dtransferuser_tmp tu, ddp_dep_dbt dep WHERE dep.t_code = tu.t_branch";

  cmd.execute();

  rs = RsdRecordset(cmd);

  while(rs.moveNext())
    opernums[opernums.size()] = rs.value("t_opernum");  
    filials[filials.size()]   = rs.value(1);
  end;

  /* Проверка на принадлежность целевого пользователя филиалу исходного узла ТС 
     (т.к. возможен перевод только внутри филиала)  
  */
  while(i < opernums.size())
    if(filials[i] != targetFilial)
      cmd = RsdCommand;

      cmd.cmdText = "UPDATE dtransferuser_tmp tu SET tu.t_result = ? WHERE tu.t_opernum = ?";
    
      cmd.addParam("", RSDBP_IN, RESULT_CODE_ERROR);
      cmd.addParam("", RSDBP_IN, opernums[i]);
     
      cmd.execute();
    end;

    i = i + 1;
  end;
end;

private macro prepareAccountsTransfer()
  var cmd = RsdCommand, rs, i = 0;
  var accounts = TArray, filials = TArray;

  /* Отбираем массив лицевых счетов (их номер и филиалы) */
  cmd.CmdText = "SELECT ta.t_account, DECODE(dep.t_parentcode, 0, dep.t_code, dep.t_parentcode) FROM dtransferacc_tmp ta, ddp_dep_dbt dep WHERE dep.t_code = ta.t_branch";

  cmd.execute();

  rs = RsdRecordset(cmd);

  while(rs.moveNext())
    accounts[accounts.size()] = rs.value("t_account");  
    filials[filials.size()]   = rs.value(1);
  end;

  /* Проверка на принадлежность целевого лицевого счета филиалу исходного узла ТС 
     (т.к. возможен перевод только внутри филиала)  
  */
  while(i < accounts.size())
    if(filials[i] != targetFilial)
      cmd = RsdCommand;

      cmd.cmdText = "UPDATE dtransferacc_tmp tu SET tu.t_result = ? WHERE tu.t_account = ?";
    
      cmd.addParam("", RSDBP_IN, RESULT_CODE_ERROR);
      cmd.addParam("", RSDBP_IN, accounts[i]);
     
      cmd.execute();
    end;

    i = i + 1;
  end;
end;

private macro prepareContractsTransfer()
  var cmd = RsdCommand, rs, i = 0;
  var contrid = TArray, filials = TArray;

  /* Отбираем массив договоров (их номер и филиалы) */
  cmd.CmdText = "SELECT tc.t_contrid, DECODE(dep.t_parentcode, 0, dep.t_code, dep.t_parentcode) FROM dtransfercontr_tmp tc, ddp_dep_dbt dep WHERE dep.t_code = tc.t_branch";

  cmd.execute();

  rs = RsdRecordset(cmd);

  while(rs.moveNext())
    contrid[contrid.size()]   = rs.value("t_contrid");  
    filials[filials.size()]   = rs.value(1);
  end;

  /* Проверка на принадлежность целевого договора филиалу исходного узла ТС 
     (т.к. возможен перевод только внутри филиала)  
  */
  while(i < contrid.size())
    if(filials[i] != targetFilial)
      cmd = RsdCommand;

      cmd.cmdText = "UPDATE dtransfercontr_tmp tu SET tu.t_result = ? WHERE tu.t_contrid = ?";
    
      cmd.addParam("", RSDBP_IN, RESULT_CODE_ERROR);
      cmd.addParam("", RSDBP_IN, contrid[i]);
     
      cmd.execute();
    end;

    i = i + 1;
  end;
end;

private macro performUserTransfer()
  var cmd = RsdCommand, rs, i = 0;
  var opernumsArray = TArray;

  cmd.CmdText = "SELECT t_opernum FROM dtransferuser_tmp WHERE t_result = 0";

  cmd.execute();

  rs = RsdRecordset(cmd);

  while(rs.moveNext())
    opernumsArray[opernumsArray.size()] = rs.value("t_opernum");
  end;

  /* Переводим пользователей */
  while(i < opernumsArray.size())
    cmd = RsdCommand;

    cmd.CmdText = "UPDATE dperson_dbt p SET p.t_codedepart = ? WHERE p.t_oper = ?";
   
    cmd.addParam("", RSDBP_IN, targetNodeCode);
    cmd.addParam("", RSDBP_IN, opernumsArray[i]);

    cmd.execute();

    i = i + 1;
  end;

  transferStatus = transferStatus + 1;
end;

private macro performAccountsTransfer()
  var cmd = RsdCommand, rs, i = 0;
  var accountsArray   = TArray,
      chaptersArray   = TArray,
      opersArray      = TArray,
      currenciesArray = TArray;


  /* Отбираем лицевые счета из временной таблицы */
  cmd.CmdText = "SELECT t_code_currency, t_account, t_chapter, t_oper FROM dtransferacc_tmp WHERE t_result = 0";

  cmd.execute();

  rs = RsdRecordset(cmd);

  while(rs.moveNext())
    accountsArray[accountsArray.size()]     = rs.value("t_account");
    currenciesArray[currenciesArray.size()] = rs.value("t_code_currency");
    chaptersArray[chaptersArray.size()]     = rs.value("t_chapter");
    opersArray[opersArray.size()]           = rs.value("t_oper");
  end;

  /* Переводим лицевые счета */
  while(i < accountsArray.size())
    cmd = RsdCommand;

    cmd.CmdText = "UPDATE daccount_dbt acc SET acc.t_branch = ?, acc.t_oper = ? WHERE acc.t_chapter = ? AND acc.t_account = ? and acc.t_Code_currency = ?";
    
    cmd.addParam("", RSDBP_IN, targetNodeCode);

    if(targetOper != -1)
      cmd.addParam("", RSDBP_IN, targetOper);
    else
      cmd.addParam("", RSDBP_IN, opersArray[i]);
    end;

    cmd.addParam("", RSDBP_IN, chaptersArray[i]);
    cmd.addParam("", RSDBP_IN, accountsArray[i]);
    cmd.addParam("", RSDBP_IN, currenciesArray[i]);

    cmd.execute();  

    i = i + 1;
  end;

  transferStatus = transferStatus + 1;
end;

private macro performContractsTransfer()
  var cmd = RsdCommand, rs, i = 0;
  var contridsArray = TArray;

  cmd.CmdText = "SELECT t_contrid FROM dtransfercontr_tmp WHERE t_result = 0";

  cmd.execute();

  rs = RsdRecordset(cmd);

  while(rs.moveNext())
    contridsArray[contridsArray.size()] = rs.value("t_contrid");
  end;

  /* Переводим договора */
  while(i < contridsArray.size())
    cmd = RsdCommand;

    cmd.CmdText = "UPDATE dsfcontr_dbt contr SET contr.t_branch = ? WHERE contr.t_id = ?";
   
    cmd.addParam("", RSDBP_IN, targetNodeCode);
    cmd.addParam("", RSDBP_IN, contridsArray[i]);

    cmd.execute();

    i = i + 1;
  end;

  transferStatus = transferStatus + 1;
end;

private macro setBeginState()
  var cmd = RsdCommand;

  cmd.CmdText = "UPDATE dtransferuser_tmp tu SET tu.t_result = -1 WHERE tu.t_branch = (SELECT t_targetNodeCode FROM dinternodetransfer_tmp)";
  cmd.execute();
  
  cmd.CmdText = "UPDATE dtransferacc_tmp ta SET ta.t_result = -1 WHERE ta.t_branch = (SELECT t_targetNodeCode FROM dinternodetransfer_tmp)";
  cmd.execute();
  
  cmd.CmdText = "UPDATE dtransfercontr_tmp tc SET tc.t_result = -1 WHERE tc.t_branch = (SELECT t_targetNodeCode FROM dinternodetransfer_tmp)";
  cmd.execute();

  if(bTransferUsers != "X")
    cmd.cmdText = "UPDATE dtransferuser_tmp tu SET tu.t_result = -1";
    cmd.execute();
  end;  
  if(bTransferAccounts != "X")
    cmd.cmdText = "UPDATE dtransferacc_tmp ta SET ta.t_result = -1";
    cmd.execute();
  end;  
  if(bTransferContracts != "X")
    cmd.cmdText = "UPDATE dtransfercontr_tmp tc SET tc.t_result = -1";
    cmd.execute();
  end;  
end;

private macro setSecondState()
  if(bTransferUsers == "X")
    prepareUserTransfer();
  end;
  if(bTransferAccounts == "X")
    prepareAccountsTransfer();
  end;
  if(bTransferContracts == "X")
    prepareContractsTransfer();
  end;  
end;

private macro setEndState()
  if(bTransferUsers == "X")
    performUserTransfer();
  end;
  if(bTransferAccounts == "X")
    performAccountsTransfer();
  end;
  if(bTransferContracts == "X")
    performContractsTransfer();
  end;  
end;

private macro transferBegin()
  setBeginState();  // 1 Шаг

  setSecondState(); // 2 Шаг

  setEndState();    // 3 Шаг

end;

macro TransferProc()
  getBoolParameters();

  if(transferIsNeeded())
    transferBegin();

    if(transferStatus > 0)  // Перевод успешно завершен
      printReport();

      return true;
    end;
  end;  

  return false;
end;