/*
 *  Вспомогательные функции для заполнения файла выгрузки
 *
 *
 */

Import rsd, PTInter, "globals.mac";

/* Выделить подстроку определенного размера */
private macro SubStrEx( startString : string, startPos : integer, lenString : integer ) : string

  var len = StrLen(startString);

  if( startPos <= 0 ) startPos = 1; end;

  if( lenString < len ) lenString = len; end;

  return SubStr( startString, startPos, lenString );

end;

/* Получить телефон ответственного исполнителя */
macro GetPhoneNumber() : string

  var rs  : RsdRecordset;
  var cmd : RsdCommand;

  var phoneNumber = "";

  cmd = RsdCommand( string("SELECT t_PhoneNumber FROM dofficer_dbt off, dperson_dbt pers "
                          ,"WHERE off.t_PartyID = ? AND off.t_PersonID = pers.t_PartyID "
                          ,"AND pers.t_Oper = ? AND t_PhoneNumber <> ? "
                          ,"ORDER BY t_PhoneNumber") );


  cmd.addParam( "", RSDBP_IN, {OurBank} );
  cmd.addParam( "", RSDBP_IN, {Oper}    );
  cmd.addParam( "", RSDBP_IN, ""        );

  cmd.NullConversion = true;

  rs = RsdRecordset(cmd);

  if( rs.moveNext() )
    phoneNumber = rs.value("t_PhoneNumber");
  end;

  return phoneNumber;

end;

/* Выделить подстроку определенного размера */
macro SubString( startString : @string, maxLen : integer ) : string

  var finalString : string;

  var len = StrLen(startString);

  if( len == 0 )

    finalString = "";

  else

    if( StrLen(startString) <= maxLen )

      finalString = startString;

      startString = "";

    else

      finalString = SubStr( startString, 1, maxLen );
      
      startString = SubStr( startString, maxLen + 1 );

    end;

  end;

  return finalString;

end;

/* Сформировать правильный номер платежного документа для транспортного файла */
macro GetPaymDocNumber( PaymDocNumber : string, NUM_PAY_D : @numeric, REFER_R2 : @string )

  var i : integer;
  var isDigitNumber : bool;

  var maxLenDigit  = 12;
  var maxLenString = 16;

  var len = StrLen(PaymDocNumber);

  if( len == 0 )

    isDigitNumber = false;

  else

    isDigitNumber = true;

    i = 0;

    while( i < len )

      if( Index("0123456789", SubStr(PaymDocNumber, i + 1, 1)) == 0 )

        isDigitNumber = false;
        i = len;

      end;

      i = i + 1;

    end;

  end;

  if( isDigitNumber )

    NUM_PAY_D = SubStrEx( PaymDocNumber, len - maxLenDigit + 1, maxLenDigit );
    REFER_R2  = "0";

  else

    NUM_PAY_D = "0";
    REFER_R2 = SubStrEx( PaymDocNumber, len - maxLenString + 1, maxLenString );

  end;

end;

/* Перевести "Тип участника" из буквенного в числовой */
macro PtTypeToInt( Type )
     if( Type == "Ю" ) return 1;
   elif( Type == "Ф" ) return 2;
   elif( Type == "П" ) return 3;
   elif( Type == "Н" ) return 4;
   end;
   return 0;
end;

private macro ConvertToCountryCodeNum( CodeNum : string ) : string
  var len : integer;

  CodeNum = Trim(CodeNum);

  len = strlen(CodeNum);
  
  if( len > 0 )
    while( len < 3 )
      CodeNum = "0" + CodeNum;
      len = len + 1;
    end;
  end;

  return CodeNum;
end;

/* Собрать код места */
macro GetKODC( Country, Territory )
  
  var KODC = "";
  
  Country = ConvertToCountryCodeNum( Country );

  if( strlen(Trim(Country)) == 3 )
    KODC = Trim( Country );
    if( strlen(Trim(Territory)) == 2 )
      KODC = KODC + Trim( Territory );
    else
      KODC = KODC + "00";
    end;
  end;
  return KODC;

end;


/* Поле KD */
macro GetKD( OpContrParty )
  
  if( (OpContrParty.Type == "Ф") or (OpContrParty.Type == "П") )
    return OpContrParty.CodeDocum;
  end;
  return "0";

end;

/* Поле SD */
macro GetSD( OpContrParty )
  
  if( (OpContrParty.Type == "Ф") or (OpContrParty.Type == "П") )
    return StrUpr( OpContrParty.PaperSeries );
  elif( OpContrParty.Type == "Ю" )
    return OpContrParty.OKPO;
  end;
  return "0";

end;

/* Поле RG */
macro GetRG( OpContrParty )
  
  if( (OpContrParty.Type == "Ю") or (OpContrParty.Type == "П") )
    return OpContrParty.RegNumber;
  end;
  return "0";

end;

/* Поле GR */
macro GetGR( OpContrParty )
  
  if( (OpContrParty.Type == "Ф") or (OpContrParty.Type == "П") )
    return OpContrParty.Birthday;
  elif( OpContrParty.Type == "Ю" )
    return OpContrParty.RegDate;
  end;
  return Date(0, 0, 0);

end;

/* Поле BP */
macro GetBP( OpContrParty )
  
  if( (OpContrParty.Type == "Ф") or (OpContrParty.Type == "П") )
    return OpContrParty.BirthPlace;
  end;
  return "0";

end;


/* Поле PRU */
macro GetPRU( OpContrParty, OpCode )
  
  var i, SizeArray, BreakWhile;
  var PRU = "", TerrNumber = "", KODC = "";

  SizeArray  = OpCode.Size();
  BreakWhile = false;
  i = 0;
  while( (BreakWhile == false) and (i < SizeArray) )
  
    if( SubStr(OpCode[i], 1, 1) == "7" )
      
      BreakWhile = true;
      if( (OpContrParty.ParticipantSign >= 1) and (OpContrParty.ParticipantSign <= 3) )
      
        if( (OpContrParty.ParticipantSign == 1) or (OpContrParty.ParticipantSign == 3) )
          TerrNumber = string( OpContrParty.KFMNumber:5:o );
        elif( OpContrParty.ParticipantSign == 2 )
          TerrNumber = string( OpContrParty.SuperiorKFMNumber:5:o );
        end;

        if( strlen(TerrNumber) == 5 )
          PRU = string(OpContrParty.ParticipantSign) + TerrNumber;
        end;
      end;
    
    elif( SubStr(OpCode[i], 1, 1) == "3" )
      
      if( (OpContrParty.ParticipantSign >= 1) and (OpContrParty.ParticipantSign <= 3) )
        PRU = string(OpContrParty.ParticipantSign);
      
        if( OpContrParty.ParticipantSign == 1 )
          KODC = GetKODC( OpContrParty.szCountryR, OpContrParty.szTerritoryR );
        elif( OpContrParty.ParticipantSign == 2 )
          KODC = GetKODC( OpContrParty.szCountryP, OpContrParty.szTerritoryP );
        elif( OpContrParty.ParticipantSign == 3 )
          KODC = GetKODC( OpContrParty.BankCountry, OpContrParty.BankTerritory );
        end;
      
        if( strlen(Trim(KODC)) == 5 )
          PRU = PRU + KODC;
        else
          PRU = PRU + "0000";
        end;
      end;
    
    end;

    i = i + 1;
  
  end;

  return PRU;

end;


/* Заполнить основную информацию об участнике */
macro ЗаполнитьОсновнуюИнформацию( OpContrParty
                                  ,OpCode
                                  ,TU       : @integer
                                  ,PRU      : @string
                                  ,NAMEU    : @string
                                  ,KODCR    : @string
                                  ,KODCN    : @string
                                  ,AMR_S    : @string
                                  ,AMR_R    : @string
                                  ,AMR_G    : @string
                                  ,AMR_U    : @string
                                  ,AMR_D    : @string
                                  ,AMR_K    : @string
                                  ,AMR_O    : @string
                                  ,ADRESS_S : @string
                                  ,ADRESS_R : @string
                                  ,ADRESS_G : @string
                                  ,ADRESS_U : @string
                                  ,ADRESS_D : @string
                                  ,ADRESS_K : @string
                                  ,ADRESS_O : @string
                                  ,KD       : @string
                                  ,SD       : @string
                                  ,RG       : @string
                                  ,ND       : @string
                                  ,VD1      : @string
                                  ,VD2      : @string
                                  ,VD3      : @date
                                  ,VD4      : @string
                                  ,VD5      : @string
                                  ,VD6      : @date
                                  ,VD7      : @date
                                  ,MC_1     : @string
                                  ,MC_2     : @date
                                  ,MC_3     : @date
                                  ,GR       : @date
                                  ,BP       : @string
                                 )

  /* TU */
  TU = PtTypeToInt( OpContrParty.Type );

  /* PRU    */
  PRU = GetPRU(OpContrParty, OpCode);
  
  /* NAMEU  */
  NAMEU = Trim(OpContrParty.Name);
  if( Trim(OpContrParty.SuperiorName) != "" )
    NAMEU = NAMEU + " " + Trim(OpContrParty.SuperiorName);
  end;

  /* KODCR  */
  if( (OpContrParty.Type == "Ф") or (OpContrParty.Type == "П") )
  
    KODCR = GetKODC( OpContrParty.szCountryR, OpContrParty.szTerritoryR );

  elif( OpContrParty.Type == "Ю" )

    if( Trim(OpContrParty.SuperiorName) != "" )
      KODCR = GetKODC( OpContrParty.SuperiorCountry, OpContrParty.SuperiorTerritory );
    else
      KODCR = GetKODC( OpContrParty.szCountryR, OpContrParty.szTerritoryR );
    end;
   else
     KODCR = GetKODC( OpContrParty.szCountryR, "" );
 end;


  /* KODCN  */
  if( OpContrParty.Type == "Ю" )

    KODCN = GetKODC( OpContrParty.szCountryP, OpContrParty.szTerritoryP );

  elif( (OpContrParty.Type == "Ф") or (OpContrParty.Type == "П") )

    KODCN = GetKODC( OpContrParty.szCountryP, OpContrParty.ForeignPublicFunctionary );

  else
    KODCN = GetKODC( OpContrParty.szCountryP, "" );
  end;


  /* AMR */
  if( (OpContrParty.Type == "Ю") and (Trim(OpContrParty.SuperiorName) != "") )

    AMR_S = OpContrParty.SuperiorAddrOKATO;
    AMR_R = OpContrParty.SuperiorAddrRegion;
    AMR_G = OpContrParty.SuperiorAddrPlaceName;
    AMR_U = OpContrParty.SuperiorAddrStreet;
    AMR_D = OpContrParty.SuperiorAddrHouse;
    AMR_K = OpContrParty.SuperiorAddrBuilding;
    AMR_O = OpContrParty.SuperiorAddrOffice;

  else

    AMR_S = OpContrParty.RegAddrOKATO;
    AMR_R = OpContrParty.RegAddrRegion;
    AMR_G = OpContrParty.RegAddrPlaceName;
    AMR_U = OpContrParty.RegAddrStreet;
    AMR_D = OpContrParty.RegAddrHouse;
    AMR_K = OpContrParty.RegAddrBuilding;
    AMR_O = OpContrParty.RegAddrOffice;
    
  end;

  /* ADRESS */
  ADRESS_S = OpContrParty.FactAddrOKATO;
  ADRESS_R = OpContrParty.FactAddrRegion;
  ADRESS_G = OpContrParty.FactAddrPlaceName;
  ADRESS_U = OpContrParty.FactAddrStreet;
  ADRESS_D = OpContrParty.FactAddrHouse;
  ADRESS_K = OpContrParty.FactAddrBuilding;
  ADRESS_O = OpContrParty.FactAddrOffice;

  /* KD */
  KD = GetKD( OpContrParty );

  /* SD */
  SD = GetSD( OpContrParty );

  /* RG */
  RG = GetRG( OpContrParty );

  /* ND */
  ND = OpContrParty.INN;

  /* VD */
  if( (OpContrParty.Type == "П") or (OpContrParty.Type == "Ф") )
  
    VD1 = OpContrParty.PaperNumber;
    VD2 = OpContrParty.PaperIssuer;
    VD3 = OpContrParty.PaperIssuedDate;

    VD4 = OpContrParty.RightVisitDocCode;
    VD5 = OpContrParty.RightVisitDocSeries + OpContrParty.RightVisitDocNumber;
    VD6 = OpContrParty.RightVisitDocDateStart;
    VD7 = OpContrParty.RightVisitDocDateEnd;

  end;

  /* MC */
  if( (OpContrParty.Type == "П") or (OpContrParty.Type == "Ф") )
  
    MC_1 = OpContrParty.MigratoryCardNumber;
    MC_2 = OpContrParty.MigratoryCardDateStart;
    MC_3 = OpContrParty.MigratoryCardDateEnd;

  end;
  
  /* GR */
  GR = GetGR( OpContrParty );

  /* BP */
  BP = GetBP( OpContrParty );

end;

/* Заполнить информацию о банках участника */
macro ЗаполнитьИнформациюОБанках( OpContrParty
                                 ,VP        : @string
                                 ,ACC_B     : @string
                                 ,ACC_COR_B : @string
                                 ,NAME_IS_B : @string
                                 ,BIK_IS_B  : @string
                                 ,CARD_B    : @integer
                                 ,NAME_B    : @string
                                 ,KODCN_B   : @string
                                 ,BIK_B     : @string
                                 ,NAME_R    : @string
                                 ,KODCN_R   : @string
                                 ,BIK_R     : @string
                                )
  /* VP */
  VP = OpContrParty.BeneficiarySign;

  /* ACC_B */
  ACC_B = OpContrParty.Account;

  /* ACC_COR_B */
  ACC_COR_B = OpContrParty.CorrAccount;

  /* NAME_IS_B */
  NAME_IS_B = OpContrParty.CardIssuerName;

  /* BIK_IS_B */
  BIK_IS_B = OpContrParty.CardIssuerCode;

  /* CARD_B */
  CARD_B = OpContrParty.CardHolderSign;

  /* NAME_B */
  NAME_B = OpContrParty.BankName;

  /* KODCN_B */
  KODCN_B = GetKODC( OpContrParty.BankCountry, OpContrParty.BankTerritory );

  /* BIK_B */
  BIK_B = OpContrParty.BankCode;

  /* NAME_R */
  NAME_R = OpContrParty.CorrName;

  /* KODCN_R */
  KODCN_R = GetKODC( OpContrParty.CorrCountry, OpContrParty.CorrTerritory );

  /* BIK_R */
  BIK_R = OpContrParty.CorrCode;

end;

/* Есть ли символы кроме цифр в строке */
macro StrIsDigit( test_str )
  var i, n;
  var cur_symb;
  var is_digit;
  n = StrLen(test_str);
  i = 1;
  is_digit = true;
  while( (is_digit) and (i <= n) )
    cur_symb = SubStr( test_str, i, 1 );
    if( (CodeFor(cur_symb) < CodeFor("0")) or (CodeFor(cur_symb) > CodeFor("9")) )
      is_digit = false;
    end;
    i = i + 1;
  end;
  return is_digit;
end;

/* Разделить рег.номер нашего банка на 2 части */
macro SplitRegNum( REGN : @string, NUMBF_S : @string, RegNumber : string )

  var pos, CurRegNumber;
  var stat = true;
  REGN    = "";
  NUMBF_S = "";
  
  pos = StrBrk( RegNumber, "/" );
  if( pos == 0 )
    REGN = RegNumber;
  else
    REGN = SubStr( RegNumber, 1, pos - 1 );
    CurRegNumber = RegNumber;
    while( pos != 0 )
      NUMBF_S = SubStr( CurRegNumber, pos + 1 );
      CurRegNumber = NUMBF_S;
      pos = StrBrk( CurRegNumber, "/" );
      if( pos ) stat = false; end;
    end;
  end;

  SetParm( 0, REGN    );
  SetParm( 1, NUMBF_S );

  return stat

end;

/* Получить номер регистрации банка */
macro ПолучитьНомерРегистрацииБанка( REGN : @string, NUMBF_S : @string, BankID : integer )
  
  var RegNumber : string;
  var ValidNumber = true;

  REGN    = "";
  NUMBF_S = "";

  if( BankID == null ) BankID = {OurBank}; end;

  RegNumber = GetCodeParty( BankID, PTCK_BANKREGNUM );
  if( RegNumber == null ) RegNumber = ""; end;

  if( Trim(RegNumber) != "" )
    ValidNumber = SplitRegNum( REGN, NUMBF_S, RegNumber );
  end;
  
end;

/* Получить основной код операции */
macro GetVO( VOmain, VOArray )

  var i, SizeArray;
  var VO = "";

  VO = VOmain;

  if( (VO == "") AND (valtype(VOArray[0]) != V_UNDEF) )
     VO = VOArray[0];
  end;

  return VO;

end;

/* Получить все основные коды операции */
macro GetDOP_V( VO, VOArray )

  var i, SizeArray;
  var StringCode = "";

  SizeArray = VOArray.Size();
  i = 0;
  
  StringCode = "";
  while( (i < SizeArray) )
    
    if( (VOArray[i] != VO) AND (valtype(VOArray[i]) != V_UNDEF) )
      if( StringCode != "" ) StringCode = StringCode + ","; end;
      StringCode = StringCode + VOArray[i];
    end;

    i = i + 1;
  
  end;

  return StringCode;

end;


/* Получить строку с кодами операции */
macro GetPRIZ6001( PRIZ6001, VO, NOmain )

  var i, SizeArray;
  var StringCode = "";
  
  SizeArray = PRIZ6001.Size();
  i = 0;

  if(NOmain != "")
    StringCode = NOmain;
  end;

  while( i < SizeArray )
    if(PRIZ6001[i] != NOmain)
      if( StringCode != "" ) StringCode = StringCode + ","; end;
      StringCode = StringCode + PRIZ6001[i];
    end;
    i = i + 1;
  end;

  return StringCode;

end;




macro ПолучитьАдресУчастника(opcntrpt, type)
  var Address       = "";
  var AddrCountry   = "";
  var AddrOKATO     = "";
  var AddrRegion    = "";
  var AddrPlaceName = "";
  var AddrStreet    = "";
  var AddrHouse     = "";
  var AddrBuilding  = "";
  var AddrOffice    = "";

  var error = 0; 
  file country(country) key 3;
  file objattr(objattr) key 2;

/*
1.Значение формируется из полей "Адрес места регистрации" сведений об участнике операции: 
  Наименование страны + 
  наименование региона, код ОКАТО которого указан в сведениях об участнике + 
  Наименование района + 
  наименование населенного пункта + 
  наименование улицы + 
  номер дома + 
  номер корпуса + 
  номер квартиры.

2.Регион указывается с учетом наименования административно-территориальной единицы 
(например, Алтайский край, Республика Адыгея и пр.). 

3.Отдельные части адреса (т.е. название страны, региона, города и пр.) 
разделяются символами ", ". Если какая-либо часть адреса не заполнена, 
то разделитель в виде символов ", " после отсутствующей части не указывается.
*/

  if(type == 1)
    AddrCountry   = opcntrpt.szCountryR      ;
    AddrOKATO     = opcntrpt.RegAddrOKATO    ;
    AddrRegion    = opcntrpt.RegAddrRegion   ;
    AddrPlaceName = opcntrpt.RegAddrPlaceName;
    AddrStreet    = opcntrpt.RegAddrStreet   ;
    AddrHouse     = opcntrpt.RegAddrHouse    ;
    AddrBuilding  = opcntrpt.RegAddrBuilding ;
    AddrOffice    = opcntrpt.RegAddrOffice   ;
  elif (type == 2)
    AddrCountry   = opcntrpt.szCountryP       ;
    AddrOKATO     = opcntrpt.FactAddrOKATO    ;
    AddrRegion    = opcntrpt.FactAddrRegion   ;
    AddrPlaceName = opcntrpt.FactAddrPlaceName;
    AddrStreet    = opcntrpt.FactAddrStreet   ;
    AddrHouse     = opcntrpt.FactAddrHouse    ;
    AddrBuilding  = opcntrpt.FactAddrBuilding ;
    AddrOffice    = opcntrpt.FactAddrOffice   ;
  else
    AddrCountry   = opcntrpt.SuperiorCountry      ;
    AddrOKATO     = opcntrpt.SuperiorAddrOKATO    ;    
    AddrRegion    = opcntrpt.SuperiorAddrRegion   ;   
    AddrPlaceName = opcntrpt.SuperiorAddrPlaceName;
    AddrStreet    = opcntrpt.SuperiorAddrStreet   ;   
    AddrHouse     = opcntrpt.SuperiorAddrHouse    ;    
    AddrBuilding  = opcntrpt.SuperiorAddrBuilding ; 
    AddrOffice    = opcntrpt.SuperiorAddrOffice   ;   
  end;
  
  if(AddrCountry != "")
    ClearRecord(country);
    country.codenum3 = AddrCountry;

    if((getGE(country)) and (country.codenum3 == AddrCountry) and (country.FullName != ""))
      if(Address != "") Address = Address + ", "; end;
      Address = Address + country.FullName;
    end;
  end;

  if(AddrOKATO != "")
    ClearRecord(objattr);
    objattr.ObjectType = 3;
    objattr.GroupID    = 12;
    objattr.NumInList  = AddrOKATO;

    if((getEQ(objattr)) and (objattr.FullName != ""))
      if(Address != "") Address = Address + ", "; end;
      Address = Address + objattr.FullName;
    elif((getEQ(objattr)) and (substr(objattr.NumInList, 1, 2) == AddrOKATO) and (objattr.FullName != ""))
      if(Address != "") Address = Address + ", "; end;
      Address = Address + objattr.FullName;
    end;
  end;

  if( AddrRegion != "")
    if(Address != "") Address = Address + ", "; end;
    Address = Address + AddrRegion;
  end;

  if( AddrPlaceName != "")
    if(Address != "") Address = Address + ", "; end;
    Address = Address + AddrPlaceName;
  end;

  if( AddrStreet != "")
    if(Address != "") Address = Address + ", "; end;
    Address = Address + AddrStreet;
  end;

  if( AddrHouse != "")
    if(Address != "") Address = Address + ", "; end;
    Address = Address + "д. ";
    Address = Address + AddrHouse;
  end;

  if( AddrBuilding != "")
    if(Address != "") Address = Address + ", "; end;
    Address = Address + "к. ";
    Address = Address + AddrBuilding;
  end;

  if( AddrOffice != "")
    if(Address != "") Address = Address + ", "; end;
    Address = Address + "кв. ";
    Address = Address + AddrOffice;
  end;

  return Address;
end;


macro ПолучитьДокументУчастника(opcntrpt)
  var PaperName = "";
  var error = 0; 
  file fmpaper(fmpaper) key 0;

  if(opcntrpt.CodeDocum != "")
    ClearRecord(fmpaper);
    fmpaper.Code = opcntrpt.CodeDocum;
    if(getEQ(fmpaper))
      PaperName = fmpaper.Name;
    end;
  end;

  return PaperName;
end;

