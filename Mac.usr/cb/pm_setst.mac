//-----------------------------------------------------------------------------
// Блок     : Вне блока
// Шаг      : Вне шага
// Описание : Общие функции и переменные для макросов шагов
//-----------------------------------------------------------------------------
// KS 04.12.2013 Перенос пользовательских доработок  в 31ю сборку
IMPORT InsCarryDoc, PaymInter, PSInter, pm_const, BankInter, OprInter, globals, pm_common;
/*SDA 27.03.2012 - импорт для корректировки сумм претензий */
//import "acs_func.mac";
// SDA 17.04.2012 
import "fg_Life_parm.mac";
private var fgBank = fg_life_subject({OurBank});
//-----------------------------------------------------------------------------
// Установить статус первичного документа
//-----------------------------------------------------------------------------
/*macro PM_SetPrimDocumentState( Payment:RsbPayment, state:integer )*/
macro PM_SetPrimDocumentState( Payment:RsbPayment, state )
  var obj:object;

  if( Payment.DocKind == DLDOC_MEMORIALORDER )
    obj = GenObject( "RsbMemorialOrder", Payment.DocumentID );
    if( state == DOCUMENT_ST_DEFERRED )
      obj.State = CB_DOC_STATE_DEFERRED;
    elif( state == DOCUMENT_ST_WORKING )
      obj.State = CB_DOC_STATE_WORKING;
    elif( state == DOCUMENT_ST_REJECTED )
      obj.State = CB_DOC_STATE_REJECTED;
    elif( state == DOCUMENT_ST_CLOSED )
      obj.State = CB_DOC_STATE_CLOSED;
    end;
  end;

  if( Payment.DocKind == CB_MULTYDOC )
    obj = GenObject( "RsbMultyDoc", Payment.DocumentID );
    if( state == DOCUMENT_ST_DEFERRED )
      obj.Status = MCDOC_STATUS_POST;
    elif( state == DOCUMENT_ST_WORKING )
      obj.Status = MCDOC_STATUS_OPEN;
    elif( state == DOCUMENT_ST_REJECTED )
      obj.Status = MCDOC_STATUS_REJECTED;
    elif( state == DOCUMENT_ST_CLOSED )
      obj.Status = MCDOC_STATUS_CLOSE;
    end;
  end;

  if( ( Payment.DocKind == PS_CPORDER ) or
      ( Payment.DocKind == BBANK_CPORDER ) )
    if( Payment.DocKind == PS_CPORDER )
      obj = GenObject( "RsbPsCpOrder", Payment.DocumentID );
    else
      obj = GenObject( "RsbBbCpOrder", Payment.DocumentID );
    end;

    if( state == DOCUMENT_ST_DEFERRED )
      obj.CurrentState = CP_ST_DEFERRED;
    elif( state == DOCUMENT_ST_WORKING )
      obj.CurrentState = CP_ST_WORKING;
    elif( state == DOCUMENT_ST_REJECTED )
      obj.CurrentState = CP_ST_REJECTED;
      // Сделать возможное сообщение невалидным
      UnvalidPaymentMessage( Payment.PaymentID);
    elif( state == DOCUMENT_ST_CLOSED )
      obj.CurrentState = CP_ST_CLOSED;
    end;
  end;

  if( Payment.DocKind == PS_PAYORDER )
    obj = GenObject( "RsbPsPayOrder", Payment.DocumentID );
    if( state == DOCUMENT_ST_DEFERRED )
      obj.CurrentState = PSPO_ST_DEFERRED;
    elif( state == DOCUMENT_ST_WORKING )
      obj.CurrentState = PSPO_ST_WORKING;
    elif( state == DOCUMENT_ST_I1 )
      obj.CurrentState = PSPO_ST_I1;
    elif( state == DOCUMENT_ST_I2 )
      obj.CurrentState = PSPO_ST_I2;
    elif( state == DOCUMENT_ST_IWP )
      obj.CurrentState = PSPO_ST_IWP;
    elif( state == DOCUMENT_ST_REJECTED )
      obj.CurrentState = PSPO_ST_REJECTED;
    elif( state == DOCUMENT_ST_CLOSED )
      obj.CurrentState = PSPO_ST_CLOSED;
    end;
  end;

  if( Payment.DocKind == PS_INRQ )
    obj = GenObject( "RsbRequestOrder", Payment.DocumentID );
    if( state == DOCUMENT_ST_DEFERRED )
      obj.State = PSINRQ_ST_DEFERRED;
    elif( state == DOCUMENT_ST_WORKING )
      obj.State = PSINRQ_ST_WORKING;
    elif( state == DOCUMENT_ST_I2 )
      obj.State = PSINRQ_ST_I2;
    elif( state == DOCUMENT_ST_IWP )
      obj.State = PSINRQ_ST_IWP;
    elif( state == DOCUMENT_ST_REJECTED )
      obj.State = PSINRQ_ST_REJECTED;
    elif( state == DOCUMENT_ST_CLOSED )
      obj.State = PSINRQ_ST_CLOSED;
    end;
  end;

  if( ( Payment.DocKind == DLDOC_BANKPAYMENT ) or
      ( Payment.DocKind == DLDOC_BANKCLAIM ) )

    if( Payment.DocKind == DLDOC_BANKPAYMENT )
      obj = GenObject( "RsbBankPayment", Payment.DocumentID );
    else
      obj = GenObject( "RsbBankClaim", Payment.DocumentID );
    end;

    if( state == DOCUMENT_ST_DEFERRED )
      obj.Status = MEMORDER_STATUS_POST;
    elif( state == DOCUMENT_ST_WORKING )
      obj.Status = MEMORDER_STATUS_OPEN;
    elif( state == DOCUMENT_ST_REJECTED )
      obj.Status = MEMORDER_STATUS_REJECTED;
    elif( state == DOCUMENT_ST_CLOSED )
      obj.Status = MEMORDER_STATUS_CLOSE;
    end;
  end;

  if( ( Payment.DocKind == CASH_BOF_ADDORDER ) or
      ( Payment.DocKind == CASH_PS_INCORDER  ) or
      ( Payment.DocKind == CASH_PS_OUTORDER  ) or
      ( Payment.DocKind == CASH_BOF_INCORDER ) or
      ( Payment.DocKind == CASH_BOF_OUTORDER ) or
      ( Payment.DocKind == DLDOC_INOUTORDER ))

    if( Payment.DocKind == CASH_BOF_ADDORDER )
      obj = GenObject( "RsbBBAddCashOrder", Payment.DocumentID );
    elif( Payment.DocKind == CASH_BOF_INCORDER )
      obj = GenObject( "RsbBBIncCashOrder", Payment.DocumentID );
    elif( Payment.DocKind == CASH_BOF_OUTORDER )
      obj = GenObject( "RsbBBOutCashOrder", Payment.DocumentID );
    elif( Payment.DocKind == CASH_PS_INCORDER )
      obj = GenObject( "RsbPSInCashOrder", Payment.DocumentID );
    elif( Payment.DocKind == DLDOC_INOUTORDER ) 
      obj = GenObject( "RsbBBInOutCashOrder", Payment.DocumentID );
    else //CASH_PS_OUTORDER
      obj = GenObject( "RsbPSOutCashOrder", Payment.DocumentID );
    end;

    if( state == DOCUMENT_ST_DEFERRED )
      obj.Status = STAT_CASH_ORDER_POST;
    elif( state == DOCUMENT_ST_WORKING )
      obj.Status = STAT_CASH_ORDER_OPEN;
    elif( state == DOCUMENT_ST_REJECTED )
      obj.Status = STAT_CASH_ORDER_REJECTED;
    elif( state == DOCUMENT_ST_CLOSED )
      obj.Status = STAT_CASH_ORDER_CLOSE;
    end;
  end;

  if( Payment.Dockind == DLDOC_SUMMARY_MEMORDER )

    if( state == DOCUMENT_ST_DEFERRED )
      Payment.PaymStatus = PM_PREPARING;
    elif( state == DOCUMENT_ST_WORKING )
      Payment.PaymStatus = PM_NOTFINISHED;
    elif( state == DOCUMENT_ST_REJECTED )
      Payment.PaymStatus = PM_REJECTED;
    elif( state == DOCUMENT_ST_CLOSED )
      Payment.PaymStatus = PM_FINISHED;
    end;
  
  end;
  
  if( Payment.Dockind == DLDOC_BANKORDER )

    if( state == DOCUMENT_ST_DEFERRED )
      Payment.PaymStatus = PM_PREPARING;
    elif( state == DOCUMENT_ST_WORKING )
      Payment.PaymStatus = PM_NOTFINISHED;
    elif( state == DOCUMENT_ST_REJECTED )
      Payment.PaymStatus = PM_REJECTED;
    elif( state == DOCUMENT_ST_CLOSED )
      Payment.PaymStatus = PM_FINISHED;
    elif( state == DOCUMENT_ST_I2 )
      Payment.PaymStatus = PM_I2PLACED;
    elif( state == DOCUMENT_ST_IWP )
      Payment.PaymStatus = PM_IWPPLACED;
    end;

  end;

/*SDA state == null специальным образом передается для выполнения корректировок по первичке */
 if (state == null)
/*SDA номер операциониста на первичке по номеру инициатора операции*/
//17.04.2012 SDA - Нигде кроме пойдема изменения номера опера по первичке не требуется - сдаюсь.
if (fgBank.is_GO)
  obj.oper = Payment.Oper;
end;
/*SDA корректировка оригинов для клиентских платежей */
   if (( Payment.DocKind == PS_PAYORDER ) and 
       ((obj.Origin == 2) or (obj.Origin == 6)))
       Payment.Origin = PAYMENT_OR_ELECTR;
       Payment.PrimDocOrigin = PAYMENT_OR_ELECTR;
       // KS 13.02.2012 I-00152754  в документах интернет-клиента в Волгограде не передаются пачки
       if ( (Payment.numberpack == 0) and (obj.Origin == 2) )
         if (Payment.ReceiverBankID == {OurBank})
           Payment.numberpack = 603;
         else
           Payment.numberpack = 905;
         end;
       end;
       // KS END
   end;

 end;



  onerror(x);
end;

// создание резерва с предварительной проверкой свободного остатка
macro CheckRestAndMakeReserve( Payment: RsbPayment, 
                               AllowOverdraft: bool, 
                               CheckI2: bool, 
                               CheckWaiting: bool, 
                               UseReserve: bool, 
                               РНО_Статус: integer, 
                               SkipArest: bool, 
                               IsInsLimUse: bool, 
                               NeedMakeReserve:bool, 
                               ReasonID:@integer, 
                               CheckIWP:bool,
                               CheckILORO:bool
                             ) : integer;
  var AddPI:RsbPIPayment    = Payment.PIList(PRT_Debet);
  var CurrAddPI:TRecHandler = TRecHandler( "pmaddpi.dbt" );
  var IsNext                = AddPI.First(PRT_Debet);
  var stat                  = 0;
  var SumOverdraft : money = $0;
  var TRecAccount:TRecHandler = TRecHandler("account.dbt");

  if( (ValType(SkipArest) == V_BOOL) and (SkipArest == true))
  elif( РНО_Статус == OPR_PAYM_ST_PERMISSION_YES )
    SkipArest = true;
  elif( РНО_Статус == OPR_PAYM_ST_PERMISSION_NO )
    SkipArest = false;
  elif( (ValType(SkipArest) == V_UNDEF) or (SkipArest == null) )
    SkipArest = false;
  end;

  if(ValType(NeedMakeReserve) == V_UNDEF)
    NeedMakeReserve = true;
  end;

  if(ValType(CheckIWP) == V_UNDEF)
//    CheckIWP = true;
    CheckIWP = false;  // SDA 20/03/2012 Если явно не указаноа необходимость проверки наличия документов КОР - не учитываем.
  end;

  if(ValType(CheckILORO) == V_UNDEF)
    CheckILORO = true;
  end;

  ReasonID = 0;

  if ((Payment.DocKind == 286) and   // для банковских ордеров 
      (( Payment.FeeType == 3 ) or  // SDA 20/03/2012 Отказ от резервирования для документов единовременной 
       ( Payment.FeeType == 1 )))    // и периодической коммиссиий в рамках оптимизации быстродействия
     NeedMakeReserve = false;
     CheckIWP = false;
  end;


/*SDA -  наличие денег на активном счете кассы */
  if ((Payment.DocKind == CASH_BOF_INCORDER) or (Payment.DocKind == CASH_PS_INCORDER))
      return stat;
  end;
/*SDA*****************/

//SDA 04.04.2012 - отключено - корректировка внесена в пакет
//SDA 06.04.2012  - включено обратно - не взошло с пакетом
//  КорректировкаСуммПр( Payment.PayerAccount );

  if( Payment.PIList(PRT_Debet).Size > 0 ) // Если есть разноска по дебету

    while( (stat == 0) and (IsNext == 0) and (AddPI.Current(CurrAddPI) == 0) )
      stat = Payment.CheckRestAndMakeReserve( CurrAddPI.rec.Account, CurrAddPI.rec.Chapter, CurrAddPI.rec.FIID, 
                                              CurrAddPI.rec.FuturePayerAmount, Payment.ValueDate, CR_CHECKREST, AllowOverdraft, CheckI2, 
                                              CheckWaiting, UseReserve, SkipArest, SumOverdraft, NeedMakeReserve, ReasonID, CheckIWP,
                                              CheckILORO, CurrAddPI.rec.PmAddPIID );
      // Если использовался овердрафт, то вставляем запись об его использовании - только для счетов с типом '%V%'
      if(( SumOverdraft > $0 ) and IsInsLimUse and 
           PM_GetAccountRecord( CurrAddPI.rec.Account, CurrAddPI.rec.FIID, CurrAddPI.rec.Chapter, TRecAccount ) and 
           Index( TRecAccount.rec.Type_Account, "V") )
        if( OV_GetOverdraftProcMode() == RBOV_MODE_INTEGRATED )
          if(InsertLimitUseTry_Int( CurrAddPI.rec.FIID, CurrAddPI.rec.Chapter, CurrAddPI.rec.Account, SumOverdraft, Payment.ValueDate, true ))
            MsgBox("Ошибка при вставке изменения лимита счета");
            return 1;
          end;
        end;
      end;

      IsNext = AddPI.Next();
    end;
  else // проверяем счет плательщика


// SDA - в Payment.FuturePayerAmount вообще мусор какой то...
/*    if( Payment.FuturePayerAmount != 0 )
      stat = Payment.CheckRestAndMakeReserve( Payment.FuturePayerAccount, Payment.Chapter, Payment.FuturePayerFIID, 
                                              Payment.FuturePayerAmount, Payment.ValueDate, CR_CHECKREST, AllowOverdraft, CheckI2, 
                                              CheckWaiting, UseReserve, SkipArest, SumOverdraft, NeedMakeReserve, ReasonID, CheckIWP, CheckILORO );
      // Если использовался овердрафт, то вставляем запись об его использовании - только для счетов с типом '%V%'
      if(( SumOverdraft > $0 ) and IsInsLimUse and 
           PM_GetAccountRecord( Payment.FuturePayerAccount, Payment.FuturePayerFIID, Payment.Chapter, TRecAccount ) and 
           Index( TRecAccount.rec.Type_Account, "V") )
        if( OV_GetOverdraftProcMode() == RBOV_MODE_INTEGRATED )
          if(InsertLimitUseTry_Int( Payment.FuturePayerFIID, Payment.Chapter, Payment.FuturePayerAccount, SumOverdraft, Payment.ValueDate, true ))
            MsgBox("Ошибка при вставке изменения лимита счета");
            return 1;
          end;
        end;
      end;

    else
*/
      //TAM I-00267440-2 15.10.2012
      if(Payment.Dockind == 203)
        stat = Payment.CheckRestAndMakeReserve( Payment.PayerAccount, Payment.Chapter, Payment.PayerFIID, 
                                                Payment.FuturePayerAmount, Payment.ValueDate, CR_CHECKREST, AllowOverdraft, CheckI2, 
                                                CheckWaiting, UseReserve, SkipArest, SumOverdraft, NeedMakeReserve, ReasonID, CheckIWP, CheckILORO );
      else
        stat = Payment.CheckRestAndMakeReserve( Payment.PayerAccount, Payment.Chapter, Payment.PayerFIID, 
                                              Payment.PayerAmount, Payment.ValueDate, CR_CHECKREST, AllowOverdraft, CheckI2, 
                                              CheckWaiting, UseReserve, SkipArest, SumOverdraft, NeedMakeReserve, ReasonID, CheckIWP, CheckILORO );
      end;
      // Если использовался овердрафт, то вставляем запись об его использовании - только для счетов с типом '%V%'
      if(( SumOverdraft > $0 ) and IsInsLimUse and 
           PM_GetAccountRecord( Payment.FuturePayerAccount, Payment.FuturePayerFIID, Payment.Chapter, TRecAccount ) and 
           Index( TRecAccount.rec.Type_Account, "V") )
        if( OV_GetOverdraftProcMode() == RBOV_MODE_INTEGRATED )
          if( InsertLimitUseTry_Int( Payment.PayerFIID, Payment.Chapter, Payment.PayerAccount, SumOverdraft, Payment.ValueDate, true ) )
            MsgBox("Ошибка при вставке изменения лимита счета");
            return 1;
          end;
        end;
      end;

//SDA
/*    end;*/
  end; 


/*SDA - раздражает, а пользы никакой...
  if( stat == MR_INVALIDACCOUNT )
    msgbox("Неверный счет плательщика");

  elif( (stat == MR_NOFREEAMOUNT) and (ReasonID > 0) )
    msgbox("На счет плательщика наложено ограничение операций");

  elif( stat == MR_NOFREEAMOUNT )
    msgbox("Недостаточно средств на счете плательщика");
  end;
*/
  /* EVG 3/02/2012 Вернул сообщение по просьбе Ирины Ивановой */
  if( (stat == MR_NOFREEAMOUNT) and (ReasonID > 0) )
    msgbox("На счет плательщика наложено ограничение операций");
  end;

  return stat;
end;  
