// шаг пользовательской операции 5500 "Списание доходов и расходов"
// изменил vihrov 28.12.2011 C-8028
// 17.02.2012 vihrov I-00154847-2
// Teleshova 29.12.2014 R-522073-2
// Gurin S. 07.12.2015 HotFix 2031.19.25 (Life_1 1.3)_12

import InsCarryDoc, d_r_imp;
import oralib, likepy, rsb_const;
import lib_account;
import lib_fg;

var stat = 0;
var CountErrors = 0;
var CountDocs = 0;

private macro _GetOFRRecID(OFRCode, OpenDate)
  var select = "";
  var params : TArray;
  var rs;

  select = select + "SELECT t_RecID ";
  select = select + "  FROM dopusymb_dbt ";
  select = select + " WHERE t_Code = :OFRCode ";
  select = select + "   AND t_OpenDate <= :OpenDate ";
  select = select + "   AND DECODE(t_CloseDate, TO_DATE('01.01.0001', 'DD.MM.YYYY'), TO_DATE('31.12.9999', 'DD.MM.YYYY'), t_CloseDate) >= :CloseDate ";

  params = makeArray( SQLParam( "OFRCode", OFRCode ),
                      SQLParam( "OpenDate", OpenDate ),
                      SQLParam( "CloseDate", OpenDate ));
            
  rs = execSQLselect( select, params, false );

  if(rs and rs.moveNext())
    return int(rs.value(0));
  end;
  return 0;
end;

private macro _GetOFRCode(AccountNum, BalanceNum)
  var OFRCode = "";
  var SymbolsNum = 0;
  var BalanceMask1 = "";
  var BalanceMask2 = "";
  var BalanceMask3 = "";


  GetRegistryValue("REPTREG\\REP_GROUPS\\ФОРМА 102\\ЧИСЛО ЗНАКОВ СИМВОЛА В СЧЕТЕ", V_INTEGER, SymbolsNum, 0);
  if(SymbolsNum == 4)
    GetRegistryValue("REPTREG\\REP_GROUPS\\ФОРМА 102\\БАЛАНСОВЫЕ ДЛЯ СИМВОЛА 1ABCD", V_STRING, BalanceMask1, "");
    GetRegistryValue("REPTREG\\REP_GROUPS\\ФОРМА 102\\БАЛАНСОВЫЕ ДЛЯ СИМВОЛА 2ABCD", V_STRING, BalanceMask2, "");
    GetRegistryValue("REPTREG\\REP_GROUPS\\ФОРМА 102\\БАЛАНСОВЫЕ ДЛЯ СИМВОЛА 3ABCD", V_STRING, BalanceMask3, "");

    if  (CompareStrWithMasks(BalanceMask1, BalanceNum) == 0)
      OFRCode = "1";
    elif(CompareStrWithMasks(BalanceMask2, BalanceNum) == 0)
      OFRCode = "2";
    elif(CompareStrWithMasks(BalanceMask3, BalanceNum) == 0)
      OFRCode = "3";
    end;
  else
    SymbolsNum = 5;
  end;

  OFRCode = OFRCode + substr(AccountNum, 14, SymbolsNum);

  return OFRCode;
end;

/*
 * Обработка одного счета
 */
macro ProcessOneAccount(accRec, Rest)
  record accToRec("account.dbt");
  record acbToRec("accblnc.dbt");

  Var ErrorMsg:string = "";     

  var CurrencyTo = ALLFININSTR;
  var AccountTo = GetAccountTo(accRec, @CurrencyTo);
  var Autokey = 0;
  var OperID = 0;
  var ClientID = 0;

  var Rest_NatCur = $0;
  var doc;
  var Sum : money;

  if(not CheckBalanceQuiet(substr(AccountTo, 1, 5), true, true))
    CountErrors = CountErrors + 1;
    println("Проводка не сформирована. Балансовый счет " + AccountTo + " не существует");
    return;
  end;

  if(GetAccountRecord(accToRec, ternary(substr(AccountTo,1,1)=="9",4,1), AccountTo, CurrencyTo)) // изменил vihrov 28.12.2011 C-8028-6
    if(accToRec.Open_Close == "З")
      CountErrors = CountErrors + 1;
      println(AccountTo + ": Лицевой счет для зачисления средств " + AccountTo + " существует, но закрыт");
      return;
    end;
  else
    
    if(accRec.Department != {OperDprt})
      OperID = GetDprtSecondPerson(accRec.Department);
      ClientID = GetDprtParty(accRec.Department);
    else
      OperID = {oper};
      ClientID = {OurBank};
    end;

    if(not OperID)
      CountErrors = CountErrors + 1;
      println(AccountTo + ": При открытии счета возникла ошибка: Не найден сотрудник с признаком второго лица в филиале " + accRec.Department);
      return;
    end;

    ClearRecord(accToRec);
    ClearRecord(acbToRec);    
    
    accToRec.Account      = AccountTo;
    if (not _bank.is_EXV)
      accToRec.Opucode      = Acc_GetOpuSymbol (AccountTo); // 2013-01-06 zip_z.
    end;
    accToRec.Chapter      = ternary(substr(AccountTo,1,1)=="9",4,1); // изменил vihrov 28.12.2011 C-8028-6
    accToRec.Balance      = substr(AccountTo, 1, 5);
    accToRec.Kind_Account = GetKindAccount(accToRec.Balance);
    accToRec.Oper         = OperID;
    accToRec.Client       = ClientID;
    accToRec.Open_Date    = dr.Date_Carry;
    accToRec.Department   = accRec.Department;
    accToRec.Branch       = accRec.Department;
    accToRec.Code_Currency= CurrencyTo;

    if(CompareStrWithMasks("7*", accRec.Account) == 0)
      if(accRec.OPUCode != "")
        accToRec.OPUCode = accRec.OPUCode;
      else
        if(accRec.Open_Date < DateBegin446P)
          accToRec.OPUCode = _GetOFRCode(accToRec.Account, accToRec.Balance);
        end;
      end;
      if(accToRec.OPUCode != "")
        accToRec.OFRRecID = _GetOFRRecID(accToRec.OPUCode, accToRec.Open_Date);
      end;
    end;

    acbToRec.Account       = accToRec.Account;
    acbToRec.Chapter       = accToRec.Chapter;
    acbToRec.Balance0      = accToRec.Balance;
    acbToRec.Code_Currency = accRec.Code_Currency;
    
    /*14.01.2015 LAO Для СПОД должны переноситься типы Н*/
    if (index(accRec.Type_Account, "Н"))
        accToRec.Type_Account = "Н";
    end;
    
    
    if(not AccountHasBeenInserted(accToRec))
      if(not InsertAccount(accToRec, acbToRec, Autokey, true))
        CountErrors = CountErrors + 1;
        println(AccountTo + ": При открытии счета возникла ошибка: " + GetErrMsg());
        return;
      end;
    end;
    
    if(CheckAccountCategory( accRec, КатегорияДляОтчетности, "", "V", dr.Date_Carry ))
      if(not SetAccountCategory( accToRec, Autokey, КатегорияДляОтчетности, "V" ))
          CountErrors = CountErrors + 1;
          println("При установке значения категории возникла ошибка: " + GetErrMsg());
        end;
      end;
  end;

  /*
   * Формирование проводки списания
   */
  if((accRec.Code_Currency != NATCUR) and (index(accRec.Type_Account, "Н"))) // СчетСписания - валютный с непереоцениваемым покрытием
    Rest_NatCur = RestA( accRec.Account, dr.Date_Carry, null, accRec.Chapter, accRec.Code_Currency, NATCUR );
    if(abs(Rest_NatCur) == $0)
      CountErrors = CountErrors + 1;
      println(AccountTo + ": Нельзя провести перенос остатков");
      return;
    else
      doc = RsbAccTransaction(); // RsbAccTransactionData

        if(accRec.Kind_Account == "П")
          doc.AccountPayer    = accRec.Account;
          doc.FIIDPayer       = accRec.Code_Currency;
          doc.AccountReceiver = accToRec.Account;
          doc.FIIDReceiver    = accToRec.Code_Currency;

        elif(accRec.Kind_Account == "А")
          doc.AccountPayer    = accToRec.Account;
          doc.FIIDPayer       = accToRec.Code_Currency;
          doc.AccountReceiver = accRec.Account;
          doc.FIIDReceiver    = accRec.Code_Currency;
      
        end;

        doc.Chapter          = ternary(substr(doc.AccountReceiver,1,1)=="9",4,1); // изменил vihrov 28.12.2011 C-8028-6
        doc.Date_Carry       = dr.Date_Carry;
        doc.Ground           = dr.Ground;
        doc.Number_Pack      = 706;

        doc.Numb_Document    = CountDocs + 1;
        doc.Department       = accRec.Department;

        if(dr.IsSPOD == "X")
          doc.TypeDocument = "З";
        end;

        doc.TypeDocument = doc.TypeDocument + "Ц";
      end;

    if(accRec.Code_Currency == accToRec.Code_Currency) // СчетЗачисления открыт в той же валюте, что и СчетСписания

      doc.SumEquivalentCarry = abs(Rest_NatCur); //TAM 14.01.2015 R-527014
      doc.SumPayer           = abs(Rest);
      doc.SumReceiver        = abs(Rest);

    else // СчетЗачисления открыт в другой валюте или в рублях

      doc.SumEquivalentCarry = abs(Rest_NatCur);//TAM 14.01.2015 R-527014
         if(accRec.Kind_Account == "П")
           doc.SumPayer        = abs(Rest);

        if(ConvSum(Sum, Rest_NatCur, doc.Date_Carry, NATCUR, doc.FIIDReceiver))
          RunError("Ошибка при конвертации суммы");
         end;
         doc.SumReceiver = abs(Sum);

         elif(accRec.Kind_Account == "А")
        doc.SumReceiver        = abs(Rest);
           
        if(ConvSum(Sum, Rest_NatCur, doc.Date_Carry, NATCUR, doc.FIIDPayer))
          RunError("Ошибка при конвертации суммы");
         end;
        doc.SumPayer = abs(Sum);

         end;
    end;
  else
    doc = RsbAccTransaction(); // RsbAccTransactionData

    if(accRec.Kind_Account == "П")
      doc.AccountPayer    = accRec.Account;
      doc.FIIDPayer       = accRec.Code_Currency;
      doc.SumPayer        = abs(Rest);

      doc.AccountReceiver = accToRec.Account;
      doc.FIIDReceiver    = accToRec.Code_Currency;
    elif(accRec.Kind_Account == "А")
      doc.AccountPayer    = accToRec.Account;
      doc.FIIDPayer       = accToRec.Code_Currency;
      
      doc.AccountReceiver = accRec.Account;
      doc.FIIDReceiver    = accRec.Code_Currency;
      doc.SumReceiver     = abs(Rest);
    end;

    doc.Chapter          = ternary(substr(doc.AccountReceiver,1,1)=="9",4,1); // изменил vihrov 28.12.2011 C-8028-6
    doc.Date_Carry       = dr.Date_Carry;
    doc.Ground           = dr.Ground;
    doc.Number_Pack      = 706;

    doc.Numb_Document    = CountDocs + 1;
    doc.Department       = accRec.Department;

    if(dr.IsSPOD == "X")
      doc.TypeDocument = "З";
    end;
  end;

  if(doc.Carry(NULL, ErrorMsg ))
    CountDocs = CountDocs + 1;
  else
    CountErrors = CountErrors + 1;
    println(AccountTo + ": При формировании проводки возникла ошибка: " + ErrorMsg);
    return;
  end;

end;

/*
 * Обработка всех счетов
 */
macro ProcessAccounts()
  var select:string;
  var params:TArray;
  var rs:object;
  record accRec("account.dbt");
  var i = 0;

  select = "";
  select = select + "SELECT ac.t_Account, ac.t_Chapter, ac.t_Code_Currency, rd.t_Rest,  ";
  select = select + "       rd.t_RestDate                                               ";
  select = select + "  FROM daccount_dbt ac JOIN drestdate_dbt rd                       ";
  select = select + "       ON (    rd.t_AccountID = ac.t_AccountID                     ";
  select = select + "           AND rd.t_RestCurrency = ac.t_Code_Currency              ";
  select = select + "           AND rd.t_Rest != 0                                      ";
  select = select + "           AND rd.t_RestDate =                                     ";
  select = select + "                  (SELECT MAX (rd1.t_RestDate)                     ";
  select = select + "                     FROM drestdate_dbt rd1                        ";
  select = select + "                    WHERE rd1.t_AccountID = ac.t_AccountID         ";
  select = select + "                      AND rd1.t_RestCurrency = ac.t_Code_Currency  ";

  if(dr.RestType == ТипВходящий)
    select = select + "                    AND rd1.t_RestDate < :date_carry)            ";
  else /*if(dr.RestType == ТипИсходящий)*/
    select = select + "                    AND rd1.t_RestDate <= :date_carry)           ";
  end;

  select = select + "          ) ";
  select = select + " WHERE ac.t_Chapter       = :chapter                               ";
  select = select + "   AND ac.t_Open_Close    = CHR(0)                                 ";
  select = select + "   AND ac.t_Balance LIKE '" + dr.BalanceFrom + "%'                 ";

              
  params = TArray( 10, 10 );
  i = 0;

  params.value(i) = SQLParam(":date_carry ", dr.RestDate);
  //params.value(i) = SQLParam(":date_carry ", dr.Date_Carry); TAM 13.01.2015
  i = i + 1;

  /* EVG 30/1/2014 Перенёс из старого макроса
  params.value(i) = SQLParam(":chapter ", 1);*/
  params.value(i) = SQLParam(":chapter ", ternary(substr(dr.BalanceFrom,1,1)=="9",4,1));
  i = i + 1;

  if(dr.CurrencyFrom != ALLFININSTR)
    select = select + " AND ac.t_Code_Currency = :currency ";
    params.value(i) = SQLParam(":currency", dr.CurrencyFrom );
    i = i + 1;
  end;

  if(dr.Department)
    select = select + " AND ac.t_Department = :dprt  "  ;
    params.value(i) = SQLParam(":dprt", dr.Department);
    i = i + 1;
  end;

  if(dr.AccountFrom != "")
    select = select + " AND ac.t_Account = :accfrom  ";
    params.value(i) = SQLParam(":accfrom", dr.AccountFrom);
    i = i + 1;
  end;

  rs = execSQLselect( select, params, false );

  while( rs and rs.moveNext())
    if(GetAccountRecord(accRec, rs.value(1), rs.value(0), rs.value(2)))
      ProcessOneAccount(accRec, rs.value(3));
    end;
  end;
end;

macro ExecuteStep( document, PrimDoc )
  var MessErrors;
  var OutputFileName = "";
  var txtDir = "";
  var TxtFileName = "";

  GetRegistryValue("BANK_INI\\ОБЩИЕ ПАРАМЕТРЫ\\ДИРЕКТОРИИ\\TEXTDIR",V_STRING, txtDir, "");
  TxtFileName = txtDir + "\\dr_step1.zzz";
//  OutputFileName = SetOutput("..\\txtfile\\dr_step1.zzz");

  OutputFileName = SetOutput(TxtFileName);
  SetOutput(null);

  SetBuff(dr, Primdoc);
//  SetBuff(doc, document);

  SetAccSymbolsForm102();
  ProcessAccounts();

  if(CountErrors > 0)
    MessErrors = "В результате выполнения шага операции были ошибки формирования проводок.| Сообщения об ошибках можно посмотреть в файле ";
    MessErrors = MessErrors + OutputFileName;
    msgbox(MessErrors);
  end;

  return stat;
end;

