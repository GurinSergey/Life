/*
 *  Контроль заполнения полей операции
 
 Макрос для банка Пойдём!, т.к. только у него есть нестандартные проверки, не нужные в других банках
 21.08.2014  Жаворонкова Н. (joy) Перенос модификации C-19962 Проверка изменена для банка Пойдем!
 17.02.2015 Chesnokov D.S. По C-36053 добавил проверки для "Пойдем"
 */

Import FMInter, PTInter, FIInter, rsd, "globals.mac", fg_Life_parm;

private const fm_error   = 1;
private const fm_warning = 2;

private file fm_control_tmp ("fm_control.tmp") write;
private file fm_control_note("fm_control_note.tmp") write key 0;

private var allOC : integer;
private var allUO : integer;
private var allRO : integer;


private var errOC : integer;
private var errUO : integer;
private var errRO : integer;


private var warnOC : integer;
private var warnUO : integer;
private var warnRO : integer;


private var errOprType : integer;
private var NumberError : integer;

private var IsSimpleIDRegVal : bool;
//21.08.2014  Жаворонкова Н. (joy) Перенос модификации C-19962 
private var FinGroupLifeBank = fg_life_subject({OurBank});

/*Считать значение настройки "ФИНМОНИТОРИНГ / УПРОЩЕННАЯ ИДЕНТ-ЦИЯ УЧАСТНИКОВ".*/
private macro GetSimpleIDRegVal() : bool

  var stat;    
  
  if( IsSimpleIDRegVal == null )
      GetRegistryValue("ФИНМОНИТОРИНГ\\УПРОЩЕННАЯ ИДЕНТ-ЦИЯ УЧАСТНИКОВ", V_BOOL, IsSimpleIDRegVal, stat);    
  end;  

  return IsSimpleIDRegVal;

end;


private macro IsPartyPersonCheck( oprFM )

  var RetVal = false;

  if( (oprFM.OprParty(_FM_PARTY_PAYER).PartyType == "Ф") or (oprFM.OprParty(_FM_PARTY_PAYER).PartyType == "П") )
     RetVal = true;
  end;

  if( (oprFM.OprParty(_FM_PARTY_PAYER_REPRESENT).PartyType == "Ф") or (oprFM.OprParty(_FM_PARTY_PAYER_REPRESENT).PartyType == "П") )
     RetVal = true;
  end;

  if( (oprFM.OprParty(_FM_PARTY_RECEIVER_REPRESENT).PartyType == "Ф") or (oprFM.OprParty(_FM_PARTY_RECEIVER_REPRESENT).PartyType == "П") )
     RetVal = true;
  end;

  if( (oprFM.OprParty(_FM_PARTY_RECEIVER).PartyType == "Ф") or (oprFM.OprParty(_FM_PARTY_RECEIVER).PartyType == "П") )
     RetVal = true;
  end;

  if( (oprFM.OprParty(_FM_PARTY_ORDER).PartyType == "Ф") or (oprFM.OprParty(_FM_PARTY_ORDER).PartyType == "П") )
     RetVal = true;
  end;

  if( (oprFM.OprParty(_FM_PARTY_DEC_ACC_REJ).PartyType == "Ф") or (oprFM.OprParty(_FM_PARTY_DEC_ACC_REJ).PartyType == "П") )
     RetVal = true;
  end;

  if( (oprFM.OprParty(_FM_PARTY_CLN_OPR_REJ).PartyType == "Ф") or (oprFM.OprParty(_FM_PARTY_CLN_OPR_REJ).PartyType == "П") )
     RetVal = true;
  end;

  return RetVal;
end;

private macro ArrayCodeToString(ArrayCode : TArray )

  var StrCode :string;
  var i : integer, NCode : integer;
  
  StrCode = "";

  i = 0; NCode = ArrayCode.Size();

  while( i < NCode )
      if(StrCode != "")
        StrCode = StrCode + ", ";
      end;
      StrCode = StrCode + ArrayCode(i);

    i = i + 1;
  end;

  return StrCode;
end;


private macro CheckCodeOC(ArrayCode : TArray, StrCode :@string)
 
  var RetVal = true;
  var i : integer, NCode : integer;
  
  StrCode = "";

  i = 0; NCode = ArrayCode.Size();

  while( i < NCode )
    if( Index ( "1003, 1004, 1006, 1007, 6001" , ArrayCode(i) ) == 0 )
      if(StrCode != "")
        StrCode = StrCode + ", ";
      end;
      StrCode = StrCode + ArrayCode(i);
      RetVal = false;
    end;

    i = i + 1;
  end;
  
  return RetVal;

end;


private macro CheckCodeUO(ArrayCode : TArray, StrCode :@string)
  var RetVal = true; 
  var i : integer, NCode : integer;
  
  StrCode = "";

  i = 0; NCode = ArrayCode.Size();

  while( i < NCode )

    if( Index ( "201, 1102" , ArrayCode(i) ) == 0 )
      if(StrCode != "")
        StrCode = StrCode + ", ";
      end;
      StrCode = StrCode + ArrayCode(i);
      RetVal = false;
    end;

    i = i + 1;

  end;
  
  return RetVal;
end;



/* проверка существования кода */
private macro IsExistCode( Code : string, ArrayCode : TArray )

  var i : integer, NCode : integer;
  
  i = 0; NCode = ArrayCode.Size();

  while( i < NCode )
    
    if( ArrayCode(i) == Code )
      return true;
    end;

    i = i + 1;

  end;
  
  return false;

end;

/* найти код соответствующий маске */
private macro FindCodeByMask( CodeMask : string, ArrayCode : TArray ) : string

  var i : integer, NCode : integer;
  
  i = 0; NCode = ArrayCode.Size();

  while( i < NCode )
    
    if( CompareStrWithMasks(CodeMask, ArrayCode(i)) == 0 )
      return ArrayCode(i);
    end;

    i = i + 1;

  end;
  
  return null;

end;

/* определить цифровой код страны */
private macro GetNumCountryCode( CountryCode : string ) : string

  file country("country.dbt") key 2;

  ClearRecord(country);

  country.CodeLat3 = CountryCode;

  if( GetEQ(country) )
    return country.CodeNum3;
  end;

  return "";

end;


/* проверка соответствия кода и наименования банка */
private macro CheckBankCodeAndName( oprFMparty : RsbFMOprParty ) : bool

  var CodeKind : integer;
  var PartyID : integer;

  record rec_bank("party.dbt");

  PartyID = -1;

  if( (Trim(oprFMparty.BankCountry) == "") or (Trim(oprFMparty.BankCountry) == GetNumCountryCode({ResidentCountryCode})) )
    CodeKind = PTCK_BIC;
  else
    CodeKind = PTCK_SWIFT;
  end;

  PartyID = ПолучитьКодСубъекта( oprFMparty.BankCode, CodeKind );

  if( PartyID > 0 )
    
    if( ПолучитьСубъекта(PartyID, rec_bank) == 0 )
      
      if( rec_bank.Name != Trim(oprFMparty.BankName) )
        return false;
      end;

    end;

  end;

  return true;

end;


private macro addError( TypeError : integer, oprFM : RsbFMOperation, Note : string )

  ClearRecord(fm_control_tmp);

  fm_control_tmp.Type        = TypeError;
  fm_control_tmp.OperationID = oprFM.OperationID;
  fm_control_tmp.DateCarry   = oprFM.DateCarry;

  Insert( fm_control_tmp );

  NumberError = NumberError + 1;

  ClearRecord(fm_control_note);

  fm_control_note.OperationID = oprFM.OperationID;
  fm_control_note.Number      = NumberError;
  
  if( TypeError == fm_error )
    fm_control_note.ErrorSign = "!";
    fm_control_note.Note = "!Ошибка:\n";
  else
    fm_control_note.ErrorSign = " ";
    fm_control_note.Note = "!Внимание\n";
  end;

  fm_control_note.Note = fm_control_note.Note + Note;

  Insert( fm_control_note );

  if( TypeError == fm_error )
    errOprType = fm_error;
  else
    if( errOprType != fm_error ) errOprType = fm_warning; end;
  end;

end;

private macro FormCodeString( ArrayCode : TArray ) : string
  
  var i : integer, NCode : integer;
  var CodeString : string;

  CodeString = ArrayCode(0);
  
  NCode = ArrayCode.Size();
  
  i = 1;
  while( i < NCode )
    CodeString = CodeString + "," + ArrayCode(i);
    i = i + 1;
  end;
  
  return Trim(CodeString);

end;


private macro PrintFirstLine( OperationID : integer, ErrorSign : string, Note : string )

  var oprFM : RsbFMOperation;

  var mainCodeOC : string;
  var mainCodeUO : string;
  
  var CodesOC : TArray;
  var CodesUO : TArray;

  var FICode : string;
  var strCodesOC : string;
  var strCodesUO : string;

  oprFM = RsbFMOperation( OperationID );

  oprFM.GetCodes( CodesOC, CodesUO );
  oprFM.GetCodes( mainCodeOC, mainCodeUO, true );

  strCodesOC = FormCodeString( CodesOC );
  strCodesUO = FormCodeString( CodesUO );

  FICode = ПолучитьКодФинИн( oprFM.FIID );

[|#|##########|#####|##################|##################|#####|#####|########|########################################|]
(ErrorSign, oprFM.DateCarry:f, FICode, oprFM.Sum, oprFM.SumEquivalent, strCodesOC:w, strCodesUO:w, OperationID, Note:w);

end;

private macro PrintLine( Note : string )

[| |          |     |                  |                  |     |     |        |                                        |];
[| |          |     |                  |                  |     |     |        |########################################|] (Note:w);

end;



private macro PrintOprInformation( OperationID : integer )

  var FirstLine : bool;

  var rs : RsdRecordset;

  rs = RsdRecordset( "SELECT * FROM dfm_control_note_tmp WHERE t_OperationID = " + string(OperationID) + " ORDER BY t_Number" );

  FirstLine = true;

  while( rs.moveNext() )
  
    if( FirstLine )
      PrintFirstLine( OperationID, string(rs.value("t_ErrorSign")), string(rs.value("t_Note")) );
    else
      PrintLine( string(rs.value("t_Note")) );
    end;

    FirstLine = false;

  end;

[+-+----------+-----+------------------+------------------+-----+-----+--------+----------------------------------------+];

end;

private macro PrintErrorInformation()

  var rs : RsdRecordset;

  rs = RsdRecordset( "SELECT t_OperationID FROM dfm_control_tmp ORDER BY t_Type, t_DateCarry, t_OperationID" );

  while( rs.moveNext() )
  
    PrintOprInformation( int(rs.value(0)) );

  end;

end;

macro PrepControlFillOperation()

  var cmd : RsdCommand;

  allOC = 0;
  allUO = 0;
  allRO = 0;

  errOC = 0;
  errUO = 0;
  errRO = 0;

  warnOC = 0;
  warnUO = 0;
  warnRO = 0;

  cmd = RsdCommand;
  
  cmd.cmdText = "TRUNCATE TABLE dfm_control_tmp";
  cmd.Execute();

  cmd.cmdText = "TRUNCATE TABLE dfm_control_note_tmp";
  cmd.Execute();

end;

MACRO IsDigitNumber( Number )

  var stat = 0, i = 1, ch, DigitString = "0123456789";

      while( (not stat) and (i <= strlen(Number)) )
        ch = SubStr( Number, i, 1 );
        if( not Index( DigitString, ch ))
          stat = 1;
        end;
        i = i + 1;
      end;

  return stat;

END;

macro Check_OGRN_and_Regnum(FMOperation:object, type_party:integer)
  
  var len_OKPO = 0;
  var len_RegNum = 0;
  var str_party_type = "";
  
  if (type_party == _FM_PARTY_PAYER)
    str_party_type = "плательщика";
  elif (type_party == _FM_PARTY_PAYER_REPRESENT)
    str_party_type = "представителя плательщика";
  elif (type_party == _FM_PARTY_RECEIVER_REPRESENT)
    str_party_type = "представителя получателя";
  elif (type_party == _FM_PARTY_RECEIVER)
    str_party_type = "получателя";
  elif (type_party == _FM_PARTY_ORDER)
    str_party_type = "выгодоприобретателя";
  end;
  
  if (    (FMOperation.OperationID == FMOperation.OprParty(type_party).OperationID)
      and (FMOperation.OprParty(type_party).PartyType == "Ю")) // 1- плательщик
      if ((FMOperation.OprParty(type_party).OKPO != "0") and (FMOperation.OprParty(type_party).OKPO != ""))
        if (IsDigitNumber(FMOperation.OprParty(type_party).OKPO) != 0)
          addError( fm_warning, FMOperation, "В поле \"ОКПО\" " +  str_party_type + " присутствуют нечисловые символы" );
        end;
        len_OKPO = strlen(FMOperation.OprParty(type_party).OKPO);
        if (len_OKPO > 10)
          addError( fm_warning, FMOperation, "Длинна поля \"ОКПО\" " +  str_party_type + " превышает 10 символов" );
        elif (len_OKPO < 8)
          addError( fm_warning, FMOperation, "Длинна поля \"ОКПО\" " +  str_party_type + " меньше 8 символов" );
        end;
      end;

      if (FMOperation.OprParty(type_party).RegNumber != "")
        if (IsDigitNumber(FMOperation.OprParty(type_party).RegNumber) != 0)
          addError( fm_warning, FMOperation, "В поле \"Регистрационный номер\" " +  str_party_type + " присутствуют нечисловые символы");
        end;
        if (FMOperation.OprParty(type_party).RegNumber == "0")
          addError( fm_warning, FMOperation, "В поле \"Регистрационный номер\" " +  str_party_type + " указано значение 0");
        end;
        len_RegNum = strlen(FMOperation.OprParty(type_party).RegNumber);
        if (len_RegNum != 13)
          addError( fm_warning, FMOperation, "Длинна поля \"Регистрационный номер\" " +  str_party_type + " не равна 13 символам" );
        end;
      end;
      
      if ((FMOperation.OprParty(type_party).OKPO != "") and (FMOperation.OprParty(type_party).RegNumber != ""))
        if (FMOperation.OprParty(type_party).OKPO == FMOperation.OprParty(type_party).RegNumber)
          addError( fm_warning, FMOperation, "Поля \"ОКПО\" и \"Регистрационный номер\" " +  str_party_type + " содержат одинаковые значения");
        end;
      end;
  end;
  
end;

macro ControlFillOperation( OperationID : integer ) : integer

  var oprFM : RsbFMOperation;

  var mainCodeOC : string;
  var mainCodeUO : string;
  
  var CodesOC : TArray;
  var CodesUO : TArray;

  var ExistCode6001 : bool, ExistCode7001 : bool;
  var Code3000 : string;
  var rsss : RsdRecordset;
  var SkipSimpleCheck = false;
  var StrCode = "";
  var StrCode2 = "";
  var TmpStr = "";
  var AddErrAddrFromPaymName = "";

  oprFM = RsbFMOperation( OperationID );

  oprFM.GetCodes( CodesOC, CodesUO );
  oprFM.GetCodes( mainCodeOC, mainCodeUO, true );

  NumberError = 0;
  errOprType  = 0;

  ExistCode6001 = IsExistCode("6001", CodesOC);
  ExistCode7001 = IsExistCode("7001", CodesOC);

  Code3000 = FindCodeByMask( "3*", CodesOC );


  if((GetSimpleIDRegVal() == true) and (oprFM.isSimpleIDClient == true) and (IsPartyPersonCheck( oprFM ) == true ))
    SkipSimpleCheck = true;
  end;



  if((oprFM.OperationType == FM_OPER_TYPE_LEGAL) OR (oprFM.OperationType == FM_OPER_TYPE_REJ_OPR))
    /* Дата совершения операции */
    if(oprFM.DateCarry == date(0,0,0) )

      addError( fm_error, oprFM, "Не заполнено поле \"Дата операции\"" );

    end;

    /* Валюта операции */
    if( oprFM.FIID == ALLFININSTR )

      addError( fm_error, oprFM, "Не заполнено поле \"Валюта операции\"" );

    end;

    /* Сумма операции */
    if( oprFM.SumEquivalent == $0 )

      addError( fm_error, oprFM, "Не заполнено поле \"Сумма операции\"" );

    end;
  end;

  if((oprFM.OperationType == FM_OPER_TYPE_LEGAL) OR (oprFM.OperationType == FM_OPER_TYPE_REJ_OPR) OR (oprFM.OperationType == FM_OPER_TYPE_REJ_CON))

    if(GetSimpleIDRegVal() == true)
      /*  */
      if( (oprFM.isSimpleIDClient == true) and (IsPartyPersonCheck( oprFM ) == false))

        addError( fm_error, oprFM, "Операция неправомерно помечена как допускающая упрощенную идентификацию участников: среди участников нет физических лиц." );

      end;

      /*  */
      if( (oprFM.isSimpleIDClient == true) and (CheckCodeOC(CodesOC, @StrCode) == false))

        addError( fm_error, oprFM, "Операция неправомерно помечена как допускающая упрощенную идентификацию участников: операция имеет код ОК " + StrCode );

      end;

      if( (oprFM.isSimpleIDClient == true) and (CheckCodeUO(CodesUO, @StrCode) == false))

        addError( fm_error, oprFM, "Операция неправомерно помечена как допускающая упрощенную идентификацию участников: операция имеет код НО " + StrCode );

      end;

      if( (IsPartyPersonCheck( oprFM ) == true) and (CheckCodeOC(CodesOC, @StrCode) == true) and (CheckCodeUO(CodesUO, @StrCode2) == true) and (oprFM.isSimpleIDClient == false))

        StrCode  = ArrayCodeToString(CodesOC);
        StrCode2 = ArrayCodeToString(CodesUO);

        TmpStr = "Операция имеет только коды ";
        if(StrCode != "")
          TmpStr = TmpStr + "\"ОК\" " ;
          TmpStr = TmpStr + StrCode ;
        end;

        if(StrCode2 != "") 
          if(StrCode != "")
           TmpStr = TmpStr + " и " ;
          end;
          TmpStr = TmpStr + "\"НО\" ";
          TmpStr = TmpStr + StrCode2 ;
        end;

        TmpStr = TmpStr + ", и возможно, допускает упрощённую идентификацию участников, но не помечена такой.";

        addError( fm_warning, oprFM, TmpStr );

      end;
    end;

  end;

  if(oprFM.OperationType == FM_OPER_TYPE_LEGAL )
    /* Указан код необычной операции, но не указан код операции для обязательного контроля 6001 */
    if( CodesUO.Size() > 0 )
      
      if( not ExistCode6001 )
        addError( fm_error, oprFM, "Указан код необычной операции, но не указан код операции для обязательного контроля 6001" );
      end;

    end;

    /* Указан код операции для обязательного контроля 6001, но не указан код необычной операции */
    if( ExistCode6001 )
      
      if( CodesUO.Size() == 0 )
        addError( fm_error, oprFM, "Указан код операции для обязательного контроля 6001, но не указан код необычной операции" );
      end;

    end;

    /* Указан код 7001; основной код операции не равен 7001 */
    if( ExistCode7001 )
      
      if( mainCodeOC != "7001" )
        addError( fm_error, oprFM, "Указан код 7001; основной код операции " + string(mainCodeOC) );
      end;

    end;

    var DateUOC= FM_GetDateUOCodes();
    var i : integer, NCode : integer;

    if(oprFM.DateCarry < DateUOC)
      i = 0; NCode = CodesUO.Size();
      while( i < NCode )
        if( CompareStrWithMasks("????", CodesUO(i)) == 0 )
          addError( fm_warning, oprFM, "Указан четырехзначный код необычной операции " + CodesUO(i) );
        end;

        i = i + 1;
      end;
    else
      i = 0; NCode = CodesUO.Size();
      while( i < NCode )
        if( CompareStrWithMasks("???", CodesUO(i)) == 0 )
          addError( fm_warning, oprFM, "Указан трехзначный код необычной операции " + CodesUO(i) );
        end;

        i = i + 1;
      end;
    end;

    /* Указан код операции 7001, поле "Терроризм" не заполнено */
    if( ExistCode7001 )
      
      if( oprFM.TerrorSign == 0 )
        addError( fm_error, oprFM, "Указан код операции 7001, поле \"Терроризм\" не заполнено" );
      end;

    end;

    /* Не указан код операции 7001, поле "Терроризм" заполнено */
    if( oprFM.TerrorSign != 0 )
      
      if( not ExistCode7001 )
        addError( fm_error, oprFM, "Не указан код операции 7001, поле \"Терроризм\" заполнено" );
      end;

    end;
  end;

  if((oprFM.OperationType == FM_OPER_TYPE_REJ_ACC) AND (oprFM.RejectCode == 0) )

    addError( fm_error, oprFM, "Не указано основание отказа от заключения договора банковского счета." );

  end;

  if((oprFM.OperationType == FM_OPER_TYPE_REJ_OPR) AND (oprFM.RejectCode == 0) )

    addError( fm_error, oprFM, "Не указано основание для отказа в проведение операции." );

  end;

  if((oprFM.OperationType == FM_OPER_TYPE_REJ_CON) AND (oprFM.RejectCode == 0) )

    addError( fm_error, oprFM, "Не указано основание для расторжения договора банковского счета." );

  end;



  if(oprFM.SplitSumGroup != 0)
    rsss = RsdRecordset( "select 1 from dopcontr_dbt where t_OperationID != " + string(oprFM.OperationID) +" AND t_SplitSumGroup = " + string(oprFM.SplitSumGroup) );

    if( not rsss.moveNext() )
      
      addError( fm_error, oprFM, "В группе операций дробления содержится только одна операция." );

    end;
  end;

  if(oprFM.OperationType == FM_OPER_TYPE_LEGAL)

    
    /* Для плательщика не заполнено поле "Тип участника расчетов"  */
    if( Trim(oprFM.OprParty(_FM_PARTY_PAYER).PartyType) == "" )
      
      addError( fm_error, oprFM, "Для плательщика не заполнено поле \"Тип участника расчетов\"" );

    end;

    /* Для плательщика не заполнено поле "Наименование участника операции" */
    if( Trim(oprFM.OprParty(_FM_PARTY_PAYER).Name) == "" )
      
      addError( fm_error, oprFM, "Для плательщика не заполнено поле \"Наименование участника операции\"" );

    end;

    /* Для получателя не заполнено поле "Тип участника расчетов" */
    if( Trim(oprFM.OprParty(_FM_PARTY_RECEIVER).PartyType) == "" )
      
      addError( fm_error, oprFM, "Для получателя не заполнено поле \"Тип участника расчетов\"" );

    end;

    /* Для получателя не заполнено поле "Наименование участника операции" */
    if( Trim(oprFM.OprParty(_FM_PARTY_RECEIVER).Name) == "" )
      
      addError( fm_error, oprFM, "Для получателя не заполнено поле \"Наименование участника операции\"" );

    end;
    // 
    if( (oprFM.OprParty(_FM_PARTY_PAYER             ).PartySign != 0)
     or (oprFM.OprParty(_FM_PARTY_PAYER_REPRESENT   ).PartySign != 0)
     or (oprFM.OprParty(_FM_PARTY_RECEIVER_REPRESENT).PartySign != 0)
     or (oprFM.OprParty(_FM_PARTY_RECEIVER          ).PartySign != 0)
     or (oprFM.OprParty(_FM_PARTY_ORDER             ).PartySign != 0)
      )

        if( (not ExistCode7001) and (Code3000 == null) )

          addError( fm_error, oprFM, "Не указан код операции группы 3000 или 7000. Поле \"Признак участника операции\" заполнено." );

        end;
    end;

    if(oprFM.OprParty(_FM_PARTY_PAYER).IsSimpleIDClient == true)
       if(GetSimpleIDRegVal() == false)
         addError( fm_warning, oprFM, "Плательщик неправомерно помечен как имеющий упрощенную идентификацию: настройка реестра \"Финмониторинг \\ Упрощенная идент-ция участников\" не разрешает упрощённую идентификацию." );
       end;

       if(oprFM.isSimpleIDClient == false)
         addError( fm_warning, oprFM, "Плательщик неправомерно помечен как имеющий упрощенную идентификацию: операция ФМ не помечена как допускающая упрощённую идентификацию." );
       end;

       if(oprFM.OprParty(_FM_PARTY_PAYER).PartyType == "Ю")
         addError( fm_warning, oprFM, "Плательщик неправомерно помечен как имеющий упрощенную идентификацию: он не является физическим лицом (предпринимателем)" );
       end;
    end;

    if(oprFM.OprParty(_FM_PARTY_RECEIVER).IsSimpleIDClient == true)
       if(GetSimpleIDRegVal() == false)
         addError( fm_warning, oprFM, "Получатель неправомерно помечен как имеющий упрощенную идентификацию: настройка реестра \"Финмониторинг \\ Упрощенная идент-ция участников\" не разрешает упрощённую идентификацию." );
       end;

       if(oprFM.isSimpleIDClient == false)
         addError( fm_warning, oprFM, "Получатель неправомерно помечен как имеющий упрощенную идентификацию: операция ФМ не помечена как допускающая упрощённую идентификацию." );
       end;

       if(oprFM.OprParty(_FM_PARTY_RECEIVER).PartyType == "Ю")
         addError( fm_warning, oprFM, "Получатель неправомерно помечен как имеющий упрощенную идентификацию: он не является физическим лицом (предпринимателем)" );
       end;
    end;

  end;


  if(oprFM.OperationType == FM_OPER_TYPE_REJ_ACC)
    /* Для плательщика не заполнено поле "Тип участника расчетов"  */
    if( Trim(oprFM.OprParty(_FM_PARTY_DEC_ACC_REJ).PartyType) == "" )
      
      addError( fm_error, oprFM, "Для заявителя по отказанному договору счета не заполнено поле \"Тип участника расчетов\"" );

    end;

    /* Для плательщика не заполнено поле "Наименование участника операции" */
    if( Trim(oprFM.OprParty(_FM_PARTY_DEC_ACC_REJ).Name) == "" )
      
      addError( fm_error, oprFM, "Для заявителя по отказанному договору счета не заполнено поле \"Наименование участника операции\"" );

    end;
  end;

  if(oprFM.OperationType == FM_OPER_TYPE_REJ_OPR)
    /* Для плательщика не заполнено поле "Тип участника расчетов"  */
    if( Trim(oprFM.OprParty(_FM_PARTY_CLN_OPR_REJ).PartyType) == "" )
      
      addError( fm_error, oprFM, "Для клиента по отказанной операции не заполнено поле \"Тип участника расчетов\"" );

    end;

    /* Для плательщика не заполнено поле "Наименование участника операции" */
    if( Trim(oprFM.OprParty(_FM_PARTY_CLN_OPR_REJ).Name) == "" )
      
      addError( fm_error, oprFM, "Для клиента по отказанной операции не заполнено поле \"Наименование участника операции\"" );

    end;

    if(oprFM.OprParty(_FM_PARTY_CLN_OPR_REJ).IsSimpleIDClient == true)
       if(GetSimpleIDRegVal() == false)
         addError( fm_warning, oprFM, "Клиент по отказанной операции неправомерно помечен как имеющий упрощенную идентификацию: настройка реестра \"Финмониторинг \\ Упрощенная идент-ция участников\" не разрешает упрощённую идентификацию." );
       end;

       if(oprFM.isSimpleIDClient == false)
         addError( fm_warning, oprFM, "Клиент по отказанной операции неправомерно помечен как имеющий упрощенную идентификацию: операция ФМ не помечена как допускающая упрощённую идентификацию." );
       end;

       if(oprFM.OprParty(_FM_PARTY_CLN_OPR_REJ).PartyType == "Ю")
         addError( fm_warning, oprFM, "Клиент по отказанной операции неправомерно помечен как имеющий упрощенную идентификацию: он не является физическим лицом (предпринимателем)" );
       end;
    end;
  end;

  if(oprFM.OperationType == FM_OPER_TYPE_REJ_CON)
    /* Для плательщика не заполнено поле "Тип участника расчетов"  */
    if( Trim(oprFM.OprParty(_FM_PARTY_CLN_CON_REJ).PartyType) == "" )
      
      addError( fm_error, oprFM, "Для клиента по расторгнутому договору не заполнено поле \"Тип участника расчетов\"" );

    end;

    /* Для плательщика не заполнено поле "Наименование участника операции" */
    if( Trim(oprFM.OprParty(_FM_PARTY_CLN_CON_REJ).Name) == "" )
      
      addError( fm_error, oprFM, "Для клиента по расторгнутому договору не заполнено поле \"Наименование участника операции\"" );

    end;
  end;


  /* Для операции с кодом 6001 не заполнено примечание "Дополнительная информация" ??*/
  if( ExistCode6001 )
    
    if( Trim(oprFM.Descr) == "" )
      addError( fm_error, oprFM, "Для операции с кодом 6001 не заполнено примечание \"Дополнительная информация\"" );
    end;

  end;

  /* Для операции с кодом 6001 не заполнено поле "Основание" ??*/
  if( ExistCode6001 )
    
    if( Trim(oprFM.Ground) == "" )
      addError( fm_error, oprFM, "Для операции с кодом 6001 не заполнено поле \"Основание\"" );
    end;

  end;

  /* ?? Тип отправки <строковая расшиф-ровка типа отправки>/<основной код операции>. Примечание "Дополнительная информация" должно быть заполнено */
  if((oprFM.Action == 3) or (oprFM.Action == 4))
    if( Trim(oprFM.Descr) == "" )
      addError( fm_error, oprFM, "Тип отправки " + НазваниеТипаОтправкиОперации(oprFM.Action) + "/" + string(mainCodeOC) + ". Примечание \"Дополнительная информация\" должно быть заполнено" );
    end;
  end;

  /* Для плательщика-клиента банка задана информация о банке */
  if( (oprFM.OperationType == FM_OPER_TYPE_LEGAL) AND (oprFM.PayerBankSign != 0) )
    
    if( Trim(oprFM.OprParty(_FM_PARTY_PAYER).BankCode) != "" )
      addError( fm_error, oprFM, "Значение поля \"Признак плательщика\" = " + string(oprFM.PayerBankSign) + ", для плательщика заполнено поле \"Код банка\"" );
    end;
    
    if( Trim(oprFM.OprParty(_FM_PARTY_PAYER).BankName) != "" )
      addError( fm_error, oprFM, "Значение поля \"Признак плательщика\" = " + string(oprFM.PayerBankSign) + ", для плательщика заполнено поле \"Наименование банка\"" );
    end;
    if( Trim(oprFM.OprParty(_FM_PARTY_PAYER).BankCountry) != "" )
      addError( fm_error, oprFM, "Значение поля \"Признак плательщика\" = " + string(oprFM.PayerBankSign) + ", для плательщика заполнено поле \"Место регистрации банка\"" );
    end;
 
    if( Trim(oprFM.OprParty(_FM_PARTY_PAYER).CorrCode) != "" )
      addError( fm_error, oprFM, "Значение поля \"Признак плательщика\" = " + string(oprFM.PayerBankSign) + ", для плательщика заполнено поле \"Код банка-корреспондента\"" );
    end;
    
    if( Trim(oprFM.OprParty(_FM_PARTY_PAYER).CorrName) != "" )
      addError( fm_error, oprFM, "Значение поля \"Признак плательщика\" = " + string(oprFM.PayerBankSign) + ", для плательщика заполнено поле \"Наименование банка-корреспондента\"" );
    end;
    if( Trim(oprFM.OprParty(_FM_PARTY_PAYER).CorrCountry) != "" )
      addError( fm_error, oprFM, "Значение поля \"Признак плательщика\" = " + string(oprFM.PayerBankSign) + ", для плательщика заполнено поле \"Место регистрации банка-корреспондента\"" );
    end;
    
  end;

  /* Для получателя-клиента банка задана информация о банке */
  if( (oprFM.OperationType == FM_OPER_TYPE_LEGAL) AND (oprFM.ReceiverBankSign != 0) )
    
    if( Trim(oprFM.OprParty(_FM_PARTY_RECEIVER).BankCode) != "" )
      addError( fm_error, oprFM, "Значение поля \"Признак получателя\" = " + string(oprFM.ReceiverBankSign) + ", для получателя заполнено поле \"Код банка\"" );
    end;
    
    if( Trim(oprFM.OprParty(_FM_PARTY_RECEIVER).BankName) != "" )
      addError( fm_error, oprFM, "Значение поля \"Признак получателя\" = " + string(oprFM.ReceiverBankSign) + ", для получателя заполнено поле \"Наименование банка\"" );
    end;
    if( Trim(oprFM.OprParty(_FM_PARTY_RECEIVER).BankCountry) != "" )
      addError( fm_error, oprFM, "Значение поля \"Признак получателя\" = " + string(oprFM.ReceiverBankSign) + ", для получателя заполнено поле \"Место регистрации банка\"" );
    end;

    if( Trim(oprFM.OprParty(_FM_PARTY_RECEIVER).CorrCode) != "" )
      addError( fm_error, oprFM, "Значение поля \"Признак получателя\" = " + string(oprFM.ReceiverBankSign) + ", для получателя заполнено поле \"Код банка-корреспондента\"" );
    end;
    
    if( Trim(oprFM.OprParty(_FM_PARTY_RECEIVER).CorrName) != "" )
      addError( fm_error, oprFM, "Значение поля \"Признак получателя\" = " + string(oprFM.ReceiverBankSign) + ", для получателя заполнено поле \"Наименование банка-корреспондента\"" );
    end;
    if( Trim(oprFM.OprParty(_FM_PARTY_RECEIVER).CorrCountry) != "" )
      addError( fm_error, oprFM, "Значение поля \"Признак получателя\" = " + string(oprFM.ReceiverBankSign) + ", для получателя заполнено поле \"Место регистрации банка-корреспондента\"" );
    end;
    
  end;

  if( (oprFM.OperationType == FM_OPER_TYPE_LEGAL) AND (oprFM.TerrorSign == 0) )
    
    if( oprFM.OprParty(_FM_PARTY_PAYER).KFMNumber != 0 )
      addError( fm_warning, oprFM, "Для плательщика указана связь со Справ.терр.(ФСФМ). Поле \"Терроризм\" не заполнено." );
    end;

    if( oprFM.OprParty(_FM_PARTY_PAYER).SuperiorKFMNumber != 0 )
      addError( fm_warning, oprFM, "Для вышестоящей организации плательщика указана связь со Справ.терр.(ФСФМ). Поле \"Терроризм\" не заполнено." );
    end;

    if( oprFM.OprParty(_FM_PARTY_RECEIVER).KFMNumber != 0 )
      addError( fm_warning, oprFM, "Для получателя указана связь со Справ.терр.(ФСФМ). Поле \"Терроризм\" не заполнено." );
    end;

    if( oprFM.OprParty(_FM_PARTY_RECEIVER).SuperiorKFMNumber != 0 )
      addError( fm_warning, oprFM, "Для вышестоящей организации получателя указана связь со Справ.терр.(ФСФМ). Поле \"Терроризм\" не заполнено." );
    end;

  end;

  if((oprFM.OperationType == FM_OPER_TYPE_LEGAL) AND (ExistCode7001) )

    if( (oprFM.OprParty(_FM_PARTY_PAYER).PartySign != 0)
    and (oprFM.OprParty(_FM_PARTY_PAYER).PartySign != 1)
    and (oprFM.OprParty(_FM_PARTY_PAYER).PartySign != 2)
      )
    
      addError( fm_warning, oprFM, "Для плательщика вид участника = " + oprFM.OprParty(_FM_PARTY_PAYER).PartySign + ". Несоответствие." );
    end;

    if( (oprFM.OprParty(_FM_PARTY_PAYER_REPRESENT).PartySign != 0)
    and (oprFM.OprParty(_FM_PARTY_PAYER_REPRESENT).PartySign != 1)
    and (oprFM.OprParty(_FM_PARTY_PAYER_REPRESENT).PartySign != 2)
      )
    
      addError( fm_warning, oprFM, "Для представителя плательщика вид участника = " + oprFM.OprParty(_FM_PARTY_PAYER_REPRESENT).PartySign + ". Несоответствие." );
    end;

    if( (oprFM.OprParty(_FM_PARTY_RECEIVER_REPRESENT).PartySign != 0)
    and (oprFM.OprParty(_FM_PARTY_RECEIVER_REPRESENT).PartySign != 1)
    and (oprFM.OprParty(_FM_PARTY_RECEIVER_REPRESENT).PartySign != 2)
      )
    
      addError( fm_warning, oprFM, "Для представителя получателя вид участника = " + oprFM.OprParty(_FM_PARTY_RECEIVER_REPRESENT).PartySign + ". Несоответствие." );
    end;

    if( (oprFM.OprParty(_FM_PARTY_RECEIVER).PartySign != 0)
    and (oprFM.OprParty(_FM_PARTY_RECEIVER).PartySign != 1)
    and (oprFM.OprParty(_FM_PARTY_RECEIVER).PartySign != 2)
      )
    
      addError( fm_warning, oprFM, "Для получателя вид участника = " + oprFM.OprParty(_FM_PARTY_RECEIVER).PartySign + ". Несоответствие." );
    end;

    if( (oprFM.OprParty(_FM_PARTY_ORDER).PartySign != 0)
    and (oprFM.OprParty(_FM_PARTY_ORDER).PartySign != 3)
      )
    
      addError( fm_warning, oprFM, "Для выгодоприобретателя вид участника = " + oprFM.OprParty(_FM_PARTY_ORDER).PartySign + ". Несоответствие." );
    end;

  end;

  /* Для плательщика-не клиента банка задана информация о банке */
  if( (oprFM.OperationType == FM_OPER_TYPE_LEGAL) AND (oprFM.PayerBankSign == 0) )
    
    if( Trim(oprFM.OprParty(_FM_PARTY_PAYER).BankCode) == "" )
      addError( fm_warning, oprFM, "Значение поля \"Признак плательщика\" = 0, для плательщика не заполнено поле \"Код банка\"" );
    end;
    
    if( Trim(oprFM.OprParty(_FM_PARTY_PAYER).BankName) == "" )
      addError( fm_warning, oprFM, "Значение поля \"Признак плательщика\" = 0, для плательщика не заполнено поле \"Наименование банка\"" );
    end;
    if( Trim(oprFM.OprParty(_FM_PARTY_PAYER).BankCountry) == "" )
      addError( fm_warning, oprFM, "Значение поля \"Признак плательщика\" = 0, для плательщика не заполнено поле \"Место регистрации банка\"" );
    end;
/*21.08.2014 joy C-19962 В "Пойдем" эта проверка не нужна */
    if (not(FinGroupLifeBank.is_GO))
        if( Trim(oprFM.OprParty(_FM_PARTY_PAYER).CorrCode) == "" )
          addError( fm_warning, oprFM, "Значение поля \"Признак плательщика\" = 0, для плательщика не заполнено поле \"Код банка-корреспондента\"" );
        end;
        
        if( Trim(oprFM.OprParty(_FM_PARTY_PAYER).CorrName) == "" )
          addError( fm_warning, oprFM, "Значение поля \"Признак плательщика\" = 0, для плательщика не заполнено поле \"Наименование банка-корреспондента\"" );
        end;
        if( Trim(oprFM.OprParty(_FM_PARTY_PAYER).CorrCountry) == "" )
          addError( fm_warning, oprFM, "Значение поля \"Признак плательщика\" = 0, для плательщика не заполнено поле \"Место регистрации банка-корреспондента\"" );
        end;
    end;
    //---  end joy

  end;

  /* Для получателя-не клиента банка задана информация о банке */
  if( (oprFM.OperationType == FM_OPER_TYPE_LEGAL) and (oprFM.ReceiverBankSign == 0) )
    
    if( Trim(oprFM.OprParty(_FM_PARTY_RECEIVER).BankCode) == "" )
      addError( fm_warning, oprFM, "Значение поля \"Признак получателя\" = 0, для получателя не заполнено поле \"Код банка\"" );
    end;
    
    if( Trim(oprFM.OprParty(_FM_PARTY_RECEIVER).BankName) == "" )
      addError( fm_warning, oprFM, "Значение поля \"Признак получателя\" = 0, для получателя не заполнено поле \"Наименование банка\"" );
    end;
    if( Trim(oprFM.OprParty(_FM_PARTY_RECEIVER).BankCountry) == "" )
      addError( fm_warning, oprFM, "Значение поля \"Признак получателя\" = 0, для получателя не заполнено поле \"Место регистрации банка\"" );
    end;
    /*21.08.2014 joy C-19962 В "Пойдем" эта проверка не нужна*/
    if (not(FinGroupLifeBank.is_GO))
        if( Trim(oprFM.OprParty(_FM_PARTY_RECEIVER).CorrCode) == "" )
          addError( fm_warning, oprFM, "Значение поля \"Признак получателя\" = 0, для получателя не заполнено поле \"Код банка-корреспондента\"" );
        end;
        
        if( Trim(oprFM.OprParty(_FM_PARTY_RECEIVER).CorrName) == "" )
          addError( fm_warning, oprFM, "Значение поля \"Признак получателя\" = 0, для получателя не заполнено поле \"Наименование банка-корреспондента\"" );
        end;
        if( Trim(oprFM.OprParty(_FM_PARTY_RECEIVER).CorrCountry) == "" )
          addError( fm_warning, oprFM, "Значение поля \"Признак получателя\" = 0, для получателя не заполнено поле \"Место регистрации банка-корреспондента\"" );
        end;
    end;
    //---  end joy

  end;

    /*21.08.2014 joy Перенос C-19962 Для Пойдема! Проверяем адреса и по клиентам, и по не клиентам, у которых Тип участника не "Невозможно установить"*/
    // if( (oprFM.OperationType == FM_OPER_TYPE_LEGAL)  and (oprFM.PayerBankSign != 0)) 
  if( ( (oprFM.OperationType == FM_OPER_TYPE_LEGAL)  and (oprFM.OprParty(_FM_PARTY_PAYER).PartyType != "Н") and (FinGroupLifeBank.is_GO) ) 
    or ( (oprFM.OperationType == FM_OPER_TYPE_LEGAL)  and (oprFM.PayerBankSign != 0) and (not (FinGroupLifeBank.is_GO) ) ) 
    )
    
    AddErrAddrFromPaymName = "";

    if(Trim(oprFM.OprParty(_FM_PARTY_PAYER).FactAddrFromPayment) != "")
        AddErrAddrFromPaymName = ". Рекомендуется использовать значение, указанное в адресе места нахождения из платежа.";
    end;

    if(SkipSimpleCheck == false)
        if( Trim(oprFM.OprParty(_FM_PARTY_PAYER).RegCountry) == "" )
            addError( fm_warning, oprFM, "Значение поля \"Признак плательщика\" = " + string(oprFM.PayerBankSign) + ", для плательщика не заполнено поле \"Страна регистрации\"" );
        end;

        if( Trim(oprFM.OprParty(_FM_PARTY_PAYER).RegTerritory) == "" )
            addError( fm_warning, oprFM, "Значение поля \"Признак плательщика\" = " + string(oprFM.PayerBankSign) + ", для плательщика не заполнено поле \"Код территории в адресе регистрации\"" );
        end;

        if( (Trim(oprFM.OprParty(_FM_PARTY_PAYER).RegCountry) == "643") AND (Trim(oprFM.OprParty(_FM_PARTY_PAYER).RegAddrOKATO) == "") )
            addError( fm_warning, oprFM, "Значение поля \"Признак плательщика\" = " + string(oprFM.PayerBankSign) + ", для плательщика не заполнено поле \"Код региона по ОКАТО в адресе регистрации\"");
        end;

        if( Trim(oprFM.OprParty(_FM_PARTY_PAYER).RegAddrPlaceName) == "" )
            addError( fm_warning, oprFM, "Значение поля \"Признак плательщика\" = " + string(oprFM.PayerBankSign) + ", для плательщика не заполнено поле \"Населенный пункт в адресе регистрации\"" );
        end;

        if( Trim(oprFM.OprParty(_FM_PARTY_PAYER).RegAddrStreet) == "" )
            addError( fm_warning, oprFM, "Значение поля \"Признак плательщика\" = " + string(oprFM.PayerBankSign) + ", для плательщика не заполнено поле \"Улица в адресе регистрации\"" );
        end;

        if( Trim(oprFM.OprParty(_FM_PARTY_PAYER).RegAddrHouse) == "" )
            addError( fm_warning, oprFM, "Значение поля \"Признак плательщика\" = " + string(oprFM.PayerBankSign) + ", для плательщика не заполнено поле \"Номер дома в адресе регистрации\"" );
        end;

        if( Trim(oprFM.OprParty(_FM_PARTY_PAYER).StayCountry) == "" )
            addError( fm_warning, oprFM, "Значение поля \"Признак плательщика\" = " + string(oprFM.PayerBankSign) + ", для плательщика не заполнено поле \"Страна местонахождения\"" + AddErrAddrFromPaymName );
        end;

        if( Trim(oprFM.OprParty(_FM_PARTY_PAYER).StayTerritory) == "" )
            addError( fm_warning, oprFM, "Значение поля \"Признак плательщика\" = " + string(oprFM.PayerBankSign) + ", для плательщика не заполнено поле \"Код территории в адресе местонахождения\"" + AddErrAddrFromPaymName );
        end;

        if( (Trim(oprFM.OprParty(_FM_PARTY_PAYER).StayCountry) == "643") AND (Trim(oprFM.OprParty(_FM_PARTY_PAYER).StayAddrOKATO) == "") )
            addError( fm_warning, oprFM, "Значение поля \"Признак плательщика\" = " + string(oprFM.PayerBankSign) + ", для плательщика не заполнено поле \"Код региона по ОКАТО в адресе местонахождения\"" + AddErrAddrFromPaymName );
        end;

        if( Trim(oprFM.OprParty(_FM_PARTY_PAYER).StayAddrPlaceName) == "" )
            addError( fm_warning, oprFM, "Значение поля \"Признак плательщика\" = " + string(oprFM.PayerBankSign) + ", для плательщика не заполнено поле \"Населенный пункт в адресе местонахождения\"" + AddErrAddrFromPaymName );
        end;

        if( Trim(oprFM.OprParty(_FM_PARTY_PAYER).StayAddrStreet) == "" )
            addError( fm_warning, oprFM, "Значение поля \"Признак плательщика\" = " + string(oprFM.PayerBankSign) + ", для плательщика не заполнено поле \"Улица в адресе местонахождения\"" + AddErrAddrFromPaymName );
        end;

        if( Trim(oprFM.OprParty(_FM_PARTY_PAYER).StayAddrHouse) == "" )
            addError( fm_warning, oprFM, "Значение поля \"Признак плательщика\" = " + string(oprFM.PayerBankSign) + ", для плательщика не заполнено поле \"Номер дома в адресе местонахождения\"" + AddErrAddrFromPaymName );
        end;

        if( Trim(oprFM.OprParty(_FM_PARTY_PAYER).INN) == "" )
            addError( fm_warning, oprFM, "Для плательщика не заполнено поле \"ИНН\"" );
        end;

        if( (oprFM.OprParty(_FM_PARTY_PAYER).PartyType == "Ю") or (oprFM.OprParty(_FM_PARTY_PAYER).PartyType == "П") )
      
            if( Trim(oprFM.OprParty(_FM_PARTY_PAYER).RegNumber) == "" )
                addError( fm_warning, oprFM, "Для плательщика не заполнено поле \"Регистрационный номер\"" );
            end;

            if( oprFM.OprParty(_FM_PARTY_PAYER).RegDate == date(0,0,0) )
                addError( fm_warning, oprFM, "Для плательщика не заполнено поле \"Дата регистрации\"" );
            end;

        end;
    end;

    if( (oprFM.OprParty(_FM_PARTY_PAYER).PartyType == "Ф") or (oprFM.OprParty(_FM_PARTY_PAYER).PartyType == "П") )
    
        if( Trim(oprFM.OprParty(_FM_PARTY_PAYER).CodeDocum) == "" )
            addError( fm_warning, oprFM, "Для плательщика не заполнено поле \"Код\" сведений о документе, удостоверяющем личность" );
        end;

        if( Trim(oprFM.OprParty(_FM_PARTY_PAYER).PaperSeries) == "" )
            addError( fm_warning, oprFM, "Для плательщика не заполнено поле \"Серия\" сведений о документе, удостоверяющем личность" );
        end;

        if( Trim(oprFM.OprParty(_FM_PARTY_PAYER).PaperNumber) == "" )
            addError( fm_warning, oprFM, "Для плательщика не заполнено поле \"Номер\" сведений о документе, удостоверяющем личность" );
        end;

        if( oprFM.OprParty(_FM_PARTY_PAYER).PaperIssuedDate == date(0,0,0) )
            addError( fm_warning, oprFM, "Для плательщика не заполнено поле \"Дата выдачи\" сведений о документе, удостоверяющем личность" );
        end;

        if( Trim(oprFM.OprParty(_FM_PARTY_PAYER).PaperIssuer) == "" )
            addError( fm_warning, oprFM, "Для плательщика не заполнено поле \"Кем выдан\" сведений о документе, удостоверяющем личность" );
        end;

        if(SkipSimpleCheck == false)
            if( oprFM.OprParty(_FM_PARTY_PAYER).Birthday == date(0,0,0) )
                addError( fm_warning, oprFM, "Для плательщика не заполнено поле \"Дата рождения\"" );
            end;

            if( Trim(oprFM.OprParty(_FM_PARTY_PAYER).BirthPlace) == "" )
            addError( fm_warning, oprFM, "Для плательщика не заполнено поле \"Место рождения\"" );
            end;

            if( Trim(oprFM.OprParty(_FM_PARTY_PAYER).ForeignPublicFunctionary) == "" )
                addError( fm_warning, oprFM, "Для плательщика не заполнено поле \"Принадлежность к ИПДЛ\"" );
            end;
        end;
    end;

    if( oprFM.OprParty(_FM_PARTY_PAYER).PartyType == "Ю" )
    
        if( Trim(oprFM.OprParty(_FM_PARTY_PAYER).OKPO) == "" )
            addError( fm_warning, oprFM, "Для плательщика не заполнено поле \"ОКПО\"" );
        end;

    end;
    
  end;
  
  /*17.02.2015 Chesnokov D.S. По C-36053 добавил проверки для "Пойдем"*/
  if (FinGroupLifeBank.is_GO)
    Check_OGRN_and_Regnum(oprFM, _FM_PARTY_PAYER);
    Check_OGRN_and_Regnum(oprFM, _FM_PARTY_PAYER_REPRESENT);
    Check_OGRN_and_Regnum(oprFM, _FM_PARTY_RECEIVER_REPRESENT);
    Check_OGRN_and_Regnum(oprFM, _FM_PARTY_RECEIVER);
    Check_OGRN_and_Regnum(oprFM, _FM_PARTY_ORDER);
  end;
  
    /*21.08.2014 joy Перенос C-19962 Для Пойдем! Проверяем адреса и по клиентам, и по не клиентам нашего банка, у которых Тип участника не "Невозможно установить"*/
    // if( (oprFM.OperationType == FM_OPER_TYPE_LEGAL)  and (oprFM.ReceiverBankSign != 0)) 
  if ( ((oprFM.OperationType == FM_OPER_TYPE_LEGAL)  and (oprFM.OprParty(_FM_PARTY_RECEIVER).PartyType != "Н")  and (FinGroupLifeBank.is_GO) )
     or ( (oprFM.OperationType == FM_OPER_TYPE_LEGAL)  and (oprFM.ReceiverBankSign != 0) and (not (FinGroupLifeBank.is_GO))  )
     )
  
    AddErrAddrFromPaymName = "";

    if(Trim(oprFM.OprParty(_FM_PARTY_RECEIVER).FactAddrFromPayment) != "")
        AddErrAddrFromPaymName = ". Рекомендуется использовать значение, указанное в адресе места нахождения из платежа.";
    end;

    if(SkipSimpleCheck == false)
        if( Trim(oprFM.OprParty(_FM_PARTY_RECEIVER).RegCountry) == "" )
            addError( fm_warning, oprFM, "Значение поля \"Признак получателя\" = " + string(oprFM.ReceiverBankSign) + ", для получателя не заполнено поле \"Страна регистрации\"" );
        end;

        if( Trim(oprFM.OprParty(_FM_PARTY_RECEIVER).RegTerritory) == "" )
            addError( fm_warning, oprFM, "Значение поля \"Признак получателя\" = " + string(oprFM.ReceiverBankSign) + ", для получателя не заполнено поле \"Код территории в адресе регистрации\"" );
        end;

        if((Trim(oprFM.OprParty(_FM_PARTY_RECEIVER).RegCountry) == "643") AND (Trim(oprFM.OprParty(_FM_PARTY_RECEIVER).RegAddrOKATO) == "") )
            addError( fm_warning, oprFM, "Значение поля \"Признак получателя\" = " + string(oprFM.ReceiverBankSign) + ", для получателя не заполнено поле \"Код региона по ОКАТО в адресе регистрации\"" );
        end;

        if( Trim(oprFM.OprParty(_FM_PARTY_RECEIVER).RegAddrPlaceName) == "" )
            addError( fm_warning, oprFM, "Значение поля \"Признак получателя\" = " + string(oprFM.ReceiverBankSign) + ", для получателя не заполнено поле \"Населенный пункт в адресе регистрации\"" );
        end;

        if( Trim(oprFM.OprParty(_FM_PARTY_RECEIVER).RegAddrStreet) == "" )
            addError( fm_warning, oprFM, "Значение поля \"Признак получателя\" = " + string(oprFM.ReceiverBankSign) + ", для получателя не заполнено поле \"Улица в адресе регистрации\"" );
        end;

        if( Trim(oprFM.OprParty(_FM_PARTY_RECEIVER).RegAddrHouse) == "" )
            addError( fm_warning, oprFM, "Значение поля \"Признак получателя\" = " + string(oprFM.ReceiverBankSign) + ", для получателя не заполнено поле \"Номер дома в адресе регистрации\"" );
        end;

        if( Trim(oprFM.OprParty(_FM_PARTY_RECEIVER).StayCountry) == "" )
            addError( fm_warning, oprFM, "Значение поля \"Признак получателя\" = " + string(oprFM.ReceiverBankSign) + ", для получателя не заполнено поле \"Страна местонахождения\""+ AddErrAddrFromPaymName );
        end;

        if( Trim(oprFM.OprParty(_FM_PARTY_RECEIVER).StayTerritory) == "" )
            addError( fm_warning, oprFM, "Значение поля \"Признак получателя\" = " + string(oprFM.ReceiverBankSign) + ", для получателя не заполнено поле \"Код территории в адресе местонахождения\""+ AddErrAddrFromPaymName );
        end;

        if( (Trim(oprFM.OprParty(_FM_PARTY_RECEIVER).StayCountry) == "643") AND (Trim(oprFM.OprParty(_FM_PARTY_RECEIVER).StayAddrOKATO) == "") )
            addError( fm_warning, oprFM, "Значение поля \"Признак получателя\" = " + string(oprFM.ReceiverBankSign) + ", для получателя не заполнено поле \"Код региона по ОКАТО в адресе местонахождения\""+ AddErrAddrFromPaymName );
        end;

        if( Trim(oprFM.OprParty(_FM_PARTY_RECEIVER).StayAddrPlaceName) == "" )
            addError( fm_warning, oprFM, "Значение поля \"Признак получателя\" = " + string(oprFM.ReceiverBankSign) + ", для получателя не заполнено поле \"Населенный пункт в адресе местонахождения\""+ AddErrAddrFromPaymName );
        end;

        if( Trim(oprFM.OprParty(_FM_PARTY_RECEIVER).StayAddrStreet) == "" )
            addError( fm_warning, oprFM, "Значение поля \"Признак получателя\" = " + string(oprFM.ReceiverBankSign) + ", для получателя не заполнено поле \"Улица в адресе местонахождения\""+ AddErrAddrFromPaymName );
        end;

        if( Trim(oprFM.OprParty(_FM_PARTY_RECEIVER).StayAddrHouse) == "" )
            addError( fm_warning, oprFM, "Значение поля \"Признак получателя\" = " + string(oprFM.ReceiverBankSign) + ", для получателя не заполнено поле \"Номер дома в адресе местонахождения\""+ AddErrAddrFromPaymName );
        end;
        
        /*joy 21.08.2014 Перенос C-19962-6 Для Пойдем! Добавлена проверка ИНН и для получателя*/
        if  (FinGroupLifeBank.is_GO)
            if( Trim(oprFM.OprParty(_FM_PARTY_RECEIVER).INN) == "" )
                addError( fm_warning, oprFM, "Для получателя не заполнено поле \"ИНН\"" );
            end;
        end;
        //--end joy

        if( (oprFM.OprParty(_FM_PARTY_RECEIVER).PartyType == "Ю") or (oprFM.OprParty(_FM_PARTY_RECEIVER).PartyType == "П") )
      
            if( Trim(oprFM.OprParty(_FM_PARTY_RECEIVER).RegNumber) == "" )
                addError( fm_warning, oprFM, "Для получателя не заполнено поле \"Регистрационный номер\"" );
            end;

            if( oprFM.OprParty(_FM_PARTY_RECEIVER).RegDate == date(0,0,0) )
                addError( fm_warning, oprFM, "Для получателя не заполнено поле \"Дата регистрации\"" );
            end;

        end;
    end;

    if( (oprFM.OprParty(_FM_PARTY_RECEIVER).PartyType == "Ф") or (oprFM.OprParty(_FM_PARTY_RECEIVER).PartyType == "П") )
    
        if( Trim(oprFM.OprParty(_FM_PARTY_RECEIVER).CodeDocum) == "" )
            addError( fm_warning, oprFM, "Для получателя не заполнено поле \"Код\" сведений о документе, удостоверяющем личность" );
        end;

        if( Trim(oprFM.OprParty(_FM_PARTY_RECEIVER).PaperSeries) == "" )
            addError( fm_warning, oprFM, "Для получателя не заполнено поле \"Серия\" сведений о документе, удостоверяющем личность" );
        end;

        if( Trim(oprFM.OprParty(_FM_PARTY_RECEIVER).PaperNumber) == "" )
            addError( fm_warning, oprFM, "Для получателя не заполнено поле \"Номер\" сведений о документе, удостоверяющем личность" );
        end;

        if( oprFM.OprParty(_FM_PARTY_RECEIVER).PaperIssuedDate == date(0,0,0) )
            addError( fm_warning, oprFM, "Для получателя не заполнено поле \"Дата выдачи\" сведений о документе, удостоверяющем личность" );
        end;

        if( Trim(oprFM.OprParty(_FM_PARTY_RECEIVER).PaperIssuer) == "" )
            addError( fm_warning, oprFM, "Для получателя не заполнено поле \"Кем выдан\" сведений о документе, удостоверяющем личность" );
        end;
      
        if(SkipSimpleCheck == false)
            if( oprFM.OprParty(_FM_PARTY_RECEIVER).Birthday == date(0,0,0) )
                addError( fm_warning, oprFM, "Для получателя не заполнено поле \"Дата рождения\"" );
            end;

            if( Trim(oprFM.OprParty(_FM_PARTY_RECEIVER).BirthPlace) == "" )
                addError( fm_warning, oprFM, "Для получателя не заполнено поле \"Место рождения\"" );
            end;

            if( Trim(oprFM.OprParty(_FM_PARTY_RECEIVER).ForeignPublicFunctionary) == "" )
                addError( fm_warning, oprFM, "Для получателя не заполнено поле \"Принадлежность к ИПДЛ\"" );
            end;
        end;
    end;

    if( oprFM.OprParty(_FM_PARTY_RECEIVER).PartyType == "Ю" )
    
        if( Trim(oprFM.OprParty(_FM_PARTY_RECEIVER).OKPO) == "" )
            addError( fm_warning, oprFM, "Для получателя не заполнено поле \"ОКПО\"" );
        end;

    end;
    
  end;

    /*21.08.2014 Перенос C-19962 joy Для Пойдем! для клиента банка добавлена проверка заполненности реквизитов банковской карты*/
    if  (FinGroupLifeBank.is_GO)
        if (oprFM.OperationType == FM_OPER_TYPE_LEGAL) 
            if (oprFM.PayerBankSign != 0)  
                if   (( Trim(oprFM.OprParty(_FM_PARTY_PAYER).CardHolderSign) != "" ) 
                   or ( Trim(oprFM.OprParty(_FM_PARTY_PAYER).CardIssuerCode) != "" ) )  // Если код эмитента или признак владельца заполнены
            
                    if( Trim(oprFM.OprParty(_FM_PARTY_PAYER).CardIssuerCode) == "" ) 
                        addError( fm_warning, oprFM, "Для плательщика не заполнено поле \"Код эмитента\" в реквизитах банковской карты" );
                    end;
                    
                    if( Trim(oprFM.OprParty(_FM_PARTY_PAYER).CardIssuerName) == "" )
                        addError( fm_warning, oprFM, "Для плательщика не заполнено поле \"Наименование эмитента\" в реквизитах банковской карты" );
                    end;
                           
                    if( Trim(oprFM.OprParty(_FM_PARTY_PAYER).CardHolderSign) == "" ) 
                        addError( fm_warning, oprFM, "Для плательщика не заполнено поле \"Признак владельца\" в реквизитах банковской карты" );
                    end;
                end;
            elif  (oprFM.ReceiverBankSign != 0)
                if   (( Trim(oprFM.OprParty(_FM_PARTY_RECEIVER).CardHolderSign) != "" ) 
                   or ( Trim(oprFM.OprParty(_FM_PARTY_RECEIVER).CardIssuerCode) != "" ) )  // Если код эмитента или признак владельца заполнены
                
                    if( Trim(oprFM.OprParty(_FM_PARTY_RECEIVER).CardIssuerCode) == "" )
                        addError( fm_warning, oprFM, "Для получателя не заполнено поле \"Код эмитента\" в реквизитах банковской карты" );
                    end;
                    
                    if( Trim(oprFM.OprParty(_FM_PARTY_RECEIVER).CardIssuerName) == "" )
                        addError( fm_warning, oprFM, "Для получателя не заполнено поле \"Наименование эмитента\" в реквизитах банковской карты" );
                    end;
                    
                    if( Trim(oprFM.OprParty(_FM_PARTY_RECEIVER).CardHolderSign) == "" )
                        addError( fm_warning, oprFM, "Для получателя не заполнено поле \"Признак владельца\" в реквизитах банковской карты" );
                    end;
                end;
            end;
        end;
    end;
    //--end joy


  if( (oprFM.OperationType == FM_OPER_TYPE_REJ_ACC) )
    
    AddErrAddrFromPaymName = "";

    if(Trim(oprFM.OprParty(_FM_PARTY_DEC_ACC_REJ).FactAddrFromPayment) != "")
      AddErrAddrFromPaymName = ". Рекомендуется использовать значение, указанное в адресе места нахождения из платежа.";
    end;
 
    if(SkipSimpleCheck == false)
      if( Trim(oprFM.OprParty(_FM_PARTY_DEC_ACC_REJ).RegCountry) == "" )
        addError( fm_warning, oprFM, "Для заявителя по отказанному договору счета не заполнено поле \"Страна регистрации\"" );
      end;

      if( Trim(oprFM.OprParty(_FM_PARTY_DEC_ACC_REJ).RegTerritory) == "" )
        addError( fm_warning, oprFM, "Для заявителя по отказанному договору счета не заполнено поле \"Код территории в адресе регистрации\"" );
      end;

      if( (Trim(oprFM.OprParty(_FM_PARTY_DEC_ACC_REJ).RegCountry) == "643") AND (Trim(oprFM.OprParty(_FM_PARTY_DEC_ACC_REJ).RegAddrOKATO) == "") )
        addError( fm_warning, oprFM, "Для заявителя по отказанному договору счета не заполнено поле \"Код региона по ОКАТО в адресе регистрации\"");
      end;

      if( Trim(oprFM.OprParty(_FM_PARTY_DEC_ACC_REJ).RegAddrPlaceName) == "" )
        addError( fm_warning, oprFM, "Для заявителя по отказанному договору счета не заполнено поле \"Населенный пункт в адресе регистрации\"" );
      end;

      if( Trim(oprFM.OprParty(_FM_PARTY_DEC_ACC_REJ).RegAddrStreet) == "" )
        addError( fm_warning, oprFM, "Для заявителя по отказанному договору счета не заполнено поле \"Улица в адресе регистрации\"" );
      end;

      if( Trim(oprFM.OprParty(_FM_PARTY_DEC_ACC_REJ).RegAddrHouse) == "" )
        addError( fm_warning, oprFM, "Для заявителя по отказанному договору счета не заполнено поле \"Номер дома в адресе регистрации\"" );
      end;

      if( Trim(oprFM.OprParty(_FM_PARTY_DEC_ACC_REJ).StayCountry) == "" )
        addError( fm_warning, oprFM, "Для заявителя по отказанному договору счета не заполнено поле \"Страна местонахождения\""+ AddErrAddrFromPaymName );
      end;

      if( Trim(oprFM.OprParty(_FM_PARTY_DEC_ACC_REJ).StayTerritory) == "" )
        addError( fm_warning, oprFM, "Для заявителя по отказанному договору счета не заполнено поле \"Код территории в адресе местонахождения\""+ AddErrAddrFromPaymName );
      end;

      if( (Trim(oprFM.OprParty(_FM_PARTY_DEC_ACC_REJ).StayCountry) == "643") AND (Trim(oprFM.OprParty(_FM_PARTY_DEC_ACC_REJ).StayAddrOKATO) == "") )
        addError( fm_warning, oprFM, "Для заявителя по отказанному договору счета не заполнено поле \"Код региона по ОКАТО в адресе местонахождения\""+ AddErrAddrFromPaymName );
      end;

      if( Trim(oprFM.OprParty(_FM_PARTY_DEC_ACC_REJ).StayAddrPlaceName) == "" )
        addError( fm_warning, oprFM, "Для заявителя по отказанному договору счета не заполнено поле \"Населенный пункт в адресе местонахождения\""+ AddErrAddrFromPaymName );
      end;

      if( Trim(oprFM.OprParty(_FM_PARTY_DEC_ACC_REJ).StayAddrStreet) == "" )
        addError( fm_warning, oprFM, "Для заявителя по отказанному договору счета не заполнено поле \"Улица в адресе местонахождения\""+ AddErrAddrFromPaymName );
      end;

      if( Trim(oprFM.OprParty(_FM_PARTY_DEC_ACC_REJ).StayAddrHouse) == "" )
        addError( fm_warning, oprFM, "Для заявителя по отказанному договору счета не заполнено поле \"Номер дома в адресе местонахождения\""+ AddErrAddrFromPaymName );
      end;

      if( Trim(oprFM.OprParty(_FM_PARTY_DEC_ACC_REJ).INN) == "" )
        addError( fm_warning, oprFM, "Для заявителя по отказанному договору счета не заполнено поле \"ИНН\"" );
      end;

      if( (oprFM.OprParty(_FM_PARTY_DEC_ACC_REJ).PartyType == "Ю") or (oprFM.OprParty(_FM_PARTY_DEC_ACC_REJ).PartyType == "П") )
      
        if( Trim(oprFM.OprParty(_FM_PARTY_DEC_ACC_REJ).RegNumber) == "" )
          addError( fm_warning, oprFM, "Для заявителя по отказанному договору счета не заполнено поле \"Регистрационный номер\"" );
        end;

        if( oprFM.OprParty(_FM_PARTY_DEC_ACC_REJ).RegDate == date(0,0,0) )
          addError( fm_warning, oprFM, "Для заявителя по отказанному договору счета не заполнено поле \"Дата регистрации\"" );
        end;

      end;
    end;

    if( (oprFM.OprParty(_FM_PARTY_DEC_ACC_REJ).PartyType == "Ф") or (oprFM.OprParty(_FM_PARTY_DEC_ACC_REJ).PartyType == "П") )
    
      if( Trim(oprFM.OprParty(_FM_PARTY_DEC_ACC_REJ).CodeDocum) == "" )
        addError( fm_warning, oprFM, "Для заявителя по отказанному договору счета не заполнено поле \"Код\" сведений о документе, удостоверяющем личность" );
      end;

      if( Trim(oprFM.OprParty(_FM_PARTY_DEC_ACC_REJ).PaperSeries) == "" )
        addError( fm_warning, oprFM, "Для заявителя по отказанному договору счета не заполнено поле \"Серия\" сведений о документе, удостоверяющем личность" );
      end;

      if( Trim(oprFM.OprParty(_FM_PARTY_DEC_ACC_REJ).PaperNumber) == "" )
        addError( fm_warning, oprFM, "Для заявителя по отказанному договору счета не заполнено поле \"Номер\" сведений о документе, удостоверяющем личность" );
      end;

      if( oprFM.OprParty(_FM_PARTY_DEC_ACC_REJ).PaperIssuedDate == date(0,0,0) )
        addError( fm_warning, oprFM, "Для заявителя по отказанному договору счета не заполнено поле \"Дата выдачи\" сведений о документе, удостоверяющем личность" );
      end;

      if( Trim(oprFM.OprParty(_FM_PARTY_DEC_ACC_REJ).PaperIssuer) == "" )
        addError( fm_warning, oprFM, "Для заявителя по отказанному договору счета не заполнено поле \"Кем выдан\" сведений о документе, удостоверяющем личность" );
      end;

      if(SkipSimpleCheck == false)
        if( oprFM.OprParty(_FM_PARTY_DEC_ACC_REJ).Birthday == date(0,0,0) )
          addError( fm_warning, oprFM, "Для заявителя по отказанному договору счета не заполнено поле \"Дата рождения\"" );
        end;

        if( Trim(oprFM.OprParty(_FM_PARTY_DEC_ACC_REJ).BirthPlace) == "" )
          addError( fm_warning, oprFM, "Для заявителя по отказанному договору счета не заполнено поле \"Место рождения\"" );
        end;

        if( Trim(oprFM.OprParty(_FM_PARTY_DEC_ACC_REJ).ForeignPublicFunctionary) == "" )
          addError( fm_warning, oprFM, "Для заявителя по отказанному договору счета не заполнено поле \"Принадлежность к ИПДЛ\"" );
        end;
      end;
    end;

    if( oprFM.OprParty(_FM_PARTY_DEC_ACC_REJ).PartyType == "Ю" ) 
    
      if( Trim(oprFM.OprParty(_FM_PARTY_DEC_ACC_REJ).OKPO) == "" )
        addError( fm_warning, oprFM, "Для заявителя по отказанному договору счета не заполнено поле \"ОКПО\"" );
      end;

    end;
    
  end;


  if( (oprFM.OperationType == FM_OPER_TYPE_REJ_OPR) )
    
    AddErrAddrFromPaymName = "";

    if(Trim(oprFM.OprParty(_FM_PARTY_CLN_OPR_REJ).FactAddrFromPayment) != "")
      AddErrAddrFromPaymName = ". Рекомендуется использовать значение, указанное в адресе места нахождения из платежа.";
    end;
  
    if(SkipSimpleCheck == false)
      if( Trim(oprFM.OprParty(_FM_PARTY_CLN_OPR_REJ).RegCountry) == "" )
        addError( fm_warning, oprFM, "Для клиента по отказанной операции не заполнено поле \"Страна регистрации\"" );
      end;

      if( Trim(oprFM.OprParty(_FM_PARTY_CLN_OPR_REJ).RegTerritory) == "" )
        addError( fm_warning, oprFM, "Для клиента по отказанной операции не заполнено поле \"Код территории в адресе регистрации\"" );
      end;

      if( (Trim(oprFM.OprParty(_FM_PARTY_CLN_OPR_REJ).RegCountry) == "643") AND (Trim(oprFM.OprParty(_FM_PARTY_CLN_OPR_REJ).RegAddrOKATO) == "") )
        addError( fm_warning, oprFM, "Для клиента по отказанной операции не заполнено поле \"Код региона по ОКАТО в адресе регистрации\"");
      end;

      if( Trim(oprFM.OprParty(_FM_PARTY_CLN_OPR_REJ).RegAddrPlaceName) == "" )
        addError( fm_warning, oprFM, "Для клиента по отказанной операции не заполнено поле \"Населенный пункт в адресе регистрации\"" );
      end;

      if( Trim(oprFM.OprParty(_FM_PARTY_CLN_OPR_REJ).RegAddrStreet) == "" )
        addError( fm_warning, oprFM, "Для клиента по отказанной операции не заполнено поле \"Улица в адресе регистрации\"" );
      end;

      if( Trim(oprFM.OprParty(_FM_PARTY_CLN_OPR_REJ).RegAddrHouse) == "" )
        addError( fm_warning, oprFM, "Для клиента по отказанной операции не заполнено поле \"Номер дома в адресе регистрации\"" );
      end;

      if( Trim(oprFM.OprParty(_FM_PARTY_CLN_OPR_REJ).StayCountry) == "" )
        addError( fm_warning, oprFM, "Для клиента по отказанной операции не заполнено поле \"Страна местонахождения\"" + AddErrAddrFromPaymName );
      end;

      if( Trim(oprFM.OprParty(_FM_PARTY_CLN_OPR_REJ).StayTerritory) == "" )
        addError( fm_warning, oprFM, "Для клиента по отказанной операции не заполнено поле \"Код территории в адресе местонахождения\"" + AddErrAddrFromPaymName );
      end;

      if( (Trim(oprFM.OprParty(_FM_PARTY_CLN_OPR_REJ).StayCountry) == "643") AND (Trim(oprFM.OprParty(_FM_PARTY_CLN_OPR_REJ).StayAddrOKATO) == "") )
        addError( fm_warning, oprFM, "Для клиента по отказанной операции не заполнено поле \"Код региона по ОКАТО в адресе местонахождения\"" + AddErrAddrFromPaymName );
      end;

      if( Trim(oprFM.OprParty(_FM_PARTY_CLN_OPR_REJ).StayAddrPlaceName) == "" )
        addError( fm_warning, oprFM, "Для клиента по отказанной операции не заполнено поле \"Населенный пункт в адресе местонахождения\"" + AddErrAddrFromPaymName );
      end;

      if( Trim(oprFM.OprParty(_FM_PARTY_CLN_OPR_REJ).StayAddrStreet) == "" )
        addError( fm_warning, oprFM, "Для клиента по отказанной операции не заполнено поле \"Улица в адресе местонахождения\"" + AddErrAddrFromPaymName );
      end;

      if( Trim(oprFM.OprParty(_FM_PARTY_CLN_OPR_REJ).StayAddrHouse) == "" )
        addError( fm_warning, oprFM, "Для клиента по отказанной операции не заполнено поле \"Номер дома в адресе местонахождения\"" + AddErrAddrFromPaymName );
      end;

      if( Trim(oprFM.OprParty(_FM_PARTY_CLN_OPR_REJ).INN) == "" )
        addError( fm_warning, oprFM, "Для клиента по отказанной операции не заполнено поле \"ИНН\"" );
      end;

      if( (oprFM.OprParty(_FM_PARTY_CLN_OPR_REJ).PartyType == "Ю") or (oprFM.OprParty(_FM_PARTY_CLN_OPR_REJ).PartyType == "П") )
      
        if( Trim(oprFM.OprParty(_FM_PARTY_CLN_OPR_REJ).RegNumber) == "" )
          addError( fm_warning, oprFM, "Для клиента по отказанной операции не заполнено поле \"Регистрационный номер\"" );
        end;

        if( oprFM.OprParty(_FM_PARTY_CLN_OPR_REJ).RegDate == date(0,0,0) )
          addError( fm_warning, oprFM, "Для клиента по отказанной операции не заполнено поле \"Дата регистрации\"" );
        end;

      end;
    end;

    if( (oprFM.OprParty(_FM_PARTY_CLN_OPR_REJ).PartyType == "Ф") or (oprFM.OprParty(_FM_PARTY_CLN_OPR_REJ).PartyType == "П") )
    
      if( Trim(oprFM.OprParty(_FM_PARTY_CLN_OPR_REJ).CodeDocum) == "" )
        addError( fm_warning, oprFM, "Для клиента по отказанной операции не заполнено поле \"Код\" сведений о документе, удостоверяющем личность" );
      end;

      if( Trim(oprFM.OprParty(_FM_PARTY_CLN_OPR_REJ).PaperSeries) == "" )
        addError( fm_warning, oprFM, "Для клиента по отказанной операции не заполнено поле \"Серия\" сведений о документе, удостоверяющем личность" );
      end;

      if( Trim(oprFM.OprParty(_FM_PARTY_CLN_OPR_REJ).PaperNumber) == "" )
        addError( fm_warning, oprFM, "Для клиента по отказанной операции не заполнено поле \"Номер\" сведений о документе, удостоверяющем личность" );
      end;

      if( oprFM.OprParty(_FM_PARTY_CLN_OPR_REJ).PaperIssuedDate == date(0,0,0) )
        addError( fm_warning, oprFM, "Для клиента по отказанной операции не заполнено поле \"Дата выдачи\" сведений о документе, удостоверяющем личность" );
      end;

      if( Trim(oprFM.OprParty(_FM_PARTY_CLN_OPR_REJ).PaperIssuer) == "" )
        addError( fm_warning, oprFM, "Для клиента по отказанной операции не заполнено поле \"Кем выдан\" сведений о документе, удостоверяющем личность" );
      end;

      if(SkipSimpleCheck == false)
        if( oprFM.OprParty(_FM_PARTY_CLN_OPR_REJ).Birthday == date(0,0,0) )
          addError( fm_warning, oprFM, "Для клиента по отказанной операции не заполнено поле \"Дата рождения\"" );
        end;

        if( Trim(oprFM.OprParty(_FM_PARTY_CLN_OPR_REJ).BirthPlace) == "" )
          addError( fm_warning, oprFM, "Для клиента по отказанной операции не заполнено поле \"Место рождения\"" );
        end;

        if( Trim(oprFM.OprParty(_FM_PARTY_CLN_OPR_REJ).ForeignPublicFunctionary) == "" )
          addError( fm_warning, oprFM, "Для клиента по отказанной операции не заполнено поле \"Принадлежность к ИПДЛ\"" );
        end;
      end;
    end;

    if( oprFM.OprParty(_FM_PARTY_CLN_OPR_REJ).PartyType == "Ю" ) 
    
      if( Trim(oprFM.OprParty(_FM_PARTY_CLN_OPR_REJ).OKPO) == "" )
        addError( fm_warning, oprFM, "Для клиента по отказанной операции не заполнено поле \"ОКПО\"" );
      end;

    end;
  end;

  if( (oprFM.OperationType == FM_OPER_TYPE_REJ_CON) )
    
    AddErrAddrFromPaymName = "";

    if(Trim(oprFM.OprParty(_FM_PARTY_CLN_CON_REJ).FactAddrFromPayment) != "")
      AddErrAddrFromPaymName = ". Рекомендуется использовать значение, указанное в адресе места нахождения из платежа.";
    end;
 
    if(SkipSimpleCheck == false)
      if( Trim(oprFM.OprParty(_FM_PARTY_CLN_CON_REJ).RegCountry) == "" )
        addError( fm_warning, oprFM, "Для клиента по расторгнутому договору счета не заполнено поле \"Страна регистрации\"" );
      end;

      if( Trim(oprFM.OprParty(_FM_PARTY_CLN_CON_REJ).RegTerritory) == "" )
        addError( fm_warning, oprFM, "Для клиента по расторгнутому договору счета не заполнено поле \"Код территории в адресе регистрации\"" );
      end;

      if( (Trim(oprFM.OprParty(_FM_PARTY_CLN_CON_REJ).RegCountry) == "643") AND (Trim(oprFM.OprParty(_FM_PARTY_CLN_CON_REJ).RegAddrOKATO) == "") )
        addError( fm_warning, oprFM, "Для клиента по расторгнутому договору счета не заполнено поле \"Код региона по ОКАТО в адресе регистрации\"");
      end;

      if( Trim(oprFM.OprParty(_FM_PARTY_CLN_CON_REJ).RegAddrPlaceName) == "" )
        addError( fm_warning, oprFM, "Для клиента по расторгнутому договору счета не заполнено поле \"Населенный пункт в адресе регистрации\"" );
      end;

      if( Trim(oprFM.OprParty(_FM_PARTY_CLN_CON_REJ).RegAddrStreet) == "" )
        addError( fm_warning, oprFM, "Для клиента по расторгнутому договору счета не заполнено поле \"Улица в адресе регистрации\"" );
      end;

      if( Trim(oprFM.OprParty(_FM_PARTY_CLN_CON_REJ).RegAddrHouse) == "" )
        addError( fm_warning, oprFM, "Для клиента по расторгнутому договору счета не заполнено поле \"Номер дома в адресе регистрации\"" );
      end;

      if( Trim(oprFM.OprParty(_FM_PARTY_CLN_CON_REJ).StayCountry) == "" )
        addError( fm_warning, oprFM, "Для клиента по расторгнутому договору счета не заполнено поле \"Страна местонахождения\""+ AddErrAddrFromPaymName );
      end;

      if( Trim(oprFM.OprParty(_FM_PARTY_CLN_CON_REJ).StayTerritory) == "" )
        addError( fm_warning, oprFM, "Для клиента по расторгнутому договору счета не заполнено поле \"Код территории в адресе местонахождения\""+ AddErrAddrFromPaymName );
      end;

      if( (Trim(oprFM.OprParty(_FM_PARTY_CLN_CON_REJ).StayCountry) == "643") AND (Trim(oprFM.OprParty(_FM_PARTY_CLN_CON_REJ).StayAddrOKATO) == "") )
        addError( fm_warning, oprFM, "Для клиента по расторгнутому договору счета не заполнено поле  \"Код региона по ОКАТО в адресе местонахождения\""+ AddErrAddrFromPaymName );
      end;

      if( Trim(oprFM.OprParty(_FM_PARTY_CLN_CON_REJ).StayAddrPlaceName) == "" )
        addError( fm_warning, oprFM, "Для клиента по расторгнутому договору счета не заполнено поле \"Населенный пункт в адресе местонахождения\""+ AddErrAddrFromPaymName );
      end;

      if( Trim(oprFM.OprParty(_FM_PARTY_CLN_CON_REJ).StayAddrStreet) == "" )
        addError( fm_warning, oprFM, "Для клиента по расторгнутому договору счета не заполнено поле \"Улица в адресе местонахождения\""+ AddErrAddrFromPaymName );
      end;

      if( Trim(oprFM.OprParty(_FM_PARTY_CLN_CON_REJ).StayAddrHouse) == "" )
        addError( fm_warning, oprFM, "Для клиента по расторгнутому договору счета не заполнено поле \"Номер дома в адресе местонахождения\""+ AddErrAddrFromPaymName );
      end;

    end;

    if( (oprFM.OprParty(_FM_PARTY_CLN_CON_REJ).PartyType == "Ф") or (oprFM.OprParty(_FM_PARTY_CLN_CON_REJ).PartyType == "П") )
    
      if( Trim(oprFM.OprParty(_FM_PARTY_CLN_CON_REJ).CodeDocum) == "" )
        addError( fm_warning, oprFM, "Для клиента по расторгнутому договору счета не заполнено поле \"Код\" сведений о документе, удостоверяющем личность" );
      end;

      if( Trim(oprFM.OprParty(_FM_PARTY_CLN_CON_REJ).PaperSeries) == "" )
        addError( fm_warning, oprFM, "Для клиента по расторгнутому договору счета не заполнено поле \"Серия\" сведений о документе, удостоверяющем личность" );
      end;

      if( Trim(oprFM.OprParty(_FM_PARTY_CLN_CON_REJ).PaperNumber) == "" )
        addError( fm_warning, oprFM, "Для клиента по расторгнутому договору счета не заполнено поле \"Номер\" сведений о документе, удостоверяющем личность" );
      end;

      if( oprFM.OprParty(_FM_PARTY_CLN_CON_REJ).PaperIssuedDate == date(0,0,0) )
        addError( fm_warning, oprFM, "Для клиента по расторгнутому договору счета не заполнено поле \"Дата выдачи\" сведений о документе, удостоверяющем личность" );
      end;

      if( Trim(oprFM.OprParty(_FM_PARTY_CLN_CON_REJ).PaperIssuer) == "" )
        addError( fm_warning, oprFM, "Для клиента по расторгнутому договору счета не заполнено поле \"Кем выдан\" сведений о документе, удостоверяющем личность" );
      end;

      if(SkipSimpleCheck == false)
        if( oprFM.OprParty(_FM_PARTY_CLN_CON_REJ).Birthday == date(0,0,0) )
          addError( fm_warning, oprFM, "Для клиента по расторгнутому договору счета не заполнено поле \"Дата рождения\"" );
        end;

        if( Trim(oprFM.OprParty(_FM_PARTY_CLN_CON_REJ).BirthPlace) == "" )
          addError( fm_warning, "Для клиента по расторгнутому договору счета не заполнено поле \"Место рождения\"" );
        end;

        if( Trim(oprFM.OprParty(_FM_PARTY_CLN_CON_REJ).ForeignPublicFunctionary) == "" )
          addError( fm_warning, oprFM, "Для клиента по расторгнутому договору счета не заполнено поле \"Принадлежность к ИПДЛ\"" );
        end;
      end;
    end;

    if( oprFM.OprParty(_FM_PARTY_CLN_CON_REJ).PartyType == "Ю" ) 
    
      if( Trim(oprFM.OprParty(_FM_PARTY_CLN_CON_REJ).OKPO) == "" )
        addError( fm_warning, oprFM, "Для клиента по расторгнутому договору счета не заполнено поле \"ОКПО\"" );
      end;

    end;
    
  end;


  if( (oprFM.OperationType == FM_OPER_TYPE_LEGAL) and (oprFM.PayerBankSign == 0) )

    if( Trim(oprFM.OprParty(_FM_PARTY_PAYER).BankCode) != "" )
      
      if( not CheckBankCodeAndName(oprFM.OprParty(_FM_PARTY_PAYER)) )

        addError( fm_warning, oprFM, "Значение поля \"Код банка\" плательщика не соответствует наименованию банка плательщика" );

      end;
    
    end;

  end;

  if( (oprFM.OperationType == FM_OPER_TYPE_LEGAL) and (oprFM.ReceiverBankSign == 0) )

    if( Trim(oprFM.OprParty(_FM_PARTY_RECEIVER).BankCode) != "" )
      
      if( not CheckBankCodeAndName(oprFM.OprParty(_FM_PARTY_RECEIVER)) )

        addError( fm_warning, oprFM, "Значение поля \"Код банка\" получателя не соответствует наименованию банка получателя" );

      end;
    
    end;

  end;

  if( oprFM.Type == OPCONTR_TYPE_OC )
    
    allOC = allOC + 1;
    
      if( errOprType == fm_error   ) errOC  = errOC  + 1;
    elif( errOprType == fm_warning ) warnOC = warnOC + 1;
    end;

  elif( oprFM.Type == OPCONTR_TYPE_UO )

    allUO = allUO + 1;
    
      if( errOprType == fm_error   ) errUO  = errUO  + 1;
    elif( errOprType == fm_warning ) warnUO = warnUO + 1;
    end;

  else

    allRO = allRO + 1;
    
      if( errOprType == fm_error   ) errRO  = errRO  + 1;
    elif( errOprType == fm_warning ) warnRO = warnRO + 1;
    end;

  end;

  return errOprType;

end;

macro PostControlFillOperation()

[                             Контроль правильности заполнения полей операции                                           ];
[                                                                                                                       ];
[Дата и время контроля ########## ########                                                                              ] (date:f, time:f);
[Исполнитель: ##### #                                                                                                   ] ({oper}, {Name_Oper});

  if( (errOC == 0) and (errUO == 0) and (errRO == 0) and (warnOC == 0) and (warnRO == 0) and (warnUO == 0) )

[                                                                                                                       ];
[Не найдено ошибок при проверке правильности заполнения полей операции                                                  ];

  else

[+-+----------+-----+------------------+------------------+-----+-----+--------+----------------------------------------+];
[| |          | Код |                  |                  | Код | Код |  ИД    |                                        |];
[| |   Дата   | вал |      Сумма       |   Сумма в руб.   | ОК  | НО  |операции|      Примечание                        |];
[+-+----------+-----+------------------+------------------+-----+-----+--------+----------------------------------------+];

  PrintErrorInformation();


[                                                                                                                       ];
[Всего обработано операций: #####                                                                                       ] (allOC + allUO + allRO);
[                из них ОК: #####                                                                                       ] (allOC);
[                из них НО: #####                                                                                       ] (allUO);
[                                                                                                                       ];
[       Не содержат ошибок: #####                                                                                       ] (allOC + allUO + allRO - errOC - warnOC - warnUO - errUO - errRO - warnRO);
[                из них ОК: #####                                                                                       ] (allOC - errOC - warnOC);
[                из них НО: #####                                                                                       ] (allUO - errUO - warnUO);
[                                                                                                                       ];
[          Содержат ошибки: #####                                                                                       ] (errOC + errUO + errRO);
[                из них ОК: #####                                                                                       ] (errOC);
[                из них НО: #####                                                                                       ] (errUO);
[                                                                                                                       ];
[  Содержат предупреждения: #####                                                                                       ] (warnOC + warnUO + warnRO);
[                из них ОК: #####                                                                                       ] (warnOC);
[                из них НО: #####                                                                                       ] (warnUO);
  
  end;

end;
