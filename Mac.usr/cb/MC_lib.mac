/************************************************************************/
/*         Автоматизированная банковская система RS-Bank                */
/*            Copyright (c) R-Style Software Lab 1999                   */
/*                                                                      */
/*  Имя файла   : MC_lib.mac                                            */
/*                                                                      */
/*  Описание    : Библиотека для работы мультивалютных проводок         */
/*                                                                      */
/*  Создан      : 22.07.1999                                            */
/************************************************************************/
IMPORT BankInter, CTInter, FIInter, OprInter, "mc_prim_doc.mac", "globals.mac", oralib;

CONST
        КодВалютыРубли          = 0,
        ВидСчетаОВПДебет        = 235, /* Тип счета операции: Счет ОВП по дебету в Мультивалютн.*/
        ВидСчетаОВПКредит       = 236, /* Тип счета операции: Счет ОВП по кредиту в Мультивалютн*/
        ВидСчетаДоходов         = 237, /* Тип счета операции: Счет Доходов банка Мультивал.     */
        ВидСчетаРасходов        = 238; /* Тип счета операции: Счет Расходов банка Мультивал.     */

VAR
        СчетОВПДебет            = "",
        СчетОВПКредит           = "",
        СчетДоходов             = "", /* Счет доходов по операции - Задается в шаге операции*/
        СчетРасходов            = ""; /* Счет расходов по операции - Задается в шаге операции*/


FILE    OCP (ocp) key 1;  /* БД счетов ОВП*/
FILE    ФИ (fininstr);          /* справочник финансовых инструментов */
//Gurin S. R-594294-2 19.06.2015
FILE    recacc ("account");        /* лицевые счета */


/************************************************************************/
/*   Функция ищет финансовый инструмент по польз. коду                  */
/************************************************************************/
MACRO ПолучитьФИПоПользКоду (ПользКодФИ)
        keynum (ФИ, 1);
        ФИ.FI_Code = Trim (ПользКодФИ);
        if ( GetEQ(ФИ) )
                Return TRUE;
        else
                Return False;
        end;
END;


/************************************************************************/
/*   Функция ищет финансовый инструмент по основному коду               */
/************************************************************************/
MACRO ПолучитьФИПоКодуID (КодФИ)
        keynum (ФИ, 0);
        ФИ.FIID = КодФИ;
        if ( GetEQ(ФИ) )
                Return TRUE;
        else
                Return False;
        end;
END;


/************************************************************************/
/*   Функция возвращает номер лицевого счета ОВП (СчетОВП)              */
/************************************************************************/
MACRO ПолучитьСчетОВП
(
 OCPAccount : string,  /* счет ОВП                */
 Chapter    : integer, /* глава                   */
 FIID       : integer, /* код ФИ                  */
 KindOper   : integer, /* не используется         */
 Department : integer, /* филиал                  */
 NeedOpen   : bool     /* нужно ли создавать счет */
) : bool

  var stat : bool;
  var IsOpen : integer;
  var PD : PDocMultyCarry;

  if( Department == null ) Department = {OperDprt}; end;

  PD = PDocMultyCarry( null, Chapter, Department );

  IsOpen = MC_OPENACC_CHECKEXIST;

  if( NeedOpen ) IsOpen = MC_OPENACC_RECREATE; end;

  OCPAccount = MC_FindAndOpenCommonAccByFD( "ОВП", PD, null, IsOprMultiExec(), IsOpen, null,
                                            FIID, null, null, null, null, null, null, Department );

  stat = false;

  if( OCPAccount != "" ) stat = true; end;

  SetParm( 0, OCPAccount );

  return stat;
        
END;

/************************************************************************/
/*   Функция проверяет наличие лиц. счета                               */
/************************************************************************/
MACRO   ЛСчетСуществует (Глава, КодВалюты, ЛСчет)
  recacc.Chapter        = Глава;
  recacc.Account        = ЛСчет;
  recacc.Code_Currency  = КодВалюты;
  if (GetEQ(recacc))
          Return TRUE;
  else
          Return FALSE;   
  end;
END;


/************************************************************************/
/*   Функция проверяет суммы и персчитывает их в случае надобности      */
/************************************************************************/
macro CheckMultyCarrySum( FIID_From, FIID_To, 
                          Amount_From, Amount_To, Date, 
                          SumEq_Payer, SumEq_Receiver, 
                          Chapter, Account_From, Account_To )
  var Amount;
  var SumEq;   

  if( (Amount_From != 0) and (Amount_To != 0) )
    return true; /* заданы обе суммы и никакого пересчета не надо */
  elif( (Amount_From == 0) and (Amount_To == 0) )
    return false; /* обе суммы не могут быть нулевые */
  elif( Amount_To == 0 )
    if( ConvSumCross( Amount, Amount_From, Date, FIID_From, FIID_To ) )
      SetParm(3, Amount);

      if( (valtype(SumEq_Receiver) != V_UNDEF) AND (valtype(Chapter) != V_UNDEF) AND (valtype(Account_To) != V_UNDEF) )
        if( CalcEqSumAccountFromSum(Chapter, Account_To, FIID_To, Date, Amount, SumEq) )
          SetParm(6, SumEq);
        end;
      end;
      return true;
    end;
    return false;
  else
    if( ConvSumCross( Amount, Amount_To, Date, FIID_To, FIID_From ) )
      SetParm(2, Amount);
      
      if( (valtype(SumEq_Payer) != V_UNDEF) AND (valtype(Chapter) != V_UNDEF) AND (valtype(Account_From) != V_UNDEF))
        if( CalcEqSumAccountFromSum(Chapter, Account_From, FIID_From, Date, Amount, SumEq) )
          SetParm(5, SumEq);
        end;
      end;
      return true;
    end;
    return false;
  end;
end;

/*-----------------------------------------------*/
/* Класс для добавления SQL-фильтра к таблице    */
/* и последующего гарантированного его удаления  */
/*-----------------------------------------------*/
PRIVATE CLASS TAddFilter( bfile:TBFile, filterStr:string )
  private var m_bfile:TBFile = bfile;
  m_bfile.AddFilter( filterStr );
  MACRO destructor()
    m_bfile.DropFilter();
  END;
END;


/*-----------------------------------------------*/
/* Классы для работы с мультивалютным документом */
/* (ReadOnly)                                    */
/*-----------------------------------------------*/

/* проводка по документу */
CLASS (TRecHandler)TDocCarry()

  /*конструктор*/
  InitTRecHandler("acctrn.dbt", "bank.def");

  /*получить проводку*/
  MACRO get():bool
    var fdocument:TBFile = TBFile("acctrn.dbt", "R", 0, "acctrn.dbt", "bank.def");
    
    if( fdocument and rec.AccTrnID )
      fdocument.rec.AccTrnID = rec.AccTrnID;
      if(fdocument.GetEQ())
        Copy(_extObj, fdocument);
        return TRUE;
      else
        return FALSE;
      end;
    else
      return FALSE;
    end;

  END;

END;

/* список проводок по документу */
CLASS (TArray)TDocCarryList(parent:object, docKind:integer)
  private var m_parent:object;

  /*конструктор*/
  InitTArray();
  m_parent = WeakRef(parent);

  /*очистить список*/
  MACRO clear()
    size = 0;
  END;
  
  /*добавить в конец списка*/
  MACRO append(carry:TDocCarry)
    value(size) = carry;
  END;

  /*получить список проводок*/
  MACRO get(docKind:integer):bool
    var carry:TDocCarry;
    
    clear();
    
    var select:string = "select t_AccTrnID from dpmdocs_dbt where t_PaymentID = :PaymentID order by t_AccTrnID";
    var params:TArray = TArray();
    params[0] = SQLParam( "PaymentID", m_parent.Payment.rec.PaymentID );
    var rs:RsdRecordset = execSQLselect( select, params );
    
    if( rs )
      while( rs.moveNext() )
        carry = TDocCarry();
        carry.rec.AccTrnID = int(rs.value(0));
        if(carry.get())
          append(carry);
        else
          return FALSE;
        end;
      end;
    end;
    return TRUE;
  END;

END;

/* документ */
CLASS (TRecHandler)TDocument(TableName:string)
  private var m_carries:TDocCarryList;
  var m_payment:TRecHandler  = TRecHandler("pmpaym.dbt", "bank.def");
  var m_rmpayment:TRecHandler = TRecHandler("pmrmprop.dbt", "bank.def");

  /*конструктор*/
  InitTRecHandler(TableName, "bank.def");
  m_carries = TDocCarryList(this);

  /*проинициализировать записью*/
  MACRO init(doc:TRecHandler, _payment:TRecHandler, _rmpayment:TRecHandler)
    Copy(_extObj, doc);
    copy(m_payment, _payment);
    copy(m_rmpayment, _rmpayment);
  END;
  
  /*получить универсальный строковый идентификатор*/
  MACRO getUniID():string
    return "";
  END;
  
  /*список проводок*/
  MACRO carries():TDocCarryList
    return m_carries;
  END;

  MACRO Payment():TRecHandler
    return m_payment;
  END;

  MACRO PMPayment():TRecHandler
    return m_rmpayment;
  END;

  /*получить документ*/
  MACRO get():bool
    return FALSE;
  END;

END;

/* мультивалютный документ*/
CLASS (TDocument)TMultyDoc()

  InitTDocument("multydoc.dbt");
  
  /*получить универсальный строковый идентификатор*/ 
  MACRO getUniID():string
    return string( rec.AutoKey:34:o );
  END;

  /*получить мультивалютный документ*/
  MACRO get():bool
    var fmultydoc:TBFile = TBFile("multydoc.dbt", "R", 0, "multydoc.dbt", "bank.def");
  
    carries().clear();
    
    if(rec.AutoKey)
      fmultydoc.rec.AutoKey = rec.AutoKey;
      if(fmultydoc.GetEQ())
        Copy(_extObj, fmultydoc);
        return TRUE;
      else
        return FALSE;
      end;
    else
      return FALSE;
    end;
  END;

END;

/* Определяет плательщика/получателя по счету */
macro GetClientByAccount( FIID, recacc)
   ClearRecord(recacc);
   recacc.Chapter = 1;
   recacc.Account = Trim(recacc);
   recacc.Code_Currency = FIID;
   if ( getEQ(recacc) )
     return recacc.Client;
   end;
   return 0;
end;
