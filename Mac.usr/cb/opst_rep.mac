/*──────────────────────────────────────────────────────────────────────────┐
  RS-Bank 5.1                                          R-Style Software Lab

  Description : Печать отчета о массовых действиях

└───────────────────────────────────────────────────────────────────────────*/
import oprinter, CTInter, PaymInter;
import "gstname.mac";
import "lib_account.mac";

private const 
              ErrorMode = 0,
              FirstMode = 1,
              LastMode  = 2;

private const 
              ColumnNumber   = 3,
              MaxLineSize    = 130, 
              ErrorCodeSize  = 7;

private const 
              LeftIndentMode    = 0,
              RightIndentMode   = 1,
              CenterIndentMode  = 2;


private
  var FirstAction;
  var SplitLine;
  var StringErrorSize;

/*
   Параметры отчета
*/
var ReportHeadLine;             /* Заголовок отчета */
var RunSuccessMsg;              /* Сообщение, выводимое при успешном выполнении */
var ColumnStrIDLength;          /* Длина колонки, в которой выводится номер, код и т.п. обрабатываемого объекта */
var ColumnStrIDHead;            /* Заголовок колонки, в которой выводится номер, код и т.п. обрабатываемого объекта */

var AmountStrIDLength;          /* Длина колонки, в которой выводится сумма обрабатываемого объекта */
var AmountStrIDHead;            /* Заголовок колонки, в которой выводится сумма обрабатываемого объекта */
var PayAmountStrIDLength;          /* Длина колонки, в которой выводится сумма обрабатываемого объекта */
var PayAmountStrIDHead;            /* Заголовок колонки, в которой выводится сумма обрабатываемого объекта */
var DateStrIDLength;            /* Длина колонки, в которой выводится дата обрабатываемого объекта */
var DateStrIDHead;              /* Заголовок колонки, в которой выводится дата обрабатываемого объекта */




var PrintOnlyError;             /* Флажок печати только сообщений об ошибке */

private macro AddToSplitLine( Line, Length )
  var i = 0;
  if( Length > 0 )
    if( SubStr(Line, StrLen(Line)) != "+" ) Line = Line + "+"; end;
    while( i < Length )
      i = i + 1;
      Line = Line + "-";
    end;
    Line = Line + "+";
  end;
  return Line;
end;

private macro AddSpace( StrSource, Length )
  var i = 0;
  while( i < Length )
    StrSource = StrSource + " ";
    i = i + 1;
  end;
  return StrSource;
end;

private macro AddToTabLine( Line, Content, Length, IndentMode, NoTabMode )
  var i = 0;
  var LeftIndent, RightIndent;
  var TabSymb;

  if( Length > 0 )
    TabSymb = "|";
    if( valtype(NoTabMode) != V_BOOL )
      NoTabMode = false;
    end;

    LeftIndent  = 0;
    RightIndent = Length - StrLen(Content);
    if( (valtype(IndentMode) == V_STRING) )
      if( IndentMode == "r" )
        LeftIndent  = Length - StrLen(Content);
        RightIndent = 0;
      elif( IndentMode == "c" )
        LeftIndent  = (Length - StrLen(Content)) / 2;
        RightIndent = (Length - StrLen(Content)) - LeftIndent;
      end;
    end;

    if( (not NoTabMode) and (SubStr(Line, StrLen(Line)) != TabSymb) ) Line = Line + TabSymb; end;
    Line = AddSpace( Line, LeftIndent );
    Line = Line + Content;
    Line = AddSpace( Line, RightIndent );
  
    if( (not NoTabMode) ) Line = Line + TabSymb; end;
  end;
  return Line;
end;


/* Напечатать шапку таблицы */
private macro PrintTableHeadLine(oprstep)
  
  var TabLine;
  /* размер последней колонки с сообщением об ошибке */
  StringErrorSize = MaxLineSize - ColumnStrIDLength - ErrorCodeSize - (ColumnNumber + 1);

  SplitLine = "";
  SplitLine = AddToSplitLine( SplitLine, ColumnStrIDLength );  /* колонка, идентифицирующая запись */
  SplitLine = AddToSplitLine( SplitLine, 20 );  /* счет плательщика*/
  SplitLine = AddToSplitLine( SplitLine, 20 );  /* счет получателя */

  /*Для БОЦБ будем выводить по своему*/
  if(oprstep.DocKind != DL_SECURITYDOC)
     SplitLine = AddToSplitLine( SplitLine, AmountStrIDLength );  /* сумма документа     */
  end;
  if( oprstep.DocKind == CB_MULTYDOC)
    SplitLine = AddToSplitLine( SplitLine, PayAmountStrIDLength );  /* сумма документа     */
  end;
  if(oprstep.DocKind == PS_BUYCURORDER)
     SplitLine = AddToSplitLine( SplitLine, PayAmountStrIDLength ); /* кредит cумма документа */
  end;

  /*Для БОЦБ будем выводить по своему*/
  if(oprstep.DocKind != DL_SECURITYDOC)
     SplitLine = AddToSplitLine( SplitLine, DateStrIDLength   );  /* дата документа      */
  end;
  SplitLine = AddToSplitLine( SplitLine, ErrorCodeSize     );  /* результат (номер) выполнения     */
  SplitLine = AddToSplitLine( SplitLine, StringErrorSize   );  /* результат (сообщение) выполнения */

  TabLine = "";
  TabLine = AddToTabLine( TabLine, ColumnStrIDHead, ColumnStrIDLength, "c" );  /* колонка, идентифицирующая запись */
  TabLine = AddToTabLine( TabLine, "Счет плательщика", 20    , "c" );  /* счет  */
  TabLine = AddToTabLine( TabLine, "Счет получателя", 20    , "c" );  /* счет  */
  
  /*Для БОЦБ будем выводить по своему*/
  if(oprstep.DocKind != DL_SECURITYDOC)
     if(oprstep.DocKind == CB_MULTYDOC)
       TabLine = AddToTabLine( TabLine, "Дебет Сумма",   AmountStrIDLength, "c" );  /* сумма   документа */
       TabLine = AddToTabLine( TabLine, AmountStrIDHead, AmountStrIDLength, "c" );  /* сумма   документа */
     elif(oprstep.DocKind == PS_BUYCURORDER)
       TabLine = AddToTabLine( TabLine, AmountStrIDHead, AmountStrIDLength, "c" );        /* сумма документа */
       TabLine = AddToTabLine( TabLine, PayAmountStrIDHead, PayAmountStrIDLength, "c" );  /* кредит cумма документа */
     else
       TabLine = AddToTabLine( TabLine, AmountStrIDHead, AmountStrIDLength, "c" );  /* сумма   документа */
     end;
     TabLine = AddToTabLine( TabLine, DateStrIDHead  , DateStrIDLength  , "c" );  /* дата   документа  */
  end;

  TabLine = AddToTabLine( TabLine, "Рез-тат"      , ErrorCodeSize    , "c" );  /* результат (номер) выполнения     */
  TabLine = AddToTabLine( TabLine, "Сообщение"    , StringErrorSize  , "c" );  /* результат (сообщение) выполнения */

  /* Печать шапки таблицы */
  println( AddToTabLine( "", ReportHeadLine, MaxLineSize, "c", true )  );
  println( SplitLine );
  println( TabLine   );
  println( SplitLine );

end;

/* Напечатать нижнюю часть таблицы */
private macro PutTableCaption()

  println( SplitLine );

end;

/* Напечатать одну строку таблицы */
private macro _PrintTableLine(oprstep, ColumnStrID, Acc, AccRec, SumDoc, SumDocCr, DateDoc,StatusError, StringError )
  var TabLine = "";
  
  TabLine = AddToTabLine( TabLine, ColumnStrID        , ColumnStrIDLength, "l" );  /* колонка, идентифицирующая запись */
  TabLine = AddToTabLine( TabLine, Acc     , 20 );  /* счет */
  TabLine = AddToTabLine( TabLine, AccRec  , 20 );  /* счет */

  /*Для БОЦБ будем выводить по своему*/
  if(oprstep.DocKind != DL_SECURITYDOC)
    if( oprstep.DocKind != PS_INRQ)
      TabLine = AddToTabLine( TabLine, SumDoc           , AmountStrIDLength );  /* сумма   документа */
    else
      TabLine = AddToTabLine( TabLine, SumDocCr         , AmountStrIDLength );  /* сумма   документа */
    end;
  end;
  if(oprstep.DocKind == CB_MULTYDOC)
    TabLine = AddToTabLine( TabLine, SumDocCr         , PayAmountStrIDLength );  /* сумма   документа */
  end;
  if(oprstep.DocKind == PS_BUYCURORDER)
    TabLine = AddToTabLine( TabLine, SumDocCr         , PayAmountStrIDLength );  /* кредит cумма документа */
  end;
  /*Для БОЦБ будем выводить по своему*/
  if(oprstep.DocKind != DL_SECURITYDOC)
     TabLine = AddToTabLine( TabLine, DateDoc            , DateStrIDLength   );  /* дата   документа  */
  end;

  TabLine = AddToTabLine( TabLine, string(StatusError), ErrorCodeSize    , "r" );  /* результат (номер) выполнения     */
  TabLine = AddToTabLine( TabLine, StringError        , StringErrorSize  , "l" );  /* результат (сообщение) выполнения */

  println( TabLine );
end;

/* Напечатать результат выполнения одного действия */
private macro PrintTableLine(oprstep, ColumnStrID, SumDoc, SumDocCr, DateDoc, StatusError, StringError, acc, accrec )
  
  array StringArray;
  var i;
  debugbreak;
  if( (not PrintOnlyError) or (StatusError != 0) )

    if  ( StatusError == 0 ) 
          StringError = RunSuccessMsg + StringError;
    elif( Acc_IsBankrupt(Acc) ) // 27.02.2013 Golovkin C-17185
          StringError = "Клиент-банкрот. " + StringError;
    end;

    StrSplit( StrSubst(StringError, "|", " " ), StringArray, StringErrorSize );

    _PrintTableLine( oprstep, ColumnStrID, acc, accrec, SumDoc, SumDocCr, DateDoc, StatusError, StringArray(0));

    i = 1;
    while( StrLen(StringArray(i)) > 0 )
      _PrintTableLine( oprstep, "", "", "", "", "", "", "",StringArray(i) );
      i = i + 1;
    end;

  end;

end;

private macro GetObjectType( _DocKind )
  var _ObjectType = 0;
 
  /* кассовые ордера ББ */
  if( (_DocKind == CASH_BOF_ADDORDER) or 
      (_DocKind == CASH_BOF_INCORDER) or
      (_DocKind == CASH_BOF_OUTORDER) )
       _ObjectType = 631;
  /* объявления на взнос */
  elif( _DocKind == CASH_PS_INCORDER )
       _ObjectType = 632;
  /* чеки */
  elif( _DocKind == CASH_PS_OUTORDER ) 
       _ObjectType = 633;
  /* Заявление на открытие счета */
  elif( _DocKind == PS_REQOPENA ) 
       _ObjectType = 450; /* OBJTYPE_REQOPENA */
  /* Поручение на покупку/продажу валюты */
  elif( _DocKind == PS_BUYCURORDER )
       _ObjectType = 644; /* OBJTYPE_PSBCORDER */
  /* Рублевые платежи(треб., треб-пор.) банка */
  elif( _DocKind == DLDOC_BANKPAYMENT )
       _ObjectType = 600;
  elif( _DocKind == DLDOC_BANKCLAIM )
       _ObjectType = 601;
  /* Рублевый платежный документ */
  elif( _DocKind == PS_PAYORDER )
       _ObjectType = OBJTYPE_PSPAYORD;/* 500*/
  /* Валютные платежи ББ */
  elif( _DocKind == BBANK_CPORDER )
       _ObjectType = 641;/*OBJTYPE_BBANKCPORDER;*/
  /* Валютные платежи РКО */
  elif( _DocKind == PS_CPORDER ) 
       _ObjectType = 643;/*OBJTYPE_PSCPORDER;*/
  /* Мультивалютный документ */
  elif( _DocKind == CB_MULTYDOC )
     _ObjectType = OBJTYPE_MULTYDOC;
  /* Мемориальный ордер ( рубли/валюта ) */
  elif( _DocKind == DLDOC_MEMORIALORDER )
    _ObjectType = OBJTYPE_MEMORIALORDER;
  /* Сводный мемориальный ордер ( рубли/валюта ) */
  elif( _DocKind == DLDOC_SUMMARY_MEMORDER )
    _ObjectType = OBJTYPE_SUMMARY_MEMORIALORDER;
  /* Тип сделки */
  elif( _DocKind == DL_SECURITYDOC )
    _ObjectType = OBJTYPE_DEALTYPE;
  /* ИПВС */
  elif( _DocKind == PS_INRQ )
    _ObjectType = 515;/*OBJTYPE_PSINRQ*/  
  end;
  
  return _ObjectType;
end;

/* Получить номер документа из pmrmprop */
private macro GetRmpropNumber(DocKind, OrderID, Purpose, SubPurpose, payamount, recamount, valuedate, acc, accrec)
  file Fpmpaym(pmpaym) key 1;
  file Fpmrmprop(pmrmprop);
  var _ColumnStrID = "";

  ClearRecord( Fpmpaym );
  ClearRecord( Fpmrmprop );

  Fpmpaym.DocKind = DocKind;
  Fpmpaym.DocumentID = OrderID; 
  Fpmpaym.Purpose = Purpose;
  Fpmpaym.SubPurpose = SubPurpose;
  if(not GetEQ(Fpmpaym))
     return _ColumnStrID;
  end;
  Fpmrmprop.PaymentID = Fpmpaym.PaymentID;
  if(not GetEQ(Fpmrmprop))
     return _ColumnStrID;
  end;
  _ColumnStrID = Fpmrmprop.Number;
  SetParm(4,Fpmpaym.Amount);
  SetParm(5,Fpmpaym.PayAmount);
  SetParm(6,Fpmpaym.ValueDate);
  SetParm(7,Fpmpaym.PayerAccount);
  SetParm(8,Fpmpaym.ReceiverAccount);

  return _ColumnStrID;

end;




/* Функция, которая должна возвратить строку, идентифицирующую запись  */
macro DefineColumnStrID( oprstep, Am, Pam,DDoc, acc, accrec )
  file FDeal      ( dl_tick  );
  file FCashorder ( pscshdoc );
  file FReqopena  ( reqopena );
  file FPs_bcord  ( ps_bcord );
  file FMemorder  ( memorder );
  file FPspayord  ( pspayord );
  file FBbcpord   ( bbcpord  );
  file FPscpord   ( pscpord  );
  file FMultydoc  ( multydoc );
  file FCbdoc     ( cb_doc   );
  file FSinrq     ( psinrq   );
  file FPMPaym     ( pmpaym   );
  file oproper    ( oproper  );
  var ColumnStrID = "";
  var Amount ;
  var PayAmount ;
  var DateDoc ;
  var accnt,  accntrec;
  debugbreak;
  clearrecord(oproper);
  oproper.ID_Operation = oprstep.ID_Operation;
  if(not GetEQ(oproper))
     return ColumnStrID;
  end;
  
  /*Для БОЦБ будем выводить по своему*/
  if(oprstep.DocKind == DL_SECURITYDOC)
      ClearRecord( FDeal );
      if( (not RestoreFromUniID(oproper.DocumentID, FDeal, GetObjectType(oprstep.DocKind)/*OBJTYPE_DEALTYPE*/, oproper.DocKind)) OR
          (not GetEQ(FDeal)) )
         return ColumnStrID;
      end;
      ColumnStrID = FDeal.DealCode;

  /* Кассовые документы */
  elif( (oprstep.DocKind == CASH_BOF_ADDORDER) or 
        (oprstep.DocKind == CASH_PS_INCORDER)  or
        (oprstep.DocKind == CASH_PS_OUTORDER)  or
        (oprstep.DocKind == CASH_BOF_INCORDER) or
        (oprstep.DocKind == CASH_BOF_OUTORDER) )
      ClearRecord( FCashorder );
      if( not RestoreFromUniID(oproper.DocumentID, FCashorder, GetObjectType(oprstep.DocKind), oproper.DocKind) OR
          (not GetEQ(FCashorder)) )
         return ColumnStrID;
      end;
      ColumnStrID = GetRmpropNumber(oprstep.DocKind, FCashorder.AutoKey, PM_PURP_CASHBAL, 0, Amount, PayAmount, DateDoc, accnt, accntrec);

  /* Заявление на открытие счета */
  elif( oprstep.DocKind == PS_REQOPENA )
      ClearRecord( FReqopena );
      if( not RestoreFromUniID(oproper.DocumentID, FReqopena, GetObjectType(oprstep.DocKind), oproper.DocKind) OR
          (not GetEQ(FReqopena)) )
         return ColumnStrID;
      end;
      ColumnStrID = FReqopena.Number;

  /* Поручение на покупку/продажу валюты */
  elif( oprstep.DocKind == PS_BUYCURORDER )
      ClearRecord( FPs_bcord );
      if( not RestoreFromUniID(oproper.DocumentID, FPs_bcord, GetObjectType(oprstep.DocKind), oproper.DocKind) OR
          (not GetEQ(FPs_bcord)) )
         return ColumnStrID;
      end;
      ColumnStrID = GetRmpropNumber(oprstep.DocKind, FPs_bcord.PaymentID, PM_PURP_PSBCCONV, 0, Amount, PayAmount, DateDoc, accnt, accntrec);

  /* Рублевый платежный документ */
  elif( oprstep.DocKind == PS_PAYORDER ) 
      ClearRecord( FPspayord );
      if( not RestoreFromUniID(oproper.DocumentID, FPspayord, GetObjectType(oprstep.DocKind), oproper.DocKind) OR
          (not GetEQ(FPspayord)) )
         return ColumnStrID;
      end;
      ColumnStrID = GetRmpropNumber(PS_PAYORDER, FPspayord.OrderID, 7, 0, Amount, PayAmount, DateDoc, accnt, accntrec);

  /* Валютные платежи ББ */
  elif( oprstep.DocKind == BBANK_CPORDER ) 
      ClearRecord( FBbcpord );
      if( not RestoreFromUniID(oproper.DocumentID, FBbcpord, GetObjectType(oprstep.DocKind), oproper.DocKind) OR
          (not GetEQ(FBbcpord)) )
         return ColumnStrID;
      end;
      ColumnStrID = GetRmpropNumber(BBANK_CPORDER, FBbcpord.OrderID, 15, 0, Amount, PayAmount, DateDoc, accnt, accntrec);

  /* Валютные платежи РКО */
  elif( oprstep.DocKind == PS_CPORDER ) 
      ClearRecord( FPscpord );
      if( not RestoreFromUniID(oproper.DocumentID, FPscpord, GetObjectType(oprstep.DocKind), oproper.DocKind) OR
          (not GetEQ(FPscpord)) )
         return ColumnStrID;
      end;
      ColumnStrID = GetRmpropNumber(PS_CPORDER, FPscpord.OrderID, 7, 0, Amount, PayAmount, DateDoc, accnt, accntrec);

  /* Рублевые платежи(треб., треб-пор.) банка */
  elif( (oprstep.DocKind == DLDOC_BANKPAYMENT) or
        (oprstep.DocKind == DLDOC_BANKCLAIM) )
      ClearRecord( FMemorder );
      if( not RestoreFromUniID(oproper.DocumentID, FMemorder, GetObjectType(oprstep.DocKind), oproper.DocKind) OR
          (not GetEQ(FMemorder)) )
         return ColumnStrID;
      end;
      ColumnStrID = GetRmpropNumber(FMemorder.DocKind, FMemorder.OrderID, 15, 0, Amount, PayAmount, DateDoc, accnt, accntrec);
      debugbreak;
  /* Мультивалютный документ */
  elif( oprstep.DocKind == CB_MULTYDOC )
      ClearRecord( FMultydoc );
      if( not RestoreFromUniID(oproper.DocumentID, FMultydoc, GetObjectType(oprstep.DocKind), oproper.DocKind) OR
          (not GetEQ(FMultydoc)) )
         return ColumnStrID;
      end;
      ColumnStrID = GetRmpropNumber(oprstep.DocKind, FMultydoc.AutoKey, PM_PURP_MULTYDOC, 0, Amount, PayAmount, DateDoc, accnt, accntrec);

  /* Мемориальный ордер */
  elif( oprstep.DocKind == DLDOC_MEMORIALORDER )
      ClearRecord( FCbdoc );
      if( not RestoreFromUniID(oproper.DocumentID, FCbdoc, GetObjectType(oprstep.DocKind), oproper.DocKind) OR
          (not GetEQ(FCbdoc)) )
         return ColumnStrID;
      end;
      ColumnStrID = GetRmpropNumber(oprstep.DocKind, FCbdoc.DocumentID, PM_PURP_MEMORDER, 0, Amount, PayAmount, DateDoc, accnt, accntrec);
  
  /* Сводный мемориальный ордер */
  elif( oprstep.DocKind == DLDOC_SUMMARY_MEMORDER )
      ClearRecord( FPMPaym );
      if( not RestoreFromUniID(oproper.DocumentID, FPMPaym, GetObjectType(oprstep.DocKind), oproper.DocKind) OR
          (not GetEQ(FPMPaym)) )
         return ColumnStrID;
      end;
      ColumnStrID = GetRmpropNumber(oprstep.DocKind, FPMPaym.DocumentID, PM_PURP_MEMORDER, 0, Amount, PayAmount, DateDoc, accnt, accntrec);

  
  /* ИПВС */
  elif( oprstep.DocKind == PS_INRQ )
      ClearRecord( FSinrq );
      if( not RestoreFromUniID(oproper.DocumentID, FSinrq, GetObjectType(oprstep.DocKind), oproper.DocKind) OR
          (not GetEQ(FSinrq)) )
         return ColumnStrID;
      end;
      ColumnStrID = GetRmpropNumber(oprstep.DocKind, FSinrq.PaymentID, PM_PURP_POPRIMARY, 0, Amount, PayAmount, DateDoc, accnt, accntrec);
  end;

  SetParm(1,Amount);
  SetParm(2,PayAmount);
  SetParm(3,DateDoc);
  SetParm(4,accnt);
  SetParm(5,accntrec);

  return ColumnStrID;

end;

/* Функция, в которой можно задать параметры (длину и заголовок) первой колонки по буферу шага операции (oprstep.dbt)*/
macro DefineColumnStrIDSettings( oprstep )
   
   /*Для БОЦБ будем выводить по своему*/
   if(oprstep.DocKind == DL_SECURITYDOC)
      ColumnStrIDLength = 31;
      ColumnStrIDHead   = "Код сделки";
   elif( 
         /* Кассовые документы */
         (oprstep.DocKind == CASH_BOF_ADDORDER) or 
         (oprstep.DocKind == CASH_PS_INCORDER)  or
         (oprstep.DocKind == CASH_PS_OUTORDER)  or
         (oprstep.DocKind == CASH_BOF_INCORDER) or
         (oprstep.DocKind == CASH_BOF_OUTORDER) or
         /* Рублевые платежи(треб., треб-пор.) банка */
         (oprstep.DocKind == DLDOC_BANKPAYMENT) or
         (oprstep.DocKind == DLDOC_BANKCLAIM) or
         /* Заявление на открытие счета */
         (oprstep.DocKind == PS_REQOPENA) or 
         /* Валютные платежи ББ */
         (oprstep.DocKind == BBANK_CPORDER) or
         /* Валютные платежи РКО */
         (oprstep.DocKind == PS_CPORDER) or
         /* Рублевый платежный документ клиента */
         (oprstep.DocKind == PS_PAYORDER) or
         /* Мультивалютный документ */
         (oprstep.DocKind == CB_MULTYDOC) or
         /* Мемориальный ордер */
         (oprstep.DocKind == DLDOC_MEMORIALORDER) or
         /* Сводный мемориальный ордер */
         (oprstep.DocKind == DLDOC_SUMMARY_MEMORDER) or
         /* ИПВС */
         (oprstep.DocKind == PS_INRQ)
       ) 
      ColumnStrIDLength = 17;
      ColumnStrIDHead   = "Номер документа";
      AmountStrIDLength = 13;
      AmountStrIDHead   = "Сумма";
      PayAmountStrIDLength = 13;
      PayAmountStrIDHead   = "Кредит Сумма";    
      DateStrIDLength   = 10;  
      DateStrIDHead     = "Дата" ;    
   
   elif( oprstep.DocKind == PS_BUYCURORDER ) 
      ColumnStrIDLength = 17;
      ColumnStrIDHead   = "Номер документа";
      AmountStrIDLength = 13;
      AmountStrIDHead   = "Сумма продажи";
      PayAmountStrIDLength = 13;
      PayAmountStrIDHead   = "Сумма покупки";    
      DateStrIDLength   = 10;  
      DateStrIDHead     = "Дата" ;

   end;
end;

/* Определение статуса платежа */
PRIVATE MACRO GetStatus( PaymentID:integer ):integer
  var query:string = " SELECT pmpaym.t_paymstatus " +
                       " FROM dpmpaym_dbt pmpaym " +
                      " WHERE pmpaym.t_paymentid = :PaymentID ";                                

  var params:TArray = TArray();
  params[params.size] = SQLParam( "PaymentID", PaymentID);
  var rset:RsdRecordset = execSQLselect( query, params, true );

  if( rset and rset.moveNext() )
    return rset.value(0);
  end;

  return -1;
END; 

/*
    Макрофункция, печатающая отчет о групповом выполнении
*/
macro Печать_ОтчетСканирования( Mode, PrimDoc, StatusError, StringError )

  record oprstep("oprstep.dbt");
  file oproper    ( oproper  );  
  var Amount    ;
  var PayAmount ;
  var DateDoc   ;
  var ColumnStrId;
  var acc, accrec;
  SetBuff( oprstep, PrimDoc );
  
  
  if( Mode == FirstMode )
    
    FirstAction = true;

  elif( Mode == ErrorMode )
    
    if( FirstAction )
      DefineColumnStrIDSettings( oprstep );

      PrintTableHeadLine( oprstep );

      FirstAction = false;
    end;
      clearrecord(oproper);
  
      oproper.ID_Operation = oprstep.ID_Operation;
      
      if(/* Кассовые документы */
        (oprstep.DocKind == CASH_BOF_ADDORDER) or 
        (oprstep.DocKind == CASH_PS_INCORDER)  or
        (oprstep.DocKind == CASH_PS_OUTORDER)  or
        (oprstep.DocKind == CASH_BOF_INCORDER) or
        (oprstep.DocKind == CASH_BOF_OUTORDER) or
        /* Рублевые платежи(треб., треб-пор.) банка */
        (oprstep.DocKind == DLDOC_BANKPAYMENT) or
        (oprstep.DocKind == DLDOC_BANKCLAIM) or
        /* Валютные платежи ББ */
        (oprstep.DocKind == BBANK_CPORDER) or
        /* Валютные платежи РКО */
        (oprstep.DocKind == PS_CPORDER) or
        /* Рублевый платежный документ клиента */
        (oprstep.DocKind == PS_PAYORDER) or
        /* Мультивалютный документ */
        (oprstep.DocKind == CB_MULTYDOC) or
        /* Мемориальный ордер */
        (oprstep.DocKind == DLDOC_MEMORIALORDER) or
         /* Сводный мемориальный ордер */
         (oprstep.DocKind == DLDOC_SUMMARY_MEMORDER) or
        /* ИПВС */
        (oprstep.DocKind == PS_INRQ) or  
        /* ППК */
        (oprstep.DocKind == PS_BUYCURORDER) ) 


        if( GetEQ(oproper) )
          StringError=string(StringError)+". " + string(GetStepNameExecuteRead(int(oproper.DocumentId), oprstep.DocKind, GetStatus( int(oproper.DocumentId) )));
        else
          StringError=string(StringError)+". Шаг документа не выяснен";
        end;

      end;

      ColumnStrId = DefineColumnStrID(oprstep,Amount,PayAmount,DateDoc,acc, accrec);

      PrintTableLine(oprstep, ColumnStrId, String(Amount), String(PayAmount), String(DateDoc), StatusError, StringError, string(acc), string(accrec));
    
  elif( Mode == LastMode )

    PutTableCaption();

  end;

end;

/* Точка входа в макрос */
ReportHeadLine    = "";
RunSuccessMsg     = "Действие выполнено успешно";
ColumnStrIDLength = 0;
ColumnStrIDHead   = "";
PrintOnlyError    = false;
