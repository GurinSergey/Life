/* ╔══════════════════════════════════════════════════════════════════╗  */
/*         Автоматизированная банковская система RS-Bank v5.0            */
/*                 Copyright (c) R-Style Software Lab 1998               */
/*                                                                       */
/*  Имя файла        : cbctuncs.mac                                      */
/*                                                                       */
/*  Описание         : Первичный документ для категорий незавершенных    */
/*                     счетов                                            */
/*                                                                       */
/*  Программист      : Бабин А.П.                                        */
/*                                                                       */
/*  Создан           : 20.01.2004                                        */
/*                                                                       */
// KS 26.11.2013 Адаптация под 31ю сборку
/* ╚══════════════════════════════════════════════════════════════════╝  */

import PTInter, CTInter, OprInter, payments, globals, oralib, likepy, Календарь, /*bnk_common*/ bnk_ptlib;//TAM 04.09.2014 HF_74
import PaymInter;
import "fg_Life_parm.mac"; // KS 25.01.2011

/*========================================================================*/
/*                         Список параметров                              */
/*                  доступных для первичного документа                    */
/*========================================================================*/

CLASS Unc_AvailableParametrs

/* данные класса ---------------------------------------------------- */

   PRIVATE VAR
      List = TArray, last = 0;

/* ------------------------------------------------------------------ */

/* регистрация параметра -------------------------------------------- */

   MACRO registration( parm )
      List[last] = parm;
      last = last + 1;
      return parm;
   END;

/* ------------------------------------------------------------------ */

/* зарегистрирован ли параметр -------------------------------------- */

   MACRO isMY( parm )
      var i = 0;

      while( i != last )
         if( List[i] == parm ) return true; end;
         i = i + 1;
      end;

      return false;
   END;

/* ------------------------------------------------------------------ */

END;


/* Получить календарь филиала */
PRIVATE MACRO GetDepartmentCalendar(Department:integer):integer
  var rset:object;
  var select:string;
  var params:TArray = TArray();

  select = " SELECT T_Calendar FROM DDP_DEP_DBT WHERE T_CODE = :Department ";

  params[params.size] = SQLParam( "Department", Department );
  rset = execSQLselect( select, params, TRUE );

  if( rset and rset.moveNext() )
    return rset.value(0);
  end;

  return 0;
END;

PRIVATE MACRO GetNextDepDate(Department:integer):date
  var rset:object;
  var select:string;
  var params:TArray = TArray();
  var bdDate : date;
  bdDate = date(0,0,0);

  select = " select t_CurDate " +              
           "   from dcurdate_dbt " +
           "  where t_Branch = :Department " +
           "    and t_IsClosed <> 'X' " +
           "    and t_CurDate > :CurDate " +
           "  order by t_CurDate ";

  params[params.size] = SQLParam( "Department", Department );
  params[params.size] = SQLParam( "CurDate", {curdate} );
  rset = execSQLselect( select, params, TRUE );

  if( rset and rset.moveNext() )
    bdDate = rset.value(0);
  else
    return GetDateAfterWorkDays( {curdate}, 1, GetDepartmentCalendar(Department) );
  end;

  return bdDate;
END;

/* Получить PartyID следующего филиала  */
PRIVATE MACRO GetPartyIDNextDepartment(Department:integer, EndDepartment:integer):integer
  var NextDep:integer = MFR_GetNextDepartment( Department, EndDepartment );
  var rset:object;
  var select:string;
  var params:TArray = TArray();

  select = " SELECT T_PartyID FROM DDP_DEP_DBT WHERE T_CODE = :Department ";

  params[params.size] = SQLParam( "Department", NextDep );
  rset = execSQLselect( select, params, TRUE );

  if( rset and rset.moveNext() )
    return rset.value(0);
  end;
  return 0;
END;

//------------------------------------------------------------------------------
// Документ завис на блоке МФР?
//------------------------------------------------------------------------------
MACRO PM_IsMFRProcessing( PaymentID:integer, DocKind:integer ):bool
                                                                                    
  var select:string = " select st.t_Symbol " +
                      "   from doproper_dbt op, doprstep_dbt st" +
                      "  where op.t_DocKind      = :DocKind " +
                      "    and op.t_DocumentID   = LPAD(:DocumentID, 34, '0') " +
                      "    and st.t_ID_Operation = op.t_ID_Operation " +
                      "    and ( st.t_IsExecute  = 'R' or  st.t_IsExecute = chr(0) ) " +
                      "    and st.t_Symbol       = 'ф' " ;

  var params:TArray = makeArray( SQLParam( "DocKind"   , DocKind   ),
                                 SQLParam( "DocumentID", PaymentID ));
       
  var rs:RsdRecordset = execSQLselect( select, params, false );

  if( rs and rs.moveNext() )
    return true;
  else
    return false;
  end;

END;

/*========================================================================*/
/*                Первичный документ для категорий                        */
/*                                                                        */
/*========================================================================*/

CLASS PaymentAccUnclosed( parm1, parm2, IsSender )

/* данные класса ---------------------------------------------------- */

   PRIVATE VAR
      ParmA        = TArray,
      FIRoleBArray = TArray,
      regList      = Unc_AvailableParametrs;

    VAR
      Error = 0, kind, id,

      payment  = TBfile( "pmpaym.dbt"   ),
      pmprop   = TBfile( "pmprop.dbt" ),
      IsKlient, IsNatCur, IsCB, IsWaitDate;

/* ------------------------------------------------------------------ */

/* инициализация массива -------------------------------------------- */

   PRIVATE MACRO InitParmArray
      var cors;
      var PaymOnMFR:bool = false;
      var PaymDocKind:integer = payment.rec.PrimDocKind;
      var retval:integer = 0;
      var PaymentObj:RsbPayment = RsbPayment( payment.rec.PaymentID );

      if( PaymDocKind == 0 )
        PaymDocKind = payment.rec.DocKind;
      end;

      // Документ, "зависший" в блоке "МФР"
      if( PM_IsMFRProcessing( payment.rec.PaymentID, PaymDocKind ) )
        PaymOnMFR = true;
      end;

      ParmA[regList.registration(MC_TYPE_PARAMETR_DOCKIND   )]    = payment.rec.DocKind   ;
      ParmA[regList.registration(MC_TYPE_PARAMETR_DOCID     )]    = payment.rec.PaymentID ;
      
      if( PaymOnMFR ) // Для документов, "зависших" в блоке "МФР" выполнить 
        ParmA[regList.registration(MC_TYPE_PARAMETR_INDEXDATE)]   = GetNextDepDate(payment.rec.Department);
        ParmA[regList.registration(MC_TYPE_PARAMETR_OWNER   )]    = GetPartyIDNextDepartment(payment.rec.Department, payment.rec.EndDepartment);
        ParmA[regList.registration(MC_TYPE_PARAMETR_FIID     )]   = payment.rec.FIID_FuturePayAcc;
        ParmA[regList.registration(MC_TYPE_PARAMETR_PAYCURRENCY)] = payment.rec.FIID_FuturePayAcc;
      else
        if ( pmprop.rec.DebetCredit==1 )
           if (payment.rec.Payer == -1)
           ParmA[regList.registration(MC_TYPE_PARAMETR_OWNER     )] = {OurBank} ;
           else
           ParmA[regList.registration(MC_TYPE_PARAMETR_OWNER     )] = payment.rec.Payer     ;
           end;

        else
           ParmA[regList.registration(MC_TYPE_PARAMETR_OWNER     )] = payment.rec.Receiver  ;
        end;
        if( pmprop.rec.TransferDate > {curdate} )
          ParmA[regList.registration(MC_TYPE_PARAMETR_INDEXDATE )]  = pmprop.rec.TransferDate  ;
        else
          ParmA[regList.registration(MC_TYPE_PARAMETR_INDEXDATE )]  = GetDateAfterWorkDays( {curdate}, 1 );
        end;
        ParmA[regList.registration(MC_TYPE_PARAMETR_FIID     )]     = pmprop.rec.PayFIID     ;
        ParmA[regList.registration(MC_TYPE_PARAMETR_PAYCURRENCY)]   = pmprop.rec.PayFIID     ;
      end;
      ParmA[regList.registration(MC_TYPE_PARAMETR_DEPARTMENT)]    = payment.rec.Department;
      if ( pmprop.rec.Corschem == -1 )
         //ParmA[regList.registration(MC_TYPE_PARAMETR_PARTY     )] = pmprop.rec.OurCorrID     ;
         ParmA[regList.registration(MC_TYPE_PARAMETR_PARTY     )] = 0;
      else
         cors = TBfile( "corschem.dbt" );
         cors.rec.FI_Kind = 1;
         cors.rec.Number = pmprop.rec.Corschem;
         cors.rec.FIID = pmprop.rec.PayFIID;
         cors.GetEQ;
         ParmA[regList.registration(MC_TYPE_PARAMETR_PARTY     )] = cors.rec.CorrID;
      end;

      if( ParmA[MC_TYPE_PARAMETR_PARTY]==0 )
         ParmA[MC_TYPE_PARAMETR_PARTY] = {OurBank};
      end;
      
      if( not PaymOnMFR ) 
        ParmA[regList.registration(MC_TYPE_PARAMETR_CONTRACTOR)] = ParmA[MC_TYPE_PARAMETR_PARTY];
      else
        ParmA[regList.registration(MC_TYPE_PARAMETR_CONTRACTOR)] = GetPartyIDNextDepartment(payment.rec.Department, payment.rec.EndDepartment);
      end;
 
      var arr = makeArray( SQLParam( "p_PaymentID", payment.rec.PaymentID) );
  
      if ( PaymentObj.Categories.IsAttrPresense(16, 1, NULL, NULL, false, {curdate} ) )
         IsKlient = 1;
      elif ( PaymentObj.Categories.IsAttrPresense(16, 2, NULL, NULL, false, {curdate} ) )
         IsKlient = 0;
      else
        retval = execStoredFunc( "PM_COMMON.GetOperInitiatorCtg", V_INTEGER, arr );
        if( retval )  
          PaymentObj.Categories.ConnectAttr(16, retval, NULL, NULL, {curdate} );
          if(retval == 1)
            IsKlient = 1;
          end;
          if( retval == 2)
            IsKlient = 0;
          end;
        end;
      end;

  // KS 25.01.2011
  private var fgBank = fg_life_subject({OurBank});
  if (( fgBank.is_VUZ ) or ( fgBank.is_EXV ))

      if (PM_FindBalanceInReg_117( "PS\\REQOPENACC\\СЧЕТА ФИЗИЧЕСКИХ ЛИЦ", payment.rec.PayerAccount, 1))
         IsKlient = 0
      else
         IsKlient = 1;
      end;
  else
      //Seleznev
      if (PM_FindBalanceInReg_117( "PS\\REQOPENACC\\Счета клиентов", payment.rec.PayerAccount, 1))
         IsKlient = 1
      else
         IsKlient = 0;
      end;
  end;


      if( ( not PaymOnMFR ) and
           БанкУБР( ParmA[MC_TYPE_PARAMETR_PARTY] ) )
          IsCB = 1;
      else
         IsCB = 0;
      end;

      if( PaymOnMFR )
        IsNatCur = IfThenElse(payment.rec.FIID_FuturePayAcc == 0, 1, 0);
      else
        IsNatCur = IfThenElse(pmprop.rec.PayFIID == 0, 1, 0);
      end;

      if( payment.rec.ValueDate > pmprop.rec.TransferDate )
        IsWaitDate = 1;
      else
        IsWaitDate = 0;
      end;

      FIRoleBArray[0] = 0;
   END;

/* ------------------------------------------------------------------ */

/* вернуть параметр второго рода ------------------------------------ */

    MACRO GetParametr( ParmKind, OperDate, CatCode, FIRole )
       VAR Parametr = -1;       
       if( regList.isMY(ParmKind) ) 
           return ParmA[ParmKind]; 
       end;
       return Parametr;
    END;

/* ------------------------------------------------------------------ */

/* вернуть параметр первого рода ------------------------------------ */

    MACRO GetParametrTemplate ( ObjectID, Classificator, OperDate, FIRole )         
       VAR Parametr = -1;
       if ( (ObjectID==OBJTYPE_UNCL_PAYMTYPE) AND (Classificator==LLCLASS_UNCS_PAYMTYPE) )
         return IsKlient;
       elif ( (ObjectID==OBJTYPE_UNCL_FITYPE) AND (Classificator==LLCLASS_UNCS_FITYPE) )
         return IsNatCur;
       elif ( (ObjectID==OBJTYPE_UNCL_ROUTE) AND (Classificator==LLCLASS_UNCS_ROUTE) )
         return IsCB;
       elif ( (ObjectID==OBJTYPE_UNCL_WAITDATE) AND (Classificator==LLCLASS_UNCS_WAITDATE) )
         return IsWaitDate;
       end;
       return Parametr;
    END;

/* ------------------------------------------------------------------ */

/* остновная роль фИ ------------------------------------------------ */

    MACRO GetBasisFIRole(FIRole)
       return FIROLE_UNDEF;
    END;

/* ------------------------------------------------------------------ */

/* вернуть весь базис ролей ----------------------------------------- */

    MACRO GetFIRoleBArray()
       return FIRoleBArray;
    END;

/* ------------------------------------------------------------------ */

/* найти/открыть счет ---------------------------------------------- */

   MACRO FindAndOpenAccount( ActionDate )
      if( (valtype(ActionDate) == V_UNDEF) or (valtype(ActionDate) != V_DATE) )
        ActionDate = {curdate};
      end;

      if ( pmprop.rec.DebetCredit==1 )
         return MC_FindAndOpenAccount( "Незавершенные расчеты OUT", this, ActionDate, IsOprMultiExec(), MC_OPENACC_CREATE, null, null, null, null, null, null );
      else
         return MC_FindAndOpenAccount( "Незавершенные расчеты IN", this, ActionDate, IsOprMultiExec(), MC_OPENACC_CREATE, null, null, null, null, null, null );
      end;
   END;

/* ------------------------------------------------------------------ */

/* найти счет ------------------------------------------------------- */

   MACRO FindAccount()
      if ( pmprop.rec.DebetCredit==1 )
         return MC_FindAndOpenAccount( "Незавершенные расчеты OUT", this, {curDate}, IsOprMultiExec(), MC_OPENACC_ACT, null, null, null, null, null, null );
      else
         return MC_FindAndOpenAccount( "Незавершенные расчеты IN", this, {curDate}, IsOprMultiExec(), MC_OPENACC_ACT, null, null, null, null, null, null );
      end;
   END;

/* ------------------------------------------------------------------ */

/* привязать счет заново -------------------------------------------- */

   MACRO RecreateAccount( )
      if ( pmprop.rec.DebetCredit==1 )
         return MC_FindAndOpenAccount( "Незавершенные расчеты OUT", this, {curDate}, IsOprMultiExec(), MC_OPENACC_RECREATE, null, null, null, null, null, null );
      else
         return MC_FindAndOpenAccount( "Незавершенные расчеты IN", this, {curDate}, IsOprMultiExec(), MC_OPENACC_RECREATE, null, null, null, null, null, null );
      end;
   END;

/* ------------------------------------------------------------------ */

/* Корректировка счета ---------------------------------------------- */

   MACRO CorrectAccount( account, accblnc, ORScheme, categ, templ, accdoc,  OperDate )
      return true;
   END;
/* ------------------------------------------------------------------ */

/* Вернуть дату ----------------------------------------------------- */
   MACRO GetDate()
      return GetParametr( MC_TYPE_PARAMETR_INDEXDATE, null, null, null );
   END;
/* ------------------------------------------------------------------ */

/* конструктор ------------------------------------------------------ */
    if( (ValType(parm1) == V_INTEGER) and (ValType(parm2) == V_INTEGER) )

       payment.rec.PaymentID = parm2;
       if( not payment.GetEQ )
         return null;
       end;

       pmprop.rec.PaymentID   = parm2;
       pmprop.rec.DebetCredit = 0;
       if( ( not pmprop.GetEQ ) or ( pmprop.rec.IsSender != IsSender ) ) 
         pmprop.rec.PaymentID   = parm2;
         pmprop.rec.DebetCredit = 1;
         if( not pmprop.GetEQ ) 
           return null; 
         end;
       end;

    elif ( (ValType(parm1) == V_GENOBJ) and (ValType(parm2) == V_UNDEF) )
       /* Пока самы простой вариант, когда перейдем на класс платежа */
       /* полностью нужно переписать все через него                  */
       payment = parm1.GetPM_PAYM;

       pmprop = parm1.GetDEBET;
       if(pmprop.rec.IsSender != IsSender )  
         pmprop = parm1.GetCREDIT;
       end;
    else
       copy( payment, parm1 );
       copy( pmprop, parm2 );
    end;

    InitParmArray();

    Kind = ParmA[MC_TYPE_PARAMETR_DOCKIND];    
    Id   = ParmA[MC_TYPE_PARAMETR_DOCID  ];
/* ------------------------------------------------------------------ */

END;

class (PaymentAccUnclosed) OutPaymentAccUnclosed(parm1, parm2)
   initPaymentAccUnclosed(parm1, parm2, ""); 
end;

class (PaymentAccUnclosed) InPaymentAccUnclosed(parm1, parm2)
   initPaymentAccUnclosed(parm1, parm2, "X");  
end;