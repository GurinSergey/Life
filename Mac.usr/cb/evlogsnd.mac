/*
$Name:           evlogsnd.mac
$Module:         Ядро ГКБО
$Description:    Реализация задания планировщика "Процедура оповещения внешнего сервиса о событии"
*/

import XmlRpcInter, ServiceAction, BankInter, cb_sql, commonutil;
import rsd, oralib, likepy;
import rcw,RSD;

private var jvm = CreateObject ("rsjvm", "TJavaHost", "GlobalJavaHost");

private var jrequest = jvm.createJavaObject ("ru.softlab.integration.ws.OutboundService_Service");
//private var jservice = jrequest.getOutboundServicePt;
private var jservice = jrequest.getOutboundServicePt();
//private var params = "<?xml version='1.0' encoding='windows-1251'?><ChangeCurDate><From><CodAS>RS_BANK_VUZ</CodAS><BIK>046577781</BIK><Department>000</Department></From><NewCurDate>2015-06-02</NewCurDate><Timestamp>2015-06-02T12:32:44</Timestamp></ChangeCurDate>"; 

private var rsEventLog;
private var UserErrorMacro;
private var ErrCallTime;



private macro getxmlrequest (id_req)
private var cmd;
private var rs;
private var clobSize ;
private var xmlTestStr;

   cmd = rsdCommand( "select convert(t_params,'RU8PC866','CL8MSWIN1251')  message , dbms_lob.getlength(convert(t_params,'RU8PC866','CL8MSWIN1251')) REQ_SIZE  from deventlog_dbt where T_EVENTLOGID =? " );
   cmd.addparam( "id", RSDBP_IN, id_req );

   rs = rsdRecordSet( cmd );

    if( rs.movenext )
        clobSize     = rs.value( "REQ_SIZE", NULL, V_INTEGER );
        rs.blobLimitSize = clobSize;
        rs.fld( "message" ).read( xmlTestStr, clobSize );
       // result = jservice.synchBankListFromABS(xmlTestStr);
        return xmlTestStr;
    else
        return "not_found";
    end;
    OnError(err);
        return "error_exception";
end;


private macro _NotifySystemError(EventLogID)
  var stat;
  if(UserErrorMacro == null)
    GetRegistryValue("CB\\ASYNC_CALL_SERVICE\\USER_ERROR_MACRO", V_STRING, UserErrorMacro, stat);
  end;
  if(UserErrorMacro != "")
    ExecMacroFile(UserErrorMacro, "SystemError", EventLogID);
  end;
end;

private macro _GetErrCallTime()
  var stat;
  if(ErrCallTime == null)
    GetRegistryValue("CB\\ASYNC_CALL_SERVICE\\ERR_RECALL_TIME", V_INTEGER, ErrCallTime, stat);
  end;
  return abs(ErrCallTime);
end;

private macro _SetEventLogStateErrFlds(EventLogID, State, ErrMsg, ErrDate, ErrTime)
  var sqlStr, cmd;                                                          
  sqlStr = "UPDATE deventlog_dbt SET t_State = ?, t_ErrMsg = ?, t_ErrDate = ?, t_ErrTime = ? WHERE t_EventLogID = ?";

  cmd = RSDCommand(sqlStr);
  cmd.addParam("", RSDBP_IN, State     );
  cmd.addParam("", RSDBP_IN, ErrMsg    );
  cmd.addParam("", RSDBP_IN, ErrDate   );
  cmd.addParam("", RSDBP_IN, ErrTime   );
  cmd.addParam("", RSDBP_IN, EventLogID);
  cmd.Execute();

OnError(err);
  AbortTrn;
end;


private macro insertintologrequest(EventLogID, State, Params)
  var sqlStr, cmd;                                                          
  sqlStr = "insert into  USR_DEVENTLOG_DBT  (T_EVENTLOGID , t_State ,T_PARAMS , T_EVENTDATE) values (?,?,?,SYSTIMESTAMP)";

  cmd = RSDCommand(sqlStr);
  cmd.addParam("", RSDBP_IN, EventLogID);
  cmd.addParam("", RSDBP_IN, State     );
  cmd.addParam("", RSDBP_IN, Params    );
  cmd.Execute();

OnError(err);
  return 0;
end;


private macro _TestCallGetWeather(EventLogID)
  var inParams = TArray;
  var url = "http://www.webservicex.net/globalweather.asmx?WSDL";
  var method = "GetWeather";
  var Params;
  var stat = 0;
  var outParams;
  var encoding;
  var outResponse;
  var errMsg:string;
  var obj;

  var guid = CreateGUID();

  stat = iGetEventLogParams(2, Params);
  if(stat == 0)
    var prm_CityName = RslSoapPrm;
    var prm_CountryName = RslSoapPrm;
    prm_CityName.Name = "CityName";
    prm_CityName.Value = Params;
    inParams[0] = prm_CityName;
    prm_CountryName.Name = "CountryName";
    prm_CountryName.Value = Params;
    inParams[1] = prm_CountryName;

    stat = CallSimpleExtService(guid, url, method, inParams, "", "", 0, outParams, encoding, outResponse, errMsg);
  
    if(stat)
      _SetEventLogStateErrFlds(EventLogID, 1, errMsg, date(), time());
    else
      // сервис не возвращает ошибку, а просто отвечает что нет данных
      // но в нашем примере это можно считать ошибкой внешнего сервиса
      //_SetEventLogStateErrFlds(EventLogID, 2, outResponse, date(), time());
    end;
  end;

  // ошибок нет
  if(stat == 0)
    _SetEventLogStateErrFlds(EventLogID, 4, "", date(0, 0, 0), time(0, 0, 0));
  end;

  return stat;
end;

private macro _GetEchoResponse()
  var retVal = "";

  retVal = retVal + "<?xml version='1.0' encoding='utf-8'?>";
  retVal = retVal + "<soap:Envelope xmlns:soap='http://schemas.xmlsoap.org/soap/envelope/' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd='http://www.w3.org/2001/XMLSchema'>";
  retVal = retVal + " <soap:Body>";
  retVal = retVal + "  <EchoResponse xmlns='http://tempuri.org/'>";
  retVal = retVal + "   <EchoResult>";
  retVal = retVal + "&lt;?xml version='1.0' encoding='windows-1251'?&gt;";
  retVal = retVal + " &lt;methodResponse xmlns='http://www.softlab.ru/xml-rpc/schema' xmlns:n0='http://www.softlab.ru/xml-rpc/schema' n0:reqId='Undefined'&gt;";
  retVal = retVal + "  &lt;fault&gt;";
  retVal = retVal + "   &lt;value&gt;";
  retVal = retVal + "    &lt;struct&gt;";
  retVal = retVal + "     &lt;member&gt;";
  retVal = retVal + "      &lt;name&gt;faultType&lt;/name&gt;"; 
  retVal = retVal + "      &lt;value&gt;";
  retVal = retVal + "       &lt;integer&gt;1&lt;/integer&gt;"; 
  retVal = retVal + "      &lt;/value&gt;";
  retVal = retVal + "     &lt;/member&gt;";
  retVal = retVal + "     &lt;member&gt;";
  retVal = retVal + "      &lt;name&gt;faultCode&lt;/name&gt;"; 
  retVal = retVal + "      &lt;value&gt;";
  retVal = retVal + "       &lt;integer&gt;1&lt;/integer&gt;"; 
  retVal = retVal + "      &lt;/value&gt;";
  retVal = retVal + "     &lt;/member&gt;";
  retVal = retVal + "     &lt;member&gt;";
  retVal = retVal + "      &lt;name&gt;faultString&lt;/name&gt;";
  retVal = retVal + "      &lt;value&gt;";
  retVal = retVal + "       &lt;string&gt;&lt;![CDATA[Error Message]]&gt;&lt;/string&gt;"; 
  retVal = retVal + "      &lt;/value&gt;";
  retVal = retVal + "     &lt;/member&gt;";
  retVal = retVal + "    &lt;/struct&gt;";
  retVal = retVal + "   &lt;/value&gt;";
  retVal = retVal + "  &lt;/fault&gt;";
  retVal = retVal + " &lt;/methodResponse&gt;";
  retVal = retVal + "   </EchoResult>";
  retVal = retVal + "  </EchoResponse>";
  retVal = retVal + " </soap:Body>";
  retVal = retVal + "</soap:Envelope>";

  return retVal;
end;

private macro _TestCallEcho(EventLogID)
  var ServiceURL = "http://localhost/RSBankWS/RSBankWS.asmx?WSDL";
  var ServiceMethod = "Echo";

  var inParams = TArray;
  var url = ServiceURL;
  var method = ServiceMethod;
  var Params = TXRError;
  var stat = 0;
  var outParams;
  var encoding;
  var outResponse;
  var errMsg:string;
  var obj;

  var guid = CreateGUID();

  if(stat == 0)
    var prm_request = RslSoapPrm;
    var prm_ExactResponse = RslSoapPrm;
    prm_request.Name = "request";
    prm_request.Value = _GetEchoResponse();
    inParams[0] = prm_request;
    prm_ExactResponse.Name = "ExactResponse";
    prm_ExactResponse.Value = "true";
    inParams[1] = prm_ExactResponse;

    stat = CallSimpleExtService(guid, url, method, inParams, "", "", 0, outParams, encoding, outResponse, errMsg);
  
    if(stat)
      _SetEventLogStateErrFlds(EventLogID, 1, errMsg, date(), time());
    else
      // создаем MS-парсер
      var xml = CreateXMLParser();
      xml.validateOnParse = true;
      xml.async = false;
      // парсим полученный SOAP-ответ
      var res = xml.loadXML(outResponse);
      var ServiceMethodResult = xml.getElementsByTagName(ServiceMethod + "Result");
      var XMLResult = ServiceMethodResult.item(0).text;
      stat = ConvertToRsl(XMLResult, obj);
      // проверить существование информации об ошибке в ответе сервиса
      var iprop = GenPropID(obj, "faultString"); 
      if(iprop != -1) // обращаемся к свойству, если оно существует в объекте
        _SetEventLogStateErrFlds(EventLogID, 2, obj.faultString, date(), time());
        stat = 1;
      end;
    end;
  end;

  // ошибок нет
  if(stat == 0)
    _SetEventLogStateErrFlds(EventLogID, 4, "", date(0, 0, 0), time(0, 0, 0));
  end;

  return stat;
end;

private macro _CallService(EventLogID, ServiceURL, ServiceMethod)
  var inParams = TArray;
  var url = ServiceURL;
  var method = ServiceMethod;
  var prm_Params = RslSoapPrm;
  var Params;
  var stat = 0;
  var outParams;
  /*VDN 09.02.2015 В рамках проекта интеграции ИК, запрос 219857*/
  var encoding = 1251; 
  var outResponse;
  var errMsg:string;
  var obj;
  var jresult;
  var guid = CreateGUID();
  //var XMLResult ;
  /*VDN Переписал обработку ответа в рамках проекта интеграции ИК, запрос 218000*/
  //stat = iGetEventLogParams(EventLogID, Params);
/*  if(stat == 0)    
    prm_Params.Name = "Params";  
    prm_Params.Value = Params ; 
    inParams[0] = prm_Params;  */
  //LAO временно закоментировал
    /*VDN 08.02.2015 По запросу 219857*/
  //  if (method == "SendDocStatusFromABS")
  //    encoding = null;       
  //  end;
  //  stat = CallSimpleExtService(guid, url, method, inParams, "", "", 0, outParams, encoding, outResponse, errMsg);
   
    
   jresult =  getxmlrequest(EventLogID);
   insertintologrequest(EventLogID, 1, jresult);
   outResponse = NULL;
  if ((jresult!="not_found") and (jresult!="error_exception"))
   
    if (method == "SendDocStatusFromABS")
      
            outResponse = jservice.sendDocStatusFromABS(jresult);
      
    elif  (method == "SynchBankListFromABS") 
       
            outResponse = jservice.synchBankListFromABS(jresult);
  
    elif  (method == "ChangeCurrentDateFromABS")
    
            outResponse = jservice.changeCurrentDateFromABS(jresult);
   
    elif  (method == "ChangeBillClaimFromABS")
      
            outResponse = jservice.changeBillClaimFromABS(jresult);
      
    elif  (method == "ChangeAccBalanceFromABS")
    
            outResponse = jservice.changeAccBalanceFromABS(jresult);
    elif  (method == "ChangeCurRateFromABS")
       
            outResponse = jservice.changeCurRateFromABS(jresult);
    
    end;
  
   
    if (not outResponse) 
      RunError(errMsg, 1); 
    end;
    // создаем MS-парсер
    /*var xml = CreateXMLParser();
    xml.validateOnParse = true;
    xml.async = false;
     
    if(not xml.loadXML(outResponse))
      RunError(errMsg, 1);
    end;*/
   
   
    //XMLResult =outResponse ;//ServiceMethodResult.item(0).text;
    stat = ConvertToRsl(outResponse, obj);
    // проверить существование информации об ошибке в ответе сервиса
    var iprop = GenPropID(obj, "faultString"); 
    if(iprop != -1) // обращаемся к свойству, если оно существует в объекте
      RunError(obj.faultString, 2);          
    end;
  else
    _SetEventLogStateErrFlds(EventLogID, 1, "Не найден параметр вызова внешнего сервиса", date(), time());
  end;
  
  insertintologrequest(EventLogID, 2, outResponse);
  // ошибок нет
  if(stat == 0)
    _SetEventLogStateErrFlds(EventLogID, 4, "", date(0, 0, 0), time(0, 0, 0));
  end;

  return stat;
onError(ee)   
   _SetEventLogStateErrFlds(EventLogID, 1 /*ee.Err*/, ee.Message, date(), time());
   insertintologrequest(EventLogID, 2, outResponse);
   return 1;
end;

private macro _ProcessEventTrn
  var stat = 0;
  
  _SetEventLogStateErrFlds(rsEventLog.value(0), 3, "", date(0, 0, 0), time(0, 0, 0));

  if((stat == 0) and (rsEventLog.value(1) == ""))
    _SetEventLogStateErrFlds(rsEventLog.value(0), 1, "Не задан URL внешнего сервиса", date(), time());
    stat = 1;
  end;

  if((stat == 0) and (rsEventLog.value(2) == ""))
    _SetEventLogStateErrFlds(rsEventLog.value(0), 1, "Не задан метод внешнего сервиса", date(), time());
    stat = 1;
  end;

  if(stat == 0)
    stat = _CallService(rsEventLog.value(0), rsEventLog.value(1), rsEventLog.value(2));
    //stat = _TestCallEcho(rsEventLog.value(0));
    //stat = _TestCallGetWeather(rsEventLog.value(0));
  end;

end;

private macro _GetEventLogRecordset(State, ObjectType, EventType)
  var query;
  var rs;
  var params = TArray;

  query = "SELECT t_EventLogID, t_ServiceURL, t_ServiceMethod FROM deventlog_dbt WHERE t_State = :State ";
  
  params[params.size()] = SQLParam("State", State);

  if(ObjectType > 0)
    query = query + " AND t_ObjectType = :ObjectType ";

    params[params.size()] = SQLParam("ObjectType", ObjectType);
  end;

  if(EventType > 0)
    query = query + " AND t_EventType = :EventType ";

    params[params.size()] = SQLParam("EventType", EventType);
  end;

  query = query + "ORDER BY t_EventDate, t_EventTime, t_EventLogID";

  rs = execSQLselect(query, params, true);

  return rs;
end;

private macro _GetEventLogState(EventLogID)
  var query;
  var rs;
  var params = TArray;
  var State = -1;

  query = "SELECT t_State FROM deventlog_dbt WHERE t_EventLogID = :EventLogID ";
  
  params[params.size()] = SQLParam("EventLogID", EventLogID);

  rs = execSQLselect(query, params, true);

  if(rs and rs.moveNext())
    State = rs.value(0);
  end;
  return State;
end;

private macro _ResetErrorEvents(ObjectType, EventType)
  var sqlStr, cmd;
  sqlStr = "UPDATE deventlog_dbt SET t_State = ? WHERE t_State IN (1, 2) ";

  if(ObjectType > 0)
    sqlStr = sqlStr + " AND t_ObjectType = ? ";
  end;

  if(EventType > 0)
    sqlStr = sqlStr + " AND t_EventType = ? ";
  end;

  cmd = RSDCommand(sqlStr);
  cmd.addParam("", RSDBP_IN, 0);

  if(ObjectType > 0)
    cmd.addParam("", RSDBP_IN, ObjectType);
  end;

  if(EventType > 0)
    cmd.addParam("", RSDBP_IN, EventType);
  end;

  cmd.Execute();

OnError(err);
end;

private macro _ResetErrorEventsOnTime(ObjectType, EventType)
  var sqlStr, cmd;
  sqlStr = "UPDATE deventlog_dbt SET t_State = ? WHERE t_State IN (1, 2) ";

  sqlStr = sqlStr + " AND TO_DATE(TO_CHAR(t_ErrDate, 'DD.MM.YYYY ') || TO_CHAR(t_ErrTime, 'HH24:MI:SS'), 'DD.MM.YYYY HH24:MI:SS') <= ";
  sqlStr = sqlStr + " TO_DATE(TO_CHAR(?, 'DD.MM.YYYY ') || TO_CHAR(?, 'HH24:MI:SS'), 'DD.MM.YYYY HH24:MI:SS') - TO_DSINTERVAL('PT" + _GetErrCallTime() + "M') ";

  if(ObjectType > 0)
    sqlStr = sqlStr + " AND t_ObjectType = ? ";
  end;

  if(EventType > 0)
    sqlStr = sqlStr + " AND t_EventType = ? ";
  end;

  cmd = RSDCommand(sqlStr);
  cmd.addParam("", RSDBP_IN, 0);
  cmd.addParam("", RSDBP_IN, date());
  cmd.addParam("", RSDBP_IN, time());

  if(ObjectType > 0)
    cmd.addParam("", RSDBP_IN, ObjectType);
  end;

  if(EventType > 0)
    cmd.addParam("", RSDBP_IN, EventType);
  end;

  cmd.Execute();

OnError(err);
end;

private macro _CheckResetErrorEvents(ObjectType, EventType)
  var rs;
  var reset = false;

  rs = _GetEventLogRecordset(1, ObjectType, EventType);
  if(not reset and (rs and rs.moveNext()))
    reset = true;
  end;

  rs = _GetEventLogRecordset(2, ObjectType, EventType);
  if(not reset and (rs and rs.moveNext()))
    reset = true;
  end;

  /*если есть хотя бы одна запись с ошибкой обработки, то сбросить все ошибки*/
  if(reset)
    _ResetErrorEvents(ObjectType, EventType);
    rsEventLog = _GetEventLogRecordset(0, ObjectType, EventType);
  end;
end;

private macro _ProcessEvents(ObjectType, EventType)
  var EventLogID;
  var State;
  var ExistsRec = false;
  var ResetErrs = false;
  rsEventLog = _GetEventLogRecordset(0, ObjectType, EventType);

  while(not ExistsRec)
    if(ResetErrs)
      /*если сбрасывали ошибки, то выставим флаг, чтобы не крутить цикл бесконечно*/
      ExistsRec = true;
    end;
    while(rsEventLog and rsEventLog.moveNext())
      ExistsRec = true;
      EventLogID = rsEventLog.value(0);
      
      if(ProcessTrn(NULL, "_ProcessEventTrn"))
        /*println ("Transaction OK !");*/
      else
        /*println ("Transaction Aborted");*/
      end;
      
      State = _GetEventLogState(EventLogID);
    
      if((State == 1) or (State == 2))
        _NotifySystemError(EventLogID);
      else
        _CheckResetErrorEvents(ObjectType, EventType);
      end;
    end;
    if(not ExistsRec)
      /*если не было обработано ни одной записи, то сбросим ошибки по времени*/
      _ResetErrorEventsOnTime(ObjectType, EventType);
      rsEventLog = _GetEventLogRecordset(0, ObjectType, EventType);
      ResetErrs = true;
    end;
  end;
end;

macro RunProcess()
  var ObjectType = 0; 
  var EventType = 0; 

  if(not GetCmdLineParm("ObjectType", ObjectType, V_INTEGER))
    ObjectType = 0;
  end;

  if(not GetCmdLineParm("EventType", EventType, V_INTEGER))
    EventType = 0;
  end;

  /*msgbox("ObjectType = ", ObjectType);*/
  /*msgbox("EventType = ", EventType);*/

  _ProcessEvents(ObjectType, EventType);
end;

debugbreak;
RunProcess();