
Import rsexts;
import fileop;     
import BankInter, FIInter, globals, dlwreps, likepy;

import "or_rep_h.mac", globals;
Import oralib, rsexts, PTInter, BilFacturaInter;
import "fg_Life_parm.mac";

/*LVV C-33821 Адаптировал новый дистрибутивный макрос (изменения в законе с 1.10.14) под запрос ФГ Лайф на пользовательскую сортировку записей по возрастанию сумм.
LVV С-34189  Перенес из старого макроса bilbkprn1.mac в новый подсчет итогов по журналу. Добавил печать сводной книги продаж по всем филиалам ЭВ.
 */

private const FontAdd = "ex_FZ(6):ex_FN(Arial Cyr)"; //"ex_FS(i)";
private const FontBold   = "ex_FS(b)";
private const FontTitle  = "ex_FS(b):ex_FN(Arial):ex_FZ(12)";

private const TYPEBOOK_BASE = 1 ;// основной      
private const TYPEBOOK_ADD  = 2 ;// дополнительный

private Var BookID;
private Var Direction;
private Var Dolz_1;
private Var FIO_1;
private Var PrnDepartment = 0;
private Var BeginDate     : DATE;
private Var EndDate       : DATE;
private Var NumStr        = 1;
private Var TypeBook      = 0;
private var UnionBook = 0;
private var TotalAmount18 : money, TotalNDSAmount18 : money, TotalAmount10 : money, TotalNDSAmount10 : money, TotalAmount0 : money, TotalAmount20 : money, TotalNDSAmount20 : money, TotalFree : money , TotalWithNDS : money ;
private var date1, date2;
private Var AddListNum = 0, AddListNumber = 0, FirstAddList = true ;
private VAR  acssql_query:string;
private VAR  acssql_from:string;

private FILE BILBOOK     ("bilbook.dbt");

                             

                                                                                                                                                                                                                                
private var Table1 = "┌───┬────────┬────────────────┬────────────┬────────────┬────────────┬──────────────┬────────────┬──────────────────┬───────────┬───────────┬──────────────────┬─────────────────────────────┬───────────────────┬─────────────────┐\n" +
                     "│ № │  Код   │ Номер и дата   │Номер и дата│Номер и дата│Номер и дата│ Наименование │  ИНН/КПП   │    Сведения о    │  Номер    │Наименова- │ Стоимость продаж │Стоимость продаж, облагаемых │ Сумма НДС по      │Стоимость продаж,│\n" +
                     "│п/п│  вида  │ счета-фактуры  │ исправления│ корректиро-│ исправления│  покупателя  │ покупателя │    посреднике    │ и дата    │ние и код  │ по счету-фактуре,│налогом, по счету-фактуре,   │ счету-фактуре,    │освобождаемых от │\n" +
                     "│   │операции│   продавца     │ счета-     │ вочного    │ корректиро-│              │            │   (комиссионере, │документа, │валюты     │ разница стоимости│ разница стоимости по        │ разница стоимости │налога, по счету-│\n" +
                     "│   │        │                │ фактуры    │ счета-     │ вочного    │              │            │      агенте)     │подтвержда-│           │ по корректировоч-│корректировочному счету-     │ по                │фактуре, разница │\n" +
                     "│   │        │                │ продавца   │ фактуры    │ счета-     │              │            │                  │ ющего     │           │ному счету-фактуре│фактуре (без НДС) в рублях   │ корректировочному │стоимости по     │\n" +
                     "│   │        │                │            │ продавца   │ фактуры    │              │            │                  │ оплату    │           │ (включая НДС)    │ и копейках, по ставке       │ счету-фактуре     │корректировочному│\n" +
                     "│   │        │                │            │            │ продавца   │              │            │                  │           │           │ в валюте         │                             │ в рублях и        │счету-фактуре в  │\n" +
                     "│   │        │                │            │            │            │              │            │                  │           │           │ счета-фактуры    │                             │ копейках          │рублях и копейках│\n" +                     
                     "│   │        │                │            │            │            │              │            │                  │           │           │                  │                             │ , по ставке       │                 │\n" +
                     "│   │        │                │            │            │            │              │            ├─────────┬────────┤           │           ├─────────┬────────┼─────────┬─────────┬─────────┼─────────┬─────────┤                 │\n" +
                     "│   │        │                │            │            │            │              │            │наимено- │ИНН/КПП │           │           │ в валюте│в рублях│   18    │   10    │    0    │   18    │   10    │                 │\n" +
                     "│   │        │                │            │            │            │              │            │ вание   │ посред-│           │           │ счета-  │   и    │процентов│процентов│процентов│процентов│процентов│                 │\n" +
                     "│   │        │                │            │            │            │              │            │ посред- │ ника   │           │           │ фактуры │копейках│         │         │         │         │         │                 │\n" +
                     "│   │        │                │            │            │            │              │            │  ника   │        │           │           │         │        │         │         │         │         │         │                 │\n" +
                     "├───┼────────┼────────────────┼────────────┼────────────┼────────────┼──────────────┼────────────┼─────────┼────────┼───────────┼───────────┼─────────┼────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────────────┤\n" +
                     "│(1)│  (2)   │      (3)       │    (4)     │    (5)     │    (6)     │     (7)      │     (8)    │   (9)   │  (10)  │   (11)    │   (12)    │  (13а)  │ (13б)  │  (14)   │  (15)   │  (16)   │  (17)   │  (18)   │      (19)       │\n" +
                     "├───┼────────┼────────────────┼────────────┼────────────┼────────────┼──────────────┼────────────┼─────────┼────────┼───────────┼───────────┼─────────┼────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────────────┤";
                                                                                                                        


private var Table2    = "┌───┬────────┬─────────┬─────────┬─────────┬─────────┬──────────┬─────────┬──────────┬──────────┬──────────────────┬──────────┬────────┬──────────────┬──────────────┐\n" +
                        "│ № │  Код   │ Номер и │ Номер и │ Номер и │ Номер и │ Номер и  │  Дата   │ Наиме-   │ ИНН/КПП  │    Сведения о    │  Номер   │Наимено-│ Стоимость    │ Сумма НДС    │\n" +
                        "│п/п│  вида  │  дата   │ дата    │ дата    │ дата    │  дата    │принятия │ нование  │ продавца │    посреднике    │таможенной│вание и │ покупок по   │    по        │\n" +
                        "│   │операции│ счета-  │ исправ- │корректи-│ исправ- │документа,│на учет  │ продавца │          │   (комиссионере, │декларации│код     │счету-фактуре,│счету-фактуре,│\n" +
                        "│   │        │фактуры  │ ления   │ровочного│ ления   │подтверж- │товаров  │          │          │      агенте)     │          │валюты  │ разница      │ разница      │\n" +
                        "│   │        │продавца │ счета-  │ счета-  │корректи-│ дающего  │(работ,  │          │          │                  │          │        │ стоимости по │ стоимости по │\n" +
                        "│   │        │         │ фактуры │ фактуры │ровочного│ уплату   │ услуг), │          │          │                  │          │        │ корректиро-  │ корректиро-  │\n" +
                        "│   │        │         │ продавца│ продавца│ счета-  │ налога   │имуществе│          │          │                  │          │        │ вочному      │ вочному      │\n" +
                        "│   │        │         │         │         │ фактуры │          │нных прав│          │          │                  │          │        │ счету-фактуре│ счету-фактуре│\n" +
                        "│   │        │         │         │         │ продавца│          │         │          │          │                  │          │        │ (включая НДС)│ (включая НДС)│\n" +
                        "│   │        │         │         │         │         │          │         │          │          ├─────────┬────────┤          │        │ в валюте     │ в валюте     │\n" +
                        "│   │        │         │         │         │         │          │         │          │          │наимено- │ИНН/КПП │          │        │ счета-фактуры│ счета-фактуры│\n" +
                        "│   │        │         │         │         │         │          │         │          │          │ вание   │ посред-│          │        │              │              │\n" +
                        "│   │        │         │         │         │         │          │         │          │          │ посред- │ ника   │          │        │              │              │\n" +
                        "│   │        │         │         │         │         │          │         │          │          │  ника   │        │          │        │              │              │\n" +
                        "├───┼────────┼─────────┼─────────┼─────────┼─────────┼──────────┼─────────┼──────────┼──────────┼─────────┼────────┼──────────┼────────┼──────────────┼──────────────┤\n" +
                        "│(1)│  (2)   │   (3)   │   (4)   │   (5)   │   (6)   │   (7)    │   (8)   │   (9)    │   (10)   │   (11)  │  (12)  │   (13)   │  (14)  │     (15)     │     (16)     │\n" +
                        "├───┼────────┼─────────┼─────────┼─────────┼─────────┼──────────┼─────────┼──────────┼──────────┼─────────┼────────┼──────────┼────────┼──────────────┼──────────────┤";
                        
private var Rep;

private  FILE BILSFJOURNAL ("bilsfjournal.dbt");


/*разделить ИНН+КПП, хранящееся в системе как одна строка <ИНН>/<КПП> на две строки*/
PRIVATE MACRO splitINN_KPP(fullINN:string, INN:string, KPP:string)
  var parts:TArray;
  INN = "";
  KPP = "";
  parts = split(fullINN, "/");
  if(parts.Size > 0)
    INN = parts.Value(0);
    if(parts.Size > 1)
      KPP = join(subArray(parts, 1), "/");
    end;
  end;
  SetParm(1, INN);
  SetParm(2, KPP);
END;

PRIVATE MACRO GetPeriod(dt1:date, dt2:date, year: integer)
  var day1, mon1, year1;
  var day2, mon2, year2;
  datesplit(dt1, day1, mon1, year1);  
  datesplit(dt2, day2, mon2, year2);  

  if(year1 != year2)
    return "";
  end;

  SetParm(2, year1);

  if(mon1 == mon2)
    return MonName(mon1);
  end;
   
  if((mon1<=3) AND (mon2<=3))
    return "I - квартал";
  end; 

  if((mon1>=4) AND (mon2>=4) AND (mon1<=6) AND (mon2<=6))
    return "II - квартал";
  end; 

  if((mon1>=7) AND (mon2>=7) AND (mon1<=9) AND (mon2<=9) )
    return "III - квартал";
  end; 

  if((mon1>=10) AND (mon2>=10) AND (mon1<=12) AND (mon2<=12) )
    return "IV - квартал";
  end; 

  return "";
END;


private macro PrintFTableDistr(TotalAmount18, TotalNDSAmount18, TotalAmount10, TotalNDSAmount10, TotalAmount0, TotalAmount20, TotalNDSAmount20, TotalFree, TotalWithNDS )
    Rep.AddPrintCell( "Всего ",              Rep.GetColWidthTable(0)+Rep.GetColWidthTable(1)+Rep.GetColWidthTable(2)+Rep.GetColWidthTable(3)+Rep.GetColWidthTable(4)+Rep.GetColWidthTable(5)+Rep.GetColWidthTable(6)+Rep.GetColWidthTable(7)+Rep.GetColWidthTable(8)+Rep.GetColWidthTable(9)+Rep.GetColWidthTable(10)+Rep.GetColWidthTable(11)+Rep.GetColWidthTable(12)+12, NULL, "l"  );
    Rep.AddPrintCell( TotalWithNDS     ,     Rep.GetColWidthTable(13), NULL, "r" );
    Rep.AddPrintCell( TotalAmount18    ,     Rep.GetColWidthTable(14), NULL, "r" );
    Rep.AddPrintCell( TotalAmount10    ,     Rep.GetColWidthTable(15), NULL, "r" );
    Rep.AddPrintCell( TotalAmount0     ,     Rep.GetColWidthTable(16), NULL, "r" );
    Rep.AddPrintCell( TotalNDSAmount18 ,     Rep.GetColWidthTable(17), NULL, "r" );
    Rep.AddPrintCell( TotalNDSAmount10 ,     Rep.GetColWidthTable(18), NULL, "r" );
    Rep.AddPrintCell( TotalFree        ,     Rep.GetColWidthTable(19), NULL, "r" );
    Rep.AddStr();
    Rep.AddPrintCell( " ", Rep.GetHeaderWidth(), 0, "l", REP_ELEM_STR);
    Rep.AddStr();
end;




private macro PrintTotalTableDistr(TotalAmount18, TotalNDSAmount18, TotalAmount10, TotalNDSAmount10, TotalAmount0, TotalAmount20, TotalNDSAmount20, TotalFree, TotalWithNDS )
    Rep.AddPrintCell( "Итого ",              Rep.GetColWidthTable(0)+Rep.GetColWidthTable(1)+Rep.GetColWidthTable(2)+Rep.GetColWidthTable(3)+Rep.GetColWidthTable(4)+Rep.GetColWidthTable(5)+Rep.GetColWidthTable(6)+Rep.GetColWidthTable(7)+Rep.GetColWidthTable(8)+Rep.GetColWidthTable(9)+Rep.GetColWidthTable(10)+Rep.GetColWidthTable(11)+Rep.GetColWidthTable(12)+Rep.GetColWidthTable(13)+13, NULL, "l"  );
    Rep.AddPrintCell( TotalAmount18    ,     Rep.GetColWidthTable(14), NULL, "r" );
    Rep.AddPrintCell( TotalAmount10    ,     Rep.GetColWidthTable(15), NULL, "r" );
    Rep.AddPrintCell( TotalAmount0     ,     Rep.GetColWidthTable(16), NULL, "r" );
    Rep.AddPrintCell( TotalNDSAmount18 ,     Rep.GetColWidthTable(17), NULL, "r" );
    Rep.AddPrintCell( TotalNDSAmount10 ,     Rep.GetColWidthTable(18), NULL, "r" );
    Rep.AddPrintCell( TotalFree        ,     Rep.GetColWidthTable(19), NULL, "r" );
    Rep.AddStr();end;

/* Печать заголовка реестра */
private macro PrintBilBookDistr( RowNum, rs : RsdRecordset, TotalAmount18 : @money, TotalNDSAmount18 : @money, TotalAmount10 : @money, TotalNDSAmount10 : @money, TotalAmount0 : @money, TotalAmount20 : @money, TotalNDSAmount20 : @money, TotalFree : @money, AllTotalWithNDS : @money)
  FILE bilfactura("bilfactura.dbt") key 4;
  FILE bilfacturaSecond("bilfactura.dbt") key 4;
  FILE bilfagentpt("bilfagentpt.dbt") key 0;
  record fi ( fininstr );

  var BookEntryID      : integer;
  var CDate            : string;
  var FacturaNumber    : string;
  var SrcFacturaNumber : string;
  var SrcCDate         : string;
  var CDate_Corr       : string;
  var SrcCDate_Corr    : string;
  var Number_Corr      : string;
  var SrcNumber_Corr   : string;
  var FacturaNumberIsp : string;
  var FacturaCDateIsp  : string;
  var ReceiverName     : string;
  var ReceiverINN      : string;
  var PayDate          : date;
  var PayNum           : string;
  var TotalWithNDS     : money;
  var NDSRate;
  var IsSupplierAgent  : string;
  var IsReceiverAgent  : string;
  var AgentName        : string;
  var AgentINN         : string;
  var SFType           : integer;
  var TotalWithNdsCurr;  
  var rst : RsdRecordset;
  var sqlString = "";
  var ZeroDate = date( 0, 0, 0 );
  var FcDirection = Direction; // по умолчанию направление СФ совпадает с направлением ЗК
  var FIID = NATCUR;

  var Amount18 : money, NDSAmount18 : money, Amount10 : money, NDSAmount10 : money, Amount0 : money, NDSAmount0 : money, Amount20 : money, NDSAmount20 : money, Free : money ;
  Amount18 = $0;  NDSAmount18 = $0; Amount10 = $0;  NDSAmount10 = $0; Amount0 = $0; NDSAmount0 = $0; Amount20 = $0;  NDSAmount20 = $0; Free = $0;
  var strAmount18, strNDSAmount18, strAmount10, strNDSAmount10, strAmount0, strNDSAmount0, strAmount20, strNDSAmount20, strFree ;
  var Assignment = 0;
  var RevertSum = false;
  var modifyRecord:bool = false;
  var IsAnnul = 0;
  var num, i, IsCDateNULL, IsFacturaNumberNULL, IsTotalWithNDSNULL, IsNDSRateNULL, IsAssignmentNULL, IsSrcFacturaNumberNULL, IsSrcCDateNULL, IsFcDirectionNULL; 
  var schem_sort, schema = "";
  
  rs.value("T_CREATIONDATE"  , IsCDateNULL           );
  rs.value("T_FACTURANUMBER" , IsFacturaNumberNULL   );
  rs.value("CalcTotalWithNds", IsTotalWithNDSNULL    );
  rs.value("T_ASSIGNMENT"    , IsAssignmentNULL      );
  rs.value("SrcFacturaNumber", IsSrcFacturaNumberNULL);
  rs.value("SrcCreationDate" , IsSrcCDateNULL        );
  rs.value("T_DIRECTION"     , IsFcDirectionNULL     );

  IsAnnul = rs.value("IsAnnul");
  
  BookEntryID    = rs.value("T_BOOKENTRYID"     );    
  if(IsCDateNULL != true)
    CDate        = date(rs.value("T_CREATIONDATE"  ));
  else
    CDate        =date(0,0,0);
  end;

  if(IsFacturaNumberNULL != true)
    FacturaNumber = rs.value("t_FacturaNumber");;
  else
    FacturaNumber = "";
  end;

  if(IsAssignmentNULL != true)
    Assignment = rs.value("T_ASSIGNMENT" );
  else
    Assignment = 0;
  end;

  if(IsFcDirectionNULL != true)
    FcDirection = rs.value("T_DIRECTION");
  else
    FcDirection = Direction;
  end;

  var FID      = rs.value("FID"       );
  FIID         = rs.value("BBFIID"       ); 

  IsSupplierAgent = rs.value("IsSupplierAgent");
  IsReceiverAgent = rs.value("IsReceiverAgent");

  if((IsReceiverAgent == "X") AND (FID > 0))
    bilfagentpt.facturaID = FID;
    bilfagentpt.PtKind    = 3;
    if(getEQ(bilfagentpt))
      ReceiverName = bilfagentpt.Name;
      ReceiverINN  = bilfagentpt.INN ;
    else
      ReceiverName = rs.value("T_RECEIVERNAME"  );
      ReceiverINN  = rs.value("T_RECEIVERINN"   );
    end;
  else
    ReceiverName = rs.value("T_RECEIVERNAME"  );
    ReceiverINN  = rs.value("T_RECEIVERINN"   );
  end;

  SFType      = rs.value("SFTYPEID");

  AgentName = "";
  AgentINN  = "";

  if((IsReceiverAgent == "X") AND ( SFType != BILTYPE_SF_POSR))
    AgentName = rs.value("T_RECEIVERNAME"  );
    AgentINN  = rs.value("T_RECEIVERINN"   );
  end;

  PayNum = "";
  PayDate = BFGetMaxDateDocBookEntry(BookEntryID, PayNum);
  
  if(IsTotalWithNDSNULL != true)
   TotalWithNDS = rs.value("CalcTotalWithNds"  );
  else 
   TotalWithNDS = $0;
  end;

  TotalWithNdsCurr = rs.value("TotalWithNdsCurr"  );

  var SFacturaID = 0;                                                               
  if(Assignment == OBJSFASSIGNMENT_RECALC) // Для СФ с назначением "пересчет": Список дат и номеров исходных СФ 
    SFacturaID = rs.value("srcFacturaID");
  elif(Assignment == OBJSFASSIGNMENT_MODIFY) // Для СФ с назначением "исправление"
    bilfactura.facturaID = rs.value("srcFacturaID");
    if(getEQ(bilfactura))
      if(bilfactura.Assignment == OBJSFASSIGNMENT_RECALC)  // если СФ имеет назначение "пересчет"
        modifyRecord = true;    
        SFacturaID = bilfactura.SOURCEFACTURAID;
      else // иначе берем дату и номер найденного СФ
        SrcFacturaNumber = bilfactura.FacturaNumber;       
        SrcCDate         = bilfactura.CreationDate;        
      end;  
    end;                                     
  else                    
    SrcFacturaNumber = FacturaNumber;   
    SrcCDate         = CDate; 
  end; 

  if(SFacturaID > 0) 
    bilfactura.facturaID = SFacturaID;
    if(getEQ(bilfactura))
        SrcFacturaNumber = bilfactura.FacturaNumber;       
        SrcCDate         = bilfactura.CreationDate;        
    end;                                     
  end;

  SrcNumber_Corr = "";
  SrcCDate_Corr = "";
  if(Assignment == OBJSFASSIGNMENT_MODIFY) // Заполняется только для СФ с назначением "Исправление"
    bilfactura.facturaID = rs.value("srcFacturaID");
    if(getEQ(bilfactura))
      if(bilfactura.Assignment != OBJSFASSIGNMENT_RECALC)  // и при этом SourceFacturaID не ссылается на СФ с назначением "Пересчет"
        SrcNumber_Corr = rs.value("CorrectionNum");
        SrcCDate_Corr  = date(rs.value("t_CreationDate"));
      end;  
    end;                                     
  end;

  Number_Corr = "";
  CDate_Corr  = "";

  FacturaNumberIsp = "";
  FacturaCDateIsp  = "";

  if(Assignment == OBJSFASSIGNMENT_RECALC) // Для СФ с назначением "пересчет": номер и дата СФ.
    Number_Corr = FacturaNumber;
    CDate_Corr  = CDate;        
  elif(Assignment == OBJSFASSIGNMENT_MODIFY) // Для СФ с назначением "исправление"
   bilfactura.facturaID = rs.value("srcFacturaID");
   if(getEQ(bilfactura))
     if(bilfactura.Assignment == OBJSFASSIGNMENT_RECALC)  //если SourceFacturaID ссылается на СФ с назначением "Пересчет"
       // поле заполняется номером и датой исходного СФ(Пересчет)
       Number_Corr = bilfactura.FacturaNumber;       
       CDate_Corr  = bilfactura.CreationDate;        

       FacturaNumberIsp = rs.value("CorrectionNum");       
       FacturaCDateIsp  = date(rs.value("t_CreationDate"));
     end;  
   end;                                     
  else
    Number_Corr = CDate_Corr = "";
  end;

  
///////////////////////////////////////////////////////  
//LVV 15.01.15  R-528420-2
   if(UnionBook)
      schem_sort = rs.value("QUERY_ID");
      if (schem_sort == 2)
         schema = "rsbank_evv";
      elif (schem_sort == 4)
         schema = "rsbank_evu";
      elif (schem_sort == 5)
         schema = "rsbank_evvor";
      elif (schem_sort == 6)
         schema = "RSBANK_EVSTA_02";
      else
         schema = "";
      end;
   end;

   if (schema != "")
      sqlString = "   SELECT T_NDSRATE, SUM(T_AMOUNT), SUM(T_NDSAMOUNT), SUM(T_AMOUNTWITHNDS)" +
      " FROM " + schema + "." + "DBKENTSUM_DBT  WHERE T_BOOKENTRYID = " + BookEntryID +" AND T_FIID = 0  GROUP BY T_NDSRATE" ;
   else 
      sqlString = "   SELECT T_NDSRATE, SUM(T_AMOUNT), SUM(T_NDSAMOUNT), SUM(T_AMOUNTWITHNDS)" +
      " FROM DBKENTSUM_DBT  WHERE T_BOOKENTRYID = " + BookEntryID +" AND T_FIID = 0  GROUP BY T_NDSRATE" ;
   end;

  rst = RsdRecordset( sqlString );


  while( rst.moveNext() )
     rst.value("T_NDSRATE",IsNDSRateNULL );
   
     if(IsNDSRateNULL != true)
       NDSRate = rst.value("T_NDSRATE" );

       if (NDSRate == -1)
         Free = rst.value("SUM(T_AMOUNT)");
       end;

       if(NDSRate == 18)
         Amount18 = rst.value("SUM(T_AMOUNT)"  );
         NDSAmount18 = rst.value("SUM(T_NDSAMOUNT)");
       end;

       if(NDSRate == 10)
         Amount10 = rst.value("SUM(T_AMOUNT)"  );
         NDSAmount10 = rst.value("SUM(T_NDSAMOUNT)");
       end;

       if(NDSRate == 0)
         Amount0 = rst.value("SUM(T_AMOUNT)"  );
       end;

       if(NDSRate == 20)
         Amount20 = rst.value("SUM(T_AMOUNT)"  );
         NDSAmount20 = rst.value("SUM(T_NDSAMOUNT)");
       end;

     else
       Free = rst.value("SUM(T_AMOUNT)");
     end;
  end;

  if(IsAnnul == 1)
    Amount18     = -Amount18    ;
    NDSAmount18  = -NDSAmount18 ;
    Amount10     = -Amount10    ;
    NDSAmount10  = -NDSAmount10 ;
    Amount0      = -Amount0     ;
    Amount20     = -Amount20    ; 
    NDSAmount20  = -NDSAmount20 ;
    Free         = -Free        ;
    TotalWithNDS = -TotalWithNDS;
    TotalWithNdsCurr = -TotalWithNdsCurr;
  end;

  if(Assignment == OBJSFASSIGNMENT_PREPAYMENT) // Аванс 
    Amount0  = $0;
    Amount18 = $0; 
    Amount10 = $0; 
    Amount20 = $0; 
    Free = $0; 
  elif((Assignment == OBJSFASSIGNMENT_RECALC) AND (FcDirection != Direction)) // Пересчет
    Amount18     = -Amount18    ;
    NDSAmount18  = -NDSAmount18 ;
    Amount10     = -Amount10    ;
    NDSAmount10  = -NDSAmount10 ;
    Amount0      = -Amount0     ;
    Amount20     = -Amount20    ; 
    NDSAmount20  = -NDSAmount20 ;
    Free         = -Free        ;
    TotalWithNDS = -TotalWithNDS;
    TotalWithNdsCurr = -TotalWithNdsCurr;
  end;

//  println("Assignment  = ", Assignment);
//  println("FcDirection = ", FcDirection);
//  println("Direction   = ", Direction);

  // Если ЗК в рублях
/*
  if( TotalWithNdsCurr == $0 )
    TotalWithNdsCurr = TotalWithNDS;
  end;
*/
  if( TotalWithNdsCurr == $0 )
    TotalWithNdsCurr = "";
  end;

  TotalAmount18     =  TotalAmount18     +  Amount18     ;
  TotalNDSAmount18  =  TotalNDSAmount18  +  NDSAmount18  ;
  TotalAmount10     =  TotalAmount10     +  Amount10     ;
  TotalNDSAmount10  =  TotalNDSAmount10  +  NDSAmount10  ;
  TotalAmount0      =  TotalAmount0      +  Amount0      ;
  TotalAmount20     =  TotalAmount20     +  Amount20     ;
  TotalNDSAmount20  =  TotalNDSAmount20  +  NDSAmount20  ;
  TotalFree         =  TotalFree         +  Free         ;
  AllTotalWithNDS   =  AllTotalWithNDS   +  TotalWithNDS ; 


  if(Assignment == OBJSFASSIGNMENT_PREPAYMENT)
      strAmount0  = "";
      strAmount18 = ""; 
      strAmount10 = ""; 
      strAmount20 = ""; 
      strFree = ""; 
  else
      strAmount0  = Amount0;
      strAmount18 = Amount18; 
      strAmount10 = Amount10; 
      strAmount20 = Amount20; 
      strFree     = Free    ; 
  end;

  var strDate ; 
  if((PayDate == NULL) OR (PayDate == ZeroDate))
    strDate = "";
  else
    strDate = PayDate;
  end;
/* LVV R-488410-2 6.11.2014 заблокировал дистрибутивную печать кода операций, теперь код операций берем из категорий СФ*/
/*  var scString = "SELECT DISTINCT BILOPRCODE.T_CODE FROM DBILOPRCODE_DBT BILOPRCODE, DBILFACTURALINE_DBT BILFACTURALINE WHERE BILFACTURALINE.T_FACTURAID = " + FID;
      scString = scString + " AND BILOPRCODE.T_ID = BILFACTURALINE.T_OPRCODEID ORDER BY BILOPRCODE.T_CODE ASC";

  var coders = RsdRecordset(scString);

  var Oper_Code = "";

  while(coders.moveNext())
      if(Oper_Code == "")
              Oper_Code = coders.value("T_CODE");
      else
              Oper_Code = Oper_Code + ", " + coders.value("T_CODE");
      end;
  end;
*/ 
  var Oper_Code = "";
  var		ssql_ = "SELECT   ATTR.t_groupid, decode(attr.t_name, chr(1), '-', attr.t_name) t_name " 
  +"\n				FROM   dobjatcor_dbt ATCOR, dobjattr_dbt attr " 
  +"\n							WHERE       ATCOR.T_OBJECT = LPAD ('"+FID+"', 10, 0) " 
  +"\n								 AND ATCOR.T_OBJECTTYPE = 720 " 
  +"\n								 AND ATCOR.T_GROUPID = 102 " 
  +"\n								 AND ATTR.T_ATTRID = ATCOR.T_ATTRID " 
  +"\n								 AND ATTR.T_OBJECTTYPE = ATCOR.T_OBJECTTYPE " 
  +"\n								 AND ATTR.T_GROUPID = ATCOR.T_GROUPID " ;
		
  var	   rs_ssql_ = RsdRecordset( ssql_ );
	   while( rs_ssql_.moveNext() )
			if (rs_ssql_.value(1) == "-")
				//Oper_Code = Oper_Code + "";
			else
				if ( Oper_Code == "" ) Oper_Code = rs_ssql_.value(1);
				else Oper_Code = Oper_Code + ";" + rs_ssql_.value(1); 
				end;
			end;
	   end;

  var FICodeName = "";
  if( FIID != ALLFININSTR )
    if( ПолучитьФинИн( FIID, fi ) == 0 )
      FICodeName = fi.Name + ", " + fi.ISO_Number;
    end;
  end;


  if (TypeBook == TYPEBOOK_BASE )

    Rep.AddPrintCell( RowNum,                                    0, NULL, "c" );  // 1
    Rep.AddPrintCell( Oper_Code,                                 0, NULL, "c" );  // 2
    Rep.AddPrintCell( SrcCDate + "\n" +SrcFacturaNumber,         0, NULL, "c" );  // 3
    Rep.AddPrintCell( SrcCDate_Corr + "\n" + SrcNumber_Corr,     0, NULL, "c" );  // 4
    Rep.AddPrintCell( Number_Corr + "\n" + CDate_Corr,           0, NULL, "c" );  // 5
    Rep.AddPrintCell( FacturaNumberIsp + "\n" + FacturaCDateIsp, 0, NULL, "c" );  // 6
    Rep.AddPrintCell( ReceiverName,                              0, NULL, "c" );  // 7
    Rep.AddPrintCell( ReceiverINN,                               0, NULL, "c" );  // 8
    Rep.AddPrintCell( AgentName,                                 0, NULL, "c" );  // 9 
    Rep.AddPrintCell( AgentINN ,                                 0, NULL, "c" );  // 10
    Rep.AddPrintCell( strDate +"\n"+ PayNum,                     0, NULL, "c" );  // 11
    Rep.AddPrintCell( FICodeName,                                0, NULL, "c" );  // 12
    Rep.AddPrintCell( TotalWithNdsCurr,                          0, NULL, "r" );  // 13а
    Rep.AddPrintCell( TotalWithNDS ,                             0, NULL, "r" );  // 13б
    Rep.AddPrintCell( strAmount18 ,                              0, NULL, "r" );  // 14
    Rep.AddPrintCell( strAmount10 ,                              0, NULL, "r" );  // 15
    Rep.AddPrintCell( strAmount0  ,                              0, NULL, "r" );  // 16
    Rep.AddPrintCell( NDSAmount18 ,                              0, NULL, "r" );  // 17
    Rep.AddPrintCell( NDSAmount10 ,                              0, NULL, "r" );  // 18
    Rep.AddPrintCell( strFree     ,                              0, NULL, "r" );  // 19
    Rep.AddStr();                                          
  end;
                                                         
end;                                                     

//Класс для ссылок к схемам 10101(debug)
private Class TSchemaReferences(StrFromReg :string, RootNodeName :string)
Var
   NodeName = TArray,
   UserName = TArray,
   DBName = TArray,
   Sort_ = TArray,
   CheckGrant = TArray,
   RegStr :string;

private var ArrOfTablesUsed = TArray;
ArrOfTablesUsed = makeArray("dbilbookentry_dbt",
                            "dbilfactura_dbt",
                            "dbkentsum_dbt");

   //Конструктор по умолчанию
   NodeName(NodeName.Size()) = RootNodeName;
   UserName(UserName.Size()) = "";
   DBName(DBName.Size()) = "";
   Sort_(Sort_.Size()) = "1";
   CheckGrant(CheckGrant.Size()) = "1";
   RegStr = StrFromReg;

   private macro CheckGrantToTable(UserName_, ArrOfTablesUsed_) :integer
      var Query = "", 
      i = 0,
      DataSet :RsdRecordset,
      Params :TArray;
      while( i < ArrOfTablesUsed_.Size())
         Query =" SELECT 1 FROM dba_tab_privs P " +                           
            "  WHERE P.PRIVILEGE = 'SELECT' " +
            "   AND GRANTEE = USER " +
            "   AND P.GRANTOR = UPPER(:USERNAME_1) " +
            "   AND P.TABLE_NAME = UPPER(:TABLENAME) " +
            "   OR USER = UPPER(:USERNAME_2) ";
         Params = makeArray( SQLParam( "USERNAME_1" , UserName_),
         SQLParam( "TABLENAME" , ArrOfTablesUsed_[i]),
         SQLParam( "USERNAME_2" , UserName_));
         DataSet = execSQLselect( Query, Params, true );
         if ( (not DataSet ) or ( not DataSet.moveNext()))
            return 0;
         end;
         i = i + 1;
      end;
      return 1;
   end;

   macro AddAllRef; //заполняем свойства из реестра
      //Запрос в реестре головного узла
      var Query = "",
      DataSet, DataSet1 :RsdRecordset,
      Params :TArray;
      Query = " SELECT REG.T_KEYID " +
         " FROM (SELECT T.T_KEYID, SYS_CONNECT_BY_PATH(T.T_NAME, '\\') FLD, LEVEL LV, T.T_DESCRIPTION " +
         "       FROM dregparm_dbt T " +
         "            START WITH T.T_PARENTID = 0 " +
         "            CONNECT BY PRIOR T.T_KEYID = T.T_PARENTID) REG, " +
         "      dregval_dbt VAL " +
         " WHERE REG.FLD LIKE :PARM_1 " +
         "  AND REG.FLD NOT LIKE :PARM_2 " +
         "  AND VAL.T_KEYID=REG.T_KEYID ";

      Params = makeArray( SQLParam( "Parm_1" , "\\" + RegStr + "\\%" ),
      SQLParam( "Parm_2" , "\\" + RegStr + "\\%\\%" ));
      DataSet = execSQLselect( Query, Params , true  );
      while ( ( DataSet ) and ( DataSet.moveNext())) //Идём по найденым ключам
         if (DataSet and (ValType(DataSet.value(0)) != 26))
            // запрос данных по ключам
            Query = " SELECT P.T_NAME, UTL_RAW.CAST_TO_VARCHAR2(V.T_FMTBLOBDATA_XXXX) T_VALUE,Q.T_NAME " +
               " FROM dregparm_dbt P, dregval_dbt V, dregparm_dbt Q " +
               " WHERE P.T_PARENTID = :Parm_1 " +
               "  AND P.T_KEYID = V.T_KEYID " +
               "  AND Q.T_KEYID = P.T_PARENTID ";
            Params = makeArray( SQLParam( "Parm_1" , DataSet.value(0) ));
            DataSet1 = execSQLselect( Query, Params , true  );
            while ( ( DataSet1 ) and ( DataSet1.moveNext())) // заполняем свойства
               if(DataSet1.value(0) == "SORT")
                  if ((ValType(DataSet1.value(1)) != 26))
                     Sort_(Sort_.Size()) = DataSet1.value(1);
                  else
                     Sort_(Sort_.Size()) = "1";
                  end;
               elif(DataSet1.value(0) == "USERNAME")
                  if ((ValType(DataSet1.value(1)) != 26))
                     UserName(UserName.Size()) = DataSet1.value(1);
                  else
                     UserName(UserName.Size()) = "-1";
                  end;
                  NodeName(NodeName.Size()) = DataSet1.value(2);
                  DBName(DBName.Size()) = "";
                  if ( not CheckGrantToTable(UserName(UserName.Size()-1),ArrOfTablesUsed)) //Проверка доступа по ссылкам к таблице
                     println("Нет доступа к данным узла " + NodeName(NodeName.Size()-1));
                     CheckGrant(CheckGrant.Size()) = 0;
                  else
                     CheckGrant(CheckGrant.Size()) = 1;
                  end;
               end;
            end;
         end;
      end;
      //Запрос в реестре головного узла
   end;
end; // Класс для ссылок к схема
                                                         
private macro  PrintBBookDistr(BBook)
   var TemplateName = "", sqlString,  sqlStringAdd, rs, count, i,cmd, cmd2,delim;
   record Party(party);
   /*var TotalAmount18 : money, TotalNDSAmount18 : money, TotalAmount10 : money, TotalNDSAmount10 : money, TotalAmount0 : money, TotalAmount20 : money, TotalNDSAmount20 : money, TotalFree : money , TotalWithNDS : money ;*/
   var EmptyStr = "                                                                                                   ";
   TotalAmount18 = $0; TotalNDSAmount18 = $0; TotalAmount10 = $0; TotalNDSAmount10 = $0; TotalAmount0 = $0; TotalAmount20 = $0; TotalNDSAmount20 = $0; TotalFree = $0; TotalWithNDS = $0;

   //переносим в свойство класса ссылки на удаленные схемы
   var ArrOfRegParam = TSchemaReferences("PRBB\\БД", {Name_Bank});
   if ( UnionBook )
      ArrOfRegParam.AddAllRef;
   end;
   //переносим в свойство класса ссылки на удаленные схемы

   ПолучитьСубъекта ({OurBank}, Party ); 

  if (TypeBook == TYPEBOOK_BASE )
    Rep.AddPrintCell( "КНИГА ПРОДАЖ", Rep.GetHeaderWidth(), 0, "c:" + FontTitle, REP_ELEM_STR);
    Rep.AddStr();
    Rep.AddPrintCell( " ", Rep.GetHeaderWidth(), 0, "l", REP_ELEM_STR);
    Rep.AddStr();
    Rep.AddPrintCell( "Продавец:"+Party.Name, Rep.GetHeaderWidth(), 0, "l", REP_ELEM_STR);
    Rep.AddStr();   
    Rep.AddPrintCell( "Идентификационный номер и код причины постановки ", Rep.GetHeaderWidth(), 0, "l", REP_ELEM_STR);
    Rep.AddStr();   
    Rep.AddPrintCell( "на учет налогоплательщика-продавца " + ПолучитьКодСубъекта( {OurBank}, PTCK_INN ), Rep.GetHeaderWidth(), 0, "l" , REP_ELEM_STR);
    Rep.AddStr();
    Rep.AddPrintCell( "Продажа за период с " + string(date1) + " по "+string(date2), Rep.GetHeaderWidth(), 0, "l", REP_ELEM_STR);
    Rep.AddStr();
    Rep.AddPrintCell( " ", Rep.GetHeaderWidth(), 0, "l", REP_ELEM_STR);
    Rep.AddStr();
  end;



  sqlString = "SELECT COUNT(1) FROM DBILBOOKENTRY_DBT BILBOOKENTRY "+acssql_from+ " WHERE BILBOOKENTRY.T_REGDATE BETWEEN to_date('" + date1 +
     "', 'dd.mm.yyyy') AND to_date( '"+ date2 +"', 'dd.mm.yyyy') AND BILBOOKENTRY.T_DIRECTION = "+ Direction +
     " AND " + acssql_query; 

  if(PrnDepartment != 0)
      sqlString = sqlString + " AND BILBOOKENTRY.T_DEPARTMENT = " + PrnDepartment;
  end;


  cmd = RsdCommand( sqlString );
  cmd.NullConversion = true;
  rs = RsdRecordset( cmd );

//  rs = RsdRecordset( sqlString );

  rs.moveNext();

  count = rs.value(0);

  if( count == 0 )

  else
     i = 0;
     debugbreak;
     if ( UnionBook )
         sqlString = "SELECT * FROM (";
         while( i < (ArrOfRegParam.UserName.Size())) //цикл по собранным в свойстве класса ссылкам
            if ( ArrOfRegParam.CheckGrant[i] ) //добавляем строки запроса если проверен доступ к таблицам
               if ( i > 0 )
                  sqlString = sqlString + " UNION ";
                  delim = ".";             
                  sqlStringAdd = "";
               else
                  delim = "";
                  sqlStringAdd = " AND BILBOOKENTRY.T_BOOKID = "+ BookID; // не учитывать номер книги для филиалов, для головы учитывать
               end;
               sqlString = sqlString +
                          " SELECT BILBOOKENTRY.T_BOOKENTRYID, BILBOOKENTRY.T_FACTURAID AS FID, BF.t_CorrectionNum AS CorrectionNum, BILBOOKENTRY.t_ReceiverName, " +
                          " BILBOOKENTRY.t_ReceiverINN, BILBOOKENTRY.t_PayDate, BF.t_CreationDate, BF.t_FacturaNumber, NVL(BFSRC.t_FacturaID, 0) AS SrcFacturaID, " +
                          " NVL(BFSRC.t_CorrectionNum, 0) AS SrcCorrectionNum, BILBOOKENTRY.T_AMOUNT CalcTotalWithNds, BILBOOKENTRY.T_AMOUNTCURR TotalWithNdsCurr,  bf.t_fiid, bf.t_Assignment, bf.t_Direction, " +
                          " NVL(BFSRC.t_FacturaNumber,chr(1)) AS SrcFacturaNumber, NVL(BFSRC.t_CreationDate, TO_DATE('01.01.0001', 'dd.mm.yyyy')) AS SrcCreationDate," +
                          " BILBOOKENTRY.T_REGDATE AS RegDate, BILBOOKENTRY.T_ENTRYNUMBER AS EntryNumber, 0 AS IsAnnul, BILBOOKENTRY.T_FIID As BBFIID," + 
                          " BILBOOKENTRY.T_ISSUPPLIERAGENT As IsSupplierAgent, BILBOOKENTRY.T_ISRECEIVERAGENT AS IsReceiverAgent, NVL(BF.T_SFTYPEID, 0) As SFTYPEID, " +
                            ArrOfRegParam.Sort_[i] + " AS QUERY_ID " +  
                          " FROM " + ArrOfRegParam.UserName[i] + delim + "DBILBOOKENTRY_DBT BILBOOKENTRY, " + ArrOfRegParam.UserName[i] + delim + "DBILFACTURA_DBT BF, " + ArrOfRegParam.UserName[i] + delim + "DBILFACTURA_DBT BFSRC" ;
              sqlString = sqlString + acssql_from + 
                          " WHERE BILBOOKENTRY.T_REGDATE BETWEEN to_date( '"+date1+"', 'dd.mm.yyyy') AND to_date( '"+date2+"', 'dd.mm.yyyy')" +
                      //  " AND BILBOOKENTRY.T_BOOKID = "+ BookID +
                          " AND BILBOOKENTRY.T_ANNULENTRY = 0 " +
                          " AND BF.t_Assignment <> " + OBJSFASSIGNMENT_RECALC + // Пересчет
                          " AND BILBOOKENTRY.T_DIRECTION = "+ Direction +
                          " AND " + acssql_query ;
         
              if(PrnDepartment != 0)
                  sqlString = sqlString + " AND BILBOOKENTRY.T_DEPARTMENT = " + PrnDepartment;
              end;
         
              sqlString = sqlString + 
                          " AND BILBOOKENTRY.T_FACTURAID = BF.T_FACTURAID(+)" +
                          " AND BF.T_SOURCEFACTURAID = BFSRC.T_FACTURAID(+)" ;
         
              sqlString = sqlString +  " UNION " ;
         
              sqlString = sqlString + 
                          " SELECT BILBOOKENTRY.T_BOOKENTRYID, BILBOOKENTRY.T_FACTURAID AS FID, BF.t_CorrectionNum AS CorrectionNum, BILBOOKENTRY.t_ReceiverName, " +
                          " BILBOOKENTRY.t_ReceiverINN, BILBOOKENTRY.t_PayDate, BF.t_CreationDate, BF.t_FacturaNumber, NVL(BFSRC.t_FacturaID, 0) AS SrcFacturaID, " +
                          " NVL(BFSRC.t_CorrectionNum, 0) AS SrcCorrectionNum, BILBOOKENTRY.T_AMOUNT CalcTotalWithNds, BILBOOKENTRY.T_AMOUNTCURR TotalWithNdsCurr, bf.t_fiid, bf.t_Assignment, bf.t_Direction, " +
                          " NVL(BFSRC.t_FacturaNumber,chr(1)) AS SrcFacturaNumber, NVL(BFSRC.t_CreationDate, TO_DATE('01.01.0001', 'dd.mm.yyyy')) AS SrcCreationDate, " +
                          " BILBOOKENTRY.T_ANNULDATE AS RegDate, BILBOOKENTRY.T_ENTRYNUMBER AS EntryNumber, 1 AS IsAnnul, BILBOOKENTRY.T_FIID As BBFIID, " +
                          " BILBOOKENTRY.T_ISSUPPLIERAGENT As IsSupplierAgent, BILBOOKENTRY.T_ISRECEIVERAGENT AS IsReceiverAgent, NVL(BF.T_SFTYPEID, 0) As SFTYPEID, " +
                            ArrOfRegParam.Sort_[i] + " AS QUERY_ID " +  
                          " FROM " + ArrOfRegParam.UserName[i] + delim + "DBILBOOKENTRY_DBT BILBOOKENTRY, " + ArrOfRegParam.UserName[i] + delim + "DBILFACTURA_DBT BF, " + ArrOfRegParam.UserName[i] + delim + "DBILFACTURA_DBT BFSRC" ;
              sqlString = sqlString + acssql_from + 
                          " WHERE BILBOOKENTRY.T_REGDATE BETWEEN to_date( '"+date1+"', 'dd.mm.yyyy') AND to_date( '"+date2+"', 'dd.mm.yyyy')" +
                       // " AND BILBOOKENTRY.T_BOOKID = "+ BookID +
                          " AND BILBOOKENTRY.T_ANNULENTRY <> 0 " +
                          " AND BILBOOKENTRY.T_ANNULDATE <= to_date( '"+date2+"', 'dd.mm.yyyy')" +
                          " AND BILBOOKENTRY.T_DIRECTION = "+ Direction +
                          " AND " + acssql_query ;
         
              if(PrnDepartment != 0)
                  sqlString = sqlString + " AND BILBOOKENTRY.T_DEPARTMENT = " + PrnDepartment;
              end;
         
              sqlString = sqlString + 
                          " AND BILBOOKENTRY.T_FACTURAID = BF.T_FACTURAID(+)" +
                          " AND BF.t_Assignment <> " + OBJSFASSIGNMENT_RECALC + // Пересчет
                          " AND BF.T_SOURCEFACTURAID = BFSRC.T_FACTURAID(+)" ;
         
              if(date2 >= date(01,01,2014))
                sqlString = sqlString +  " UNION " ;
                
                // стоимость товаров/услуг/выполненных работ по СФ SF.TotalWithNDS увеличилась по сравнению с исходным СФ и дата регистрации исходного СФ (SFS.RegDate) 
                // попадает в период от <Date1> до <Date2> включительно.
                sqlString = sqlString + " SELECT BILBOOKENTRY.T_BOOKENTRYID, BILBOOKENTRY.T_FACTURAID AS FID, BF.t_CorrectionNum AS CorrectionNum, BILBOOKENTRY.t_ReceiverName, " +
                                        " BILBOOKENTRY.t_ReceiverINN, BILBOOKENTRY.t_PayDate, BF.t_CreationDate, BF.t_FacturaNumber, NVL(BFSRC.t_FacturaID, 0) AS SrcFacturaID, " +
                                        " NVL(BFSRC.t_CorrectionNum, 0) AS SrcCorrectionNum, BILBOOKENTRY.T_AMOUNT CalcTotalWithNds, BILBOOKENTRY.T_AMOUNTCURR TotalWithNdsCurr, bf.t_fiid, bf.t_Assignment, bf.t_Direction, "+
                                        " NVL(BFSRC.t_FacturaNumber,chr(1)) AS SrcFacturaNumber, NVL(BFSRC.t_CreationDate, TO_DATE('01.01.0001', 'dd.mm.yyyy')) AS SrcCreationDate," +
                                        " BILBOOKENTRY.T_REGDATE AS RegDate, BILBOOKENTRY.T_ENTRYNUMBER AS EntryNumber, 0 AS IsAnnul,BILBOOKENTRY.T_FIID As BBFIID, " +
                                        " BILBOOKENTRY.T_ISSUPPLIERAGENT As IsSupplierAgent, BILBOOKENTRY.T_ISRECEIVERAGENT AS IsReceiverAgent, NVL(BF.T_SFTYPEID, 0) As SFTYPEID, " +
                                          ArrOfRegParam.Sort_[i] + " AS QUERY_ID " +  
                                        " FROM " + ArrOfRegParam.UserName[i] + delim + "DBILBOOKENTRY_DBT BILBOOKENTRY, " + ArrOfRegParam.UserName[i] + delim + "DBILFACTURA_DBT BF, " + ArrOfRegParam.UserName[i] + delim + "DBILFACTURA_DBT BFSRC, " ;
         
                sqlString = sqlString + " ( SELECT BF.T_FACTURAID AS T_FACTURAID, BF.t_TotalWithNDS AS t_TotalWithNDS " +
                                        "     FROM DBILBOOKENTRY_DBT BILBOOKENTRY, DBILFACTURA_DBT BF" ;
                sqlString = sqlString + acssql_from + 
                            " WHERE BILBOOKENTRY.T_REGDATE BETWEEN to_date( '"+date1+"', 'dd.mm.yyyy') AND to_date( '"+date2+"', 'dd.mm.yyyy') " +
                         // " AND BILBOOKENTRY.T_BOOKID = "+ BookID +
                            " AND BILBOOKENTRY.T_DIRECTION = "+ Direction +
                            " AND " + acssql_query ;
         
                if(PrnDepartment != 0)
                    sqlString = sqlString + " AND BILBOOKENTRY.T_DEPARTMENT = " + PrnDepartment;
                end;
         
                sqlString = sqlString + 
                            " AND BILBOOKENTRY.T_FACTURAID = BF.T_FACTURAID " +
                            " AND BF.T_REGDATE BETWEEN to_date( '"+date1+"', 'dd.mm.yyyy') AND to_date( '"+date2+"', 'dd.mm.yyyy') " +
                            " ) SRCF " ;
         
                sqlString = sqlString + acssql_from + 
                          " WHERE   BILBOOKENTRY.T_DIRECTION = "+ Direction +
                            " AND BF.t_Assignment = " + OBJSFASSIGNMENT_RECALC + // Пересчет
                            " AND " + acssql_query ;
                          
                if(PrnDepartment != 0)
                    sqlString = sqlString + " AND BILBOOKENTRY.T_DEPARTMENT = " + PrnDepartment;
                end;
         
                sqlString = sqlString + 
                            " AND BILBOOKENTRY.T_FACTURAID = BF.T_FACTURAID " +
                            " AND BF.T_SOURCEFACTURAID = BFSRC.T_FACTURAID(+) " + 
                            " AND BF.T_SOURCEFACTURAID = SRCF.T_FACTURAID " +
                            " AND BF.T_TOTALWITHNDS > 0 ";  // В BF.T_TOTALWITHNDS хранится разница сумм товров исходной СФ и СФ с назначением "Пересчет" 
         
         
                sqlString = sqlString +  " UNION " ;
       
                // стоимость товаров/услуг/выполненных работ по СФ SF.TotalWithNDS уменьшилась или осталось 
                // неизмененной по сравнению с исходным СФ и дата регистрации корректировочного СФ (SF.RegDate) 
                // попадает в период от <Date1> до <Date2> включительно (т.е. попадает в тот же налоговый период, что и ЗК);
                sqlString = sqlString + " SELECT BILBOOKENTRY.T_BOOKENTRYID, BILBOOKENTRY.T_FACTURAID AS FID, BF.t_CorrectionNum AS CorrectionNum, BILBOOKENTRY.t_ReceiverName, " +
                                        " BILBOOKENTRY.t_ReceiverINN, BILBOOKENTRY.t_PayDate, BF.t_CreationDate, " +
                                        " BF.t_FacturaNumber, NVL(BFSRC.t_FacturaID, 0) AS SrcFacturaID, " +
                                        " NVL(BFSRC.t_CorrectionNum, 0) AS SrcCorrectionNum, BILBOOKENTRY.T_AMOUNT CalcTotalWithNds, BILBOOKENTRY.T_AMOUNTCURR TotalWithNdsCurr, bf.t_fiid, bf.t_Assignment, bf.t_Direction, " +
                                        " NVL(BFSRC.t_FacturaNumber,chr(1)) AS SrcFacturaNumber, " +
                                        " NVL(BFSRC.t_CreationDate, TO_DATE('01.01.0001', 'dd.mm.yyyy')) AS SrcCreationDate, " +
                                        " BILBOOKENTRY.T_REGDATE AS RegDate, BILBOOKENTRY.T_ENTRYNUMBER AS EntryNumber, 0 AS IsAnnul, BILBOOKENTRY.T_FIID As BBFIID," +
                                        " BILBOOKENTRY.T_ISSUPPLIERAGENT As IsSupplierAgent, BILBOOKENTRY.T_ISRECEIVERAGENT AS IsReceiverAgent, NVL(BF.T_SFTYPEID, 0) As SFTYPEID, " +
                                        ArrOfRegParam.Sort_[i] + " AS QUERY_ID " +  
                                        " FROM " + ArrOfRegParam.UserName[i] + delim + "DBILBOOKENTRY_DBT BILBOOKENTRY, " + ArrOfRegParam.UserName[i] + delim + "DBILFACTURA_DBT BF, " + ArrOfRegParam.UserName[i] + delim + "DBILFACTURA_DBT BFSRC, " ;

                sqlString = sqlString + " ( SELECT BF.T_FACTURAID AS T_FACTURAID, BF.t_TotalWithNDS AS t_TotalWithNDS " +
                                        "     FROM " + ArrOfRegParam.UserName[i] + delim + "DBILBOOKENTRY_DBT BILBOOKENTRY, " + ArrOfRegParam.UserName[i] + delim + "DBILFACTURA_DBT BF" ;
                sqlString = sqlString + acssql_from + 
                            " WHERE BILBOOKENTRY.T_REGDATE BETWEEN to_date( '"+date1+"', 'dd.mm.yyyy') AND to_date( '"+date2+"', 'dd.mm.yyyy')" +
                        //  " AND BILBOOKENTRY.T_BOOKID = "+ BookID +
                            " AND BILBOOKENTRY.T_DIRECTION = "+ Direction +
                            " AND " + acssql_query ;

                if(PrnDepartment != 0)
                    sqlString = sqlString + " AND BILBOOKENTRY.T_DEPARTMENT = " + PrnDepartment;
                end;

                sqlString = sqlString + 
                            " AND BILBOOKENTRY.T_FACTURAID = BF.T_FACTURAID " +
                            " ) SRCF " ;

                sqlString = sqlString + acssql_from + 
                          " WHERE  BILBOOKENTRY.T_DIRECTION = "+ Direction +
                            " AND " + acssql_query ;
                 
                if(PrnDepartment != 0)
                    sqlString = sqlString + " AND BILBOOKENTRY.T_DEPARTMENT = " + PrnDepartment;
                end;

                sqlString = sqlString + 
                            " AND BILBOOKENTRY.T_FACTURAID = BF.T_FACTURAID " +
                            " AND BF.T_SOURCEFACTURAID = BFSRC.T_FACTURAID(+) " + 
                            " AND BF.T_SOURCEFACTURAID = SRCF.T_FACTURAID " +
                            " AND BF.t_Assignment = " + OBJSFASSIGNMENT_RECALC + // Пересчет
                            " AND BF.T_TOTALWITHNDS <= 0 " +  // В BF.T_TOTALWITHNDS хранится разница сумм товров исходной СФ и СФ с назначением "Пересчет" 
                            " AND BF.T_REGDATE BETWEEN to_date( '"+date1+"', 'dd.mm.yyyy') AND to_date( '"+date2+"', 'dd.mm.yyyy') ";
              end;
            end;
            i = i + 1;
         end; //конец цикла
         sqlString = sqlString + ")  ORDER BY t_CreationDate, QUERY_ID, CalcTotalWithNds, t_FacturaNumber ";  
     else
         sqlString = " SELECT BILBOOKENTRY.T_BOOKENTRYID, BILBOOKENTRY.T_FACTURAID AS FID, BF.t_CorrectionNum AS CorrectionNum, BILBOOKENTRY.t_ReceiverName, " +
                     " BILBOOKENTRY.t_ReceiverINN, BILBOOKENTRY.t_PayDate, BF.t_CreationDate, BF.t_FacturaNumber, NVL(BFSRC.t_FacturaID, 0) AS SrcFacturaID, " +
                     " NVL(BFSRC.t_CorrectionNum, 0) AS SrcCorrectionNum, BILBOOKENTRY.T_AMOUNT CalcTotalWithNds, BILBOOKENTRY.T_AMOUNTCURR TotalWithNdsCurr,  bf.t_fiid, bf.t_Assignment, bf.t_Direction, " +
                     " NVL(BFSRC.t_FacturaNumber,chr(1)) AS SrcFacturaNumber, NVL(BFSRC.t_CreationDate, TO_DATE('01.01.0001', 'dd.mm.yyyy')) AS SrcCreationDate," +
                     " BILBOOKENTRY.T_REGDATE AS RegDate, BILBOOKENTRY.T_ENTRYNUMBER AS EntryNumber, 0 AS IsAnnul, BILBOOKENTRY.T_FIID As BBFIID," + 
                     " BILBOOKENTRY.T_ISSUPPLIERAGENT As IsSupplierAgent, BILBOOKENTRY.T_ISRECEIVERAGENT AS IsReceiverAgent, NVL(BF.T_SFTYPEID, 0) As SFTYPEID " +
                     " FROM DBILBOOKENTRY_DBT BILBOOKENTRY, DBILFACTURA_DBT BF, DBILFACTURA_DBT BFSRC" ;
         sqlString = sqlString + acssql_from + 
                     " WHERE BILBOOKENTRY.T_REGDATE BETWEEN to_date( '"+date1+"', 'dd.mm.yyyy') AND to_date( '"+date2+"', 'dd.mm.yyyy')" +
                     " AND BILBOOKENTRY.T_BOOKID = "+ BookID +
                     " AND BILBOOKENTRY.T_ANNULENTRY = 0 " +
                     " AND BF.t_Assignment <> " + OBJSFASSIGNMENT_RECALC + // Пересчет
                     " AND BILBOOKENTRY.T_DIRECTION = "+ Direction +
                     " AND " + acssql_query ;

         if(PrnDepartment != 0)
             sqlString = sqlString + " AND BILBOOKENTRY.T_DEPARTMENT = " + PrnDepartment;
         end;
    
         sqlString = sqlString + 
                     " AND BILBOOKENTRY.T_FACTURAID = BF.T_FACTURAID(+)" +
                     " AND BF.T_SOURCEFACTURAID = BFSRC.T_FACTURAID(+)" ;
    
         sqlString = sqlString +  " UNION " ;

         sqlString = sqlString + 
                     " SELECT BILBOOKENTRY.T_BOOKENTRYID, BILBOOKENTRY.T_FACTURAID AS FID, BF.t_CorrectionNum AS CorrectionNum, BILBOOKENTRY.t_ReceiverName, " +
                     " BILBOOKENTRY.t_ReceiverINN, BILBOOKENTRY.t_PayDate, BF.t_CreationDate, BF.t_FacturaNumber, NVL(BFSRC.t_FacturaID, 0) AS SrcFacturaID, " +
                     " NVL(BFSRC.t_CorrectionNum, 0) AS SrcCorrectionNum, BILBOOKENTRY.T_AMOUNT CalcTotalWithNds, BILBOOKENTRY.T_AMOUNTCURR TotalWithNdsCurr, bf.t_fiid, bf.t_Assignment, bf.t_Direction, " +
                     " NVL(BFSRC.t_FacturaNumber,chr(1)) AS SrcFacturaNumber, NVL(BFSRC.t_CreationDate, TO_DATE('01.01.0001', 'dd.mm.yyyy')) AS SrcCreationDate, " +
                     " BILBOOKENTRY.T_ANNULDATE AS RegDate, BILBOOKENTRY.T_ENTRYNUMBER AS EntryNumber, 1 AS IsAnnul,BILBOOKENTRY.T_FIID As BBFIID, " +
                     " BILBOOKENTRY.T_ISSUPPLIERAGENT As IsSupplierAgent, BILBOOKENTRY.T_ISRECEIVERAGENT AS IsReceiverAgent, NVL(BF.T_SFTYPEID, 0) As SFTYPEID " +
                     " FROM DBILBOOKENTRY_DBT BILBOOKENTRY, DBILFACTURA_DBT BF, DBILFACTURA_DBT BFSRC" ;
         sqlString = sqlString + acssql_from + 
                     " WHERE BILBOOKENTRY.T_REGDATE BETWEEN to_date( '"+date1+"', 'dd.mm.yyyy') AND to_date( '"+date2+"', 'dd.mm.yyyy')" +
                     " AND BILBOOKENTRY.T_BOOKID = "+ BookID +
                     " AND BILBOOKENTRY.T_ANNULENTRY <> 0 " +
                     " AND BILBOOKENTRY.T_ANNULDATE <= to_date( '"+date2+"', 'dd.mm.yyyy')" +
                     " AND BILBOOKENTRY.T_DIRECTION = "+ Direction +
                     " AND " + acssql_query ;

         if(PrnDepartment != 0)
             sqlString = sqlString + " AND BILBOOKENTRY.T_DEPARTMENT = " + PrnDepartment;
         end;

         sqlString = sqlString + 
                     " AND BILBOOKENTRY.T_FACTURAID = BF.T_FACTURAID(+)" +
                     " AND BF.t_Assignment <> " + OBJSFASSIGNMENT_RECALC + // Пересчет
                     " AND BF.T_SOURCEFACTURAID = BFSRC.T_FACTURAID(+)" ;

         if(date2 >= date(01,01,2014))
           sqlString = sqlString +  " UNION " ;
           
           // стоимость товаров/услуг/выполненных работ по СФ SF.TotalWithNDS увеличилась по сравнению с исходным СФ и дата регистрации исходного СФ (SFS.RegDate) 
           // попадает в период от <Date1> до <Date2> включительно.
           sqlString = sqlString + " SELECT BILBOOKENTRY.T_BOOKENTRYID, BILBOOKENTRY.T_FACTURAID AS FID, BF.t_CorrectionNum AS CorrectionNum, BILBOOKENTRY.t_ReceiverName, " +
                                   " BILBOOKENTRY.t_ReceiverINN, BILBOOKENTRY.t_PayDate, BF.t_CreationDate, BF.t_FacturaNumber, NVL(BFSRC.t_FacturaID, 0) AS SrcFacturaID, " +
                                   " NVL(BFSRC.t_CorrectionNum, 0) AS SrcCorrectionNum, BILBOOKENTRY.T_AMOUNT CalcTotalWithNds, BILBOOKENTRY.T_AMOUNTCURR TotalWithNdsCurr, bf.t_fiid, bf.t_Assignment, bf.t_Direction, "+
                                   " NVL(BFSRC.t_FacturaNumber,chr(1)) AS SrcFacturaNumber, NVL(BFSRC.t_CreationDate, TO_DATE('01.01.0001', 'dd.mm.yyyy')) AS SrcCreationDate," +
                                   " BILBOOKENTRY.T_REGDATE AS RegDate, BILBOOKENTRY.T_ENTRYNUMBER AS EntryNumber, 0 AS IsAnnul,BILBOOKENTRY.T_FIID As BBFIID, " +
                                   " BILBOOKENTRY.T_ISSUPPLIERAGENT As IsSupplierAgent, BILBOOKENTRY.T_ISRECEIVERAGENT AS IsReceiverAgent, NVL(BF.T_SFTYPEID, 0) As SFTYPEID " +
                                   " FROM DBILBOOKENTRY_DBT BILBOOKENTRY, DBILFACTURA_DBT BF, DBILFACTURA_DBT BFSRC, " ;

           sqlString = sqlString + " ( SELECT BF.T_FACTURAID AS T_FACTURAID, BF.t_TotalWithNDS AS t_TotalWithNDS " +
                                   "     FROM DBILBOOKENTRY_DBT BILBOOKENTRY, DBILFACTURA_DBT BF" ;
           sqlString = sqlString + acssql_from + 
                       " WHERE BILBOOKENTRY.T_REGDATE BETWEEN to_date( '"+date1+"', 'dd.mm.yyyy') AND to_date( '"+date2+"', 'dd.mm.yyyy') " +
                       " AND BILBOOKENTRY.T_BOOKID = "+ BookID +
                       " AND BILBOOKENTRY.T_DIRECTION = "+ Direction +
                       " AND " + acssql_query ;
    
           if(PrnDepartment != 0)
               sqlString = sqlString + " AND BILBOOKENTRY.T_DEPARTMENT = " + PrnDepartment;
           end;

           sqlString = sqlString + 
                       " AND BILBOOKENTRY.T_FACTURAID = BF.T_FACTURAID " +
                       " AND BF.T_REGDATE BETWEEN to_date( '"+date1+"', 'dd.mm.yyyy') AND to_date( '"+date2+"', 'dd.mm.yyyy') " +
                       " ) SRCF " ;

           sqlString = sqlString + acssql_from + 
                       " WHERE  BILBOOKENTRY.T_BOOKID = "+ BookID +
                       " AND BILBOOKENTRY.T_DIRECTION = "+ Direction +
                       " AND BF.t_Assignment = " + OBJSFASSIGNMENT_RECALC + // Пересчет
                       " AND " + acssql_query ;
                 
           if(PrnDepartment != 0)
               sqlString = sqlString + " AND BILBOOKENTRY.T_DEPARTMENT = " + PrnDepartment;
           end;

           sqlString = sqlString + 
                       " AND BILBOOKENTRY.T_FACTURAID = BF.T_FACTURAID " +
                       " AND BF.T_SOURCEFACTURAID = BFSRC.T_FACTURAID(+) " + 
                       " AND BF.T_SOURCEFACTURAID = SRCF.T_FACTURAID " +
                       " AND BF.T_TOTALWITHNDS > 0 ";  // В BF.T_TOTALWITHNDS хранится разница сумм товров исходной СФ и СФ с назначением "Пересчет" 


           sqlString = sqlString +  " UNION " ;
           
           // стоимость товаров/услуг/выполненных работ по СФ SF.TotalWithNDS уменьшилась или осталось 
           // неизмененной по сравнению с исходным СФ и дата регистрации корректировочного СФ (SF.RegDate) 
           // попадает в период от <Date1> до <Date2> включительно (т.е. попадает в тот же налоговый период, что и ЗК);
           sqlString = sqlString + " SELECT BILBOOKENTRY.T_BOOKENTRYID, BILBOOKENTRY.T_FACTURAID AS FID, BF.t_CorrectionNum AS CorrectionNum, BILBOOKENTRY.t_ReceiverName, " +
                                   " BILBOOKENTRY.t_ReceiverINN, BILBOOKENTRY.t_PayDate, BF.t_CreationDate, " +
                                   " BF.t_FacturaNumber, NVL(BFSRC.t_FacturaID, 0) AS SrcFacturaID, " +
                                   " NVL(BFSRC.t_CorrectionNum, 0) AS SrcCorrectionNum, BILBOOKENTRY.T_AMOUNT CalcTotalWithNds, BILBOOKENTRY.T_AMOUNTCURR TotalWithNdsCurr, bf.t_fiid, bf.t_Assignment, bf.t_Direction, " +
                                   " NVL(BFSRC.t_FacturaNumber,chr(1)) AS SrcFacturaNumber, " +
                                   " NVL(BFSRC.t_CreationDate, TO_DATE('01.01.0001', 'dd.mm.yyyy')) AS SrcCreationDate, " +
                                   " BILBOOKENTRY.T_REGDATE AS RegDate, BILBOOKENTRY.T_ENTRYNUMBER AS EntryNumber, 0 AS IsAnnul,BILBOOKENTRY.T_FIID As BBFIID, " +
                                   " BILBOOKENTRY.T_ISSUPPLIERAGENT As IsSupplierAgent, BILBOOKENTRY.T_ISRECEIVERAGENT AS IsReceiverAgent, NVL(BF.T_SFTYPEID, 0) As SFTYPEID " +
                                   " FROM DBILBOOKENTRY_DBT BILBOOKENTRY, DBILFACTURA_DBT BF, DBILFACTURA_DBT BFSRC, " ;

           sqlString = sqlString + " ( SELECT BF.T_FACTURAID AS T_FACTURAID, BF.t_TotalWithNDS AS t_TotalWithNDS " +
                                   "     FROM DBILBOOKENTRY_DBT BILBOOKENTRY, DBILFACTURA_DBT BF" ;
           sqlString = sqlString + acssql_from + 
                       " WHERE BILBOOKENTRY.T_REGDATE BETWEEN to_date( '"+date1+"', 'dd.mm.yyyy') AND to_date( '"+date2+"', 'dd.mm.yyyy')" +
                       " AND BILBOOKENTRY.T_BOOKID = "+ BookID +
                       " AND BILBOOKENTRY.T_DIRECTION = "+ Direction +
                       " AND " + acssql_query ;
    
           if(PrnDepartment != 0)
               sqlString = sqlString + " AND BILBOOKENTRY.T_DEPARTMENT = " + PrnDepartment;
           end;

           sqlString = sqlString + 
                       " AND BILBOOKENTRY.T_FACTURAID = BF.T_FACTURAID " +
                       " ) SRCF " ;
    
           sqlString = sqlString + acssql_from + 
                       " WHERE  BILBOOKENTRY.T_BOOKID = "+ BookID +
                       " AND BILBOOKENTRY.T_DIRECTION = "+ Direction +
                       " AND " + acssql_query ;
                 
           if(PrnDepartment != 0)
               sqlString = sqlString + " AND BILBOOKENTRY.T_DEPARTMENT = " + PrnDepartment;
           end;

           sqlString = sqlString + 
                       " AND BILBOOKENTRY.T_FACTURAID = BF.T_FACTURAID " +
                       " AND BF.T_SOURCEFACTURAID = BFSRC.T_FACTURAID(+) " + 
                       " AND BF.T_SOURCEFACTURAID = SRCF.T_FACTURAID " +
                       " AND BF.t_Assignment = " + OBJSFASSIGNMENT_RECALC + // Пересчет
                       " AND BF.T_TOTALWITHNDS <= 0 " +  // В BF.T_TOTALWITHNDS хранится разница сумм товров исходной СФ и СФ с назначением "Пересчет" 
                       " AND BF.T_REGDATE BETWEEN to_date( '"+date1+"', 'dd.mm.yyyy') AND to_date( '"+date2+"', 'dd.mm.yyyy') ";
         end;

         //Kozina упорядочить по первому столбцу I-117000
         sqlString = sqlString + " order by t_CreationDate, CalcTotalWithNds, t_FacturaNumber "; //А.Киселев 18.03.2011
     end;
     debugbreak;
     cmd2 = RsdCommand( sqlString );
     cmd2.NullConversion = true;
     rs = RsdRecordset( cmd2 );

     i = 0;
     while( rs.moveNext() )
       PrintBilBookDistr( i+1, rs, @TotalAmount18, @TotalNDSAmount18, @TotalAmount10, @TotalNDSAmount10, @TotalAmount0, @TotalAmount20, @TotalNDSAmount20, @TotalFree, @TotalWithNDS );
       i = i + 1;
     end;

   end;

   if (TypeBook == TYPEBOOK_BASE )
     PrintFTableDistr(TotalAmount18, TotalNDSAmount18, TotalAmount10, TotalNDSAmount10, TotalAmount0, TotalAmount20, TotalNDSAmount20, TotalFree, TotalWithNDS );

     if(FIO_1 == "")
       FIO_1 = "__________________";
     end;

     Rep.AddPrintCell( Dolz_1 + " _______________     " + FIO_1, Rep.GetHeaderWidth(), 0, "l", REP_ELEM_STR);
     Rep.AddStr();   
     Rep.AddPrintCell(SubStr(EmptyStr,1, strlen(Dolz_1)*2 )+"(подпись)              (ф.и.о.)  ", Rep.GetHeaderWidth(), 0, "l:ex_FS(t)", REP_ELEM_STR);  
     Rep.AddStr();   

     Rep.AddPrintCell( "Индивидуальный предприниматель " + "  _______________ " + "  ____________________", Rep.GetHeaderWidth(), 0, "l" , REP_ELEM_STR);
     Rep.AddStr();   
     Rep.AddPrintCell( "                                                      (подпись)                   (ф.и.о.)  ", Rep.GetHeaderWidth(), 0, "l:ex_FS(t)", REP_ELEM_STR); //
     Rep.AddStr();                                                         

     Rep.AddPrintCell( "Реквизиты свидетельства о государственной ", Rep.GetHeaderWidth(), 0, "l", REP_ELEM_STR);
     Rep.AddStr();   
     Rep.AddPrintCell( "регистрации индивидуального предпринимателя " + " _____________________________ ", Rep.GetHeaderWidth(), 0, "l", REP_ELEM_STR);
     Rep.AddStr();   

     Rep.AddPrintCell( "_______________________", Rep.GetHeaderWidth(), 0, "l", REP_ELEM_STR);
     Rep.AddStr();   

     Rep.AddPrintCell( "* До завершения расчетов по товарам (работам, услугам), отгруженным (выполненным, оказанным) до 1 января 2004 г.", Rep.GetHeaderWidth(), 0, "l", REP_ELEM_STR);
     Rep.AddStr();   

   end;
   
   return 0;
end;
/*-----------------------------------------------------------------------------------*/
private macro PrintFTableObt(TotalAmount18, TotalNDSAmount18, TotalAmount10, TotalNDSAmount10, TotalAmount0, TotalAmount20, TotalNDSAmount20, TotalFree, TotalWithNDS )
    Rep.AddPrintCell( "Всего ",              Rep.GetColWidthTable(0)+Rep.GetColWidthTable(1)+Rep.GetColWidthTable(2)+Rep.GetColWidthTable(3)+Rep.GetColWidthTable(4)+Rep.GetColWidthTable(5)+Rep.GetColWidthTable(6)+Rep.GetColWidthTable(7)+Rep.GetColWidthTable(8)+Rep.GetColWidthTable(9)+Rep.GetColWidthTable(10)+Rep.GetColWidthTable(11)+Rep.GetColWidthTable(12)+Rep.GetColWidthTable(13)+Rep.GetColWidthTable(14)+14, NULL, "l"  );

    Rep.AddPrintCell( TotalNDSAmount18 + TotalNDSAmount10 + TotalNDSAmount20    ,     Rep.GetColWidthTable(15), NULL, "r" );
    Rep.AddStr();
    Rep.AddPrintCell( " ", Rep.GetHeaderWidth(), 0, "l", REP_ELEM_STR);
    Rep.AddStr();
end;

private macro PrintTotalTableObt(TotalAmount18, TotalNDSAmount18, TotalAmount10, TotalNDSAmount10, TotalAmount0, TotalAmount20, TotalNDSAmount20, TotalFree, TotalWithNDS )
    Rep.AddPrintCell( "Итого ",              Rep.GetColWidthTable(0)+Rep.GetColWidthTable(1)+Rep.GetColWidthTable(2)+Rep.GetColWidthTable(3)+Rep.GetColWidthTable(4)+Rep.GetColWidthTable(5)+Rep.GetColWidthTable(6)+Rep.GetColWidthTable(7)+Rep.GetColWidthTable(8)+Rep.GetColWidthTable(9)+Rep.GetColWidthTable(10)+Rep.GetColWidthTable(11)+Rep.GetColWidthTable(12)+Rep.GetColWidthTable(13)+Rep.GetColWidthTable(14)+14, NULL, "l"  );

    Rep.AddPrintCell( TotalNDSAmount18 + TotalNDSAmount10 + TotalNDSAmount20    ,     Rep.GetColWidthTable(15), NULL, "r" );

    Rep.AddStr();
end;


/* Печать заголовка реестра */
private macro PrintBilBookObt( rs : RsdRecordset, TotalAmount18 : @money, TotalNDSAmount18 : @money, TotalAmount10 : @money, TotalNDSAmount10 : @money, TotalAmount0 : @money, TotalAmount20 : @money, TotalNDSAmount20 : @money, TotalFree : @money, AllTotalWithNDS : @money, inum)
  FILE bilfactura("bilfactura.dbt") key 4;
  FILE bilfacturaSecond("bilfactura.dbt") key 4;
  FILE bilfagentpt("bilfagentpt.dbt") key 0;
  record fi ( fininstr );

  var BookEntryID      : integer;
  var EntryNumber      : string;
  var FacturaID        : integer;  
  var CDate            : string;
  var EntryDate        : date;
  var FacturaNumber    : string;
  var SrcFacturaNumber : string;
  var SrcCDate         : string;
  var CDate_Corr       : string;
  var SrcCDate_Corr    : string;
  var Number_Corr      : string;
  var SrcNumber_Corr   : string;
  var FacturaNumberIsp : string;
  var FacturaCDateIsp  : string;
  var SupplierName     : string;
  var SupplierINN      : string;
  var Country          : string;
  var GTDNum           : string;
  var CountryGTD       : string;
  var PayDate          : date;
  var PayNum           : string;
  var TotalWithNDS     : money;
  var NDSRate;
  var IsSupplierAgent  : string;
  var IsReceiverAgent  : string;
  var AgentName        : string;
  var AgentINN         : string;
  var SFType           : integer;
  var TotalWithNdsCurr;  
  var rst : RsdRecordset;
  var sqlString = "";
  var FIID = NATCUR;

  var ZeroDate = date( 0, 0, 0 );
  var FcDirection = Direction; // по умолчанию направление СФ совпадает с направлением ЗК
  var Amount18 : money, NDSAmount18 : money, Amount10 : money, NDSAmount10 : money, Amount0 : money, NDSAmount0 : money, Amount20 : money, NDSAmount20 : money, Free : money ;
  var strAmount18, strNDSAmount18, strAmount10, strNDSAmount10, strAmount0, strNDSAmount0, strAmount20, strNDSAmount20, strFree ;
  Amount18 = $0;  NDSAmount18 = $0; Amount10 = $0;  NDSAmount10 = $0; Amount0 = $0; NDSAmount0 = $0; Amount20 = $0;  NDSAmount20 = $0; Free = $0;
  var Assignment = 0;
  var RevertSum = false;
  var num, i, IsCDateNULL, IsFacturaNumberNULL, IsTotalWithNDSNULL, IsNDSRateNULL, IsCountyNULL, IsGTDNumNULL, IsAssignmentNULL, IsSrcFacturaNumberNULL, IsSrcCDateNULL, IsFcDirectionNULL; 
  var modifyRecord:bool = false;
  var IsAnnul = 0;
  
  rs.value("T_CREATIONDATE"  , IsCDateNULL           );
  rs.value("T_FACTURANUMBER" , IsFacturaNumberNULL   );
  rs.value("T_TOTALWITHNDS"  , IsTotalWithNDSNULL    );
  rs.value("T_ASSIGNMENT"    , IsAssignmentNULL      );
  rs.value("SrcFacturaNumber", IsSrcFacturaNumberNULL);
  rs.value("SrcCreationDate" , IsSrcCDateNULL        );
  rs.value("T_DIRECTION"     , IsFcDirectionNULL     );


  IsAnnul = rs.value("IsAnnul");

  BookEntryID    = rs.value("T_BOOKENTRYID"     );    
  EntryNumber    = rs.value("T_ENTRYNUMBER"     );    
  if(EntryNumber == StrFor(1))
    EntryNumber = ""
  end;

  FacturaID      = rs.value("T_FACTURAID"     );    

  if(IsCDateNULL != true)
    CDate        = date(rs.value("T_CREATIONDATE"  ));
  else
    CDate        =date(0,0,0);
  end;

  if(IsFacturaNumberNULL != true)
    FacturaNumber = rs.value("T_FACTURANUMBER" );
  else
    FacturaNumber = "";
  end;

  if(IsAssignmentNULL != true)
    Assignment = rs.value("T_ASSIGNMENT" );
  else
    Assignment = 0;
  end;

  if(IsFcDirectionNULL != true)
    FcDirection = rs.value("T_DIRECTION");
  else
    FcDirection = Direction;
  end;

  EntryDate    = rs.value("t_ENTRYDATE"  );

  PayDate      = rs.value("T_PAYDATE"    );
  FIID         = rs.value("BBFIID"       ); 


  IsSupplierAgent = rs.value("IsSupplierAgent");
  IsReceiverAgent = rs.value("IsReceiverAgent");

  if((IsReceiverAgent == "X") AND (FacturaID > 0))
    bilfagentpt.facturaID = FacturaID;
    bilfagentpt.PtKind    = 2;
    if(getEQ(bilfagentpt))
      SupplierName = bilfagentpt.Name;
      SupplierINN  = bilfagentpt.INN ;
    else
      SupplierName = rs.value("T_SUPPLIERNAME"  );   
      SupplierINN  = rs.value("T_SUPPLIERINN"   );
    end;
  else
    SupplierName = rs.value("T_SUPPLIERNAME"  );
    SupplierINN  = rs.value("T_SUPPLIERINN"   );
  end;

  SFType      = rs.value("SFTYPEID");

  AgentName = "";
  AgentINN  = "";

  if((IsSupplierAgent == "X") AND ( SFType != BILTYPE_SF_POSR))
    AgentName = rs.value("T_SUPPLIERNAME"  );
    AgentINN  = rs.value("T_SUPPLIERINN"   );
  end;

  PayNum = "";
  PayDate = BFGetMaxDateDocBookEntry(BookEntryID, PayNum);

  var SFacturaID = 0;                                                               
  if(Assignment == OBJSFASSIGNMENT_RECALC) // Для СФ с назначением "пересчет": Список дат и номеров исходных СФ 
    SFacturaID = rs.value("srcFacturaID");
  elif(Assignment == OBJSFASSIGNMENT_MODIFY) // Для СФ с назначением "исправление"
    bilfactura.facturaID = rs.value("srcFacturaID");
    if(getEQ(bilfactura))
      if(bilfactura.Assignment == OBJSFASSIGNMENT_RECALC)  // если СФ имеет назначение "пересчет"
        modifyRecord = true;    
        SFacturaID = bilfactura.SOURCEFACTURAID;
      else // иначе берем дату и номер найденного СФ
        SrcFacturaNumber = bilfactura.FacturaNumber;       
        SrcCDate         = bilfactura.CreationDate;        
      end;  
    end;                                     
  else                    
    SrcFacturaNumber = FacturaNumber;   
    SrcCDate         = CDate; 
  end; 

  if(SFacturaID > 0) 
    bilfactura.facturaID = SFacturaID;
    if(getEQ(bilfactura))
        SrcFacturaNumber = bilfactura.FacturaNumber;       
        SrcCDate         = bilfactura.CreationDate;        
    end;                                     
  end;
        

  SrcNumber_Corr = "";
  SrcCDate_Corr = "";
  if(Assignment == OBJSFASSIGNMENT_MODIFY) // Заполняется только для СФ с назначением "Исправление"
    bilfactura.facturaID = rs.value("srcFacturaID");
    if(getEQ(bilfactura))
      if(bilfactura.Assignment != OBJSFASSIGNMENT_RECALC)  // и при этом SourceFacturaID не ссылается на СФ с назначением "Пересчет"
        SrcNumber_Corr = rs.value("CorrectionNum");
        SrcCDate_Corr  = date(rs.value("t_CreationDate"));
      end;  
    end;                                     
  end;

  Number_Corr = "";
  CDate_Corr  = "";

  FacturaNumberIsp = "";
  FacturaCDateIsp  = "";

  if(Assignment == OBJSFASSIGNMENT_RECALC) // Для СФ с назначением "пересчет": номер и дата СФ.
    Number_Corr = FacturaNumber;
    CDate_Corr  = CDate;        
  elif(Assignment == OBJSFASSIGNMENT_MODIFY) // Для СФ с назначением "исправление"
   bilfactura.facturaID = rs.value("srcFacturaID");
   if(getEQ(bilfactura))
     if(bilfactura.Assignment == OBJSFASSIGNMENT_RECALC)  //если SourceFacturaID ссылается на СФ с назначением "Пересчет"
       // поле заполняется номером и датой исходного СФ(Пересчет)
       Number_Corr = bilfactura.FacturaNumber;       
       CDate_Corr  = bilfactura.CreationDate;        

       FacturaNumberIsp = rs.value("CorrectionNum");       
       FacturaCDateIsp  = date(rs.value("t_CreationDate"));
     end;  
   end;                                     
  else
    Number_Corr = CDate_Corr = "";
  end;


  if(IsTotalWithNDSNULL != true)
   TotalWithNDS = rs.value("CalcTotalWithNds");
  else 
   TotalWithNDS = $0;
  end;
 
 

  if(BookEntryID != 0) 
    sqlString = "   SELECT T_NDSRATE, SUM(T_AMOUNT), SUM(T_NDSAMOUNT), SUM(T_AMOUNTWITHNDS)" +
                  " FROM DBKENTSUM_DBT  WHERE T_BOOKENTRYID = " + BookEntryID +" AND T_FIID = 0 GROUP BY T_NDSRATE" ;

    rst = RsdRecordset( sqlString );

    while( rst.moveNext() )
       rst.value("T_NDSRATE",IsNDSRateNULL );
     
       if(IsNDSRateNULL != true)
         NDSRate = rst.value("T_NDSRATE" );

         if (NDSRate == -1)
           Free = rst.value("SUM(T_AMOUNT)");
         end;

         if(NDSRate == 18)
           Amount18 = rst.value("SUM(T_AMOUNT)"  );
           NDSAmount18 = rst.value("SUM(T_NDSAMOUNT)");
         end;

         if(NDSRate == 10)
           Amount10 = rst.value("SUM(T_AMOUNT)"  );
           NDSAmount10 = rst.value("SUM(T_NDSAMOUNT)");
         end;

         if(NDSRate == 0)
           Amount0 = rst.value("SUM(T_AMOUNT)"  );
         end;

         if(NDSRate == 20)
           Amount20 = rst.value("SUM(T_AMOUNT)"  );
           NDSAmount20 = rst.value("SUM(T_NDSAMOUNT)");
         end;
       else
         Free = rst.value("SUM(T_AMOUNT)");
       end;
    end;
  end;                 
    sqlString = " SELECT DISTINCT C.T_CODENUM3 AS COUNTRY, DECODE(F.T_GTDNUMBER,chr(1),NULL,F.T_GTDNUMBER ) AS GTDNUMBER FROM DBILFACTURALINE_DBT F, DCOUNTRY_DBT C " + 
                " WHERE F.T_FACTURAID  = " + FacturaID + 
                " AND F.T_COUNTRY != CHR(1) "+
                " AND UPPER(F.T_COUNTRY) =  UPPER(C.T_NAME)"
                " ORDER BY COUNTRY "; 

  rst = RsdRecordset( sqlString );

  CountryGTD = "";
  GTDNum = "";
  if(Assignment != 2)
    while( rst.moveNext() )
      rst.value("COUNTRY" , IsCountyNULL);
      rst.value("GTDNUMBER" , IsGTDNumNULL);

      if( IsCountyNULL != true )
        Country = rst.value("COUNTRY" );
      else
        Country = "";
      end;

      if( IsGTDNumNULL != true )
        GTDNum = rst.value("GTDNUMBER" );
      else
        GTDNum = "";
      end;

      if(Country != "")
       if(CountryGTD != "")
         CountryGTD = CountryGTD + ", "
       end;

       CountryGTD = CountryGTD + Country;

       if(GTDNum != "")
         CountryGTD = CountryGTD + " (" +GTDNum +")";
       end;
      end;
    end;
  end;

  if(IsAnnul == 1)
    Amount18     = -Amount18    ;
    NDSAmount18  = -NDSAmount18 ;
    Amount10     = -Amount10    ;
    NDSAmount10  = -NDSAmount10 ;
    Amount0      = -Amount0     ;
    Amount20     = -Amount20    ; 
    NDSAmount20  = -NDSAmount20 ;
    Free         = -Free        ;
    TotalWithNDS = -TotalWithNDS;
  end;

  if(Assignment == 2)   // Аванс
    Amount0  = $0;
    Amount18 = $0; 
    Amount10 = $0; 
    Amount20 = $0; 
    Free = $0; 
  elif((Assignment == 5) AND (FcDirection != Direction)) // Пересчет
    Amount18     = -Amount18    ;
    NDSAmount18  = -NDSAmount18 ;
    Amount10     = -Amount10    ;
    NDSAmount10  = -NDSAmount10 ;
    Amount0      = -Amount0     ;
    Amount20     = -Amount20    ; 
    NDSAmount20  = -NDSAmount20 ;
    Free         = -Free        ;
    TotalWithNDS = -TotalWithNDS;
  end;


  TotalAmount18     =  TotalAmount18     +  Amount18     ;
  TotalNDSAmount18  =  TotalNDSAmount18  +  NDSAmount18  ;
  TotalAmount10     =  TotalAmount10     +  Amount10     ;
  TotalNDSAmount10  =  TotalNDSAmount10  +  NDSAmount10  ;
  TotalAmount0      =  TotalAmount0      +  Amount0      ;
  TotalAmount20     =  TotalAmount20     +  Amount20     ;
  TotalNDSAmount20  =  TotalNDSAmount20  +  NDSAmount20  ;
  TotalFree         =  TotalFree         +  Free         ;
  AllTotalWithNDS   =  AllTotalWithNDS   +  TotalWithNDS ; 

  if(Assignment == 2)
      strAmount0  = "";
      strAmount18 = ""; 
      strAmount10 = ""; 
      strAmount20 = ""; 
      strFree = ""; 
  else
      strAmount0  = Amount0;
      strAmount18 = Amount18; 
      strAmount10 = Amount10; 
      strAmount20 = Amount20; 
      strFree     = Free    ; 
  end;

  var strEntryDate;

  if(Assignment == 2)
     strEntryDate = "";
  else
    if(EntryDate == ZeroDate)
      strEntryDate = "";
    else
      strEntryDate = EntryDate;
    end;
  end;

  var strDate ; 
  if((PayDate == NULL) OR (PayDate == ZeroDate))
    strDate = "";
  else
    strDate = PayDate;
  end;

  var FICodeName = "";
  if( FIID != ALLFININSTR )
    if( ПолучитьФинИн( FIID, fi ) == 0 )
      FICodeName = fi.Name + ", " + fi.ISO_Number;
    end;
  end;

  var scString = "SELECT DISTINCT BILOPRCODE.T_CODE FROM DBILOPRCODE_DBT BILOPRCODE, DBILFACTURALINE_DBT BILFACTURALINE WHERE BILFACTURALINE.T_FACTURAID = " + FacturaID;
      scString = scString + " AND BILOPRCODE.T_ID = BILFACTURALINE.T_OPRCODEID ORDER BY BILOPRCODE.T_CODE ASC";

  var coders = RsdRecordset(scString);

  var Oper_Code = "";

  while(coders.moveNext())
      if(Oper_Code == "")
              Oper_Code = coders.value("T_CODE");
      else
              Oper_Code = Oper_Code + ", " + coders.value("T_CODE");
      end;
  end;

  // PrintBilBookObt
  if (TypeBook == TYPEBOOK_BASE ) // основной      
    Rep.AddPrintCell( inum,                                      0, NULL, "c" );  // 1
    Rep.AddPrintCell( Oper_Code,                                 0, NULL, "c" );  // 2
    Rep.AddPrintCell( SrcCDate + "\n" +SrcFacturaNumber,         0, NULL, "c" );  // 3
    Rep.AddPrintCell( SrcCDate_Corr + "\n" + SrcNumber_Corr,     0, NULL, "c" );  // 4
    Rep.AddPrintCell( Number_Corr + "\n" + CDate_Corr,           0, NULL, "c" );  // 5
    Rep.AddPrintCell( FacturaNumberIsp + "\n" + FacturaCDateIsp, 0, NULL, "c" );  // 6
    Rep.AddPrintCell( strDate +"\n"+ PayNum,                     0, NULL, "c" );  // 7
    Rep.AddPrintCell( strEntryDate,                              0, NULL, "c" );  // 8
    Rep.AddPrintCell( SupplierName,                              0, NULL, "c" );  // 9
    Rep.AddPrintCell( SupplierINN,                               0, NULL, "c" );  // 10
    Rep.AddPrintCell( AgentName,                                 0, NULL, "c" );  // 11 
    Rep.AddPrintCell( AgentINN ,                                 0, NULL, "c" );  // 12
    Rep.AddPrintCell( GTDNum,                                    0, NULL, "c" );  // 13
    Rep.AddPrintCell( FICodeName,                                0, NULL, "c" );  // 14
    Rep.AddPrintCell( TotalWithNDS ,                             0, NULL, "r" );  // 15
    Rep.AddPrintCell( NDSAmount18 + NDSAmount10 + NDSAmount20,   0, NULL, "r" );  // 16

    ///////////////////////////////////
    Rep.AddStr();
  end;
  
end;

private macro  PrintBBookObt(BBook)
   var TemplateName = "", sqlString, rs, count, i,cmd, cmd2;
   record Party(party);
/*   var TotalAmount18 : money, TotalNDSAmount18 : money, TotalAmount10 : money, TotalNDSAmount10 : money, TotalAmount0 : money, TotalAmount20 : money, TotalNDSAmount20 : money, TotalFree : money , TotalWithNDS : money ;*/
   var EmptyStr = "                                                                                                   ";
   TotalAmount18 = $0; TotalNDSAmount18 = $0; TotalAmount10 = $0; TotalNDSAmount10 = $0; TotalAmount0 = $0; TotalAmount20 = $0; TotalNDSAmount20 = $0; TotalFree = $0; TotalWithNDS = $0;

   ПолучитьСубъекта ({OurBank}, Party ); 

  if (TypeBook == TYPEBOOK_BASE ) // основной 

    Rep.AddPrintCell( "КНИГА ПОКУПОК", Rep.GetHeaderWidth(), 0, "c:" + FontTitle, REP_ELEM_STR);
    Rep.AddStr();
    Rep.AddPrintCell( " ", Rep.GetHeaderWidth(), 0, "l", REP_ELEM_STR);
    Rep.AddStr();
    Rep.AddPrintCell( "Покупатель: " + Party.Name, Rep.GetHeaderWidth(), 0, "l", REP_ELEM_STR);
    Rep.AddStr();   
    Rep.AddPrintCell( "Идентификационный номер и код причины постановки ", Rep.GetHeaderWidth(), 0, "l", REP_ELEM_STR);
    Rep.AddStr();   
    Rep.AddPrintCell( "на учет налогоплательщика-покупателя " + ПолучитьКодСубъекта( {OurBank}, PTCK_INN ), Rep.GetHeaderWidth(), 0, "l", REP_ELEM_STR);
    Rep.AddStr();
    Rep.AddPrintCell( "Покупка за период с "+string(date1) + " по " + string(date2), Rep.GetHeaderWidth(), 0, "l"  , REP_ELEM_STR);
    Rep.AddStr();
    Rep.AddPrintCell( " ", Rep.GetHeaderWidth(), 0, "l", REP_ELEM_STR);
    Rep.AddStr();
  end;

  sqlString = "SELECT COUNT(1) FROM DBILBOOKENTRY_DBT BILBOOKENTRY "+acssql_from+" WHERE BILBOOKENTRY.T_REGDATE BETWEEN to_date('" + date1 +
     "', 'dd.mm.yyyy') AND to_date( '"+ date2 +"', 'dd.mm.yyyy') AND BILBOOKENTRY.T_DIRECTION = "+ Direction +
     " AND " + acssql_query;

  if(PrnDepartment != 0)
      sqlString = sqlString + " AND BILBOOKENTRY.T_DEPARTMENT = " + PrnDepartment;
  end;



  cmd = RsdCommand( sqlString );
  cmd.NullConversion = true;
  rs = RsdRecordset( cmd );

//  rs = RsdRecordset( sqlString );


  rs.moveNext();

  count = rs.value(0);

  if( count == 0 )

  else
     sqlString = " SELECT BILBOOKENTRY.T_BOOKENTRYID, BILBOOKENTRY.T_ENTRYNUMBER, BILBOOKENTRY.T_FACTURAID, BILBOOKENTRY.t_SupplierName, BILBOOKENTRY.t_SupplierINN, BILBOOKENTRY.t_PayDate, BILBOOKENTRY.t_EntryDate, BF.t_CorrectionNum, NVL(BF.t_CreationDate, to_date('01.01.0001', 'dd.mm.yyyy')) AS t_CreationDate, NVL(BF.t_FacturaNumber, CHR(1)) as t_FacturaNumber, BF.t_TotalWithNDS, BF.t_Assignment, BF.t_Direction, NVL(BFSRC.t_FacturaNumber, chr(1)) AS SrcFacturaNumber, BFSRC.t_CreationDate AS SrcCreationDate, BILBOOKENTRY.T_AMOUNT CalcTotalWithNds, BF.t_TotalWithNDS, NVL(BFSRC.t_FacturaID, 0) AS SrcFacturaID, NVL(BFSRC.t_CorrectionNum, 0) as SrcCorrectionNum, BILBOOKENTRY.T_REGDATE AS RegDate, BILBOOKENTRY.T_ENTRYNUMBER AS EntryNumber, 0 AS IsAnnul, BILBOOKENTRY.T_FIID As BBFIID, " +
                 " BILBOOKENTRY.T_ISSUPPLIERAGENT As IsSupplierAgent, BILBOOKENTRY.T_ISRECEIVERAGENT AS IsReceiverAgent, NVL(BF.T_SFTYPEID, 0) As SFTYPEID " +
                 " FROM DBILBOOKENTRY_DBT BILBOOKENTRY, DBILFACTURA_DBT BF, DBILFACTURA_DBT BFSRC";
     sqlString = sqlString + acssql_from +                                     
                 " WHERE BILBOOKENTRY.T_REGDATE BETWEEN to_date( '" + date1 + "', 'dd.mm.yyyy') AND to_date( '"+date2+"', 'dd.mm.yyyy')" +
                 " AND BILBOOKENTRY.T_BOOKID = " + BookID +
                 " AND BILBOOKENTRY.T_DIRECTION = " + Direction +
                 " AND BILBOOKENTRY.T_FACTURAID = BF.T_FACTURAID(+)" +
                 " AND BF.T_SOURCEFACTURAID = BFSRC.T_FACTURAID(+)" +
                 " AND BF.t_Assignment <> " + OBJSFASSIGNMENT_RECALC + // Пересчет
                 " AND " + acssql_query;

     if(PrnDepartment != 0)
         sqlString = sqlString + " AND BILBOOKENTRY.T_DEPARTMENT = " + PrnDepartment;
     end;

     sqlString = sqlString + " UNION ";
     // аннулирующие ЗК
     sqlString = sqlString +
                 " SELECT BILBOOKENTRY.T_BOOKENTRYID, BILBOOKENTRY.T_ENTRYNUMBER, BILBOOKENTRY.T_FACTURAID, BILBOOKENTRY.t_SupplierName, BILBOOKENTRY.t_SupplierINN, BILBOOKENTRY.t_PayDate, BILBOOKENTRY.t_EntryDate, BF.t_CorrectionNum, NVL(BF.t_CreationDate, to_date('01.01.0001', 'dd.mm.yyyy')) AS t_CreationDate, NVL(BF.t_FacturaNumber, CHR(1)) as t_FacturaNumber, BF.t_TotalWithNDS, BF.t_Assignment, BF.t_Direction, NVL(BFSRC.t_FacturaNumber, chr(1)) AS SrcFacturaNumber, BFSRC.t_CreationDate AS SrcCreationDate, BILBOOKENTRY.T_AMOUNT CalcTotalWithNds, BF.t_TotalWithNDS, NVL(BFSRC.t_FacturaID, 0) AS SrcFacturaID, NVL(BFSRC.t_CorrectionNum, 0) as SrcCorrectionNum, BILBOOKENTRY.T_ANNULDATE AS RegDate, BILBOOKENTRY.T_ENTRYNUMBER AS EntryNumber, 1 AS IsAnnul, BILBOOKENTRY.T_FIID As BBFIID,  " +
                 " BILBOOKENTRY.T_ISSUPPLIERAGENT As IsSupplierAgent, BILBOOKENTRY.T_ISRECEIVERAGENT AS IsReceiverAgent, NVL(BF.T_SFTYPEID, 0) As SFTYPEID " +
                 " FROM DBILBOOKENTRY_DBT BILBOOKENTRY, DBILFACTURA_DBT BF, DBILFACTURA_DBT BFSRC";
     sqlString = sqlString + acssql_from +                                     
                 " WHERE BILBOOKENTRY.T_REGDATE BETWEEN to_date( '" + date1 + "', 'dd.mm.yyyy') AND to_date( '"+date2+"', 'dd.mm.yyyy')" +
                 " AND BILBOOKENTRY.T_BOOKID = " + BookID +
                 " AND BILBOOKENTRY.T_ANNULENTRY <> 0 " +
                 " AND BILBOOKENTRY.T_ANNULDATE <= to_date( '"+date2+"', 'dd.mm.yyyy')" +
                 " AND BILBOOKENTRY.T_DIRECTION = " + Direction +
                 " AND BILBOOKENTRY.T_FACTURAID = BF.T_FACTURAID(+)" +
                 " AND BF.T_SOURCEFACTURAID = BFSRC.T_FACTURAID(+)" +
                 " AND BF.t_Assignment <> " + OBJSFASSIGNMENT_RECALC + // Пересчет
                 " AND " + acssql_query;

     if(PrnDepartment != 0)
         sqlString = sqlString + " AND BILBOOKENTRY.T_DEPARTMENT = " + PrnDepartment;
     end;

     if(date2 >= date(01,01,2014))
       sqlString = sqlString + " UNION ";
       // Пересчет
       sqlString = sqlString +
                   " SELECT BILBOOKENTRY.T_BOOKENTRYID, BILBOOKENTRY.T_ENTRYNUMBER, BILBOOKENTRY.T_FACTURAID, BILBOOKENTRY.t_SupplierName, BILBOOKENTRY.t_SupplierINN, BILBOOKENTRY.t_PayDate, BILBOOKENTRY.t_EntryDate, BF.t_CorrectionNum, NVL(BF.t_CreationDate, to_date('01.01.0001', 'dd.mm.yyyy')) AS t_CreationDate, NVL(BF.t_FacturaNumber, CHR(1)) as t_FacturaNumber, BF.t_TotalWithNDS, BF.t_Assignment, BF.t_Direction, NVL(BFSRC.t_FacturaNumber, chr(1)) AS SrcFacturaNumber, BFSRC.t_CreationDate AS SrcCreationDate, BILBOOKENTRY.T_AMOUNT CalcTotalWithNds, BF.t_TotalWithNDS, NVL(BFSRC.t_FacturaID, 0) AS SrcFacturaID, NVL(BFSRC.t_CorrectionNum, 0) as SrcCorrectionNum, BILBOOKENTRY.T_ANNULDATE AS RegDate, BILBOOKENTRY.T_ENTRYNUMBER AS EntryNumber, 0 AS IsAnnul, BILBOOKENTRY.T_FIID As BBFIID,  " +
                   " BILBOOKENTRY.T_ISSUPPLIERAGENT As IsSupplierAgent, BILBOOKENTRY.T_ISRECEIVERAGENT AS IsReceiverAgent, NVL(BF.T_SFTYPEID, 0) As SFTYPEID " +
                   " FROM DBILBOOKENTRY_DBT BILBOOKENTRY, DBILFACTURA_DBT BF, DBILFACTURA_DBT BFSRC ";
       sqlString = sqlString + acssql_from +                                     
                   " WHERE BILBOOKENTRY.T_REGDATE BETWEEN to_date( '" + date1 + "', 'dd.mm.yyyy') AND to_date( '"+date2+"', 'dd.mm.yyyy')" +
                   " AND BILBOOKENTRY.T_BOOKID = " + BookID +
                   " AND BILBOOKENTRY.T_ANNULENTRY = 0 " +
                   " AND BILBOOKENTRY.T_DIRECTION = " + Direction +
                   " AND BILBOOKENTRY.T_FACTURAID = BF.T_FACTURAID(+)" +
                   " AND BF.T_SOURCEFACTURAID = BFSRC.T_FACTURAID(+)" +
                   " AND BF.t_Assignment = " + OBJSFASSIGNMENT_RECALC + // Пересчет
                   " AND BF.T_REGDATE BETWEEN to_date( '" + date1 + "', 'dd.mm.yyyy') AND to_date( '"+date2+"', 'dd.mm.yyyy')" +
                   " AND " + acssql_query;

       if(PrnDepartment != 0)
           sqlString = sqlString + " AND BILBOOKENTRY.T_DEPARTMENT = " + PrnDepartment;
       end;
     end;

     sqlString = sqlString + " ORDER BY RegDate, EntryNumber ";

     cmd2 = RsdCommand( sqlString );
     cmd2.NullConversion = true;
     rs = RsdRecordset( cmd2 );

     i = 0;
     while( rs.moveNext() )
       PrintBilBookObt( rs, @TotalAmount18, @TotalNDSAmount18, @TotalAmount10, @TotalNDSAmount10, @TotalAmount0, @TotalAmount20, @TotalNDSAmount20, @TotalFree, @TotalWithNDS, i+1 );
       i = i + 1;
     end;

   end;

   if (TypeBook == TYPEBOOK_BASE ) // ??   
     PrintFTableObt(TotalAmount18, TotalNDSAmount18, TotalAmount10, TotalNDSAmount10, TotalAmount0, TotalAmount20, TotalNDSAmount20, TotalFree, TotalWithNDS );

     if(FIO_1 == "")
       FIO_1 = "__________________";
     end;

     Rep.AddPrintCell( Dolz_1 + " _______________     " + FIO_1, Rep.GetHeaderWidth(), 0, "l", REP_ELEM_STR);
     Rep.AddStr();   
     Rep.AddPrintCell(SubStr(EmptyStr,1, strlen(Dolz_1)*2 )+"(подпись)              (ф.и.о.)  ", Rep.GetHeaderWidth(), 0, "l:ex_FS(t)", REP_ELEM_STR);  
     Rep.AddStr();   

     Rep.AddPrintCell( "Индивидуальный предприниматель " + "  _______________ " + "  ____________________", Rep.GetHeaderWidth(), 0, "l" , REP_ELEM_STR);
     Rep.AddStr();   
     Rep.AddPrintCell( "                                                      (подпись)                   (ф.и.о.)  ", Rep.GetHeaderWidth(), 0, "l:ex_FS(t)", REP_ELEM_STR); //
     Rep.AddStr();                                                         

     Rep.AddPrintCell( "Реквизиты свидетельства о государственной ", Rep.GetHeaderWidth(), 0, "l", REP_ELEM_STR);
     Rep.AddStr();   
     Rep.AddPrintCell( "регистрации индивидуального предпринимателя " + " _____________________________ ", Rep.GetHeaderWidth(), 0, "l", REP_ELEM_STR);
     Rep.AddStr();   

     Rep.AddPrintCell( "_______________________", Rep.GetHeaderWidth(), 0, "l", REP_ELEM_STR);
     Rep.AddStr();   

     Rep.AddPrintCell( "* До завершения расчетов по товарам (работам, услугам), отгруженным (выполненным, оказанным) до 1 января 2004 г.", Rep.GetHeaderWidth(), 0, "l", REP_ELEM_STR);
     Rep.AddStr();   
   end;
   return 0;
end;

/*-----------------------------------------------------------------------------------*/
private macro PrintAddBilBookDistr(RowNum, rs : RsdRecordset, TotalAmount18 : @money, TotalNDSAmount18 : @money, TotalAmount10 : @money, TotalNDSAmount10 : @money, TotalAmount0 : @money, TotalAmount20 : @money, TotalNDSAmount20 : @money, TotalFree : @money, AllTotalWithNDS : @money, fromdate : date)
  FILE bilfactura("bilfactura.dbt") key 4;
  FILE bilfacturaSecond("bilfactura.dbt") key 4;
  FILE bilfagentpt("bilfagentpt.dbt") key 0;
  record fi ( fininstr );

  var BookEntryID      : integer;
  var CDate            : string;
  var FacturaNumber    : string;
  var SrcFacturaNumber : string;
  var SrcCDate         : string;
  var CDate_Corr       : string;
  var SrcCDate_Corr    : string;
  var Number_Corr      : string;
  var SrcNumber_Corr   : string;
  var FacturaNumberIsp : string;
  var FacturaCDateIsp  : string;
  var ReceiverName     : string;
  var ReceiverINN      : string;
  var PayDate          : date;
  var PayNum           : string;
  var TotalWithNDS     : money;
  var NDSRate;
  var IsSupplierAgent  : string;
  var IsReceiverAgent  : string;
  var AgentName        : string;
  var AgentINN         : string;
  var SFType           : integer;
  var TotalWithNdsCurr;  
  var rst : RsdRecordset;
  var sqlString = "";
  var ZeroDate = date( 0, 0, 0 );
  var FcDirection = Direction; // по умолчанию направление СФ совпадает с направлением ЗК
  var FIID  = NATCUR;

  var Amount18 : money, NDSAmount18 : money, Amount10 : money, NDSAmount10 : money, Amount0 : money, NDSAmount0 : money, Amount20 : money, NDSAmount20 : money, Free : money ;
  Amount18 = $0;  NDSAmount18 = $0; Amount10 = $0;  NDSAmount10 = $0; Amount0 = $0; NDSAmount0 = $0; Amount20 = $0;  NDSAmount20 = $0; Free = $0;
  var strAmount18, strNDSAmount18, strAmount10, strNDSAmount10, strAmount0, strNDSAmount0, strAmount20, strNDSAmount20, strFree ;
  var Assignment = 0;
  var RevertSum = false;
  var modifyRecord:bool = false;
  var IsAnnul = 0;


  var num, i, IsCDateNULL, IsFacturaNumberNULL, IsTotalWithNDSNULL, IsNDSRateNULL, IsAssignmentNULL, IsSrcFacturaNumberNULL, IsSrcCDateNULL, IsFcDirectionNULL; 


  rs.value("T_CREATIONDATE"  , IsCDateNULL           );
  rs.value("T_FACTURANUMBER" , IsFacturaNumberNULL   );
  rs.value("CalcTotalWithNds", IsTotalWithNDSNULL    );
  rs.value("T_ASSIGNMENT"    , IsAssignmentNULL      );
  rs.value("SrcFacturaNumber", IsSrcFacturaNumberNULL);
  rs.value("SrcCreationDate" , IsSrcCDateNULL        );
  rs.value("T_DIRECTION"     , IsFcDirectionNULL     );

  IsAnnul = rs.value("IsAnnul");
  
  var AnnulEntry     = rs.value("T_ANNULENTRY"      );    

  BookEntryID    = rs.value("T_BOOKENTRYID"     );    
  if(IsCDateNULL != true)
    CDate        = date(rs.value("T_CREATIONDATE"  ));
  else
    CDate        =date(0,0,0);
  end;

  if(IsFacturaNumberNULL != true)
    FacturaNumber = rs.value("t_FacturaNumber");;
  else
    FacturaNumber = "";
  end;

  if(IsAssignmentNULL != true)
    Assignment = rs.value("T_ASSIGNMENT" );
  else
    Assignment = 0;
  end;

  if(IsFcDirectionNULL != true)
    FcDirection = rs.value("T_DIRECTION");
  else
    FcDirection = Direction;
  end;

  var FID      = rs.value("FID");
  FIID         = rs.value("BBFIID"); 

  IsSupplierAgent = rs.value("IsSupplierAgent");
  IsReceiverAgent = rs.value("IsReceiverAgent");

  if((IsReceiverAgent == "X") AND (FID > 0))
    bilfagentpt.facturaID = FID;
    bilfagentpt.PtKind    = 3;
    if(getEQ(bilfagentpt))
      ReceiverName = bilfagentpt.Name;
      ReceiverINN  = bilfagentpt.INN ;
    else
      ReceiverName = rs.value("T_RECEIVERNAME"  );
      ReceiverINN  = rs.value("T_RECEIVERINN"   );
    end;
  else
    ReceiverName = rs.value("T_RECEIVERNAME"  );
    ReceiverINN  = rs.value("T_RECEIVERINN"   );
  end;

  SFType      = rs.value("SFTYPEID");

  AgentName = "";
  AgentINN  = "";

  if((IsReceiverAgent == "X") AND ( SFType != BILTYPE_SF_POSR))
    AgentName = rs.value("T_RECEIVERNAME"  );
    AgentINN  = rs.value("T_RECEIVERINN"   );
  end;

  PayNum = "";
  PayDate = BFGetMaxDateDocBookEntry(BookEntryID, PayNum);
  
  if(IsTotalWithNDSNULL != true)
   TotalWithNDS = rs.value("CalcTotalWithNds"  );
  else 
   TotalWithNDS = $0;
  end;

  TotalWithNdsCurr = rs.value("TotalWithNdsCurr"  );

  var SFacturaID = 0;                                                               
  if(Assignment == OBJSFASSIGNMENT_RECALC) // Для СФ с назначением "пересчет": Список дат и номеров исходных СФ 
    SFacturaID = rs.value("srcFacturaID");
  elif(Assignment == OBJSFASSIGNMENT_MODIFY) // Для СФ с назначением "исправление"
    bilfactura.facturaID = rs.value("srcFacturaID");
    if(getEQ(bilfactura))
      if(bilfactura.Assignment == OBJSFASSIGNMENT_RECALC)  // если СФ имеет назначение "пересчет"
        modifyRecord = true;    
        SFacturaID = bilfactura.SOURCEFACTURAID;
      else // иначе берем дату и номер найденного СФ
        SrcFacturaNumber = bilfactura.FacturaNumber;       
        SrcCDate         = bilfactura.CreationDate;        
      end;  
    end;                                     
  else                    
    SrcFacturaNumber = FacturaNumber;   
    SrcCDate         = CDate; 
  end; 

  if(SFacturaID > 0) 
    bilfactura.facturaID = SFacturaID;
    if(getEQ(bilfactura))
        SrcFacturaNumber = bilfactura.FacturaNumber;       
        SrcCDate         = bilfactura.CreationDate;        
    end;                                     
  end;
        

  SrcNumber_Corr = "";
  SrcCDate_Corr = "";
  if(Assignment == OBJSFASSIGNMENT_MODIFY) // Заполняется только для СФ с назначением "Исправление"
    bilfactura.facturaID = rs.value("srcFacturaID");
    if(getEQ(bilfactura))
      if(bilfactura.Assignment != OBJSFASSIGNMENT_RECALC)  // и при этом SourceFacturaID не ссылается на СФ с назначением "Пересчет"
        SrcNumber_Corr = rs.value("CorrectionNum");
        SrcCDate_Corr  = date(rs.value("t_CreationDate"));
      end;  
    end;                                     
  end;

  Number_Corr = "";
  CDate_Corr  = "";

  FacturaNumberIsp = "";
  FacturaCDateIsp  = "";

  if(Assignment == OBJSFASSIGNMENT_RECALC) // Для СФ с назначением "пересчет": номер и дата СФ.
    Number_Corr = FacturaNumber;
    CDate_Corr  = CDate;        
  elif(Assignment == OBJSFASSIGNMENT_MODIFY) // Для СФ с назначением "исправление"
   bilfactura.facturaID = rs.value("srcFacturaID");
   if(getEQ(bilfactura))
     if(bilfactura.Assignment == OBJSFASSIGNMENT_RECALC)  //если SourceFacturaID ссылается на СФ с назначением "Пересчет"
       // поле заполняется номером и датой исходного СФ(Пересчет)
       Number_Corr = bilfactura.FacturaNumber;       
       CDate_Corr  = bilfactura.CreationDate;        

       FacturaNumberIsp = rs.value("CorrectionNum");       
       FacturaCDateIsp  = date(rs.value("t_CreationDate"));
     end;  
   end;                                     
  else
    Number_Corr = CDate_Corr = "";
  end;

  
///////////////////////////////////////////////////////  
  sqlString = "   SELECT T_NDSRATE, SUM(T_AMOUNT), SUM(T_NDSAMOUNT), SUM(T_AMOUNTWITHNDS)" +
  " FROM DBKENTSUM_DBT  WHERE T_BOOKENTRYID = " + BookEntryID +" AND T_FIID = 0  GROUP BY T_NDSRATE" ;

  rst = RsdRecordset( sqlString );


  while( rst.moveNext() )
     rst.value("T_NDSRATE",IsNDSRateNULL );
   
     if(IsNDSRateNULL != true)
       NDSRate = rst.value("T_NDSRATE" );

       if (NDSRate == -1)
         Free = rst.value("SUM(T_AMOUNT)");
       end;

       if(NDSRate == 18)
         Amount18 = rst.value("SUM(T_AMOUNT)"  );
         NDSAmount18 = rst.value("SUM(T_NDSAMOUNT)");
       end;

       if(NDSRate == 10)
         Amount10 = rst.value("SUM(T_AMOUNT)"  );
         NDSAmount10 = rst.value("SUM(T_NDSAMOUNT)");
       end;

       if(NDSRate == 0)
         Amount0 = rst.value("SUM(T_AMOUNT)"  );
       end;

       if(NDSRate == 20)
         Amount20 = rst.value("SUM(T_AMOUNT)"  );
         NDSAmount20 = rst.value("SUM(T_NDSAMOUNT)");
       end;

     else
       Free = rst.value("SUM(T_AMOUNT)");
     end;
  end;

  if( NOT ((Assignment == 5) AND (FcDirection != Direction))) // пересчет
    Amount18     = -Amount18    ;
    NDSAmount18  = -NDSAmount18 ;
    Amount10     = -Amount10    ;
    NDSAmount10  = -NDSAmount10 ;
    Amount0      = -Amount0     ;
    Amount20     = -Amount20    ; 
    NDSAmount20  = -NDSAmount20 ;
    Free         = -Free        ;
    TotalWithNDS = -TotalWithNDS;
    TotalWithNdsCurr = -TotalWithNdsCurr;
  end;

 if(Assignment == 2) // Аванс
      Amount0  = $0;
      Amount18 = $0; 
      Amount10 = $0; 
      Amount20 = $0; 
      Free = $0; 
  end;

  if(AnnulEntry == 0)
    TotalAmount18     =  TotalAmount18     -  Amount18     ;
    TotalNDSAmount18  =  TotalNDSAmount18  -  NDSAmount18  ;
    TotalAmount10     =  TotalAmount10     -  Amount10     ;
    TotalNDSAmount10  =  TotalNDSAmount10  -  NDSAmount10  ;
    TotalAmount0      =  TotalAmount0      -  Amount0      ;
    TotalAmount20     =  TotalAmount20     -  Amount20     ;
    TotalNDSAmount20  =  TotalNDSAmount20  -  NDSAmount20  ;
    TotalFree         =  TotalFree         -  Free         ;
    AllTotalWithNDS   =  AllTotalWithNDS   -  TotalWithNDS  ; 
  else
    TotalAmount18     =  TotalAmount18     +  Amount18     ;
    TotalNDSAmount18  =  TotalNDSAmount18  +  NDSAmount18  ;
    TotalAmount10     =  TotalAmount10     +  Amount10     ;
    TotalNDSAmount10  =  TotalNDSAmount10  +  NDSAmount10  ;
    TotalAmount0      =  TotalAmount0      +  Amount0      ;
    TotalAmount20     =  TotalAmount20     +  Amount20     ;
    TotalNDSAmount20  =  TotalNDSAmount20  +  NDSAmount20  ;
    TotalFree         =  TotalFree         +  Free         ;
    AllTotalWithNDS   =  AllTotalWithNDS   +  TotalWithNDS  ; 
  end;

  if( Assignment == 2 )
      strAmount0  = "";
      strAmount18 = ""; 
      strAmount10 = ""; 
      strAmount20 = ""; 
      strFree = ""; 
  else
      strAmount0  = Amount0;
      strAmount18 = Amount18; 
      strAmount10 = Amount10; 
      strAmount20 = Amount20; 
      strFree     = Free    ; 
  end;

  // Если ЗК в рублях
/*
  if( TotalWithNdsCurr == $0 )
    TotalWithNdsCurr = TotalWithNDS;
  end;
*/
  if( TotalWithNdsCurr == $0 )
    TotalWithNdsCurr = "";
  end;

  TotalAmount18     =  TotalAmount18     +  Amount18     ;
  TotalNDSAmount18  =  TotalNDSAmount18  +  NDSAmount18  ;
  TotalAmount10     =  TotalAmount10     +  Amount10     ;
  TotalNDSAmount10  =  TotalNDSAmount10  +  NDSAmount10  ;
  TotalAmount0      =  TotalAmount0      +  Amount0      ;
  TotalAmount20     =  TotalAmount20     +  Amount20     ;
  TotalNDSAmount20  =  TotalNDSAmount20  +  NDSAmount20  ;
  TotalFree         =  TotalFree         +  Free         ;
  AllTotalWithNDS   =  AllTotalWithNDS   +  TotalWithNDS ; 


  if(Assignment == OBJSFASSIGNMENT_PREPAYMENT)
      strAmount0  = "";
      strAmount18 = ""; 
      strAmount10 = ""; 
      strAmount20 = ""; 
      strFree = ""; 
  else
      strAmount0  = Amount0;
      strAmount18 = Amount18; 
      strAmount10 = Amount10; 
      strAmount20 = Amount20; 
      strFree     = Free    ; 
  end;

  var strDate ; 
  if((PayDate == NULL) OR (PayDate == ZeroDate))
    strDate = "";
  else
    strDate = PayDate;
  end;

  var scString = "SELECT DISTINCT BILOPRCODE.T_CODE FROM DBILOPRCODE_DBT BILOPRCODE, DBILFACTURALINE_DBT BILFACTURALINE WHERE BILFACTURALINE.T_FACTURAID = " + FID;
      scString = scString + " AND BILOPRCODE.T_ID = BILFACTURALINE.T_OPRCODEID ORDER BY BILOPRCODE.T_CODE ASC";

  var coders = RsdRecordset(scString);

  var Oper_Code = "";

  while(coders.moveNext())
      if(Oper_Code == "")
              Oper_Code = coders.value("T_CODE");
      else
              Oper_Code = Oper_Code + ", " + coders.value("T_CODE");
      end;
  end;

  var FICodeName = "";
  if( FIID != ALLFININSTR )
    if( ПолучитьФинИн( FIID, fi ) == 0 )
      FICodeName = fi.Name + ", " + fi.ISO_Number;
    end;
  end;


  if ((BeginDate <= fromdate) AND (fromdate <= EndDate))
    Rep.AddPrintCell( RowNum,                                    0, NULL, "c" );  // 1
    Rep.AddPrintCell( Oper_Code,                                 0, NULL, "c" );  // 2
    Rep.AddPrintCell( SrcCDate + "\n" +SrcFacturaNumber,         0, NULL, "c" );  // 3
    Rep.AddPrintCell( SrcCDate_Corr + "\n" + SrcNumber_Corr,     0, NULL, "c" );  // 4
    Rep.AddPrintCell( Number_Corr + "\n" + CDate_Corr,           0, NULL, "c" );  // 5
    Rep.AddPrintCell( FacturaNumberIsp + "\n" + FacturaCDateIsp, 0, NULL, "c" );  // 6
    Rep.AddPrintCell( ReceiverName,                              0, NULL, "c" );  // 7
    Rep.AddPrintCell( ReceiverINN,                               0, NULL, "c" );  // 8
    Rep.AddPrintCell( AgentName,                                 0, NULL, "c" );  // 9 
    Rep.AddPrintCell( AgentINN ,                                 0, NULL, "c" );  // 10
    Rep.AddPrintCell( strDate +"\n"+ PayNum,                     0, NULL, "c" );  // 11
    Rep.AddPrintCell( FICodeName,                                0, NULL, "c" );  // 12
    Rep.AddPrintCell( TotalWithNdsCurr,                          0, NULL, "r" );  // 13
    Rep.AddPrintCell( TotalWithNDS ,                             0, NULL, "r" );  // 13а
    Rep.AddPrintCell( strAmount18 ,                              0, NULL, "r" );  // 14б
    Rep.AddPrintCell( strAmount10 ,                              0, NULL, "r" );  // 15
    Rep.AddPrintCell( strAmount0  ,                              0, NULL, "r" );  // 16
    Rep.AddPrintCell( NDSAmount18 ,                              0, NULL, "r" );  // 17
    Rep.AddPrintCell( NDSAmount10 ,                              0, NULL, "r" );  // 18
    Rep.AddPrintCell( strFree     ,                              0, NULL, "r" );  // 19
    Rep.AddStr();                                          
  end;

end;                                                     
                                                         
private macro  PrintAddBBookDistr(BBook, fromdate)               
   var TemplateName = "", sqlString, rs, count, i,cmd,cmd2;
   record Party(party);
   /*var TotalAmount18 : money, TotalNDSAmount18 : money, TotalAmount10 : money, TotalNDSAmount10 : money, TotalAmount0 : money, TotalAmount20 : money, TotalNDSAmount20 : money, TotalFree : money , TotalWithNDS : money ;*/
   var EmptyStr = "                                                                                                   ";
    var period = "", year ; 
  /* TotalAmount18 = $0; TotalNDSAmount18 = $0; TotalAmount10 = $0; TotalNDSAmount10 = $0; TotalAmount0 = $0; TotalAmount20 = $0; TotalNDSAmount20 = $0; TotalFree = $0; TotalWithNDS = $0;*/

  ПолучитьСубъекта ({OurBank}, Party ); 

  period = GetPeriod(date1, date2, year );

  if ((BeginDate <= fromdate) AND (fromdate <= EndDate))

    AddListNumber = AddListNumber + 1;  
                   
    if(FirstAddList == true)
      Rep.GetCurSheet().SetSheetName( "Дополнительный лист " + AddListNumber);
      FirstAddList = false;
    else
      Rep.AddNewSheetBreak("Дополнительный лист " + AddListNumber , Table1);
    end;
  end;                  

  if ((BeginDate <= fromdate) AND (fromdate <= EndDate))

    Rep.AddPrintCell( "ДОПОЛНИТЕЛЬНЫЙ ЛИСТ " + AddListNum, Rep.GetHeaderWidth(), 0, "c:" + FontTitle, REP_ELEM_STR);
    Rep.AddStr();
    Rep.AddPrintCell( " ", Rep.GetHeaderWidth(), 0, "l", REP_ELEM_STR);
    Rep.AddStr();
    Rep.AddPrintCell( "Продавец: " + Party.Name, Rep.GetHeaderWidth(), 0, "l", REP_ELEM_STR);
    Rep.AddStr();   
    Rep.AddPrintCell( "Идентификационный номер и код причины постановки на учет налогоплательщика-продавца: " + ПолучитьКодСубъекта( {OurBank}, PTCK_INN ), Rep.GetHeaderWidth(), 0, "l", REP_ELEM_STR);
    Rep.AddStr();
    
    if((period == NULL) OR (period == ""))
      Rep.AddPrintCell( "Налоговый период, год с "+string(date1) + " по "+string(date2), Rep.GetHeaderWidth(), 0, "l", REP_ELEM_STR);
    else
      Rep.AddPrintCell( "Налоговый период, год "+ period + " "+year, Rep.GetHeaderWidth(), 0, "l" , REP_ELEM_STR);
    end;


    Rep.AddStr();
    Rep.AddPrintCell( "Дополнительный лист составлен " + string(fromdate), Rep.GetHeaderWidth(), 0, "l", REP_ELEM_STR);

    Rep.AddStr();

    Rep.AddPrintCell( " ", Rep.GetHeaderWidth(), 0, "l", REP_ELEM_STR);
    Rep.AddStr();

    PrintTotalTableDistr(TotalAmount18, TotalNDSAmount18, TotalAmount10, TotalNDSAmount10, TotalAmount0, TotalAmount20, TotalNDSAmount20, TotalFree, TotalWithNDS );
  end;
  if(0)
  else
//     sqlString = " SELECT DISTINCT BILBOOKENTRY.T_BOOKENTRYID, BILBOOKENTRY.T_ANNULENTRY,  BILBOOKENTRY.t_ReceiverName, BILBOOKENTRY.t_ReceiverINN, BILBOOKENTRY.t_PayDate, BF.t_CreationDate, BF.t_FacturaNumber, BILBOOKENTRY.T_AMOUNT CalcTotalWithNds, bf.t_fiid, bf.T_ASSIGNMENT, bf.t_Direction, NVL(BFSRC.t_FacturaNumber,chr(1)) AS SrcFacturaNumber, BFSRC.t_CreationDate AS SrcCreationDate" +
     sqlString = " SELECT BILBOOKENTRY.T_BOOKENTRYID, BILBOOKENTRY.T_FACTURAID AS FID, BF.t_CorrectionNum AS CorrectionNum, BILBOOKENTRY.t_ReceiverName, " +
                 " BILBOOKENTRY.t_ReceiverINN, BILBOOKENTRY.t_PayDate, BF.t_CreationDate, BF.t_FacturaNumber, NVL(BFSRC.t_FacturaID, 0) AS SrcFacturaID, " +
                 " NVL(BFSRC.t_CorrectionNum, 0) AS SrcCorrectionNum, BILBOOKENTRY.T_AMOUNT CalcTotalWithNds, BILBOOKENTRY.T_AMOUNTCURR TotalWithNdsCurr,  bf.t_fiid, bf.t_Assignment, bf.t_Direction, " +
                 " NVL(BFSRC.t_FacturaNumber,chr(1)) AS SrcFacturaNumber, NVL(BFSRC.t_CreationDate, TO_DATE('01.01.0001', 'dd.mm.yyyy')) AS SrcCreationDate," +
                 " BILBOOKENTRY.T_REGDATE AS RegDate, BILBOOKENTRY.T_ENTRYNUMBER AS EntryNumber, 0 AS IsAnnul, BILBOOKENTRY.T_FIID As BBFIID, " + 
                 " BILBOOKENTRY.T_ISSUPPLIERAGENT As IsSupplierAgent, BILBOOKENTRY.T_ISRECEIVERAGENT AS IsReceiverAgent, NVL(BF.T_SFTYPEID, 0) As SFTYPEID, BILBOOKENTRY.T_ANNULENTRY " +
                 " FROM DBILBOOKENTRY_DBT BILBOOKENTRY, DBILFACTURA_DBT BF, DBILFACTURA_DBT BFSRC"; 
     sqlString = sqlString + acssql_from +                   
                 " WHERE (( BILBOOKENTRY.T_REGDATE BETWEEN to_date( '"+date1+"', 'dd.mm.yyyy') AND to_date( '"+date2+"', 'dd.mm.yyyy') " +
                 " AND BILBOOKENTRY.T_ANNULENTRY <> 0  AND BILBOOKENTRY.T_ANNULDATE = to_date( '"+fromdate+"', 'dd.mm.yyyy')) " +
                 " OR (T_BOOKENTRYID IN(SELECT T_ANNULENTRY  FROM DBILBOOKENTRY_DBT WHERE T_ANNULENTRY <>0 " +
                 "                      AND T_REGDATE BETWEEN to_date( '"+date1+"', 'dd.mm.yyyy') AND to_date( '"+date2+"', 'dd.mm.yyyy') " + 
                 "                      AND T_ANNULDATE = to_date( '"+fromdate+"', 'dd.mm.yyyy'))) "+
                 " OR ( BILBOOKENTRY.T_REGDATE > to_date( '"+date2+"', 'dd.mm.yyyy') AND BILBOOKENTRY.T_REGDATE = to_date( '"+fromdate+"', 'dd.mm.yyyy')   )"
                 "    ) " +
                 " AND BILBOOKENTRY.T_BOOKID = "+ BookID +
                 " AND BILBOOKENTRY.T_DIRECTION = "+ Direction +
                 " AND BILBOOKENTRY.T_FACTURAID = BF.T_FACTURAID(+) " +
                 " AND BF.T_SOURCEFACTURAID = BFSRC.T_FACTURAID(+)" +
                 " AND BF.t_Assignment <> " + OBJSFASSIGNMENT_RECALC + // Пересчет
                 " AND " + acssql_query ; 

     if(PrnDepartment != 0)
         sqlString = sqlString + " AND BILBOOKENTRY.T_DEPARTMENT = " + PrnDepartment;
     end;

     if(date2 >= date(01,01,2014))
       sqlString = sqlString +  " UNION " ;

//       sqlString = sqlString + " SELECT DISTINCT BILBOOKENTRY.T_BOOKENTRYID, BILBOOKENTRY.T_ANNULENTRY,  BILBOOKENTRY.t_ReceiverName, BILBOOKENTRY.t_ReceiverINN, BILBOOKENTRY.t_PayDate, BF.t_CreationDate, BF.t_FacturaNumber, BILBOOKENTRY.T_AMOUNT CalcTotalWithNds, bf.t_fiid, bf.T_ASSIGNMENT, bf.t_Direction, NVL(BFSRC.t_FacturaNumber,chr(1)) AS SrcFacturaNumber, BFSRC.t_CreationDate AS SrcCreationDate" +
       sqlString = sqlString + 
                   " SELECT BILBOOKENTRY.T_BOOKENTRYID, BILBOOKENTRY.T_FACTURAID AS FID, BF.t_CorrectionNum AS CorrectionNum, BILBOOKENTRY.t_ReceiverName, " +
                   " BILBOOKENTRY.t_ReceiverINN, BILBOOKENTRY.t_PayDate, BF.t_CreationDate, BF.t_FacturaNumber, NVL(BFSRC.t_FacturaID, 0) AS SrcFacturaID, " +
                   " NVL(BFSRC.t_CorrectionNum, 0) AS SrcCorrectionNum, BILBOOKENTRY.T_AMOUNT CalcTotalWithNds, BILBOOKENTRY.T_AMOUNTCURR TotalWithNdsCurr, bf.t_fiid, bf.t_Assignment, bf.t_Direction, " +
                   " NVL(BFSRC.t_FacturaNumber,chr(1)) AS SrcFacturaNumber, NVL(BFSRC.t_CreationDate, TO_DATE('01.01.0001', 'dd.mm.yyyy')) AS SrcCreationDate, " +
                   " BILBOOKENTRY.T_ANNULDATE AS RegDate, BILBOOKENTRY.T_ENTRYNUMBER AS EntryNumber, 1 AS IsAnnul, BILBOOKENTRY.T_FIID As BBFIID, " +
                   " BILBOOKENTRY.T_ISSUPPLIERAGENT As IsSupplierAgent, BILBOOKENTRY.T_ISRECEIVERAGENT AS IsReceiverAgent, NVL(BF.T_SFTYPEID, 0) As SFTYPEID, BILBOOKENTRY.T_ANNULENTRY " +

                   " FROM DBILBOOKENTRY_DBT BILBOOKENTRY, DBILFACTURA_DBT BF, DBILFACTURA_DBT BFSRC"; 

       sqlString = sqlString + acssql_from +                   
                   " WHERE  " +
                   "    BILBOOKENTRY.T_REGDATE = to_date( '"+fromdate+"', 'dd.mm.yyyy') " +
                   "    AND (( BILBOOKENTRY.T_REGDATE BETWEEN to_date( '"+date1+"', 'dd.mm.yyyy') AND to_date( '"+date2+"', 'dd.mm.yyyy')   "+
                   "           AND (BF.T_TOTALWITHNDS <= 0 OR BF.T_REGDATE BETWEEN to_date( '"+date1+"', 'dd.mm.yyyy') AND to_date( '"+date2+"', 'dd.mm.yyyy')) )"+
                   "     OR ( BILBOOKENTRY.T_REGDATE > to_date( '"+date2+"', 'dd.mm.yyyy') AND BILBOOKENTRY.T_REGDATE = to_date( '"+fromdate+"', 'dd.mm.yyyy')   )"
                   "    ) " +
                   " AND BILBOOKENTRY.T_BOOKID = "+ BookID +
                   " AND BILBOOKENTRY.T_DIRECTION = "+ Direction +
                   " AND BILBOOKENTRY.T_FACTURAID = BF.T_FACTURAID(+) " +
                   " AND BF.T_SOURCEFACTURAID = BFSRC.T_FACTURAID(+)" +
                   " AND BF.t_Assignment = " + OBJSFASSIGNMENT_RECALC + // Пересчет
                   " AND " + acssql_query ; 

       if(PrnDepartment != 0)
           sqlString = sqlString + " AND BILBOOKENTRY.T_DEPARTMENT = " + PrnDepartment;
       end;
     end;
     
     cmd2 = RsdCommand( sqlString );
     cmd2.NullConversion = true;
     rs = RsdRecordset( cmd2 );

     i = 0;
     while( rs.moveNext() )
       PrintAddBilBookDistr(i+1, rs, @TotalAmount18, @TotalNDSAmount18, @TotalAmount10, @TotalNDSAmount10, @TotalAmount0, @TotalAmount20, @TotalNDSAmount20, @TotalFree, @TotalWithNDS , fromdate);
       i = i + 1;
     end;

   end;

  if ((BeginDate <= fromdate) AND (fromdate <= EndDate))
     PrintFTableDistr(TotalAmount18, TotalNDSAmount18, TotalAmount10, TotalNDSAmount10, TotalAmount0, TotalAmount20, TotalNDSAmount20, TotalFree, TotalWithNDS );

     if(FIO_1 == "")
       FIO_1 = "__________________";
     end;

     Rep.AddPrintCell( Dolz_1 + " _______________     " + FIO_1, Rep.GetHeaderWidth(), 0, "l", REP_ELEM_STR);
     Rep.AddStr();   
     Rep.AddPrintCell(SubStr(EmptyStr,1, strlen(Dolz_1)*2 )+"(подпись)              (ф.и.о.)  ", Rep.GetHeaderWidth(), 0, "l:ex_FS(t)", REP_ELEM_STR);  
     Rep.AddStr();   

     Rep.AddPrintCell( "Индивидуальный предприниматель " + "  _______________ " + "  ____________________", Rep.GetHeaderWidth(), 0, "l" , REP_ELEM_STR);
     Rep.AddStr();   
     Rep.AddPrintCell( "                                                      (подпись)                   (ф.и.о.)  ", Rep.GetHeaderWidth(), 0, "l:ex_FS(t)", REP_ELEM_STR); //
     Rep.AddStr();                                                         

     Rep.AddPrintCell( "Реквизиты свидетельства о государственной ", Rep.GetHeaderWidth(), 0, "l", REP_ELEM_STR);
     Rep.AddStr();   
     Rep.AddPrintCell( "регистрации индивидуального предпринимателя " + " _____________________________ ", Rep.GetHeaderWidth(), 0, "l", REP_ELEM_STR);
     Rep.AddStr();   

     Rep.AddPrintCell( "_______________________", Rep.GetHeaderWidth(), 0, "l", REP_ELEM_STR);
     Rep.AddStr();   

     Rep.AddPrintCell( "* До завершения расчетов по товарам (работам, услугам), отгруженным (выполненным, оказанным) до 1 января 2004 г.", Rep.GetHeaderWidth(), 0, "l", REP_ELEM_STR);
     Rep.AddStr();   
   end;
   return 0;
end;

private macro  PrintAllAddBBookDistr(BBook)
  var sqlString, rs; 
  var fromdate: date;

  sqlString = "SELECT DISTINCT annuldate FROM  (" +
              "SELECT BILBOOKENTRY.T_ANNULDATE as annuldate FROM DBILBOOKENTRY_DBT BILBOOKENTRY " + acssql_from +
              " WHERE BILBOOKENTRY.T_REGDATE BETWEEN to_date('" + date1 +
     "', 'dd.mm.yyyy') AND to_date( '"+ date2 +"', 'dd.mm.yyyy') AND BILBOOKENTRY.T_DIRECTION = "+ Direction +
     " AND BILBOOKENTRY.T_BOOKID = " + BookID +" AND BILBOOKENTRY.T_ANNULENTRY <> 0 " +
     " AND " + acssql_query ;

     if(PrnDepartment != 0)
         sqlString = sqlString + " AND BILBOOKENTRY.T_DEPARTMENT = " + PrnDepartment;
     end;

     sqlString = sqlString + 
     " UNION  SELECT   BILBOOKENTRY.t_regdate as annuldate FROM DBILBOOKENTRY_DBT BILBOOKENTRY"  + acssql_from + 
     "        WHERE BILBOOKENTRY.t_regdate > to_date( '"+ date2 +"', 'dd.mm.yyyy')"             +
     "        AND BILBOOKENTRY.T_DIRECTION = "+ Direction +
     "        AND BILBOOKENTRY.T_BOOKID = " + BookID +
     "        AND " + acssql_query;
     if(PrnDepartment != 0)
         sqlString = sqlString + " AND BILBOOKENTRY.T_DEPARTMENT = " + PrnDepartment;
     end;

     if(date2 >= date(01,01,2014))
       sqlString = sqlString +  " UNION " ;

       sqlString = sqlString +" SELECT   BILBOOKENTRY.t_regdate as annuldate " +
                   " FROM DBILBOOKENTRY_DBT BILBOOKENTRY, DBILFACTURA_DBT BF "; 
       sqlString = sqlString + acssql_from +                   
                   " WHERE  " +
     //              "    BILBOOKENTRY.T_REGDATE = to_date( '"+fromdate+"', 'dd.mm.yyyy') AND " +
                   "    (( BILBOOKENTRY.T_REGDATE BETWEEN to_date( '"+date1+"', 'dd.mm.yyyy') AND to_date( '"+date2+"', 'dd.mm.yyyy')   "+
                   "           AND (BF.T_TOTALWITHNDS <= 0 OR BF.T_REGDATE BETWEEN to_date( '"+date1+"', 'dd.mm.yyyy') AND to_date( '"+date2+"', 'dd.mm.yyyy')) )"+
                   "     OR ( BILBOOKENTRY.T_REGDATE > to_date( '"+date2+"', 'dd.mm.yyyy')  )"
                   "    ) " +
                   " AND BILBOOKENTRY.T_BOOKID = "+ BookID +
                   " AND BILBOOKENTRY.T_DIRECTION = "+ Direction +
                   " AND BILBOOKENTRY.T_FACTURAID = BF.T_FACTURAID(+) " +
                   " AND BF.t_Assignment = " + OBJSFASSIGNMENT_RECALC + // Пересчет
                   " AND " + acssql_query ; 

       if(PrnDepartment != 0)
           sqlString = sqlString + " AND BILBOOKENTRY.T_DEPARTMENT = " + PrnDepartment;
       end;
     end;

     sqlString = sqlString + 
          " ) ORDER BY annuldate" ;

  rs = RsdRecordset( sqlString );

  while( rs.moveNext() )
    fromdate = rs.value("annuldate" );
    PrintAddBBookDistr(BBook, fromdate);
    AddListNum = AddListNum + 1;
  end;
end;

/*-Отчет "Дополнительные листы книги покупок"-----------------------------------------*/
private macro PrintAddBilBookObt( rs : RsdRecordset, TotalAmount18 : @money, TotalNDSAmount18 : @money, TotalAmount10 : @money, TotalNDSAmount10 : @money, TotalAmount0 : @money, TotalAmount20 : @money, TotalNDSAmount20 : @money, TotalFree : @money, AllTotalWithNDS : @money, inum, fromdate: date )
  FILE bilfactura("bilfactura.dbt") key 4;
  FILE bilfacturaSecond("bilfactura.dbt") key 4;
  FILE bilfagentpt("bilfagentpt.dbt") key 0;
  record fi ( fininstr );

  var AnnulEntry                ;
  var BookEntryID      : integer;
  var EntryNumber      : string;
  var FacturaID        : integer;  
  var CDate            : string;
  var EntryDate        : date;
  var FacturaNumber    : string;
  var SrcFacturaNumber : string;
  var SrcCDate         : string;
  var CDate_Corr       : string;
  var SrcCDate_Corr    : string;
  var Number_Corr      : string;
  var SrcNumber_Corr   : string;
  var FacturaNumberIsp : string;
  var FacturaCDateIsp  : string;
  var SupplierName     : string;
  var SupplierINN      : string;
  var Country          : string;
  var GTDNum           : string;
  var CountryGTD       : string;
  var PayDate          : date;
  var PayNum           : string;
  var TotalWithNDS     : money;
  var NDSRate;
  var IsSupplierAgent  : string;
  var IsReceiverAgent  : string;
  var AgentName        : string;
  var AgentINN         : string;
  var SFType           : integer;
  var TotalWithNdsCurr;  
  var rst : RsdRecordset;
  var sqlString = "";
  var FIID = NATCUR;

  var ZeroDate = date( 0, 0, 0 );
  var FcDirection = Direction; // по умолчанию направление СФ совпадает с направлением ЗК
  var Amount18 : money, NDSAmount18 : money, Amount10 : money, NDSAmount10 : money, Amount0 : money, NDSAmount0 : money, Amount20 : money, NDSAmount20 : money, Free : money ;
  var strAmount18, strNDSAmount18, strAmount10, strNDSAmount10, strAmount0, strNDSAmount0, strAmount20, strNDSAmount20, strFree ;
  Amount18 = $0;  NDSAmount18 = $0; Amount10 = $0;  NDSAmount10 = $0; Amount0 = $0; NDSAmount0 = $0; Amount20 = $0;  NDSAmount20 = $0; Free = $0;
  var Assignment = 0;
  var RevertSum = false;
  var num, i, IsCDateNULL, IsFacturaNumberNULL, IsTotalWithNDSNULL, IsNDSRateNULL, IsCountyNULL, IsGTDNumNULL, IsAssignmentNULL, IsSrcFacturaNumberNULL, IsSrcCDateNULL, IsFcDirectionNULL; 

  
  rs.value("T_CREATIONDATE"  , IsCDateNULL           );
  rs.value("T_FACTURANUMBER" , IsFacturaNumberNULL   );
  rs.value("T_TOTALWITHNDS"  , IsTotalWithNDSNULL    );
  rs.value("T_ASSIGNMENT"    , IsAssignmentNULL      );
  rs.value("SrcFacturaNumber", IsSrcFacturaNumberNULL);
  rs.value("SrcCreationDate" , IsSrcCDateNULL        );
  rs.value("T_DIRECTION"     , IsFcDirectionNULL     );


//  IsAnnul = rs.value("IsAnnul");

  BookEntryID    = rs.value("T_BOOKENTRYID"     );    
  EntryNumber    = rs.value("T_ENTRYNUMBER"     );    
  if(EntryNumber == StrFor(1))
    EntryNumber = ""
  end;

  FacturaID      = rs.value("T_FACTURAID"     );    

  if(IsCDateNULL != true)
    CDate        = date(rs.value("T_CREATIONDATE"  ));
  else
    CDate        =date(0,0,0);
  end;

  if(IsFacturaNumberNULL != true)
    FacturaNumber = rs.value("T_FACTURANUMBER" );
  else
    FacturaNumber = "";
  end;

  if(IsAssignmentNULL != true)
    Assignment = rs.value("T_ASSIGNMENT" );
  else
    Assignment = 0;
  end;

  if(IsFcDirectionNULL != true)
    FcDirection = rs.value("T_DIRECTION");
  else
    FcDirection = Direction;
  end;

  EntryDate    = rs.value("t_ENTRYDATE"  );
  AnnulEntry   = rs.value("T_ANNULENTRY"      );    

  PayDate      = rs.value("T_PAYDATE"    );
  FIID         = rs.value("BBFIID"       ); 


  IsSupplierAgent = rs.value("IsSupplierAgent");
  IsReceiverAgent = rs.value("IsReceiverAgent");

  if((IsReceiverAgent == "X") AND (FacturaID > 0))
    bilfagentpt.facturaID = FacturaID;
    bilfagentpt.PtKind    = 2;
    if(getEQ(bilfagentpt))
      SupplierName = bilfagentpt.Name;
      SupplierINN  = bilfagentpt.INN ;
    else
      SupplierName = rs.value("T_SUPPLIERNAME"  );   
      SupplierINN  = rs.value("T_SUPPLIERINN"   );
    end;
  else
    SupplierName = rs.value("T_SUPPLIERNAME"  );
    SupplierINN  = rs.value("T_SUPPLIERINN"   );
  end;

  SFType      = rs.value("SFTYPEID");

  AgentName = "";
  AgentINN  = "";

  if((IsSupplierAgent == "X") AND ( SFType != BILTYPE_SF_POSR))
    AgentName = rs.value("T_SUPPLIERNAME"  );
    AgentINN  = rs.value("T_SUPPLIERINN"   );
  end;

  PayNum = "";
  PayDate = BFGetMaxDateDocBookEntry(BookEntryID, PayNum);

  var SFacturaID = 0;                                                               
  if(Assignment == OBJSFASSIGNMENT_RECALC) // Для СФ с назначением "пересчет": Список дат и номеров исходных СФ 
    SFacturaID = rs.value("srcFacturaID");
  elif(Assignment == OBJSFASSIGNMENT_MODIFY) // Для СФ с назначением "исправление"
    bilfactura.facturaID = rs.value("srcFacturaID");
    if(getEQ(bilfactura))
      if(bilfactura.Assignment == OBJSFASSIGNMENT_RECALC)  // если СФ имеет назначение "пересчет"
        SFacturaID = bilfactura.SOURCEFACTURAID;
      else // иначе берем дату и номер найденного СФ
        SrcFacturaNumber = bilfactura.FacturaNumber;       
        SrcCDate         = bilfactura.CreationDate;        
      end;  
    end;                                     
  else                    
    SrcFacturaNumber = FacturaNumber;   
    SrcCDate         = CDate; 
  end; 

  if(SFacturaID > 0) 
    bilfactura.facturaID = SFacturaID;
    if(getEQ(bilfactura))
        SrcFacturaNumber = bilfactura.FacturaNumber;       
        SrcCDate         = bilfactura.CreationDate;        
    end;                                     
  end;
        

  SrcNumber_Corr = "";
  SrcCDate_Corr = "";
  if(Assignment == OBJSFASSIGNMENT_MODIFY) // Заполняется только для СФ с назначением "Исправление"
    bilfactura.facturaID = rs.value("srcFacturaID");
    if(getEQ(bilfactura))
      if(bilfactura.Assignment != OBJSFASSIGNMENT_RECALC)  // и при этом SourceFacturaID не ссылается на СФ с назначением "Пересчет"
        SrcNumber_Corr = rs.value("CorrectionNum");
        SrcCDate_Corr  = date(rs.value("t_CreationDate"));
      end;  
    end;                                     
  end;

  Number_Corr = "";
  CDate_Corr  = "";

  FacturaNumberIsp = "";
  FacturaCDateIsp  = "";

  if(Assignment == OBJSFASSIGNMENT_RECALC) // Для СФ с назначением "пересчет": номер и дата СФ.
    Number_Corr = FacturaNumber;
    CDate_Corr  = CDate;        
  elif(Assignment == OBJSFASSIGNMENT_MODIFY) // Для СФ с назначением "исправление"
   bilfactura.facturaID = rs.value("srcFacturaID");
   if(getEQ(bilfactura))
     if(bilfactura.Assignment == OBJSFASSIGNMENT_RECALC)  //если SourceFacturaID ссылается на СФ с назначением "Пересчет"
       // поле заполняется номером и датой исходного СФ(Пересчет)
       Number_Corr = bilfactura.FacturaNumber;       
       CDate_Corr  = bilfactura.CreationDate;        

       FacturaNumberIsp = rs.value("CorrectionNum");       
       FacturaCDateIsp  = date(rs.value("t_CreationDate"));
     end;  
   end;                                     
  else
    Number_Corr = CDate_Corr = "";
  end;


  if(IsTotalWithNDSNULL != true)
   TotalWithNDS = rs.value("T_TOTALWITHNDS"  );
  else 
   TotalWithNDS = $0;
  end;
 
 

  if(BookEntryID != 0) 
    sqlString = "   SELECT T_NDSRATE, SUM(T_AMOUNT), SUM(T_NDSAMOUNT), SUM(T_AMOUNTWITHNDS)" +
                  " FROM DBKENTSUM_DBT  WHERE T_BOOKENTRYID = " + BookEntryID +" AND T_FIID = 0 GROUP BY T_NDSRATE" ;

    rst = RsdRecordset( sqlString );

    while( rst.moveNext() )
       rst.value("T_NDSRATE",IsNDSRateNULL );
     
       if(IsNDSRateNULL != true)
         NDSRate = rst.value("T_NDSRATE" );

         if (NDSRate == -1)
           Free = rst.value("SUM(T_AMOUNT)");
         end;

         if(NDSRate == 18)
           Amount18 = rst.value("SUM(T_AMOUNT)"  );
           NDSAmount18 = rst.value("SUM(T_NDSAMOUNT)");
         end;

         if(NDSRate == 10)
           Amount10 = rst.value("SUM(T_AMOUNT)"  );
           NDSAmount10 = rst.value("SUM(T_NDSAMOUNT)");
         end;

         if(NDSRate == 0)
           Amount0 = rst.value("SUM(T_AMOUNT)"  );
         end;

         if(NDSRate == 20)
           Amount20 = rst.value("SUM(T_AMOUNT)"  );
           NDSAmount20 = rst.value("SUM(T_NDSAMOUNT)");
         end;
       else
         Free = rst.value("SUM(T_AMOUNT)");
       end;
    end;
  end;                 

  if(Assignment == 2) // Аванс
      Amount0  = $0;
      Amount18 = $0; 
      Amount10 = $0; 
      Amount20 = $0; 
      Free = $0; 
  end;

  if(NOT ((Assignment == 5) AND (FcDirection != Direction))) // Пересчет
     Free        = - Free        ;
     Amount18    = - Amount18    ;
     NDSAmount18 = - NDSAmount18 ;            
     Amount10    = - Amount10    ;
     NDSAmount10 = - NDSAmount10 ; 
     Amount0     = - Amount0     ;
     Amount20    = - Amount20    ;
     NDSAmount20 = - NDSAmount20 ;
     TotalWithNDS = -TotalWithNDS;
  end;


    sqlString = " SELECT DISTINCT C.T_CODENUM3 AS COUNTRY, DECODE(F.T_GTDNUMBER,chr(1),NULL,F.T_GTDNUMBER ) AS GTDNUMBER FROM DBILFACTURALINE_DBT F, DCOUNTRY_DBT C " + 
                " WHERE F.T_FACTURAID  = " + FacturaID + 
                " AND F.T_COUNTRY != CHR(1) "+
                " AND UPPER(F.T_COUNTRY) =  UPPER(C.T_NAME)"
                " ORDER BY COUNTRY "; 

  rst = RsdRecordset( sqlString );

  CountryGTD = "";
  GTDNum = "";
    while( rst.moveNext() )
      rst.value("COUNTRY" , IsCountyNULL);
      rst.value("GTDNUMBER" , IsGTDNumNULL);

      if( IsCountyNULL != true )
        Country = rst.value("COUNTRY" );
      else
        Country = "";
      end;

      if( IsGTDNumNULL != true )
        GTDNum = rst.value("GTDNUMBER" );
      else
        GTDNum = "";
      end;

      if(Country != "")
       if(CountryGTD != "")
         CountryGTD = CountryGTD + ", "
       end;

       CountryGTD = CountryGTD + Country;

       if(GTDNum != "")
         CountryGTD = CountryGTD + " (" +GTDNum +")";
       end;
      end;
    end;

  if(Assignment == 2)
    Amount0  = $0;
    Amount18 = $0; 
    Amount10 = $0; 
    Amount20 = $0; 
    Free = $0; 
  end;


  if(AnnulEntry == 0)
    TotalAmount18     =  TotalAmount18     -  Amount18     ;
    TotalNDSAmount18  =  TotalNDSAmount18  -  NDSAmount18  ;
    TotalAmount10     =  TotalAmount10     -  Amount10     ;
    TotalNDSAmount10  =  TotalNDSAmount10  -  NDSAmount10  ;
    TotalAmount0      =  TotalAmount0      -  Amount0      ;
    TotalAmount20     =  TotalAmount20     -  Amount20     ;
    TotalNDSAmount20  =  TotalNDSAmount20  -  NDSAmount20  ;
    TotalFree         =  TotalFree         -  Free         ;
    AllTotalWithNDS   =  AllTotalWithNDS   -  TotalWithNDS  ; 
  else
    TotalAmount18     =  TotalAmount18     +  Amount18     ;
    TotalNDSAmount18  =  TotalNDSAmount18  +  NDSAmount18  ;
    TotalAmount10     =  TotalAmount10     +  Amount10     ;
    TotalNDSAmount10  =  TotalNDSAmount10  +  NDSAmount10  ;
    TotalAmount0      =  TotalAmount0      +  Amount0      ;
    TotalAmount20     =  TotalAmount20     +  Amount20     ;
    TotalNDSAmount20  =  TotalNDSAmount20  +  NDSAmount20  ;
    TotalFree         =  TotalFree         +  Free         ;
    AllTotalWithNDS   =  AllTotalWithNDS   +  TotalWithNDS  ; 
  end;

  if(Assignment == 2)
      strAmount0  = "";
      strAmount18 = ""; 
      strAmount10 = ""; 
      strAmount20 = ""; 
      strFree = ""; 
  else
      strAmount0  = Amount0;
      strAmount18 = Amount18; 
      strAmount10 = Amount10; 
      strAmount20 = Amount20; 
      strFree     = Free    ; 
  end;

  var strEntryDate;

  if(Assignment == 2)
     strEntryDate = "";
  else
    if(EntryDate == ZeroDate)
      strEntryDate = "";
    else
      strEntryDate = EntryDate;
    end;
  end;

  var strDate ; 
  if((PayDate == NULL) OR (PayDate == ZeroDate))
    strDate = "";
  else
    strDate = PayDate;
  end;

  var FICodeName = "";
  if( FIID != ALLFININSTR )
    if( ПолучитьФинИн( FIID, fi ) == 0 )
      FICodeName = fi.Name + ", " + fi.ISO_Number;
    end;
  end;

  var scString = "SELECT DISTINCT BILOPRCODE.T_CODE FROM DBILOPRCODE_DBT BILOPRCODE, DBILFACTURALINE_DBT BILFACTURALINE WHERE BILFACTURALINE.T_FACTURAID = " + FacturaID;
      scString = scString + " AND BILOPRCODE.T_ID = BILFACTURALINE.T_OPRCODEID ORDER BY BILOPRCODE.T_CODE ASC";

  var coders = RsdRecordset(scString);

  var Oper_Code = "";

  while(coders.moveNext())
      if(Oper_Code == "")
              Oper_Code = coders.value("T_CODE");
      else
              Oper_Code = Oper_Code + ", " + coders.value("T_CODE");
      end;
  end;


  if (((BeginDate <= fromdate) AND (fromdate <= EndDate)) OR (Assignment == OBJSFASSIGNMENT_RECALC))
    Rep.AddPrintCell( inum,                                      0, NULL, "c" );  // 1
    Rep.AddPrintCell( Oper_Code,                                 0, NULL, "c" );  // 2
    Rep.AddPrintCell( SrcCDate + "\n" +SrcFacturaNumber,         0, NULL, "c" );  // 3
    Rep.AddPrintCell( SrcCDate_Corr + "\n" + SrcNumber_Corr,     0, NULL, "c" );  // 4
    Rep.AddPrintCell( Number_Corr + "\n" + CDate_Corr,           0, NULL, "c" );  // 5
    Rep.AddPrintCell( FacturaNumberIsp + "\n" + FacturaCDateIsp, 0, NULL, "c" );  // 6
    Rep.AddPrintCell( strDate +"\n"+ PayNum,                     0, NULL, "c" );  // 7
    Rep.AddPrintCell( strEntryDate,                              0, NULL, "c" );  // 8
    Rep.AddPrintCell( SupplierName,                              0, NULL, "c" );  // 9
    Rep.AddPrintCell( SupplierINN,                               0, NULL, "c" );  // 10
    Rep.AddPrintCell( AgentName,                                 0, NULL, "c" );  // 11 
    Rep.AddPrintCell( AgentINN ,                                 0, NULL, "c" );  // 12
    Rep.AddPrintCell( GTDNum,                                    0, NULL, "c" );  // 13
    Rep.AddPrintCell( FICodeName,                                0, NULL, "c" );  // 14
    Rep.AddPrintCell( TotalWithNDS ,                             0, NULL, "r" );  // 15
    Rep.AddPrintCell( NDSAmount18 + NDSAmount10 + NDSAmount20,   0, NULL, "r" );  // 16

    ///////////////////////////////////
    Rep.AddStr();
  end;

end;

private macro  PrintAddBBookObt(BBook, fromdate)
   var TemplateName = "", sqlString, rs, count, i,cmd, cmd2;
   record Party(party);
/*   var TotalAmount18 : money, TotalNDSAmount18 : money, TotalAmount10 : money, TotalNDSAmount10 : money, TotalAmount0 : money, TotalAmount20 : money, TotalNDSAmount20 : money, TotalFree : money , TotalWithNDS : money ;*/
   var EmptyStr = "                                                                                                   ";
   var period = "", year ; 
/*  TotalAmount18 = $0; TotalNDSAmount18 = $0; TotalAmount10 = $0; TotalNDSAmount10 = $0; TotalAmount0 = $0; TotalAmount20 = $0; TotalNDSAmount20 = $0; TotalFree = $0; TotalWithNDS = $0;*/

  ПолучитьСубъекта ({OurBank}, Party ); 

  period = GetPeriod(date1, date2, year );

  if ((BeginDate <= fromdate) AND (fromdate <= EndDate))

    AddListNumber = AddListNumber + 1;                              

    if(FirstAddList == true)
      Rep.GetCurSheet().SetSheetName( "Дополнительный лист " + (AddListNumber));
      FirstAddList = false;
    else
      Rep.AddNewSheetBreak("Дополнительный лист " + (AddListNumber), Table2);
    end;
  end;

  if ((BeginDate <= fromdate) AND (fromdate <= EndDate))
    Rep.AddPrintCell( "ДОПОЛНИТЕЛЬНЫЙ ЛИСТ " + (AddListNum), Rep.GetHeaderWidth(), 0, "c:" + FontTitle, REP_ELEM_STR);
    Rep.AddStr();
    Rep.AddPrintCell( " ", Rep.GetHeaderWidth(), 0, "l", REP_ELEM_STR);
    Rep.AddStr();
    Rep.AddPrintCell( "ПОКУПАТЕЛЬ: " + Party.Name, Rep.GetHeaderWidth(), 0, "l", REP_ELEM_STR);
    Rep.AddStr();   
    Rep.AddPrintCell( "Идентификационный номер и код причины постановки на учет налогоплательщика-покупателя: "+ПолучитьКодСубъекта( {OurBank}, PTCK_INN ), Rep.GetHeaderWidth(), 0, "l", REP_ELEM_STR);
    Rep.AddStr();

    if((period == NULL) OR (period == ""))
      Rep.AddPrintCell( "Налоговый период, год с "+ string(date1) + " по "+string(date2), Rep.GetHeaderWidth(), 0, "l", REP_ELEM_STR);
    else
      Rep.AddPrintCell( "Налоговый период, год "+ period + " "+year, Rep.GetHeaderWidth(), 0, "l" , REP_ELEM_STR);
    end;


    Rep.AddStr();
    Rep.AddPrintCell( "Дополнительный лист составлен " + string(fromdate), Rep.GetHeaderWidth(), 0, "l", REP_ELEM_STR);

    Rep.AddStr();
    Rep.AddPrintCell( " ", Rep.GetHeaderWidth(), 0, "l", REP_ELEM_STR);
    Rep.AddStr();

    PrintTotalTableObt(TotalAmount18, TotalNDSAmount18, TotalAmount10, TotalNDSAmount10, TotalAmount0, TotalAmount20, TotalNDSAmount20, TotalFree, TotalWithNDS );
  end;
  if(0)                              
  else
     sqlString = " SELECT DISTINCT BILBOOKENTRY.T_BOOKENTRYID, BILBOOKENTRY.T_ANNULENTRY, BILBOOKENTRY.T_ENTRYNUMBER, BILBOOKENTRY.T_FACTURAID, BILBOOKENTRY.t_SupplierName, BILBOOKENTRY.t_SupplierINN, BILBOOKENTRY.t_PayDate, BILBOOKENTRY.t_EntryDate, BF.t_CreationDate, BF.t_FacturaNumber, BF.t_TotalWithNDS, BF.t_Assignment, bf.t_Direction, NVL(BFSRC.t_FacturaNumber,chr(1)) AS SrcFacturaNumber, BFSRC.t_CreationDate AS SrcCreationDate, BILBOOKENTRY.T_FIID As BBFIID, " +
                 " BILBOOKENTRY.T_ISSUPPLIERAGENT As IsSupplierAgent, BILBOOKENTRY.T_ISRECEIVERAGENT AS IsReceiverAgent, NVL(BF.T_SFTYPEID, 0) As SFTYPEID " +
                 " FROM DBILBOOKENTRY_DBT BILBOOKENTRY, DBILFACTURA_DBT BF, DBILFACTURA_DBT BFSRC" + acssql_from +
                 " WHERE (( BILBOOKENTRY.T_REGDATE BETWEEN to_date( '"+date1+"', 'dd.mm.yyyy') AND to_date( '"+date2+"', 'dd.mm.yyyy') " +
                 " AND BILBOOKENTRY.T_ANNULENTRY <> 0  AND BILBOOKENTRY.T_ANNULDATE = to_date( '"+fromdate+"', 'dd.mm.yyyy')) " +
                 " OR (T_BOOKENTRYID IN(SELECT T_ANNULENTRY  FROM DBILBOOKENTRY_DBT WHERE T_ANNULENTRY <>0 " + 
                 "                      AND T_REGDATE BETWEEN to_date( '"+date1+"', 'dd.mm.yyyy') AND to_date( '"+date2+"', 'dd.mm.yyyy') " + 
                 "                      AND T_ANNULDATE = to_date( '"+fromdate+"', 'dd.mm.yyyy'))) "+
                 " OR ( BILBOOKENTRY.T_REGDATE > to_date( '"+date2+"', 'dd.mm.yyyy') AND BILBOOKENTRY.T_REGDATE = to_date( '"+fromdate+"', 'dd.mm.yyyy')   )"
                 "    ) " +
                 " AND BILBOOKENTRY.T_BOOKID = "+ BookID +
                 " AND BILBOOKENTRY.T_DIRECTION = "+ Direction +
                 " AND BILBOOKENTRY.T_FACTURAID = BF.T_FACTURAID(+) " +
                 " AND BF.T_SOURCEFACTURAID = BFSRC.T_FACTURAID(+)" +
                 " AND " + acssql_query; 

     if(PrnDepartment != 0)
         sqlString = sqlString + " AND BILBOOKENTRY.T_DEPARTMENT = " + PrnDepartment;
     end;

     if(date2 >= date(01,01,2014))
       sqlString = sqlString +  " UNION " ;

       sqlString = " SELECT DISTINCT BILBOOKENTRY.T_BOOKENTRYID, BILBOOKENTRY.T_ANNULENTRY, BILBOOKENTRY.T_ENTRYNUMBER, BILBOOKENTRY.T_FACTURAID, BILBOOKENTRY.t_SupplierName, BILBOOKENTRY.t_SupplierINN, BILBOOKENTRY.t_PayDate, BILBOOKENTRY.t_EntryDate, BF.t_CreationDate, BF.t_FacturaNumber, BF.t_TotalWithNDS, BF.t_Assignment, bf.t_Direction, NVL(BFSRC.t_FacturaNumber,chr(1)) AS SrcFacturaNumber, BFSRC.t_CreationDate AS SrcCreationDate, BILBOOKENTRY.T_FIID As BBFIID, " +
                   " BILBOOKENTRY.T_ISSUPPLIERAGENT As IsSupplierAgent, BILBOOKENTRY.T_ISRECEIVERAGENT AS IsReceiverAgent, NVL(BF.T_SFTYPEID, 0) As SFTYPEID " +
                   " FROM DBILBOOKENTRY_DBT BILBOOKENTRY, DBILFACTURA_DBT BF, DBILFACTURA_DBT BFSRC"; 
       sqlString = sqlString + acssql_from +                   
                   " WHERE  " +
                   "    BILBOOKENTRY.T_REGDATE = to_date( '"+fromdate+"', 'dd.mm.yyyy')  AND " + 
                   "     (( BILBOOKENTRY.T_REGDATE BETWEEN to_date( '"+date1+"', 'dd.mm.yyyy') AND to_date( '"+date2+"', 'dd.mm.yyyy') "+
                   "           AND BF.T_REGDATE > to_date( '"+date2+"', 'dd.mm.yyyy')) "+
                   "     OR ( BILBOOKENTRY.T_REGDATE > to_date( '"+date2+"', 'dd.mm.yyyy')) "+
                   "    ) " +
                   " AND BILBOOKENTRY.T_BOOKID = "+ BookID +
                   " AND BILBOOKENTRY.T_DIRECTION = "+ Direction +
                   " AND BILBOOKENTRY.T_FACTURAID = BF.T_FACTURAID(+) " +
                   " AND BF.T_SOURCEFACTURAID = BFSRC.T_FACTURAID(+)" +
                   " AND BF.t_Assignment = " + OBJSFASSIGNMENT_RECALC + // Пересчет
                   " AND " + acssql_query ; 

       if(PrnDepartment != 0)
           sqlString = sqlString + " AND BILBOOKENTRY.T_DEPARTMENT = " + PrnDepartment;
       end;
     end;


     cmd2 = RsdCommand( sqlString );
     cmd2.NullConversion = true;
     rs = RsdRecordset( cmd2 );

     i = 0;
     while( rs.moveNext() )
       PrintAddBilBookObt( rs, @TotalAmount18, @TotalNDSAmount18, @TotalAmount10, @TotalNDSAmount10, @TotalAmount0, @TotalAmount20, @TotalNDSAmount20, @TotalFree, @TotalWithNDS, i+1, fromdate );
       i = i + 1;
     end;

   end;

   if ((BeginDate <= fromdate) AND (fromdate <= EndDate))
     PrintFTableObt(TotalAmount18, TotalNDSAmount18, TotalAmount10, TotalNDSAmount10, TotalAmount0, TotalAmount20, TotalNDSAmount20, TotalFree, TotalWithNDS );

     if(FIO_1 == "")
       FIO_1 = "__________________";
     end;

     Rep.AddPrintCell( Dolz_1 + " _______________     " + FIO_1, Rep.GetHeaderWidth(), 0, "l", REP_ELEM_STR);
     Rep.AddStr();   
     Rep.AddPrintCell(SubStr(EmptyStr,1, strlen(Dolz_1)*2 )+"(подпись)              (ф.и.о.)  ", Rep.GetHeaderWidth(), 0, "l:ex_FS(t)", REP_ELEM_STR);  
     Rep.AddStr();   

     Rep.AddPrintCell( "Индивидуальный предприниматель " + "  _______________ " + "  ____________________", Rep.GetHeaderWidth(), 0, "l" , REP_ELEM_STR);
     Rep.AddStr();   
     Rep.AddPrintCell( "                                                      (подпись)                   (ф.и.о.)  ", Rep.GetHeaderWidth(), 0, "l:ex_FS(t)", REP_ELEM_STR); //
     Rep.AddStr();                                                         

     Rep.AddPrintCell( "Реквизиты свидетельства о государственной ", Rep.GetHeaderWidth(), 0, "l", REP_ELEM_STR);
     Rep.AddStr();   
     Rep.AddPrintCell( "регистрации индивидуального предпринимателя " + " _____________________________ ", Rep.GetHeaderWidth(), 0, "l", REP_ELEM_STR);
     Rep.AddStr();   

     Rep.AddPrintCell( "_______________________", Rep.GetHeaderWidth(), 0, "l", REP_ELEM_STR);
     Rep.AddStr();   

     Rep.AddPrintCell( "* До завершения расчетов по товарам (работам, услугам), отгруженным (выполненным, оказанным) до 1 января 2004 г.", Rep.GetHeaderWidth(), 0, "l", REP_ELEM_STR);
     Rep.AddStr();   

   end;
   return 0;
end;
 
private macro  PrintAllAddBBookObt(BBook)
  var sqlString, rs; 
  var fromdate: date;

  sqlString = "SELECT DISTINCT annuldate FROM  (" +
              "SELECT BILBOOKENTRY.T_ANNULDATE as annuldate FROM DBILBOOKENTRY_DBT BILBOOKENTRY " + acssql_from +
              "WHERE BILBOOKENTRY.T_REGDATE BETWEEN to_date('" + date1 +
     "', 'dd.mm.yyyy') AND to_date( '"+ date2 +"', 'dd.mm.yyyy') AND BILBOOKENTRY.T_DIRECTION = "+ Direction +
     " AND " + acssql_query ;
     if(PrnDepartment != 0)
         sqlString = sqlString + " AND BILBOOKENTRY.T_DEPARTMENT = " + PrnDepartment;
     end;
     sqlString = sqlString +
     " AND BILBOOKENTRY.T_BOOKID = " + BookID +" AND BILBOOKENTRY.T_ANNULENTRY <> 0 " +
     " UNION  SELECT   BILBOOKENTRY.t_regdate as annuldate FROM DBILBOOKENTRY_DBT BILBOOKENTRY "  + acssql_from +  
     "        WHERE BILBOOKENTRY.t_regdate > to_date( '"+ date2 +"', 'dd.mm.yyyy')"             +
     "        AND BILBOOKENTRY.T_DIRECTION = "+ Direction +
     "        AND BILBOOKENTRY.T_BOOKID = " + BookID +
     "        AND " + acssql_query ;
     if(PrnDepartment != 0)
         sqlString = sqlString + " AND BILBOOKENTRY.T_DEPARTMENT = " + PrnDepartment;
     end;
     if(date2 >= date(01,01,2014))
       sqlString = sqlString +  " UNION " ;

       sqlString = sqlString + " SELECT   BILBOOKENTRY.t_regdate as annuldate " +
                   " FROM DBILBOOKENTRY_DBT BILBOOKENTRY, DBILFACTURA_DBT BF "; 
       sqlString = sqlString + acssql_from +                   
                   " WHERE  " +
                   "     (( BILBOOKENTRY.T_REGDATE BETWEEN to_date( '"+date1+"', 'dd.mm.yyyy') AND to_date( '"+date2+"', 'dd.mm.yyyy') "+
                   "           AND BF.T_REGDATE > to_date( '"+date2+"', 'dd.mm.yyyy')) "+
                   "     OR ( BILBOOKENTRY.T_REGDATE > to_date( '"+date2+"', 'dd.mm.yyyy')) "+
                   "   )  " +
                   " AND BILBOOKENTRY.T_BOOKID = "+ BookID +
                   " AND BILBOOKENTRY.T_DIRECTION = "+ Direction +
                   " AND BILBOOKENTRY.T_FACTURAID = BF.T_FACTURAID(+) " +
                   " AND BF.t_Assignment = " + OBJSFASSIGNMENT_RECALC + // Пересчет
                   " AND " + acssql_query ; 

       if(PrnDepartment != 0)
           sqlString = sqlString + " AND BILBOOKENTRY.T_DEPARTMENT = " + PrnDepartment;
       end;
     end;

     sqlString = sqlString + " ) ORDER BY annuldate" ;

  rs = RsdRecordset( sqlString );

  while( rs.moveNext() )
    fromdate = rs.value("annuldate" );
    PrintAddBBookObt(BBook, fromdate);
    AddListNum = AddListNum + 1;
  end;
end;


/*-----------------------------------------------------------------------------------*/
MACRO PrintDocument3( ncopy:integer, pBookID, pDirection, pDolz_1, pFIO_1, pPrnDepartment, pBeginDate, pEndDate, pNumStr, pTypeBook):bool

  BookID         =  pBookID;      
  Direction      =  pDirection;   
  Dolz_1         =  pDolz_1;      
  FIO_1          =  pFIO_1;       
  PrnDepartment  =  pPrnDepartment;
  BeginDate      =  pBeginDate;    
  EndDate        =  pEndDate;      
  NumStr         =  pNumStr;       
  TypeBook       =  pTypeBook;     

  println("BookID         = ", BookID       , ";");
  println("Direction      = ", Direction    , ";");
  println("Dolz_1         = ", Dolz_1       , ";");
  println("FIO_1          = ", FIO_1        , ";");
  println("PrnDepartment  = ", PrnDepartment, ";");
  println("BeginDate      = ", BeginDate    , ";");
  println("EndDate        = ", EndDate      , ";");
  println("NumStr         = ", NumStr       , ";");
  println("TypeBook       = ", TypeBook     , ";");

  private var fgBank = fg_life_subject({OurBank});
  if ( ( fgBank.is_EXV ) or (fgBank.is_VUZ) or (fgBank.is_GEB) or (fgBank.is_NBS) )
     if (MsgBoxEx ( "Выпустить сводную Книгу Продаж?", MB_YES+MB_NO, IND_NO, "Режим выпуска Книги Продаж" )  == IND_YES )
        UnionBook = 1;
     else
        UnionBook = 0;
     end;
  end;

  ClearRecord(BILBOOK);
  BILBOOK.BookID = BookID;
  if(not GetEQ(BILBOOK))
    return false;
  end;

  //  TYPEBOOK_BASE
  //  TYPEBOOK_ADD 
  if (TypeBook == TYPEBOOK_BASE ) // основной      
    date1 = BeginDate;
    date2 = EndDate  ;
  else                            // дополнительный
    date1 = BILBOOK.OpenDate;     
    if(BILBOOK.CloseDate == date(0,0,0))
      date2 = {CurDate};
    else     
      date2 = BILBOOK.CloseDate;
    end;
  end;

  if(GetObjectRestriction(acssql_query, 111, {oper}, "BILBOOKENTRY", CNTX_BilBookEntry,"BILBOOKENTRY.DBT", acssql_from, true ))
    if(acssql_from != "")
      acssql_from = " , " +acssql_from + " ";
    end;

    AddListNum = 1;
    if(Direction == 1)
      Rep = CMakeReport(Table1);
      
      Rep.GetCurSheet().SetSheetName( "Книга");
      PrintBBookDistr(BILBOOK);
    else if(Direction == 2)
      Rep = CMakeReport(Table2);

      Rep.GetCurSheet().SetSheetName( "Книга");
      PrintBBookObt   (BILBOOK);
    end;
    end;

    Rep.SetMarginText(MARGIN_BC,  "Страница " + MARGIN_ENG_PAGE);

    // Печать дополнительных листов книги 
    if (TypeBook == TYPEBOOK_ADD  )
      if(Direction == 1) 
        PrintAllAddBBookDistr(BILBOOK);
      else if(Direction == 2)
        PrintAllAddBBookObt(BILBOOK);
      end;
      end;
    end;

    Rep.SetMarginText(MARGIN_BC,  "Страница " + MARGIN_ENG_PAGE +"+"+string(NumStr-1));
    Rep.PrintWinRep();
    Rep.SetZoomType( ZOOM_TYPE_A4L );// альбомная ориентация
    Rep.SetWinRepOutput( );
    Rep.ShowWinRep();
  end;
  return true;
END;





