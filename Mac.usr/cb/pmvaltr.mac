/**
 * Макрос скроллинга ордеров по передаче ценностей
 */

import globals, PaymInter, pmvlbuff, likepy, pm_tools;

private macro ShowError( Text:string, FldNumber:integer ):integer
  MsgBox( Text );
  return FldNumber + 1;
end;

private macro ShowYesNo( Text:string, FldNumber:integer ):integer
  if( MsgBoxEx( Text, MB_YES+MB_NO, IND_NO, "" ) != IND_YES )
    return FldNumber + 1;
  else
    return 0;
  end;
end;

/**
 * Проверка корректности заполнения разносок
 */
private macro _GetPmAmount( pi:TRecHandler ):money
  return pi.rec.PmAmount;
end;

private macro CheckDistribution():integer

  var payment:RsbPayment = RsbPayment( r_pmpaym.PaymentID );
  var dbPIList:TArray = payment.PIList(PRT_Debet ).AsTArray();
  var crPIList:TArray = payment.PIList(PRT_Credit).AsTArray();
  var pi:TRecHandler;

  for( pi, dbPIList )
    if( ( pi.rec.Account == r_pmpaym.ReceiverAccount ) and ( pi.rec.FIID == r_pmpaym.PayFIID ) )
      return ShowError( "Счет по дебету найден в списке счетов по кредиту", 0 );
    elif( not PM_IsBankAccount( pi.rec.Account, pi.rec.FIID, r_pmpaym.Chapter ) )
      return ShowError( string( "Счет дебета ", pi.rec.Account:f, " не является внутрибанковским" ), 0 );
    elif( not pi.rec.Amount )
      return ShowError( string( "Не задана сумма по дебету для счёта ", pi.rec.Account:f ), 0 );
    elif( pi.rec.FIID != r_pmpaym.BaseFIID )
      return ShowError( string( "Валюта счёта ", pi.rec.Account:f, " отлична от валюты ордера" ), 0 );
    end;
  end;

  for( pi, crPIList )
    if( ( pi.rec.Account == r_pmpaym.PayerAccount ) and ( pi.rec.FIID == r_pmpaym.FIID ) )
      return ShowError( "Счет по кредиту найден в списке счетов по дебету", 0 );
    elif( not PM_IsBankAccount( pi.rec.Account, pi.rec.FIID, r_pmpaym.Chapter ) )
      return ShowError( string( "Счет кредита ", pi.rec.Account:f, " не является внутрибанковским" ), 0 );
    elif( not pi.rec.Amount )
      return ShowError( string( "Не задана сумма по кредиту для счёта ", pi.rec.Account:f ), 0 );
    elif( pi.rec.FIID != r_pmpaym.BaseFIID )
      return ShowError( string( "Валюта счёта ", pi.rec.Account:f, " отлична от валюты ордера" ), 0 );
    end;
  end;

  var stat:integer = 0;
  if( dbPIList.size and ( arrSum( map( dbPIList, @_GetPmAmount ) ) != r_pmpaym.BaseAmount ) )
    stat = ShowYesNo( "Ошибка в распределении суммы. Сохранить?", 0 )
  end;
  if( (not stat) and crPIList.size and ( arrSum( map( crPIList, @_GetPmAmount ) ) != r_pmpaym.BaseAmount ) )
    stat = ShowYesNo( "Ошибка в распределении суммы. Сохранить?", 0 )
  end;

  return stat;

end;


/** Подсказка для списков, строящихся по статусу документа */
private const Hint_ByStatus   :string = "/*+PMVALTR_SCROLL FIRST_ROWS(200) LEADING(t pmprop pmrmprop oproper) INDEX(t dpmpaym_dbt_idx16) USE_NL(t pmprop pmrmprop oproper)*/";
/** Подсказка для списков, строящихся по символу шага */
private const Hint_ByStep     :string = "/*+PMVALTR_SCROLL FIRST_ROWS(200) LEADING(t oproper pmpaym pmprop pmrmprop) INDEX(t doprstep_dbt_idx10) USE_NL(t oproper pmpaym pmprop pmrmprop)*/";
/** Подсказка для списков, строящихся по дате значения */
private const Hint_ByValueDate:string = "/*+PMVALTR_SCROLL FIRST_ROWS(200) LEADING(t pmprop pmrmprop oproper) INDEX(pmpaym dpmpaym_dbt_idx11) USE_NL(t pmprop pmrmprop oproper)*/";
/** Подсказка для списков, строящихся по дате закрытия */
private const Hint_ByCloseDate:string = "/*+PMVALTR_SCROLL FIRST_ROWS(200) LEADING(t pmprop pmrmprop oproper) INDEX(pmpaym dpmpaym_dbt_idx15) USE_NL(t pmprop pmrmprop oproper)*/";

/**
 * Формирование подсказки для запроса построения скролинга
 * @param TableName Имя основной таблицы запроса
 * @param IndexNum Номер ключа, по которому строится скролинг
 * @param Hint Подсказка по умолчанию
 * @param ScrolSubKind Подвид скролинга
 * @param Symbol Символ шага для списков подготовленных
 * @return Сформированная подсказка
 */
macro УстановитьПодсказку( TableName:string, IndexNum:integer, Hint:string, ScrolSubKind:integer, Symbol:string ):string
  if( ( ScrolSubKind == PSSK_DEFER    ) or
      ( ScrolSubKind == PSSK_OPEN     ) or
      ( ScrolSubKind == PSSK_REJECTED_WORK ) )
    Hint = Hint_ByStatus;
  elif( ScrolSubKind == PSSK_STEP )
    hint = Hint_ByStep;
  elif( ( ScrolSubKind == PSSK_ALL    ) or
        ( ScrolSubKind == PSSK_CLOSED ) )
    var dtflt:PMScrolDateFltr = PMScrolDateFltr();
    if( dtflt.IsSet( DTFL_CLOSEDATE ) )
      return Hint_ByCloseDate;
    elif( dtflt.IsSet( DTFL_VALUEDATE ) )
      return Hint_ByValueDate;
    end;
  end;
  return Hint;
end;

/**
 * Инициализация нового документа
 */
macro Новый_документ():integer
  return 0;
end;

/**
 * Проверка документа при определённых действиях
 * @param Mode Вид действия
 * @return 0 - всё хорошо
           >0 - номер поля, что-то плохо
           CHANG_IMPORTANT,CHANG_NOTKEEP - изменения документа с операцией важные, сохранение запрещено
           CHANG_IMPORTANT - изменения документа с операцией неважные, сохранение возможно
 */

macro Проверить_Документ( Mode:integer ):integer

  var payment:RsbPayment = RsbPayment( r_pmpaym.PaymentID );              
  var dbPIList:TArray = payment.PIList(PRT_Debet ).AsTArray();            
  var crPIList:TArray = payment.PIList(PRT_Credit).AsTArray();            
  var SumDb, SumCr: money; //Gurin S. 09.03.2016 R-640771-2
  var pi:TRecHandler;                                                     
  var Order:RsbValueTransOrder = RsbValueTransOrder( r_pmpaym.PaymentID );

  /* Данные сервисов ввода изменились? */
  macro ServicesDataChanged():bool
    var Order:RsbValueTransOrder = RsbValueTransOrder( r_pmpaym.PaymentID );
    return ( Order.PIList(PRT_Debet).IsChanged
          or Order.PIList(PRT_Credit).IsChanged
          or Order.ValuableList.IsChanged );
  end;

  /* Проверки корректности при вводе/редактировании */
  if( ( Mode == OBJ_INSERT    ) or
      ( Mode == OBJ_INSNOTOPR ) or
      ( Mode == OBJ_UPDATE    ) )
   
    /*Подсчет сумм разноски для последующей проверки*/
    SumDb = 0;
    SumCr = 0;

   if (dbPIList.size > 0)
     for( pi, dbPIList)
       SumDb = SumDb + pi.rec.Amount;
     end;
   else 
     SumDb = r_pmpaym.Amount;
   end;

   if (crPIList.size > 0)
     for( pi, crPIList)
       SumCr = SumCr + pi.rec.Amount;
     end;
   else 
     SumCr = r_pmpaym.PayAmount;
   end;
 
    if( not trim( r_pmrmprop.Number ) )
      return ShowError( "Не задан номер документа", BBVL_PF_NUMBER );
    elif( r_pmrmprop.Date == date( 0, 0, 0 ) )
      return ShowError( "Не задана дата документа", BBVL_PF_DATE );
    elif( r_pmpaym.BaseFIID == -1 )
      return ShowError( "Не задана валюта документа", BBVL_PF_FICODE );
    elif( not trim( r_pmvaltr.OwnerValues ) )
      return ShowError( "Не задан владелец ценностей", BBVL_PF_OWNERVALUES );
    elif( not trim( r_pmrmprop.Ground ) )
      return ShowError( "Не задано основание документа", BBVL_PF_GROUND );
    elif( r_pmpaym.ValueDate == date( 0, 0, 0 ) )
      return ShowError( "Не задана дата документа", BBVL_PF_VALUEDATE );
    elif( SumDb != SumCr )
      return ShowError( "Итоговые суммы по дебету и кредиту должны быть равны",BBVL_PF_NUMBER );     
    end;

  end;

  /* В закрытых запрещено менять всё */
  if( ( Mode == OBJ_UPDATE ) and ( r_pmpaym.PaymStatus == PM_FINISHED ) )
    if( ( not ПроверкаИдентичности( r_pmvaltr  , r_pmvaltr_old   ) ) or
        ( not ПроверкаИдентичности( r_pmpaym   , r_pmpaym_old    ) ) or
        ( not ПроверкаИдентичности( r_pmrmprop , r_pmrmprop_old  ) ) or
        ( not ПроверкаИдентичности( r_debet    , r_debet_old     ) ) or
        ( not ПроверкаИдентичности( r_credit   , r_credit_old    ) ) or
        ServicesDataChanged()
      )
        return CHANG_NOTKEEP;
    end;
  end;
  
  /* В открытых запрещено менять перечень полей */
  if( ( Mode == OBJ_UPDATE ) and ( r_pmpaym.PaymStatus == PM_NOTFINISHED ) )
    if( ( r_pmrmprop.Number            != r_pmrmprop_old.Number            ) or
        ( r_pmrmprop.Date              != r_pmrmprop_old.Date              ) or
        ( r_pmrmprop.Ground            != r_pmrmprop_old.Ground            ) or
        ( r_pmpaym.FIID                != r_pmpaym_old.FIID                ) or
        ( r_pmpaym.BaseFIID            != r_pmpaym_old.BaseFIID            ) or
        ( r_pmpaym.ValueDate           != r_pmpaym_old.ValueDate           ) or
        ( r_pmpaym.PayerAccount        != r_pmpaym_old.PayerAccount        ) or
        ( r_pmpaym.ReceiverAccount     != r_pmpaym_old.ReceiverAccount     ) or
        ( r_pmvaltr.OwnerName          != r_pmvaltr_old.OwnerName          ) or
        ( r_pmvaltr.ReceiverNameValues != r_pmvaltr_old.ReceiverNameValues ) or
        ( r_pmvaltr.PaperKind          != r_pmvaltr_old.PaperKind          ) or
        ( r_pmvaltr.PaperSeries        != r_pmvaltr_old.PaperSeries        ) or
        ( r_pmvaltr.PaperNumber        != r_pmvaltr_old.PaperNumber        ) or
        ( r_pmvaltr.PaperIssuedDate    != r_pmvaltr_old.PaperIssuedDate    ) or
        ( r_pmvaltr.PaperIssuer        != r_pmvaltr_old.PaperIssuer        ) or
        ServicesDataChanged()
      )
        return CHANG_NOTKEEP;
    end;
  end;

  return 0;
end;

macro ProcessPanel( mode:integer, key:integer, field:integer, panel:RsbUserPanel )
  return key;
end;

macro Функция_Пользователя()
   return 0;
end;
