/************************************************************************/
/*         Автоматизированная банковская система RS-Bank                */
/*                 Copyright (c) R-Style Software Lab 2002              */
/*                                                                      */
/*  Имя файла      : prpm.mac                                           */
/*                                                                      */
/*  Описание       : Печать платежных документов.                       */
/*                   Буферы и вспомогательные функции.                  */
/*                                                                      */
/*  Программист    : Смирнов С.В.                                       */
/*                                                                      */
/*  Создан         : 09.10.02                                           */
/*                                                                      */
// KS 27.11.2013 Адаптация под 31ю сборку
/************************************************************************/

import PTInter, OprInter, PaymInter, FIInter, CTInter, globals, prpmbuff, likepy, akkrtls;
import oralib,get_mfo, RsbDataSet;

/************************************************************************/
/* дата вступления 1256-У в силу                                        */
PRIVATE CONST Date1256U:date = date(1, 6, 2003);
/************************************************************************/

/*ИПВС*/
var pr_psinrq:TRecHandler = TRecHandler( "psinrq.dbt", "bank.def" );

/*рублевые платежные документы клиентов*/
var pr_pspayord:TRecHandler = TRecHandler( "pspayord.dbt", "bank.def" );

/*реквизиты платежных требований и требований - поручений*/
var pr_pspaydem:TRecHandler = TRecHandler( "pspaydem.dbt", "bank.def" );

/*мемориальные ордера*/
var pr_memorder:TRecHandler = TRecHandler( "memorder.dbt", "bank.def" );

/*валютные платежные документы клиентов*/
var pr_pscpord:TRecHandler = TRecHandler( "pscpord.dbt", "bank.def" );

/*валютное банковское платежное поручение*/
var pr_bbcpord:TRecHandler = TRecHandler( "bbcpord.dbt", "bank.def" );

/* изменение реквизитов */
var pr_pminhist:TRecHandler = TRecHandler( "pminhist.dbt", "bank.def" );

/*буферы для печати частичной оплаты*/
var pr_pmpaym_prim  :TRecHandler = TRecHandler("pmpaym.dbt",   "bank.def");
var pr_pmprop_prim  :TRecHandler = TRecHandler("pmprop.dbt",   "bank.def");
var pr_pmrmprop_prim:TRecHandler = TRecHandler("pmrmprop.dbt", "bank.def");
var pr_pmcurtr_prim :TRecHandler = TRecHandler("pmcurtr.dbt",  "bank.def");
var pr_pmkz_prim    :TRecHandler = TRecHandler("pmkz.dbt",     "bank.def");

var pr_pmpaym_part  :TRecHandler = TRecHandler("pmpaym.dbt",   "bank.def");
var pr_pmprop_part  :TRecHandler = TRecHandler("pmprop.dbt",   "bank.def");
var pr_pmrmprop_part:TRecHandler = TRecHandler("pmrmprop.dbt", "bank.def");
var pr_pmcurtr_part :TRecHandler = TRecHandler("pmcurtr.dbt",  "bank.def");
var pr_pmkz_part    :TRecHandler = TRecHandler("pmkz.dbt",     "bank.def");

var fpmpaym0  :TBFile = TBFile("pmpaym.dbt",   "R", 0, "pmpaym.dbt",   "bank.def");
var fpmrmprop0:TBFile = TBFile("pmrmprop.dbt", "R", 0, "pmrmprop.dbt", "bank.def");
var fpmprop0  :TBFile = TBFile("pmprop.dbt",   "R", 0, "pmprop.dbt",   "bank.def");
var ftypeac0  :TBFile = TBFile("typeac.dbt",   "R", 0, "typeac.dbt",   "bank.def");

MACRO PrintEAHeader()
var rs = execSQLselect(string(
            "SELECT edk.t_Name, dep1.t_Name, dep2.t_Name\n",
            "  FROM dedKind_dbt edk,\n",
            "       dedoc_tmp edoc,\n",
            "       ddp_dep_dbt dep1,\n",
            "       ddp_dep_dbt dep2\n",
            " WHERE     edoc.t_DepNumber = dep1.t_Code\n",
            "       AND edk.t_EDocKindID = edoc.t_EDocKindID\n",
            "       AND edk.t_EDocKindID = ?\n",
            "       AND edoc.t_EDocID = ?\n",
            "       AND dep2.t_Code = RSBSESSIONDATA.OperDprtNode()"),
            makeArray(SQLParam("", pr_EDocKindID), SQLParam("", pr_EDocID)));
  if (rs.moveNext())
    [ДОКУМЕНТ В ЭЛЕКТРОННОМ ВИДЕ

        Вид ДЭВ:           #
        Идентификатор ДЭВ: #
        Филиал документа:  #
        Электронный архив: #
    ](rs.value(0):l, pr_EDocID:l, rs.value(1):l, rs.value(2):l);
  end;
END;

/*проверка платежа на то, что он подпадает под действие 1256-У*/
MACRO is1256UPayment(p_rmprop:TRecHandler):bool
//  return p_rmprop.rec.ClientDate >= Date1256U;
  return p_rmprop.rec.Date >= Date1256U;
END;

/*разделить ИНН+КПП, хранящееся в системе как одна строка <ИНН>/<КПП> на две строки*/
MACRO splitINN_KPP(fullINN:string, INN:string, KPP:string)
  var parts:TArray;
  INN = "";
  KPP = "";
  parts = split(fullINN, "/");
  if(parts.Size > 0)
    INN = parts.Value(0);
    if(parts.Size > 1)
      KPP = join(subArray(parts, 1), "/");
    end;
  end;
  SetParm(1, INN);
  SetParm(2, KPP);
END;

/*выделить ИНН из полного <ИНН>/<КПП>*/
MACRO getINN(fullINN:string):string
  var INN:string;
  splitINN_KPP(fullINN, INN);
  return INN;
END;

/*выделить КПП из полного <ИНН>/<КПП>*/
MACRO getKPP(fullINN:string):string
  var KPP:string;
  splitINN_KPP(fullINN, NULL, KPP);
  return KPP;
END;


macro GetCodeId(CodeBik):integer
  var SQLQuery,cmd,RS, ObjId;

  SQLQuery = string("select o2.t_objectid from dobjcode_dbt o2 where o2.t_code = '",CodeBik,"'");

  cmd = RsdCommand(SQLQuery);
  cmd.execute;

  RS = RsdRecordset( cmd );

  RS.moveNext;

  if( RS.moveNext )
    return RS.value("t_objectid");
  end;
  return 0;
end;
//------------------------------------------------------------------------------
//Получить БИК банка с учетом историзации
//------------------------------------------------------------------------------
macro GetCodeBik( DateP:date,CodeBik):string
  var SQLQuery,cmd,RS,stat=1;

  SQLQuery = string("select o.t_bankdate,o.t_code from dobjcode_dbt o where ",
                    " o.t_objectid = ",GetCodeId(CodeBik)," AND ",
                    " o.t_codekind = 3 order by o.t_bankdate desc" );

  cmd = RsdCommand(SQLQuery);
  cmd.execute;

  RS = RsdRecordset( cmd );

  while(RS.moveNext)
    if ( DateP >= RS.value("t_bankdate")) 
      stat=0;
      break;
    end;  
  end;

  if (stat)
    return CodeBik;
  end;

  return RS.value("t_code");

end;
//------------------------------------------------------------------------------
// Получить ID субъекта-владельца кода
// Ближайший вышестоящий к PartyID, имеющий код заданного вида
//------------------------------------------------------------------------------
private macro GetCodeOwnerID( PartyID:integer, CodeKind:integer ):integer

  var params:TArray = makeArray( SQLParam( "p_PartyID"    , PartyID              ),
                                 SQLParam( "p_CodeKind"   , CodeKind             ),
                                 SQLParam( "p_Code"       , V_STRING , RSDBP_OUT ),
                                 SQLParam( "p_CodeOwnerID", V_INTEGER, RSDBP_OUT )
                               );
  var retval:integer = execStoredFunc( "RSBPARTY.PT_GetPartyCodeEx", V_INTEGER, params );
  if( retval == 0 )
    return params.Value(3).value;
  end;

  return 0;
END;

/* Получить некоторые свойства субъекта */
MACRO GetPartyProperty(PartyID:integer, party:TRecHandler, BIC:string, CorAc:string, Place:string, BankType:string, Superior:integer, Group:integer):integer
  var stat     :integer = 0;
  var fbankdprt:TBFile  = TBFile("bankdprt.dbt", "R", 0, "bankdprt.dbt", "bank.def");
  
  record rparty ("party.dbt", "bank.def");

  SetParm(2, "");
  SetParm(3, "");
  SetParm(4, "");
  stat = ПолучитьСубъекта(PartyID, rparty);
  if( stat )
    MsgBox("Не найден банк-", BankType, " ID=", PartyID);
  else
    fbankdprt.rec.PartyID = rparty.PartyID;
    BIC = ПолучитьКодСубъекта(rparty.PartyID, PTCK_BIC);
    if(not BIC)
      /* Если нет БИК у самого банка, берем вышестоящую организацию и ищем ее БИК и корсчет */
      if( Group == PAYMENTS_GROUP_BRANCH )
        Superior = GetCodeOwnerID( PartyID, PTCK_BIC );
        if( Superior > 0 )
          BIC = ПолучитьКодСубъекта( Superior, PTCK_BIC);
        end;
      else
        Superior = rparty.Superior;
        stat = ПолучитьСубъекта(rparty.Superior, rparty);
        if(not stat)
          fbankdprt.rec.PartyID = rparty.PartyID;
          BIC = ПолучитьКодСубъекта(rparty.PartyID, PTCK_BIC);
        else
          stat = 0;
        end;
      end;
    end;
    SetParm(2, BIC);
    if(fbankdprt.GetEQ())
      SetParm(3, fbankdprt.rec.corAcc);
/*SDA */
      if (Place != null)
      SetParm(4,string( fbankdprt.rec.place," ",fbankdprt.rec.placename ));
      end;
    end;
    SetParm(6, Superior);
    Copy(party.rec, rparty);
  end;

  return stat;

END;

/* Сформировать строку ИНН и КПП для отчета
   (было GetINN_KPP) */
MACRO MakeINN_KPP_String( FullINN:string ):string
  var pos:integer;
  pos = Index( FullINN, "/");
  if( pos )
    return SubStr(FullINN, 1, pos-1) + " КПП " + SubStr(FullINN, pos+1);
  else
    return FullINN;
  end;
END;

MACRO Get_BankName( PartyID:integer ):string
  record rparty ("party.dbt", "bank.def");

  var stat:integer = ПолучитьСубъекта( PartyID, rparty );

  if( stat == 0 )
    return rparty.Name;
  else
    return "";
  end;

END;
/* Сформировать строку ИНН и КПП для отчета (VRSL)
   (было GetINN_KPP_VRSL) */
MACRO MakeINN_KPP_String_VRSL( FullINN:string ):string
  return "ИНН " + MakeINN_KPP_String(FullINN);
END;

/* Реквизиты плательщика/получателя */
CLASS TPartyProperties(type:string, pmpaym:TRecHandler, pmprop:TRecHandler, pmrmprop:TRecHandler)
  var Name           :string,
      INN            :string,
      BankName       :string,
      BankBIC        :string,
      Account        :string,
      BankCorrAccount:string;
      
  MACRO get(type:string, pmpaym:TRecHandler, pmprop:TRecHandler, pmrmprop:TRecHandler)
    var pt:TRecHandler = TRecHandler("party.dbt", "bank.def");
    var bankType:string, corrAcc:string="";
    var ParentID:integer = 0;
    Name     = pmrmprop.item(type+"Name");
    INN      = pmrmprop.item(type+"INN");
    BankName = pmrmprop.item(type+"BankName");
    Account  = pmpaym.item(type+"Account");
    var _Place="";
    if(not BankName)
      //BankName = {Name_Bank} + ", " + {Post_Addr};
      BankName = {Name_Bank};
    end;

    if( not pmprop.rec.BankCode )
      BankBIC = {MFO_Bank};
      BankCorrAccount = {CORAC_Bank};
    else
      if( StrUpr(type) == "PAYER" ) bankType = "плательщик";
      else                          bankType = "получатель";
      end;
      //GetPartyProperty(pmpaym.item(type+"BankID"), pt, BankBIC, corrAcc, NULL, bankType, ParentID, pmprop.rec.Group);
      GetPartyProperty(pmpaym.item(type+"BankID"), pt, BankBIC, corrAcc, _Place, bankType, ParentID, pmprop.rec.Group);
      BankCorrAccount = pmrmprop.item(type+"CorrAccNostro");
      if (BankBIC == {MFO_Bank})
          BankName = {Name_Bank} + " " + _Place;
          BankCorrAccount = {CORAC_Bank};
      end;
      // Если платеж рублевый, вид кода != БИК, то подменяем названия
      if( ( ParentID > 0 ) and
          ( pmpaym.rec.FIID == NATCUR ) and
          ( pmpaym.rec.PayFIID == NATCUR ) and
          ( pmprop.rec.CodeKind != PTCK_BIC ) )
        if( strlen(Name) > 0 )
          Name = Name + ". ";
        end;
        Name = Name + Get_BankName( pmpaym.item(type+"BankID") );
        BankName = Get_BankName( ParentID );
      end;
    end;
  END;
  
  if( (pmpaym != NULL) and (pmprop != NULL) and (pmrmprop != NULL) )
    get(type, pmpaym, pmprop, pmrmprop);
  end;

END;

/* Получить вид платежа */
MACRO GetPaymentKind(kind:string, PaymentKind:object/*TRecHandler*/):string
  var fpmpopknd:TBFile = TBFile("pmpopknd.dbt", "R", 0, "pmpopknd.dbt", "bank.def");
  fpmpopknd.rec.PaymentKind = kind;
  if((kind!= "Н") and fpmpopknd.GetEQ()) //TAM HF_82 27.06.2013  //+LVV 19.11.2014 Перенес эту правку в 31 версию
    if(PaymentKind)
      Copy(PaymentKind, fpmpopknd);
    end;
    return fpmpopknd.rec.Name;
  else
    if(PaymentKind)
      ClearRecord(PaymentKind);
    end;
    return "";
  end;
END;

/* Сообщить о текущей ошибке BTrieve */
MACRO BErrMsg(context:string)
  var bfstat:integer, bferrortext:string;
  bfstat = Status(bferrortext);
  if(bfstat)
    if(not context)
      context = "Ошибка СУБД";
    end;
    MsgBox(context, "|",bferrortext, " (", bfstat, ") " );
  end;
END;

/* Данные строки частичной оплаты в отчете */
CLASS TPartPay
  var SubPurp:integer;
  var Number :string ;
  var PayDate:date   ;
  var Amount :moneyl ;
  var Rest   :moneyl ;
END;

/* Данные списка строк частичной оплаты в отчете */
CLASS (TArray)TPartPayList(OrderID:integer)
  MACRO append(item:variant)
    Value(Size) = item;
  END;
  MACRO get(OrderID:integer):bool
    var partPay :TPartPay;
    var Rest    :moneyl  = $0.0;
    var ErrMsg  :string  = "";
    var select  :string  = "";
    var params  :TArray  = TArray();
    var rset    :object;

    /*select = "select pmlink.t_PurposePayment, pmpaym.t_PartPaymNumber, pmrmprop.t_Number,pmrmprop.t_Date, pmpaym.t_Amount,pmpaym.t_PartPaymRestAmountMain/*pmpaym.t_PaymentID*/ "+
              "from  dpmlink_dbt pmlink, dpmpaym_dbt pmpaym, dpmrmprop_dbt pmrmprop " +
              "where  pmlink.t_InitialPayment  = :PrimPaymID " +
              "and  pmlink.t_InitialPayment != pmlink.t_PurposePayment " +
              "and  pmlink.t_LinkKind = 2 " +
              "and pmpaym.t_PaymentID = pmlink.t_PurposePayment " +
              "and pmrmprop.t_PaymentID = pmpaym.t_PaymentID " +
              "and pmpaym.t_PartPaymNumber <> 0 " +
              "order  by  pmpaym.t_PartPaymNumber";*/

     //zmp 31.07.2014 I-00505206 сделал запрос через doprcods_dbt, в dplink не всегда есть данные по частичкам(
     select = " SELECT pmpaym.t_paymentid,                                    "+
              "        pmpaym.t_PartPaymNumber,                               "+
              "        pmrmprop.t_Number,                                     "+
              "        pmrmprop.t_Date,                                       "+
              "        pmpaym.t_Amount,                                       "+
              "        pmpaym.t_PartPaymRestAmountMain                        "+
              " FROM   doprdocs_dbt prdocs,                                   "+
              "        doproper_dbt proper,                                   "+
              "        dpmpaym_dbt pmpaym,                                    "+
              "        dpmrmprop_dbt pmrmprop                                 "+
              " WHERE  PROPER.T_DOCUMENTID = LPAD (:PrimPaymID, 34, '0')      "+
              "    AND PROPER.T_ID_OPERATION = PRDOCS.T_ID_OPERATION          "+
              "    AND PRDOCS.T_DOCKIND IN (201)                              "+
              "    AND TO_NUMBER (PRDOCS.T_DOCUMENTID) = pmpaym.t_paymentid   "+
              "    AND pmrmprop.t_PaymentID = pmpaym.t_PaymentID              "+
              "    AND pmpaym.t_PartPaymNumber <> 0                           "+
              " ORDER BY   pmpaym.t_PartPaymNumber;                           ";
 
    params[params.size] = SQLParam( "PrimPaymID" , OrderID );

    rset = execSQLselect( select, params, false );

    if( rset )
      while( rset.moveNext() )
            partPay = TPartPay();
            partPay.SubPurp = rset.Value( 1 );
            partPay.Number  = rset.Value( 2 );
            partPay.PayDate = rset.Value( 3 );
            partPay.Amount  = rset.Value( 4 );
            partPay.Rest    = rset.Value( 5 );
            append(partPay);
      end;          
    end;            
  END;
  get(OrderID);
END;

/* Показать VRSL-ный отчет */
MACRO ViewVRSLReport(report:object):bool
  if(IsStandAlone)
    if( ViewRep(report) )
      return TRUE;
    end;
  else
    if( TransferRep(report) )
      return TRUE;
    end;
  end;
  return FALSE;
END;

/*MACRO getISOCode( FIID:integer ):integer
  record fi( "fininstr.dbt", "bank.def" );
  if( FIID >= 0 )
    if( ПолучитьФинИн( FIID, fi ) == 0 )
      return fi.ISO_Number;
    end;
  end;
  return 0;
END;*/

/* платеж является поручением */
MACRO paymentIsRequest(pmpaym:TRecHandler, debet:TRecHandler, credit:TRecHandler):bool
  return ((credit.rec.BankCode != "") and (credit.rec.IsSender != "X")) or
         (( debet.rec.BankCode != "") and ( debet.rec.IsSender == "X"));
END;

/* платеж является требованием */
MACRO paymentIsDemand(pmpaym:TRecHandler, debet:TRecHandler, credit:TRecHandler):bool
  return ((credit.rec.BankCode != "") and (credit.rec.IsSender == "X")) or
         (( debet.rec.BankCode != "") and ( debet.rec.IsSender != "X"));
END;

MACRO getPrimPaymentID( PartPaymentID:integer ):integer

  var PrimPaymentID:integer = 0;
  var select       :string  = "";
  var params       :TArray  = TArray();
  var rset         :object;

  select = "select pmlink.t_InitialPayment " +
           "from   dpmlink_dbt pmlink      " +
           "where  pmlink.t_PurposePayment  = :PartPaymID " +
           "  and  pmlink.t_InitialPayment != pmlink.t_PurposePayment " +
           "  and  pmlink.t_LinkKind        = 2 ";

  params[params.size] = SQLParam( "PartPaymID" , PartPaymentID  );

  rset = execSQLselect( select, params, false );

  if( rset AND rset.moveNext() )
    PrimPaymentID = rset.Value( 0 );
  end;
  
  return PrimPaymentID;
END;

/*заполнить буферы для печати платежного ордера       */
/*  в макрос из Си передается буфер частичного платежа*/
/*  надо по нему найти основной платеж                */
MACRO FillBuffersForPayOrderPrint():bool

  var PrimPaymentID:integer = 0;

  //переданные буферы с частичным платежом лежат в pr_pmpaym, pr_pmrmprop, pr_credit
  //а печать платежного ордера использует pr_pmpaym_prim, pr_pmpaym_part, ...
  Copy(pr_pmpaym_part,   pr_pmpaym  );
  Copy(pr_pmprop_part,   pr_credit  );
  Copy(pr_pmrmprop_part, pr_pmrmprop);

  PrimPaymentID = getPrimPaymentID( pr_pmpaym_part.rec.PaymentID );
  if( ( PrimPaymentID == 0 ) or ( PrimPaymentID == pr_pmpaym_part.rec.PaymentID ) )
    Copy(pr_pmpaym_prim, pr_pmpaym);
    Copy(pr_pmprop_prim, pr_credit);
    Copy(pr_pmrmprop_prim, pr_pmrmprop);
    return TRUE;
  end;

  //получим основной платеж
  fpmpaym0.rec.PaymentID  = PrimPaymentID;
  if(not fpmpaym0.getEQ())
    BErrMsg("Поиск основного платежа по его частичной оплате");
    return FALSE;
  end;
  Copy(pr_pmpaym_prim, fpmpaym0);
  //получим его свойства
  fpmprop0.rec.PaymentID   = pr_pmpaym_prim.rec.PaymentID;
  fpmprop0.rec.DebetCredit = 1;
  if(not fpmprop0.getEQ())
    if(Status() and (Status()!=4) and (Status()!=9))
      BErrMsg("Поиск кредитового свойства платежа");
      return FALSE;
    end;
  end;
  Copy(pr_pmprop_prim, fpmprop0);
  //получим его свойства R-макета
  fpmrmprop0.rec.PaymentID   = pr_pmpaym_prim.rec.PaymentID;
  if(not fpmrmprop0.getEQ())
    BErrMsg("Поиск свойств R-макета платежа");
    return FALSE;
  end;
  Copy(pr_pmrmprop_prim, fpmrmprop0);
  
  return TRUE;
END;

/* Получить адрес по ID субъекта */
MACRO CP_GetAdressByParty( Party:integer ):string
   var query:string = "select admterr.T_PLACE, country.T_NAME " +
                       " from dadmterr_dbt admterr, " +
                            " dcountry_dbt country " +
                      " where admterr.T_PLACE(+) = :CODEPLACE"
                        " and country.T_CODELAT3(+) = :COUNTRY;";
   
   record PtAdress ( adress );
   ClearRecord(PtAdress);
   
   MACRO FindAdressParty(PartyID, Тип, Адрес)
     FILE adress ("adress.dbt") key 0;
     adress.PartyID = PartyID;
     adress.Type = Тип;
     IF( GetEQ(adress) )
       copy(Адрес,adress);
       return true;
     ELSE
       return false;
     END;

   END;

   if( not FindAdressParty(Party, PTADDR_REAL, PtAdress) )
     if( not FindAdressParty(Party, PTADDR_LEGAL, PtAdress) )
       return "";
     end;
   end;

   var params:TArray = makeArray( SQLParam( "CODEPLACE", PtAdress.CodePlace ),
                                  SQLParam( "COUNTRY"  , PtAdress.Country ) );
   var rs:RsdRecordset = execSQLselect( query, params, true );
   if( rs and rs.moveNext() )
     return join(map(filter(makeArray(rs.Value(0), PtAdress.Place, rs.Value(1))), @Trim), ", ");
   else
     return PtAdress.Place;
   end;

   return "";
END;

/* Получить адрес по коду субъекта */
MACRO CP_GetAdressByCode( CodeKind:integer, Code:string ):string
  var query:string = "select objcode.T_OBJECTID " +
                      " from dobjcode_dbt objcode " +
                     " where objcode.T_CODEKIND = :CodeKind " +
                       " and objcode.T_CODE = :Code "
                       " and objcode.T_OBJECTTYPE = 3";
  var params:TArray = makeArray( SQLParam( "CodeKind", CodeKind ),
                                 SQLParam( "Code"    , Code     ) );
  var rs:RsdRecordset = execSQLselect( query, params, true );
  if( rs and rs.moveNext() )
    return CP_GetAdressByParty( rs.Value(0) );
  end;
  return "";
END;

/* Получит название вида кода */
MACRO CP_GetNameCodeKind( CodeKind:integer ):string
  var query:string = "select obj.t_name " +
                       " from dobjkcode_dbt obj " +
                      " where obj.T_OBJECTTYPE = 3 " +
                        " and obj.T_CODEKIND = :CodeKind ";
  var params:TArray = makeArray( SQLParam( "CodeKind", CodeKind ) );
  var rs:RsdRecordset = execSQLselect( query, params, true );
  if( rs and rs.moveNext() )
    return string(rs.Value(0));
  end;
  return "";
END;

/* Код вида валютной операции */
MACRO CP_GetKindCodeCurrOper( PaymentID:integer ):string
  var query:string = " select attr.T_NUMINLIST " +
                        " from dobjatcor_dbt atc, " +
                             " dobjattr_dbt attr " +
                             " where atc.T_OBJECTTYPE = 501 " +
                               " and atc.T_GROUPID = 7 " +
                               " and to_number(atc.T_OBJECT) = :PaymentID" +
                               " and atc.T_ATTRID = attr.T_ATTRID " +
                               " and attr.T_OBJECTTYPE = 501 " +
                               " and attr.T_GROUPID = 7 ";
  var params:TArray = makeArray( SQLParam( "PaymentID", PaymentID ) );
  var rs:RsdRecordset = execSQLselect( query, params, true );
  if( rs and rs.moveNext() )
    return string(rs.Value(0));
  end;
  return "";
END;

/* Фамилия И.О. N-го лица клиента из справочника "Сотрудники") */
MACRO CP_GetPersonName( PartyID:integer, FirstPerson:bool ):string
  var query:string = " select pers.T_NAME " +
                        " from dofficer_dbt officer, " +
                             " dperson_dbt pers " +
                       " where officer.T_PARTYID = :PartyID ";
  if( FirstPerson )
   query = query + " and officer.T_ISFIRSTPERSON = 'X' ";
  else
   query = query + " and officer.T_ISSECONDPERSON = 'X' ";
  end;
  query = query + " and officer.T_PERSONID = pers.T_PARTYID ";

  var params:TArray = makeArray( SQLParam( "PartyID", PartyID ) );
  var rs:RsdRecordset = execSQLselect( query, params, true );
  if( rs and rs.moveNext() )
    return string(rs.Value(0));
  end;
  return "";
END;

// Определить сторону редактирования платежа
macro GetEditFlag( PaymentID, DocKind, HistoryNum, IsDebetEdit : @bool, DebetDate: @date, IsCreditEdit : @bool, CreditDate : @date, 
                   IsEdit : @bool )

  var SelectStr:string;
  var params   :TArray;
  var rs       :object;

  file pm_inhist( pminhist ) key 1;

  IsEdit = false;
  IsDebetEdit = false;
  IsCreditEdit = false;

  pm_inhist.PaymentID = PaymentID;
  pm_inhist.HistoryNum = HistoryNum;

  if( GetEQ(pm_inhist) )
    IsEdit = true;
  else
    return;
  end;

  SelectStr = "select t_PayerName, t_PayerAccount, t_PayerINN, t_PayerBankName, t_PayerCorrAccNostro, t_PayerBankCode, " +
                    " t_ReceiverBankName, t_ReceiverBankCode, t_ReceiverCorrAccNostro, t_ReceiverName, t_ReceiverAccount, " +
                    " t_ReceiverINN, t_DateFrom " +
               " from dpminhist_dbt " +
              " where t_PaymentID = :PaymentID " +
                " and t_HistoryNum > :HistoryNum " +
              " order by t_HistoryNum ";

  params = makeArray( SQLParam("PaymentID",  PaymentID), 
                      SQLParam("HistoryNum", HistoryNum) );
  rs = execSQLselect( SelectStr, params, true );

  while( rs and rs.moveNext() and ( (not IsDebetEdit) or (not IsCreditEdit) ) )

    if( (IsDebetEdit == false) and
        ( ( ( DocKind == DLDOC_BANKORDER ) and ( (rs.value(0) != pm_inhist.PayerName) or
                                                 (rs.value(1) != pm_inhist.PayerAccount) ) ) or
          ( (rs.value(0) != pm_inhist.PayerName) or
            (rs.value(1) != pm_inhist.PayerAccount) or
            (rs.value(2) != pm_inhist.PayerINN) or
            (rs.value(3) != pm_inhist.PayerBankName) or
            (rs.value(4) != pm_inhist.PayerCorrAccNostro) or
            (rs.value(5) != pm_inhist.PayerBankCode)
          )
        )
      )
      IsDebetEdit = true;
      DebetDate = rs.value(12);
    end;

    if( (IsCreditEdit == false) and
        ( ( ( DocKind == DLDOC_BANKORDER ) and ( (rs.value(6) != pm_inhist.ReceiverName) or
                                                 (rs.value(7) != pm_inhist.ReceiverAccount) ) ) or
          ( (rs.value(6)  != pm_inhist.ReceiverName) or
            (rs.value(7)  != pm_inhist.ReceiverAccount) or
            (rs.value(8)  != pm_inhist.ReceiverINN) or
            (rs.value(9)  != pm_inhist.ReceiverBankName) or
            (rs.value(10) != pm_inhist.ReceiverCorrAccNostro) or
            (rs.value(11) != pm_inhist.ReceiverBankCode)
          )
        )
      )
      IsCreditEdit = true;

      CreditDate = rs.value(12);
    end;

  end;

end;

MACRO PrintEOF()
[];
END;

// Заполнить содержание операции для печатной формы платежного ордера
MACRO GetPayOrderPayKind():string

  var payKind = "";
  file pm_inhist( pminhist ) key 1;
  file pm_link  ( pmlink   ) key 3;

  pm_link.LinkKind       = PMLINK_KIND_KVITING;
  pm_link.PurposePayment = pr_pmpaym_part.rec.PaymentID;
  if( GetEQ( pm_link ) ) // есть родительский платеж
    // проверим, изменялся ли он
    pm_inhist.PaymentID  = pm_link.InitialPayment;
    pm_inhist.HistoryNum = 0;
    if( not GetEQ(pm_inhist) )
      // не менялся - пусто или частичная оплата
      if( pr_pmpaym_part.rec.PartPaymNumber )
        payKind = "частичная оплата";
      end;
    else // менялся - Изменение Реквизитов + еще уточним
      payKind = "ИР";
      if( ( (pr_pmrmprop_prim.rec.ShifrOper == "16") and (pr_pmpaym_prim.rec.PartPaymNumber) ) or 
          ( (pr_pmrmprop_prim.rec.ShifrOper != "16") and (pr_pmpaym_part.rec.PartPaymNumber) ) )
        payKind = payKind + "ЧО";       // Частичной Оплаты
      end;
      if( pr_pmrmprop_prim.rec.ShifrOper == "16" )
        payKind = payKind + " " + string(pr_pmrmprop_prim.rec.Date);
      end;
    end;
  end;

  return payKind;
END;

/* Поиск в LLVALUE по коду */       
MACRO GetLLVALUES_Name (list, code)
  var query,cmd,RS;

  query = string("select t_Name from dllvalues_dbt where ",
                    " t_List = ?  AND t_code = ?" );

  cmd = RSDCommand(query);
  cmd.addParam( "List", RSDBP_IN);
  cmd.addParam( "Code", RSDBP_IN);  
  cmd.value("List") = list;
  cmd.value("Code")  = code;
  
  cmd.execute();
  RS = TRsbDataSet(cmd);
  if (RS.movenext() )
    return Rs.name;
  else
    return "";
  end;

END;

/* EVG 4/03/2014 Процедура проверяет, были ли по платежу изменения и, если были, добавляет соответствующие
   подписи в печатную форму. */
MACRO ProcessPaymentEditing( obj, paym )

  //if( ExecMacroFile( "Pm_Common.mac", "PM_WasChanged", paym.rec.PaymentID ) )
  var IsDebetEdit = false, IsCreditEdit = false;
  //TAM 07.03.2014 
  var DebetChangeDate:date, CreditChangeDate:date;
  GetEditFlag( paym.rec.PaymentID, paym.rec.DocKind, 0, @IsDebetEdit, @DebetChangeDate, @IsCreditEdit, @CreditChangeDate );

  if( IsDebetEdit )
     obj.SetValues( "isChangedPayer", "Изменение реквизитов",
                    "isChPayer_sign", "(подпись)",
                    "DebetChange", DebetChangeDate,
                    "DebetDate", "Дата"); //TAM 07.03.2014
     obj.FormatSellLines( "isChPayer_sign", 0, 1 );    // Верхнее обрамление ячейки
     obj.FormatSellLines( "DebetDate",      0, 1 );
  end;

  if( IsCreditEdit )
     obj.SetValues( "isChangedReceiver", "Изменение реквизитов",
                    "isChReceiver_sign", "(подпись)",
                    "CreditChange", CreditChangeDate,
                    "CreditDate", "Дата"); //TAM 07.03.2014
     obj.FormatSellLines( "isChReceiver_sign", 0, 1 );  // Верхнее обрамление ячейки
     obj.FormatSellLines( "CreditDate",        0, 1 );
  end;

END;
