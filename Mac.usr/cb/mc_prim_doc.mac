/*
$Name: mc_prim_doc.mac
$Module: Ядро ГКБО
$Description: Макрос для определения дополнительных счетов мультивалютной проводки
*/

/*
 * Макрос для определения дополнительных счетов мультивалютной проводки:
 * - счета реализованных курсовых разниц
 */
// Gurin S. 07.12.2015 HotFix 2031.19.25 (Life_1 1.3)_6
Import BankInter, CTInter, FIInter, rsd, InsCarryDoc;
Import "rsb_const.mac";
Import "ex_rate_lib.mac";

/* определить вид финансового инструмент */
private macro GetFIKind( Currency : integer ) : integer

  var FIKind : integer;
  var rs = RsdRecordset( "SELECT t_FI_Kind FROM dfininstr_dbt WHERE t_FIID = " + string(Currency) );

  FIKind = -1;

  if( rs.moveNext() )

    FIKind = rs.value(0);

  end;

    if( FIKind == FIKIND_CURRENCY ) FIKind = 1;
  elif( FIKind == FIKIND_METAL    ) FIKind = 2;
  end;

  return FIKind;

end;

private macro _GetAccount( Chapter : integer, FIID : integer, Account : string, AccBuf : variant) : bool
  var AccRec : TBFile;
  var RetVal = false;
  record AccountBuf(account);

  AccRec = TBFile( "account.dbt", "R", 0 );

  AccRec.rec.Chapter       = Chapter;
  AccRec.rec.Code_Currency = FIID;
  AccRec.rec.Account       = Account;
  if( AccRec.GetEQ() )
    Copy( AccBuf, AccRec );
    RetVal = true;
  end;

  /* если надо поищем счёт во временной базе */
  if(not RetVal)
    ClearRecord( AccountBuf );
    if(DL_FindAccount( Chapter, FIID, Account, AccountBuf ) == 0)
      Copy( AccBuf, AccountBuf );
      RetVal = true;
    end;
  end;

  return RetVal;
end;

/* определить узел ТС */
private macro GetBranchID( Chapter : integer, Currency : integer, Account : string ) : integer
  
  var Branch = -1;
  var AccRec = TRecHandler( "account" );

  if(_GetAccount(Chapter, Currency, Account, AccRec))
    Branch = AccRec.rec.Branch;
  end;

  return Branch;
end;

/* определить вид счета */
private macro GetSideBalance( Chapter : integer, Currency : integer, Account : string ) : integer
  
  var SideBalance = -1;
  var AccRec = TRecHandler( "account" );

  if(_GetAccount(Chapter, Currency, Account, AccRec))
    if(trim(AccRec.rec.Kind_Account) == "А")
      SideBalance = 1;
    elif(trim(AccRec.rec.Kind_Account) != "")
      SideBalance = 2;
    end;
  end;

  return SideBalance;
end;

/* определить вид сделки: наличная или нет */
private macro GetDealCashKind( Chapter : integer, Currency : integer, Account : string ) : integer
  
  var DealCashKind = -1;
  var AccRec = TRecHandler( "account" );

  if(_GetAccount(Chapter, Currency, Account, AccRec))
    if(SubStr(AccRec.rec.Balance, 1, 3) == "202")
      DealCashKind = 1;
    else
      DealCashKind = 2;
    end;
  end;

  return DealCashKind;
end;

/*
 * Реализация класса первичного документа
 */
class PDocMultyCarry( _acctrn : TRecHandler, Chapter : integer, Department : integer )

  var acctrn : TRecHandler;

  var error : integer;

  /* корректировка счета */
  macro CorrectAccount( account, accblnc, ORScheme, categ, templ, accdoc, OperDate )
    return true;
  end;

  /* определение FIRole */
  macro GetBasisFIRole( FIRole : integer ) : integer
    return FIRole;
  end;
  /*zmp 12.02.2014 закоментировал часть кода в ф-ции ниже, насколько я понял из письма Журавлевой О, 
    для реализованной курсовой разницы в без. нал. форме открывать счета в разрезе Подразделений ТС не нужно,
    тоесть делаю также как это было в 30 патче
  */
  /* определение параметров второго рода */
  macro GetParametr( ParmKind, OperDate, CatCode, FIRole ) : integer
    debugbreak;
    var Parametr = -1;

    if( ParmKind == MC_TYPE_PARAMETR_FIID )

        if( (FIRole == FIROLE_INCOME_DEBET ) or (FIRole == FIROLE_EXPEND_DEBET ) ) Parametr = acctrn.rec.FIID_Payer   ;
      elif( (FIRole == FIROLE_INCOME_CREDIT) or (FIRole == FIROLE_EXPEND_CREDIT) ) Parametr = acctrn.rec.FIID_Receiver;
      end;

    elif( ParmKind == MC_TYPE_PARAMETR_DEPARTMENT )
      
     /* if( MC_IsOpenAccountInSubdivision() )
      
        if( (FIRole == FIROLE_INCOME_DEBET) or (FIRole == FIROLE_EXPEND_DEBET) )
        
          Parametr = GetBranchID( acctrn.rec.Chapter, acctrn.rec.FIID_Payer, acctrn.rec.Account_Payer );
      
        elif( (FIRole == FIROLE_INCOME_CREDIT) or (FIRole == FIROLE_EXPEND_CREDIT) )
      
          Parametr = GetBranchID( acctrn.rec.Chapter, acctrn.rec.FIID_Receiver, acctrn.rec.Account_Receiver );

        end;

      end;*/

      //if( Parametr == -1 )

        Parametr = acctrn.rec.Department;

     // end;
    
    end;

    return Parametr;

  end;

  /* определение параметров первого рода */
  macro GetParametrTemplate( ObjectID, Classificator, OperDate, FIRole ) : integer
    
    var Parametr = -1;

    if( Classificator == LLCLASS_CHAPTER_OCP )

      /* глава учета */
      Parametr = acctrn.rec.Chapter;

    elif( Classificator == LLCLASS_SIDEBALANCE_CORACCKIND )

      /* вид корреспондирующего счета */  
      if( (FIRole == FIROLE_INCOME_DEBET) or (FIRole == FIROLE_EXPEND_DEBET) )
        
        Parametr = GetSideBalance( acctrn.rec.Chapter, acctrn.rec.FIID_Payer, acctrn.rec.Account_Payer );
      
      elif( (FIRole == FIROLE_INCOME_CREDIT) or (FIRole == FIROLE_EXPEND_CREDIT) )
      
        Parametr = GetSideBalance( acctrn.rec.Chapter, acctrn.rec.FIID_Receiver, acctrn.rec.Account_Receiver );

      end;
    
    elif( (Classificator == LLCLASS_KIND_AKT_BANK) or (Classificator == LLCLASS_FI_KIND) )

      /* вид актива */  
        if( (FIRole == FIROLE_INCOME_DEBET ) or (FIRole == FIROLE_EXPEND_DEBET ) ) Parametr = GetFIKind( acctrn.rec.FIID_Payer    );
      elif( (FIRole == FIROLE_INCOME_CREDIT) or (FIRole == FIROLE_EXPEND_CREDIT) ) Parametr = GetFIKind( acctrn.rec.FIID_Receiver );
      end;

    elif( (ObjectID == OBJTYPE_IST_DOH_RASH) AND (Classificator == LLCLASS_KIND_COURCE_DIF) )
      
      Parametr = 6;

    elif( Classificator == LLCLASS_SYMBOLNUMBERS )

      if( OperDate >= DateBegin446P )
        Parametr = 0;
      end;

    elif( Classificator == LLCLASS_DEAL_CASH_KIND )

      /* вид сделки: наличная или нет */
      if( (FIRole == FIROLE_INCOME_DEBET) or (FIRole == FIROLE_EXPEND_DEBET) )
        
        Parametr = GetDealCashKind( acctrn.rec.Chapter, acctrn.rec.FIID_Payer, acctrn.rec.Account_Payer );
      
      elif( (FIRole == FIROLE_INCOME_CREDIT) or (FIRole == FIROLE_EXPEND_CREDIT) )
      
        Parametr = GetDealCashKind( acctrn.rec.Chapter, acctrn.rec.FIID_Receiver, acctrn.rec.Account_Receiver );

      end;

    elif( Classificator == LLCLASS_CODE_FI )

        if( (FIRole == FIROLE_INCOME_DEBET ) or (FIRole == FIROLE_EXPEND_DEBET ) ) Parametr = ExRate_GetParameter_CodeFI( acctrn.rec.FIID_Payer    );
      elif( (FIRole == FIROLE_INCOME_CREDIT) or (FIRole == FIROLE_EXPEND_CREDIT) ) Parametr = ExRate_GetParameter_CodeFI( acctrn.rec.FIID_Receiver );
      end;

    end;

    return Parametr;

  end;

  
/* конструктор */  
  error = 0;

  acctrn = _acctrn;

end;


/* определение параметра второго рода MC_TYPE_PARAMETR_FIID */
private macro set_MC_TYPE_PARAMETR_FIID()

  var strSQL : string;
  var cmd : RsdCommand;

  strSQL =  "UPDATE dbatch_mcopenacc_tmp mco " +
            "SET mco.t_AccDocFIID = NVL((SELECT decode(mco.t_FIRole,           " +
            "                                          ?, t.t_FIID_Payer,      " +
            "                                          ?, t.t_FIID_Payer,      " +
            "                                          ?, t.t_FIID_Receiver,   " +
            "                                          ?, t.t_FIID_Receiver,   " +
            "                                          NULL)                   " +
            "                            FROM dacctrn_batch_tmp t              " +
            "                            WHERE t.t_AccTrnID = mco.t_DocID), -1)";

  cmd = RsdCommand( strSQL );

  cmd.AddParam("", RSDBP_IN, FIROLE_INCOME_DEBET  );
  cmd.AddParam("", RSDBP_IN, FIROLE_EXPEND_DEBET  );
  cmd.AddParam("", RSDBP_IN, FIROLE_INCOME_CREDIT );
  cmd.AddParam("", RSDBP_IN, FIROLE_EXPEND_CREDIT );

  cmd.Execute();

end;

/* определение параметра второго рода MC_TYPE_PARAMETR_DEPARTMENT */
private macro set_MC_TYPE_PARAMETR_DEPARTMENT()

  var strSQL : string;
  var cmd : RsdCommand;

  if( MC_IsOpenAccountInSubdivision() == false )
  
    strSQL =  "UPDATE dbatch_mcopenacc_tmp mco " +
              "SET mco.t_DepartmentID = NVL((SELECT t.t_Department_Payer          " +
              "                              FROM dacctrn_batch_tmp t             " +
              "                              WHERE t.t_AccTrnID = mco.t_DocID), 0)";

    cmd = RsdCommand( strSQL );

  else

    strSQL =  "UPDATE dbatch_mcopenacc_tmp mco " +
              "SET mco.t_DepartmentID = NVL((SELECT decode(mco.t_FIRole,           " +
              "                                            ?, t.t_Branch_Payer   , " +
              "                                            ?, t.t_Branch_Payer   , " +
              "                                            ?, t.t_Branch_Receiver, " +
              "                                            ?, t.t_Branch_Receiver, " +
              "                                            t_Department_Payer)     " +
              "                              FROM dacctrn_batch_tmp t              " +
              "                              WHERE t.t_AccTrnID = mco.t_DocID), 0)";

    cmd = RsdCommand( strSQL );

    cmd.AddParam("", RSDBP_IN, FIROLE_INCOME_DEBET  );
    cmd.AddParam("", RSDBP_IN, FIROLE_EXPEND_DEBET  );
    cmd.AddParam("", RSDBP_IN, FIROLE_INCOME_CREDIT );
    cmd.AddParam("", RSDBP_IN, FIROLE_EXPEND_CREDIT );

  end;

  cmd.Execute();

end;

/* определение параметра первого рода LLCLASS_CHAPTER_OCP */
private macro set_param_LLCLASS_CHAPTER_OCP( p_ValueName : string )

  var strSQL : string;
  var cmd : RsdCommand;

  strSQL =  "UPDATE dbatch_mcopenacc_tmp mco " +
            "SET " + p_ValueName + 
            "                      = NVL((SELECT t.t_Chapter                    " +
            "                             FROM dacctrn_batch_tmp t              " +
            "                             WHERE t.t_AccTrnID = mco.t_DocID), -1)";

  cmd = RsdCommand( strSQL );

  cmd.Execute();

end;

/* определение параметра первого рода LLCLASS_SIDEBALANCE_CORACCKIND - вид корреспондирующего счета */
private macro set_param_LLCLASS_SIDEBALANCE_CORACCKIND( p_ValueName : string )

  var strSQL : string;
  var cmd : RsdCommand;

  strSQL =  "UPDATE dbatch_mcopenacc_tmp mco " +
            "SET " + p_ValueName + 
            "                      = NVL((SELECT decode(mco.t_FIRole,           " +
            "                                           ?, decode(t.t_Kind_Account_Payer   , 'А', 1, 2), " +
            "                                           ?, decode(t.t_Kind_Account_Payer   , 'А', 1, 2), " +
            "                                           ?, decode(t.t_Kind_Account_Receiver, 'А', 1, 2), " +
            "                                           ?, decode(t.t_Kind_Account_Receiver, 'А', 1, 2), " +
            "                                           NULL)                   " +
            "                             FROM dacctrn_batch_tmp t              " +
            "                             WHERE t.t_AccTrnID = mco.t_DocID), -1)";

  cmd = RsdCommand( strSQL );

  cmd.AddParam("", RSDBP_IN, FIROLE_INCOME_DEBET  );
  cmd.AddParam("", RSDBP_IN, FIROLE_EXPEND_DEBET  );
  cmd.AddParam("", RSDBP_IN, FIROLE_INCOME_CREDIT );
  cmd.AddParam("", RSDBP_IN, FIROLE_EXPEND_CREDIT );

  cmd.Execute();

end;

/* определение параметра первого рода LLCLASS_FI_KIND (LLCLASS_KIND_AKT_BANK) - вид актива */
private macro set_param_LLCLASS_FI_KIND( p_ValueName : string )

  var strSQL : string;
  var cmd : RsdCommand;

  strSQL =  "UPDATE dbatch_mcopenacc_tmp mco " +
            "SET " + p_ValueName + 
            "                      = NVL((SELECT decode(mco.t_FIRole,           " +
            "                                           ?, t.t_FIKind_Payer,    " +
            "                                           ?, t.t_FIKind_Payer,    " +
            "                                           ?, t.t_FIKind_Receiver, " +
            "                                           ?, t.t_FIKind_Receiver, " +
            "                                           NULL)                   " +
            "                             FROM dacctrn_batch_tmp t              " +
            "                             WHERE t.t_AccTrnID = mco.t_DocID), -1)";

  cmd = RsdCommand( strSQL );

  cmd.AddParam("", RSDBP_IN, FIROLE_INCOME_DEBET  );
  cmd.AddParam("", RSDBP_IN, FIROLE_EXPEND_DEBET  );
  cmd.AddParam("", RSDBP_IN, FIROLE_INCOME_CREDIT );
  cmd.AddParam("", RSDBP_IN, FIROLE_EXPEND_CREDIT );

  cmd.Execute();

end;

/* определение параметра первого рода LLCLASS_KIND_COURCE_DIF - вид курсовых разниц */
private macro set_param_LLCLASS_KIND_COURCE_DIF( p_ValueName : string )

  var strSQL : string;
  var cmd : RsdCommand;

  strSQL =  "UPDATE dbatch_mcopenacc_tmp mco " +
            "SET " + p_ValueName + " = 6     ";

  cmd = RsdCommand( strSQL );

  cmd.Execute();

end;

/* определение параметра первого рода LLCLASS_SYMBOLNUMBERS - знаков символа формы 102 */
private macro set_param_LLCLASS_SYMBOLNUMBERS( p_ValueName : string )

  var strSQL : string;
  var cmd : RsdCommand;

  strSQL =  "UPDATE dbatch_mcopenacc_tmp mco " +
            "SET " + p_ValueName + " = 0     " +
            "WHERE t_ActionDate >= ?";

  cmd = RsdCommand( strSQL );

  cmd.AddParam("", RSDBP_IN, DateBegin446P  );

  cmd.Execute();

end;

/* определение параметра первого рода LLCLASS_DEAL_CASH_KIND - вид сделки: наличная или нет */
private macro set_param_LLCLASS_DEAL_CASH_KIND( p_ValueName : string )

  var strSQL : string;
  var cmd : RsdCommand;

  strSQL =  "UPDATE dbatch_mcopenacc_tmp mco " +
            "SET " + p_ValueName + 
            "                      = NVL((SELECT decode(mco.t_FIRole,           " +
            "                                           ?, decode( substr(t.t_Balance_Payer   , 1, 3), '202', 1, 2 ), " +
            "                                           ?, decode( substr(t.t_Balance_Payer   , 1, 3), '202', 1, 2 ), " +
            "                                           ?, decode( substr(t.t_Balance_Receiver, 1, 3), '202', 1, 2 ), " +
            "                                           ?, decode( substr(t.t_Balance_Receiver, 1, 3), '202', 1, 2 ), " +
            "                                           NULL)                   " +
            "                             FROM dacctrn_batch_tmp t              " +
            "                             WHERE t.t_AccTrnID = mco.t_DocID), -1)";

  cmd = RsdCommand( strSQL );

  cmd.AddParam("", RSDBP_IN, FIROLE_INCOME_DEBET  );
  cmd.AddParam("", RSDBP_IN, FIROLE_EXPEND_DEBET  );
  cmd.AddParam("", RSDBP_IN, FIROLE_INCOME_CREDIT );
  cmd.AddParam("", RSDBP_IN, FIROLE_EXPEND_CREDIT );

  cmd.Execute();

end;


/* определение параметра первого рода LLCLASS_CODE_FI - код ФИ */
private macro set_param_LLCLASS_CODE_FI( p_ValueName : string )

  var strSQL : string;
  var cmd : RsdCommand;

  strSQL =  "UPDATE dbatch_mcopenacc_tmp mco "
            "SET " + p_ValueName +
            "   = NVL ( "
            "        NVL ( "
            "           (SELECT t_Element"
            "              FROM dllvalues_dbt"
            "             WHERE t_List = ?   "
            "                   AND t_Code = "
            "                          (SELECT t_ISO_Number"
            "                             FROM dfininstr_dbt"
            "                           WHERE t_FIID = "
            "                                    (SELECT DECODE ("
            "                                               mco.t_FIRole, "
            "                                               ?, t.t_FIID_Payer,  "
            "                                               ?, t.t_FIID_Payer,    "
            "                                               ?, t.t_FIID_Receiver, "
            "                                               ?, t.t_FIID_Receiver, "
            "                                               NULL) "
            "                                       FROM dacctrn_batch_tmp t "
            "                                     WHERE t.t_AccTrnID = mco.t_DocID))), "
            "            (SELECT t_Element "
            "               FROM dllvalues_dbt "
            "             WHERE t_List = ? AND t_Code = ?)), "
            "         -1)";

  cmd = RsdCommand( strSQL );

  cmd.AddParam("", RSDBP_IN, OBJTYPE_CODE_FI );

  cmd.AddParam("", RSDBP_IN, FIROLE_INCOME_DEBET  );
  cmd.AddParam("", RSDBP_IN, FIROLE_EXPEND_DEBET  );
  cmd.AddParam("", RSDBP_IN, FIROLE_INCOME_CREDIT );
  cmd.AddParam("", RSDBP_IN, FIROLE_EXPEND_CREDIT );

  cmd.AddParam("", RSDBP_IN, OBJTYPE_CODE_FI );

  cmd.AddParam("", RSDBP_IN, "000" );

  cmd.Execute();

end;

/*
 * Реализация класса первичного документа для режима пакетного выполнения проводок
 */
class PDocMultyCarryBatch

  var error : integer;

  /* определение FIRole */
  macro BatchGetBasisFIRole()
  end;

  /* определение параметров второго рода */
  macro BatchGetParameter( CatCode, ParmKind )
    
    if( ParmKind == MC_TYPE_PARAMETR_FIID )

      /* Финансовый инструмент */
      set_MC_TYPE_PARAMETR_FIID();

    elif( ParmKind == MC_TYPE_PARAMETR_DEPARTMENT )
      
      /* Филиал */
      set_MC_TYPE_PARAMETR_DEPARTMENT();

    end;

  end;

  /* определение параметров первого рода */
  macro BatchGetParameterTemplate( pCatCode, pParam, pClass, pValueIndex )
    var sqlStr = "", cmd;
    var p_ValueName : string;

    p_ValueName = "t_Value" + string(pValueIndex + 1);

    if( pClass == LLCLASS_CHAPTER_OCP )

      /* глава учета */
      set_param_LLCLASS_CHAPTER_OCP( p_ValueName );

    elif( pClass == LLCLASS_SIDEBALANCE_CORACCKIND )

      /* вид корреспондирующего счета */
      set_param_LLCLASS_SIDEBALANCE_CORACCKIND( p_ValueName );
    
    elif( (pClass == LLCLASS_KIND_AKT_BANK) or (pClass == LLCLASS_FI_KIND) )

      /* вид актива */
      set_param_LLCLASS_FI_KIND( p_ValueName );

    elif( pClass == LLCLASS_KIND_COURCE_DIF )
      
      /* вид курсовых разниц */
      set_param_LLCLASS_KIND_COURCE_DIF( p_ValueName );

    elif( pClass == LLCLASS_SYMBOLNUMBERS )

      /* знаков символа формы 102 */
      set_param_LLCLASS_SYMBOLNUMBERS( p_ValueName );

    elif( pClass == LLCLASS_DEAL_CASH_KIND )

      /* вид сделки: наличная или нет */
      set_param_LLCLASS_DEAL_CASH_KIND( p_ValueName );

    elif( pClass == LLCLASS_CODE_FI )

      /* код ФИ */
      set_param_LLCLASS_CODE_FI( p_ValueName );

    end;

  end;

  macro BatchCorrectAccount( categ )
    return true;
  end;

/* конструктор */  
  error = 0;

end;
