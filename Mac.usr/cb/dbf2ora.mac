/*----------------------------------------------------------------------------*/
/* Конвертация DBF-файда в таблицу ORACLE                                     */
/*----------------------------------------------------------------------------*/
// KS 26.11.2013 Адаптация под 31ю сборку

import likepy, oralib, "..\\obj\\dbfTOora.d32";

// Удалить таблицу
private macro dropTable( tbl_name:string ):bool
  return execSQL( string( "DROP TABLE ", tbl_name, ";" ) );
OnError(x)
  return true;
end;

// Очистить таблицу
private macro truncTable( tbl_name:string ):bool
  return execSQL( string( "TRUNCATE TABLE ", tbl_name, ";" ) );
end;

// Создать таблицу по ее описанию
private macro createTable( tbl_desc:string ):bool
  return execSQL( tbl_desc );
end;

// Запрос таблицы
private macro selectTable( selectStmt:string ):bool
  return execSQL( selectStmt );
end;

// Получить строку описания столбца таблицы
private macro getFldDesc(dbf_file, fld_num:integer):string
  var fld_name :string = "t_" + FldName(dbf_file, fld_num),
      fld_desc :string = "",
      long_str:string = MkStr("*", 1024);
  if( ValType(dbf_file(fld_num)) == V_STRING )
    dbf_file(fld_num) = long_str;
    fld_desc = string( fld_name, " VARCHAR2(", StrLen(dbf_file(fld_num)), ")" );
  elif( ValType(dbf_file(fld_num)) == V_INTEGER )
    fld_desc = string( fld_name, " NUMBER(10)" );
  elif( ValType(dbf_file(fld_num)) == V_DATE )
    fld_desc = string( fld_name, " DATE" );
  elif( ValType(dbf_file(fld_num)) == V_MONEY )
    fld_desc = string( fld_name, " NUMBER(19, 4)" );
  elif( ValType(dbf_file(fld_num)) == V_DOUBLE )
    fld_desc = string( fld_name, " FLOAT(53)" );
  elif( ValType(dbf_file(fld_num)) == V_BOOL )
    fld_desc = string( fld_name, " CHAR(1)" );
  else
    RunError("Неподдерживаемый тип поля \"" + fld_name + "\"");
  end;
  return fld_desc;
end;

// Получить строку значения для поля таблицы
private macro getFldValue(dbf_file, fld_num:integer):string
  var fld_value:variant = dbf_file(fld_num);
  if( ValType(fld_value) == V_STRING )
    return "'" + replace(fld_value, "'", "''") + "'";
  elif( ValType(fld_value) == V_INTEGER )
    return string(fld_value);
  elif( ValType(fld_value) == V_DATE )
    return string( "TO_DATE('", fld_value, "', 'DD-MM-YYYY')" );
  elif( ValType(fld_value) == V_MONEY )
    return replace( string(double(fld_value)), ",", "." );
  elif( ValType(fld_value) == V_DOUBLE )
    return replace( string(fld_value), ",", "." );
  elif( ValType(fld_value) == V_BOOL )
    return IfThenElse( fld_value, "chr(1)", "chr(0)" );
  else
    RunError("Неподдерживаемый тип поля \"" + FldName(dbf_file, fld_num) + "\"");
  end;
  return fld_value;
end;

// Вставить строку из DBF-файла в таблицу
private macro insertRow(dbf_file, tbl_name:string):bool
  var fld_names :TArray = TArray(),
      fld_values:TArray = TArray(),  
      i:integer = 0;
  while( i < FldNumber(dbf_file) )
    fld_names [fld_names .size] = "t_" + FldName(dbf_file, i);
    fld_values[fld_values.size] = getFldValue(dbf_file, i);
    i = i + 1;
  end;
  return execSQL( "INSERT INTO " + tbl_name + " "
                  "(" + join(fld_names, ", ") + ") " +
                  "VALUES (" + join(fld_VALUES, ", ") + ");" );
end;

//Сформировать команду INSERT-а
/*
private macro CreInsertStmt(dbf_file, tbl_name):string
  var fld_names :TArray = TArray(),
      fld_values:TArray = TArray(),  
      i:integer = 0;
  while( i < FldNumber(dbf_file) )
    fld_names [fld_names .size] = "t_" + FldName(dbf_file, i);
    fld_values [fld_values .size] = "?";
    i = i + 1;
  end;
  return ( "INSERT INTO " + tbl_name +
                  "(" + join(fld_names, ", ") + ") " +
                  "VALUES (" + join(fld_values, ", ") + ");" );
end;*/

//Сформировать команду SELECT-а
/*
private macro CreSelectStmt(dbf_file, tbl_name):string
  var fld_names :TArray = TArray(),
      i:integer = 0;
  while( i < FldNumber(dbf_file) )
    fld_names [fld_names .size] = "t_" + FldName(dbf_file, i);
    i = i + 1;
  end;*/
//  return ( "SELECT /*+FIRST_ROWS*/ " + join(fld_names, ", ") + " FROM " + tbl_name + ";" );
//end;

// Получить описание ORACLE-таблицы по образу и подобию DBF-файла
private macro getTableDescByDBF( dbf_file, tbl_name:string ):string
  var fields:TArray = TArray(),
      i:integer = 0;
  while( i < FldNumber(dbf_file) )
    fields[fields.size] = getFldDesc(dbf_file, i);
    i = i + 1;
  end;
  return "CREATE TABLE " + tbl_name + "\n"
         "(\n" + join(fields, ",\n") + "\n);";
end;

// Создать пустую ORACLE-таблицу из DBF-файла
macro createTableByDBF( dbf_file, tbl_name:string, err_text:@string )
  dropTable(tbl_name);
  return createTable(getTableDescByDBF(dbf_file, tbl_name));
OnError(err)
  err_text = err.Message;
  return false;
end;

// Запросить ORACLE-таблицу по DBF-файлу
/*
macro selectTableByDBF( dbf_file, tbl_name:string, err_text:@string )
  truncTable(tbl_name);
  return selectTable(CreSelectStmt(dbf_file, tbl_name));
OnError(err)
  err_text = err.Message;
  return false;
end;
*/

// Заполнить данные ORACLE-таблицы из DBF-файла
macro fillTableByDBF( dbf_file, dbf_name, tbl_name:string, msg_text:string, err_text:@string )
  var nrec:integer = 0;

/*  InitProgress(NRecords(dbf_file), msg_text, msg_text);
  rewind( dbf_file );
  while( next(dbf_file) )
    if( not insertRow(dbf_file, tbl_name) )
      RunError( "Не вставилась строка почему-то" );
    end;
    nrec = nrec + 1;
    UseProgress(nrec);
  end;
  RemProgress();
*/

  BulkInsertData(dbf_name, tbl_name, 1000);
  return true;

OnError(err)
  RemProgress();
  err_text = err.Message;
  return false;
end;

// Создать ORACLE-таблицу из DBF-файла и заполнить данными
macro dbf2ora( dbf_name:string, tbl_name:string, msg_text:string, err_text:string, recreate_table:bool ):bool
  var stat:bool = false;
  var err_text_inner:string;
  file dbf_file() DBF;
  if(not Open(dbf_file, dbf_name))
    RunError("Ошибка открытия \"" + dbf_name + "\"");
  end;
  if((recreate_table == null) or recreate_table)
    stat = createTableByDBF( dbf_file, tbl_name, @err_text_inner );
  else
    stat = true;
  //  stat = selectTableByDBF( dbf_file, tbl_name, @err_text_inner );
  end;
  if(stat)
    stat = fillTableByDBF( dbf_file, dbf_name, tbl_name, msg_text, @err_text_inner );
  end;
  Close(dbf_file);
  if(not stat)
    SetParm(3, err_text_inner);
  end;
  return stat;
OnError(err)
  SetParm(3, err.Message);
  return false;
end;
