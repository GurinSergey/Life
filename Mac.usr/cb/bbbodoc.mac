/***********************************************************************
          Автоматизированная банковская система RS-Bank v6.0           
                  Copyright (c) R-Style Software Lab                   
   Имя файла        : bbbodoc.mac
   Описание         : Макродействия банковских ордеров
   Создан           : 01.03.2011                                       
// KS 22.11.2013 Перенесены доработки из PS_CP.MAC
***********************************************************************/

import  pmbuff, PaymInter, BankInter, globals, FIInter, "pmchoper.mac", "pm_chksave.mac", "pm_common.mac", "likepy.mac", 
"pm_tools.mac", "diver.mac", "lib_const.mac";

class (TPanelFields)TBankOrderPanelFields()
  
  InitTPanelFields();
  Number = BO_P_FLD_Number;
  BaseAmount = BO_P_FLD_BaseAmount;
  FIID = BO_P_FLD_FICode;
  BaseFIID = BO_P_FLD_BaseFICode;
  PayFIID = BO_P_FLD_PayFICode;
  Priority = BO_P_FLD_Priority;
  NumberPack = BO_P_FLD_NumberPack;
  rmDate = BO_P_FLD_Date;
  ValueDate = BO_P_FLD_ValueDate;
  PayerAccount = BO_P_FLD_PayerAccount;
  ReceiverAccount = BO_P_FLD_ReceiverAccount;
  PayerName = BO_P_FLD_PayerName;
  Ground = BO_P_FLD_Ground; 

end;

macro BB_BankOrderNewDoc()
   return 0;
end;

/*
                      Пользовательская функция
     Режимы функции
        UFN_PANEL_INPUT = 1 - панель ввода
        UFN_PANEL_EDIT  = 2 - панель редактирования
        UFN_SCROL       = 3 - вызов из скроллинга
     (константы доступны при подключенном BankInter)
*/
macro BB_BankOrderUserFunc( режим )
   return 0;
end;

/* Проверка на числовой номер */
private macro IsDigitNumber( Number )

  var stat = 0, i = 1, ch, DigitString = "0123456789";

  while( (not stat) and (i <= strlen(Number)) )
    ch = SubStr( Number, i, 1 );
    if( not Index( DigitString, ch ))
      stat = 1;
    end;
    i = i + 1;
  end;

  return stat;

end;

private macro bo_IsCurAddPI( isCur:bool, rec:TRechandler ):bool
  return isCur or ( rec.rec.FIID != NATCUR );
end;

// Проверка наличия в счете разноски хоть одного валютного счета.
private macro IsCurAddPIPayment( PaymentObj:RsbPayment ):bool
  return ( reduce( PaymentObj.PIList( PRT_Debet  ).AsTArray(), @bo_IsCurAddPI, false )
        or reduce( PaymentObj.PIList( PRT_Credit ).AsTArray(), @bo_IsCurAddPI, false ) );
end;


private macro bo_SumPmAmount( sum:money, rec:TRecHandler ):money
  return sum + rec.rec.PmAmount;
end;

// Проверка корректности суммы разноски
private macro CheckAddPISum()

  macro ShowMenu( DebetCredit:integer ):integer
    return ConfWin( IfThenElse( DebetCredit == PRT_Debet, 
                                makeArray( "Ошибка в распределении суммы по дебету. Сохранить?"  ),
                                makeArray( "Ошибка в распределении суммы по кредиту. Сохранить?" ) ),
                    makeArray( " Да", " Нет" )
                  );
  end;

  var Payment:RsbBankOrder = RsbBankOrder( r_pmpaym.PaymentID );

  // Сторона разноски
  var DebetCredit:integer;
  if( Payment.PIList( PRT_Debet ).Size )
    DebetCredit = PRT_Debet;
  elif( Payment.PIList( PRT_Credit ).Size )
    DebetCredit = PRT_Credit;
  else
    return 0;
  end;
  
  // Подсчёт суммы разноски
  var stat:integer = 0;
  var sum :money   = reduce( Payment.PIList( DebetCredit ).AsTArray( stat ), @bo_SumPmAmount, $0 );
  if( stat )
    DisplayError();
  end;

  // Предупреждение
  if( sum != IfThenElse( DebetCredit == PRT_Debet, r_pmpaym.PayAmount, r_pmpaym.Amount ) )
    if( ShowMenu( DebetCredit ) == 1 )
      return BO_P_FLD_BaseAmount + 1;
    end;
  end;

  return 0;

end;

macro BB_BankOrderCheckDoc( mode )
  
  var PaymentObj:RsbPayment = RsbPayment(r_pmpaym.PaymentID);
  var fld:TBankOrderPanelFields = TBankOrderPanelFields();
  var retval:integer = 0;
  var Status:integer = -1, IndexStatus:integer = -1, PaymStatus:integer = -1;
  var errors:TArray = TArray();

  /* EVG Проверка номера пачки */
  if (r_pmpaym.NumberPack < 0)
      msgbox ( "Номер пачки не может быть отрицательным!" );
      return 42;
  end;
  // zmp 23.05.2014 #210490 >>>	
  if ( (mode == OBJ_UPDATE) and (r_pmpaym.PrimDocOrigin == PD_OR_SF) and ((r_pmpaym.Amount != r_pmpaym_old.Amount) or (r_pmpaym.PayAmount != r_pmpaym_old.PayAmount) or (r_pmpaym.BaseAmount != r_pmpaym_old.BaseAmount)) ) 
     r_pmpaym.FuturePayerAmount    = $0;
     r_pmpaym.FutureBaseAmount     = $0;
     r_pmpaym.FutureReceiverAmount = $0;
    
     if( r_pmpaym.Purpose == PM_PURP_CBANKORDER )
        if(r_pmpaym.IsFixAmount == "X")
           r_pmpaym.BaseAmount = r_pmpaym.Amount;
        else
           r_pmpaym.BaseAmount = r_pmpaym.PayAmount;
        end;
     elif( r_pmpaym.Purpose == PM_PURP_BANKORDER)
        r_pmpaym.Amount    = $0;
        r_pmpaym.PayAmount = $0;
     end;
  end;
  // <<< zmp 23.05.2014 #210490 

  /* EVG 11/03/2014 Теперь это и здесь тоже. Закомментил по аналогии с другими подобными проверками.
  if ( (mode == OBJ_UPDATE) and (r_pmpaym.PrimDocOrigin == PD_OR_SF) ) /*Если оплата комиссии, менять нельзя*/
    msgbox("Документ является платой за обслуживание.\nКорректировка реквизитов запрещена.");
    return 1;
  end;*/

  if( (mode == OBJ_INSERT) or (mode == OBJ_UPDATE) or (mode == OBJ_INSNOTOPR) )
    debugbreak;
    if(not PM_GetOprStatus( PaymentObj.DocKind, PaymentObj.DocumentID, OPR_PAYM_STATE, @PaymStatus ))
      return 1;
    end;

    if(not InList(r_pmpaym.PaymStatus, PM_PREPARING, PM_REJECTED) OR (PaymStatus == OPR_PM_ST_CLOSE) )
      if(not PM_GetOprStatus( PaymentObj.DocKind, PaymentObj.DocumentID, OPR_PAYM_CONTROL, @Status ))
        return 1;
      end;

      if(not PM_GetOprStatus( PaymentObj.DocKind, PaymentObj.DocumentID, OPR_PAYM_INDEX, @IndexStatus ))
        return 1;
      end;
      /* можно менять только документы, еще не прошедшие контроль, или документы К2, КОР */
      //TAM 10.12.2014 корректировка на ОП   
      //LVV 13.01.2015 Добавил проверку на группу 106, чтобы входящие в нее пользователи могли редактировать закрытые ордера
      if(((( PaymStatus == OPR_PM_ST_CLOSE/* может быть закрыт но не пройден контроль*/ ) 
     OR ( Status == OPR_PAYM_ST_CTRL_CONTROL ) ) and ( IndexStatus != OPR_PAYM_ST_INDEX_I2MEET ) and ( IndexStatus != OPR_PAYM_ST_INDEX_WP_MEET ) and ( IndexStatus != OPR_PAYM_ST_INDEX_WAIT)) and (not ВходитВГруппу({oper},ACS_GRP_CHANGE_PAYERNAME )))
        return CHANG_NOTKEEP;
      elif(IsImportantChangeBankOrder(r_pmpaym, r_pmpaym_old) == CHANGE_IMPORTANT)
        return CHANG_NOTKEEP;
      end;

    end;

    retval = BBBO_ScrolMacroCommonChecks( fld, r_pmpaym, r_debet, r_credit, r_pmrmprop );
    /* Проверка длин атрибутов*/
    if( (retval == NOTERROR) and ( r_pmpaym.Purpose == PM_PURP_CBANKORDER ))
      retval = CheckSave383PLength( r_pmpaym, r_debet, r_credit, r_pmrmprop );
    end;
    if(retval != NOTERROR)
      return retval;
    end;

    retval = CheckAddPISum();
    if( retval != 0 )
      return retval;
    end;

    if(r_pmpaym.Purpose == PM_PURP_CBANKORDER)
      
      if( (r_pmpaym.BaseFIID == NATCUR) and
          (r_pmpaym.FIID == NATCUR) and
          (r_pmpaym.PayFIID == NATCUR) and
          (not IsCurAddPIPayment(PaymentObj)) )
        msgbox("Валютный банковский ордер должен содержать хотя бы один счет в валюте");
        return 1;
      end;

    elif(r_pmpaym.Purpose == PM_PURP_BANKORDER)

      if( (r_pmpaym.BaseFIID != NATCUR) or
          (r_pmpaym.FIID != NATCUR) or
          //Gurin S. 21.03.2014 R-350093-2 Если есть разноска, то PayFIID = -1 	 
          //(r_pmpaym.PayFIID != NATCUR) or
          IsCurAddPIPayment(PaymentObj) )
        msgbox("Рублевый банковский ордер должен содержать все счета в рублях");
        return 1;
      end;

    end;

    if((r_pmpaym.Purpose == PM_PURP_CBANKORDER) or (r_pmpaym.Purpose == PM_PURP_BANKORDER))
      
      if( not StrIsNumber(r_pmrmprop.Number) )
        MsgBox("Номер документа нечисловой");
        return 1;
      else
         if( int(r_pmrmprop.Number) == 0 )
            MsgBox("Номер документа не может быть нулевым");
            return 1;
         end;
      end; 
    end;
  
    // проверка корректности курсов платежа
    if( CheckCorrectRateTypeOnDate( r_pmpaym, errors ) and errors.Size )
      msgbox( joinErrName( errors, "|" ) );
      return 1;
    end;

  elif(mode == OBJ_AFTEREDIT) // Проверка важности изменений влияющей на необходимость смены опера документа
                               // (изменения в буферах не сохраняются)
    return IsImportantChangeBankOrder(r_pmpaym, r_pmpaym_old);
  end;
  
  if( ( mode == OBJ_DELETE ) or ( mode == OBJ_UPDATE ) )

    if(not isDLMRuning())
      var Ban = IfThenElse( mode == OBJ_DELETE, "Удаление запрещено.", "Корректировка реквизитов запрещена." );
      if( r_pmpaym.PrimDocOrigin == PD_OR_SF ) 
        /* EVG 24/1/2014 Перенёс свой старый каммент. Удаление документов ПЗО разрешено, но только группе 116.
           Реализовано в макросе bnkorder.mac.
        msgbox("Документ является платой за обслуживание.|", Ban );
        return 1;*/
      elif( r_pmpaym.PrimDocOrigin == PD_OR_LOANS ) 
        if(not Index( "Ц", StrFor(GetIdentProgram())))
          msgbox("Документ порождён п/с \"Кредитование\".|", Ban );
          return 1;
        end;
      elif( r_pmpaym.PrimDocOrigin == PD_OR_RETAIL ) 
        if(not Index( "ВБD", StrFor(GetIdentProgram())))
          msgbox("Документ порождён п/с \"Обслуж.физ.лиц\".|", Ban );
          return 1;
        end;
      elif( (r_pmpaym.PrimDocOrigin == PD_OR_INCOUNTING) and 
          (( mode == OBJ_DELETE) or (not ПроверкаИдентичности(r_pmpaym, r_pmpaym_old, "CreationDate", "CreationTime"))) ) 
        msgbox("Документ порожден п/с \"Incounting\".|", Ban );
        return 1;
      end;
    end;
  end;
  
  if( mode == OBJ_UPDATE )
    if( ( r_pmpaym.PaymStatus == PM_REJECTED ) and ( r_pmpaym.PrimDocOrigin == PD_OR_AUTO ) )
      if( ПроверкаИдентичности(r_pmpaym, r_pmpaym_old, "Amount","FuturePayerAmount","PayAmount","FutureReceiverAmount",
                                                       "Rate","RateType","Point","Scale","RateDate","IsInverse",
                                                       "BaseRate","BaseRateType","BasePoint","BaseScale","BaseRateDate",
                                                       "IsBaseInverse"
                               ) and
          ПроверкаИдентичности( r_pmrmprop, r_pmrmprop_old ) and
          ПроверкаИдентичности( r_pmcurtr, r_pmcurtr_old )
        )
        return CHANG_NOTIMPORTANT;
      else
        return CHANG_NOTKEEP;
      end;
    end;
  end;

  return 0;

end;
