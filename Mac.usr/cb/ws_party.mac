import PTInter;
import BankInter;
import CTInter;
import rsd, oralib, likepy;
import ws_party_lib;
import ws_lib_fun;
import globals;
import GateInter;

private macro _CheckNewContrCodeIsOk(Code : string) : bool
  var query, rs;
  var params : TArray;
  query =         "SELECT 1 ";
  query = query + "  FROM dpartcode_dbt ";
  query = query + " WHERE t_CodeKind = :CodeKind ";
  query = query + "   AND t_Code = :Code ";
  params = makeArray(SQLParam("CodeKind", PTCK_CONTR)
                    ,SQLParam("Code", Code)
                    );
  rs = execSQLselect(query, params, true);
  if(rs and rs.moveNext())
    return false;
  end;
  return true;
end;

private macro _GenerateNewContrCode() : string
  record party("party");
  var Reference : string;
  var maxCount = 1000; /*столько попыток сформировать код субъекта*/
  GenerateReference(110, Reference, 0, party);
  while((not _CheckNewContrCodeIsOk(Reference)) and (maxCount > 0))
    GenerateReference(110, Reference, 0, party);
    maxCount = maxCount - 1;
  end;
  return Reference;
end;

private macro _DecodeWsPaperKind(WsPaperKind : string)
  var PaperKind = -1;
  var query, rs;
  var params : TArray;
  query =         "SELECT t_PaperKind ";
  query = query + "  FROM dpaprkind_dbt ";
  query = query + " WHERE t_CodeDocum = :CodeDocum ";
  params = makeArray(SQLParam("CodeDocum", WsPaperKind)
                    );
  rs = execSQLselect(query, params, true);
  if(rs and rs.moveNext())
    PaperKind = rs.value(0);
  end;                         
  return PaperKind;
end;

private macro _EncodeWsPaperKind(WsPaperKind : integer)
  var CodeDocum = "";
  var query, rs;
  var params : TArray;
  query =         "SELECT t_CodeDocum ";
  query = query + "  FROM dpaprkind_dbt ";
  query = query + " WHERE t_PaperKind = :PaperKind ";
  params = makeArray(SQLParam("PaperKind", WsPaperKind)
                    );
  rs = execSQLselect(query, params, true);
  if(rs and rs.moveNext())
    CodeDocum = rs.value(0);
  end;                         
  return CodeDocum;
end;

private macro _CheckWsAdresType(WsAdresType : integer)
  var query, rs;
  var params : TArray;
  query =         "SELECT 1 ";
  query = query + "  FROM dadrtype_dbt ";
  query = query + " WHERE t_Type = :Type ";
  params = makeArray(SQLParam("Type", WsAdresType)
                    );
  rs = execSQLselect(query, params, true);
  if(rs and rs.moveNext())
    return true;
  end;                         
  return false;
end;

private macro _DecodeWsRegPartyKind(ShortName : string)
  var RegPartyKind = -1;
  var query, rs;
  var params : TArray;
  query =         "SELECT t_RegPartyKind ";
  query = query + "  FROM dobjkrgpt_dbt ";
  query = query + " WHERE t_ShortName = :ShortName ";
  params = makeArray(SQLParam("ShortName", ShortName)
                    );
  rs = execSQLselect(query, params, true);
  if(rs and rs.moveNext())
    RegPartyKind = rs.value(0);
  end;                         
  return RegPartyKind;
end;

private macro _EncodeWsRegPartyKind(RegPartyKind : integer)
  var ShortName = "";
  var query, rs;
  var params : TArray;
  query =         "SELECT t_ShortName ";
  query = query + "  FROM dobjkrgpt_dbt ";
  query = query + " WHERE t_RegPartyKind = :RegPartyKind ";
  params = makeArray(SQLParam("RegPartyKind", RegPartyKind)
                    );
  rs = execSQLselect(query, params, true);
  if(rs and rs.moveNext())
    ShortName = rs.value(0);
  end;                         
  return ShortName;
end;

private macro _DecodeWsRegDocKind(ShortName : string)
  var RegDocKind = -1;
  var query, rs;
  var params : TArray;
  query =         "SELECT t_RegDocKind ";
  query = query + "  FROM dobjkdoc_dbt ";
  query = query + " WHERE t_ShortName = :ShortName ";
  query = query + "   AND t_ObjectType = :ObjectType ";
  params = makeArray(SQLParam("ShortName", ShortName)
                    ,SQLParam("ObjectType", OBJTYPE_PARTY)
                    );
  rs = execSQLselect(query, params, true);
  if(rs and rs.moveNext())
    RegDocKind = rs.value(0);
  end;                         
  return RegDocKind;
end;

private macro _EncodeWsRegDocKind(RegDocKind : integer)
  var ShortName = "";
  var query, rs;
  var params : TArray;
  query =         "SELECT t_ShortName ";
  query = query + "  FROM dobjkdoc_dbt ";
  query = query + " WHERE t_RegDocKind = :RegDocKind ";
  query = query + "   AND t_ObjectType = :ObjectType ";
  params = makeArray(SQLParam("RegDocKind", RegDocKind)
                    ,SQLParam("ObjectType", OBJTYPE_PARTY)
                    );
  rs = execSQLselect(query, params, true);
  if(rs and rs.moveNext())
    ShortName = rs.value(0);
  end;                         
  return ShortName;
end;

private macro _ProcessPersnParam
(
  Party : RsbParty
 ,AddMode : bool
 ,WsPersn /*: TWsPersn*/     /* Атрибуты физического лица. */
)
  Party.LegalForm = PTLEGF_PERSN;

  if(not (WsPersn.LastName           == null)) Party.LastName           = WsPersn.LastName          ; elif((not AddMode) and (strupr(WsPersn.Action) == "MODIFY_ALL")) Party.LastName           = ""           ; end;
  if(not (WsPersn.FirstName          == null)) Party.FirstName          = WsPersn.FirstName         ; elif((not AddMode) and (strupr(WsPersn.Action) == "MODIFY_ALL")) Party.FirstName          = ""           ; end;
  if(not (WsPersn.Patronymic         == null)) Party.Patronymic         = WsPersn.Patronymic        ; elif((not AddMode) and (strupr(WsPersn.Action) == "MODIFY_ALL")) Party.Patronymic         = ""           ; end;
  if(   AddMode 
     or (not (WsPersn.LastName   == null))
     or (not (WsPersn.FirstName  == null))
     or (not (WsPersn.Patronymic == null))
     or (strupr(WsPersn.Action) == "MODIFY_ALL")
    )
    Party.ShortName = Party.LastName + " " + substr(Party.FirstName, 1, 1) + ". " + substr(Party.Patronymic, 1, 1) + ".";
    Party.FullName  = Party.LastName + " " +        Party.FirstName        + " "  +        Party.Patronymic             ;
  end;
  if(not (WsPersn.BirthDate          == null)) Party.BirthDate          = WsPersn.BirthDate         ; elif((not AddMode) and (strupr(WsPersn.Action) == "MODIFY_ALL")) Party.BirthDate          = date(0, 0, 0); end;
  if(not (WsPersn.BirthPlace         == null)) Party.BirthPlace         = WsPersn.BirthPlace        ; elif((not AddMode) and (strupr(WsPersn.Action) == "MODIFY_ALL")) Party.BirthPlace         = ""           ; end;
  if(true                                    ) Party.IsMale             = (WsPersn.Male == 1)       ; elif((not AddMode) and (strupr(WsPersn.Action) == "MODIFY_ALL")) Party.IsMale             = false        ; end;
  if(not (WsPersn.Ethnos             == null)) Party.Ethnos             = WsPersn.Ethnos            ; elif((not AddMode) and (strupr(WsPersn.Action) == "MODIFY_ALL")) Party.Ethnos             = ""           ; end;
  if(not (WsPersn.IsEmployer         == null)) Party.IsEmployer         = WsPersn.IsEmployer        ; elif((not AddMode) and (strupr(WsPersn.Action) == "MODIFY_ALL")) Party.IsEmployer         = false        ; end;
  if(Party.IsEmployer)
  if(not (WsPersn.OKPO               == null)) Party.OKPO               = WsPersn.OKPO              ; elif((not AddMode) and (strupr(WsPersn.Action) == "MODIFY_ALL")) Party.OKPO               = ""           ; end;
  end;
  if(not (WsPersn.LicenceNumber      == null)) Party.LicenceNumber      = WsPersn.LicenceNumber     ; elif((not AddMode) and (strupr(WsPersn.Action) == "MODIFY_ALL")) Party.LicenceNumber      = ""           ; end;
  if(not (WsPersn.LicenceDate        == null)) Party.LicenceDate        = WsPersn.LicenceDate       ; elif((not AddMode) and (strupr(WsPersn.Action) == "MODIFY_ALL")) Party.LicenceDate        = date(0, 0, 0); end;
  if(not (WsPersn.RegionBorn         == null)) Party.RegionBorn         = WsPersn.RegionBorn        ; elif((not AddMode) and (strupr(WsPersn.Action) == "MODIFY_ALL")) Party.RegionBorn         = ""           ; end;
  if(not (WsPersn.RaionBorn          == null)) Party.RaionBorn          = WsPersn.RaionBorn         ; elif((not AddMode) and (strupr(WsPersn.Action) == "MODIFY_ALL")) Party.RaionBorn          = ""           ; end;
  if(not (WsPersn.PlaceBorn          == null)) Party.PlaceBorn          = WsPersn.PlaceBorn         ; elif((not AddMode) and (strupr(WsPersn.Action) == "MODIFY_ALL")) Party.PlaceBorn          = ""           ; end;
  if(not (WsPersn.PlaceWork          == null)) Party.PlaceWork          = WsPersn.PlaceWork         ; elif((not AddMode) and (strupr(WsPersn.Action) == "MODIFY_ALL")) Party.PlaceWork          = ""           ; end;
  if(not (WsPersn.DeathDate          == null)) Party.DeathDate          = WsPersn.DeathDate         ; elif((not AddMode) and (strupr(WsPersn.Action) == "MODIFY_ALL")) Party.DeathDate          = date(0, 0, 0); end;
  if(not (WsPersn.SectionPeople      == null)) Party.SectionPeople      = WsPersn.SectionPeople     ; elif((not AddMode) and (strupr(WsPersn.Action) == "MODIFY_ALL")) Party.SectionPeople      = 0            ; end;
  if(not (WsPersn.IsGroupAuthor      == null)) Party.IsGroupAuthor      = WsPersn.IsGroupAuthor     ; elif((not AddMode) and (strupr(WsPersn.Action) == "MODIFY_ALL")) Party.IsGroupAuthor      = false        ; end;
  if(not (WsPersn.IsGroupwil         == null)) Party.IsGroupwil         = WsPersn.IsGroupwil        ; elif((not AddMode) and (strupr(WsPersn.Action) == "MODIFY_ALL")) Party.IsGroupwil         = false        ; end;
  if(not (WsPersn.PensCardNumber     == null)) Party.PensCardNumber     = WsPersn.PensCardNumber    ; elif((not AddMode) and (strupr(WsPersn.Action) == "MODIFY_ALL")) Party.PensCardNumber     = ""           ; end;
  if(not (WsPersn.PensCardDate       == null)) Party.PensCardDate       = WsPersn.PensCardDate      ; elif((not AddMode) and (strupr(WsPersn.Action) == "MODIFY_ALL")) Party.PensCardDate       = date(0, 0, 0); end;
  if(not (WsPersn.IsLiterate         == null)) Party.IsLiterate         = WsPersn.IsLiterate        ; elif((not AddMode) and (strupr(WsPersn.Action) == "MODIFY_ALL")) Party.IsLiterate         = false        ; end;
  if(not (WsPersn.IsSpecialAccess    == null)) Party.IsSpecialAccess    = WsPersn.IsSpecialAccess   ; elif((not AddMode) and (strupr(WsPersn.Action) == "MODIFY_ALL")) Party.IsSpecialAccess    = false        ; end;
  if(not (WsPersn.IsInterRelated     == null)) Party.IsInterRelated     = WsPersn.IsInterRelated    ; elif((not AddMode) and (strupr(WsPersn.Action) == "MODIFY_ALL")) Party.IsInterRelated     = false        ; end;
  if(not (WsPersn.NRCountry          == null)) Party.NRCountry          = WsPersn.NRCountry         ; elif((not AddMode) and (strupr(WsPersn.Action) == "MODIFY_ALL")) Party.NRCountry          = ""           ; end;
  if(not (WsPersn.IsNotResident      == null)) Party.IsNotResident      = WsPersn.IsNotResident     ; elif((not AddMode) and (strupr(WsPersn.Action) == "MODIFY_ALL")) Party.IsNotResident      = false        ; end;
  if(not (WsPersn.IsOffshoreResident == null)) Party.IsOffshoreResident = WsPersn.IsOffshoreResident; elif((not AddMode) and (strupr(WsPersn.Action) == "MODIFY_ALL")) Party.IsOffshoreResident = false        ; end;
  if(not (WsPersn.TaxInstitution     == null)) Party.TaxInstitution     = WsPersn.TaxInstitution    ; elif((not AddMode) and (strupr(WsPersn.Action) == "MODIFY_ALL")) Party.TaxInstitution     = 0            ; end;
  if(not (WsPersn.TaxRegDate         == null)) Party.TaxRegDate         = WsPersn.TaxRegDate        ; elif((not AddMode) and (strupr(WsPersn.Action) == "MODIFY_ALL")) Party.TaxRegDate         = date(0, 0, 0); end;
  if(not (WsPersn.SetAccSearchAlg    == null)) Party.SetAccSearchAlg    = WsPersn.SetAccSearchAlg   ; elif((not AddMode) and (strupr(WsPersn.Action) == "MODIFY_ALL")) Party.SetAccSearchAlg    = 1            ; end;

  if(not (WsPersn.SysType            == null)) Party.SysType            = WsPersn.SysType           ; elif((not AddMode) and (strupr(WsPersn.Action) == "MODIFY_ALL")) Party.SysType            = ""           ; end;
  if(not (WsPersn.UserType           == null)) Party.UserType           = WsPersn.UserType          ; elif((not AddMode) and (strupr(WsPersn.Action) == "MODIFY_ALL")) Party.UserType           = ""           ; end;
  if(not (WsPersn.UserField1         == null)) Party.UserField1         = WsPersn.UserField1        ; elif((not AddMode) and (strupr(WsPersn.Action) == "MODIFY_ALL")) Party.UserField1         = ""           ; end;
  if(not (WsPersn.UserField2         == null)) Party.UserField2         = WsPersn.UserField2        ; elif((not AddMode) and (strupr(WsPersn.Action) == "MODIFY_ALL")) Party.UserField2         = ""           ; end;
  if(not (WsPersn.UserField3         == null)) Party.UserField3         = WsPersn.UserField3        ; elif((not AddMode) and (strupr(WsPersn.Action) == "MODIFY_ALL")) Party.UserField3         = ""           ; end;
  if(not (WsPersn.UserField4         == null)) Party.UserField4         = WsPersn.UserField4        ; elif((not AddMode) and (strupr(WsPersn.Action) == "MODIFY_ALL")) Party.UserField4         = ""           ; end;
  
end;

private macro _ProcessInstParam
(
  Party : RsbParty
 ,AddMode : bool
 ,WsInst /*: TWsInst*/       /* Атрибуты юридического лица. */
)
  Party.LegalForm = PTLEGF_INST;

  if(not (WsInst.ShortName          == null)) Party.ShortName          = WsInst.ShortName         ; elif((not AddMode) and (strupr(WsInst.Action) == "MODIFY_ALL")) Party.ShortName          = ""           ; end;
  if(not (WsInst.FullName           == null)) Party.FullName           = WsInst.FullName          ; elif((not AddMode) and (strupr(WsInst.Action) == "MODIFY_ALL")) Party.FullName           = ""           ; end;
  if(not (WsInst.IsNotResident      == null)) Party.IsNotResident      = WsInst.IsNotResident     ; elif((not AddMode) and (strupr(WsInst.Action) == "MODIFY_ALL")) Party.IsNotResident      = false        ; end;
  if(not (WsInst.NRCountry          == null)) Party.NRCountry          = WsInst.NRCountry         ; elif((not AddMode) and (strupr(WsInst.Action) == "MODIFY_ALL")) Party.NRCountry          = ""           ; end;
  if(not (WsInst.SuperiorID         == null)) Party.SuperiorID         = WsInst.SuperiorID        ; elif((not AddMode) and (strupr(WsInst.Action) == "MODIFY_ALL")) Party.SuperiorID         = 0            ; end;
  if(not (WsInst.TaxInstitution     == null)) Party.TaxInstitution     = WsInst.TaxInstitution    ; elif((not AddMode) and (strupr(WsInst.Action) == "MODIFY_ALL")) Party.TaxInstitution     = 0            ; end;
  if(not (WsInst.TaxRegDate         == null)) Party.TaxRegDate         = WsInst.TaxRegDate        ; elif((not AddMode) and (strupr(WsInst.Action) == "MODIFY_ALL")) Party.TaxRegDate         = date(0, 0, 0); end;
  if(not (WsInst.SetAccSearchAlg    == null)) Party.SetAccSearchAlg    = WsInst.SetAccSearchAlg   ; elif((not AddMode) and (strupr(WsInst.Action) == "MODIFY_ALL")) Party.SetAccSearchAlg    = 1            ; end;

  if(not (WsInst.OKPO               == null)) Party.OKPO               = WsInst.OKPO              ; elif((not AddMode) and (strupr(WsInst.Action) == "MODIFY_ALL")) Party.OKPO               = ""           ; end;
  if(not (WsInst.SysType            == null)) Party.SysType            = WsInst.SysType           ; elif((not AddMode) and (strupr(WsInst.Action) == "MODIFY_ALL")) Party.SysType            = ""           ; end;
  if(not (WsInst.UserType           == null)) Party.UserType           = WsInst.UserType          ; elif((not AddMode) and (strupr(WsInst.Action) == "MODIFY_ALL")) Party.UserType           = ""           ; end;
  if(not (WsInst.UserField1         == null)) Party.UserField1         = WsInst.UserField1        ; elif((not AddMode) and (strupr(WsInst.Action) == "MODIFY_ALL")) Party.UserField1         = ""           ; end;
  if(not (WsInst.UserField2         == null)) Party.UserField2         = WsInst.UserField2        ; elif((not AddMode) and (strupr(WsInst.Action) == "MODIFY_ALL")) Party.UserField2         = ""           ; end;
  if(not (WsInst.UserField3         == null)) Party.UserField3         = WsInst.UserField3        ; elif((not AddMode) and (strupr(WsInst.Action) == "MODIFY_ALL")) Party.UserField3         = ""           ; end;
  if(not (WsInst.UserField4         == null)) Party.UserField4         = WsInst.UserField4        ; elif((not AddMode) and (strupr(WsInst.Action) == "MODIFY_ALL")) Party.UserField4         = ""           ; end;

end;

private macro _ProcessCodes
(
  Party : RsbParty
 ,AddMode : bool
 ,Codes /*: TArray*/            /* Коды субъекта (массив структур TWsPartyCode). */
)
  var SetContrCode = true;
  var i = 0;
  var WsPartyCode/* : TWsPartyCode*/;
  var stat;

  if((not (Codes == null)) and (Codes.size > 0))
    i = 0;
    while(i < Codes.size)
      WsPartyCode = Codes[i];
      if((WsPartyCode.CodeKind == null) or (WsPartyCode.CodeKind == 0))
        RunError("Не задано обязательное поле: вид кода", WS_ERR_FLDNOTSET);
      end;
      i = i + 1;
    end;

    i = 0;
    while(i < Codes.size)
      WsPartyCode = Codes[i];
      if(strlen(WsPartyCode.Code) > 0)
        if(AddMode or (WsPartyCode.Action == null) or (strupr(WsPartyCode.Action) == "ADD"))
          stat = Party.Code.SetCode(WsPartyCode.CodeKind, WsPartyCode.Code);
          if(not stat)
            RunError("Ошибка установки кода вида " + string(WsPartyCode.CodeKind));
          end;
          if(WsPartyCode.CodeKind == 1)
            SetContrCode = false;
          end;
        elif(strupr(WsPartyCode.Action) == "CLOSE")
          stat = Party.Code.CloseCode(WsPartyCode.CodeKind);
          if(not stat)
            RunError("Ошибка закрытия кода вида " + string(WsPartyCode.CodeKind));
          end;
        elif(strupr(WsPartyCode.Action) == "OPEN")
          stat = Party.Code.OpenCode(WsPartyCode.CodeKind);
          if(not stat)
            RunError("Ошибка открытия кода вида " + string(WsPartyCode.CodeKind));
          end;
        elif(strupr(WsPartyCode.Action) == "REMOVE")
          stat = Party.Code.DeleteCode(WsPartyCode.CodeKind);
          if(not stat)
            RunError("Ошибка удаления кода вида " + string(WsPartyCode.CodeKind));
          end;
        end;
      end;
      i = i + 1;
    end;
  end;

  if(AddMode and SetContrCode)
    stat = Party.Code.SetCode(PTCK_CONTR, _GenerateNewContrCode());
    if(not stat)
      RunError("Ошибка установки кода вида 1");
    end;
  end;
end;

private macro _ProcessClientParam
(
  Party : RsbParty
 ,AddMode : bool
 ,WsClient /*: TWsClient*/   /* Параметры клиента вида обслуживания. */
)
  var stat;
  var Branch;
  var WsClientElem;
  var i = 0;

  if(GenPropID(WsClient, "size") != -1)
    while(i < WsClient.size)
      WsClientElem = WsClient[i];
      _ProcessClientParam(Party, AddMode, WsClientElem);
      i = i + 1;
    end;
  else

  if(not (WsClient == null))
    /*Чтобы сохранились изменения в видах обслуживания*/
    Party.FullName = Party.FullName;
    
    //if((WsClient.Branch == null) or (WsClient.Branch == 0))
      Branch = WsClient.Department;
    //else
    //  Branch = WsClient.Branch;
    //end;
    
    if(AddMode or (WsClient.Action == null) or (strupr(WsClient.Action) == "ADD"))
      stat = PT_BindClientWithBranch(Party.PartyID, WsClient.ServKind, Branch, WsClient.OperNum, WsClient.StartDate);
      if(not stat)
        RunError("Ошибка установки вида обслуживания");
      end;
      if((not (WsClient.FinishDate == null)))
        stat = PT_CloseClientService(Party.PartyID, WsClient.ServKind, WsClient.FinishDate, true);
        if(not stat)
          RunError("Ошибка закрытия вида обслуживания");
        end;
      end;
    elif(strupr(WsClient.Action) == "CLOSE")
      if((not (WsClient.FinishDate == null)))
        stat = PT_CloseClientService(Party.PartyID, WsClient.ServKind, WsClient.FinishDate, true);
      else
        stat = PT_CloseClientService(Party.PartyID, WsClient.ServKind, {curdate}, true);
      end;
      if(not stat)
        RunError("Ошибка закрытия вида обслуживания");
      end;
    elif(strupr(WsClient.Action) == "REMOVE")
      stat = PT_DeleteClientService(Party.PartyID, WsClient.ServKind);
      if(stat != 0)
        RunError("Ошибка удаления вида обслуживания");
      end;
    end;
  end;

  end;
  return stat;
end;

private macro _ProcessAdresses
(
  Party : RsbParty
 ,AddMode : bool
 ,Adresses /*: TArray*/         /* Адреса субъекта (массив структур TWsAdres). */
)
  var i = 0;
  var j = 0;
  var WsAdres /*: TWsAdres*/;
  var PartyAddress : RsbPartyAddress;

  if((not (Adresses == null)) and (Adresses.size > 0))
    i = 0;
    while(i < Adresses.size)
      WsAdres = Adresses[i];
      if(WsAdres.Type == null)
        RunError("Не задано обязательное поле: тип адреса", WS_ERR_FLDNOTSET);
      end;
      
      j = 0;
      while(j < WsAdres.Type.size)
        if(WsAdres.Type[j] == null)
          RunError("Не задано обязательное поле: тип адреса", WS_ERR_FLDNOTSET);
        end;
        if(not _CheckWsAdresType(WsAdres.Type[j]))
          RunError("Задано некорректное значение поля: тип адреса", WS_ERR_FLDNOTCORRECT);
        end;
        j = j + 1;
      end;
      i = i + 1;
    end;

    i = 0;
    while(i < Adresses.size)
      WsAdres = Adresses[i];

      j = 0;
      while(j < WsAdres.Type.size)
        PartyAddress = Party.Address(WsAdres.Type[j]);
        if((not AddMode) and (strupr(WsAdres.Action) == "REMOVE"))
          PartyAddress.Delete();
        else
          if(not (WsAdres.Country      == null)) PartyAddress.Country      = WsAdres.Country     ; elif((not AddMode) and (strupr(WsAdres.Action) == "MODIFY_ALL")) PartyAddress.Country      = ""; end;
          if(not (WsAdres.Territory    == null)) PartyAddress.Territory    = WsAdres.Territory   ; elif((not AddMode) and (strupr(WsAdres.Action) == "MODIFY_ALL")) PartyAddress.Territory    = ""; end;
          if(not (WsAdres.PostIndex    == null)) PartyAddress.PostIndex    = WsAdres.PostIndex   ; elif((not AddMode) and (strupr(WsAdres.Action) == "MODIFY_ALL")) PartyAddress.PostIndex    = ""; end;
          if(not (WsAdres.CodeRegion   == null)) PartyAddress.CodeRegion   = WsAdres.CodeRegion  ; elif((not AddMode) and (strupr(WsAdres.Action) == "MODIFY_ALL")) PartyAddress.CodeRegion   = ""; end;
          if(not (WsAdres.Region       == null)) PartyAddress.Region       = WsAdres.Region      ; elif((not AddMode) and (strupr(WsAdres.Action) == "MODIFY_ALL")) PartyAddress.Region       = ""; end;
          if(not (WsAdres.RegionNumber == null)) PartyAddress.RegionNumber = WsAdres.RegionNumber; elif((not AddMode) and (strupr(WsAdres.Action) == "MODIFY_ALL")) PartyAddress.RegionNumber = ""; end;
          if(not (WsAdres.CodeProvince == null)) PartyAddress.CodeProvince = WsAdres.CodeProvince; elif((not AddMode) and (strupr(WsAdres.Action) == "MODIFY_ALL")) PartyAddress.CodeProvince = ""; end;
          if(not (WsAdres.Province     == null)) PartyAddress.Province     = WsAdres.Province    ; elif((not AddMode) and (strupr(WsAdres.Action) == "MODIFY_ALL")) PartyAddress.Province     = ""; end;
          if(not (WsAdres.CodeDistrict == null)) PartyAddress.CodeDistrict = WsAdres.CodeDistrict; elif((not AddMode) and (strupr(WsAdres.Action) == "MODIFY_ALL")) PartyAddress.CodeDistrict = ""; end;
          if(not (WsAdres.District     == null)) PartyAddress.District     = WsAdres.District    ; elif((not AddMode) and (strupr(WsAdres.Action) == "MODIFY_ALL")) PartyAddress.District     = ""; end;
          if(not (WsAdres.CodePlace    == null)) PartyAddress.CodePlace    = WsAdres.CodePlace   ; elif((not AddMode) and (strupr(WsAdres.Action) == "MODIFY_ALL")) PartyAddress.CodePlace    = ""; end;
          if(not (WsAdres.Place        == null)) PartyAddress.Place        = WsAdres.Place       ; elif((not AddMode) and (strupr(WsAdres.Action) == "MODIFY_ALL")) PartyAddress.Place        = ""; end;
          if(not (WsAdres.CodeStreet   == null)) PartyAddress.CodeStreet   = WsAdres.CodeStreet  ; elif((not AddMode) and (strupr(WsAdres.Action) == "MODIFY_ALL")) PartyAddress.CodeStreet   = ""; end;
          if(not (WsAdres.Street       == null)) PartyAddress.Street       = WsAdres.Street      ; elif((not AddMode) and (strupr(WsAdres.Action) == "MODIFY_ALL")) PartyAddress.Street       = ""; end;
          if(not (WsAdres.House        == null)) PartyAddress.House        = WsAdres.House       ; elif((not AddMode) and (strupr(WsAdres.Action) == "MODIFY_ALL")) PartyAddress.House        = ""; end;
          if(not (WsAdres.NumCorps     == null)) PartyAddress.NumCorps     = WsAdres.NumCorps    ; elif((not AddMode) and (strupr(WsAdres.Action) == "MODIFY_ALL")) PartyAddress.NumCorps     = ""; end;
          if(not (WsAdres.Flat         == null)) PartyAddress.Flat         = WsAdres.Flat        ; elif((not AddMode) and (strupr(WsAdres.Action) == "MODIFY_ALL")) PartyAddress.Flat         = ""; end;
          if(not (WsAdres.Adress       == null)) PartyAddress.Address      = WsAdres.Adress      ; elif((not AddMode) and (strupr(WsAdres.Action) == "MODIFY_ALL")) PartyAddress.Address      = ""; end;
          if(not (WsAdres.Kladr        == null)) PartyAddress.Kladr        = WsAdres.Kladr       ; elif((not AddMode) and (strupr(WsAdres.Action) == "MODIFY_ALL")) PartyAddress.Kladr        = ""; end;
          if(not (WsAdres.Okato        == null)) PartyAddress.Okato        = WsAdres.Okato       ; elif((not AddMode) and (strupr(WsAdres.Action) == "MODIFY_ALL")) PartyAddress.Okato        = ""; end;
        end;
        j = j + 1;
      end;
      i = i + 1;
    end;
  end;
end;

private macro _GetEmptyPartyAddressType
(
  PartyAddress : RsbPartyAddress
 ,WsContactInfo /*: TWsContactInfo*/
)
  var AddressType = -1;
  if  ((WsContactInfo.Kind == 1) and (WsContactInfo.Category == 1))
    if((PartyAddress.MobilePhone == "") and (PartyAddress.MobileProvider == ""))
      AddressType = PartyAddress.AddressType;
    end;
  elif((WsContactInfo.Kind == 1) and (WsContactInfo.Category == 2))
    if((PartyAddress.PhoneNumberAd == ""))
      AddressType = PartyAddress.AddressType;
    end;
  elif((WsContactInfo.Kind == 1) and (WsContactInfo.Category == 3))
    if((PartyAddress.PhoneNumber == ""))
      AddressType = PartyAddress.AddressType;
    end;
  elif((WsContactInfo.Kind == 2))
    if((PartyAddress.EMail == ""))
      AddressType = PartyAddress.AddressType;
    end;
  elif((WsContactInfo.Kind == 3))
    if((PartyAddress.TelexNumber == ""))
      AddressType = PartyAddress.AddressType;
    end;
  elif((WsContactInfo.Kind == 4))
    if((PartyAddress.Telegraph == ""))
      AddressType = PartyAddress.AddressType;
    end;
  elif((WsContactInfo.Kind == 5))
    if((PartyAddress.RS_Mail_Country == "") and (PartyAddress.RS_Mail_Region == "") and (PartyAddress.RS_Mail_Node == ""))
      AddressType = PartyAddress.AddressType;
    end;
  end;
  return AddressType;
end;

private macro _GetFreePartyAddressType
(
  Party : RsbParty
 ,WsContactInfo /*: TWsContactInfo*/
)
  var PartyAddress : RsbPartyAddress;
  var AddressType = -1;
  var query, rs;
  var params : TArray;
  query =         "SELECT t_Type ";
  query = query + "  FROM dadrtype_dbt ";
  query = query + " WHERE t_Type NOT IN ";
  query = query + "         (0 ";

  PartyAddress = Party.Address(0);

  if(PartyAddress.First())
    query = query + "," + string(PartyAddress.AddressType);
    while(PartyAddress.Next())
      query = query + "," + string(PartyAddress.AddressType);
    end;
  end;
  query = query + "         ) ";
  params = makeArray();
  rs = execSQLselect(query, params, true);
  if(rs and rs.moveNext())
    AddressType = rs.value(0);
  end;                         

  if((AddressType < 0) and (PartyAddress.First()))
    AddressType = _GetEmptyPartyAddressType(PartyAddress, WsContactInfo);
    while((AddressType < 0) and (PartyAddress.Next()))
      AddressType = _GetEmptyPartyAddressType(PartyAddress, WsContactInfo);
    end;
  end;

  return AddressType;
end;

private macro _FillPartyAddressByWs
(
  PartyAddress : RsbPartyAddress
 ,AddMode : bool
 ,WsContactInfo /*: TWsContactInfo*/
)
  if  ((WsContactInfo.Kind == 1) and (WsContactInfo.Category == 1))
    if((not (WsContactInfo.Value          == null)) and (strupr(WsContactInfo.Action) != "REMOVE")) 
      PartyAddress.MobilePhone    = WsContactInfo.Value         ; 
    elif((not AddMode) and ((strupr(WsContactInfo.Action) == "MODIFY_ALL") or (strupr(WsContactInfo.Action) == "REMOVE"))) 
      PartyAddress.MobilePhone    = ""; 
    end;
    if((not (WsContactInfo.MobileProvider == null)) and (strupr(WsContactInfo.Action) != "REMOVE")) 
      PartyAddress.MobileProvider = WsContactInfo.MobileProvider; 
    elif((not AddMode) and ((strupr(WsContactInfo.Action) == "MODIFY_ALL") or (strupr(WsContactInfo.Action) == "REMOVE"))) 
      PartyAddress.MobileProvider = ""; 
    end;
  elif((WsContactInfo.Kind == 1) and (WsContactInfo.Category == 2))
    if((not (WsContactInfo.Value == null)) and (not (WsContactInfo.PhoneNumber2 == null)) and (strupr(WsContactInfo.Action) != "REMOVE")) 
      PartyAddress.PhoneNumberAd = WsContactInfo.Value + ", " + WsContactInfo.PhoneNumber2;
    elif((not (WsContactInfo.Value == null)) and (strupr(WsContactInfo.Action) != "REMOVE"))
      PartyAddress.PhoneNumberAd = WsContactInfo.Value;
    elif((not (WsContactInfo.PhoneNumber2 == null)) and (strupr(WsContactInfo.Action) != "REMOVE"))
      PartyAddress.PhoneNumberAd = WsContactInfo.PhoneNumber2;
    elif((not AddMode) and ((strupr(WsContactInfo.Action) == "MODIFY_ALL") or (strupr(WsContactInfo.Action) == "REMOVE")))
      PartyAddress.PhoneNumberAd = "";
    end;
  elif((WsContactInfo.Kind == 1) and (WsContactInfo.Category == 3))
    if((not (WsContactInfo.Value == null)) and (not (WsContactInfo.PhoneNumber2 == null)) and (strupr(WsContactInfo.Action) != "REMOVE")) 
      PartyAddress.PhoneNumber = WsContactInfo.Value + ", " + WsContactInfo.PhoneNumber2;
    elif((not (WsContactInfo.Value == null)) and (strupr(WsContactInfo.Action) != "REMOVE"))
      PartyAddress.PhoneNumber = WsContactInfo.Value;
    elif((not (WsContactInfo.PhoneNumber2 == null)) and (strupr(WsContactInfo.Action) != "REMOVE"))
      PartyAddress.PhoneNumber = WsContactInfo.PhoneNumber2;
    elif((not AddMode) and ((strupr(WsContactInfo.Action) == "MODIFY_ALL") or (strupr(WsContactInfo.Action) == "REMOVE")))
      PartyAddress.PhoneNumber = "";
    end;
  elif((WsContactInfo.Kind == 2))
    if((not (WsContactInfo.Value == null)) and (strupr(WsContactInfo.Action) != "REMOVE")) 
      PartyAddress.EMail = WsContactInfo.Value; 
    elif((not AddMode) and ((strupr(WsContactInfo.Action) == "MODIFY_ALL") or (strupr(WsContactInfo.Action) == "REMOVE"))) 
      PartyAddress.EMail = ""; 
    end;
  elif((WsContactInfo.Kind == 3))
    if((not (WsContactInfo.Value == null)) and (strupr(WsContactInfo.Action) != "REMOVE")) 
      PartyAddress.TelexNumber = WsContactInfo.Value; 
    elif((not AddMode) and ((strupr(WsContactInfo.Action) == "MODIFY_ALL") or (strupr(WsContactInfo.Action) == "REMOVE"))) 
      PartyAddress.TelexNumber = ""; 
    end;
  elif((WsContactInfo.Kind == 4))
    if((not (WsContactInfo.Value == null)) and (strupr(WsContactInfo.Action) != "REMOVE")) 
      PartyAddress.Telegraph = WsContactInfo.Value; 
    elif((not AddMode) and ((strupr(WsContactInfo.Action) == "MODIFY_ALL") or (strupr(WsContactInfo.Action) == "REMOVE"))) 
      PartyAddress.Telegraph = ""; 
    end;
  elif((WsContactInfo.Kind == 5))
    if((not (WsContactInfo.RS_Mail_Country == null)) and (strupr(WsContactInfo.Action) != "REMOVE")) 
      PartyAddress.RS_Mail_Country = WsContactInfo.RS_Mail_Country; 
    elif((not AddMode) and ((strupr(WsContactInfo.Action) == "MODIFY_ALL") or (strupr(WsContactInfo.Action) == "REMOVE"))) 
      PartyAddress.RS_Mail_Country = ""; 
    end;
    if((not (WsContactInfo.RS_Mail_Region  == null)) and (strupr(WsContactInfo.Action) != "REMOVE")) 
      PartyAddress.RS_Mail_Region  = WsContactInfo.RS_Mail_Region ; 
    elif((not AddMode) and ((strupr(WsContactInfo.Action) == "MODIFY_ALL") or (strupr(WsContactInfo.Action) == "REMOVE"))) 
      PartyAddress.RS_Mail_Region  = ""; 
    end;
    if((not (WsContactInfo.RS_Mail_Node    == null)) and (strupr(WsContactInfo.Action) != "REMOVE")) 
      PartyAddress.RS_Mail_Node    = WsContactInfo.RS_Mail_Node   ; 
    elif((not AddMode) and ((strupr(WsContactInfo.Action) == "MODIFY_ALL") or (strupr(WsContactInfo.Action) == "REMOVE"))) 
      PartyAddress.RS_Mail_Node    = ""; 
    end;
  end;
end;

private macro _ProcessContacts
(
  Party : RsbParty
 ,AddMode : bool
 ,Contacts /*: TArray*/         /* Контакты субъекта (массив структур TWsContactInfo). */
)
  var i = 0;
  var WsContactInfo /*: TWsContactInfo*/;
  var PartyAddress : RsbPartyAddress;
  var AddressType = -1;

  if((not (Contacts == null)) and (Contacts.size > 0))
    i = 0;
    while(i < Contacts.size)
      WsContactInfo = Contacts[i];
      if((not (WsContactInfo.AdresType == null)) and _CheckWsAdresType(WsContactInfo.AdresType))
        PartyAddress = Party.Address(WsContactInfo.AdresType);
        _FillPartyAddressByWs(PartyAddress, AddMode, WsContactInfo);
      end;
      i = i + 1;
    end;

    i = 0;
    while(i < Contacts.size)
      WsContactInfo = Contacts[i];
      if((WsContactInfo.AdresType == null) or (not _CheckWsAdresType(WsContactInfo.AdresType)))
        AddressType = _GetFreePartyAddressType(Party, WsContactInfo);
        PartyAddress = Party.Address(AddressType);
        _FillPartyAddressByWs(PartyAddress, AddMode, WsContactInfo);
      end;
      i = i + 1;
    end;
  end;
end;

private macro _ProcessPersnPapers
(
  Party : RsbParty
 ,AddMode : bool
 ,PersnPapers /*: TArray*/      /* Документы, удостоверяющие личность личность (массив структур TWsPaper). */
)
  var i = 0;
  var WsPaper /*: TWsPaper*/;
  var PersonPaper : RsbPersonPaper;

  if((not (PersnPapers == null)) and (PersnPapers.size > 0))
    i = 0;
    while(i < PersnPapers.size)
      WsPaper = PersnPapers[i];
      if((WsPaper.Kind == null) or (strlen(WsPaper.Kind) == 0))
        RunError("Не задано обязательное поле: вид документа, удостоверяющего личность", WS_ERR_FLDNOTSET);
      end;
      if(_DecodeWsPaperKind(WsPaper.Kind) < 0)
        RunError("Задано некорректное значение поля: вид документа, удостоверяющего личность", WS_ERR_FLDNOTCORRECT);
      end;
      i = i + 1;
    end;

    i = 0;
    while(i < PersnPapers.size)
      WsPaper = PersnPapers[i];
      PersonPaper = Party.PersonPaper(_DecodeWsPaperKind(WsPaper.Kind));
      if((not AddMode) and (strupr(WsPaper.Action) == "REMOVE"))
        PersonPaper.Delete();
      else
        if(not (WsPaper.Series     == null)) PersonPaper.Series     = WsPaper.Series    ; elif((not AddMode) and (strupr(WsPaper.Action) == "MODIFY_ALL")) PersonPaper.Series     = ""           ; end;
        if(not (WsPaper.Number     == null)) PersonPaper.Number     = WsPaper.Number    ; elif((not AddMode) and (strupr(WsPaper.Action) == "MODIFY_ALL")) PersonPaper.Number     = ""           ; end;
        if(not (WsPaper.IssuedDate == null)) PersonPaper.IssuedDate = WsPaper.IssuedDate; elif((not AddMode) and (strupr(WsPaper.Action) == "MODIFY_ALL")) PersonPaper.IssuedDate = date(0, 0, 0); end;
        if(not (WsPaper.Issuer     == null)) PersonPaper.Issuer     = WsPaper.Issuer    ; elif((not AddMode) and (strupr(WsPaper.Action) == "MODIFY_ALL")) PersonPaper.Issuer     = ""           ; end;
        if(not (WsPaper.IssuerCode == null)) PersonPaper.IssuerCode = WsPaper.IssuerCode; elif((not AddMode) and (strupr(WsPaper.Action) == "MODIFY_ALL")) PersonPaper.IssuerCode = ""           ; end;
        if(not (WsPaper.IsMain     == null)) PersonPaper.IsMain     = WsPaper.IsMain    ; elif((not AddMode) and (strupr(WsPaper.Action) == "MODIFY_ALL")) PersonPaper.IsMain     = false        ; end;
      end;
      i = i + 1;
    end;
  end;
end;

private macro _ProcessRegDocs
(
  Party : RsbParty
 ,AddMode : bool
 ,RegDocs /*: TArray*/          /* Регистрационные документы (массив структур TWsRegDoc). */
)
  var i = 0;
  var WsRegDoc /*: TWsRegDoc*/;
  var PartyRegDoc : RsbPartyRegDoc;

  if((not (RegDocs == null)) and (RegDocs.size > 0))
    i = 0;
    while(i < RegDocs.size)
      WsRegDoc = RegDocs[i];
      if((WsRegDoc.RegDocKind == null) or (strlen(WsRegDoc.RegDocKind) == 0))
        RunError("Не задано обязательное поле: вид регистрационного документа", WS_ERR_FLDNOTSET);
      end;
      if((WsRegDoc.RegPartyKind == null) or (strlen(WsRegDoc.RegPartyKind) == 0))
        RunError("Не задано обязательное поле: вид регистрационного органа", WS_ERR_FLDNOTSET);
      end;
      if(_DecodeWsRegDocKind(WsRegDoc.RegDocKind) < 0)
        RunError("Задано некорректное значение поля: вид регистрационного документа", WS_ERR_FLDNOTCORRECT);
      end;
      if(_DecodeWsRegPartyKind(WsRegDoc.RegPartyKind) < 0)
        RunError("Задано некорректное значение поля: вид регистрационного органа", WS_ERR_FLDNOTCORRECT);
      end;
      i = i + 1;
    end;

    i = 0;
    while(i < RegDocs.size)
      WsRegDoc = RegDocs[i];
      PartyRegDoc = Party.PartyRegDoc(_DecodeWsRegPartyKind(WsRegDoc.RegPartyKind), _DecodeWsRegDocKind(WsRegDoc.RegDocKind));
      if((not AddMode) and (strupr(WsRegDoc.Action) == "REMOVE"))
        PartyRegDoc.Delete();
      else
        if(not (WsRegDoc.Series        == null)) PartyRegDoc.Series     = WsRegDoc.Series       ; elif((not AddMode) and (strupr(WsRegDoc.Action) == "MODIFY_ALL")) PartyRegDoc.Series     = ""           ; end;
        if(not (WsRegDoc.Number        == null)) PartyRegDoc.Number     = WsRegDoc.Number       ; elif((not AddMode) and (strupr(WsRegDoc.Action) == "MODIFY_ALL")) PartyRegDoc.Number     = ""           ; end;
        if(not (WsRegDoc.DocDate       == null)) PartyRegDoc.DocDate    = WsRegDoc.DocDate      ; elif((not AddMode) and (strupr(WsRegDoc.Action) == "MODIFY_ALL")) PartyRegDoc.DocDate    = date(0, 0, 0); end;
        if(not (WsRegDoc.StartDate     == null)) PartyRegDoc.StartDate  = WsRegDoc.StartDate    ; elif((not AddMode) and (strupr(WsRegDoc.Action) == "MODIFY_ALL")) PartyRegDoc.StartDate  = date(0, 0, 0); end;
        if(not (WsRegDoc.FinishDate    == null)) PartyRegDoc.FinishDate = WsRegDoc.FinishDate   ; elif((not AddMode) and (strupr(WsRegDoc.Action) == "MODIFY_ALL")) PartyRegDoc.FinishDate = date(0, 0, 0); end;
        if(not (WsRegDoc.RegPlace      == null)) PartyRegDoc.RegPlace   = WsRegDoc.RegPlace     ; elif((not AddMode) and (strupr(WsRegDoc.Action) == "MODIFY_ALL")) PartyRegDoc.RegPlace   = ""           ; end;
        if(not (WsRegDoc.IsMain        == null)) PartyRegDoc.IsMain     = WsRegDoc.IsMain       ; elif((not AddMode) and (strupr(WsRegDoc.Action) == "MODIFY_ALL")) PartyRegDoc.IsMain     = false        ; end;
        if(not (WsRegDoc.IsClosed      == null)) PartyRegDoc.IsClosed   = WsRegDoc.IsClosed     ; elif((not AddMode) and (strupr(WsRegDoc.Action) == "MODIFY_ALL")) PartyRegDoc.IsClosed   = false        ; end;
        if(not (WsRegDoc.RegDocNumber  == null)) PartyRegDoc.RegNumber  = WsRegDoc.RegDocNumber ; elif((not AddMode) and (strupr(WsRegDoc.Action) == "MODIFY_ALL")) PartyRegDoc.RegNumber  = ""           ; end;
      end;
      i = i + 1;
    end;
  end;
end;

private macro _ProcessPartyNotes
(
  Party : RsbParty
 ,AddMode : bool
 ,PartyNotes /*: TArray*/       /* Примечания субъекта (массив структур TWsNote). */
)
  var i = 0;
  var WsNote /*: TWsNote*/;
  var PtNote : RsbPtNote;

  if((not (PartyNotes == null)) and (PartyNotes.size > 0))
    i = 0;
    while(i < PartyNotes.size)
      WsNote = PartyNotes[i];
      if((WsNote.NoteKind == null))
        RunError("Не задано обязательное поле: вид примечания субъекта", WS_ERR_FLDNOTSET);
      end;
      i = i + 1;
    end;

    i = 0;
    while(i < PartyNotes.size)
      WsNote = PartyNotes[i];
      PtNote = Party.PartyNote();
      if(AddMode or (WsNote.Action == null) or (strupr(WsNote.Action) == "ADD"))
        PtNote.AddNote(WsNote.NoteKind, WsNote.NoteText, WsNote.Date);
      elif(strupr(WsNote.Action) == "REMOVE")
        PtNote.DelNote(WsNote.NoteKind);
      end;
      i = i + 1;
    end;
  end;
end;

private macro _ProcessPersnNotes
(
  Party : RsbParty
 ,AddMode : bool
 ,PersnNotes /*: TArray*/       /* Примечания физ. лица (массив структур TWsNote). */
)
  var i = 0;
  var WsNote /*: TWsNote*/;
  var PtNote : RsbPtNote;

  if((not (PersnNotes == null)) and (PersnNotes.size > 0))
    i = 0;
    while(i < PersnNotes.size)
      WsNote = PersnNotes[i];
      if((WsNote.NoteKind == null))
        RunError("Не задано обязательное поле: вид примечания субъекта", WS_ERR_FLDNOTSET);
      end;
      i = i + 1;
    end;

    i = 0;
    while(i < PersnNotes.size)
      WsNote = PersnNotes[i];
      PtNote = Party.PersonNote();
      if(AddMode or (WsNote.Action == null) or (strupr(WsNote.Action) == "ADD"))
        PtNote.AddNote(WsNote.NoteKind, WsNote.NoteText, WsNote.Date);
      elif(strupr(WsNote.Action) == "REMOVE")
        PtNote.DelNote(WsNote.NoteKind);
      end;
      i = i + 1;
    end;
  end;
end;

/*
    функция инициализации объектов TWsPersn, TWsInst, TWsAdres, TWsContactInfo, TWsPartyCode, TWsClient параметрами сервиса
 */
private macro FillDataClient( oClientParm
                             ,wsPersnParm        : @TWsPersn
                             ,wsInstParm         : @TWsInst
                             ,wsAdresParm        : TArray
                             ,wsContactInfoParm  : TArray
                             ,wsPartyCodeParm    : TArray
                             ,wsClientParm       : TArray
                             ,Action             : string)

  var LastName : string;

  var Sex         : integer;
  var IsEmployer  : string;
  var NotResident : string;
  var BIC         : string;
  var inn         : string;
  var ParamN      : integer;
  var ObjectName  : string;

  /* создаем объект класса TWs... и заполняем его атрибуты в соответствии с атрибутами параметра oClientParm */
  var wsContactInfoParm0 = TWsContactInfo ;
  var wsContactInfoParm1 = TWsContactInfo ;
  var wsContactInfoParm2 = TWsContactInfo ;
  var wsContactInfoParm3 = TWsContactInfo ;

  var wsPartyCodeParm0 = TWsPartyCode;
  var wsPartyCodeParm1 = TWsPartyCode;

  var wsClientParm0 = TWsClient ;
  var wsClientParm1 = TWsClient ;
  var wsAdresParm0 =  TwsAdres;

  ParamN     = 1;
  ObjectName = "";

  WS_SetAttributeValue( @LastName, ParamN, ObjectName, "LastName", oClientParm, V_STRING, false, null );

  if ((LastName != null) and (LastName != ""))
      
      wsPersnParm = @TWsPersn;
      
      wsPersnParm.LastName = LastName;

      WS_SetAttributeValue( @wsPersnParm.FirstName       , ParamN, ObjectName, "Name"           , oClientParm, V_STRING , false, null );
      WS_SetAttributeValue( @wsPersnParm.Patronymic      , ParamN, ObjectName, "Patronymic"     , oClientParm, V_STRING , false, null );
      WS_SetAttributeValue( @wsPersnParm.BirthDate       , ParamN, ObjectName, "BirthDate"      , oClientParm, V_DATE   , false, null );

      WS_SetAttributeValue( @Sex, ParamN, ObjectName, "Sex", oClientParm, V_INTEGER, false, null );
      if( Sex == 1 ) wsPersnParm.Male = 1; 
      else wsPersnParm.Male = 0; end;

      WS_SetAttributeValue( @IsEmployer, ParamN, ObjectName, "IsEmployer", oClientParm, V_STRING , false, null );
      if( IsEmployer == "X" ) wsPersnParm.IsEmployer = true; 
      else wsPersnParm.IsEmployer = false; end;
      WS_SetAttributeValue( @wsPersnParm.OKPO            , ParamN, ObjectName, "szOkpo"         , oClientParm, V_STRING , false, null );

      WS_SetAttributeValue( @wsPersnParm.Ethnos          , ParamN, ObjectName, "Nationality"    , oClientParm, V_STRING , false, null );
      WS_SetAttributeValue( @wsPersnParm.PlaceWork       , ParamN, ObjectName, "Appointment"    , oClientParm, V_STRING , false, null );
      WS_SetAttributeValue( @wsPersnParm.SysType         , ParamN, ObjectName, "szSysType"      , oClientParm, V_STRING , false, null );
      WS_SetAttributeValue( @wsPersnParm.UserType        , ParamN, ObjectName, "szUserType"     , oClientParm, V_STRING , false, null );
      WS_SetAttributeValue( @wsPersnParm.UserField1      , ParamN, ObjectName, "UserField1"     , oClientParm, V_STRING , false, null );
      WS_SetAttributeValue( @wsPersnParm.UserField2      , ParamN, ObjectName, "UserField2"     , oClientParm, V_STRING , false, null );
      WS_SetAttributeValue( @wsPersnParm.UserField3      , ParamN, ObjectName, "UserField3"     , oClientParm, V_STRING , false, null );
      WS_SetAttributeValue( @wsPersnParm.UserField4      , ParamN, ObjectName, "UserField4"     , oClientParm, V_STRING , false, null );
      WS_SetAttributeValue( @wsPersnParm.TaxRegDate      , ParamN, ObjectName, "bdTaxRegDate"   , oClientParm, V_DATE   , false, null );

      WS_SetAttributeValue( @NotResident, ParamN, ObjectName, "NotResident", oClientParm, V_STRING , false, null );
      if( NotResident == "X" ) wsPersnParm.IsNotResident = true; 
      else wsPersnParm.IsNotResident = false; end;

      WS_SetAttributeValue( @wsPersnParm.TaxInstitution  , ParamN, ObjectName, "iTaxInstitution", oClientParm, V_INTEGER, false, null );
      wsPersnParm.Action = Action;

///////////////////////////////////////////////////
  else
      
      wsInstParm = @TWsInst;

      WS_SetAttributeValue( @wsInstParm.ShortName       , ParamN, ObjectName, "szShortName"    , oClientParm, V_STRING , false, null );
      WS_SetAttributeValue( @wsInstParm.FullName        , ParamN, ObjectName, "Name_Client"    , oClientParm, V_STRING , false, null );
      WS_SetAttributeValue( @wsInstParm.OKPO            , ParamN, ObjectName, "szOkpo"         , oClientParm, V_STRING , false, null );

      WS_SetAttributeValue( @wsInstParm.SysType         , ParamN, ObjectName, "szSysType"      , oClientParm, V_STRING , false, null );
      WS_SetAttributeValue( @wsInstParm.UserType        , ParamN, ObjectName, "szUserType"     , oClientParm, V_STRING , false, null );
      WS_SetAttributeValue( @wsInstParm.UserField1      , ParamN, ObjectName, "UserField1"     , oClientParm, V_STRING , false, null );
      WS_SetAttributeValue( @wsInstParm.UserField2      , ParamN, ObjectName, "UserField2"     , oClientParm, V_STRING , false, null );
      WS_SetAttributeValue( @wsInstParm.UserField3      , ParamN, ObjectName, "UserField3"     , oClientParm, V_STRING , false, null );
      WS_SetAttributeValue( @wsInstParm.UserField4      , ParamN, ObjectName, "UserField4"     , oClientParm, V_STRING , false, null );
      WS_SetAttributeValue( @wsInstParm.TaxRegDate      , ParamN, ObjectName, "bdTaxRegDate"   , oClientParm, V_DATE   , false, null );

      WS_SetAttributeValue( @NotResident, ParamN, ObjectName, "NotResident", oClientParm, V_STRING , false, null );
      if( NotResident == "X" ) wsInstParm.IsNotResident = true; 
      else wsInstParm.IsNotResident = false; end;

      WS_SetAttributeValue( @wsInstParm.TaxInstitution  , ParamN, ObjectName, "iTaxInstitution", oClientParm, V_INTEGER, false, null );
      wsInstParm.Action = Action;
  end;

/////////////////////////////////////////

  wsAdresParm0.Type[0] = PTADDR_LEGAL;
  wsAdresParm0.Action = Action;
  WS_SetAttributeValue( @wsAdresParm0.Country        , ParamN, ObjectName, "szCountry"      , oClientParm, V_STRING , false      , null );
  WS_SetAttributeValue( @wsAdresParm0.PostIndex      , ParamN, ObjectName, "lPostIndex"     , oClientParm, V_STRING , false      , null );
  WS_SetAttributeValue( @wsAdresParm0.District       , ParamN, ObjectName, "szRepublic"     , oClientParm, V_STRING , false      , null );
  WS_SetAttributeValue( @wsAdresParm0.Region         , ParamN, ObjectName, "szRegion"       , oClientParm, V_STRING , false      , null );
  WS_SetAttributeValue( @wsAdresParm0.Place          , ParamN, ObjectName, "szCity"         , oClientParm, V_STRING , false      , null );
  WS_SetAttributeValue( @wsAdresParm0.Adress         , ParamN, ObjectName, "szAddress"      , oClientParm, V_STRING , false      , null );

  wsAdresParm[0] = wsAdresParm0;
////////////////////////////////////////

  wsContactInfoParm0.AdresType = PTADDR_LEGAL;
  wsContactInfoParm0.Action = Action;
  wsContactInfoParm0.Kind = 1;
  wsContactInfoParm0.Category = 3;
  WS_SetAttributeValue( @wsContactInfoParm0.Value     , ParamN, ObjectName, "szPhoneNumber"  , oClientParm, V_STRING, false      , null );
  wsContactInfoParm[0] = wsContactInfoParm0;


  wsContactInfoParm1.AdresType = PTADDR_LEGAL;
  wsContactInfoParm1.Action = Action;
  wsContactInfoParm1.Kind = 1;
  wsContactInfoParm1.Category = 2;
  WS_SetAttributeValue( @wsContactInfoParm1.Value     , ParamN, ObjectName, "szPhoneNumber2" , oClientParm, V_STRING, false      , null );
  wsContactInfoParm[1] = wsContactInfoParm1;

  wsContactInfoParm2.AdresType = PTADDR_LEGAL;
  wsContactInfoParm2.Action = Action;
  wsContactInfoParm2.Kind = 4;
  WS_SetAttributeValue( @wsContactInfoParm2.Value     , ParamN, ObjectName, "szTelegraph"    , oClientParm, V_STRING, false      , null );
  wsContactInfoParm[2] = wsContactInfoParm2;

  wsContactInfoParm3.AdresType = PTADDR_LEGAL;
  wsContactInfoParm3.Action = Action;
  wsContactInfoParm3.Kind = 3;
  WS_SetAttributeValue( @wsContactInfoParm3.Value     , ParamN, ObjectName, "szTelexNumber"  , oClientParm, V_STRING , false      , null );
  wsContactInfoParm[3] = wsContactInfoParm3;
/////////////////////////////////////////////
 
  WS_SetAttributeValue( @BIC, ParamN, ObjectName, "BIC", oClientParm, V_STRING, false, null );
  WS_SetAttributeValue( @inn, ParamN, ObjectName, "inn", oClientParm, V_STRING, false, null );
  if((Action != "ADD") and (BIC != ""))
        wsPartyCodeParm0.CodeKind = PTCK_BIC;
        wsPartyCodeParm0.Code = BIC;
        wsPartyCodeParm0.Action = "ADD";
        wsPartyCodeParm[wsPartyCodeParm.size] = wsPartyCodeParm0;
  end;
  if( inn != "" ) 
        wsPartyCodeParm1.CodeKind = PTCK_INN;
        wsPartyCodeParm1.Code = inn;
        wsPartyCodeParm1.Action = "ADD";
        wsPartyCodeParm[wsPartyCodeParm.size] = wsPartyCodeParm1;
  end;

/////////////////////////////////////////////

  wsClientParm0.ServKind   = PTSK_PERSN;
  wsClientParm0.Department = {OperDprt};
  WS_SetAttributeValue( @wsClientParm0.StartDate , ParamN, ObjectName, "bdStartDate" , oClientParm, V_DATE  , false, null );
  WS_SetAttributeValue( @wsClientParm0.FinishDate, ParamN, ObjectName, "bdFinishDate", oClientParm, V_DATE  , false, null );
  WS_SetAttributeValue( @wsClientParm0.OperNum   , ParamN, ObjectName, "iCarryOper"  , oClientParm, V_INTEGER, false, null );
  wsClientParm0.Action = "ADD";
  wsClientParm[0] = wsClientParm0;

  wsClientParm1.ServKind   = PTSK_LOANS;
  wsClientParm1.Department = {OperDprt};
  WS_SetAttributeValue( @wsClientParm1.StartDate , ParamN, ObjectName, "bdStartDate" , oClientParm, V_DATE  , false, null );
  WS_SetAttributeValue( @wsClientParm1.FinishDate, ParamN, ObjectName, "bdFinishDate", oClientParm, V_DATE  , false, null );
  WS_SetAttributeValue( @wsClientParm1.OperNum   , ParamN, ObjectName, "iCarryOper"  , oClientParm, V_INTEGER, false, null );
  wsClientParm1.Action = "ADD";
  wsClientParm[1] = wsClientParm1;
 
end;


macro InsertParty
(
  PersnParam /*: TWsPersn*/     /* Атрибуты физического лица. */
 ,InstParam /*: TWsInst*/       /* Атрибуты юридического лица. */
 ,ClientParam /*: TWsClient*/   /* Параметры клиента вида обслуживания. */
 ,Codes /*: TArray*/            /* Коды субъекта (массив структур TWsPartyCode). */
 ,Adresses /*: TArray*/         /* Адреса субъекта (массив структур TWsAdres). */
 ,Contacts /*: TArray*/         /* Контакты субъекта (массив структур TWsContactInfo). */
 ,PersnPapers /*: TArray*/      /* Документы, удостоверяющие личность личность (массив структур TWsPaper). */
 ,RegDocs /*: TArray*/          /* Регистрационные документы (массив структур TWsRegDoc). */
 ,PartyNotes /*: TArray*/       /* Примечания субъекта (массив структур TWsNote). */
 ,PersnNotes /*: TArray*/       /* Примечания физ. лица (массив структур TWsNote). */
)
  var stat = true;
  var Party : RsbParty;

  if((PersnParam == null) and (InstParam == null))
    RunError("Не заданы основные параметры субъекта");
  end;

  Party = RsbParty();

  if(not (PersnParam == null))
    if((PersnParam.LastName == null) or (strlen(PersnParam.LastName) == 0))
      RunError("Не задано обязательное поле: фамилия физического лица", WS_ERR_FLDNOTSET);
    end;

    _ProcessPersnParam(Party, true, PersnParam);

  elif(not (InstParam == null))

    if((InstParam.FullName == null) or (strlen(InstParam.FullName) == 0))
      RunError("Не задано обязательное поле: полное наименование юридического лица", WS_ERR_FLDNOTSET);
    end;

    _ProcessInstParam(Party, true, InstParam);

  end;

  _ProcessCodes(Party, true, Codes);

  if(Party.LegalForm == PTLEGF_PERSN)
    _ProcessPersnPapers(Party, true, PersnPapers);
  end;

  _ProcessAdresses(Party, true, Adresses);

  _ProcessContacts(Party, true, Contacts);

  _ProcessRegDocs(Party, true, RegDocs);

  _ProcessPartyNotes(Party, true, PartyNotes);

  if(Party.LegalForm == PTLEGF_PERSN)
    _ProcessPersnNotes(Party, true, PersnNotes);
  end;

  _ProcessClientParam(Party, true, ClientParam);

  stat = Party.Update();

  if(not stat)
    RunError("Ошибка сохранения субъекта");
  end;

  return Party.PartyID;
end;

/*
    Сервис InsertClient - создание субъекта

    Параметры.
        oClientParm  - атрибуты клиента
        sObjectCode  - ИД клиента во внешней системе
        iAppID       - ИД внешней системы
 */
macro InsertClient( oClientParm, sObjectCode, iAppID )

  record clientRec("party.dbt");
  var PartyID    : integer;

  var stat       : integer;
  var ErrMessage : string;

  var ObjectID   : integer;
  var ObjectCode : integer;
  var Action     : string;
  
  var wsPersnParm        : TWsPersn;
  var wsInstParm         : TWsInst;
  var wsAdresParm        : TArray;
  var wsContactInfoParm  : TArray;
  var wsPartyCodeParm    : TArray;
  var wsClientParm       : TArray;
  var wsPersnPapersParm  : TArray;
  var wsRegDocsParm      : TArray;
  var wsPartyNotesParm   : TArray;
  var wsPersnNotes       : TArray;

  wsAdresParm        = TArray;
  wsContactInfoParm  = TArray;
  wsPartyCodeParm    = TArray;
  wsClientParm       = TArray;

  //wsPersnParm        = TWsPersn;
  //wsInstParm         = TWsInst;

  Action = "ADD";

  /* проверяем корректность задания параметров Web-сервиса */
  WS_CheckParameter( 1, oClientParm, false, V_GENOBJ );

  WS_CheckParameter( 2, sObjectCode, iAppID      != null, V_STRING  );
  WS_CheckParameter( 3, iAppID     , sObjectCode != null, V_INTEGER );
  
  FillDataClient( oClientParm, @wsPersnParm, @wsInstParm, @wsAdresParm, @wsContactInfoParm, @wsPartyCodeParm, @wsClientParm, Action);

  if( iAppID != null ) UnswitchReceiver( iAppID, sObjectCode ); end;

  PartyID = InsertParty(wsPersnParm 
                       ,wsInstParm 
                       ,wsClientParm
                       ,wsPartyCodeParm 
                       ,wsAdresParm
                       ,wsContactInfoParm
                       ,wsPersnPapersParm
                       ,wsRegDocsParm
                       ,wsPartyNotesParm
                       ,wsPersnNotes);
  
  if( iAppID != null ) UnswitchReceiver( 0 ); end; //

  /* ищем объект шлюза */
  ПолучитьСубъекта(PartyID, clientRec);
  ObjectCode = UniID(clientRec, OBJTYPE_PARTY);
  stat = FindObject( 1, RG_PARTY, ObjectCode, ObjectID, ErrMessage );

  if( stat != 0 )
    RunError( ErrMessage, stat );
  else
    if( iAppID != null )
      InsertObjectCode(ObjectID, iAppID, sObjectCode, ErrMessage );
    end;
  end;

  if(stat)
    RunError("Ошибка сохранения субъекта");
  end;

  return PartyID;

end;


private macro _CheckPartyID
(
  PartyID /*: integer*/         /* Идентификатор субъекта экономики. */
)
  var m_PartyID = -1;
  var query, rs;
  var params : TArray;
  query =         "SELECT t_PartyID ";
  query = query + "  FROM dparty_dbt ";
  query = query + " WHERE t_PartyID = :PartyID ";
  params = makeArray(SQLParam("PartyID", PartyID)
                    );
  rs = execSQLselect(query, params, true);
  if(rs and rs.moveNext())
    m_PartyID = rs.value(0);
  end;                         
  return m_PartyID;
end;

private macro _GetPartyID
(
  PartyCode /*: TWsPartyCode*/  /* Код субъекта для поиска. */
)
  var m_PartyID = -1;
  var query, rs;
  var params : TArray;
  query =         "SELECT t_ObjectID ";
  query = query + "  FROM dobjcode_dbt ";
  query = query + " WHERE t_ObjectType = :ObjectType ";
  query = query + "   AND t_CodeKind = :CodeKind ";
  query = query + "   AND t_Code = :Code ";

  if(PartyCode.FromDate != null)
    query = query + "   AND t_BankDate <= :FromDate ";
    query = query + "   AND :ToDate < DECODE(t_BankCloseDate, TO_DATE('01010001', 'DDMMYYYY'), TO_DATE('31129999', 'DDMMYYYY'), t_BankCloseDate)";
    params = makeArray(SQLParam("ObjectType", OBJTYPE_PARTY)
                      ,SQLParam("CodeKind"  , PartyCode.CodeKind)
                      ,SQLParam("Code"      , PartyCode.Code)
                      ,SQLParam("FromDate"  , PartyCode.FromDate)
                      ,SQLParam("ToDate"    , PartyCode.FromDate)
                      );
  else
    params = makeArray(SQLParam("ObjectType", OBJTYPE_PARTY)
                      ,SQLParam("CodeKind"  , PartyCode.CodeKind)
                      ,SQLParam("Code"      , PartyCode.Code)
                      );
  end;

  rs = execSQLselect(query, params, true);
  if(rs and rs.moveNext())
    m_PartyID = rs.value(0);
    if(rs.moveNext())
      m_PartyID = -1;
    end;
  end;                         
  return m_PartyID;
end;

macro UpdateParty
(
  PartyID /*: integer*/         /* Идентификатор субъекта экономики. */
 ,PartyCode /*: TWsPartyCode*/  /* Код субъекта для поиска. */
 ,PersnParam /*: TWsPersn*/     /* Атрибуты физического лица. */
 ,InstParam /*: TWsInst*/       /* Атрибуты юридического лица. */
 ,ClientParam /*: TWsClient*/   /* Параметры клиента вида обслуживания. */
 ,Codes /*: TArray*/            /* Коды субъекта (массив структур TWsPartyCode). */
 ,Adresses /*: TArray*/         /* Адреса субъекта (массив структур TWsAdres). */
 ,Contacts /*: TArray*/         /* Контакты субъекта (массив структур TWsContactInfo). */
 ,PersnPapers /*: TArray*/      /* Документы, удостоверяющие личность личность (массив структур TWsPaper). */
 ,RegDocs /*: TArray*/          /* Регистрационные документы (массив структур TWsRegDoc). */
 ,PartyNotes /*: TArray*/       /* Примечания субъекта (массив структур TWsNote). */
 ,PersnNotes /*: TArray*/       /* Примечания физ. лица (массив структур TWsNote). */
)
  var stat = true;
  var Party : RsbParty;
  var m_PartyID : integer;

  if((PartyID == null) and (PartyCode == null))
    RunError("Не задано обязательное поле: идентификатор/код субъекта", WS_ERR_FLDNOTSET);
  end;

  if(PartyID != null)
    m_PartyID = _CheckPartyID(PartyID);
  else
    m_PartyID = _GetPartyID(PartyCode);
  end;

  if(m_PartyID < 0)
    RunError("Задано некорректное значение поля: идентификатор/код субъекта", WS_ERR_FLDNOTCORRECT);
  end;

  Party = RsbParty(m_PartyID);

  if((not (PersnParam == null)) and (Party.LegalForm == PTLEGF_PERSN))

    _ProcessPersnParam(Party, false, PersnParam);

  elif((not (InstParam == null)) and (Party.LegalForm == PTLEGF_INST))

    _ProcessInstParam(Party, false, InstParam);

  end;

  _ProcessCodes(Party, false, Codes);

  if(Party.LegalForm == PTLEGF_PERSN)
    _ProcessPersnPapers(Party, false, PersnPapers);
  end;

  _ProcessAdresses(Party, false, Adresses);

  _ProcessContacts(Party, false, Contacts);

  _ProcessRegDocs(Party, false, RegDocs);

  _ProcessPartyNotes(Party, false, PartyNotes);

  if(Party.LegalForm == PTLEGF_PERSN)
    _ProcessPersnNotes(Party, false, PersnNotes);
  end;

  _ProcessClientParam(Party, false, ClientParam);

  stat = Party.Update();

  if(not stat)
    RunError("Ошибка сохранения субъекта");
  end;
end;

/*
    Сервис UpdateClient - изменение данных клиента

    Параметры.
        oClientParm  - атрибуты клиенты
        sObjectCode  - ИД клиента во внешней системе
        iAppID       - ИД внешней системы
 */
macro UpdateClient( oClientParm, sObjectCode, iAppID )
 
  var stat               : integer;
  var ErrMessage         : string;
  var ObjectID           : integer;
  var m_PartyID          : integer;

  var wsPersnParm        : TWsPersn;
  var wsInstParm         : TWsInst;
  var wsAdresParm        : TArray;
  var wsContactInfoParm  : TArray;
  var wsPartyCodeParm    : TArray;
  var wsClientParm       : TArray;
  var wsPersnPapersParm  : TArray;
  var wsRegDocsParm      : TArray;
  var wsPartyNotesParm   : TArray;
  var wsPersnNotes       : TArray;

  var Action             : string;
  var ClientCode         : string;
  Action                 = "MODIFY_IN";


  wsAdresParm        = TArray;
  wsContactInfoParm  = TArray;
  wsPartyCodeParm    = TArray;
  wsClientParm       = TArray;

  wsPersnParm        = TWsPersn;
  wsInstParm         = TWsInst;

  /* проверяем корректность задания параметров Web-сервиса */
  WS_CheckParameter( 1, oClientParm , false , V_GENOBJ  );
  WS_CheckParameter( 2, sObjectCode , false , V_STRING  );
  WS_CheckParameter( 3, iAppID      , false , V_INTEGER );

/*  WS_CheckParameter( 2, sObjectCode, iAppID      != null, V_STRING  );*/
/*  WS_CheckParameter( 3, iAppID     , sObjectCode != null, V_INTEGER );*/


  stat = FindObject( iAppID, RG_PARTY, sObjectCode, ObjectID, ErrMessage );

  if( stat != 0 )
    RunError( ErrMessage, stat );
  else
    FindObjectCode(ObjectID, 1, ClientCode, ErrMessage );
  end;
 
  m_PartyID = int(ClientCode);


  FillDataClient( oClientParm, @wsPersnParm, @wsInstParm, @wsAdresParm, @wsContactInfoParm, @wsPartyCodeParm, @wsClientParm, Action);

  if( iAppID != null ) UnswitchReceiver( iAppID, sObjectCode ); end;
 
  stat = UpdateParty(m_PartyID
                    ,wsPartyCodeParm 
                    ,wsPersnParm
                    ,wsInstParm
                    ,wsClientParm
                    ,wsPartyCodeParm
                    ,wsAdresParm
                    ,wsContactInfoParm
                    ,wsPersnPapersParm
                    ,wsRegDocsParm
                    ,wsPartyNotesParm
                    ,wsPersnNotes);

  
  if( iAppID != null ) UnswitchReceiver( 0 ); end; 
 
  if(stat)
    RunError("Ошибка удаления клиента:" + GetErrMsg());
  end;

end;

/*
    Сервис DeleteClient - удаление данных клиента

    Параметры.
        sObjectCode  - ИД клиента во внешней системе
        iAppID       - ИД внешней системы
 */
macro DeleteClient( sObjectCode, iAppID )

  var stat       : integer;
  var ObjectID   : integer;
  var ErrMessage : string;
  var ClientCode : string;
  var m_PartyID  : integer;
  var Party      : RsbParty;

  WS_CheckParameter( 1, sObjectCode, false , V_STRING  );
  WS_CheckParameter( 2, iAppID     , false, V_INTEGER );

  stat = FindObject( iAppID, RG_PARTY, sObjectCode, ObjectID, ErrMessage );

  if( stat != 0 )
    RunError( ErrMessage, stat );
  else
    FindObjectCode(ObjectID, 1, ClientCode, ErrMessage );
  end;

  m_PartyID = int(ClientCode);

  if( iAppID != null ) UnswitchReceiver( iAppID, sObjectCode ); end;
   
    Party = RsbParty(m_PartyID);
//    Party.Lock();
    if(Party.Delete())
      stat = 0;
    else
      stat = 1;
    end;

  if( iAppID != null ) UnswitchReceiver( 0 ); end;

  if(stat)
    RunError("Ошибка удаления клиента:" + GetErrMsg());
  end;

end;

private macro _GetOperName(Oper : integer) : string
  var query, rs;
  var params : TArray;
  var OperName : string;
  query =         "SELECT t_Name ";
  query = query + "  FROM dperson_dbt ";
  query = query + " WHERE t_Oper = :Oper ";
  params = makeArray(SQLParam("Oper", Oper));
  rs = execSQLselect(query, params, true);
  if(rs and rs.moveNext())
    OperName = rs.value("t_Name"); 
  end;
  return OperName;
end;

private macro NonExistentOper(Oper : integer) : bool
  var query, rs;
  var params : TArray;
  query =         "SELECT 1 ";
  query = query + "  FROM dperson_dbt ";
  query = query + " WHERE t_Oper = :Oper ";
  params = makeArray(SQLParam("Oper", Oper));
  rs = execSQLselect(query, params, true);
  if(rs and rs.moveNext())
    return true;
  end;
  return false;
end;

private macro NonExistentDepartment(Department : integer) : bool
  var query, rs;
  var params : TArray;

  query =         "SELECT 1 ";
  query = query + "  FROM ddp_dep_dbt ";
  query = query + " WHERE t_Code = :Department ";
  params = makeArray(SQLParam("Department", Department));
  rs = execSQLselect(query, params, true);

  if(rs and rs.moveNext())
    return true;
  end;
  return false;
end;

/*
    функция инициализации объекта TWsGetClientListRequest параметрами сервиса
 */
private macro FillClientDataRequest( Request, wsGetClientDataRequest : TWsGetClientDataRequest )

  var PartyCode;

  var ParamN = 1;

  WS_SetAttributeValue( @wsGetClientDataRequest.PartyID, ParamN, "", "PartyID", Request, V_INTEGER, false, 0, true );

  if( (wsGetClientDataRequest.PartyID == null) or (wsGetClientDataRequest.PartyID == 0) )
    
    WS_SetAttributeValue( @PartyCode, ParamN, "", "PartyCode", Request, V_GENOBJ, false, null, true );

    if(PartyCode == null)
      RunError("Не задано обязательное поле: идентификатор/код субъекта", WS_ERR_FLDNOTSET);
    else
      wsGetClientDataRequest.PartyCode = TWsPartyCode;

      WS_SetAttributeValue( @wsGetClientDataRequest.PartyCode.CodeKind, ParamN, "PartyCode", "CodeKind", PartyCode, V_INTEGER, false, 0 , true );
      WS_SetAttributeValue( @wsGetClientDataRequest.PartyCode.Code    , ParamN, "PartyCode", "Code"    , PartyCode, V_STRING , false, "", true );

      if(wsGetClientDataRequest.PartyCode.CodeKind == null)
        RunError("Не задано обязательное поле: вид кода субъекта", WS_ERR_FLDNOTSET);
      end;

      if(wsGetClientDataRequest.PartyCode.Code == null)
        RunError("Не задано обязательное поле: значение кода субъекта", WS_ERR_FLDNOTSET);
      end;
    end;
  end;

end;

private macro SelectCodes( PartyID : integer, Codes )
  var query, rs;
  var params : TArray;
  var PartyCode : TWsPartyCode;
  var i;
  query =         "SELECT t_CodeKind, t_Code, t_BankDate ";
  query = query + "  FROM dpartcode_dbt ";
  query = query + " WHERE t_PartyID  = :PartyID  ";
  params = makeArray(SQLParam("PartyID ", PartyID ));
  rs = execSQLselect(query, params, true);
  while( rs.moveNext() )
    PartyCode = TWsPartyCode;
    PartyCode.CodeKind = rs.value("t_CodeKind");
    PartyCode.Code     = rs.value("t_Code");
    PartyCode.FromDate = rs.value("t_BankDate");
    i = Codes.size;
    Codes[i] = PartyCode;
  end;
end;

private macro SelectClient( PartyID : integer, Clients )
  var query, rs;
  var params : TArray;
  var Client : TWsClient;
  var i;
  query =         "SELECT t_ServiceKind, t_Department, t_StartDate, ";
  query = query + "t_FinishDate, t_Oper ";
  query = query + "  FROM dclient_dbt           ";
  query = query + " WHERE t_PartyID  = :PartyID ";
  query = query + "   AND t_Branch = 0          ";
  params = makeArray(SQLParam("PartyID ", PartyID ));
  rs = execSQLselect(query, params, true);

  while(rs.moveNext())
    Client = TWsClient;

    Client.ServKind   = rs.value("t_ServiceKind");
    Client.Department = rs.value("t_Department");
    Client.StartDate  = rs.value("t_StartDate");
    Client.FinishDate = rs.value("t_FinishDate");
    Client.OperNum    = rs.value("t_Oper");
    Client.OperName   = _GetOperName(rs.value("t_Oper"));
    i = Clients.size;
    Clients[i] = Client;
  end;
end;

private macro _FillContact(  PartyAddress : RsbPartyAddress, Contacts : @TArray)
  var Contact : TWsContactInfo;
  var i : integer;

  if( (PartyAddress.MobilePhone != "") AND (PartyAddress.MobileProvider != "") )
    Contact = TWsContactInfo;
    Contact.Kind = 1;
    Contact.Category = 1;
    Contact.Value = PartyAddress.MobilePhone;
    Contact.AdresType = PartyAddress.AddressType;
    Contact.MobileProvider = PartyAddress.MobileProvider;
    i = Contacts.size;
    Contacts[i] = Contact;
  end;
  if(PartyAddress.PhoneNumberAd != "")
    Contact = TWsContactInfo;
    Contact.Kind = 1;
    Contact.Category = 2;
    Contact.Value = PartyAddress.PhoneNumberAd;
    Contact.AdresType = PartyAddress.AddressType;
    i = Contacts.size;
    Contacts[i] = Contact;
  end;
  if(PartyAddress.PhoneNumber != "")
    Contact = TWsContactInfo;
    Contact.Kind = 1;
    Contact.Category = 3;
    Contact.Value = PartyAddress.PhoneNumber;
    Contact.AdresType = PartyAddress.AddressType;
    i = Contacts.size;
    Contacts[i] = Contact;
  end;
  if(PartyAddress.EMail != "")
    Contact = TWsContactInfo;
    Contact.Kind = 2;
    Contact.Value = PartyAddress.EMail;
    Contact.AdresType = PartyAddress.AddressType;
    i = Contacts.size;
    Contacts[i] = Contact;
  end;
  if(PartyAddress.TelexNumber != "")
    Contact = TWsContactInfo;
    Contact.Kind = 3;
    Contact.Value = PartyAddress.TelexNumber;
    Contact.AdresType = PartyAddress.AddressType;
    i = Contacts.size;
    Contacts[i] = Contact;
  end;
  if(PartyAddress.Telegraph != "")
    Contact = TWsContactInfo;
    Contact.Kind = 4;
    Contact.Value = PartyAddress.Telegraph;
    Contact.AdresType = PartyAddress.AddressType;
    i = Contacts.size;
    Contacts[i] = Contact;
  end;
  if((PartyAddress.RS_Mail_Country != "") OR (PartyAddress.RS_Mail_Region != "") OR (PartyAddress.RS_Mail_Node != "")) 
    Contact = TWsContactInfo;
    Contact.Kind = 5;
    Contact.AdresType = PartyAddress.AddressType;
    Contact.RS_Mail_Country = PartyAddress.RS_Mail_Country;
    Contact.RS_Mail_Region = PartyAddress.RS_Mail_Region;
    Contact.RS_Mail_Node = PartyAddress.RS_Mail_Node;
    i = Contacts.size;
    Contacts[i] = Contact;
  end;
end;

private macro _ProcessResponsePersnParam
(
  Party : RsbParty
 ,WsPersn : TWsPersn     /* Атрибуты физического лица. */
)

  WsPersn.LastName   = Party.LastName  ;
  WsPersn.FirstName  = Party.FirstName ;
  WsPersn.Patronymic = Party.Patronymic;
  WsPersn.LatName    = Party.LatName   ;
  /*
  if(   (not (Party.LastName   == null))
     or (not (Party.FirstName  == null))
     or (not (Party.Patronymic == null))
    )
    WsPersn.ShortName = WsPersn.LastName + " " + substr(WsPersn.FirstName, 1, 1) + ". " + substr(WsPersn.Patronymic, 1, 1) + ".";
    WsPersn.FullName  = WsPersn.LastName + " " +        WsPersn.FirstName        + " "  +        WsPersn.Patronymic             ;
  end;
  */
  
  if( Party.IsMale ) WsPersn.Male = 1;
  else               WsPersn.Male = 0;
  end;

  WsPersn.BirthDate          = Party.BirthDate         ;
  WsPersn.BirthPlace         = Party.BirthPlace        ;
  WsPersn.Ethnos             = Party.Ethnos            ;
  WsPersn.IsEmployer         = Party.IsEmployer        ;
  WsPersn.OKPO               = Party.OKPO              ;
  WsPersn.LicenceNumber      = Party.LicenceNumber     ;
  WsPersn.LicenceDate        = Party.LicenceDate       ;
  WsPersn.RegionBorn         = Party.RegionBorn        ;
  WsPersn.RaionBorn          = Party.RaionBorn         ;
  WsPersn.PlaceBorn          = Party.PlaceBorn         ;
  WsPersn.PlaceWork          = Party.PlaceWork         ;
  WsPersn.DeathDate          = Party.DeathDate         ;
  WsPersn.SectionPeople      = Party.SectionPeople     ;
  WsPersn.IsGroupAuthor      = Party.IsGroupAuthor     ;
  WsPersn.IsGroupwil         = Party.IsGroupwil        ;
  WsPersn.PensCardNumber     = Party.PensCardNumber    ;
  WsPersn.PensCardDate       = Party.PensCardDate      ;
  WsPersn.IsLiterate         = Party.IsLiterate        ;
  WsPersn.IsSpecialAccess    = Party.IsSpecialAccess   ;
  WsPersn.IsInterRelated     = Party.IsInterRelated    ;
  WsPersn.NRCountry          = Party.NRCountry         ;
  WsPersn.IsNotResident      = Party.IsNotResident     ;
  WsPersn.IsOffshoreResident = Party.IsOffshoreResident;
  WsPersn.TaxInstitution     = IfThenElse((Party.TaxInstitution > 0), Party.TaxInstitution, null);
  WsPersn.TaxRegDate         = Party.TaxRegDate        ;
  WsPersn.SetAccSearchAlg    = Party.SetAccSearchAlg   ;
  WsPersn.SysType            = Party.SysType           ;
  WsPersn.UserType           = Party.UserType          ;
  WsPersn.UserField1         = Party.UserField1        ;
  WsPersn.UserField2         = Party.UserField2        ;
  WsPersn.UserField3         = Party.UserField3        ;
  WsPersn.UserField4         = Party.UserField4        ;
  WsPersn.isLocked           = IfThenElse ((Party.isLocked), 1,0);
  
  /*LAO ХФ 149*/
  if(Party.Category.IsAttrPresense(16, 2, null, null, true, {curdate}))
    WsPersn.lawSubject = "NOT";
  elif(Party.Category.IsAttrPresense(16, 3, null, null, true, {curdate}))
    WsPersn.lawSubject = "JUD";
  elif(Party.Category.IsAttrPresense(16, 6, null, null, true, {curdate}))
    WsPersn.lawSubject = "FARM";
  elif(Party.Category.IsAttrPresense(16, 9, null, null, true, {curdate}))
    WsPersn.lawSubject = "ARB";
  elif(Party.IsEmployer)
    WsPersn.lawSubject = "SP";
  else
    WsPersn.lawSubject = "RET";
  end;
  
end;

private macro _ProcessResponseInstParam
(
  Party : RsbParty
 ,WsInst/* : TWsInst */      /* Атрибуты юридического лица. */
)

  WsInst.ShortName          = Party.ShortName         ;
  WsInst.FullName           = Party.FullName          ;
  WsInst.LatName            = Party.LatName           ;
  WsInst.IsNotResident      = Party.IsNotResident     ;
  WsInst.IsOffshoreResident = Party.IsOffshoreResident;
  WsInst.NRCountry          = Party.NRCountry         ;
  WsInst.SuperiorID         = IfThenElse((Party.SuperiorID     > 0), Party.SuperiorID    , null);
  WsInst.TaxInstitution     = IfThenElse((Party.TaxInstitution > 0), Party.TaxInstitution, null);
  WsInst.TaxRegDate         = Party.TaxRegDate        ;
  WsInst.SetAccSearchAlg    = Party.SetAccSearchAlg   ;
  WsInst.OKPO               = Party.OKPO              ;
  WsInst.SysType            = Party.SysType           ;
  WsInst.UserType           = Party.UserType          ;
  WsInst.UserField1         = Party.UserField1        ;
  WsInst.UserField2         = Party.UserField2        ;
  WsInst.UserField3         = Party.UserField3        ;
  WsInst.UserField4         = Party.UserField4        ;
  WsInst.isLocked           = IfThenElse ((Party.isLocked), 1,0);
  /*LAO HF 149*/
  WsInst.lawSubject         = "LE";
  
end;

private macro _ProcessResponsePersonNotes
(
  PtNote       : RsbPtNote
 ,PersonNotes /* : TArray*/      /* Примечания субъекта (массив структур TWsNote). */
)
  var WsNote : TWsNote;
  var i      : integer;

  record notetext( notetext );

  if(not(PtNote.GetFirst({curdate}, notetext)))  

    WsNote = TWsNote;
    WsNote.NoteKind = notetext.NoteKind;
    WsNote.NoteText = PtNote.ReadNote(notetext.NoteKind, {curdate});
    WsNote.Date     = notetext.Date;
    i = PersonNotes.size;
    PersonNotes[i] = WsNote;

    while(not(PtNote.GetNext(notetext)))

      WsNote = TWsNote;
      WsNote.NoteKind = notetext.NoteKind;
      WsNote.NoteText = PtNote.ReadNote(notetext.NoteKind, {curdate});
      WsNote.Date     = notetext.Date;

      i = PersonNotes.size;
      PersonNotes[i] = WsNote;

    end;
  end; 


end;

private macro _ProcessResponsePersnPapers
(
  PersonPaper : RsbPersonPaper
 ,WsPapers/* : TArray */     /* Документы, удостоверяющие личность личность (массив структур TWsPaper). */
)
  var WsPaper : TWsPaper;
      WsPaper = TWsPaper;
  var i : integer;

  WsPaper.Kind = _EncodeWsPaperKind(PersonPaper.PaperKind);
  if(WsPaper.Kind != "")
    WsPaper.Series     = PersonPaper.Series    ;
    WsPaper.Number     = PersonPaper.Number    ;
    WsPaper.IssuedDate = PersonPaper.IssuedDate;
    WsPaper.Issuer     = PersonPaper.Issuer    ;
    WsPaper.IssuerCode = PersonPaper.IssuerCode;
    WsPaper.IsMain     = PersonPaper.IsMain    ;

    i = WsPapers.size;
    WsPapers[i] = WsPaper;
  end;
end;

private macro _ProcessResponseAdresses
(
  PartyAddress : RsbPartyAddress
 ,Adresses/* : TArray*/         /* Адреса субъекта (массив структур TWsAdres). */
)
  var WsAdres : TWsAdres;
  var i : integer;

  WsAdres = TWsAdres;

  WsAdres.Type[0]      = PartyAddress.AddressType ;
  WsAdres.Country      = PartyAddress.Country     ;
  WsAdres.Territory    = PartyAddress.Territory   ;
  WsAdres.PostIndex    = PartyAddress.PostIndex   ;
  WsAdres.CodeRegion   = PartyAddress.CodeRegion  ;
  WsAdres.Region       = PartyAddress.Region      ;
  WsAdres.RegionNumber = PartyAddress.RegionNumber;
  WsAdres.CodeProvince = PartyAddress.CodeProvince;
  WsAdres.Province     = PartyAddress.Province    ;
  WsAdres.CodeDistrict = PartyAddress.CodeDistrict;
  WsAdres.District     = PartyAddress.District    ;
  WsAdres.CodePlace    = PartyAddress.CodePlace   ;
  WsAdres.Place        = PartyAddress.Place       ;
  WsAdres.CodeStreet   = PartyAddress.CodeStreet  ;
  WsAdres.Street       = PartyAddress.Street      ;
  WsAdres.House        = PartyAddress.House       ;
  WsAdres.NumCorps     = PartyAddress.NumCorps    ;
  WsAdres.Flat         = PartyAddress.Flat        ;
  WsAdres.Adress       = PartyAddress.Address     ;
  WsAdres.Kladr        = PartyAddress.Kladr       ;
  WsAdres.Okato        = PartyAddress.Okato       ;

  i = Adresses.size;
  Adresses[i] = WsAdres;

end;

private macro _ProcessResponseRegDocs
(
  PartyRegDoc : RsbPartyRegDoc
 ,RegDocs/* : TArray */         /* Регистрационные документы (массив структур TWsRegDoc). */
)
  var i = 0;
  var WsRegDoc = TWsRegDoc;

  WsRegDoc.RegDocKind   = _EncodeWsRegDocKind  (PartyRegDoc.RegDocKind  );
  WsRegDoc.RegPartyKind = _EncodeWsRegPartyKind(PartyRegDoc.RegPartyKind);
  WsRegDoc.RegDocNumber = PartyRegDoc.RegNumber   ;
  WsRegDoc.Series       = PartyRegDoc.Series      ;
  WsRegDoc.Number       = PartyRegDoc.Number      ;
  WsRegDoc.DocDate      = PartyRegDoc.DocDate     ;
  WsRegDoc.StartDate    = PartyRegDoc.StartDate   ;
  WsRegDoc.FinishDate   = PartyRegDoc.FinishDate  ;
  WsRegDoc.RegPlace     = PartyRegDoc.RegPlace    ;
  WsRegDoc.IsMain       = PartyRegDoc.IsMain      ;
  WsRegDoc.IsClosed     = PartyRegDoc.IsClosed    ;

  i = RegDocs.size;
  RegDocs[i] = WsRegDoc;
end;


private macro _ProcessResponseOfficer
(
  PartyOfficer: RsbOfficer
 ,Officers/* : TArray */         /* LAO массив сотрудников */
)
  var i = 0;
  var WsGetOfficer = TWsGetOfficer;

  WsGetOfficer.PersonID          = PartyOfficer.PersonID;/*Как в итоге ИК хочет использовать ид сотрудника, не понятно...*/
  WsGetOfficer.OfficeID          = PartyOfficer.OfficeID ;
  WsGetOfficer.PhoneNumber       = PartyOfficer.PhoneNumber;
  WsGetOfficer.IsFirstPerson     = IfThenElse(PartyOfficer.IsFirstPerson,"X","");
  WsGetOfficer.IsSecondPerson    = IfThenElse(PartyOfficer.IsSecondPerson,"X","");
  WsGetOfficer.IsMatOtvPerson    = IfThenElse(PartyOfficer.IsMatOtvPerson,"X","");
  WsGetOfficer.HasSignRight      = IfThenElse(PartyOfficer.HasSignRight,"X","");
  WsGetOfficer.IsTempSignature   = IfThenElse(PartyOfficer.IsTempSignature,"X","");
  WsGetOfficer.Post              = PartyOfficer.Post  ;
  WsGetOfficer.DateFrom          = PartyOfficer.DateFrom ;
  WsGetOfficer.DateTo            = PartyOfficer.DateTo ;

  i = Officers.size;
  Officers[i] = WsGetOfficer;
end;

/*LAO можно было проще, но делаю по общему механизму написания этого макроса*/
private macro _FillPartyNames
(
  PartyID: Integer
 ,PNames : @TArray         /* LAO массив сотрудников */
)
  var nameset;
  var all_NAMES :TArray = TArray; 
    for (var z,1,12)
        nameset= GetPartyNames(PartyID,z);
        if (nameset.size>0)
            all_NAMES[all_NAMES.size] =TWsGetPartyName(z,nameset[0]);
        end;  
    end;
  PNames=all_NAMES;
end;

/*
     Сервис GetClientData - "Сформировать данные по клиенту"
     Параметры:
         Request - Параметры поиска клиента
*/
macro GetClientData( Request )

  file partcode("partcode.dbt") key 1;

  var wsGetClientDataRequest : TWsGetClientDataRequest;
      wsGetClientDataRequest = TWsGetClientDataRequest;


  var Response : TWsGetClientDataResponse;
  
  var RegDocs : TArray;
      RegDocs = TArray;

  var Party : RsbParty;

  var PartyID;

  var i : integer;

  var PartyAddress : RsbPartyAddress;
  var PersonPaper  : RsbPersonPaper;
  var PtNote       : RsbPtNote;
  var PartyRegDoc  : RsbPartyRegDoc; 
  var PartyOfficer : RsbOfficer; /*LAO добавил блок сотрудников*/
  WS_CheckParameter( 1, Request, true, V_GENOBJ );
  
  FillClientDataRequest( Request, @wsGetClientDataRequest);

  PartyID = wsGetClientDataRequest.PartyID;

  if( (PartyID == null) OR (PartyID == 0) )
    partcode.CodeKind = Request.PartyCode.CodeKind;
    partcode.Code     = Request.PartyCode.Code;

    if( GetEQ(partcode) )
      PartyID = partcode.PartyID;
    else
      RunError("Не найден код субъекта экономики", WS_ERR_CODE_NOTFOUND);
    end;
  end;

  if(PartyID != null)
    PartyID = _CheckPartyID(PartyID);
    if(PartyID <= 0)
      RunError("Не найден субъект экономики", WS_ERR_PARTY_NOTFOUND);
    end;
  end;

  if( (PartyID != null) and (PartyID != 0) )

    Party = RsbParty(PartyID);

    Response = TWsGetClientDataResponse;

    Response.PersnNotes  = TArray;    
    Response.PersnPapers  = TArray;  
    Response.Codes  = TArray;
    Response.Clients = TArray;
    Response.Addresses = TArray;
    Response.Contacts = TArray;
    Response.RegDocs = TArray;
    Response.PartyNotes = TArray;
    Response.Officer = TArray;
    Response.PartyNames = TArray;
    
    /*LAO HF 149*/
    Response.PartyID = PartyID;
    /************/
    
    if(Party.LegalForm == PTLEGF_PERSN)
      Response.Persn = TWsPersn;
      _ProcessResponsePersnParam(Party, Response.Persn);

      PtNote = Party.PersonNote;
      _ProcessResponsePersonNotes(PtNote, Response.PersnNotes);
      if ( asize(Response.PersnNotes) == 0)
        Response.PersnNotes=tarray;
       end;

      PersonPaper = Party.PersonPaper(1);

      if(PersonPaper.First())
        _ProcessResponsePersnPapers(PersonPaper, Response.PersnPapers);
        while(PersonPaper.Next())
          _ProcessResponsePersnPapers(PersonPaper, Response.PersnPapers);
        end;
      end;
    end;

    if(Party.LegalForm == PTLEGF_INST)
      Response.Inst = TWsInst;     
      _ProcessResponseInstParam(Party, Response.Inst);
    end;

// 8
   SelectCodes(PartyID, Response.Codes);


   SelectClient(PartyID, Response.Clients);

 
// 8.3 8.4
    PartyAddress = Party.Address(1);
    if(PartyAddress.First())
      _FillContact( PartyAddress, @Response.Contacts);
      _ProcessResponseAdresses(PartyAddress, Response.Addresses );
      while(PartyAddress.Next())
        _FillContact( PartyAddress, @Response.Contacts);
        _ProcessResponseAdresses(PartyAddress, Response.Addresses );
      end;
    
    end; 

    PartyRegDoc = Party.PartyRegDoc(1,1);
   if(PartyRegDoc.First())
      _ProcessResponseRegDocs(PartyRegDoc, Response.RegDocs);
      while(PartyRegDoc.Next())
        _ProcessResponseRegDocs(PartyRegDoc, Response.RegDocs);   
      end;
    end;   

    PtNote = Party.PartyNote;
    _ProcessResponsePersonNotes(PtNote, Response.PartyNotes); 
    if ( asize(Response.PartyNotes) == 0)
        Response.PartyNotes=tarray;
     end;

   
    PartyOfficer = Party.Officer(); /*LAO заполняем блок сотрудников*/
    if (PartyOfficer.GetFirstOfAll)
        _ProcessResponseOfficer(PartyOfficer, Response.Officer);
        while(PartyOfficer.GetNext())
          _ProcessResponseOfficer(PartyOfficer, Response.Officer);   
        end;
    end;

    _FillPartyNames(PartyID,@Response.PartyNames );
    
    
  end;

  return Response;

end;
/*
    функция инициализации объекта TWsGetClientListRequest параметрами сервиса
 */
private macro FillClientListRequest( Request, wsGetClientListRequest : TWsGetClientListRequest )

  var ParamN      : integer;
  var ObjectName  : string;
  var PersnMainData, IdentityDoc;
  var stat;

  ParamN     = 1;
  ObjectName = "";

//  var wsPersnMainData : TWsPersn;
//      wsPersnMainData = TWsPersn;
//  var wsIdentityDoc  : TWsPaper;
//      wsIdentityDoc  = TWsPaper;

  WS_SetAttributeValue( @PersnMainData, ParamN, ObjectName, "PersnMainData", Request, V_GENOBJ, true, NULL, true);
  WS_SetAttributeValue( @wsGetClientListRequest.PersnMainData.LastName, ParamN, ObjectName, "LastName", PersnMainData, V_STRING, true, NULL, true);

  if((wsGetClientListRequest.PersnMainData.LastName == null) or (strlen(wsGetClientListRequest.PersnMainData.LastName) == 0))
    RunError("Не задано обязательное поле: Фамилия", WS_ERR_FLDNOTSET);
  end;
  //if( wsGetClientListRequest.LastName != null ) Request.LastName  = wsGetClientListRequest.LastName; end;

  WS_SetAttributeValue( @wsGetClientListRequest.PersnMainData.FirstName, ParamN, ObjectName, "FirstName", PersnMainData, V_STRING, false, "", true);
  //if( wsGetClientListRequest.FirstName != null ) Request.FirstName  = wsGetClientListRequest.FirstName; end;

  WS_SetAttributeValue( @wsGetClientListRequest.PersnMainData.Patronymic, ParamN, ObjectName, "Patronymic", PersnMainData, V_STRING, false, "", true);
  //if( wsGetClientListRequest.Patronymic != null ) Request.Patronymic  = wsGetClientListRequest.Patronymic; end;

  WS_SetAttributeValue( @wsGetClientListRequest.PersnMainData.BirthDate, ParamN, ObjectName, "BirthDate", PersnMainData, V_DATE, false, date(0, 0, 0), true);
  //if( wsGetClientListRequest.BirthDate != null ) Request.BirthDate  = wsGetClientListRequest.BirthDate; end;

  WS_SetAttributeValue( @IdentityDoc, ParamN, ObjectName, "IdentityDoc", Request, V_GENOBJ, false, NULL, true);
  WS_SetAttributeValue( @wsGetClientListRequest.IdentityDoc.Kind, ParamN, ObjectName, "Kind", IdentityDoc, V_STRING , false, "", true);
  if( wsGetClientListRequest.IdentityDoc.Kind != null )
    if((_DecodeWsPaperKind(wsGetClientListRequest.IdentityDoc.Kind)) < 0)
      RunError("Задано некорректное значение поля: вид документа, удостоверяющего личность", WS_ERR_FLDNOTCORRECT);
    //else
      //Request.Kind  = wsIdentityDoc.Kind;
    end;
  end;  

  WS_SetAttributeValue( @wsGetClientListRequest.IdentityDoc.Series, ParamN, ObjectName, "Series", IdentityDoc, V_STRING , false, ""           , true);
 // if( wsGetClientListRequest.PaperSeries != null ) Request.PaperSeries  = wsGetClientListRequest.PaperSeries; end;

  WS_SetAttributeValue( @wsGetClientListRequest.IdentityDoc.Number, ParamN, ObjectName, "Number", IdentityDoc, V_STRING , false, ""           , true); 
 // if( wsGetClientListRequest.PaperNumber != null ) Request.PaperNumber  = wsGetClientListRequest.PaperNumber; end;

  WS_SetAttributeValue( @wsGetClientListRequest.IdentityDoc.CountryLat2, ParamN, ObjectName, "CountryLat2", IdentityDoc, V_STRING , false, null, true);          
  //значение по-умолчанию для параметра "RU"
  if((wsGetClientListRequest.IdentityDoc.CountryLat2 == null) or (wsGetClientListRequest.IdentityDoc.CountryLat2 == ""))
    wsGetClientListRequest.IdentityDoc.CountryLat2 = "RU";
  end;

 // if( wsGetClientListRequest.PaperCountryLat2 != null ) Request.PaperCountryLat2  = wsGetClientListRequest.PaperCountryLat2; end;

  WS_SetAttributeValue( @wsGetClientListRequest.Rows            , ParamN, ObjectName, "Rows"            , Request, V_INTEGER, false, 0            , true);
  if( wsGetClientListRequest.Rows != null ) 
    if(wsGetClientListRequest.Rows < 0)
      RunError("Задано некорректное значение поля: количество строк в ответе", WS_ERR_FLDNOTCORRECT);
//    else
//      Request.Rows  = wsGetClientListRequest.Rows;
    end;
  end;
/*
  WS_SetAttributeValue( @wsGetClientListRequest.Oper            , ParamN, ObjectName, "Oper"            , Request, V_INTEGER, false, 0            , true);
  if( wsGetClientListRequest.Oper != null )
    stat = NonExistentOper(wsGetClientListRequest.Oper);
    if(not(stat))
//      Request.Oper  = wsGetClientListRequest.Oper;
//    else
      RunError("Задано некорректное значение поля: пользователь", WS_ERR_FLDNOTCORRECT);
    end; 
  end;

  WS_SetAttributeValue( @wsGetClientListRequest.Department      , ParamN, ObjectName, "Department"      , Request, V_INTEGER, false, 0            , true);
  if( wsGetClientListRequest.Department != null ) 
    stat = NonExistentDepartment(wsGetClientListRequest.Department);
    if(not(stat))
//      Request.Department  = wsGetClientListRequest.Department; 
//    else
      RunError("Задано некорректное значение поля: подразделение банка", WS_ERR_FLDNOTCORRECT);
    end; 
  end;
*/
end;


/* Функция выборки из таблиц persn.dbt и persnidc.dbt*/
private macro SelectPersn( Request )

  var ResponseArray : TArray;

  var Response : TWsGetClientListResponse;
  
  var Paper : TWsPaper;
      Paper = TWsPaper;
  var Party : RsbParty;
  var PersonPaper  : RsbPersonPaper;
  var PartyAddress : RsbPartyAddress;

  var query, rs;
  var params : TArray;
      params = TArray;
  var OneLineRequest = NULL;
  var i = 0, j = 0;

  query =         "SELECT persn.t_PersonID persn_PersonID, persn.t_Name1 persn_Name1, persn.t_Name2 persn_Name2,";
  query = query + "       persn.t_Name3 persn_Name3, persn.t_Born persn_Born, persn.t_IsMale persn_IsMale ";
  query = query + "  FROM dpersn_dbt persn           ";
  query = query + " WHERE persn.t_Name1 = :LastName  ";
  params.value( i ) = SQLParam("LastName",Request.PersnMainData.LastName);
  if(Request.PersnMainData.FirstName != null )
    query = query + " AND persn.t_Name2 = :FirstName ";
    i = i + 1;
    params.value( i ) = SQLParam("FirstName",Request.PersnMainData.FirstName);
  end;
  if(Request.PersnMainData.Patronymic != null )
    query = query + " AND persn.t_Name3 = :Patronymic";
    i = i + 1;
    params.value( i ) = SQLParam("Patronymic",Request.PersnMainData.Patronymic);
  end;
  if(Request.PersnMainData.BirthDate != null )
    query = query + " AND persn.t_Born  = :BirthDate ";
    i = i + 1;
    params.value( i ) = SQLParam("BirthDate",Request.PersnMainData.BirthDate);
  end;

  if( (Request.IdentityDoc.Series != null) AND (Request.IdentityDoc.Number != null) )
    
    if(Request.IdentityDoc.Kind == null)
      Request.IdentityDoc.Kind = "21";
    end;
    i = i + 1;
    params.value( i ) = SQLParam("PaperKind",Request.IdentityDoc.Kind);

    OneLineRequest = Request.IdentityDoc.Series + Request.IdentityDoc.Number; 
    i = i + 1;
    params.value( i ) = SQLParam("OneLineRequest",OneLineRequest);

    query = query + " AND EXISTS ( SELECT persnidc.t_PaperSeries, persnidc.t_PaperNumber   ";
    query = query + "                FROM dpersnidc_dbt persnidc                           ";
    query = query + "               WHERE persnidc.t_PersonID = persn.t_PersonID           ";
    query = query + "               AND persnidc.t_PaperKind IN (SELECT papr.t_PaperKind   ";
    query = query + "                                        FROM dpaprkind_dbt papr       ";
    query = query + "                                       WHERE papr.t_CodeDocum = :PaperKind )                        ";
    query = query + "               AND (UPPER( TRANSLATE( persnidc.t_PaperSeries || persnidc.t_PaperNumber              ";
    query = query + "                   ,'AaBCcEeЁёHKkMmOoPpTuXxYy!@#$%^&*-=+№;:?\"\\/|`''~[]{}<>(),_. '  || CHR(1)      ";
    query = query + "                   ,'ААВССЕЕЕЕНККМТООРРТИХХУУ')))                                                   ";  
    query = query + "              LIKE '%'||(UPPER( TRANSLATE( :OneLineRequest                                          ";
    query = query + "                         ,'AaBCcEeЁёHKkMmOoPpTuXxYy!@#$%^&*-=+№;:?\"\\/|`''~[]{}<>(),_. '  || CHR(1)";
    query = query + "                         ,'ААВССЕЕЕЕНККМТООРРТИХХУУ')))||'%'                                       )";
  end;

  rs = execSQLselect(query, params, true);

  while( rs.moveNext() )
    if( (Request.Rows == null) or (Request.Rows == 0) or (j < Request.Rows) )
    
      Response = TWsGetClientListResponse;

      Response.PartyID = rs.value("persn_PersonID");

      Party = RsbParty(Response.PartyID);
      _ProcessResponsePersnParam(Party, Response.PersnMainData);
   
      Response.IdentityDoc = TArray;
      Response.Addresses   = TArray;
      Response.Contacts    = TArray;

      PersonPaper = Party.PersonPaper(1);

      if(PersonPaper.First())
        _ProcessResponsePersnPapers(PersonPaper, Response.IdentityDoc);
        while(PersonPaper.Next())
          _ProcessResponsePersnPapers(PersonPaper, Response.IdentityDoc);
        end;
      end;
 
      PartyAddress = Party.Address(0);
      if(PartyAddress.First())
        _FillContact( PartyAddress, @Response.Contacts);
        _ProcessResponseAdresses(PartyAddress, Response.Addresses );
        while(PartyAddress.Next())
         _FillContact( PartyAddress, @Response.Contacts);
         _ProcessResponseAdresses(PartyAddress, Response.Addresses );
        end;
      end;

      if( ResponseArray == null ) ResponseArray = TArray; end;

      ResponseArray[ResponseArray.Size()] = Response;

      Party = null;

    end;
  end;

 return ResponseArray; 
end;

/*
    Сервис GetClientList - формирование списка клиентов

    Параметры:
        Request - Параметры запроса к БД. Условия поиска клиентов физ. лиц.
 */
macro GetClientList( Request )

  var wsGetClientListRequest : TWsGetClientListRequest;
      wsGetClientListRequest = TWsGetClientListRequest;

  WS_CheckParameter( 1, Request, true , V_GENOBJ  );

  FillClientListRequest( Request, @wsGetClientListRequest);
  return SelectPersn( wsGetClientListRequest );

end;
