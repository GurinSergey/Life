/*
$Name: ic_payments.mac
$Module: ББ
$Description: сервис ПД
*/
import ws_CrPaym, CTInter;

class IBOPaymentParm
var
  TypeDocument,
  UserTypeDocument,
  ResultCarry,
  FIOClient,
  OpCode,
  SubKind,
  AcceptDate: Date,
  AcceptPeriod,
  AcceptTerm,
  Accept,
  PayCondition,
  AkkrDate: Date,
  AkkrType,
  AkkrRepresentation,
  AkkrAddCondition,
  AkkrAccRealReceiver,
  BCOrdKind,
  ConvOper,
  GroundCode,
  OwnerValues,
  ReceiverNameValues,
  PaperKind,
  PaperSeries,
  PaperNumber,
  PaperIssuedDate: Date,
  PaperIssuer,
  KindOper,
  PartPaymNumber,
  PartPaymShifrMain,
  PartPaymNumMain,
  PartPaymDateMain: Date,
  PartPaymRestAmountMain,
  CreateDate: Date,
  CreateTime: Time,
  CorPosTypeOut,
  CorPosTypeIn,
  CorschemOut,
  CorschemIn,
  CorschemFIIDOut,
  CorschemFIIDIn,
  IndexPlaceDate: Date,
  IndexExitDate: Date,
  CreateCarry,
  Deal5_50Origin,
  Deal5_50Type,
  Deal5_50Date,
  Deal5_50Name,
  Deal5_50Note,
  PaymentID,
  ID_Operation,
  ConnectToOper,
  BOCode,
  BOAction,
  BOStartDate: Date,
  BaseFIID,
  BaseAmount,
  PayerFIID,
  PayerAmount,
  ReceiverFIID,
  ReceiverAmount,
  IsFixAmount,
  RateType,
  RateScale,
  RatePoint,
  RateValue,
  RateIsInverse,
  RateDate: Date,
  BaseRateType,
  BaseRateScale,
  BaseRatePoint,
  BaseRateValue,
  IsBaseInverse,
  BaseRateDate: Date,
  Payment_Date: Date,
  BankDate: Date,
  PayDate: Date,
  ValueDate: Date,
  ClientDate: Date,
  PayerChargeOffDate: Date,
  ReceiverChargeOffDate: Date,
  DocKind,
  PayerBankID,
  PayerBankCodeKind,
  PayerBankCode,
  PayerBankName,
  PayerAccount,
  PayerCorrAccNostro,
  Payer,
  PayerName,
  PayerINN,
  PayerCorrBankID,
  PayerCorrBankCodeKind,
  PayerCorrBankCode,
  PayerCorrBankName,
  ReceiverCodeKind,
  ReceiverCode,
  ReceiverBankID,
  ReceiverBankCodeKind,
  ReceiverBankCode,
  ReceiverBankName,
  ReceiverAccount,
  ReceiverCorrAccNostro,
  Receiver,
  ReceiverName,
  ReceiverINN,
  ReceiverCorrBankID,
  ReceiverCorrBankCodeKind,
  ReceiverCorrBankCode,
  ReceiverCorrBankName,
  ReceiverCorrBankAccount,
  ReceiverCorrBankCodeKindName,
  ReceiverTransferDate: Date,
  Number,
  Ground,
  NumberPack,
  ShifrOper,
  PaymentPriority,
  TaxAuthorState,
  BttTICode,
  TaxPmGround,
  TaxPmPeriod,
  TaxPmNumber,
  TaxPmDate,
  TaxPmType,
  OKATOCode,
  NotForBackOffice,
  CashSymbolDebet,
  CashSymbolCredit,
  SymbNotBalDebet,
  SymbNotBalCredit,
  Origin,
  Department,
  StartDepartment,
  EndDepartment,
  Chapter,
  Kind_Operation,
  Oper,
  OperNode,
  PartyInfo,
  UserField1,
  UserField2,
  UserField3,
  UserField4,
  ComissFIID,
  ComissAccount,
  IsVO,
  VO_Accept,
  VO_Oper,
  VO_FIID,
  VO_Direct,
  VO_PayerBankID,
  VO_PayerBankCodeKind,
  VO_PayerBankCode,
  VO_PayerBankCountry,
  VO_ReceiverBankID,
  VO_ReceiverBankCodeKind,
  VO_ReceiverBankCode,
  VO_ReceiverBankCountry,
  CheckTerror,
  MCMethodID,
  DocDispatchDate: Date,
  I2PlaceDate: Date,
  FuturePayerAccount,
  FIID_FuturePayAcc,
  FutureReceiverAccount,
  FIID_FutureRecAcc,
  MinimizationTurn,
  OperInitiatorCtg,
  PaymentKind,
  PaymStatus,
  PayerFIISO,
  ReceiverFIISO,
  BaseFIISO,
  CurrentStatusText,
  VO_FIIDISO,
  VO_OperFIO,
  ComissFIISO,
  OperFIO,
  CashSymbols,
  ComissCharges,
  PaymentNotes,
  Notes,
  PaymentCategories,
  Categories;
end;

class TPMNote
  var NoteKind: integer;
  var NoteValue;
end;

private macro GetDocumentID(ObjectType: integer, DocKind: integer, PaymentID : integer)
  record pmpaym(pmpaym);  
  pmpaym.PaymentID = PaymentID;
  return makeObjectID( ObjectType, DocKind, pmpaym );
end;

private macro SetProperty(val, fld, objtype, docID)
  GenSetProp( val.rec, SubStr( fld.Name, 3 ), fld.Value );
onerror
  RunError("t_ObjecType = "+objtype+" t_Object = " + docID + " NULL в значении поля " + fld.Name);
end;

macro GetPayDocList(IDs)

  var size;
  if (valtype(IDs) == V_GENOBJ)
    size = IDs.size;
  else
    size = asize(IDs);
  end;
  var Result = TArray(size);
  var query = string("select\n",
                     "val.*\n",
                     ",PM_SCRHLP.GetFICode(t_PayerFIID, 1) t_PayerFIISO\n",
                     ",PM_SCRHLP.GetFICode(t_ReceiverFIID, 1) t_ReceiverFIISO\n",
                     ",PM_SCRHLP.GetFICode(t_BaseFIID, 1) t_BaseFIISO\n",
                     ",PM_SCRHLP.GetFICode(t_VO_FIID, 1) t_VO_FIIDISO\n",
                     ",PM_SCRHLP.GetFICode(t_ComissFIID, 1) t_ComissFIISO\n",
                     ",PM_SCRHLP.GetPaymStatusName(t_PaymStatus) t_CurrentStatusText\n",
                     ",NVL((select 1 from dual where exists (select 1 from dsymbcash_dbt sc where sc.t_DocKind = val.t_PSCDocKind and sc.t_ApplicationKey = val.t_PSCAppKey)), 0) IsCashSymbols\n",
                     ",NVL((select 1 from dual where exists (select 1 from dnotetext_dbt nt where nt.t_ObjectType = 501/*OBJTYPE_PAYMENT*/ and nt.t_DocumentID = LPAD(val.t_PaymentID, 10, '0'))), 0) IsPaymentNotes\n",
                     ",NVL((select 1 from dual where exists (select 1 from dnotetext_dbt nt where nt.t_ObjectType = val.t_ObjectType and nt.t_DocumentID = LPAD(val.t_PaymentID, 34, '0'))), 0) IsNotes\n",
                     ",NVL((select 1 from dual where exists (select 1 from dobjatcor_dbt nt where nt.t_ObjectType = 501/*OBJTYPE_PAYMENT*/ and nt.t_Object = LPAD(val.t_PaymentID, 10, '0'))), 0) IsPaymentCategories\n",
                     ",NVL((select 1 from dual where exists (select 1 from dobjatcor_dbt nt where nt.t_ObjectType = val.t_ObjectType and nt.t_Object = LPAD(val.t_PaymentID, 34, '0'))), 0) IsCategories\n",
                     "from (select \n",
                     " pmpaym.t_TypeDocument\n",
                     ",pmpaym.t_UserTypeDocument\n",
                     ",NVL(psc.t_FIOClient, CHR(1)) t_FIOClient \n",
                     ",pmpaym.t_SubKind\n",
                     ",NVL(dem.t_AcceptDate, NVL(psdem.t_AcceptDate, TO_DATE('01010001', 'DDMMYYYY'))) t_AcceptDate\n",
                     ",NVL(psdem.t_AcceptPeriod, 0) t_AcceptPeriod\n",
                     ",NVL(dem.t_AcceptTerm, NVL(psdem.t_AcceptTerm, 0)) t_AcceptTerm\n",
                     ",NVL(dem.t_Accept, NVL(psdem.t_Accept, 0)) t_Accept\n",
                     ",NVL(psdem.t_PayCondition, CHR(1)) t_PayCondition\n",
                     ",NVL(akkr.t_Date, TO_DATE('01010001', 'DDMMYYYY')) t_AkkrDate\n",
                     ",NVL(akkr.t_Type, CHR(0)) t_AkkrType\n",
                     ",NVL(akkr.t_Representation, CHR(1)) t_AkkrRepresentation\n",
                     ",NVL(akkr.t_AddCondition, CHR(1)) t_AkkrAddCondition\n",
                     ",NVL(akkr.t_AccRealReceiver, CHR(1)) t_AkkrAccRealReceiver\n",
                     ",NVL(bcord.t_BCOrdKind, 0) t_BCOrdKind\n",
                     ",NVL(bcord.t_ConvOper, 0) t_ConvOper\n",
                     ",NVL(bcord.t_Cause, 0) t_GroundCode\n",
                     ",NVL(valtr.t_OwnerValues, CHR(1)) t_OwnerValues\n",
                     ",NVL(valtr.t_ReceiverNameValues, CHR(1)) t_ReceiverNameValues\n",
                     ",NVL(valtr.t_PaperKind, NVL(psc.t_PaperKind, 0)) t_PaperKind\n",
                     ",NVL(valtr.t_PaperSeries, NVL(psc.t_PaperSeries, CHR(1))) t_PaperSeries\n",
                     ",NVL(valtr.t_PaperNumber, NVL(psc.t_PaperNumber, CHR(1))) t_PaperNumber\n",
                     ",NVL(valtr.t_PaperIssuedDate, NVL(psc.t_PaperIssuedDate, TO_DATE('01010001', 'DDMMYYYY'))) t_PaperIssuedDate\n",
                     ",NVL(valtr.t_PaperIssuer, NVL(psc.t_PaperIssuer, CHR(1))) t_PaperIssuer\n",
                     ",rmprop.t_KindOper\n",
                     ",pmpaym.t_PartPaymNumber\n",
                     ",pmpaym.t_PartPaymShifrMain\n",
                     ",pmpaym.t_PartPaymNumMain\n",
                     ",pmpaym.t_PartPaymDateMain\n",
                     ",pmpaym.t_PartPaymRestAmountMain\n",
                     ",pmpaym.t_CreationDate t_CreateDate\n",
                     ",pmpaym.t_CreationTime t_CreateTime\n",
                     ",NVL(dem.t_IndexPlaceDate, TO_DATE('01010001', 'DDMMYYYY')) t_IndexPlaceDate\n",
                     ",NVL(dem.t_IndexExitDate, TO_DATE('01010001', 'DDMMYYYY')) t_IndexExitDate\n",
                     ",pmpaym.t_PaymentID\n",
                     ",oproper.t_ID_Operation\n",
                     ",pmpaym.t_BaseFIID\n",
                     ",pmpaym.t_BaseAmount\n",
                     ",pmpaym.t_FIID t_PayerFIID\n",
                     ",pmpaym.t_Amount t_PayerAmount\n",
                     ",pmpaym.t_PayFIID t_ReceiverFIID\n",
                     ",pmpaym.t_PayAmount t_ReceiverAmount\n",
                     ",pmpaym.t_IsFixAmount\n",
                     ",pmpaym.t_RateType\n",
                     ",pmpaym.t_Scale t_RateScale\n",
                     ",pmpaym.t_Point t_RatePoint\n",
                     ",pmpaym.t_Rate t_RateValue\n",
                     ",pmpaym.t_IsInverse t_RateIsInverse\n",
                     ",pmpaym.t_RateDate\n",
                     ",pmpaym.t_BaseRateType\n",
                     ",pmpaym.t_BaseScale t_BaseRateScale\n",
                     ",pmpaym.t_BasePoint t_BaseRatePoint\n",
                     ",pmpaym.t_BaseRate t_BaseRateValue\n",
                     ",pmpaym.t_IsBaseInverse\n",
                     ",pmpaym.t_BaseRateDate\n",
                     ",rmprop.t_Date t_Payment_Date\n",
                     ",pmpaym.t_PayerBankEnterDate t_BankDate\n",
                     ",rmprop.t_PayDate\n",
                     ",pmpaym.t_ValueDate\n",
                     ",rmprop.t_ClientDate\n",
                     ",rmprop.t_PayerChargeOffDate\n",
                     ",NVL(rmprop.t_ReceiverChargeOffDate, TO_DATE('01010001', 'DDMMYYYY')) t_ReceiverChargeOffDate\n",
                     ",pmpaym.t_DocKind\n",
                     ",pmpaym.t_PayerBankID\n",
                     ",deb.t_CodeKind t_PayerBankCodeKind\n",
                     ",deb.t_BankCode t_PayerBankCode\n",
                     ",rmprop.t_PayerBankName\n",
                     ",pmpaym.t_PayerAccount\n",
                     ",rmprop.t_PayerCorrAccNostro\n",
                     ",pmpaym.t_Payer\n",
                     ",rmprop.t_PayerName\n",
                     ",rmprop.t_PayerINN\n",
                     ",deb.t_CorrID t_PayerCorrBankID\n",
                     ",deb.t_CorrCodeKind t_PayerCorrBankCodeKind\n",
                     ",deb.t_CorrCode t_PayerCorrBankCode\n",
                     ",rmprop.t_PayerCorrBankName\n",
                     ",pmpaym.t_ReceiverCodeKind\n",
                     ",pmpaym.t_ReceiverCode\n",
                     ",pmpaym.t_ReceiverBankID\n",
                     ",cred.t_CodeKind t_ReceiverBankCodeKind\n",
                     ",cred.t_BankCode t_ReceiverBankCode\n",
                     ",rmprop.t_ReceiverBankName\n",
                     ",pmpaym.t_ReceiverAccount\n",
                     ",rmprop.t_ReceiverCorrAccNostro\n",
                     ",pmpaym.t_Receiver\n",
                     ",rmprop.t_ReceiverName\n",
                     ",rmprop.t_ReceiverINN\n",
                     ",cred.t_CorrID t_ReceiverCorrBankID\n",
                     ",cred.t_CorrCodeKind t_ReceiverCorrBankCodeKind\n",
                     ",cred.t_CorrCode t_ReceiverCorrBankCode\n",
                     ",rmprop.t_ReceiverCorrBankName\n",
                     ",cred.t_CorrAcc t_ReceiverCorrBankAccount\n",
                     ",cred.t_CorrCodeName t_ReceiverCorrBankCodeKindName\n",
                     ",cred.t_TransferDate t_ReceiverTransferDate\n",
                     ",rmprop.t_Number\n",
                     ",rmprop.t_Ground\n",
                     ",pmpaym.t_NumberPack\n",
                     ",rmprop.t_ShifrOper\n",
                     ",rmprop.t_Priority t_PaymentPriority\n",
                     ",rmprop.t_TaxAuthorState\n",
                     ",rmprop.t_BttTICode\n",
                     ",rmprop.t_TaxPmGround\n",
                     ",rmprop.t_TaxPmPeriod\n",
                     ",rmprop.t_TaxPmNumber\n",
                     ",rmprop.t_TaxPmDate\n",
                     ",rmprop.t_TaxPmType\n",
                     ",rmprop.t_OKATOCode\n",
                     ",pmpaym.t_NotForBackOffice\n",
                     ",rmprop.t_CashSymbolDebet\n",
                     ",rmprop.t_CashSymbolCredit\n",
                     ",rmprop.t_SymbNotBalDebet\n",
                     ",rmprop.t_SymbNotBalCredit\n",
                     ",pmpaym.t_Origin\n",
                     ",pmpaym.t_Department\n",
                     ",pmpaym.t_StartDepartment\n",
                     ",pmpaym.t_EndDepartment\n",
                     ",pmpaym.t_Chapter\n",
                     ",pmpaym.t_KindOperation t_Kind_Operation\n",
                     ",pmpaym.t_Oper\n",
                     ",pmpaym.t_OperNode\n",
                     ",rmprop.t_PartyInfo\n",
                     ",pmpaym.t_UserField1\n",
                     ",pmpaym.t_UserField2\n",
                     ",pmpaym.t_UserField3\n",
                     ",pmpaym.t_UserField4\n",
                     ",pmpaym.t_ComissFIID\n",
                     ",pmpaym.t_ComissAccount\n",
                     ",NVL(curtr.t_IsVO, CHR(0)) t_IsVO\n",
                     ",NVL(curtr.t_Accept, 0) t_VO_Accept\n",
                     ",NVL(curtr.t_Oper, 0) t_VO_Oper\n",
                     ",NVL(curtr.t_FIID, -1) t_VO_FIID\n",
                     ",NVL(curtr.t_Direct, 0) t_VO_Direct\n",
                     ",NVL(curtr.t_PayerBankID, 0) t_VO_PayerBankID\n",
                     ",NVL(curtr.t_PayerBankCodeKind, 0) t_VO_PayerBankCodeKind\n",
                     ",NVL(curtr.t_PayerBankCode, CHR(1)) t_VO_PayerBankCode\n",
                     ",NVL(curtr.t_PayerBankCountry, CHR(1)) t_VO_PayerBankCountry\n",
                     ",NVL(curtr.t_ReceiverBankID, 0) t_VO_ReceiverBankID\n",
                     ",NVL(curtr.t_ReceiverBankCodeKind, 0) t_VO_ReceiverBankCodeKind\n",
                     ",NVL(curtr.t_ReceiverBankCode, CHR(1)) t_VO_ReceiverBankCode\n",
                     ",NVL(curtr.t_ReceiverBankCountry, CHR(1)) t_VO_ReceiverBankCountry\n",
                     ",pmpaym.t_CheckTerror\n",
                     ",pmpaym.t_MCMethodID\n",
                     ",rmprop.t_DocDispatchDate\n",
                     ",pmpaym.t_I2PlaceDate\n",
                     ",pmpaym.t_FuturePayerAccount\n",
                     ",pmpaym.t_FIID_FuturePayAcc\n",
                     ",pmpaym.t_FutureReceiverAccount\n",
                     ",pmpaym.t_FIID_FutureRecAcc\n",
                     ",pmpaym.t_MinimizationTurn\n",
                     ",rmprop.t_PaymentKind\n",
                     ",pmpaym.t_PaymStatus\n",
                     ",rmprop.t_ComissCharges\n",
                     ",NVL(VO.t_Name, CHR(1)) t_VO_OperFIO\n",
                     ",NVL(oper.t_Name, CHR(1)) t_OperFIO\n",
                     ",decode(psc.t_Status, 3/*STAT_CASH_ORDER_CLOSE*/, LPAD(psc.t_ConnectAppKind, 5, '0') || psc.t_ConnectAppKey, LPAD(pmpaym.t_PaymentID, 34, '0')) t_PSCAppKey\n",
                     ",decode(psc.t_IsCurrency, 'X', 7/*DLDOC_CARRYC*/, 1/*DLDOC_CARRY*/) t_PSCDocKind\n",
                     ",PM_COMMON.DefineObjectKind(pmpaym.t_DocKind) t_ObjectType\n"
                     "from dpmpaym_dbt pmpaym, dpmrmprop_dbt rmprop, dpmcurtr_dbt curtr, dpmprop_dbt cred, \n",
                     "     dpmprop_dbt deb, dpmdemand_dbt dem, doproper_dbt oproper, dpspaydem_dbt psdem, \n",
                     "     dpmakkr_dbt akkr, dpscshdoc_dbt psc, dpmvaltr_dbt valtr, \n",
                     "     dperson_dbt oper, dperson_dbt VO, dps_bcord_dbt bcord, dpmproc_tmp tmp\n",
                     "where pmpaym.t_PaymentID = tmp.t_PaymentID and rmprop.t_PaymentID = pmpaym.t_PaymentID \n",
                     "  and curtr.t_PaymentID(+) = pmpaym.t_PaymentID \n",
                     "  and cred.t_PaymentID = pmpaym.t_PaymentID and cred.t_debetcredit = 1 \n",
                     "  and deb.t_PaymentID = pmpaym.t_PaymentID and deb.t_debetcredit = 0\n",
                     "  and dem.t_PaymentID(+) = pmpaym.t_PaymentID\n",
                     "  and psdem.t_OrderID(+) = pmpaym.t_PaymentID\n",
                     "  and oproper.t_DocKind = pmpaym.t_DocKind and oproper.t_DocumentID = LPAD(pmpaym.t_PaymentID, 34, '0')\n",
                     "  and akkr.t_PaymentID(+) = pmpaym.t_PaymentID\n",
                     "  and psc.t_AutoKey(+) = pmpaym.t_PaymentID\n",
                     "  and valtr.t_PaymentID(+) = pmpaym.t_PaymentID\n",
                     "  and bcord.t_PaymentID(+) = pmpaym.t_PaymentID\n",
                     "  and oper.t_Oper(+) = pmpaym.t_Oper\n",
                     "  and VO.t_Oper(+) = curtr.t_Oper) val");

  execSQL("truncate table dpmproc_tmp");
  var ins = RsbSQLInsert(string("insert into dpmproc_tmp (t_PaymentID) ",
                            "values (?)"), 1, size);
  var old = SetDialogFlag(0);
  ins.AddParam(V_INTEGER, IDs);

  if (not ins.Insert())
    SetDialogFlag(old);
    RunError("Ошибка при вставке платежей в таблицу pmproc.tmp");
  end;
  SetDialogFlag(old);

  var rs = execSQLSelect(query);
  rs.NullConversion = true;
  while (rs.moveNext())
    var res = IBOPaymentParm();
   
    var i:integer = 0,
        count:integer = rs.FldCount - 1,
        fld:RsdField;
    for( i, 0, count, 1 )
      fld = rs.Fld(i);  
      if (GenPropID(res, SubStr( fld.Name, 3 )) != -1)
        GenSetProp( res, SubStr( fld.Name, 3 ), fld.Value );
      end;
    end;
    res.CashSymbols = TArray();
    if (rs.value("IsCashSymbols"))
      var trs = execSQLSelect("select t_DocKind, t_Kind, t_ApplicationKey, t_Symbol, t_Sum, t_Date, t_RecID, NVL(t_AcctrnID, 0) t_AcctrnID from dsymbcash_dbt sc where sc.t_DocKind = ? and sc.t_ApplicationKey = ?", 
                                makeArray(SQLParam("", rs.value("t_PSCDocKind")), SQLParam("", rs.value("t_PSCAppKey"))));
      trs.NullConversion = true;
      while (trs.moveNext())
        var val = TRecHandler("symbcash.dbt");
        count = trs.FldCount - 1;
        for( i, 0, count, 1 )
          fld = trs.Fld(i);
          if (GenPropID(val.rec, SubStr( fld.Name, 3 )) != -1)
            GenSetProp( val.rec, SubStr( fld.Name, 3 ), fld.Value );
          end;
        end;
        res.CashSymbols[res.CashSymbols.size] = val;
      end;
    end;
    res.PaymentNotes = TArray();
    var NoteDate: Date = date(0,0,0);
    if (rs.value("IsPaymentNotes"))
      var DocumentID = GetDocumentID(OBJTYPE_PAYMENT, 0, rs.value("t_PaymentID"));
      trs = execSQLSelect("select t_NoteKind from dnotekind_dbt nk where nk.t_ObjectType = ? and exists (select 1 from dnotetext_dbt nt where nt.t_ObjectType = nk.t_ObjectType and nt.t_NoteKind = nk.t_NoteKind and nt.t_DocumentID = ?)", 
                                makeArray(SQLParam("", OBJTYPE_PAYMENT), SQLParam("", DocumentID)));
      trs.NullConversion = true;
      while (trs.moveNext())
        val = TPMNote;
        val.NoteKind = trs.value(0);
        val.NoteValue = readNoteForObject(OBJTYPE_PAYMENT, DocumentID, val.NoteKind, NULL, NoteDate);
        if (NoteDate != date(0,0,0))
          res.PaymentNotes[res.PaymentNotes.size] = val;
        end;
      end;
    end;
    res.PaymentCategories = TArray();
    if (rs.value("IsPaymentCategories"))
      trs = execSQLSelect("select * from dobjatcor_dbt where t_ObjectType = ? and t_Object = ? and t_ValidToDate = ?", 
                                makeArray(SQLParam("", OBJTYPE_PAYMENT), 
                                          SQLParam("", GetDocumentID(OBJTYPE_PAYMENT, 0, rs.value("t_PaymentID"))),
                                          SQLParam("", date(31,12,9999))));
      trs.NullConversion = true;
      while (trs.moveNext())
        val = TRecHandler("objatcor.dbt");
        count = trs.FldCount - 1;
        for( i, 0, count, 1 )
          fld = trs.Fld(i);
          if (ValType(fld.Value) == 26)
            RunError("t_ObjecType = 501 t_Object = " + GetDocumentID(OBJTYPE_PAYMENT, 0, rs.value("t_PaymentID")) + " NULL в значении поля " + fld.Name);
          end;
          if (GenPropID(val.rec, SubStr( fld.Name, 3 )) != -1)
            SetProperty(val, fld, 501, GetDocumentID(OBJTYPE_PAYMENT, 0, rs.value("t_PaymentID")));
            //GenSetProp( val.rec, SubStr( fld.Name, 3 ), fld.Value );
          end;
        end;
        res.PaymentCategories[res.PaymentCategories.size] = val;
      end;
    end;
    res.Notes = TArray();
    if (rs.value("IsNotes"))
      var ObjectType = rs.value("t_ObjectType");
      DocumentID = GetDocumentID(OBJTYPE_PAYMENT, 0, rs.value("t_PaymentID"));
      trs = execSQLSelect("select t_NoteKind from dnotekind_dbt nk where nk.t_ObjectType = ? and exists (select 1 from dnotetext_dbt nt where nt.t_ObjectType = nk.t_ObjectType and nt.t_NoteKind = nk.t_NoteKind and nt.t_DocumentID = ?)", 
                                makeArray(SQLParam("", ObjectType), SQLParam("", DocumentID)));
      trs.NullConversion = true;
      while (trs.moveNext())
        val = TPMNote;
        val.NoteKind = trs.value(0);
        val.NoteValue = readNoteForObject(ObjectType, DocumentID, val.NoteKind, NULL, NoteDate);
        if (NoteDate != date(0,0,0))
          res.Notes[res.Notes.size] = val;
        end;
      end;
    end;
    res.Categories = TArray();
    if (rs.value("IsCategories"))
      trs = execSQLSelect("select * from dobjatcor_dbt where t_ObjectType = ? and t_Object = ? and t_ValidToDate = ?", 
                                makeArray(SQLParam("", rs.value("t_ObjectType")), 
                                          SQLParam("", GetDocumentID(0, res.DocKind, rs.value("t_PaymentID"))),
                                          SQLParam("", date(31,12,9999))));
      trs.NullConversion = true;
      while (trs.moveNext())
        val = TRecHandler("objatcor.dbt");
        count = trs.FldCount - 1;
        for( i, 0, count, 1 )
          fld = trs.Fld(i);
          if (ValType(fld.Value) == 26)
            RunError("t_ObjectType = " + rs.value("t_ObjectType") + " t_Object = " + GetDocumentID(0, res.DocKind, rs.value("t_PaymentID")) + " NULL в значении поля " + fld.Name);
          end;
          if (GenPropID(val.rec, SubStr( fld.Name, 3 )) != -1)
            SetProperty(val, fld, rs.value("t_ObjectType"), GetDocumentID(0, res.DocKind, rs.value("t_PaymentID")));
            //GenSetProp( val.rec, SubStr( fld.Name, 3 ), fld.Value );
          end;
        end;
        res.Categories[res.Categories.size] = val;
      end;
    end;
    Result[Result.size] = res;
  end;
  if (Result.size == 0)
    RunError("Не найден(ы) запрашиваемый(е) платеж(и)",2406);
  end;
  return Result;
end;