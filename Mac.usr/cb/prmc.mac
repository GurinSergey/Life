/************************************************************************/
/*         Автоматизированная банковская система RS-Bank                */
/*                 Copyright (c) R-Style Software Lab 2002              */
/*                                                                      */
/*  Имя файла      : prmc.mac                                           */
/*                                                                      */
/*  Описание       : Печать сводного мемориального ордера               */
/*                   по мультивалютному документу                       */
/*                                                                      */
/*  Программист    : Смирнов С.В.                                       */
/*                                                                      */
/*  Создан         : 17.01.03                                           */
/*                                                                      */
// KS 03.12.2013 Перенос доработок в 31ю сборку
/************************************************************************/

import MC_lib, "prnlib.mac", likepy;
var
   ovp_acc_pay:string="", 
   ovp_acc_rec:string="",
   doc_acc_pay:string="", 
   doc_acc_rec:string="",
   ovp_sum:string="",
	ii : integer=1;

/* получить буфер счета */
PRIVATE MACRO GetAccount(chapt:integer, name:string, FIID:integer):TRecHandler
  var acc:TRecHandler = TRecHandler("account.dbt", "bank.def");
  var facc:TBFile = TBFile("account.dbt",  "R", 0, "account.dbt",  "bank.def");
  
  ClearRecord(acc);
  facc.rec.Chapter = chapt;
  facc.rec.Code_Currency = FIID;
  facc.rec.Account = name;
  if(facc.GetEQ())
    Copy(acc, facc);
  end;
  return acc;
END;

/* является ли счет счетом ОВП */
PRIVATE MACRO IsOCPAccount(acc:TRecHandler):bool  
  return (StrBrk(acc.rec.Type_Account, "Щ") > 0);
END;


/*---------------*/
/* Строка отчета */
/*---------------*/
PRIVATE CLASS TReportLine(number:integer, carry:TDocCarry)

  private var m_carry    :TDocCarry,
              m_print_ocp:bool,
              
              m_carry_num:integer,
              m_acc_pay  :TRecHandler,
              m_acc_rec  :TRecHandler,
              m_sum_pay  :string="", 
              m_sum_rec  :string="", 
              m_sum_rur  :string="";
  
  /* Напечатать строку таблицы */
  MACRO PrintTableLine()
    var acc_pay:string="", acc_rec:string="";
    acc_pay = m_acc_pay.rec.Account;
    acc_rec = m_acc_rec.rec.Account;

    /* Печатаем сумму в валюте из ОВП в одной строке с проводкой покрытия */
    if (acc_rec == ovp_acc_rec)
    	m_sum_rec = ovp_sum;
    end;
    if ( (acc_pay == ovp_acc_pay) and (substr(acc_rec, 1, 3) != "706") )
    	m_sum_rec = ovp_sum;
    end;

    /* Если обе валюты документа не национаные, то удаляем наименование счета ОВП */
    if (not m_print_ocp and (acc_pay == "ОВП"))
    	acc_pay = "";
    end;
    if (not m_print_ocp and (acc_rec == "ОВП"))
    	acc_rec = "";
    end;
  
    [|######|#########################|#########################|################|################|################|]
    (m_carry_num:r, acc_pay:l:f, acc_rec:l:f, m_sum_pay:r, m_sum_rec:r, m_sum_rur:r);
  END;
  
  /* Печать строки содержания проводки */
  MACRO PrintGroundLine()
    [ ##  ###############################################################################################################################]
    (m_carry_num:r, m_carry.rec.Ground:l);
  END;

  /* Конструктор */
  PRIVATE MACRO Constructor(number:integer, carry:TDocCarry)
    m_carry     = carry;

    m_carry_num = number;
    m_acc_pay   = GetAccount(m_carry.rec.Chapter, m_carry.rec.Account_Payer,    m_carry.rec.FIID_Payer    );
    m_acc_rec   = GetAccount(m_carry.rec.Chapter, m_carry.rec.Account_Receiver, m_carry.rec.FIID_Receiver );

    m_sum_rur = string(m_carry.rec.Sum_NatCur:0:2:r:f);
    if( ( m_carry.rec.FIID_Payer == NATCUR ) or ( m_carry.rec.Sum_Payer == 0 ) )
      m_sum_pay = "";
    else
      m_sum_pay = string(m_carry.rec.Sum_Payer:0:2:r:f ) + " " + GetFICode( m_carry.rec.FIID_Payer, null, FICK_ISOSTRING );
    end;
    if( ( m_carry.rec.FIID_Receiver == NATCUR ) or ( m_carry.rec.FIID_Payer == m_carry.rec.FIID_Receiver ) or ( m_carry.rec.Sum_Receiver == 0 ) )
      m_sum_rec = "";
    else
      m_sum_rec = string(m_carry.rec.Sum_Receiver:0:2:r:f ) + " " + GetFICode( m_carry.rec.FIID_Receiver, null, FICK_ISOSTRING );
    end;
  END;
  Constructor(number, carry);

END;

/*---------------------*/
/* Список строк отчета */
/*---------------------*/
PRIVATE CLASS (TArray)TReportLineList(carries:TDocCarryList)
  
  /* Напечатать строки таблицы */
  MACRO PrintTableLines()
    var i:integer = 0;
    if(size)
      while(i<size)
        value(i).PrintTableLine();
        i=i+1;
      end;
    else
      [| Нет проводок по документу                                                                       |];
    end;
  END;

  /* Напечатать строки содержания проводок */
  MACRO PrintGroundLines()
    var i:integer = 0;
    if(size > 0)
      [
         №  Содержание проводки ];
      while(i<size)
        value(i).PrintGroundLine();
        i=i+1;
      end;
    end;
  END;

  /* Конструктор */
  PRIVATE MACRO Constructor(carries:TDocCarryList)
    var i:integer = 0;
    while(i<carries.size)
      value(size) = TReportLine(i+1, carries.value(i));
      i=i+1;
    end;
  END;
  InitTArray(carries.size);
  Constructor(carries);

END;

/*----------------*/
/* Таблица отчета */
/*----------------*/
PRIVATE CLASS TReportTable(lines:TReportLineList)

  private var m_lines:TReportLineList = lines;

  /* Печать шапки */
  PRIVATE MACRO PrintHeader()
    [+------+-------------------------+-------------------------+--------------------------------------------------+
     |№ п.п.|         Дебет           |         Кредит          |                      Сумма                       |
     |      |                         |                         +---------------------------------+----------------+
     |      |                         |                         |      в иностранной валюте       | в национальной |
     |      |                         |                         +----------------+----------------+     валюте     |
     |      |                         |                         |      дебет     |    кредит      |                |
     +------+-------------------------+-------------------------+----------------+----------------+----------------+];
  END;

  /* Печать строк */
  PRIVATE MACRO PrintLastLine()
    [+------+-------------------------+-------------------------+----------------+----------------+----------------+];
  END;

  /* Печать */
  MACRO Print()
    PrintHeader();
    m_lines.PrintTableLines();
    PrintLastLine();
  END;
  
END;


/*--------------*/
/* Шапка отчета */
/*--------------*/
PRIVATE CLASS TReportHeader(doc:TDocument)
  
  private var m_doc:TDocument = doc;
          var NameDocument = "";
          var SPOD_str = IfThenElse( (m_doc.Payment().rec.DocKind == CB_MULTYDOC) and (Index( m_doc.rec.Type_Document, "З" )), 
                                      "СПОД", "" );

debugbreak;
  NameDocument = "СВОДНЫЙ МЕМОРИАЛЬНЫЙ";
  if( m_doc.Payment().rec.DocKind == CB_MULTYDOC )
    if( IsCORRECTING( m_doc.rec.Type_Document ) )
      NameDocument = "СВОДНЫЙ ИСПРАВИТЕЛЬНЫЙ";
    end;
  end;
  /* Печать */
  MACRO Print()
    array ground,NameB;
    StrSplit(m_doc.PMPayment().rec.Ground, ground, 80, 80, 2);
    StrSplit({Name_Bank},NameB,60,60,2);

    [############################################################
     ############################################################
    
                                ###################### ОРДЕР № ###############                  ####
                                           за ##########
     Назначение платежа:
     ################################################################################
     ################################################################################
     Курс сделки: #

    ](NameB(0), NameB(1), NameDocument:r, m_doc.PMPayment().rec.Number:l, SPOD_str, m_doc.PMPayment().rec.Date:f, ground(0):l, ground(1):l,
     /* EVG Печать курса сделки */
     (m_doc.Payment().rec.Rate / pow(10, m_doc.Payment().rec.Point)):l );
  END;

END;

/*---------------*/
/* Подвал отчета */
/*---------------*/
PRIVATE CLASS TReportFooter(doc:TDocument)
  
  private var m_doc:TDocument,
              m_oper:TRecHandler;       
  
  /* Печать */
  MACRO Print()
    [
     
     Ответственный исполнитель ________________________ / ################################### /


     Контролер                 ________________________ /                                     /
    ](m_oper.rec.name:l);
  END;

  /* Конструктор */
  PRIVATE MACRO Constructor(doc:TDocument)
    var fperson:TBFile = TBFile("person.dbt", "R", 0, "person.dbt", "bank.def");
    m_oper = TRecHandler("person.dbt", "bank.def");
    m_doc = doc;
    ClearRecord(m_oper);
    fperson.rec.Oper = m_doc.rec.Oper;
    if(fperson.GetEQ())
      Copy(m_oper, fperson);
    else
      ClearRecord(m_oper);
    end;
  END;
  Constructor(doc);
  
END;

/*-------*/
/* Отчет */
/*-------*/
CLASS ConsolidatedMemorialOrder(doc:TDocument)
  private var m_doc   :TDocument,
              m_header:TReportHeader,
              m_lines :TReportLineList,
              m_table :TReportTable,
              m_footer:TReportFooter, 
              m_error :bool;

  /* Печать */
  MACRO Print(ncopy:integer):bool
    var i:integer = 0, copy:integer = 0;
    if(not m_error)
      while(copy < ncopy)
        m_header.Print();
        m_table.Print();
        m_lines.PrintGroundLines();
        m_footer.Print();
        copy = copy + 1;
      end;
      return TRUE;
    else
      return FALSE;
    end;
  END;
          
  /* Конструктор */
  PRIVATE MACRO Constructor(doc:TDocument)
    private var m_error = FALSE;
    
    m_doc = doc;
    doc_acc_pay = doc.Payment().rec.payeraccount;
    doc_acc_rec = doc.Payment().rec.receiveraccount;
    if(not m_doc.carries().get(doc.Payment().rec.DocKind))
      MsgBox("Ошибка получения списка проводок документа");
      m_error = TRUE;
    end;
    
    m_lines  = TReportLineList(m_doc.carries());
    m_header = TReportHeader(m_doc);
    m_table  = TReportTable(m_lines);
    m_footer = TReportFooter(m_doc);

  END;
  Constructor(doc);
  
END;

/*------------------------------------*/
/* Отчет по мультивалютному документу */
/*------------------------------------*/
CLASS (ConsolidatedMemorialOrder)MC_ConsolidatedMemorialOrder(multydoc:TRecHandler, payment:TRecHandler, rmpayment:TRecHandler)

  var m_mdoc:TMultyDoc = TMultyDoc();
  m_mdoc.init(multydoc, payment, rmpayment);

  InitConsolidatedMemorialOrder(m_mdoc);

END;


