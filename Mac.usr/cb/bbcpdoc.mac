/***********************************************************************
          Автоматизированная банковская система RS-Bank v6.0           
                  Copyright (c) R-Style Software Lab                   
   Имя файла        : psrqdoc.mac
   Описание         : Макродействия валютных банковских платежей
   Создан           : 01.03.2011                                       
***********************************************************************/

import globals, check117, "pmchoper.mac", "pm_tools.mac", PaymInter, "pm_opr.mac", pmbuff, pm_chksave, "pm_syscont.mac";

/*номера полей в панели*/
const fld_Number      = 1,
      fld_Date        = 2,
      fld_DateValue   = 3,
      fld_Amount      = 19;
const fld_kzPayerCode    = 13,
      fld_kzReceiverCode = 30;


macro BB_CurPayOrderNewDoc()
  return 0;
end;

macro BB_CurPayOrderUserFunc( Режим:integer )
  return 1;
end;
             
macro BB_CurPayOrderCheckDoc( Режим )

  var stat     :integer = 0,
      ret_val  :bool,
      note     :string  = "",
      res      :integer,
      save_note:string  = "",
      ErrStr   :string  = "",
      OldDoc :integer = 0;

  /*Проверить исходящую ДПП*/
  /*Проверяем номер для всех документов, в том числе и отложенных.*/
  if( (Режим == 2 ) or (Режим == 3) or (Режим == 8) )
    if( needUseKZpm() )
      if( CompareStrWithMasks("10-29&??", r_pmkz.PayerCode) )
        MsgBox("Некорректное значение КОд");
        return fld_kzPayerCode;
      end;
      if( CompareStrWithMasks("10-29&??", r_pmkz.ReceiverCode) )
        MsgBox("Некорректное значение Кбе");
        return fld_kzReceiverCode;
      end;
    end;
    if( StrLen( r_pmrmprop.Number ) == 0 )
      MsgBox("Не задан номер документа");
      return fld_Number;
    end;
    if( ({curdate} - r_pmrmprop.Date) > 10 )
      msgbox("Некорректно задана дата документа");
      return fld_Date;
    end;
    if( OldDoc = GetRegValueOldDoc( r_pmpaym.DocKind ) )
      if((r_pmpaym.ValueDate - r_pmrmprop.Date) > OldDoc ) // Документ не устарел?
        MsgBox("Документ устарел и не может быть сохранён");
        return fld_Date;
      end;
    end;
    if( r_pmpaym.Amount < 0.0 )
      msgbox("Нельзя задавать отрицательную сумму");
      return fld_Amount;
    end;

    if( PM_CheckPayments( r_pmpaym, NULL, r_credit, r_pmrmprop, 1 ) )
      return 1;
    end;

    if( StrLen( r_pmrmprop.PartyInfo)>210-33 )
    if( RsbGetTrue( False,True,"Информация участнику превышает 177 символов.|Продолжить?")==False )
         return 1;
      end;
    end;

    if( StrLen( r_pmrmprop.ReceiverBankName)>140 )
    if( RsbGetTrue( False,True,"Наименование банка получателя превышает 140 символов.|Продолжить?")==False )
         return 14;
      end;
    end;

    if( StrLen( r_pmrmprop.PayerBankName)>140 )
    if( RsbGetTrue( False,True,"Наименование банка плательщика превышает 140 символов.|Продолжить?")==False )
         return 1;
      end;
    end;

    if( StrLen( r_pmrmprop.ReceiverName)>160 )
    if ( RsbGetTrue( False,True,"Наименование получателя превышает 160 символов.|Продолжить?")==False )
         return 16;
      end;
    end;

    if( StrLen( r_pmrmprop.PayerName)>160 )
    if ( RsbGetTrue( False,True,"Наименование плательщика превышает 160 символов.|Продолжить?")==False )
         return 10;
      end;
    end;

    if( GetDialogFlag() )
      if(PM_CheckCO(r_pmpaym,r_pmrmprop,0,r_credit))
        return 1;
      end;
    end;

    ErrStr = PM_CheckPaymAccounts( r_pmpaym, NULL, r_credit, r_pmrmprop, 1 );

    if( strlen(ErrStr) > 0 )
      msgbox( ErrStr );
      return 1;
    end;

    stat = BBCP_ScrolMacroCommonChecks( TPanelFields(), r_pmpaym, r_debet, r_credit, r_pmrmprop );
    if( stat != NOTERROR )
      return stat;
    end;

    /* Проверить по 117-И */
    if( CheckOnSave_117( r_pmpaym, NULL, r_credit, NULL, r_pmrmprop ) )
      return fld_Number;
    end;

  end;

  if( Режим == 1 ) /*УДАЛЕНИЕ ДОКУМЕНТА*/
    if(not isDLMRuning())
      if(r_pscpord.Origin == CP_OR_DEPOSIT )
        if(not Index( "Д", StrFor(GetIdentProgram())))
          msgbox("Документ порожден п/с \"Депозиты\".|Удаление запрещено.");
          stat = 1;
        end;

      elif(r_pscpord.Origin == CP_OR_ZP)
        msgbox("Документ порождён п/с \"Заработная плата\".|Удаление запрещено.");
        stat = 1;
    
      elif(r_pscpord.Origin == CP_OR_RMRETURN)
        msgbox("Документ порождён п/с \"АРМ позиционера\".|Удаление запрещено.");
        stat = 1;

      elif(r_pscpord.Origin == CP_OR_SF)
        msgbox("Документ является платой за обслуживание.|Удаление запрещено.");
        stat = 1;

      /* Документ из Клиент-Банк'а (или БОУРМ) */
      elif(r_pscpord.Origin == CP_OR_CLB) 
        save_note = note = readNoteForObject(OBJTYPE_BBANKCPORDER, makeObjectID(OBJTYPE_BBANKCPORDER, NULL, r_pscpord), NOTEKIND_BBCPORD_DELETEGROUND);
        ret_val = GetString(note, "Основание для удаления документа, полученного по системе \"Клиент-Банк\"", 68);
        if( ret_val and (save_note != note) )
          stat = addNoteForObject(OBJTYPE_BBANKCPORDER, makeObjectID(OBJTYPE_BBANKCPORDER, null, r_pscpord), NOTEKIND_BBCPORD_DELETEGROUND, note);
          if(stat)
            MsgBox("Ошибка добавления примечания к документу");
            return stat;
          end;
        end;
        if( not note )
          MsgBox("Документ получен по системе \"Клиент-Банк\".|Удаление без ввода основания запрещено.");
          return 1;
        end;

      elif(r_pscpord.Origin == CP_OR_LOANS)
        if(not Index( "Ц", StrFor(GetIdentProgram())))
          msgbox("Документ порождён п/с \"Кредитование\".|Удаление запрещено.");
          stat = 1;
        end;

      elif(r_pscpord.Origin == CP_OR_DEPOSIT)
        if(not Index( "Д", StrFor(GetIdentProgram())))
          msgbox("Документ порождён п/с \"Депозиты\".|Удаление запрещено.");
          stat = 1;
        end;

      elif(r_pscpord.Origin == CP_OR_RETAIL)
        if(not Index( "ВБD", StrFor(GetIdentProgram())))
          msgbox("Документ порождён п/с \"Обслуж.физ.лиц\".|Удаление запрещено.");
          stat = 1;
        end;

      elif(r_pscpord.Origin == CP_OR_PROCUNKNOWNPM)
        msgbox("Документ порожден при обработке невыясненной суммы.|Удаление запрещено.");
        stat = 1;
      end;
    end;

    if(CheckDeletePayment(r_pmpaym.PaymentID))
      return 1;
    end;

  end;

  if( Режим == 2 )  /* ВВОД ДОКУМЕНТА */
  end;
  
  if( Режим == 3 )  /* РЕДАКТИРОВАНИЕ ДОКУМЕНТА */
    /* Если документ получен по системе "Клиент-Банк", то запрещаем корректировку */
    /* Происхождения рублевых платежек: CP_OR_MANUAL-ручной ввод;CP_OR_CLB- Клиент банка */
    if(r_pscpord.Origin == CP_OR_CLB)
      msgbox("Документ получен по системе \"Клиент-Банк\".|Корректировка реквизитов запрещена.");
      stat = 1;
    elif(r_pscpord.Origin == CP_OR_DEPOSIT)
      if(not Index( "Д", StrFor(GetIdentProgram())))
         msgbox("Документ порожден п/с \"Депозиты\".|Редактирование запрещено.");
         stat = 1;
      end;
    elif(r_pscpord.Origin == CP_OR_ZP)
      msgbox("Документ порождён п/с \"Заработная плата\".|Редактирование запрещено.");
      stat = 1;
    elif( (r_pscpord.Origin == CP_OR_AUTO) and (r_pmpaym.PaymStatus == PM_REJECTED) )
      if( ПроверкаИдентичности(r_pmpaym, r_pmpaym_old, "Amount","FuturePayerAmount","PayAmount","FutureReceiverAmount","Rate","RateType","Point","Scale","RateDate","IsInverse","BaseRate","BaseRateType","BasePoint","BaseScale","BaseRateDate","IsBaseInverse") and
          ПроверкаИдентичности(r_pscpord, r_pscpord_old) and
          ПроверкаИдентичности(r_credit, r_credit_old) and
          ПроверкаИдентичности(r_pmrmprop , r_pmrmprop_old) and
          ПроверкаИдентичности( r_pmkz    , r_pmkz_old     ) and
          ПроверкаИдентичности(r_pmcurtr  , r_pmcurtr_old)
        )
        stat = CHANG_NOTIMPORTANT;
      else
        stat = CHANG_NOTKEEP;
      end;

    elif(r_pscpord.Origin == CP_OR_LOANS)
      if(not Index( "Ц", StrFor(GetIdentProgram())))
        msgbox("Документ порождён п/с \"Кредитование\".|Редактирование запрещено.");
        stat = 1;
      end;
    elif(r_pscpord.Origin == CP_OR_RETAIL)
      if(not Index( "ВБD", StrFor(GetIdentProgram())))
        msgbox("Документ порождён п/с \"Обслуж.физ.лиц\".|Редактирование запрещено.");
        stat = 1;
      end;
    elif(r_pscpord.Origin == CP_OR_SF)
      msgbox("Документ является платой за обслуживание.|Редактирование запрещено.");
      stat = 1;
    elif( r_pscpord.Origin == CP_OR_RMRETURN )
/*SDA  для возвращаемого валютного платежа открыл для изменения 71A - комиссии и расходы  */
      if( not ( ПроверкаИдентичности( r_pscpord , r_pscpord_old  ) and
                (r_credit.CodeKind == r_credit_old.CodeKind) and
                //ПроверкаИдентичности( r_credit  , r_credit_old, "BankCode", "Corschem", "Group" ) and
                ПроверкаИдентичности( r_pmpaym, r_pmpaym_old, "ReceiverBankID", "ReceiverAccount", "FutureReceiverAccount", 
                                                         "ReceiverMesBankID", "Receiver", "ReceiverCodeKind", "ReceiverCode" ) and
                ПроверкаИдентичности( r_pmrmprop , r_pmrmprop_old, "Ground", "ReceiverName", "ReceiverCorrAccNostro", 
                                                              "ReceiverBankName", "MessageType", "ReceiverINN","PayerINN",
                                                              "TaxAuthorState", "BttTICode", "OKATOCode", "TaxPmGround",
                                                              "TaxPmPeriod", "TaxPmNumber", "TaxPmDate","TaxPmType","COMISSCHARGES") and 
                ПроверкаИдентичности( r_pmcurtr  , r_pmcurtr_old    ) and
                ПроверкаИдентичности( r_pmkz    , r_pmkz_old     ) ) )
        msgbox( "Для возвращенного документа разрешено редактировать только назначение платежа, счет и наименование получателя, счет, код и наименование банка получателя, налоговые реквизиты" );
        stat = 1;
      end;
/*    elif( r_pscpord.Origin == CP_OR_PROCUNKNOWNPM )
      msgbox("Документ порожден при обработке невыясненой суммы.|Редактирование запрещено.");
      stat = 1;*/
    elif( (r_pscpord.Origin == CP_OR_REDIRECT) or (r_pscpord.Origin == CP_OR_TRANZIT) )
       msgbox("Документ порожден п/с \"АРМ позиционера\".|Редактирование запрещено.");
      stat = 1;
    else
      if(r_pscpord.CurrentState != 0)/* документ находится не в отложенных */
       /*При редактировании производим проверку важности внесенных изменений */
       /* Константы важности внесенных изменений:           */
       /* CHANG_NOTIMPORTANT   - изменения неважные (сохранение без отката операции)*/
       /* CHANG_IMPORTANT      - изменения важны (сохранение изменений возможно только при откате) */
       /* CHANG_NOTKEEP        - не сохранять изменения */
       /* Если возвращаемое значение  > 0, то это оно интерпритируется как номер поля с ошибочным параметром*/
       /* Если возвращаемое значение  = 0, то cчитается, что проверка прошла успешно
          и сохранение изменений можно производить без отката операции      */

         If ((r_pmrmprop.ground!=r_pmrmprop_old.ground) AND
            (r_pmcurtr.VO_code != r_pmcurtr_Old.VO_code))
             stat = CHANG_NOTIMPORTANT;
         End;

         if( (r_pmpaym.BaseAmount      != r_pmpaym_old.BaseAmount) or
             (r_pmpaym.Amount          != r_pmpaym_old.Amount) or
             (r_pmpaym.PayerAccount    != r_pmpaym_old.PayerAccount) or
             (r_pmpaym.ReceiverAccount != r_pmpaym_old.ReceiverAccount) or
             (r_pmpaym.ValueDate       != r_pmpaym_old.ValueDate) or
             (r_pmpaym.Department      != r_pmpaym_old.Department) or
             /*(r_credit.Corschem        != r_credit_old.Corschem) or*/
             (r_pmpaym.NumberPack      != r_pmpaym_old.NumberPack) or
             (r_credit.CodeKind        != r_credit_old.CodeKind ) or
             (r_credit.BankCode        != r_credit_old.BankCode) or 
             (r_pmrmprop.SymbNotBalDebet != r_pmrmprop_old.SymbNotBalDebet ) or
             (r_credit.RlsFormID       != r_credit_old.RlsFormID) 
           )
          stat = CHANG_IMPORTANT;
        end;
      end;
    end;

            
            if( ( 
                   Opr_IsStepExecuteSymb( r_pmpaym.DocumentID, r_pmpaym.DocKind, "К" ) Or 
                   Opr_IsStepExecuteSymb( r_pmpaym.DocumentID, r_pmpaym.DocKind, "А" ) Or
                   Opr_IsStepExecuteSymb( r_pmpaym.DocumentID, r_pmpaym.DocKind, "Е" ) Or
                   Opr_IsStepExecuteSymb( r_pmpaym.DocumentID, r_pmpaym.DocKind, "е" ) ) 
                   And
                   ( /*r_pscpord.CurrentState != PSPO_ST_REJECTED*/
                     r_pmpaym.PaymStatus != PM_REJECTED) )

                if ( not ( 
                     ПроверкаИдентичности(r_pscpord , r_pscpord_old   ) And
                     /* EVG Необходимо разрешать смену схемы расчётов.
                     ПроверкаИдентичности(r_credit  , r_credit_old    ) And*/
                     ПроверкаИдентичности(r_credit  , r_credit_old,   "CORSCHEM"    ) And
                     ПроверкаИдентичности(r_pmpaym  , r_pmpaym_old,   "FUTURERECEIVERACCOUNT") And
                     ПроверкаИдентичности(r_pmrmprop, r_pmrmprop_old  ) 
                     ) )                   
                        stat = CHANG_NOTKEEP;
                        //msgbox("Изменения не будут сохранены");
                elif (       
                     (Not Opr_IsStepExecuteSymb( r_pmpaym.DocumentID, r_pmpaym.DocKind, "U", "R") ) 
                      And
                     (Not Opr_IsStepExecuteSymb( r_pmpaym.DocumentID, r_pmpaym.DocKind, "З", "R", 29029) )
                      And 
                     /* EVG Разрешаем изменение счёта получателя до шага ПРББ позиционирования */
                     (Not Opr_IsStepExecuteSymb( r_pmpaym.DocumentID, r_pmpaym.DocKind, "6", "R" ) )
                      And 
                     (r_pmpaym.FutureReceiverAccount != r_pmpaym_old.FutureReceiverAccount )
                     )
                        stat = CHANG_NOTKEEP;
                        //msgbox("Изменения не будут сохранены");
                end;
            end;
      
  end;
 
  if( Режим == 7 ) /*ПОМЕЩЕНИЕ ДОКУМЕНТА В ОТЛОЖЕННЫЕ, ОТКАТ ОПЕРАЦИИ*/
  end;
  if( Режим == 8 )  /*ВВОД В ОТЛОЖЕННЫЕ*/
  end;
  
  if(Режим == OBJ_AFTEREDIT) // Проверка важности изменений влияющей на необходимость смены опера документа
                               // (изменения в буферах не сохраняются)
    return IsImportantChangeForOperBbCpOrder(r_pmpaym, r_pmpaym_old, r_pmrmprop, r_pmrmprop_old, r_credit, r_credit_old);

  end;

  return stat;

end;