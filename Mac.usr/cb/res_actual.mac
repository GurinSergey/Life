/*
$Name:           res_actual.mac
$Module:         Ядро ГКБО
$Description:    Актуализация параметров резервирования
*/
// KS 03.12.2013 Адаптация под 31ю сборку
/*LVV I-00543161 15.01.15  восстановил установку категорий и примечаний процедурой SetAccGroupRisk, закомментированную кем-то ранее  */
// Gurin S. 07.12.2015 HotFix 2031.19.25 (Life_1 1.3)_6
// Gurin S. 07.12.2015 HotFix 2031.19.25 (Life_1 1.3)_7
Import PTInter, "res_lib.mac", "timestat.mac";

/* Данные протокола */
var ActualizeLog : TArray;
var FormErrorLog : TArray;
var FormErrorNum : integer; /*признак того, что шаг вставлять не нужно или признак ошибки при проверках*/
var OverdueSumLog : TArray;

private macro datepr(acc, date1)
  var rs,str;
  str =   rsdcommand(" select t_date_value from drestdate_dbt where t_account = ? and t_chapter = 1 and t_date_value  > "+
                     " (select * from (SELECT t_date_value from drestdate_dbt where "+
                     " t_account = ? and t_rest = 0 and t_chapter = 1 order by t_date_value desc) where rownum = 1) "+
                     " order by t_date_value asc") ;   

  str.addparam("acc",RSDBP_IN, acc);
  str.addparam("acc1",RSDBP_IN, acc);
  str.execute();
  rs = rsdrecordset(str);
  if ( rs and rs.movenext)
    return(rs.value(0));
  else
    return (date1)
  end;
end;

/*
 * Добавить запись об актуализации параметров
 */
macro AddToLogActualize( AccOprServ, MessageType : integer, NameObject : string, Comment : string )
  var LogRecord = TArray;
  var NextIndex = ActualizeLog.Size();

  if( (AccOprServ.LogType == 2) or ((AccOprServ.LogType == 1) and (MessageType == ActualizeError)) )
  
    LogRecord[0] = MessageType;
    LogRecord[1] = NameObject;
    LogRecord[2] = Comment;

    if( NextIndex != 0 )
      LogRecord[1] = "";
    end;

    ActualizeLog[NextIndex] = LogRecord;
  
  end;

end;

/*
 * Резерв не формируем
 */
macro DontFormReserve()
  FormErrorNum = FormErrorNum + 1;
end;

/*
 * Добавить запись об протокол ошибок и установить ошибку
 */
macro AddToLogFormError( AccOprServ, NameObject : string, Comment : string )
  var LogRecord = TArray;
  var NextIndex = FormErrorLog.Size();

  LogRecord[0] = NameObject;
  LogRecord[1] = Comment;

  if( NextIndex != 0 )
    LogRecord[0] = "";
  end;

  FormErrorLog[NextIndex] = LogRecord;
  DontFormReserve();
end;

macro AddToLogOverdueSum( Account : string, ClientCode : string, FICode : string, BackOffice : string, Sum : money, Saldo : money )
  var LogRecord = TArray;
  var NextIndex = OverdueSumLog.Size();

  LogRecord[0] = Account;
  LogRecord[1] = ClientCode;
  LogRecord[2] = FICode;
  LogRecord[3] = BackOffice;
  LogRecord[4] = Sum;
  LogRecord[5] = Saldo;

  OverdueSumLog[NextIndex] = LogRecord;
  
end;

/* строка - вид резерва */
private macro GetReserveKindString( ReserveKind : integer ) : string
  var ReserveKindString = "";

    if( ReserveKind == KindReserveLoss  ) ReserveKindString = "Вид резерва = РВП. ";
  elif( ReserveKind == KindReserveLoans ) ReserveKindString = "Вид резерва = РВПС. ";
  end;

  return ReserveKindString;
end;

/* минимальный процент резервирования для лицевого счета*/
private macro GetMinReserveProcentByReserveKind( ReserveKind : integer, RiskGroup : integer ) : double
  var ReserveProcent : double;
  
  ReserveProcent = 0;

    if( ReserveKind == KindReserveLoss  ) ReserveProcent = GetMinReserveProcent( RiskGroup );
  elif( ReserveKind == KindReserveLoans ) ReserveProcent = GetMinReserveProcentLoans( RiskGroup );
  end;

  return ReserveProcent;
end;

/* минимальный процент резервирования для портфеля*/
private macro GetMinReserveProcentByReserveKindCase( ReserveKind : integer, RiskGroup : integer ) : double
  var ReserveProcent : double;
  
  ReserveProcent = 0;

    if( ReserveKind == KindReserveLoss  ) ReserveProcent = GetMinReserveProcentCase( RiskGroup );
  elif( ReserveKind == KindReserveLoans ) ReserveProcent = GetMinReserveProcentLoansCase( RiskGroup );
  end;

  return ReserveProcent;
end;


/* обработка счетов просрочки */
private macro TestExpirationAccounts( AccOprServ, accRec, DateReserve : date, ReserveKind : integer, RiskGroup : @integer, ReserveProcent : @double )
  var TimeDelay : integer;
  var NewRiskGroup      : integer;
  var NewReserveProcent : double;
  
  var stat = true;

  if( CompareStrWithMasks(GetExpirationAccounts(), accRec.Account) == 0 )
    TimeDelay = 0;

    GetRegistryValue( "CB\\РЕЗЕРВЫ\\СРОК ПРОСРОЧКИ", V_INTEGER, TimeDelay, null );

    if( (DateReserve - accRec.Open_Date) >= TimeDelay )
      
      NewRiskGroup = 5;
      NewReserveProcent = GetMinReserveProcentByReserveKind( ReserveKind, NewRiskGroup );

      if( (NewReserveProcent != null) and ((NewRiskGroup != RiskGroup) or (NewReserveProcent != ReserveProcent)) )

   /*LVV I-00543161 15.01.15 убрал неизвестно кем и зачем поставленное закомментирование с нижележащей строчки */
        if( SetAccGroupRisk(accRec, NewRiskGroup, DateReserve) and (SetProcentOfReserve(accRec, NewReserveProcent, DateReserve)) )
          RiskGroup      = NewRiskGroup;
          ReserveProcent = NewReserveProcent;
          
          AddToLogActualize( AccOprServ, ActualizeMessage, string(accRec.Account:f),
              "Категория качества изменена на " + RiskGroup +
              ", % резервирования на = " + ReserveProcent + ", срок просрочки > " + TimeDelay );

        end;

      end;
      
    end;

  end;

  return stat;

end; 

private macro GetClientCode( ClientID : integer ) : string
  file partcode("partcode.dbt") key 0;
  var ClientCode = "";

  partcode.PartyID  = ClientID;
  partcode.CodeKind = PTCK_CONTR;
  if( GetEQ(partcode) )
    ClientCode = partcode.Code;
  end;

  return ClientCode;
end;

private macro GetFICode( FIID : integer ) : string
  file fininstr("fininstr.dbt") key 0;
  var FICode = "";

  fininstr.FIID = FIID;
  if( GetEQ(fininstr) )
    FICode = fininstr.FI_Code;
  end;

  return FICode;
end;

private macro GetBackOffice( accRec, DateReserve : date ) : string

  var BackOffice = GetAccBackOffice( accRec, DateReserve );
  var BackOfficeCode = "";

  if( BackOffice == BackOffice_Retail )
    BackOfficeCode = "Retail";
  end;

  return BackOfficeCode;
end;

macro AccCalcSetAddToLogOverdueSum( accRec, DateReserve : date, AddToLog : bool ) : bool
  var stat = true;  
  var OverdueSum : money;
  var Saldo : money;
  OverdueSum = $0;
  OverdueSum = AccCalcOverdueSum( accRec, DateReserve );

  if(accRec.Code_Currency == NATCUR)
    Saldo = RestA(accRec.Account, DateReserve, null, accRec.Chapter);
  else
    Saldo = RestAC(accRec.Account, accRec.Code_Currency, DateReserve, null, accRec.Chapter);
  end;
  
  SetAccOverdueSum( accRec, OverdueSum, DateReserve );

  if(OverdueSum != $0)
    stat = false;
  end;

  if(AddToLog)
    if(accRec.Code_Currency == NATCUR)
      Saldo = RestA(accRec.Account, DateReserve, null, accRec.Chapter);
    else
      Saldo = RestAC(accRec.Account, accRec.Code_Currency, DateReserve, null, accRec.Chapter);
    end;
    AddToLogOverdueSum( string(accRec.Account:f), GetClientCode( accRec.Client ), GetFICode( accRec.Code_Currency ), GetBackOffice( accRec, DateReserve ), OverdueSum, Saldo );
  end;
  return stat;
end;

/*
 * Проверить наличие счетов удовлетворяющих маскам просроченных требований и маске портфеля одновременно
 * true - существуют такие счета
 */
private macro CheckExistsAccountWithMask(OverdueBalanceMask : string, CaseAccountMask : string, DateReserve : date) : bool
  var query = "";
  var rs;
  var params : TArray;
  var SqlOverdueBalanceMask : string;
  var SqlCaseAccountMask : string;

  SqlOverdueBalanceMask = ConvertMaskToSQLFormat( OverdueBalanceMask, "t_Balance" );
  
  if( SqlOverdueBalanceMask == "" )
    SqlOverdueBalanceMask = "1 = 1";
  end;

  SqlCaseAccountMask = ConvertMaskToSQLFormat( CaseAccountMask, "t_Account" );
  
  if( SqlCaseAccountMask == "" )
    SqlCaseAccountMask = "1 = 1";
  end;

  query = query + "SELECT 1 ";
  query = query + "  FROM daccount_dbt ";
  query = query + " WHERE t_Open_Close = CHR(0) ";
  query = query + "   AND t_Open_Date <= :Open_Date ";
  query = query + "   AND (   t_Close_Date = TO_DATE('01010001', 'DDMMYYYY') ";
  query = query + "        OR t_Close_Date > :Close_Date) ";
  query = query + "   AND (" + SqlOverdueBalanceMask + ") ";
  query = query + "   AND (" + SqlCaseAccountMask + ") ";
  query = query + "   AND NOT EXISTS(SELECT 1 ";
  query = query + "                    FROM dobjatcor_dbt ";
  query = query + "                   WHERE t_ObjectType = 4 ";
  query = query + "                     AND t_GroupID = 6 ";
  query = query + "                     AND t_AttrID = 2 ";
  query = query + "                     AND t_Object = TO_CHAR(t_Chapter, 'FM0x') || TO_CHAR(t_Code_Currency, 'FM0xxxxxx') || t_Account) ";
  query = query + "   AND ROWNUM = 1 ";

  params = makeArray(SQLParam("Open_Date", DateReserve)
                    ,SQLParam("Close_Date", DateReserve)
                    );

  rs = execSQLselect(query, params, true);
  if(rs and rs.moveNext())
    return true;
  end;                         

  return false;
end;

/*
 * Проверить наличие установленной классификации на портфеле CaseID, которая позволяет включать счета
 * с просроченными требованиями по установленной маске OverdueBalanceMask
 */
private macro CheckRsvprmForSubCases(OverdueBalanceMask : string, CaseID : integer, DateReserve : date) : bool
  var query = "";
  var rs;
  var params : TArray;
  var RsvprmAccountMask = "";

  query = query + "SELECT rsvprm.t_AccountMask ";
  query = query + "  FROM drsvprm_dbt rsvprm ";
  query = query + " WHERE rsvprm.t_DateFrom = (SELECT MAX(rsvprmd.t_DateFrom) FROM drsvprm_dbt rsvprmd WHERE rsvprmd.t_DateFrom <= :rsvprmdDateFrom) ";
  query = query + "   AND rsvprm.t_RsvClass IN (SELECT accassub.t_ReserveType ";
  query = query + "                               FROM daccassub_dbt accassub ";
  query = query + "                              WHERE accassub.t_DateFrom <= :accassubDateFrom ";                
  query = query + "                                AND accassub.t_CaseID IN (SELECT accasscs.t_CaseSubID ";
  query = query + "                                                            FROM daccasscs_dbt accasscs ";
  query = query + "                                                           WHERE accasscs.t_DateFrom <= :accasscsDateFrom ";
  query = query + "                                                             AND (   accasscs.t_DateTo = TO_DATE('01010001', 'DDMMYYYY') ";
  query = query + "                                                                  OR accasscs.t_DateTo >= :accasscsDateTo) ";
  query = query + "                                                             AND accasscs.t_CaseID = :accasscsCaseID)) ";

  params = makeArray(SQLParam("rsvprmdDateFrom", DateReserve)
                    ,SQLParam("accassubDateFrom", DateReserve)
                    ,SQLParam("accasscsDateFrom", DateReserve)
                    ,SQLParam("accasscsDateTo", DateReserve)
                    ,SQLParam("accasscsCaseID", CaseID)
                    );

  rs = execSQLselect(query, params, true);
  while(rs and rs.moveNext())
    /*Если существуют такие счета, то добавить маску портфеля к результирующей маске*/
    if(rs.value(0) != "")
      if(CheckExistsAccountWithMask(OverdueBalanceMask, rs.value(0), DateReserve))
        return true;
      end;
    end;
  end;                         
  return false;
end;

/*
 * Получить маски счетов для портфелей, которые удовлетворяют 
 * маске, заданной настройкой CB\\РЕЗЕРВЫ\\СЧЕТА ДЛЯ РАСЧ. ПРОСРОЧ. ТРЕБ. 
 * и переданной в кач-ве параметра OverdueBalanceMask
 */
private macro GetCaseAccountMask(OverdueBalanceMask : string, CaseID : integer, DateReserve : date) : string
  var query = "";
  var rs;
  var params : TArray;
  var CaseAccountMask = "";

  query = query + "SELECT accasepm.t_CaseID, accasepm.t_AccountMask ";
  query = query + "  FROM daccasepm_dbt accasepm ";
  query = query + " WHERE accasepm.t_CaseID IN (SELECT accase.t_CaseID ";
  query = query + "                               FROM daccase_dbt accase ";
  query = query + "                              WHERE accase.t_ReserveKind = 1 ";                
  query = query + "                                AND (accase.t_CaseID = :accaseCaseID OR :zeroCaseID = 0)";                
  query = query + "                                AND accase.t_DateFrom <= :accaseDateFrom ";
  query = query + "                                AND (   accase.t_DateTo = TO_DATE('01010001', 'DDMMYYYY') ";
  query = query + "                                     OR accase.t_DateTo >= :accaseDateTo)) ";
  query = query + "  AND accasepm.t_DateFrom <= :accasepmDateFrom ";
  query = query + "  AND (   accasepm.t_DateTo = TO_DATE('01010001', 'DDMMYYYY') ";
  query = query + "       OR accasepm.t_DateTo >= :accasepmDateTo) ";

  params = makeArray(SQLParam("accaseCaseID", CaseID)
                    ,SQLParam("zeroCaseID", CaseID)
                    ,SQLParam("accaseDateFrom", DateReserve)
                    ,SQLParam("accaseDateTo", DateReserve)
                    ,SQLParam("accasepmDateFrom", DateReserve)
                    ,SQLParam("accasepmDateTo", DateReserve)
                    );

  rs = execSQLselect(query, params, true);
  while(rs and rs.moveNext())
    /*Если существуют такие счета, то добавить маску портфеля к результирующей маске*/
    if(rs.value(1) != "")
      if(CheckExistsAccountWithMask(OverdueBalanceMask, rs.value(1), DateReserve))
        if(CheckRsvprmForSubCases(OverdueBalanceMask, rs.value(0), DateReserve))
          if(CaseAccountMask != "")
            CaseAccountMask = CaseAccountMask + ",";
          end;
          CaseAccountMask = CaseAccountMask + rs.value(1);
        end;
      end;
    end;
  end;                         
  return CaseAccountMask;
end;

/*
 * Расчет сумм просроченных требований
 */
private macro ResAccOverdueSumEx( AccOprServ, DateReserve : date, AddToLog : bool ) : bool

  var stat = true;
  record accRec("account.dbt");
  record rsvprm("rsvprm.dbt");
  var CalcOverdueSum : integer;
  var Rest : money;
  var ReserveKind = KindReserveNone;
  var OverdueMask = "";                           
  var CaseAccountMask = "";
  var SqlOverdueMask : string;
  var SqlAccountMask : string;
  var SqlCaseAccountMask = "*";

  var query = "", cntquery = "";
  var rs;
  var params : TArray;
  //Tikh
    SaveBeginTime ();//Старт
  var MaxCnt:integer=0, Cnt:integer=0;

  if((AccOprServ.CalcReserve != "X") or ((AccOprServ.IsCalcUnpaidGKBO != "X") and (AccOprServ.IsCalcUnpaidRetail != "X")))
    return true;
  end;
      
  OverdueMask = "";
      
  GetRegistryValue( "CB\\РЕЗЕРВЫ\\СЧЕТА ДЛЯ РАСЧ. ПРОСРОЧ. ТРЕБ.", V_STRING, OverdueMask, null );
      
  SqlOverdueMask = ConvertMaskToSQLFormat( OverdueMask, "t_Balance" );
  
  if( SqlOverdueMask == "" )
    SqlOverdueMask = "1 = 1";
  end;
      
  SqlAccountMask = ConvertMaskToSQLFormat( AccOprServ.AccountMask, "t_Account" );
  
  if( SqlAccountMask == "" )
    SqlAccountMask = "1 = 1";
  end;

  if((AccOprServ.ProcessCases == "X") or (AccOprServ.FormCases == "X") or (AccOprServ.IsDeleteUnpaid == "X"))
    CaseAccountMask = GetCaseAccountMask(OverdueMask, AccOprServ.CaseID, DateReserve);
    SqlCaseAccountMask = ConvertMaskToSQLFormat( CaseAccountMask, "t_Account" );
  end;

  if( SqlCaseAccountMask == "" )
    SqlCaseAccountMask = "1 = 0";
  end;

  query = query + "SELECT t_Account, t_Chapter, t_Code_Currency ";
  query = query + "  FROM daccount_dbt ";
  query = query + " WHERE t_Open_Close = CHR(0) ";
  query = query + "   AND t_Open_Date <= :Open_Date ";
  query = query + "   AND (   t_Close_Date = TO_DATE('01010001', 'DDMMYYYY') ";
  query = query + "        OR t_Close_Date > :Close_Date) ";
  
  if(((AccOprServ.ProcessCases == "X") or (AccOprServ.FormCases == "X") or (AccOprServ.IsDeleteUnpaid == "X")) and (AccOprServ.ProcessAccounts == "X"))
  query = query + "   AND ((" + SqlCaseAccountMask + ") OR (" + SqlAccountMask + ")) ";
  elif((AccOprServ.ProcessCases == "X") or (AccOprServ.FormCases == "X") or (AccOprServ.IsDeleteUnpaid == "X"))
  query = query + "   AND (" + SqlCaseAccountMask + ") ";
  elif(AccOprServ.ProcessAccounts == "X")
  query = query + "   AND (" + SqlAccountMask + ") ";
  end;
  
  query = query + "   AND (" + SqlOverdueMask + ") ";
  
  if(not AddtoLog)
  query = query + "   AND t_Code_Currency = " + string(AccOprServ.AccountFI);
  end;
      
  query = query + "   AND NOT EXISTS(SELECT 1 ";
  query = query + "                    FROM dobjatcor_dbt ";
  query = query + "                   WHERE t_ObjectType = 4 ";
  query = query + "                     AND t_GroupID = 6 ";
  query = query + "                     AND t_AttrID = 2 ";
  query = query + "                     AND t_Object = TO_CHAR(t_Chapter, 'FM0x') || TO_CHAR(t_Code_Currency, 'FM0xxxxxx') || t_Account) ";
  query = query + " ORDER BY t_Account ";
      
  params = makeArray(SQLParam("Open_Date", DateReserve)
                    ,SQLParam("Close_Date", DateReserve)
                    );

//Lavrenov: подсчитываем количество выбранных записей
  cntquery = "select count (1) cnt from ( "+query+" )";
  //msgbox(cntquery);
  rs = execSQLselect(cntquery, params, true);
  if(rs and rs.moveNext)
   MaxCnt = rs.value(0);
  end;
   Cnt = 0;

  rs = execSQLselect(query, params, true);

  ClearRecord(rsvprm);
  while(rs and rs.moveNext())
    //Tikh - Счетчик
    Cnt = Cnt+1;

    Message ("Обработано "+Cnt+" счетов из "+MaxCnt);

    if( GetAccountRecord( accRec, rs.value(1), rs.value(0), rs.value(2)))

      if((rsvprm.ParamID == 0) or (CompareStrWithMasks(rsvprm.AccountMask, accRec.Account) != 0))
        ClearRecord(rsvprm);
        CB_GetRsvParmForAccount(DateReserve, accRec.Account, accRec.Chapter, rsvprm);
      end;

      ReserveKind = GetAccKindReserve( accRec, DateReserve );

      if((rsvprm.RsvClass != 0) and 
         (((rsvprm.RsvClassLoans == 0) and (ReserveKind != KindReserveLoans)) or
          ((rsvprm.RsvClassLoans != 0) and (ReserveKind == KindReserveLoss ))))
        ReserveKind = KindReserveLoss;
      else
        ReserveKind = KindReserveNone;
      end;
      
      if( ReserveKind == KindReserveLoss )
      
        CalcOverdueSum = GetAccCalcOverdueSum( accRec, DateReserve );
        
        if( CalcOverdueSum != CalcOverdueSum_No )
        
          Rest = $0;
          Rest = GetAbsAccRest( accRec.Account, DateReserve, accRec.Chapter );
        
          if( CompareStrWithMasks( OverdueMask, accRec.Balance, 7 ) == 0 )
            if( Rest != $0 )
              /*расчет и сохранение примечания "просроч.требования"*/
              stat = AccCalcSetAddToLogOverdueSum( accRec, DateReserve, AddToLog );
              /*если не нужно добавлять в лог, значит вызов был из формирования портфеля,
                т.е. нужно сразу вернуть разрешение добавить счет в портфель*/
              if(not AddtoLog)
                return stat;
              end;
            else
              if( GetAccOverdueSum( accRec, DateReserve ) != 0 )
                stat = AccCalcSetAddToLogOverdueSum( accRec, DateReserve, AddToLog );
                if(not AddtoLog)
                  return stat;
                end;
              end;
            end;
          end;
        end;
      end;
    end;
  end;

  return stat;
end;

macro ResAccOverdueSum( AccOprServ, DateReserve : date ) : bool
  return ResAccOverdueSumEx(AccOprServ, DateReserve, true);
end;

/*
 * Расчет сумм просроченных требований
 * Функция имеет сишную обертку, вызываемую из формирования портфелей
 * Возвращает true - если счет может быть включен в портфель, т.е. он не имеет просроченных требований
 * Иначе false
 */
macro ResAccOverdueSumFromAccase( ObjAccOprServ, DateReserve : date ) : bool
  record AccOprServ(accopsrv);
  SetBuff(AccOprServ, ObjAccOprServ);
  return ResAccOverdueSumEx(AccOprServ, DateReserve, false);
end;

private macro _GetCategoryContragentCode(CategoryContragent : integer) : string
  file llvalues("llvalues.dbt") key 0;
  var ContragentCode = "";

  llvalues.List = OBJTYPE_KINDSUBJ;
  llvalues.Element = CategoryContragent;
  if( GetEQ(llvalues) )
    ContragentCode = llvalues.Code;
  end;

  return ContragentCode;
end;

private macro _NeedActualizeContragent
(
  ClassifReserveLoss : string
 ,ClassifReserveLoans : string
 ,ClassifReserveOffshore : string
 ,ReserveDate : date
) : bool
  var NeedActContr = false;

  var IncomeCatCodePrm : string;
  var OutlayCatCodePrm : string;

  if(not NeedActContr)
    GetIncomeOutlayCatCodeLoss(ClassifReserveLoss, @IncomeCatCodePrm, @OutlayCatCodePrm, ReserveDate);
    if(   (IncomeCatCodePrm == IncomeCatCodeCrdPrc)
       or (OutlayCatCodePrm == OutlayCatCodeCrdPrc)
       or (IncomeCatCodePrm == IncomeCatCodeDSAccPrc)
       or (OutlayCatCodePrm == OutlayCatCodeDSAccPrc)
       or (IncomeCatCodePrm == IncomeCatCodeDSPrc)
       or (OutlayCatCodePrm == OutlayCatCodeDSPrc))
    
      NeedActContr = true;
    
    end;
  end;

  if(not NeedActContr)
    GetIncomeOutlayCatCodeLoans(ClassifReserveLoans, @IncomeCatCodePrm, @OutlayCatCodePrm, ReserveDate);
    if(   (IncomeCatCodePrm == IncomeCatCodeCrdPrc)
       or (OutlayCatCodePrm == OutlayCatCodeCrdPrc)
       or (IncomeCatCodePrm == IncomeCatCodeDSAccPrc)
       or (OutlayCatCodePrm == OutlayCatCodeDSAccPrc)
       or (IncomeCatCodePrm == IncomeCatCodeDSPrc)
       or (OutlayCatCodePrm == OutlayCatCodeDSPrc))
    
      NeedActContr = true;
    
    end;
  end;

  if(not NeedActContr)
    GetIncomeOutlayCatCodeOffshore(ClassifReserveOffshore, @IncomeCatCodePrm, @OutlayCatCodePrm, ReserveDate);
    if(   (IncomeCatCodePrm == IncomeCatCodeCrdPrc)
       or (OutlayCatCodePrm == OutlayCatCodeCrdPrc)
       or (IncomeCatCodePrm == IncomeCatCodeDSAccPrc)
       or (OutlayCatCodePrm == OutlayCatCodeDSAccPrc)
       or (IncomeCatCodePrm == IncomeCatCodeDSPrc)
       or (OutlayCatCodePrm == OutlayCatCodeDSPrc))
    
      NeedActContr = true;
    
    end;
  end;

  return NeedActContr;
end;

/*
 * Актуализация параметров лицевых счетов
 * Параметры:
 * AccOprServ - буфер процедуры формирования резерва
 * accRec - буфер счета
 * DateReserve - дата формирования резерва
 * ReserveKind - вид резерва
 * OffshoreGroup - группа офшора
 * PtRiskGroup - категория качества субъекта, не задан для счета
 * PtReserveProcent - процент резервирования субъекта, не задан для счета 
 * PtReserveProcentOffshore - процент резервирования по офшору субъекта, не задан для счета
 * RiskGroup - откорректированная категория качества
 * ReserveProcent - откорректированный процент резервирования
 * ReserveProcentOffshore - откорректированный процент резервирования по офшору
 * QuiteMode - "тихий режим" работы: true - не сохранять в БД; не выводить в протокол; только определить PtRiskGroup, PtReserveProcent, PtReserveProcentOffshore. 
 */
macro ResAccActualize
( 
  AccOprServ
 ,accRec
 ,DateReserve : date
 ,ReserveKind : integer
 ,OffshoreGroup : integer
 ,ClassifReserveLoss : string
 ,ClassifReserveLoans : string
 ,ClassifReserveOffshore : string
 ,PtRiskGroup : @integer
 ,PtReserveProcent : @double
 ,PtReserveProcentOffshore : @double
 ,RiskGroup : @integer
 ,ReserveProcent : @double
 ,ReserveProcentOffshore : @double
 ,QuiteMode : bool 
) : bool
  record clientRec("party.dbt");
  /*var RiskGroup : integer;*/
  var tmpRiskGroup : integer;
  /*var ReserveProcent : double;*/
  var tmpReserveProcent : double;
  /*var ReserveProcentOffshore : double;*/
  var MinReserveProcentOffshore : double;
  var stat : bool;
  var OverdueMask : string;
  var CategoryUONH : integer;
  var CategoryContragent, CategoryContragentCode;

  stat = true;

  if(substr(ClassifReserveLoss, 1, 13) != "3.1.1 (91318)")
  
     RiskGroup = GetAccGroupRisk( accRec, DateReserve );
     ReserveProcent = GetProcentOfReserve( accRec.Chapter, accRec.Code_Currency, accRec.Account, DateReserve );

     if( ПолучитьСубъекта(accRec.Client, clientRec) )
       stat = false;
       if(not QuiteMode)
         AddToLogActualize( AccOprServ, ActualizeError, string(accRec.Account:f), "Ошибка при поиске клиента счета" );
       end;
     end;

     if( stat )
       /* счета просрочки */
       stat = TestExpirationAccounts( AccOprServ, accRec, DateReserve, ReserveKind, @RiskGroup, @ReserveProcent );
     end;

  
     if( (stat) and ( RiskGroup == null ) and ( ReserveProcent == null ))
    
       if( RiskGroup == null )
         RiskGroup = GetPtGroupRisk( clientRec, DateReserve );
         if( RiskGroup != null )
           if(not QuiteMode)
             AddToLogActualize( AccOprServ, ActualizeMessage, string(accRec.Account:f), GetReserveKindString(ReserveKind) + "Категория качества = " + RiskGroup + " перенесена с клиента счета." );
           end;
           PtRiskGroup = RiskGroup;
         end;
       end;

       if( ReserveProcent == null )
         ReserveProcent = GetPartyProcentOfReserve( clientRec, DateReserve );
         if( ReserveProcent )
           if(not QuiteMode)
             AddToLogActualize( AccOprServ, ActualizeMessage, string(accRec.Account:f), GetReserveKindString(ReserveKind) + "% резервирования = " + ReserveProcent + " перенесен с клиента счета." );
           end;
           PtReserveProcent = ReserveProcent;
         end;
       end;
  
     end;
  
     if(( stat ) and ( ReserveProcent != null ))
       /* устанавливаем категорию качества в соответствие проценту резервирования */
       tmpRiskGroup = 5;
       while( tmpRiskGroup > 0 )
         tmpReserveProcent = GetMinReserveProcentByReserveKind( ReserveKind, tmpRiskGroup );
  
         if((tmpReserveProcent != null) and ( tmpReserveProcent <= ReserveProcent ))
           if(( RiskGroup == null ) and ( PtRiskGroup == null ) and ( PtReserveProcent == null ))
             if(not QuiteMode)
               if( SetAccGroupRisk( accRec, tmpRiskGroup, DateReserve ))
                 AddToLogActualize( AccOprServ, ActualizeMessage, string(accRec.Account:f), GetReserveKindString(ReserveKind) + " Категория качества = " + tmpRiskGroup + ", установлена в соответствии с % резервирования." );
               end;
             end;
           elif(( RiskGroup != tmpRiskGroup ) and ( PtRiskGroup == null ) and ( PtReserveProcent == null ))
             if(not QuiteMode)
               if( SetAccGroupRisk( accRec, tmpRiskGroup, DateReserve ))
                 AddToLogActualize( AccOprServ, ActualizeMessage, string(accRec.Account:f), GetReserveKindString(ReserveKind) + " Категория качества изменена на " + tmpRiskGroup + " в соответствии со значением % резервирования." );
               end;
             end;
           elif(( RiskGroup == null ) and ( PtRiskGroup == null ) and ( PtReserveProcent != null ))
             PtRiskGroup = tmpRiskGroup;
             if(not QuiteMode)
               AddToLogActualize( AccOprServ, ActualizeMessage, string(accRec.Account:f), GetReserveKindString(ReserveKind) + "Категория качества = " + tmpRiskGroup + ", установлена в соответствии с % резервирования." );
             end;
           elif(( RiskGroup != tmpRiskGroup ) and ( PtReserveProcent != null ))
             PtRiskGroup = tmpRiskGroup;
             if(not QuiteMode)
               AddToLogActualize( AccOprServ, ActualizeMessage, string(accRec.Account:f), GetReserveKindString(ReserveKind) + "Категория качества изменена на " + tmpRiskGroup + " в соответствии со значением % резервирования." );
             end;
           end;

           RiskGroup = tmpRiskGroup;
           tmpRiskGroup = 0;
         end;

         tmpRiskGroup = tmpRiskGroup - 1;
       end;
     end;

     if(( stat ) and ( ReserveProcent == null ) and ( RiskGroup ))
       /* устанавливаем процент резервирования в соответствие с категорией качества */
       ReserveProcent = GetMinReserveProcentByReserveKind( ReserveKind, RiskGroup );
    
       if( ReserveProcent != null )
         if( PtRiskGroup == null )
           if(not QuiteMode)
             if( SetProcentOfReserve(accRec, ReserveProcent, DateReserve) )
               AddToLogActualize( AccOprServ, ActualizeMessage, string(accRec.Account:f), GetReserveKindString(ReserveKind) + "% резервирования = " + ReserveProcent + " установлен в соответствии с категорией качества." );
             end;
           end;
         else
           PtReserveProcent = ReserveProcent;
           if(not QuiteMode)
             AddToLogActualize( AccOprServ, ActualizeMessage, string(accRec.Account:f), GetReserveKindString(ReserveKind) + "% резервирования = " + ReserveProcent + " установлен в соответствии с категорией качества." );
           end;
         end;
       end;
     end;
  
     if(( stat ) and ( ReserveProcent == null ) and ( RiskGroup == null ))
       GetRegistryValue( "CB\\РЕЗЕРВЫ\\СЧЕТА ДЛЯ РАСЧ. ПРОСРОЧ. ТРЕБ.", V_STRING, OverdueMask, null );
       if( CompareStrWithMasks( OverdueMask, accRec.Balance, 7 ) == 0 )
         GetRegistryValue( "CB\\РЕЗЕРВЫ\\ПРОЦЕНТ ПО НЕПРОСРОЧ. ТРЕБ-ЯМ", V_DOUBLE, ReserveProcent, null );
         PtReserveProcent = ReserveProcent;
       end;
     end;

     if( stat )
       /* не задан процент резервирования */
       if( ReserveProcent == null )
         stat = false;
         if(not QuiteMode)
           AddToLogActualize( AccOprServ, ActualizeError, string(accRec.Account:f), GetReserveKindString(ReserveKind) + "Не установлен процент резервирования. Резервы формироваться не будут." );
         end;
       end;
       /* не задана группа риска */
       if( RiskGroup == null )
         if(not QuiteMode)
           AddToLogActualize( AccOprServ, ActualizeWarning, string(accRec.Account:f), GetReserveKindString(ReserveKind) + "Не установлена категория качества." );
         end;
       end;
     end;

     if( OffshoreGroup )
    
       ReserveProcentOffshore = GetProcentOfReserveOffshore( accRec.Chapter, accRec.Code_Currency, accRec.Account, DateReserve );
    
       if( ReserveProcentOffshore == null )
      
         ReserveProcentOffshore = GetPartyProcentOfReserveOffshore( clientRec, DateReserve );
         if( ReserveProcentOffshore != null )
           if(not QuiteMode)
             AddToLogActualize( AccOprServ, ActualizeMessage, string(accRec.Account:f), "% резервирования - офшор = " + ReserveProcentOffshore + " перенесен с клиента счета." );
           end;
           PtReserveProcentOffshore = ReserveProcentOffshore;
         end;
    
       end;
  
       MinReserveProcentOffshore = GetMinReserveProcentOffshore( OffshoreGroup );
    
       if( MinReserveProcentOffshore != null )
      
         if( ReserveProcentOffshore == null )
    
           /* устанавливаем процент резервирования в соответствие с группой офшора */
           ReserveProcentOffshore = GetMinReserveProcentOffshore( OffshoreGroup );
    
           if( ReserveProcentOffshore != null )
             if(not QuiteMode)
               stat = SetProcentOfReserveOffshore( accRec, ReserveProcentOffshore, DateReserve );
               if( stat )
                 AddToLogActualize( AccOprServ, ActualizeMessage, string(accRec.Account:f), "% резервирования - офшор = " + ReserveProcentOffshore + " установлен в соответствии с группой офшорной зоны." );
               else
                 AddToLogActualize( AccOprServ, ActualizeError, string(accRec.Account:f), "Ошибка при установке процента резервирования - офшор." );
               end;
             end;
           end;
         else
           if( ReserveProcentOffshore < MinReserveProcentOffshore )
             if(not QuiteMode)
               AddToLogActualize( AccOprServ, ActualizeWarning, string(accRec.Account:f), "Группа офшорной зоны " + OffshoreGroup + ", процент резервирования " + ReserveProcentOffshore + "%." );
             end;
           end;
         end;
       end;
     end;

     if(stat and (DateReserve >= DateBegin446P) and (_NeedActualizeContragent(ClassifReserveLoss, ClassifReserveLoans, ClassifReserveOffshore, DateReserve)))
       if(not QuiteMode)
         if(accRec.Contragent == 0)
           CategoryContragent = GetCategoryContragent(accRec.Balance, accRec.Chapter);
           CategoryContragentCode = "";
           if(CategoryContragent != null)
             CategoryContragentCode = _GetCategoryContragentCode(CategoryContragent)
           end;
           if(CategoryContragentCode != "")
             AddToLogActualize( AccOprServ, ActualizeMessage, string(accRec.Account:f), "Категория контрагента \"" + CategoryContragentCode + "\" определена в соответствии с характеристикой балансового счета." );
           else
             stat = false;
             AddToLogActualize( AccOprServ, ActualizeError, string(accRec.Account:f), "Не задана категория контрагента для лицевого счета." );
           end;
         end;
       end;
     end;
   else
    CategoryUONH = GetAccCategoryUONH(accRec, DateReserve);
    if(CategoryUONH == null)
      stat = false;
      if(not QuiteMode)
        AddToLogActualize( AccOprServ, ActualizeError, string(accRec.Account:f), GetReserveKindString(ReserveKind) + "Не установлена категория УОНХ." );
      end;
    end;
  end;
  return stat;
end;

/*
 * Актуализация параметров портфелей
 * Параметры:
 * AccOprServ - буфер процедуры формирования резерва
 * acCase - буфер портфеля
 * acCaseParm - буфер параметра портфеля
 * DateReserve - дата формирования резерва
 * QuiteMode - "тихий режим" работы: true - не сохранять в БД; не выводить в протокол; только определить acCaseParm.RiskGroup, acCaseParm.ReservePercent. 
 */
macro ResCaseActualize( AccOprServ, acCase, acCaseParm, AcCaseSubCase, DateReserve : date, QuiteMode : bool ) : bool
  var stat : bool;
  file accasepm("accasepm.dbt") key 0 write;
  var RiskGroup : integer;
  var ReservePercent : double;
  var query, rs;
  var params : TArray;
  var ReserveType : integer;
  var ClassifReserveLoss     : string;
  var ClassifReserveLoans    : string;
  var Classif, Balance, iBegBrackets = 0, iEndBrackets = 0;
  var CategoryContragent, CategoryContragentCode;

  if(not QuiteMode)
    accasepm.CaseID   = acCaseParm.CaseID  ;
    accasepm.DateFrom = acCaseParm.DateFrom;
    if( not GetEQ(accasepm) )
      return false;
    end;
  end;

  stat = true;

  if(( acCaseParm.RiskGroup == "" ) and ( acCaseParm.ReservePercent > 0 ))
    RiskGroup = 5;
    while( RiskGroup > 0 )
      ReservePercent = GetMinReserveProcentByReserveKindCase( acCase.ReserveKind, RiskGroup );

      if((ReservePercent != null) and ( ReservePercent <= acCaseParm.ReservePercent ))

        acCaseParm.RiskGroup = RiskGroup;
        if(not QuiteMode)
          accasepm.RiskGroup = RiskGroup;
          Update(accasepm);
          AddToLogActualize( AccOprServ, ActualizeMessage, acCase.Name, GetReserveKindString( acCase.ReserveKind ) + " Категория качества = " + acCaseParm.RiskGroup + ", установлена в соответствии с % резервирования" );
        end;
        RiskGroup = 0;
      end;

      RiskGroup = RiskGroup - 1;
    end;
  end;

  if(( acCaseParm.RiskGroup != "" ) and ( acCaseParm.ReservePercent == 0 ))
    ReservePercent = GetMinReserveProcentByReserveKindCase( acCase.ReserveKind, int(acCaseParm.RiskGroup) );

    if((ReservePercent != null) and ( ReservePercent > 0 ))

      acCaseParm.ReservePercent = ReservePercent;
      if(not QuiteMode)
        accasepm.ReservePercent = ReservePercent;
        Update(accasepm);
        AddToLogActualize( AccOprServ, ActualizeMessage, acCase.Name, GetReserveKindString( acCase.ReserveKind ) + " % резервирования = " + acCaseParm.ReservePercent + ", установлен в соответствии с категорией качества" );
      end;
    end;
  end;

  if(( acCaseParm.RiskGroup != "" ) and ( acCaseParm.ReservePercent > 0 ))
    RiskGroup = 5;
    while( RiskGroup > 0 )
      ReservePercent = GetMinReserveProcentByReserveKindCase( acCase.ReserveKind, RiskGroup );

      if((ReservePercent != null) and ( ReservePercent <= acCaseParm.ReservePercent ))
        if( acCaseParm.RiskGroup != RiskGroup )

          acCaseParm.RiskGroup = RiskGroup;
          if(not QuiteMode)
            accasepm.RiskGroup = RiskGroup;
            Update(accasepm);
            AddToLogActualize( AccOprServ, ActualizeMessage, acCase.Name, GetReserveKindString( acCase.ReserveKind ) + " Категория качества изменена на " + acCaseParm.RiskGroup + " в соответствии со значением % резервирования" );
          end;
        end;
        RiskGroup = 0;
      end;

      RiskGroup = RiskGroup - 1;
    end;
  end;

  if( acCaseParm.ReservePercent == 0 )
    if(not QuiteMode)
      AddToLogActualize( AccOprServ, ActualizeMessage, acCase.Name, GetReserveKindString( acCase.ReserveKind ) + " Не установлен процент резервирования. Резервы формироваться не будут" );
    end;
  end;

  if( acCaseParm.RiskGroup == "" )
    if(not QuiteMode)
      AddToLogActualize( AccOprServ, ActualizeMessage, acCase.Name, GetReserveKindString( acCase.ReserveKind ) + " Не указана категория качества." );
    end;
  end;

  if(stat and (DateReserve >= DateBegin446P))
    if(not QuiteMode)
      
      query =         "SELECT t_reservetype ";
      query = query + "  FROM daccassub_dbt ";
      query = query + " WHERE t_caseid = :CaseSubID ";
      query = query + "   AND t_datefrom = :DateFrom ";
      params = makeArray(SQLParam("CaseSubID", AcCaseSubCase.CaseSubID)
                        ,SQLParam("DateFrom", AcCaseParm.DateFrom)
                        );
      rs = execSQLselect(query, params, true);
      if(stat and rs and rs.moveNext())
        ReserveType = rs.value(0);
        Balance = null;
        Classif             = GetCaseReserveClassif(AcCase.ReserveKind, ReserveType, acCase);
        ClassifReserveLoss  = GetCaseReserveClassif(KindReserveLoss   , ReserveType, acCase);
        ClassifReserveLoans = GetCaseReserveClassif(KindReserveLoans  , ReserveType, acCase);

        if(_NeedActualizeContragent(ClassifReserveLoss, ClassifReserveLoans, "", DateReserve))
          if(AcCaseSubCase.Contragent == 0)
            iBegBrackets = index(Classif, "(");
            iEndBrackets = index(Classif, ")");
            if((Classif != null) and (iBegBrackets > 0) and (iEndBrackets > 0))
              Balance = substr(Classif, iBegBrackets + 1, iEndBrackets - iBegBrackets - 1);
            end;
            
            if(Balance != null)
              CategoryContragent = GetCategoryContragent( Balance, acCaseParm.AccountChapter );
              CategoryContragentCode = "";
              if(CategoryContragent != null)
                CategoryContragentCode = _GetCategoryContragentCode(CategoryContragent)
              end;
              if(CategoryContragentCode != "")
                AddToLogActualize( AccOprServ, ActualizeMessage, acCase.Name, "Категория контрагента \"" + CategoryContragentCode + "\" для субпортфеля " + AcCaseSubCase.Number + " определена в соответствии с классификацией резерва." );
              else
                stat = false;
                AddToLogActualize( AccOprServ, ActualizeError, acCase.Name, "Не задана категория контрагента для субпортфеля " + AcCaseSubCase.Number + "." );
              end;
            end;
          end;
        end;
      end;                         
    end;
  end;

  return stat;
end;
