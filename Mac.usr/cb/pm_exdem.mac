//-----------------------------------------------------------------------------
// Блок     : 29046 - "Картотека требований-поручений"
// Шаг      : 10    - "Формирование платежа по оплате требований"
// Описание : Макрос шага
//-----------------------------------------------------------------------------
import globals, PaymInter, BankInter, FIInter, PTInter, pm_ext, pm_setst, likepy, cbsttls, pm_tools;
import OprInter, oralib; //Jushmanov 2014-02-25 C-19151

var PaymentObj:RsbPayment;


//-----------------------------------------------------------------------------
// Создать платеж банка
//-----------------------------------------------------------------------------
PRIVATE MACRO CreateBankPaym():RsbPayment

    var Payment:RsbPayment = null;
    var BankPaym:object    = null;

    if( ( PaymentObj.PayerFIID == PaymentObj.BaseFIID )
    and ( PaymentObj.PayerFIID == PaymentObj.ReceiverFIID )
    and ( PaymentObj.PayerFIID == 0 /*NATCUR*/ ) )

        BankPaym               = GenObject( "RsbBankPayment", 0 );
        Payment                = BankPaym.Payment();

        BankPaym.Origin        = MEMORDER_FDOC_PAYDEMAND;
        BankPaym.Oper          = {oper}; 
        BankPaym.Status        = 1/*MEMORDER_STATUS_POST*/;

        Payment.DocKind        = DLDOC_BANKPAYMENT;
        Payment.Purpose        = PM_PURP_BANKPAYMENT;

        Payment.BaseFIID       =
        Payment.PayerFIID      = 
        Payment.ReceiverFIID   = 
        Payment.OrderFIID      = PaymentObj.PayerFIID;

        Payment.BaseAmount     = PaymentObj.BaseAmount;
        Payment.ReceiverAmount = PaymentObj.BaseAmount;
        Payment.PayerAmount    = PaymentObj.BaseAmount;
        Payment.OrderAmount    = PaymentObj.BaseAmount;

    else

        BankPaym               = GenObject( "RsbBbCpOrder", 0 );
        Payment                = BankPaym.Payment();

        BankPaym.Origin        = CP_OR_PAYDEMAND;
        BankPaym.Oper          = {oper}; 
        BankPaym.CurrentState  = 0/*CP_ST_DEFERRED*/;

        Payment.DocKind        = BBANK_CPORDER;
        Payment.Purpose        = PM_PURP_BANKPAYMENT;
        Payment.ComissCharges  = PM_CHRG_SHA;
                                                                                         
        Payment.BaseFIID       = PaymentObj.BaseFIID;
        Payment.PayerFIID      = PaymentObj.PayerFIID;
        Payment.ReceiverFIID   = PaymentObj.ReceiverFIID;
        Payment.OrderFIID      = PaymentObj.OrderFIID;
                                                                                               
        Payment.BaseAmount     = PaymentObj.BaseAmount;
        Payment.ReceiverAmount = PaymentObj.ReceiverAmount;
        Payment.PayerAmount    = PaymentObj.PayerAmount;
        Payment.OrderAmount    = PaymentObj.OrderAmount;
    end;

    Payment.Number      = PaymentObj.Number;
    Payment.PaymentKind = "Э";
    Payment.ShifrOper   = "01";

    Payment.SetPayerPI( PAYMENTS_GROUP_UNDEF, 
                        PaymentObj.PayerBankID, 
                        PaymentObj.PayerBankCodeKind, 
                        PaymentObj.PayerBankCode, 
                        PaymentObj.PayerBankName,
                        PaymentObj.PayerBankCorrAcc,
                        PaymentObj.PayerFIID, 
                        1/*CHAPT1*/, 
                        PaymentObj.PayerAccount, 
                        PaymentObj.Payer, 
                        PaymentObj.PayerName, 
                        PaymentObj.PayerINN );

    Payment.SetReceiverPI( PAYMENTS_GROUP_UNDEF, 
                           PaymentObj.ReceiverBankID, 
                           PaymentObj.ReceiverBankCodeKind, 
                           PaymentObj.ReceiverBankCode, 
                           PaymentObj.ReceiverBankName,
                           PaymentObj.ReceiverBankCorrAcc,
                           PaymentObj.ReceiverFIID, 
                           1/*CHAPT1*/, 
                           PaymentObj.ReceiverAccount, 
                           PaymentObj.Receiver, 
                           PaymentObj.ReceiverName, 
                           PaymentObj.ReceiverINN );

    Payment.PayDate     =
    Payment.ClientDate  = 
    Payment.Date        =
    Payment.ValueDate   = {curdate};
    Payment.Ground      = PaymentObj.Ground;

    // Установить признак автозапуска операции.
    BankPaym.LaunchOper = true;

    Payment.CryptoAction( string("Автоматическое_формирование_платежей") );
    return Payment;
END;


// ----------------------------------------------------------------------------
// Макроса шага
// ----------------------------------------------------------------------------
MACRO ExecuteStep( doc, paymDoc )

    var stat:integer = 0;
    var Action:integer;
    var PayPayment:RsbPayment = CreateBankPaym();

    array FlgRM;       // Массив флагов для R-макета
    array FlgKZRM;     // Массив флагов для R-макета ( казахская платежка )
    array FlgCP;       // Массив флагов для Swift
    array FlgKZCP;     // Массив флагов для Swift ( казахская платежка )
    FlgRM[PNRMPM_COUNT]      = 0;
    FlgKZRM[KZPNRMPM_COUNT]  = 0;
    FlgCP[PNCPPM_COUNT]      = 0;
    FlgKZCP[KZ_PNCPPM_COUNT] = 0;

    FlgRM[ PNRMPM_NUMBER  ] = 1; // R-maket
    FlgRM[ PNRMPM_ACCOUNTP] = 1;
    FlgRM[ PNRMPM_INNP    ] = 1;
    FlgRM[ PNRMPM_NAMEP   ] = 1;
    FlgRM[ PNRMPM_GROUND  ] = 1;
    FlgKZRM[ KZPNRMPM_NUMBER    ] = 1; // R-maket
    FlgKZRM[ KZPNRMPM_IIK_PAYER ] = 1;
    FlgKZRM[ KZPNRMPM_RNN_PAYER ] = 1;
    FlgKZRM[ KZPNRMPM_PAYER     ] = 1;
    FlgKZRM[ KZPNRMPM_GROUND    ] = 1;

    FlgCP[ PNCPPM_NUMBER    ] = 1; // Swift
    FlgCP[ PNCPPM_ACCOUNTP  ] = 1;
    FlgCP[ PNCPPM_NAMEP     ] = 1;
    FlgCP[ PNCPPM_DETAILS   ] = 1;
    FlgKZCP[ KZ_PNCPPM_Number        ] = 1; // Swift
    FlgKZCP[ KZ_PNCPPM_PayerCodeKind ] = 1;
    FlgKZCP[ KZ_PNCPPM_PayerCode     ] = 1;
    FlgKZCP[ KZ_PNCPPM_PayerAccount  ] = 1;
    FlgKZCP[ KZ_PNCPPM_PayerINN      ] = 1;
    FlgKZCP[ KZ_PNCPPM_PayerName     ] = 1;
    FlgKZCP[ KZ_PNCPPM_Ground        ] = 1;

    // Вызвать многозакладочную панель редактирования платежа
    // В панели редактирования разрешить изменение следующих реквизитов:
    //  - Номер платежа;
    //  - Вид кода и код плательщика;
    //  - Счет плательщика;
    //  - ИНН плательщика;
    //  - Наименование плательщика;
    //  - Назначение платежа.
    if( not needUseKZpm() )
        Action = PM_ProcessPanel( PayPayment, 1, NULL, FlgRM, FlgCP );
    else
        Action = PM_ProcessPanel( PayPayment, 1, NULL, FlgKZRM, FlgKZCP );
    end;

    if( Action )
        if( Action == 4704 )
            msgbox( "Выполнение процедуры прервано пользователем" );
        else
            msgbox( "Ошибка при создании панели редактирования платежа" );
        end;
        return 1;
    end;

    // Создать связь
    if( PaymentObj.LinkPayment(PayPayment, PMLINK_KIND_KVITING ) )
        msgbox(GetErrMsg());
        return 1;
    end;

    PM_SetPrimDocumentState( PaymentObj, DOCUMENT_ST_CLOSED );
    PaymentObj.PaymStatus = PM_FINISHED;

    if( УстановитьСтатусыПлатежа( OPR_PAYM_STATE, OPR_PM_ST_CLOSE ) )
        msgbox("Ошибка при установке сегментов статуса экземпляра операции");
        return 1;
    end;

    return 0;
END;


//Jushmanov 2014-02-25 C-19151
macro PostStepAction( message,      /* 1 - выполнение шага; 2 - откат шага;   */
                      errTrn,       /* статус выполнения шага. 0 - ошибки нет */
                      FirstDoc,     /* указатель на первичный документ        */
                      ID_Oper,      /* внутренний идентификатор операции      */
                      Number_Step,  /* Номер шага операции (из настроек)      */
                      KindOper,     /* номер вида операции                    */
                      KindDoc,      /* номер вида первичного документа        */
                      KindStep,     /* вид шага операции                      */
                      ID_Step )     /* внутренний идентификатор шага операции */
    private var logquery, idStep = ID_Step, idOper = ID_Oper;

    if(( message == OP_EXECUTE_STEP ) and (errTrn == 0) and (IsOprMultiExec))
        if ((valtype(idOper) != V_INTEGER) and (valtype(idOper) != V_STRING)) idOper = 0; end;
        if ((valtype(idStep) != V_INTEGER) and (valtype(idStep) != V_STRING)) idStep = 0; end;

        logquery = "UPDATE usr_doprstep_robot_dbt SET t_is_robot_step = chr(88)" +
                   " WHERE t_id_operation = " + idOper + " AND t_id_step = " + idStep;
        ExecSQL(logquery, null, false);
    end;

    return 0;
end;