//------------------------------------------------------------------------------
//            Автоматизированная банковская система RS-Bank
//
//   File Name        : pmchcom.mac
//
//   Description      : Функции для операций по платежным документам расчетного банка.
//
//   Author           : Смирнов С.В.
//
//   History          : Создан : 20.09.2005
//
//------------------------------------------------------------------------------
//   !!! Не должен включать InsCarryDoc, т.к. используется не только в макросах шагов !!!
//------------------------------------------------------------------------------
// KS 22.11.2013 Предварительная адаптация под 31ю сборку

import BankInter, OprInter, oralib, likepy;
import pmsummo;

var EditFromHistScrol:bool;

//-----------------------------------------------------------------------------
// Получить строковый идентификатор платежного документа
//-----------------------------------------------------------------------------
MACRO PM_MakeDocumentID( DocKind:integer, DocumentID:integer ):string

  var sDocumentID:string = "";

  record rpspayord( pspayord );
  record rpscpord ( pscpord  );
  record rbbcpord ( bbcpord  );
  record rpscshdoc( pscshdoc );
  record rmemorder( memorder );
  record rmultydoc( multydoc );
  record rcb_doc  ( cb_doc   );
  record rpsinrq  ( psinrq   );
  record pm_paym  ( pmpaym   );

  if  ( DocKind == PS_PAYORDER )
    rpspayord.OrderID = DocumentID;
    sDocumentID = makeObjectID( NULL, DocKind, rpspayord );
  elif( DocKind == PS_INRQ )
    rpsinrq.PaymentID = DocumentID;
    sDocumentID = makeObjectID( NULL, DocKind, rpsinrq );
  elif( (DocKind == DLDOC_BANKPAYMENT) OR
        (DocKind == DLDOC_BANKCLAIM  ) )
    rmemorder.OrderID = DocumentID;
    sDocumentID = makeObjectID( NULL, DocKind, rmemorder );
  elif( DocKind == DLDOC_MEMORIALORDER )
    rcb_doc.DocumentID = DocumentID;
    sDocumentID = makeObjectID( NULL, DocKind, rcb_doc );
  elif( (DocKind == CASH_BOF_ADDORDER) OR
        (DocKind == CASH_PS_INCORDER ) OR
        (DocKind == CASH_PS_OUTORDER ) OR
        (DocKind == CASH_BOF_INCORDER) OR
        (DocKind == CASH_BOF_OUTORDER) )
    rpscshdoc.AutoKey = DocumentID;
    sDocumentID = makeObjectID( NULL, DocKind, rpscshdoc );
  elif( DocKind == PS_CPORDER )
    rpscpord.OrderID = DocumentID;
    sDocumentID = makeObjectID( NULL, DocKind, rpscpord );
  elif( DocKind == BBANK_CPORDER )
    rbbcpord.OrderID = DocumentID;
    sDocumentID = makeObjectID( NULL, DocKind, rbbcpord );
  elif( DocKind == CB_MULTYDOC )
    rmultydoc.AutoKey = DocumentID;
    sDocumentID = makeObjectID( NULL, DocKind, rmultydoc );
  elif( DocKind == DLDOC_BANKORDER )
    pm_paym.PaymentID = DocumentID;
    sDocumentID = makeObjectID( NULL, DocKind, pm_paym );
  end;

  return sDocumentID;

END;

//------------------------------------------------------------------------------
//Получить статус операции
// DocKind    - вид документа
// DocumentID - ID документа
// StatusKind - вид статуса
// Status     - значание статуса (возвращаемый)
//Возвращает true/false
//------------------------------------------------------------------------------
MACRO PM_GetOprStatus( DocKind:integer, DocumentID:variant, StatusKind:integer, Status:@integer ):bool
  
  var sDocumentID:string = "";

  if( ValType( DocumentID ) == V_STRING )
    sDocumentID = DocumentID;
  else
    sDocumentID = PM_MakeDocumentID( DocKind, DocumentID );
  end;

  var Query:string = "select /*+LEADING(o)*/ s.T_NUMVALUE "
                     "from doproper_dbt o, "
                          "doprcurst_dbt s "
                     "where o.T_DOCKIND = :DocKind "
                       "and o.T_DOCUMENTID = :DocumentID "
                       "and s.T_ID_OPERATION = o.T_ID_OPERATION "
                       "and s.T_STATUSKINDID = :StatusKind";

  var Params:TArray = makeArray( SQLParam( "DocKind",    DocKind     ),
                                 SQLParam( "DocumentID", sDocumentID ),
                                 SQLParam( "StatusKind", StatusKind  ) );

  var rs:RsdRecordset = execSQLselect( Query, Params, true );

  if( rs and rs.MoveNext() )
    Status = rs.Value(0);
    return true;
  else
    Status = -1;
    return true;
  end;

ONERROR(x)

  MsgBox( "Ошибка получения статуса операции|" + x.Message );
  return false;

END;

//------------------------------------------------------------------------------
// Получить ID предыдущего шага операции
//------------------------------------------------------------------------------
MACRO Opr_GetPrevStep( ID_Operation:integer, ID_Step:integer, Prev_Step:@integer ):bool

  var query :string = "SELECT OS.T_PREVIOUS_STEP FROM DOPRSTEP_DBT OS WHERE OS.T_ID_OPERATION = :ID_OPERATION AND OS.T_ID_STEP = :ID_STEP";
  var params:TArray = makeArray( SQLParam( "ID_OPERATION", ID_Operation ),
                                 SQLParam( "ID_STEP",      ID_Step      ) );
  var rs:RsdRecordset = execSQLselect( query, params, true );

  if( rs and rs.moveNext() )
    Prev_Step = rs.Value(0);
    return true;
  else
    MsgBox( "Не найден предыдущий шаг операции" );
    return false;
  end;

ONERROR(x)

  MsgBox( "Ошибка получения предыдущего шага операции|" + x.Message );
  return false;

END;

//------------------------------------------------------------------------------
// Получить ID шага операции по виду шага
//------------------------------------------------------------------------------
MACRO Opr_GetStepByKindAction( ID_Operation:integer, Kind_Action:integer, ID_Step:@integer ):bool

  var query :string = "SELECT OS.T_ID_STEP FROM DOPRSTEP_DBT OS WHERE OS.T_ID_OPERATION = :ID_OPERATION AND OS.T_KIND_ACTION = :KIND_ACTION";
  var params:TArray = makeArray( SQLParam( "ID_OPERATION", ID_Operation ),
                                 SQLParam( "KIND_ACTION",  KIND_ACTION  ) );
  var rs:RsdRecordset = execSQLselect( query, params, true );

  if( rs and rs.moveNext() )
    ID_Step = rs.Value(0);
    return true;
  else
    MsgBox( "Не найден шаг операции" );
    return false;
  end;

ONERROR(x)

  MsgBox( "Ошибка получения шага операции|" + x.Message );
  return false;

END;

//------------------------------------------------------------------------------
// Получить ID операции и ID шага операции готового к выполенению
//------------------------------------------------------------------------------
MACRO Opr_GetCurrStep( PaymentID:integer, DocKind:integer, ID_Operation:@integer, ID_Step:@integer ):bool

  var query :string = "SELECT ST.T_ID_OPERATION, ST.T_ID_STEP " +
                        " FROM DOPROPER_DBT OP, " +
                             " DOPRSTEP_DBT ST " +
                       " WHERE OP.T_DOCKIND = :DOCKIND " +
                         " AND OP.T_DOCUMENTID = LPAD(:PAYMENTID, 34, '0') " +
                         " AND ST.T_ID_OPERATION = OP.T_ID_OPERATION " +
                         " AND ST.T_ISEXECUTE = 'R' ";
  var params:TArray = makeArray( SQLParam( "DOCKIND"  , DocKind   ),
                                 SQLParam( "PAYMENTID", PaymentID ) );
  var rs:RsdRecordset = execSQLselect( query, params, true );

  if( rs and rs.moveNext() )
    ID_Operation = rs.Value(0);
    ID_Step = rs.Value(1);
    return true;
  else
    MsgBox( "Не найден шаг операции" );
    return false;
  end;

ONERROR(x)

  MsgBox( "Ошибка получения шага операции|" + x.Message );
  return false;

END;

//GVR---------------------------------------------------------------------------
// Узнать, выполнен {подготовлен, ...} ли шаг с заданным символом? 
//------------------------------------------------------------------------------
MACRO Opr_IsStepExecuteSymb( DocumentID:variant, DocKind:integer, Symbol:String, IsExec:String , BlockID:integer ):bool
                                                                                    
  if(ValType(IsExec) == V_UNDEF)
     IsExec = "X";
  end;

  var query:string, params:TArray, rs:RsdRecordset;  

  if(ValType(BlockID) == V_UNDEF)
     query = "SELECT ST.T_SYMBOL " +
                           " FROM DOPROPER_DBT OP, " +
                                " DOPRSTEP_DBT ST " +
                          " WHERE OP.T_DOCKIND = :DOCKIND " +
                            " AND OP.T_DOCUMENTID = LPAD(:DOCUMENTID, 34, '0') " +
                            " AND ST.T_ID_OPERATION = OP.T_ID_OPERATION " +
                            " AND ST.T_ISEXECUTE = :ISEXECUTE ";
     params = makeArray(            SQLParam( "DOCKIND"   , DocKind   ),
                                    SQLParam( "DOCUMENTID", DocumentID ),
                                    SQLParam( "ISEXECUTE" , IsExec ) );
          
     rs = execSQLselect( query, params, true );
  elif(ValType(BlockID) == V_INTEGER)
     query = "SELECT ST.T_SYMBOL " +
                           " FROM DOPROPER_DBT OP, " +
                                " DOPRSTEP_DBT ST " +
                          " WHERE OP.T_DOCKIND = :DOCKIND " +
                            " AND OP.T_DOCUMENTID = LPAD(:DOCUMENTID, 34, '0') " +
                            " AND ST.T_ID_OPERATION = OP.T_ID_OPERATION " +
                            " AND ST.T_ISEXECUTE = :ISEXECUTE " +
                            " AND ST.T_BLOCKID = :BLOCKID ";
     params = makeArray(            SQLParam( "DOCKIND"   , DocKind   ),
                                    SQLParam( "DOCUMENTID", DocumentID ),
                                    SQLParam( "ISEXECUTE" , IsExec ),
                                    SQLParam( "BLOCKID" , BlockID ) );
     
     rs = execSQLselect( query, params, true );
  else
     MsgBox( "Ошибка получения шага операции");
     return false;
  end;
  
  if( rs )
    while ( rs.moveNext())
       if( rs.Value(0) == Symbol)
          return true;
       end;
    end;
    return false;
  else
    return false;
  end;

ONERROR(x)

  MsgBox( "Ошибка получения шага операции|" + x.Message );
  return false;

END;

//------------------------------------------------------------------------------
// Ищем записи с необработанными отзывами и запускаем функцию их обработки
//------------------------------------------------------------------------------

MACRO IsExistCallBackRSL( PaymentID, State, ID_Operation, ID_Step, NoteFlag:@integer )

  var str;
  var ok = 1;
  var query:string, param:TArray, rs:RsdRecordset;    
  var query1:string, param1:TArray, rs1:RsdRecordset;
  Array Text;
  Array Buttons;

  debugbreak;

    query = " SELECT dWlReq_dbt.* " +
            " FROM   dWlReq_dbt, " + 
            "        dWlReqLnk_dbt " + 
            " WHERE  dWlReqLnk_dbt.t_ObjID = :PAYMENTID " +
            " AND    dWlReqLnk_dbt.t_ObjKind = 523 " +              /*OBJTYPE_MFRPAYMENT    = 523 - межфилиальный платеж*/
            " AND    dWlReqLnk_dbt.t_ReqID = dWlReq_dbt.t_ReqID " +
            " AND    dWlReq_dbt.t_State <> 70 ";                    /*WLD_STATUS_REQ_CLOSED = 70  - обработан*/ 
    
    if( State )
      query = query + " AND dWlReq_dbt.t_State = :STATE ";
    end;

    param = makeArray( SQLParam( "PAYMENTID", PaymentID ),
                       SQLParam( "STATE", State ) );
    rs = execSQLselect( query, param, TRUE );

    if( rs and rs.moveNext() )
      
      NoteFlag = 1;  /*есть отзыв со статусом "Принято"*/
      query1 = " SELECT  dp.t_Name, pt.t_Name " + 
               " FROM    ddp_dep_dbt dp, " + 
               "         dparty_dbt pt " + 
               " WHERE   dp.t_PartyID = ? " + 
               " AND     pt.t_PartyID = dp.t_PartyID ";
    
      param1 = makeArray( SQLParam( "", rs.value( "t_OriginatorID" ) ) );
      rs1 = execSQLselect( query1, param1, TRUE );
      rs1.moveNext();
      
      str = string("Есть необработанный запрос из филиала ", rs1.value(0), " ", rs1.value(1), " на отзыв документа");
      
      if(not IsOprMultiExec())
        Text(0) = string( str,"|Провести?");
        Buttons(0) = " Отложить "; 
        Buttons(1) = " Провести "; 
        
        if( ConfWin(Text,Buttons) )
          NoteFlag = 2;  /*есть отзыв со статусом "Принято", меняем статус на "Обработано"*/
          while ( ok )
            if(PlaceReqToClose(rs.value("t_ReqID"), ID_Operation, ID_Step))
              msgbox( "Ошибка при помещении отзыва в обработанные" );
              return 1;
            end;
            ok = rs.moveNext();
          end;

        else
          return 1;   
        end;
      
      else
        msgbox(str);
        return 1;  
      
      end;
    end;
  
  return 0;
END;