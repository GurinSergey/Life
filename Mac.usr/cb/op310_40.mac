/*
 *  Макрос шага "Проведение исправительного оборота" операции "Исправительный оборот" по первичному документу "Платеж"
 */
Import BankInter, FIInter, CTInter, OprInter, PaymInter, InsCarryDoc, RSD, "pr_cortur.mac", "cortur_lib.mac";
import Oralib; //Jushmanov 2014-02-20 C-19151
/* EVG */
import Cbsttls;

var Date_Rate : date;
var PaymentObj : RsbPayment;

private macro ПолучитьСчетПокрытия( ConnectChapter, ConnectFIID, ConnectAccount, Chapter, FIID, Account )
  file acc ("account.dbt" ) key 0;
  file accC("account$.dbt") key 0;
  var file_a;

  if( FIID == NATCUR )
    file_a = acc;
  else
    file_a = accC;
  end;

  ClearRecord( file_a );
  file_a.Chapter       = Chapter;
  file_a.Code_Currency = FIID;
  file_a.Account       = Account;

  if( GetEQ(file_a) )
    SetParm( 0, file_a.Connect_Chapter  );
    SetParm( 1, file_a.Connect_Currency );
    SetParm( 2, file_a.Connect_Account  );
  else
    RunError( "Не найден счет " + Account );
  end;

end;

private macro ПолучитьМетодМультивалютнойСторно(Method, DocKind, DocumentID)
  var sqlStr;
  var rs;
  sqlStr =          "SELECT t_methodid ";
  sqlStr = sqlStr + "  FROM dmultycar_dbt ";
  sqlStr = sqlStr + " WHERE (t_iapplicationkind, t_applicationkey) IN ";
  sqlStr = sqlStr + "       (SELECT t_iapplicationkind, t_applicationkey ";
  sqlStr = sqlStr + "          FROM daccispr_dbt ";
  sqlStr = sqlStr + "         WHERE t_dockind = " + DocKind;
  sqlStr = sqlStr + "           AND t_documentid = " + DocumentID + ")";
  rs = RsdRecordset(sqlStr);
  if(rs.movenext)
    SetParm(0, rs.value(0));
  end;
end;

private macro ПолучитьСчетРазницыМультивалютнойСторно(ERAccountMinus, ERAccountPlus, DocKind, DocumentID, PayerAccount, ReceiverAccount)
  file account("account.dbt" ) key 0;
  var ERAccount = "";
  var tmpAccount, tmpChapter, tmpCode_Currency;
  var sqlStr;
  var rs;
  var i;
  sqlStr =          "SELECT t_account_payer, t_account_receiver, t_chapter, t_code_currency ";
  sqlStr = sqlStr + "  FROM darhdoc_dbt ";
  sqlStr = sqlStr + " WHERE (t_connappkind, t_connappkey) IN ";
  sqlStr = sqlStr + "       (SELECT t_iapplicationkind, t_applicationkey ";
  sqlStr = sqlStr + "          FROM daccispr_dbt ";
  sqlStr = sqlStr + "         WHERE t_dockind = " + DocKind;
  sqlStr = sqlStr + "           AND t_documentid = " + DocumentID + ")";
  rs = RsdRecordset(sqlStr);
  while(rs.movenext)
    i = 0;
    tmpChapter = rs.value(2); 
    tmpCode_Currency = rs.value(3);
    while(i < 2)
      tmpAccount = rs.value(i);
      if((tmpAccount != PayerAccount) and (tmpAccount != ReceiverAccount))
        ClearRecord(account);
        account.Chapter       = tmpChapter;
        account.Code_Currency = tmpCode_Currency;
        account.Account       = tmpAccount;
        if(GetEQ(account))
          if(not index(account.Type_Account, "П"))
            ERAccount = tmpAccount;
          end;
        end;      
      end;
      i = i + 1;
    end;
  end;
  if(ERAccount != "")
    SetParm(0, ERAccount);
    SetParm(1, ERAccount);
  end;
end;

macro ExecuteStep( doc, primdoc )
  var stat = 0;
  var ПроводкаИсправительная = PaymentObj.MakeTransaction();
  var ПроводкаКурсовойРазницы : RsbAccTransaction; /*Создаем только для сторно*/
  var Multy : RsbMultyDoc;
  var Memorial : RsbMemorialOrder;
  var BankOrder : RsbBankOrder;
  var Chapter = 1;
  var PayerFIID  = NATCUR;   
  var ReceiverFIID = NATCUR;
  var ExistsExRateAccTrn = false;

  if(GetAccIspr(accispr, primdoc, PaymentObj.DocKind))
    Date_Rate = accispr.RateDate;
  end;

  if(PaymentObj.DocKind == CB_MULTYDOC)
    Multy = RsbMultyDoc( PaymentObj.DocumentID );
    ПроводкаИсправительная.Chapter         = Multy.Chapter;
    ПроводкаИсправительная.FIIDPayer       = PaymentObj.PayerFIID;
    ПроводкаИсправительная.FIIDReceiver    = PaymentObj.ReceiverFIID;
    ПроводкаИсправительная.SumPayer        = PaymentObj.PayerAmount;
    ПроводкаИсправительная.SumReceiver     = PaymentObj.ReceiverAmount;
    ПроводкаИсправительная.Rate            = PaymentObj.FactRate.Rate     ;
    ПроводкаИсправительная.Scale           = PaymentObj.FactRate.Scale    ;
    ПроводкаИсправительная.Point           = PaymentObj.FactRate.Point    ;
    ПроводкаИсправительная.IsInverse       = PaymentObj.FactRate.IsInverse;
    ПроводкаИсправительная.AccountPayer    = PaymentObj.PayerAccount;
    ПроводкаИсправительная.AccountReceiver = PaymentObj.ReceiverAccount;
    ПроводкаИсправительная.Date_Carry      = PaymentObj.ValueDate;
    ПроводкаИсправительная.Numb_Document   = PaymentObj.Number;
    ПроводкаИсправительная.Ground          = PaymentObj.Ground;
    ПроводкаИсправительная.TypeDocument    = Multy.Type_Document;
    ПроводкаИсправительная.Number_Pack     = PaymentObj.NumberPack;
    ПроводкаИсправительная.Department      = PaymentObj.Department;
    ПроводкаИсправительная.Date_Rate       = Date_Rate;  /* Дата курса */
    
    if(index(ПроводкаИсправительная.TypeDocument, "S") > 0)
      FillMultyCurrAccTrn(ПроводкаИсправительная, CB_MULTYDOC, Multy.AutoKey, @ExistsExRateAccTrn);
      if(ExistsExRateAccTrn)
        ПроводкаКурсовойРазницы = RsbAccTransaction;
        FillMultyCurrExRateAccTrn(ПроводкаКурсовойРазницы, CB_MULTYDOC, Multy.AutoKey);
   
        ПроводкаКурсовойРазницы.Numb_Document    = PaymentObj.Number;
        ПроводкаКурсовойРазницы.Date_Carry       = ПроводкаИсправительная.Date_Carry;
        ПроводкаКурсовойРазницы.Ground           = ПроводкаИсправительная.Ground;
        ПроводкаКурсовойРазницы.TypeDocument     = ПроводкаИсправительная.TypeDocument;
        ПроводкаКурсовойРазницы.Number_Pack      = ПроводкаИсправительная.Number_Pack;
        ПроводкаКурсовойРазницы.Shifr_Oper       = ПроводкаИсправительная.Shifr_Oper;
        ПроводкаКурсовойРазницы.Department       = ПроводкаИсправительная.Department;
        ПроводкаКурсовойРазницы.UserTypeDocument = ПроводкаИсправительная.UserTypeDocument;
        ПроводкаКурсовойРазницы.ResultCarry      = DELTARATE_MCD;
   
        if(ПроводкаКурсовойРазницы.AccTrnID == 0)
          ПроводкаКурсовойРазницы.AccTrnID = CB_GetAccTrnID();
        end;
        ПроводкаИсправительная.ExRateAccTrnID = ПроводкаКурсовойРазницы.AccTrnID;
      end;
   
    end;

  elif(PaymentObj.DocKind == DLDOC_MEMORIALORDER)
    Memorial = RsbMemorialOrder( PaymentObj.DocumentID );
    ПроводкаИсправительная.Chapter          = Memorial.Chapter;
    ПроводкаИсправительная.FIID             = Memorial.Code_Currency;
    ПроводкаИсправительная.Sum              = PaymentObj.PayerAmount;
    ПроводкаИсправительная.AccountPayer     = PaymentObj.PayerAccount;
    ПроводкаИсправительная.AccountReceiver  = PaymentObj.ReceiverAccount;
    ПроводкаИсправительная.Numb_Document    = PaymentObj.Number;
    ПроводкаИсправительная.Date_Carry       = PaymentObj.ValueDate;
    ПроводкаИсправительная.Ground           = PaymentObj.Ground;
    ПроводкаИсправительная.TypeDocument     = Memorial.TypeDocument;
    ПроводкаИсправительная.Number_Pack      = PaymentObj.NumberPack;
    ПроводкаИсправительная.Shifr_Oper       = PaymentObj.ShifrOper;
    ПроводкаИсправительная.Kind_Oper        = Memorial.Kind_Oper;
    ПроводкаИсправительная.Department       = PaymentObj.Department;
    ПроводкаИсправительная.UserTypeDocument = Memorial.UserTypeDocument;
    ПроводкаИсправительная.Date_Rate        = Date_Rate;

    if(index(ПроводкаИсправительная.TypeDocument, "S") > 0)
      FillMultyCurrAccTrn(ПроводкаИсправительная, DLDOC_MEMORIALORDER, Memorial.DocumentID);
    end;

  elif(PaymentObj.DocKind == DLDOC_BANKORDER)
    BankOrder = RsbBankOrder( PaymentObj.DocumentID );
    ПроводкаИсправительная.Chapter          = PaymentObj.Chapter;
    ПроводкаИсправительная.FIIDPayer       = PaymentObj.PayerFIID;
    ПроводкаИсправительная.FIIDReceiver    = PaymentObj.ReceiverFIID;
    ПроводкаИсправительная.SumPayer        = PaymentObj.PayerAmount;
    ПроводкаИсправительная.SumReceiver     = PaymentObj.ReceiverAmount;
    ПроводкаИсправительная.Rate             = PaymentObj.FactRate.Rate     ;
    ПроводкаИсправительная.Scale            = PaymentObj.FactRate.Scale    ;
    ПроводкаИсправительная.Point            = PaymentObj.FactRate.Point    ;
    ПроводкаИсправительная.IsInverse        = PaymentObj.FactRate.IsInverse;
    ПроводкаИсправительная.AccountPayer     = PaymentObj.PayerAccount;
    ПроводкаИсправительная.AccountReceiver  = PaymentObj.ReceiverAccount;
    ПроводкаИсправительная.Numb_Document    = PaymentObj.Number;
    ПроводкаИсправительная.Date_Carry       = PaymentObj.ValueDate;
    ПроводкаИсправительная.Ground           = PaymentObj.Ground;
    ПроводкаИсправительная.TypeDocument     = BankOrder.TypeDocument;
    ПроводкаИсправительная.Number_Pack      = PaymentObj.NumberPack;
    ПроводкаИсправительная.Shifr_Oper       = PaymentObj.ShifrOper;
    ПроводкаИсправительная.Department       = PaymentObj.Department;
    ПроводкаИсправительная.UserTypeDocument = BankOrder.UserTypeDocument;
    ПроводкаИсправительная.Date_Rate        = Date_Rate;

    if(index(ПроводкаИсправительная.TypeDocument, "S") > 0)
      FillMultyCurrAccTrn(ПроводкаИсправительная, DLDOC_BANKORDER, BankOrder.DocumentID);
    end;

  end;
  
  if(not ПроводкаИсправительная.Carry())
    stat = 1;
  end;

  if((stat == 0) and (index(ПроводкаИсправительная.TypeDocument, "S") > 0))
    /*Установить тип "Сторнирован" на исправляемый документ*/
    UpdateCorrectionalDoc(ПроводкаИсправительная.TypeDocument, PaymentObj.DocKind, PaymentObj.DocumentID);
  end;

  if(    (stat == 0) 
     and (PaymentObj.DocKind == CB_MULTYDOC) 
     and (index(ПроводкаИсправительная.TypeDocument, "S") > 0) 
     and ExistsExRateAccTrn
    )
    if( not ПроводкаКурсовойРазницы.Carry() )
      stat = 1;
      msgbox( "Ошибка при вставке проводки" );
    end;
  end;
  
  /* EVG */
  //TAM 15.05.2014
  /*if( УстановитьСтатусыПлатежа( 701 /*Документооборот*/, 2 /*Закрыт*/ ) )
    msgbox("Ошибка при установке сегментов статуса экземпляра операции");
    return 1;
  end;*/

  return stat;
end;


macro PostStepAction( message,      /* 1 - выполнение шага; 2 - откат шага;   */
                      errTrn,       /* статус выполнения шага. 0 - ошибки нет */
                      FirstDoc,     /* указатель на первичный документ        */
                      ID_Oper,      /* внутренний идентификатор операции      */
                      Number_Step,  /* Номер шага операции (из настроек)      */
                      KindOper,     /* номер вида операции                    */
                      KindDoc,      /* номер вида первичного документа        */
                      KindStep,     /* вид шага операции                      */
                      ID_Step )     /* внутренний идентификатор шага операции */
    private var logquery;

    //Jushmanov 2014-02-20 C-19151
    if(( message == OP_EXECUTE_STEP ) and (errTrn == 0) and (IsOprMultiExec))
        if ((valtype(ID_Oper) != V_INTEGER) and (valtype(ID_Oper) != V_STRING)) ID_Oper = 0; end;
        if ((valtype(ID_Step) != V_INTEGER) and (valtype(id_Step) != V_STRING)) ID_Step = 0; end;

        logquery = "UPDATE usr_doprstep_robot_dbt SET t_is_robot_step = chr(88)" +
                   " WHERE t_id_operation = " + ID_Oper + " AND t_id_step = " + ID_Step;
        ExecSQL(logquery, null, false);
    end;

    return 0;
end;