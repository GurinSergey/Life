/*
$Name: acc_cls.mac
$Module: Ядро ГКБО
$Description: Лицевой счет. Класс первичного документа для категорий учета
 */

/* @changes 
       - обработка параметра второго рода MC_TYPE_PARAMETR_CONTRACTOR
       - дополнительная корректировка наименования счета из sflib.mac::MakeAccountNameForCat ()
       - Gurin S. 07.12.2015 HotFix 2031.19.25 (Life_1 1.3)_6
       - Gurin S. 07.12.2015 HotFix 2031.19.25 (Life_1 1.3)_7
 */
Import CTInter, OprInter, "res_lib.mac", "globals.mac";


class ReservePrimdoc()

  /*
   * Функции класса
   */
  macro NameObject() : string
  end;
  
  macro GetObjParam() : string
  end;

  macro GetGroupRisk( DateGroup : date ) : string
    return "";
  end;

  macro GetReserveProcent( DateProcent : date ) : double
    return 0;
  end;

  macro GetReserveProcentOffshore( DateProcent : date ) : double
    return 0;
  end;

  macro GetDepartment() : integer 
    return 0;
  end 

end;

/*
 *  Первичный документ для категорий (лицевой счет)
 */
class (ReservePrimdoc) AccountPrimdoc( acc, ID_Operation, _ReservePeriodParm )

/* данные класса ---------------------------------------------------- */
  private var acc_record;
  private var ReservePeriodParm;

  private var FIRoleBArray = TArray;
  


  var Error = 0, Kind, ID;

/* ------------------------------------------------------------------ */

/* вернуть параметр второго рода ------------------------------------ */

  macro GetParametr( ParmKind, OperDate, CatCode, FIRole )
    var Parametr = -1;

    if( ParmKind == MC_TYPE_PARAMETR_DEPARTMENT )
      /* EVG 21/1/2016 При актуализации счетов по резервам один и тот же счёт привязывается 
         отдельно для кадого ВСП, хотя он общебанковский. Так счёт должен актуализироваться один на филиал.
      Parametr = acc_record.Branch;*/
      Parametr = acc_record.Department;
    end;

    // Tikh
    if( ParmKind == MC_TYPE_PARAMETR_CONTRACTOR )
      Parametr = acc_record.Client;
    end;

    return Parametr;
  end;

/* вернуть параметр первого рода ------------------------------------ */

  macro GetParametrTemplate( ObjectID, Classificator, OperDate, FIRole )
    var Parametr = -1;
    var AccCategoryUONH;
    var CategoryContragent;
    record clientRec("party.dbt");  

    if( Classificator == LLCLASS_PRODUCT_ANRAS )

      Parametr = 1000;

    elif( Classificator == LLCLASS_RSRVLOSS_BY_ACC )

      Parametr = ReservePeriodParm.RsvClass;

    elif( Classificator == LLCLASS_RSVLOANSLOSS_BY_ACC )

      Parametr = ReservePeriodParm.RsvClassLoans;

    elif( Classificator == LLCLASS_OFFSHORERSRV )

      Parametr = ReservePeriodParm.RsvClassOffShore;

    elif( Classificator == LLCLASS_KIND_OF_ASSETS_RESERV )

      Parametr = OBJTYPE_ACCOUNT;

    elif( Classificator == LLCLASS_CATEG_UONH )

      AccCategoryUONH = GetAccCategoryUONH( acc_record, OperDate );

      if(AccCategoryUONH != null)
        Parametr = AccCategoryUONH;
      end;

    elif( Classificator == LLCLASS_KINDSUBJ_KONTRMM )

      if(acc_record.Contragent != 0)
        Parametr = acc_record.Contragent;
      else
        CategoryContragent = GetCategoryContragent( acc_record.Balance, acc_record.Chapter );
        if(CategoryContragent != null)
          Parametr = CategoryContragent;
        end;
      end;

    elif( Classificator == LLCLASS_KINDSUBJ_DEBETSECUR )

      if(acc_record.Contragent != 0)
        Parametr = acc_record.Contragent;
      else
        CategoryContragent = GetCategoryContragent( acc_record.Balance, acc_record.Chapter );
        if(CategoryContragent != null)
          Parametr = CategoryContragent;
        end;
      end;

    elif( Classificator == 1660 )

      if(ВидСубъекта(acc_record.Client, PTK_CENTRBANK))
        Parametr = 1;
      elif(ВидСубъекта(acc_record.Client, PTK_BANK))
        if(not ПолучитьСубъекта(acc_record.Client, clientRec))
          if(clientRec.NotResident == "X")
            Parametr = 3;
          else
            Parametr = 2;
          end;
        end;
      end;
    end;

    return Parametr;
  end;

/* остновная роль фИ ------------------------------------------------ */
  macro GetBasisFIRole(FIRole)
    return FIROLE_UNDEF;
  end;

/* вернуть весь базис ролей ----------------------------------------- */
  macro GetFIRoleBArray()
    return FIRoleBArray;
  end;

/* найти/открыть счет ---------------------------------------------- */
  macro FindAndOpenAccount( CatCode : string, DateCarry : date, RealOpenMode : @integer )
    return MC_FindAndOpenAccount( 
       CatCode           
      ,this              
      ,DateCarry         
      ,IsOprMultiExec()  
      ,MC_OPENACC_CREATE 
      ,null              
      ,null              
      ,null              
      ,null              
      ,null              
      ,null              
      ,RealOpenMode      
      ,null              
      ,null              
      ,null              
      ,null              
      ,2 );
  end;

/* найти/закрыть счет ---------------------------------------------- */
  macro FindAndCloseAccount( CatCode : string, DateCarry : date, IsClose : @integer )
    var ReserveAccount = MC_FindAndOpenAccount( CatCode, this, DateCarry, IsOprMultiExec(), MC_OPENACC_CHECKEXIST );
    if( not MC_FindAndCloseAccount( CatCode, this, DateCarry, null, null, null ))
      IsClose = 1;
    else
      IsClose = 0;
    end;
    return ReserveAccount;
  end;

/* найти счет ------------------------------------------------------- */
  macro FindAccount( CatCode : string, DateCarry : date )
    return MC_FindAndOpenAccount( CatCode, this, DateCarry, IsOprMultiExec(), MC_OPENACC_CHECKEXIST );
  end;

/* привязать счет заново -------------------------------------------- */
  macro RecreateAccount( CatCode : string, DateCarry : date, RealOpenMode : @integer )
    return MC_FindAndOpenAccount( CatCode, this, DateCarry, IsOprMultiExec(), MC_OPENACC_RECREATE, null, null, null, null, null, null, RealOpenMode );
  end;

/* Корректировка счета ---------------------------------------------- */
   MACRO CorrectAccount( account, accblnc, ORScheme, categ, templ, accdoc, OperDate )
      
      /* EVG Вызов функции формирования названия счёта */
      ExecMacroFile("sf_lib", "MakeAccountNameForCat", account, @account.rec.NameAccount);
      
      return true;
   END;

   macro NameObject() : string
     return string(acc_record.Account:f);
   end;

   macro GetObjParam() : string
     return "л/с №" + string(acc_record.Account:f);
   end;

   macro GetGroupRisk( DateGroup : date ) : string
     var GroupRisk : string;
     
     GroupRisk = GetAccGroupRisk( acc_record, DateGroup );
     if( GroupRisk == null ) GroupRisk = ""; end;

     return GroupRisk;
   end;

   macro GetCategoryUONH( OnDate : date ) : integer
     var CategoryUONH : integer;
     
     CategoryUONH = GetAccCategoryUONH( acc_record, OnDate );
     if( CategoryUONH == null ) CategoryUONH = 0; end;

     return CategoryUONH;
   end;

   macro GetReserveProcent( DateProcent : date ) : double
     var ProcentReserve : double;
     
     ProcentReserve = GetProcentOfReserve( acc_record.Chapter, acc_record.Code_Currency, acc_record.Account, DateProcent );
     if( ProcentReserve == null ) ProcentReserve = 0; end;

     return ProcentReserve;
   end;

   macro GetReserveProcentOffshore( DateProcent : date ) : double
     var ProcentReserve : double;
     
     ProcentReserve = GetProcentOfReserveOffshore( acc_record.Chapter, acc_record.Code_Currency, acc_record.Account, DateProcent );
     if( ProcentReserve == null ) ProcentReserve = 0; end;

     return ProcentReserve;
   end;

   macro GetDepartment() : integer
    var Parametr : integer;
    debugbreak;
    Parametr = acc_record.Department;

    return Parametr;
   end;

/* Конструктор */
   Kind = DLDOC_ACCOUNT;
   Id   = acc.AccountID;

   acc_record = acc;
   ReservePeriodParm = _ReservePeriodParm;

   FIRoleBArray[0] = 0;
/* ------------------------------------------------------------------ */

end;
