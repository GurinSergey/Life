//-----------------------------------------------------------------------------
// Блок     : Вне блока
// Шаг      : Вне шага
// Описание : Определение платежей, осуществляющих целевое финансирование
//-----------------------------------------------------------------------------

import PaymInter,FIInter, "pm_common.mac";

/* Подходит ли счет по маске? True - подходит, false - не подходит */
private macro IsAccountEqMask( Mask:string, Account:string ):bool

  var stat:integer = 0;

  stat = CompareStrWithMasks( Mask, Account );

  if( stat == 0 )
    return true;
  else
    return false;
  end;

end;

private macro IsPurposefulPayment_Common( PaymentID, FIID, PayFIID, PayerAccount, ReceiverBankID, ReceiverAccount, Ground, CreditGroup ):bool

  //Пока претензию целевого использования не создаем
  return false;

  var GroundLwr = StrLwr( Ground );

  // Если платеж валютный
  if( ( FIID != NATCUR ) or ( PayFIID != NATCUR ) )
    return false;
  end;

  if(not СчетПассивный(ReceiverAccount, 1/*Chapter*/, PayFIID))
    return false;
  end;

  // Если счет получателя не в нашем банке
  if( CreditGroup == PAYMENTS_GROUP_EXTERNAL )
    return false;
  end;

  if( not ( IsAccountEqMask( "401*", PayerAccount ) or
            IsAccountEqMask( "402*", PayerAccount ) or
            IsAccountEqMask( "403*", PayerAccount ) or
            IsAccountEqMask( "404*", PayerAccount ) or
            IsAccountEqMask( "405*", PayerAccount ) ) )
    return false;
  end;

  if( not ( Index( GroundLwr, "целев"         ) or
            Index( GroundLwr, "финансировани" ) or
            Index( GroundLwr, "пособи"        ) or
            Index( GroundLwr, "Чернобыл"      ) ))
    return false;
  end;

  return true;
end;

macro IsPurposefulPayment( pm:RsbPayment ):bool
  return IsPurposefulPayment_Common( pm.PaymentID, pm.PayerFIID, pm.ReceiverFIID, pm.PayerAccount, pm.ReceiverBankID, pm.ReceiverAccount, pm.Ground, pm.ReceiverGroup );
end;

macro IsPurposefulPayment_Buff( pm, credit, rm ):bool
  return IsPurposefulPayment_Common( pm.PaymentID, pm.FIID, pm.PayFIID, pm.PayerAccount, pm.ReceiverBankID, pm.ReceiverAccount, rm.Ground, credit.Group );
end;
