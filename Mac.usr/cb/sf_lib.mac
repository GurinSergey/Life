/*
 * Общие функции обработки комиссий
 */

Import CTInter, globals, PaymInter, "sfcomcat.mac", "sfgetcat.mac";
Import Календарь, RsbDataSet, cryptdlm;
Import fg_Life_parm;

private const PlusCalc_CatCode = "+Расчеты"; 
private const PlusCalcNDS_CatCode = "+Расчеты НДС"; 
private const MinusNDSAccrual_CatCode = "-НДС начисленный"; 

private const PlusCalcNVPI_CatCode = "+Расчеты,НВПИ"; 
private const PlusCalcNDS_NVPI_CatCode = "+Расчеты НДС,НВПИ";
private const MinusNDSAccrual_NVPI_CatCode = "-НДС начисленный, НВПИ";

private const CHARGECOMISSION_FUNC_ERROR = 30739;

private const PAYMAUTOFORM_NTPKCONTEXT = "Автоматическое_формирование_платежей";

private var LifeBank = fg_life_subject({OurBank});

/*есть ли НВПИ*/
macro IsNVPICarry( payFIID, calcFIID, payRateDateKind )
  /*Если валюта оплаты и валюта расчета комиссии не совпадают и дата курса зависит 
    от даты оплаты (DSFCONTR_DBT.T_PAYFIID <> DSFDEFCOM_DBT.T_FIID_COMMSUM и DSFCONTR_DBT.T_PAYRATEDATEKIND <> 
    $(на дату выставления)) */
  if( (payFIID != calcFIID) AND (payRateDateKind != SFINV_RATEDATEKIND_DRAWN) )
    return true;
  else
    return false;
  end;

end;

macro SfSetOprErrorStatus( OperationID, ErrorCode )
  
  var sqlString = "UPDATE doprtemp_tmp SET t_ErrorStatus = ? WHERE t_ID_Operation = ?";

  var cmd = RsdCommand( sqlString );

  cmd.AddParam( "", RSDBP_IN, ErrorCode );
  cmd.AddParam( "", RSDBP_IN, OperationID );

  cmd.execute();
  
end;

macro SfSetOprErrorStatusForAll()
  
  var sqlString = "UPDATE doprtemp_tmp SET t_ErrorStatus = ?";

  var cmd = RsdCommand( sqlString );

  cmd.AddParam( "", RSDBP_IN, CHARGECOMISSION_FUNC_ERROR );
  cmd.execute();
  
end;

/* Выполнить проводку начисления по периодической комиссии */
macro SfCarryAccrue( SfDefComRec, SfAccrueRec, SfContrRec, SfConComRec, AccDebit: @string, AccCredit: @string) : integer

  /*var SfComPD : SfComPrimDoc;*/
  var SfConComPD : SfConComPrimDoc;

  var debetSI  = TRecHandler("sfsi.dbt");
  var creditSI = TRecHandler("sfsi.dbt");

  var PayerAccount:string, ReceiverAccount:string;
  var NDSPayerAccount : string, NDSReceiverAccount : string;

  var Ground:string, NDSGround:string;

  var stat = 0;

  var SumPayer = $0, NDSSumPayer = $0, EqSumPayer = $0;
    
  var PayerCatCode:string, NDSPayerCatCode:string, NDSReceiverCatCode:string;

  var TrnDate = SfAccrueRec.TransactionDate;

  var IsNVPI:bool;

  debetSI.Clear;
  creditSI.Clear;   
  
  if( SfGetSI_Uni(OBJTYPE_SFDEFCOM, SfDefComRec, debetSI, creditSI) )
     MsgBox("Ошибка при взятии платежных инструкций УПК.");
     return 1;
  end;

  IsNVPI = IsNVPICarry( SfContrRec.PayFIID, SfDefComRec.FIID_Sum, SfContrRec.PayRateDateKind );
  if( IsNVPI == true )    
    PayerCatCode = PlusCalcNVPI_CatCode;

    NDSPayerCatCode = PlusCalcNDS_NVPI_CatCode;
    NDSReceiverCatCode = MinusNDSAccrual_NVPI_CatCode;
  else/*Иначе (НВПИ нет)*/
    PayerCatCode = PlusCalc_CatCode;

    NDSPayerCatCode = PlusCalcNDS_CatCode;
    NDSReceiverCatCode = MinusNDSAccrual_CatCode;
  end;
    
  SfConComPD = SfConComPrimDoc( 83/*DLDOC_SFCONCOM*/, SfConComRec, SfContrRec, SfDefComRec.FIID_Sum);

  PayerAccount = SfConComPD.GetDefComSfSiAccount( SfDefComRec.ID, CALC_SFSI_KIND, PayerCatCode, TrnDate, SfContrRec.PayFIID );
  ReceiverAccount = creditSI.Rec.Account;
  stat = SfConvertCalcSumToPayFIID( SfDefComRec, SfAccrueRec.Amount, TrnDate, TrnDate, SumPayer );

  if( stat == 0 )
    Ground = string( "За услуги по договору \"", SfContrRec.Number, "\" от ", SfContrRec.DateConc:f, " за период с "
                    ,sfAccrueRec.BeginDate:f, " по ", sfAccrueRec.EndDate:f );

    AccDebit   = PayerAccount;
    AccCredit  = creditSI.Rec.Account;
    stat = CountComissAsIncome( SfAccrueRec.TransactionDate, SfContrRec.PayFIID, PayerAccount, 
                                creditSI.Rec.FIID, ReceiverAccount, SumPayer, Ground,
                                null, null, null, null, SFDOCS_LINKKIND_COMISSACCRUE, OBJTYPE_SFDEFCOM, SfDefComRec );

  end;

  if( (stat == 0) AND (SfAccrueRec.NDSAmount != $0) )
    NDSPayerAccount 
      = SfConComPD.GetDefComSfSiAccount( SfDefComRec.ID, CALCNDS_SFSI_KIND, NDSPayerCatCode, TrnDate, SfContrRec.PayFIID );
    
    NDSReceiverAccount 
      = SfConComPD.GetDefComSfSiAccount( SfDefComRec.ID, NDSACRUAL_SFSI_KIND, NDSReceiverCatCode, TrnDate, SfContrRec.PayFIID );
    
    stat = SfConvertCalcSumToPayFIID( SfDefComRec, SfAccrueRec.NDSAmount, TrnDate, TrnDate, NDSSumPayer );

    if( stat == 0 )
      Ground = string( "НДС за услуги по договору \"", SfContrRec.Number, "\" от ", SfContrRec.DateConc:f, " за период с "
                      ,sfAccrueRec.BeginDate:f, " по ", sfAccrueRec.EndDate:f );
      
      stat = CountComissAsIncome( TrnDate, SfContrRec.PayFIID, NDSPayerAccount, 
                                  SfContrRec.PayFIID, NDSReceiverAccount, NDSSumPayer, Ground,
                                  null, null, null, null, SFDOCS_LINKKIND_NDSACCRUE, OBJTYPE_SFDEFCOM, SfDefComRec );
    end;
  end;

  return stat;

end;

private macro GetSfSiCatCode( isNVPI, kindSfSi )

  var CatCode = "";

  if( isNVPI )
    if( kindSfSi == CALC_SFSI_KIND )
      CatCode = PlusCalcNVPI_CatCode;
    elif( kindSfSi == CALCNDS_SFSI_KIND )
      CatCode = PlusCalcNDS_NVPI_CatCode;
    elif( kindSfSi == NDSACRUAL_SFSI_KIND )
      CatCode = MinusNDSAccrual_NVPI_CatCode;
    end;
  else
    if( kindSfSi == CALC_SFSI_KIND )
      CatCode = PlusCalc_CatCode;
    elif( kindSfSi == CALCNDS_SFSI_KIND )
      CatCode = PlusCalcNDS_CatCode;
    elif( kindSfSi == NDSACRUAL_SFSI_KIND )
      CatCode = MinusNDSAccrual_CatCode;
    end;
  end;

  return CatCode;

end;


macro SfCarryAccrueExtra( SfDefComRec, SfAccrueRec, SfContrRec, SfConComRec, AccDebit: @string, AccCredit: @string) : integer
  var SfConComPD : SfConComPrimDoc;

  var debetSI  = TRecHandler("sfsi.dbt");
  var creditSI = TRecHandler("sfsi.dbt");

  var PayerAccount = "", ReceiverAccount = "";
  var NDSPayerAccount : string, NDSReceiverAccount : string;
  var Ground:string, NDSGround:string;

  var stat = 0;

  var SumPayer = $0, NDSSumPayer = $0, EqSumPayer = $0;
    
  var PayerCatCode:string, ReceiverCatCode:string, NDSPayerCatCode:string, NDSReceiverCatCode:string;
  var PayerFIID, ReceiverFIID;
  var NDSPayerKindSfSi, NDSReceiverKindSfSi;

  var IsNVPI:bool;

  var TrnDate = SfAccrueRec.TransactionDate;

  debetSI.Clear;
  creditSI.Clear;   
  
  if( SfGetSI_Uni(OBJTYPE_SFDEFCOM, SfDefComRec, debetSI, creditSI) )  
    MsgBox("Ошибка при взятии платежных инструкций");
    return 1;
  end; 

  SfConComPD = SfConComPrimDoc( 83/*DLDOC_SFCONCOM*/, SfConComRec, SfContrRec, SfDefComRec.FIID_Sum);

  IsNVPI = IsNVPICarry( SfContrRec.PayFIID, SfDefComRec.FIID_Sum, SfContrRec.PayRateDateKind ); 
    
  if( SfAccrueRec.Amount > 0 )
    PayerFIID = SfContrRec.PayFIID;
    PayerCatCode = GetSfSiCatCode( isNVPI, CALC_SFSI_KIND );

    ReceiverFIID = creditSI.Rec.FIID;
    ReceiverAccount = creditSI.Rec.Account;
    stat = SfConvertCalcSumToPayFIID( SfDefComRec, SfAccrueRec.Amount, TrnDate, TrnDate, SumPayer );
  
  elif( SfAccrueRec.Amount < 0 )      
    PayerFIID = creditSI.Rec.FIID;
    PayerAccount = creditSI.Rec.Account;      
    
    ReceiverFIID = SfContrRec.PayFIID;
    ReceiverCatCode = GetSfSiCatCode( isNVPI, CALC_SFSI_KIND );
    
    stat = SfConvertCalcSumToPayFIID( SfDefComRec, Abs(SfAccrueRec.Amount), TrnDate, TrnDate, SumPayer );
  end;

  if( SfAccrueRec.NDSAmount > 0 )
    NDSPayerKindSfSi = CALCNDS_SFSI_KIND;
    NDSPayerCatCode = GetSfSiCatCode( isNVPI, NDSPayerKindSfSi);

    NDSReceiverKindSfSi = NDSACRUAL_SFSI_KIND;
    NDSReceiverCatCode = GetSfSiCatCode( isNVPI, NDSReceiverKindSfSi );
    stat = SfConvertCalcSumToPayFIID( SfDefComRec, SfAccrueRec.NDSAmount, TrnDate, TrnDate, NDSSumPayer );
  
  elif( SfAccrueRec.NDSAmount < 0 )      
    NDSPayerKindSfSi = NDSACRUAL_SFSI_KIND;
    NDSPayerCatCode = GetSfSiCatCode( isNVPI, NDSPayerKindSfSi);

    NDSReceiverKindSfSi = CALCNDS_SFSI_KIND;
    NDSReceiverCatCode = GetSfSiCatCode( isNVPI, NDSReceiverKindSfSi );
    
    stat = SfConvertCalcSumToPayFIID( SfDefComRec, Abs(SfAccrueRec.NDSAmount), TrnDate, TrnDate, NDSSumPayer );
  end;

  if( (stat == 0) AND (SfAccrueRec.Amount != 0) )
    Ground = string( "За услуги по договору \"", SfContrRec.Number, "\" от ", SfContrRec.DateConc:f, " за период с "
                    ,sfAccrueRec.BeginDate:f, " по ", sfAccrueRec.EndDate:f );

    if( PayerAccount == "" )
      PayerAccount = SfConComPD.GetDefComSfSiAccount( SfDefComRec.ID, CALC_SFSI_KIND, PayerCatCode, TrnDate, PayerFIID );
    elif( ReceiverAccount == "" )
      ReceiverAccount = 
        SfConComPD.GetDefComSfSiAccount( SfDefComRec.ID, CALC_SFSI_KIND, ReceiverCatCode, TrnDate, ReceiverFIID );
    end;

    AccDebit   = PayerAccount;
    AccCredit  = creditSI.Rec.Account;
    
    stat = CountComissAsIncome( TrnDate, PayerFIID, PayerAccount, ReceiverFIID, ReceiverAccount, SumPayer, Ground,
                                null, null, null, null, SFDOCS_LINKKIND_NDSACCRUE, OBJTYPE_SFDEFCOM, SfDefComRec );     
  end;

  if( (stat == 0) AND (SfAccrueRec.NDSAmount != 0) )
    NDSPayerAccount 
      = SfConComPD.GetDefComSfSiAccount( SfDefComRec.ID, NDSPayerKindSfSi, NDSPayerCatCode, TrnDate, SfContrRec.PayFIID );
    
    NDSReceiverAccount 
      = SfConComPD.GetDefComSfSiAccount( SfDefComRec.ID, NDSReceiverKindSfSi, NDSReceiverCatCode, TrnDate, SfContrRec.PayFIID );
            
    Ground = string( "НДС за услуги по договору \"", SfContrRec.Number, "\" от ", SfContrRec.DateConc:f, " за период с "
                    ,sfAccrueRec.BeginDate:f, " по ", sfAccrueRec.EndDate:f );
    
    stat = CountComissAsIncome( SfAccrueRec.TransactionDate, SfContrRec.PayFIID, NDSPayerAccount, 
                                SfContrRec.PayFIID, NDSReceiverAccount, NDSSumPayer, Ground,
                                null, null, null, null, SFDOCS_LINKKIND_NDSACCRUE, OBJTYPE_SFDEFCOM, SfDefComRec );                                    
  end;

  return stat;

end;


/*Получить сумму SfInvFake.invPayAmount всех фиктивных оплат для ТО*/
private macro GetInvFake_PayAmount( InvoiceID, ReservedDate )
  
  var rs, cmd;
  var RetAmount:moneyl = 0;
  cmd = RsdCommand( " SELECT SUM(t_InvPayAmount) AS PayAmount FROM DSFINVFAKE_DBT " +
                    " WHERE t_InvoiceID = ? " 
                    " AND t_DocPayDate <= ? " );

  cmd.addParam( "", RSDBP_IN, InvoiceID );
  cmd.addParam( "", RSDBP_IN, ReservedDate );

  cmd.execute();

  rs = TRsbDataSet( cmd );
  
  if( rs.MoveNext() )
    if( ValType( rs.PayAmount ) != V_UNDEF )
      RetAmount = rs.PayAmount;
    end;
  end;

  return RetAmount;
end;


/*Функция получения неоплаченного остатка по ТО money getExpireAmountPZO (ReceiverAccount, ReserveDate).
Алгоритм функции определяющей сумму просроченных требований:
// Параметры:
// ReceiverAccount - л/счет получателя
// AccCurrency - валюта счета
// AccChapter  - глава счета
   ReserveDate - дата резерва 
*/ 
macro getExpireAmountPZO( ReceiverAccount, AccCurrency, AccChapter, ReserveDate )
  var rs, cmd;
  var ExpireAmount:moneyl = 0;
  var Expiration, ExpirationReg;
  var pSum:SQLParam;
  var pOverdueMaxTerm:SQLParam;
  var params:TArray;
  var stat:integer;
  var err;
  GetRegistryValue("CB\\РЕЗЕРВЫ\\СРОК ПРОСРОЧКИ", V_INTEGER, ExpirationReg, err);

  if( err  !=  0 )
    MsgBox( "Ошибка чтения CB\\РЕЗЕРВЫ\\СРОК ПРОСРОЧКИ в настройках банка" );
    Exit( 1 );
  end;

  pSum = SQLParam( "p_Sum", V_MONEY, RSDBP_OUT );
  pOverdueMaxTerm = SQLParam( "p_OverdueMaxTerm", V_INTEGER, RSDBP_OUT );
  params = makeArray( SQLParam("p_AccountFIID",    AccCurrency),
                      SQLParam("p_AccountChapter", AccChapter),
                      SQLParam("p_Account",        ReceiverAccount),
                      SQLParam("p_Date",           ReserveDate),
                      SQLParam("p_OverdueTerm",    ExpirationReg),
                      pSum,
                      pOverdueMaxTerm );

  stat = execStoredFunc("rsb_reserve.GetOverdueSFSum", V_INTEGER, params);
  ExpireAmount = pSum.value;
  return ExpireAmount;
end;

/*********Начисление комиссии при постановке платежа в К2 chargeCommission(PaymentID)****/
/*Есть ли для PaymentID строка в DSFINVLNK_DBT (имеем ли мы дело с платежом по ТО)*/
macro IsPaymForSfInv( PaymentID, InvoiceID:@integer ) 
  var rs, cmd;

  cmd =  RsdCommand( " SELECT *  FROM dsfinvlnk_dbt lnk WHERE lnk.t_PaymentID = ? " );
  cmd.addParam( "", RSDBP_IN, PaymentID );

  rs = RsdRecordset( cmd );
  if( rs.moveNext() )
    InvoiceID = rs.value("t_InvoiceID");    
    return true;
  else
    return false;
  end;
end;

macro GetComissNumber( InvoiceID )
  var rs, cmd;
  var ComissNumber = 0; 
  
  cmd = RsdCommand( "SELECT T_COMMNUMBER, T_ID FROM dsfdefcom_dbt WHERE T_INVOICEID = ? ORDER BY T_ID ");
  cmd.addParam( "", RSDBP_IN, InvoiceID );
     
  rs = RsdRecordset( cmd );
  if( rs.moveNext() )
    ComissNumber = rs.value(0);
  end;

  return ComissNumber;
end;

macro GetDefComissParm( InvoiceID, DatePeriodEnd:@date, defComID:@integer, feeType:@integer )
  var rs, cmd;
  var ComissNumber = 0;  
  DatePeriodEnd = {BranchCurDate}; 
  
  cmd = RsdCommand( "SELECT T_COMMNUMBER, T_DatePeriodEnd, T_ID, t_FeeType FROM dsfdef_dbt WHERE T_INVOICEID = ? ORDER BY T_ID ");
  cmd.addParam( "", RSDBP_IN, InvoiceID );

  cmd.nullConversion = true;
     
  rs = RsdRecordset( cmd );
  if( rs.moveNext() )
    ComissNumber = rs.value(0);
    DatePeriodEnd = rs.value(1);
    
    if( DatePeriodEnd == date(0,0,0) )
      DatePeriodEnd = {BranchCurDate};
    end;

    if( defComID != null )
      defComID = rs.value(2);
    end;

    if( feeType != null )
      feeType = rs.value(3);
    end;
  end;

  
  return ComissNumber;
end;

macro GetOprSfcomParm( ID_Operation, ID_Step, FactDate:@date)

  var rs, cmd;
  FactDate = {BranchCurDate}; 
  
  cmd = RsdCommand( "SELECT T_Fact_Date FROM doprstep_dbt WHERE t_ID_Operation = ? AND t_ID_Step = ? ");
  cmd.addParam( "", RSDBP_IN, ID_Operation );
  cmd.addParam( "", RSDBP_IN, ID_Step );
     
  rs = RsdRecordset( cmd );
  if( rs.moveNext() )
    FactDate = rs.value(0);
  end;

  return 0;

end;

private var SfCatAcc_ErrMsg = "";

private macro CheckCatAccount( acc, CatCode )
  
  if( ValType(acc) == V_UNDEF )
    SfCatAcc_ErrMsg = GetErrMsg();
    if( SfCatAcc_ErrMsg == "" )
      SfCatAcc_ErrMsg = "Ошибка открытия счета по КУ " + CatCode;
    end;
    return false;
  end;

  return true;
end;

macro SfCatAcc_GetErrMsg()
  return SfCatAcc_ErrMsg;
end;

macro defineCat_SfSiAccounts( feeType, isNVPI, isInv, objID, SfComPD_Buff, SfContr, defComFIID, payFIID, 
                           AccFromComiss:@string, AccFromNDS:@string, AccToNDS:@string, MinusNDS_Account:@string,
                           CreditAcc:@string, bTaxable )

  var CalcCatCode:string, NDSCalcCatCode:string, NDSAcrualCatCode:string;
  const MinusNDS_CatCode = "-НДС";

  var rs, cmd, defComID;

  var SfComPD;  

  if( isNVPI )
    CalcCatCode = PlusCalcNVPI_CatCode;    
    NDSCalcCatCode = PlusCalcNDS_NVPI_CatCode;                        
    NDSAcrualCatCode = MinusNDSAccrual_NVPI_CatCode;
  else
    CalcCatCode = PlusCalc_CatCode;    
    NDSCalcCatCode = PlusCalcNDS_CatCode;
    NDSAcrualCatCode = MinusNDSAccrual_CatCode;
  end;

  if( feeType == SF_FEE_TYPE_ONCE )
    SfComPD = SfSingDfPrimDoc( 52/*SFDOC_DEF_ONCE*/, SfComPD_Buff );
  else
    SfComPD = SfConComPrimDoc( 83/*DLDOC_SFCONCOM*/, SfComPD_Buff, SfContr, defComFIID );
  end;

  if( isInv == false )
    defComID = objID;
    accFromComiss = SfComPD.GetDefComSfSiAccount( defComID, CALC_SFSI_KIND, CalcCatCode, {curdate}, payFIID );

    if( bTaxable == true )
      accFromNDS = SfComPD.GetDefComSfSiAccount( defComID, CALCNDS_SFSI_KIND, NDSCalcCatCode, {curdate}, payFIID );  
      accToNDS = SfComPD.GetDefComSfSiAccount( defComID, NDSACRUAL_SFSI_KIND, NDSAcrualCatCode, {curdate}, payFIID );

      MinusNDS_Account = SfComPD.GetDefComSfSiAccount( defComID, NDS_SFSI_KIND, MinusNDS_CatCode, {curdate}, NATCUR );
    end;

    if( CreditAcc != null )
      CreditAcc = SfComPD.GetDefComSfSiAccount( defComID, COMISS_SFSI_KIND, null, null, null );
    end;
  else
    cmd = RsdCommand( "SELECT T_ID FROM dsfdefcom_dbt WHERE T_INVOICEID = ? ORDER BY T_ID ");
    cmd.addParam( "", RSDBP_IN, objID );
    rs = RsdRecordset( cmd );
    while( rs.moveNext() )    
      defComID = rs.value(0);
      accFromComiss = SfComPD.GetDefComSfSiAccount( defComID, CALC_SFSI_KIND, CalcCatCode, {curdate}, payFIID );
      
      if( bTaxable == true )
        accFromNDS = SfComPD.GetDefComSfSiAccount( defComID, CALCNDS_SFSI_KIND, NDSCalcCatCode, {curdate}, payFIID );  
        accToNDS = SfComPD.GetDefComSfSiAccount( defComID, NDSACRUAL_SFSI_KIND, NDSAcrualCatCode, {curdate}, payFIID );

        MinusNDS_Account = SfComPD.GetDefComSfSiAccount( defComID, NDS_SFSI_KIND, MinusNDS_CatCode, {curdate}, NATCUR );
      end;

      if( CreditAcc != null )
       CreditAcc = SfComPD.GetDefComSfSiAccount( defComID, COMISS_SFSI_KIND, null, null, null );
      end;
    end;
  end;

  var stat = CheckCatAccount( accFromComiss, CalcCatCode );
  if( stat == true )
    if( bTaxable == true )      
      stat = CheckCatAccount( accFromNDS, NDSCalcCatCode );
      if( stat == true )
        stat = CheckCatAccount( accToNDS, NDSAcrualCatCode );
      end;
      if( stat == true )
        stat = CheckCatAccount( MinusNDS_Account, MinusNDS_CatCode );
      end;
    end;    
  end;

  return stat;

end;

private macro GetAccRec( accRec, Account:string, Code_Currency:integer, Chapter:integer ) : bool
  
  file acc ("account.dbt" ) key 0;

  var file_acc;
  
    file_acc = acc;

  file_acc.Account = Account;
  file_acc.Chapter = Chapter;
  file_acc.Code_Currency = Code_Currency;

  if( getEQ( file_acc ) )
    Copy( accRec, file_acc );
    return true;
  end;

  return false;
end;

private macro FillPartyInfo( PartyID, CodeKind, Code:@string, Name:@string, INN:@string )
  
  record party(party);

  if( ПолучитьСубъекта( PartyID, party ) == 0 )
    Code = ПолучитьКодСубъекта( party.PartyID, CodeKind );
    Name = party.Name;

    if( INN != NULL )
      INN = GetPartyINN( PartyID, 1 );
    end;
  end;

end;

macro SfInvCorrect( SfInv, newBeneAccount, accFIID )
  
  record accRec("account.dbt");
  file bankdprt( bankdprt ) key 0;

  var Chapter = 1;
  var err;

  SfInv.BeneChapter = Chapter;
  SfInv.BeneAccount = newBeneAccount;

  if( GetAccrec(accRec, newBeneAccount, accFIID, Chapter) )
    SfInv.BeneID = accRec.Client;
    SfInv.BeneCodeKind = 1;
    FillPartyInfo( SfInv.BeneID, SfInv.BeneCodeKind, @SfInv.BeneCode, @SfInv.BeneName, @SfInv.BeneINN );
    
    SfInv.BeneBankID = CB_GetDprtPartyID( accRec.Department );
    SfInv.BeneBankCodeKind = 1;
    FillPartyInfo( SfInv.BeneBankID, SfInv.BeneBankCodeKind, @SfInv.BeneBankCode, @SfInv.BeneBankName, NULL );

    bankdprt.PartyID = SfInv.BeneBankID;
    if( GetEQ(bankdprt) )
      SfInv.BeneCorrAcc = bankdprt.CorAcc;
      SfInv.BeneCorrBankCodeKind = 1;
      SfInv.BeneCorrBankID = ПолучитьКодСубъекта( bankdprt.BIC_RCC, PTCK_BIC );
      FillPartyInfo( SfInv.BeneCorrBankID, SfInv.BeneCorrBankCodeKind, @SfInv.BeneCorrBankCode, @SfInv.BeneCorrBankName, NULL );
    end;
  end;
end;

private macro chargeCommon( Paym, payFIID, ComissCode, AccFromComiss, AccFromNDS, AccToNDS, MinusNDS_Account, AccToComiss,
                            OperationID, StepID, ObjectType, ObjectBuff )

  var pmaddpi    = TRecHandler("pmaddpi.dbt");
  var pmaddpiNDS = TRecHandler("pmaddpi.dbt");

  var first_pi  = TRecHandler( "pmaddpi.dbt" );
  var second_pi = TRecHandler( "pmaddpi.dbt" );
  
  var AmountComiss = $0;
  var AmountNDS = $0;
  var FiidNDS = -1;
  var FiidComiss = -1;

  var stat;
  var Ground:string;

  /* EVG 17/04/2012 */
  var GroundNDS:string;

  /*6.  Если комиссии / ТО содержат НДС (если платеж Paym содержит разноску):*/
  if( Paym.PIList(PRT_Credit).Size != 0 )  
    stat = Paym.PIList(PRT_Credit).First() or Paym.PIList(PRT_Credit).Current(first_pi); 
    if( not stat )
      stat = Paym.PIList(PRT_Credit).Next() or Paym.PIList(PRT_Credit).Current(second_pi); 
    end;

    if( stat )
      return false;
    end;

    /*6.1.  В разноске платежа Paym.PIList, найти запись со счетом по кредиту pmaddpi.Account = $(счет категории "-НДС") и получить:*/
    if( first_pi.Rec.Account == MinusNDS_Account )
      AmountNDS = first_pi.Rec.Amount; /*сумму НДС AmountNDS = pmaddpi.Amount.*/
      FiidNDS   = first_pi.Rec.FIID;   /*валюту суммы НДС FiidNDS = pmaddpi.FIID.*/
      /* EVG 17/04/2012 */
      GroundNDS = first_pi.Rec.Ground;
    elif( second_pi.Rec.Account == MinusNDS_Account )
      AmountNDS = second_pi.Rec.Amount; 
      FiidNDS   = second_pi.Rec.FIID;
      /* EVG 17/04/2012 */
      GroundNDS = second_pi.Rec.Ground;
    else
      MsgBox( "Не найдена сумма НДС в разноске платежа ПЗО ", Paym.PaymentID);
      return false;
    end;

    /*6.2.  В разноске платежа Paym.PIList, найти запись со счетом по кредиту pmaddpi.Account = accToComiss и получить:*/
    if( first_pi.Rec.Account == accToComiss )
      AmountComiss = first_pi.Rec.Amount; /*сумму комиссий AmountComiss = pmaddpi.Amount.*/
      FiidComiss   = first_pi.Rec.FIID;   /*валюту суммы комиссий FiidComiss = pmaddpi.FIID.*/
      /* EVG 17/04/2012 */
      Ground       = first_pi.Rec.Ground;
    elif( second_pi.Rec.Account == accToComiss )
      AmountComiss = second_pi.Rec.Amount;
      FiidComiss   = second_pi.Rec.FIID;
      /* EVG 17/04/2012 */
      Ground       = second_pi.Rec.Ground;
    else
      MsgBox( "Не найдена сумма комиссии в разноске платежа ПЗО ", Paym.PaymentID);
      return false;
    end;
    /*6.3. Если в разноске одной из сумм не найдено, то выдать сообщение "Не найдена сумма <НДС / комиссий> 
           в разноске платежа ПЗО <ид. платежа>" и вернуть false.*/

    /*6.4.  Если FiidNDS отличен от FiidComiss, то Перевести сумму НДС AmountNDS из валюты FiidNDS в валюту FiidComiss 
    по основному курсу на Payment.ValueDate. */
    if( FiidNDS != FiidComiss )
      if( ConvSum( AmountNDS, AmountNDS, Paym.ValueDate, FiidNDS, FiidComiss, 0 ) != 0 )
        MsgBox("Не найден основной курс ",ПолучитьКодФинИн(FiidNDS), " относительно ",ПолучитьКодФинИн(FiidComiss), " за ", Paym.ValueDate);
        return false;
      end;
    end;

    /*6.5.  Удалить разноску платежа Paym: TRsbAddPIPaymentRSL.Delete.*/
    if( Paym.PIList( PRT_Credit ).Delete(first_pi) != 0 )
      MsgBox( "Ошибка при удалении разноски платежа" );
      return false;
    end;
    if( Paym.PIList( PRT_Credit ).Delete(second_pi) != 0 )
      MsgBox( "Ошибка при удалении разноски платежа" );
      return false;
    end;

    /*6.6.  Если начисление НДС и комиссий было произведено на один и тот же счет (AccFromComiss = AccFromNDS), то*/
    if( AccFromComiss == AccFromNDS )
      /*6.6.1.  Задать счет получателя Paym.ReceiverAccount = AccFromComiss.*/
      Paym.SetReceiverAccount( payFIID, 1, AccFromComiss);

      Paym.BaseAmount = AmountComiss + AmountNDS; /*6.6.2.  Задать сумму платежа Paym.BaseAmount = AmountComiss + AmountNDS.*/      
      Paym.BaseFIID = FiidComiss; /*6.6.3.  Задать валюту суммы платежа Paym.BaseFIID = FiidComiss.*/

    else /*6.7.  Иначе (начисление было произведено на разные счета)*/
      /*6.7.1.  Создать разноску по оплате комиссий для платежа Paym:*/
      pmaddpi.Rec.DebetCredit = PRT_Credit;
      pmaddpi.Rec.PMFIID      = FiidComiss;
      pmaddpi.Rec.PMAmount    = AmountComiss;
      pmaddpi.Rec.FIID        = FiidComiss;
      pmaddpi.Rec.Amount      = AmountComiss;
      pmaddpi.Rec.Account     = AccFromComiss;
      pmaddpi.Rec.Chapter     = 1/*CHAPT1*/;
      /* EVG 17.04.2012 Основание необходимо брать из родительского платежа
      pmaddpi.Rec.Ground      = "Оплата комиссии " + ComissCode;*/
      pmaddpi.Rec.Ground      = Ground;
      pmaddpi.Rec.Kind        = PMADDPI_KIND_SF;
      /*6.7.2.  Создать разноску по оплате НДС для платежа Paym:*/
      pmaddpiNDS.Rec.DebetCredit = PRT_Credit;
      pmaddpiNDS.Rec.PMFIID      = FiidComiss;
      pmaddpiNDS.Rec.PMAmount    = AmountNDS;
      pmaddpiNDS.Rec.FIID        = FiidComiss;
      pmaddpiNDS.Rec.Amount      = AmountNDS;
      pmaddpiNDS.Rec.Account     = AccFromNDS;
      pmaddpiNDS.Rec.Chapter     = 1/*CHAPT1*/;
      /* EVG 17.04.2012 Основание необходимо брать из родительского платежа
      pmaddpiNDS.Rec.Ground      = " НДС по комиссии " + ComissCode;*/
      pmaddpiNDS.Rec.Ground      = GroundNDS;
      pmaddpiNDS.Rec.Kind        = PMADDPI_KIND_NDS;

      if( Paym.PIList( PRT_Credit ).Insert( pmaddpi ) != 0 ) 
        MsgBox( "Ошибка при вставке разноски по счету комиссии" );
        return false;
      end;
      
      if( Paym.PIList( PRT_Credit ).Insert( pmaddpiNDS ) != 0 ) 
        MsgBox( "Ошибка при вставке разноски по счету НДС" );
        return false;
      end;
    end;  
  else/*7.  Иначе (НДС и разноски нет)*/
    AmountComiss = Paym.BaseAmount;       /*7.1.  Определить сумму комиссий по платежу AmountComiss = Paym.BaseAmount.*/
    FiidComiss = Paym.BaseFIID;           /*7.2.  Определить валюту сумм комиссий по платежу FiidComiss = Paym.BaseFIID.*/    
    /*7.3.  Заменить счет получателя платежа Paym.ReceiverAccount = accFromComiss.*/
    Paym.SetReceiverAccount( payFIID, 1, AccFromComiss);

    /* EVG 17.04.2012 */
    Ground = Paym.Ground;
  end;

  /*8. Выполнить проводку по начислению комиссий 2ААа или 2АБа (Таблица 23). По сути в алгоритме - 
       это одна проводки со счета дебета accFromComiss на счет кредита accToComiss на сумму AmountComiss за Paym.ValueDate.*/

  /* EVG 17.04.2012 Основание необходимо брать из родительского платежа. Присвоение выше.
  Ground = "Оплата комиссии " + ComissCode;*/

  /* EVG 14/12/2011 Добавлена передача платежа
  if( CountComissAsIncome(Paym.ValueDate, FiidComiss, accFromComiss, FiidComiss, accToComiss, AmountComiss, Ground, 
                          null, null, OperationID, StepID, SFDOCS_LINKKIND_COMISSACCRUE, ObjectType, ObjectBuff) );*/
  if( CountComissAsIncome(Paym.ValueDate, FiidComiss, accFromComiss, FiidComiss, accToComiss, AmountComiss, Ground, 
                          null, null, OperationID, StepID, SFDOCS_LINKKIND_COMISSACCRUE, ObjectType, ObjectBuff, paym) );
    return false;
  end; 

  if( AmountNDS > 0 ) /*9.  Если необходимо начислить НДС (AmountNDS > 0)*/

    /* EVG 13/1/2016 С данного момента счёт "-НДС начисленный" не используется, при начислении НДС сразу отражается 
       как оплаченный (категория "-НДС"). */
    //Gurin S. 23.03.2016 добавил ВУЗ
    if ((LifeBank.is_EXV) or (LifeBank.is_VUZ))
       accToNDS = MinusNDS_Account;
    end;
    /*9.1.  Выполнить проводку по начислению НДС 2ААб или 2АБб (Таблица 23). По сути в алгоритме - 
    это одна проводки со счета дебета accFromNDS на счет кредита accToNDS на сумму AmountNDS за Paym.ValueDate.*/
    /* EVG 17.04.2012 Основание необходимо брать из родительского платежа. Присвоение выше.
    Ground = "Оплата НДС комиссии " + ComissCode;*/

    /* EVG 14/12/2011 Добавлена передача платежа
    if( CountComissAsIncome(Paym.ValueDate, FiidComiss, accFromNDS, FiidComiss, accToNDS, AmountNDS, Ground,
                            null, null, OperationID, StepID, SFDOCS_LINKKIND_NDSACCRUE, ObjectType, ObjectBuff) );*/
    if( CountComissAsIncome(Paym.ValueDate, FiidComiss, accFromNDS, FiidComiss, accToNDS, AmountNDS, GroundNDS,
                            null, null, OperationID, StepID, SFDOCS_LINKKIND_NDSACCRUE, ObjectType, ObjectBuff, paym) );
      return false;
    end;
  end;

  return true;
end;

private macro SfCharge_SayError( OperationID, errMsg )
  if( OperationID > 0 )
    SfSetOprErrorStatus( OperationID, CHARGECOMISSION_FUNC_ERROR );
  else
    MsgBox( errMsg );
  end;
end;


private macro GetSfInvParms( SfInv, OperationID, AccFromComiss:@string, AccFromNDS:@string, AccToNDS:@string, 
                             MinusNDS_Account:@string, ComissCode:@string )
  
  var SfConComOnDate = {BranchCurDate};  
  file SfComiss( "sfcomiss.dbt" );
  file SfContr( "sfcontr.dbt") key 0;  
  var SfConCom = TRecHandler( "sfconcom.dbt" );
  var bTaxable = false;
  var IsNVPI:bool;
  
  SfComiss.number  = GetDefComissParm( SfInv.InvoiceID, @SfConComOnDate, NULL, @SfComiss.feeType  );

  if( not getEQ( SfComiss ) )
    SfCharge_SayError( OperationID, "Не найдена комиссия." );
    return false;
  end;
  ComissCode = SfComiss.Code;
  
  SfContr.Id = SfInv.ContractID;
  if( not getEQ( SfContr ) )
    SfCharge_SayError( OperationID, "Не найден договор обслуживания: " + SfInv.ContractID );
    return false;
  end;

  if( FindSfConCom_OnDate(SfInv.ContractID, SF_FEE_TYPE_PERIOD, SfComiss.number, 659, -1, SfConComOnDate, SfConCom) )
    SfCharge_SayError( OperationID, "Не найдена комиссия ДО" );
    return false;
  end;  
  
  IsNVPI = IsNVPICarry( SfInv.PayFIID, SfInv.InvoiceFIID, SfInv.PayRateDateKind );

  if( (SfComiss.PayNds != SF_NOT_TAX) AND (SfInv.NDSAmount != $0) )
    bTaxable = true;
  end;
  
  /*Определить счета начисления комиссий по соответсвующим КУ*/
  if( not defineCat_SfSiAccounts(SF_FEE_TYPE_PERIOD, isNVPI, true, SfInv.InvoiceID, SfConCom.rec, SfContr, SfInv.InvoiceFIID, SfInv.payFIID, 
                                @AccFromComiss, @AccFromNDS, @AccToNDS, @MinusNDS_Account, null, bTaxable) )
    SfCharge_SayError( OperationID, SfCatAcc_GetErrMsg() );
    return false;
  end;

  return true;
end;

/*Специфичная для ТО обработка*/
private macro chargeComission_ForSfInv( Paym, InvoiceID, OperationID, StepID )
    
  var AccFromComiss:string, AccToComiss:string, AccFromNDS:string, AccToNDS:string, MinusNDS_Account:string;
  var ComissCode:string;
  var bRetVal = true;

  /*1. Получить ТО SfInv оплачиваемое платежом по DSFINVLNK_DBT.*/
  var SfInv;
  
  SfInv = RsbSfInv( InvoiceID );  
    
  /*2.  Если ТО уже начислено (SfInv.IsIncluded = "X"), то завершить работу вернув true.*/
  if( SfInv.IsIncluded != "X" )
    bRetVal = GetSfInvParms( SfInv, OperationID, @AccFromComiss, @AccFromNDS, @AccToNDS, @MinusNDS_Account, @ComissCode );

    if( bRetVal == true )
      /*Проставить признак начисления на ТО: SfInv.IsIncluded = "X". Привязать изменение к шагу.*/
      SfInv.IsIncluded = "X";
      /*Определить счет получателя комиссии accToComiss, как SfInv.BeneAccount.*/
      AccToComiss = SfInv.BeneAccount;
      /*Заменить счет и реквизиты получателя ТО SfInv.BeneAccount на реквизиты счета начисления комиссий accFromComiss*/
      SfInvCorrect( SfInv, accFromComiss, SfInv.payFIID);

      bRetVal = chargeCommon( Paym, SfInv.payFIID, ComissCode, AccFromComiss, AccFromNDS, AccToNDS, MinusNDS_Account, 
                                    AccToComiss, OperationID, StepID, OBJTYPE_SFINVOICE, SfInv.GetSfInvBuff() );
    end;
  end;

  return bRetVal;
  
end;

/*Специфичная для удержанных комиссий обработка*/
private macro chargeComission_ForSfDef( Paym, SfDef, OperationID, StepID )
      
  var SfConComOnDate = {BranchCurDate};
  file SfComiss( "sfcomiss.dbt" );
  file SfContr( "sfcontr.dbt") key 0;  
  var SfConCom = TRecHandler( "sfconcom.dbt" );
  var bTaxable = false;

  var IsNVPI:bool;
  var AccFromComiss:string, AccToComiss:string, AccFromNDS:string, AccToNDS:string, MinusNDS_Account:string;

  var objectType = OBJTYPE_SFDEFCOM;
  var SfComPD_Buff = SfDef;
  var payFIID = -1; 

  /*Если комиссия OprSfCom уже начислена (OprSfCom.IsIncluded = "X"), то завершить работу вернув true.*/
  if( SfDef.IsIncluded == "X" )
    return true;
  end;

  SfComiss.feeType = SfDef.FeeType;
  SfComiss.number  = SfDef.CommNumber;
  if( not getEQ( SfComiss ) )
    SfCharge_SayError( OperationID, "Не найдена комиссия." );
    return false;
  end;

  payFIID = SfDef.FIID_Sum;
  if( SfDef.FeeType == SF_FEE_TYPE_ONCE )
    IsNVPI = false;
    objectType = OBJTYPE_SFSINGDF;
  else
    if( sfcomiss.FIID_paySum != -1 )
      payFIID = sfcomiss.FIID_paySum; 
    end;

    SfContr.Id = SfDef.SfContrID;
    if( not getEQ( SfContr ) )
      SfCharge_SayError( OperationID, "Не найден договор обслуживания: " + SfDef.SfContrID );
      return false;
    end;

    if( SfDef.FeeType == SF_FEE_TYPE_SINGLE )
      objectType = OBJTYPE_OPRSFCOM;
      GetOprSfcomParm( SfDef.ID_Operation, SfDef.ID_Step, @SfConComOnDate );
    end;

    if( isDefComNVPI( objectType, SfDef, isNVPI ) != 0 )
      return false;
    end;

    if ( FindSfConCom_OnDate(SfDef.SfContrID, SfDef.FeeType, SfDef.CommNumber, 659, -1, SfConComOnDate, SfConCom) )
      SfCharge_SayError( OperationID, "Не найдена комиссия ДО" );
      return false;
    end;
    SfComPD_Buff = SfConCom.rec; 
  end;

  if( (SfComiss.PayNds != SF_NOT_TAX) AND (SfDef.sumNDS != $0) )
    bTaxable = true;
  end;

  AccToComiss = "";
  /*Определить счета начисления комиссий accFromComiss, accFromNDS, accToNDS по соответсвующим КУ*/
  if( not defineCat_SfSiAccounts(SfDef.feeType, isNVPI, false, SfDef.ID, SfComPD_Buff, SfContr, SfDef.FIID_Sum, payFIID, 
                                @AccFromComiss, @AccFromNDS, @AccToNDS, @MinusNDS_Account, @AccToComiss, bTaxable) )
    SfCharge_SayError( OperationID, SfCatAcc_GetErrMsg() );
    return false;
  end;
  
  /*Задать SfInv.IsIncluded = "X". Привязать изменение к шагу.*/
  if( not SfDefSetFlagIsInc(SfDef.FeeType, SfDef.ID, OperationID, StepID) )
    SfCharge_SayError( OperationID, "Ошибка при установке признака комиссии <Начислена>" );
    return false;
  end;

  if( SfDef.FeeType == SF_FEE_TYPE_PERIOD )
    SfDefInsertAccrue( SfDef, Paym.ValueDate, OperationID, StepID );
  end;
  
  return chargeCommon( Paym, payFIID, SfComiss.Code, AccFromComiss, AccFromNDS, AccToNDS, MinusNDS_Account, AccToComiss,
                       OperationID, StepID, objectType, SfDef );
end;

/*Специфичная для удержанных комиссий обработка*/
//SDA 19.04.2012 
private macro chargeComission_WithOutSfDef( Paym )
     
  var AccFromComiss:string, AccToComiss:string, AccFromNDS:string, AccToNDS:string, MinusNDS_Account:string;

  AccToComiss = "";
  /*Определить счета начисления комиссий accFromComiss, accFromNDS, accToNDS по соответсвующим КУ*/
  file SfContr( "sfcontr.dbt") key 1;  

    SfContr.ObjectType = 1;
    SfContr.FIID = 0;
    SfContr.Object = Paym.PayerAccount;
    SfContr.ServKind = 3;

    if( not getEQ( SfContr ) )
        MsgBox("Не найден договор обслуживания");
      return false;
    end;


  var SfComPD = SfComPrimDoc( 150 , SfContr );
  
  AccToComiss = Paym.Receiveraccount;
  AccFromComiss = SfComPD.FindAndOpenAccount( PlusCalc_CatCode, {curdate}, 0 );

  return chargeCommon( Paym, 0, null , AccFromComiss, null, null, null, AccToComiss,
                       null, null, null, null );

end;

private macro ReCryptPaym( CryptoAPi, Paym )
  // Удалить с платежа все подписи, которые удовлетворяют условиям:
  if( CryptoAPI.UndoCryptoAction(PAYMAUTOFORM_NTPKCONTEXT, Paym) )
    // Подписать платеж Paym НТПК "Автоматическое_формирование_платежей":*/ 
    Paym.CryptoAction( PAYMAUTOFORM_NTPKCONTEXT );
    //CryptoAPI.ExecCryptoAction(PAYMAUTOFORM_NTPKCONTEXT, Paym, 0, 0) 
  end;
end;


/* Функция вызывается из макроса шага постановки платежа в одну из картотек для платежей привязанных к ТО или к для платежей 
    по единовременным комиссиям, а так же для их для частичных оплат. 
  Функция является макросом RSL вызываемом в контексте выполнения макроса шага операции.
  Функция получает в качестве входящего параметра ид. платежа PaymentID и возвращает результат true, 
    если функция отработала успешно, false, в случае ошибки.
  Если функция вернула false платеж не ставится в картотеку - выполняется откат шага.
  Функция в случае необходимости (определяется по значению настройки "COMMON \ Комиссии \ Начисление" 
    и по тому начислены ли уже комиссии платежа) выполняет проводку по начислению комиссий 
    (комиссий ТО или единовременной комиссии), и 
   - Либо заменяет счет получателя ReceiverAccount платежа и переподписывает его НТПК "Автоматическое_формирование_платежей".
   - Либо заменяет счета получателя в разноске.
   - Либо удаляет разноску и задает счет получателя ReceiverAccount и сумму платежа. 
     После чего переподписывает его НТПК "Автоматическое_формирование_платежей".
  Помимо этого осуществляется манипуляции с объектами ПЗО отражающее начисление. 
  Изменения привязываются к шагу постановки в картотеку операции платежа. Эти изменения включают:
  - Для периодических комиссий необходимо изменить и привязать к шагу:
    - Изменение счета ТО.
    - Проставление комиссиям входящим в ТО признака того, что они начислены.
    - Проставление ТО признака того, что оно содержит начисленные комиссии.
    - Вставку записей в историю начислений комиссий входящих в ТО.
  - Для единовременных комиссий только проставление удержанной комиссии признака того, что она начислена.*/
/*Алгоритм:*/
macro chargeComission( PaymentID )

  /*1. Если значение настройки "COMMON \ Комиссии \ Начисление" "Не начислять", то завершить работу вернув true.*/
  var  AccrueRegVal = SfComAccrueGetRegValue();
  if( AccrueRegVal == 3 ) /*SFCOM_ACCRUE_NONE*/
    return true;
  end;

  /*2. Получить объект платежа RsbPayment Paym по его идентификатору PaymentID.*/
  var Paym = RsbPayment( PaymentID );
  /*3. Если плательщиком по платежу Paym.Payer является "наш банк", то завершить работу вернув true. 
       Причина этого в том, что по комиссиям выплачиваемым нашим банком начисление не реализовано.*/
  if( Paym.Payer == {HeadBankID} )
    return true;
  end;

  var CryptoAPI = RsCryptoAPI();
  if( not CryptoAPI.ExecCryptoAction("Проверка_при_переподписании_ПЗО", Paym, 0, 0) )
    MsgBox( GetErrMsg() );
    return false;
  end;
  
  file SfDef( "sfdef.dbt" );
  var InvoiceID:integer;
  var bRetVal = true;

  /*4.  Если для PaymentID найдена строка в DSFINVLNK_DBT (мы имеем дело с платежом по ТО), то*/
  if( IsPaymForSfInv(PaymentID, @InvoiceID) == true )
    bRetVal = chargeComission_ForSfInv( Paym, InvoiceID, 0, 0 );

  elif( (Paym.DefComID > 0) AND 
    ((Paym.feeType == SF_FEE_TYPE_SINGLE) OR (Paym.feeType == SF_FEE_TYPE_ONCE) OR (Paym.feeType == SF_FEE_TYPE_PERIOD)) ) 
    /*5. (Платеж по удержанной комиссии.*/
    /*5.1.  Получить удержанную единовременную комиссию OprSfCom оплачиваемую платежом по Paym.feeType и Paym.DefComId.*/
    SfDef.ID = Paym.DefComID;
    SfDef.FeeType = Paym.feeType;
    if( not getEQ( SfDef ) )
      MsgBox("Не найдена удержанная комиссия с ID = ", Paym.DefComID);
      return false;
    end;
    bRetVal = chargeComission_ForSfDef( Paym, SfDef, 0, 0 );
//SDA 19.04.2012 - обработка постановки на К2 документов происхождения не ПЗО ()
  elif ((Paym.feeType == 0) and (Paym.DefComID == 0))  
    bRetVal = chargeComission_WithOutSfDef( Paym );
  end;

  if( bRetVal == true )
    ReCryptPaym( CryptoAPi, Paym );
  end;

  return bRetVal;
end;

//chargeComission_BatchMode()
private macro SetBkoutDataOfChargeComCrypt( IsForSfInv )

  var ret_val = 0;
  var cmd:RsdCommand;
  
  cmd = RsdCommand( "BEGIN ? := RSB_SERVFEE.SetBkoutDataOfChargeComCrypt( ?, ?, ? ); END;");

  cmd.addParam( "ret_val", RSDBP_OUT, V_INTEGER );
  cmd.addParam( "", RSDBP_IN, IsForSfInv );
  cmd.addParam( "", RSDBP_IN, PAYMAUTOFORM_NTPKCONTEXT );
  cmd.addParam( "", RSDBP_IN, {HeadBankID} );
  cmd.execute();

  return ret_val;
end;

CLASS TCommissCharger( pObjectType:integer )

  var PaymentID:integer;
  var ValueDate:date;
  var BaseAmount:money;
  var BaseFIID:integer;

  var OperationID:integer;
  var StepID:integer;
  
  var AccFromComiss:string = "";
  var AccToComiss:string = "";
  var AccFromNDS:string = "";
  var AccToNDS:string = "";
  var MinusNDS_Account:string = "";

  var ComissCode:string;
  var PayFIID:integer = -1;
  var ObjectType:integer = pObjectType;

  var ObjectBuff:TBFile;

  var AmountComiss:money = $0;
  var AmountNDS:money = $0;
  var FiidNDS:integer = -1;
  var FiidComiss:integer = -1;
  
  var bChargeable:bool = true;

  macro charge()
    var Ground = "Оплата комиссии " + ComissCode;
    var bCharged = true;

    if( bChargeable == true )
      if( CountComissAsIncome(ValueDate, FiidComiss, accFromComiss, FiidComiss, accToComiss, AmountComiss, Ground, 
                            null, null, OperationID, StepID, SFDOCS_LINKKIND_COMISSACCRUE, ObjectType, ObjectBuff) )
        bCharged = false;
      else
        if( AmountNDS > 0 )
          Ground = "Оплата НДС комиссии " + ComissCode;
          if( CountComissAsIncome(ValueDate, FiidComiss, accFromNDS, FiidComiss, accToNDS, AmountNDS, Ground,
                                null, null, OperationID, StepID, SFDOCS_LINKKIND_NDSACCRUE, ObjectType, ObjectBuff) )
            bCharged = false;
          end;
        end;
      end;
    end;

    return ( (bCharged == true) AND (bChargeable == true) );
  end; //charge( AmountComiss, AmountNDS, FIIDComiss )

  macro setSfDefParms( SfDef )
    var SfConComOnDate = {BranchCurDate};
    file SfComiss( "sfcomiss.dbt" );
    file SfContr( "sfcontr.dbt") key 0;  
    var SfConCom = TRecHandler( "sfconcom.dbt" );
    var bTaxable = false;

    var IsNVPI:bool;
    var SfComPD_Buff = SfDef;
    
    SfComiss.feeType = SfDef.FeeType;
    SfComiss.number  = SfDef.CommNumber;
    if( not getEQ( SfComiss ) )      
      SfSetOprErrorStatus( OperationID, CHARGECOMISSION_FUNC_ERROR );
      bChargeable = false;
    else
      ComissCode = SfComiss.Code;
      payFIID = SfDef.FIID_Sum;
      if( SfDef.FeeType == SF_FEE_TYPE_ONCE )
        IsNVPI = false;
        objectType = OBJTYPE_SFSINGDF;
      else
        if( sfcomiss.FIID_paySum != -1 )
          payFIID = sfcomiss.FIID_paySum; 
        end;

        SfContr.Id = SfDef.SfContrID;
        if( not getEQ( SfContr ) )          
          SfSetOprErrorStatus( OperationID, CHARGECOMISSION_FUNC_ERROR );
          bChargeable = false;
        else
          if( SfDef.FeeType == SF_FEE_TYPE_SINGLE )
            objectType = OBJTYPE_OPRSFCOM;
            GetOprSfcomParm( SfDef.ID_Operation, SfDef.ID_Step, @SfConComOnDate );
          end;

          if( isDefComNVPI( objectType, SfDef, isNVPI ) != 0 )
            bChargeable = false;
          else
            if( FindSfConCom_OnDate(SfDef.SfContrID, SfDef.FeeType, SfDef.CommNumber, 659, -1, SfConComOnDate, SfConCom) )              
              SfSetOprErrorStatus( OperationID, CHARGECOMISSION_FUNC_ERROR );
              bChargeable = false;
            else
              SfComPD_Buff = SfConCom.rec;
            end;
          end;          
        end;
      end;
    end;
    if( bChargeable == true )
      if( (SfComiss.PayNds != SF_NOT_TAX) AND (SfDef.sumNDS != $0) )
        bTaxable = true;
      end;
      //Определить счета начисления комиссий accFromComiss, accFromNDS, accToNDS по соответсвующим КУ
      if( not defineCat_SfSiAccounts( SfDef.feeType, isNVPI, false, SfDef.ID, SfComPD_Buff, SfContr, SfDef.FIID_Sum, payFIID, 
                                     @AccFromComiss, @AccFromNDS, @AccToNDS, @MinusNDS_Account, @AccToComiss, bTaxable) )
        SfCharge_SayError( OperationID, SfCatAcc_GetErrMsg() );
        bChargeable = false;
      end;

    end;
    return bChargeable;
  end; //macro setSfDefParms( SfDef )

  macro SetSfInvParms( SfInv )  
    var SfConComOnDate = {BranchCurDate};  
    file SfComiss( "sfcomiss.dbt" );
    file SfContr( "sfcontr.dbt") key 0;  
    var SfConCom = TRecHandler( "sfconcom.dbt" );
    var bTaxable = false;
    var IsNVPI:bool;
  
    SfComiss.number  = GetDefComissParm( SfInv.InvoiceID, @SfConComOnDate, NULL, @SfComiss.feeType  );

    if( not getEQ( SfComiss ) )
      SfSetOprErrorStatus( OperationID, CHARGECOMISSION_FUNC_ERROR );
      bChargeable = false;
    else
      ComissCode = SfComiss.Code;

      SfContr.Id = SfInv.ContractID;
      if( not getEQ( SfContr ) )
        SfSetOprErrorStatus( OperationID, CHARGECOMISSION_FUNC_ERROR );
        bChargeable = false;
      else
        if( FindSfConCom_OnDate(SfInv.ContractID, SF_FEE_TYPE_PERIOD, SfComiss.number, 659, -1, SfConComOnDate, SfConCom) )
          SfSetOprErrorStatus( OperationID, CHARGECOMISSION_FUNC_ERROR );
          bChargeable = false;
        else
          IsNVPI = IsNVPICarry( SfInv.PayFIID, SfInv.InvoiceFIID, SfInv.PayRateDateKind );
        end;
      end;
    end;

    if( bChargeable == true )
      if( (SfComiss.PayNds != SF_NOT_TAX) AND (SfInv.NDSAmount != $0) )
        bTaxable = true;
      end;

      AccToComiss = SfInv.BeneAccount;
      //Определить счета начисления комиссий по соответсвующим КУ
      if( not defineCat_SfSiAccounts( SF_FEE_TYPE_PERIOD, isNVPI, true, SfInv.InvoiceID, SfConCom.rec, SfContr, SfInv.InvoiceFIID, SfInv.payFIID, 
                                     @AccFromComiss, @AccFromNDS, @AccToNDS, @MinusNDS_Account, null, bTaxable) )
        SfCharge_SayError( OperationID, SfCatAcc_GetErrMsg() );
        bChargeable = false;
      end;
    end;
    return bChargeable;
  end;
    
  macro convertAmountNDS()
    var iRetVal = 0;
    //Если FiidNDS отличен от FiidComiss, то Перевести сумму НДС AmountNDS из валюты FiidNDS в валюту FiidComiss 
    //по основному курсу на Payment.ValueDate.
    if( FiidNDS != FiidComiss )
      iRetVal = ConvSum( AmountNDS, AmountNDS, ValueDate, FiidNDS, FiidComiss, 0 );
    end;
    return iRetVal;
  end; //convertAmountNDS()
END;


private macro SfInvCorrect_Batch( SfInv, newBeneAccount, accFIID, OperationID, StepID )
  var ret_val = 0;
  var cmd:RsdCommand;

  cmd = RsdCommand( "BEGIN ? := RSB_SERVFEE.CorrectSfInv( ?, ?, ? ); END;");
  cmd.addParam( "ret_val", RSDBP_OUT, V_INTEGER );
  cmd.addParam( "", RSDBP_IN, SfInv.InvoiceID );
  cmd.addParam( "", RSDBP_IN, OperationID );
  cmd.addParam( "", RSDBP_IN, StepID );
  cmd.execute();

  if( ret_val == 0 ) 
    SfInvCorrect( SfInv, newBeneAccount, accFIID );
    cmd = RSDCommand( " UPDATE dsfinv_dbt SET t_BeneChapter = ?, t_BeneAccount = ?, t_BeneID = ?,"
                      " t_BeneCodeKind = ?, t_BeneCode = ?, t_BeneName = ?, t_BeneINN = ?,"
                      " t_BeneBankID = ?, t_BeneBankCodeKind = ?, t_BeneBankCode = ?, t_BeneBankName = ?,"
                      " t_BeneCorrAcc = ?, t_BeneCorrBankCodeKind = ?,"
                      " t_BeneCorrBankID = ?, t_BeneCorrBankCode = ?, t_BeneCorrBankName = ? "
                      " WHERE t_InvoiceID = ? ");
    cmd.addParam( "", RSDBP_IN, SfInv.BeneChapter );
    cmd.addParam( "", RSDBP_IN, SfInv.BeneAccount );
    cmd.addParam( "", RSDBP_IN, SfInv.BeneID );
    cmd.addParam( "", RSDBP_IN, SfInv.BeneCodeKind );
    cmd.addParam( "", RSDBP_IN, SfInv.BeneCode );
    cmd.addParam( "", RSDBP_IN, SfInv.BeneName );
    cmd.addParam( "", RSDBP_IN, SfInv.BeneINN );

    cmd.addParam( "", RSDBP_IN, SfInv.BeneBankID );
    cmd.addParam( "", RSDBP_IN, SfInv.BeneBankCodeKind );
    cmd.addParam( "", RSDBP_IN, SfInv.BeneBankCode );
    cmd.addParam( "", RSDBP_IN, SfInv.BeneBankName );

    cmd.addParam( "", RSDBP_IN, SfInv.BeneCorrAcc );
    cmd.addParam( "", RSDBP_IN, SfInv.BeneCorrBankCodeKind );
    cmd.addParam( "", RSDBP_IN, SfInv.BeneCorrBankID );
    cmd.addParam( "", RSDBP_IN, SfInv.BeneCorrBankCode );
    cmd.addParam( "", RSDBP_IN, SfInv.BeneCorrBankName );

    cmd.addParam( "", RSDBP_IN, SfInv.InvoiceID );

    cmd.execute();
  end;

end;

private macro FillRecordSetForSfInv()
  
  var sqlString = " SELECT pm.t_PaymentID, pm.t_ValueDate, pm.t_BaseAmount, pm.t_BaseFIID, "
    + " opr.t_ID_Operation, opr.t_ID_Step, inv.t_InvoiceID "
    + " FROM dpmpaym_dbt pm, doprtemp_tmp opr, dsfinvlnk_dbt lnk, dsfinv_dbt inv "
    + " WHERE opr.t_OrderID = pm.t_PaymentID AND pm.t_PaymentID = lnk.t_PaymentID AND lnk.t_InvoiceID = inv.t_InvoiceID "
    + " AND opr.t_ErrorStatus = 0 AND pm.t_Payer != ? AND t_IsIncluded = chr(0) ";
  
  var cmd = RSDCommand( sqlString );
  cmd.addParam( "", RSDBP_IN, {HeadBankID} );

  return RsdRecordset( cmd );
end;

//Специфичная для ТО обработка
private macro defineChargeParms_ForSfInv_Batch( chargers, i:@integer );
  var bRetVal = true;
  
  var rs = FillRecordSetForSfInv();
  while( rs.moveNext() )
    chargers[i] = TCommissCharger(OBJTYPE_SFINVOICE);
    chargers[i].PaymentID = rs.value("t_PaymentID");
    chargers[i].ValueDate = rs.value("t_ValueDate");
    chargers[i].BaseAmount = rs.value("t_BaseAmount");
    chargers[i].BaseFIID = rs.value("t_BaseFIID");
    chargers[i].OperationID = rs.value("t_ID_Operation");
    chargers[i].StepID = rs.value("t_ID_Step");
    
    //SfInv.InvoiceID = rs.value("t_InvoiceID");
    chargers[i].ObjectBuff = TBFile("sfinv.dbt", "W", 0);
    chargers[i].ObjectBuff.rec.InvoiceID = rs.value("t_InvoiceID");

    if( not getEQ( chargers[i].ObjectBuff ) )
      SfSetOprErrorStatus( chargers[i].OperationID, CHARGECOMISSION_FUNC_ERROR );
    else
      bRetVal = chargers[i].SetSfInvParms( chargers[i].ObjectBuff.rec );

      if( bRetVal == true )
        //Проставить признак начисления на ТО: SfInv.IsIncluded = "X". Привязать изменение к шагу.
        SetSfInvIsIncluded( chargers[i].ObjectBuff.rec.InvoiceID, chargers[i].ValueDate, 
                            chargers[i].OperationID, chargers[i].StepID );
        
        //Заменить счет и реквизиты получателя ТО SfInv.BeneAccount на реквизиты счета начисления комиссий accFromComiss
        SfInvCorrect_Batch( chargers[i].ObjectBuff.rec, chargers[i].accFromComiss, chargers[i].ObjectBuff.rec.PayFIID, 
                            chargers[i].OperationID, chargers[i].StepID );
      end;
    end;
    i = i + 1;
  end;

  return bRetVal;
end;


private macro FillRecordSetForSfDef()

  var sqlString = " SELECT pm.t_PaymentID, pm.t_ValueDate, pm.t_BaseAmount, pm.t_BaseFIID, " 
    + " opr.t_ID_Operation, opr.t_ID_Step, def.t_FeeType, def.t_ID "
    + " FROM doprtemp_tmp opr, dpmpaym_dbt pm, dsfdef_dbt def "
    + " WHERE t_OrderID = pm.t_PaymentID AND (pm.t_FeeType = ? OR pm.t_FeeType = ? OR pm.t_FeeType = ?) "
    + " AND pm.t_FeeType = def.t_FeeType AND pm.t_DefComID = def.t_ID AND def.t_IsIncluded = chr(0) "
    + " AND opr.t_ErrorStatus = 0 AND pm.t_Payer != ? ";

  var cmd = RSDCommand( sqlString );
  cmd.addParam( "", RSDBP_IN, SF_FEE_TYPE_PERIOD );
  cmd.addParam( "", RSDBP_IN, SF_FEE_TYPE_SINGLE );
  cmd.addParam( "", RSDBP_IN, SF_FEE_TYPE_ONCE );
  cmd.addParam( "", RSDBP_IN, {HeadBankID} );

  return RsdRecordset( cmd );
end;

private macro defineChargeParms_ForSfDef_Batch( chargers, i:@integer )
  
  var bRetVal = true;

  var rs = FillRecordSetForSfDef();
  while( rs.moveNext() )
    chargers[i] = TCommissCharger(OBJTYPE_SFDEFCOM);
    chargers[i].PaymentID = rs.value("t_PaymentID");
    chargers[i].ValueDate = rs.value("t_ValueDate");
    chargers[i].BaseAmount = rs.value("t_BaseAmount");
    chargers[i].BaseFIID = rs.value("t_BaseFIID");
    chargers[i].OperationID = rs.value("t_ID_Operation");
    chargers[i].StepID = rs.value("t_ID_Step");
    
    chargers[i].ObjectBuff = TBFile("sfdef.dbt");
    chargers[i].ObjectBuff.rec.FeeType = rs.value("t_FeeType");
    chargers[i].ObjectBuff.rec.ID = rs.value("t_ID");    

    if( not getEQ( chargers[i].ObjectBuff.rec ) )
      SfSetOprErrorStatus( chargers[i].OperationID, CHARGECOMISSION_FUNC_ERROR );
    else
      bRetVal = chargers[i].SetSfDefParms(chargers[i].ObjectBuff.rec);

      if( bRetVal == true )        
        if( not SfDefSetFlagIsInc(chargers[i].ObjectBuff.rec.FeeType, chargers[i].ObjectBuff.rec.ID, 
                                  chargers[i].OperationID, chargers[i].StepID) )    
          SfSetOprErrorStatus( chargers[i].OperationID, CHARGECOMISSION_FUNC_ERROR );
          bRetVal = false;
        else
          if( chargers[i].ObjectBuff.rec.FeeType == SF_FEE_TYPE_PERIOD )
            SfDefInsertAccrue( chargers[i].ObjectBuff.rec, chargers[i].ValueDate, chargers[i].OperationID, chargers[i].StepID );
          end;
        end;      
      end;
    end;

    i = i + 1;
  end;
end;


private macro getPmAddPiParms( charger, rs, isPmWithNDS:@bool )
  var bRetval = false;

  if( rs.MoveNext() )
    isPmWithNDS = true;
    var bAccNDSFound = false;
    var bAccComissFound = false;

    var rsAccount = rs.value("t_Account");
    if( rsAccount == charger.MinusNDS_Account )
      charger.AmountNDS = rs.value("t_Amount");
      charger.FiidNDS   = rs.value("t_FIID");
      bAccNDSFound = true;
    elif( rsAccount == charger.accToComiss )
      charger.AmountComiss = rs.value("t_Amount");
      charger.FiidComiss   = rs.value("t_FIID");
      bAccComissFound = true;
    end;

    if( rs.MoveNext() )      
      rsAccount = rs.value("t_Account");
      if( rsAccount == charger.MinusNDS_Account )
        charger.AmountNDS = rs.value("t_Amount");
        charger.FiidNDS   = rs.value("t_FIID");
        bAccNDSFound = true;
      elif( rsAccount == charger.accToComiss )
        charger.AmountComiss = rs.value("t_Amount");
        charger.FiidComiss   = rs.value("t_FIID");
        bAccComissFound = true;
      end;
    end;

    if( bAccNDSFound == false ) //MsgBox( "Не найдена сумма НДС в разноске платежа ПЗО ", Paym.PaymentID);
      SfSetOprErrorStatus( charger.OperationID, CHARGECOMISSION_FUNC_ERROR );
      bRetval = false;
    elif( bAccComissFound == false ) //MsgBox( "Не найдена сумма комиссии в разноске платежа ПЗО ", Paym.PaymentID);
      SfSetOprErrorStatus( charger.OperationID, CHARGECOMISSION_FUNC_ERROR );
      bRetval = false;
    end;
    
    if( bRetVal == true )
      if( charger.convertAmountNDS() != 0 )
        SfSetOprErrorStatus( charger.OperationID, CHARGECOMISSION_FUNC_ERROR );
        bRetVal = false;
      end;
    end;
  else
    isPmWithNDS = false;
  end;

  return bRetVal;
end;

private macro deletePmAddPI( charger )

  var ret_val = 0;  
  
  var cmd = RsdCommand( "BEGIN ? := RSB_SERVFEE.DeletePmAddPI( ?, ?, ?, ?, ?, ? ); END;");

  cmd.addParam( "ret_val", RSDBP_OUT, V_INTEGER );
  cmd.addParam( "", RSDBP_IN, charger.PaymentID );
  cmd.addParam( "", RSDBP_IN, PRT_Credit );
  cmd.addParam( "", RSDBP_IN, charger.accToComiss );
  cmd.addParam( "", RSDBP_IN, charger.MinusNDS_Account );
  cmd.addParam( "", RSDBP_IN, charger.OperationID );
  cmd.addParam( "", RSDBP_IN, charger.StepID );
  cmd.execute();

  return ret_val;

end;

private macro correctPaymParms( charger )
  //изменить в платеже:
  //1 Счет получателя: pmPaym.ReceiverAccount = AccFromComiss.
  //2 Сумму платежа: pmPaym.BaseAmount = AmountComiss + AmountNDS.
  //3 Валюту суммы платежа: pmPaym.BaseFIID = FiidComiss.
  var sqlStr:string;
  sqlStr = " UPDATE dpmpaym_dbt SET t_ReceiverAccount = ?, t_BaseAmount = ?, t_BaseFIID = ? WHERE t_PaymentID = ? ";
  var cmd = RSDCommand( sqlStr );
  cmd.addParam( "", RSDBP_IN, charger.AccFromComiss );
  cmd.addParam( "", RSDBP_IN, charger.AmountComiss + charger.AmountNDS );
  cmd.addParam( "", RSDBP_IN, charger.FIIDComiss );
  cmd.addParam( "", RSDBP_IN, charger.PaymentID );
  cmd.execute();
     
end;

private macro insertPmAddPi( PaymentID, PmFIID, PmAmount, FIID, Amount, Account, Ground )

  var sqlStr:string;
  sqlStr = " INSERT INTO dpmaddpi_dbt (t_PaymentID, t_DebetCredit, t_PmFIID, t_PmAmount, t_FIID, "
    + " t_Amount, t_Account, t_Chapter, t_Ground) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?) ";

  var cmd = RSDCommand( sqlStr );
  cmd.addParam( "", RSDBP_IN, PaymentID );
  cmd.addParam( "", RSDBP_IN, PRT_Credit );
  cmd.addParam( "", RSDBP_IN, PmFIID );
  cmd.addParam( "", RSDBP_IN, PmAmount );
  cmd.addParam( "", RSDBP_IN, FIID );
  cmd.addParam( "", RSDBP_IN, Amount );
  cmd.addParam( "", RSDBP_IN, Account );
  cmd.addParam( "", RSDBP_IN, 1 );
  cmd.addParam( "", RSDBP_IN, Ground );

  return cmd.execute();

end;

private macro Charge_Batch( chargers, _size )

  var sqlStr = " SELECT t_Account, t_Amount, t_FIID FROM dpmaddpi_dbt WHERE t_PaymentID = ? AND t_DebetCredit = ? ";
  var i:integer = 0;
  while( i < _size )
    if( chargers[i].bChargeable == true )
      var cmd = RsdCommand( sqlStr );
      cmd.addParam( "", RSDBP_IN, chargers[i].PaymentID );
      cmd.addParam( "", RSDBP_IN, PRT_Credit );

      var rs = RsdRecordset( cmd );
      var isPmWithNDS = false;
      if( getPmAddPiParms(chargers[i], rs, @isPmWithNDS) == false )
        if( isPmWithNDS == false )
          //Определить сумму комиссий по платежу: AmountComiss = pmPaym.BaseAmount.
          chargers[i].AmountComiss = chargers[i].BaseAmount;      
          //Определить валюту сумм комиссий по платежу: FiidComiss = pmPaym.BaseFIID.
          chargers[i].FIIDComiss = chargers[i].BaseFIID;
          //Массово заменить счет получателя платежа: pmPaym.ReceiverAccount = accFromComiss.
          //correctReceiverAccount( charger );
        else //по платежу есть разноска
          //Удалить разноски платежа pmPaym->pmaddpi. Действие удаления привязать к шагу операции соответствующего платежа.
          deletePmAddPi( chargers[i] );


          //Если начисление НДС и комиссий было произведено на один и тот же счет - AccFromComiss = AccFromNDS, 
          if( chargers[i].AccFromComiss == chargers[i].AccFromNDS )      
            correctPaymParms( chargers[i] );
          else //Иначе (начисление было произведено на разные счета)
            //1.  Создать разноску по оплате комиссий для платежа Paym:
            var Ground = " Оплата комиссии " + chargers[i].ComissCode; 
            insertPmAddPi( chargers[i].PaymentID, chargers[i].FiidComiss, chargers[i].AmountComiss, 
                           chargers[i].FiidComiss, chargers[i].AmountComiss, chargers[i].AccFromComiss, Ground );
            //2.  Создать разноску по оплате НДС для платежа Paym:
            Ground = " НДС по комиссии " + chargers[i].ComissCode; 
            insertPmAddPi( chargers[i].PaymentID, chargers[i].FiidComiss, chargers[i].AmountNDS, 
                           chargers[i].FiidComiss, chargers[i].AmountNDS, chargers[i].AccFromNDS, Ground );
          end;
        end;
        chargers[i].charge();
      end;
    end;
    
    i = i + 1;
  end;
end;

macro chargeComission_BatchMode()

  /*1. Если значение настройки "COMMON \ Комиссии \ Начисление" "Не начислять", то завершить работу вернув true.*/
  var  AccrueRegVal = SfComAccrueGetRegValue();
  if( AccrueRegVal == 3 ) /*SFCOM_ACCRUE_NONE*/
    return true;
  end;

  var CryptoAPI = RsCryptoAPI();
  if( not CryptoAPI.MassCryptoAction( string("Проверка_при_переподписании_ПЗО") ))
    SfSetOprErrorStatusForAll();
    return false;
  end;

  var i:integer = 0, iSfInvCount = 0, iSfDefCount = 0;
  var chargers:TArray = TArray();
    
  defineChargeParms_ForSfInv_Batch( chargers, @i );
  iSfInvCount = i;
  defineChargeParms_ForSfDef_Batch( chargers, @i );
  iSfDefCount = i - iSfInvCount;

  if( i > 0 )
    Charge_Batch( chargers, i );

    if( CryptoAPI.MassUndoCryptoAction(string("Автоматическое_формирование_платежей")) )   
      CryptoAPI.MassCryptoAction( string("Автоматическое_формирование_платежей") );
    end;

    //var IsForSfInv = "X";
    if( iSfInvCount > 0 )
      SetBkoutDataOfChargeComCrypt( "X" );
    end;

    if( iSfDefCount > 0 )
      SetBkoutDataOfChargeComCrypt( "" );
    end;
  end;

  return true;
end;


/********************Учет комиссии в доход при зачислении платежа discountNDS(PaymentID)**************************/

/* является ли платеж платежом, который полностью закрывает ТО, т.е. обе суммы: сумма по DSFINVLNK_DBT.T_PAYAMOUNT 
и сумма по DSFINVLNK_DBT.T_PAIDNDS для всех не закрытых записей (DSFINVLNK_DBT.T_LINKSTATUS = 0) DSFINVLNK_DBT 
относящихся к ТО SfInv, за исключением записи для Paym.PaymentID равны нулю, */
macro IsPaymFull( InvoiceID, PaymentID )
  var rs, cmd;

  cmd =  RsdCommand( " SELECT *  FROM dsfinvlnk_dbt WHERE t_InvoiceID = ? AND t_PaymentID <> ? "
                     " AND (t_PayAmount <> 0 OR t_PaidNDS <> 0) AND t_LinkStatus = 0 " );
  cmd.addParam( "", RSDBP_IN, InvoiceID );
  cmd.addParam( "", RSDBP_IN, PaymentID );

  rs = RsdRecordset( cmd );
  if( rs.moveNext() )    
    return false;
  else
    return true;
  end; 
end;


/*   
macro discountNDS( PaymentID ) // переехала в sfdiscount.mac
*/

/*sfDefComs[][] - массив, каждый элемент которого представляет собой массив структур вида:
   - feeType - вид комиссии.
   - sfDefCom - буфер оплачиваемой удержанной комиссии. Для ТО тут передаются все комиссии в него входящие, 
                а для удержанных разовых и единовременных всегда передается один буфер удержанной комиссии.
   paySfAmount - сумма выполненной проводки по комиссиям.
   payNdsAmount - сумма проводки по НДС.
   payFiid - валюта сумм.
   paymentId - идентификатор платежа.*/
macro afterSfPay( sfDefComs, paySfAmount, payNdsAmount, payFIID, paymentID )
  
  return true;
end;


/* EVG Функция формирует название счёта (используется для вызова из функций CorrectAccount()
   макросов классов первичных документов). */
macro MakeAccountNameForCat( AccStruc, Name:@string )

  var BalNumber = subStr( AccStruc.rec.Account, 1, 5 ),
      clName    = "";
  var cmd, rs;


  cmd = RsdCommand( " Select t_ShortName from DParty_dbt " +
                    "  Where t_PartyID = ? " );
  cmd.AddParam( "", RSDBP_IN, AccStruc.rec.Client);
  rs = RsdRecordset( cmd );
  if( rs.moveNext() )
     clName = rs.Value( 0, null, V_STRING );
  end;

  
  /* Если удовлетворяются какие-либо из этих условий, название счёта изменяется.
     Иначе, оно остаётся, как было. */
  if ( BalNumber == "47423" )
     Name = "Требование РКО " + clName;
  elif ( BalNumber == "47425" )
     Name = "РВП по РКО " + clName;
  end;
  

end;


/* EVG 14/12/2011 Функция выполняет поиск операциониста, вводившего первичный документ,
   который является родительским для документа, по которому выполняется оплата.
   Если не удалось найти, возвращает опера, который был до этого. */
macro FindParentDocOper( DefComID, CurOper )

  var query, rs;

  query = " Select pm.t_Oper " +
          "   From DSfDef_dbt sf, DOprOper_dbt op, DPmPaym_dbt pm " +
          "  Where sf.t_FeeType      = 3 "                                   // Ед. комиссия
          "    and sf.t_ID           = " + DefComID +
          "    and op.t_ID_Operation = sf.t_ID_Operation " +
          "    and pm.t_DocKind      = op.t_DocKind " +
          "    and pm.t_DocumentID   = lTrim( op.t_DocumentID, '0' ) ";
  rs = rsdRecordSet( query );
  if( rs and rs.moveNext() )
     return( rs.Value(0, null, V_INTEGER) );
  end;

  return CurOper;
end;
