/*
$Name:               ws_crpaym.mac
$Module:            РКО, ББ
$Description:      Интеграция 5.5 и V6
*/

import RCW, PaymInter, RSD, PSInter, OprInter, BankInter, InsCarryDoc, FIInter, oralib, likepy, "globals.mac", "ws_lib_fun.mac", "pmwsutils.mac";

macro DefineDocKind( bop: BOPaymentParm)
  if (bop.ShifrOper == "02")
    return 17;
  elif (bop.ShifrOper == "03")
    return 440;
  elif (bop.ShifrOper == "04")
    return 430;
  elif (bop.ShifrOper == "09")
    return 70;
  elif (bop.ShifrOper == "17")
    return 286;
  elif ((bop.BaseFIID == NATCUR) and (bop.PayerFIID == NATCUR) and (bop.ReceiverFIID == NATCUR))
    return 16;
  end;
  return 27;
end;

private macro find(arr, val)
  var i;
  for (i, arr)
    if (i == val)
      return true;
    end;
  end;
  return false;
end;

/*Сокращение связано с тем, что GenGetProp само сгенерит ошибку, если поле не найдено, поэтому лучше средствами RSL не искать*/
private macro CopyOneProp(ObjDst, ObjSrc, propName)
    GenSetProp(ObjDst, propName, GenGetProp(ObjSrc, propName));
    return 1;
onerror
  //гасим ошибки, так как нет возможности проверить доступность свойств на чтение и запись
  return 0;
end;

private macro CopyOnePropName(ObjDst, ObjSrc, newName, propName)
    GenSetProp(ObjDst, newName, GenGetProp(ObjSrc, propName));
    return 1;
onerror
  //гасим ошибки, так как нет возможности проверить доступность свойств на чтение и запись
  return 0;
end;

macro CopyObjectProps(ObjDst, ObjSrc)
  var props = GetObjProps(ObjSrc);
  var propName;
  var CopyCount = 0;
  for (propName, props)
    CopyCount = CopyCount + CopyOneProp(ObjDst, ObjSrc, propName);
  end;
  return CopyCount;
end;

macro CopyObjectParmToBOParmProps(ObjDst, ObjSrc)
  CopyObjectProps(ObjDst, ObjSrc);
  CopyOnePropName(ObjDst, ObjSrc, "TaxPmGround", "TaxPaymentGround");
  CopyOnePropName(ObjDst, ObjSrc, "TaxPmPeriod", "TaxPeriod");
  CopyOnePropName(ObjDst, ObjSrc, "TaxPmNumber", "TaxDocNumber");
  CopyOnePropName(ObjDst, ObjSrc, "TaxPmDate", "TaxDocDate");
  CopyOnePropName(ObjDst, ObjSrc, "TaxPmType", "TaxPaymentType");
end;

private macro CopyArrToRec(ObjDst, ObjSrc, Name, RecName)
  var props = GetObjProps(ObjSrc);
  var r: TRecHandler;
  var item, arr = GenGetProp(ObjDst, Name);
  if (find(props, Name))
    for (item, GenGetProp(ObjSrc, Name))
      r = TRecHandler(RecName);
      CopyObjectProps(r.rec, item);
      arr[arr.size] = r;
    end;
  end;
end;

private macro CopyBOPayment(bop: BOPaymentParm, obj)
  CopyObjectProps(bop, obj);
end;

macro CopyFromPayment(bop: BOPaymentParm, Payment)
  CopyObjectProps(bop, Payment);//копируем все что можно автоматом
  //Копируем поля, которые отличаются в названиях
  bop.Payment_Date = Payment.Date;
  bop.ReceiverCorrBankAccount = Payment.ReceiverBankCorrAcc;
  bop.ReceiverCorrBankCode = Payment.ReceiverBankCorrCode;
  bop.ReceiverCorrBankCodeKind = Payment.ReceiverBankCorrCodeKind;
  bop.ReceiverCorrBankName = Payment.ReceiverBankCorrName;
  bop.FuturePayerAccount = Payment.FuturePayerAccount;
  bop.FIID_FuturePayAcc = Payment.FuturePayerFIID;
  bop.FutureReceiverAccount = Payment.FutureReceiverAccount;
  bop.FIID_FutureRecAcc = Payment.FutureReceiverFIID;
  var list = PRT_Debet;
  if (Payment.PIList(PRT_Debet).Size == 0)
    list = PRT_Credit;
  end;
  bop.SetPmAddPI(Payment.PIList(list).AsTArray());
  bop.Accept = Payment.DemandAccept;
  bop.AcceptTerm = Payment.DemandAcceptTerm;
  bop.AcceptDate = Payment.DemandAcceptDate;
end;

macro CopyPayment(Payment, bop: BOPaymentParm, CopyUserFields: bool)
  CopyObjectProps(Payment, bop);//копируем все что можно автоматом
  //Копируем поля, которые отличаются в названиях
  Payment.Date = bop.Payment_Date;
  Payment.ReceiverBankCorrAcc = bop.ReceiverCorrBankAccount;
  Payment.ReceiverBankCorrCode = bop.ReceiverCorrBankCode;
  Payment.ReceiverBankCorrCodeKind = bop.ReceiverCorrBankCodeKind;
  Payment.ReceiverBankCorrName = bop.ReceiverCorrBankName;
  Payment.SetPayerPI(PAYMENTS_GROUP_UNDEF, 
                     bop.PayerBankID, 
                     bop.PayerBankCodeKind, 
                     bop.PayerBankCode, 
                     bop.PayerBankName, 
                     "", 
                     bop.PayerFIID, 
                     bop.Chapter, 
                     bop.PayerAccount, 
                     bop.Payer, 
                     bop.PayerName,
                     bop.PayerINN);
  Payment.SetReceiverPI(PAYMENTS_GROUP_UNDEF, 
                     bop.ReceiverBankID, 
                     bop.ReceiverBankCodeKind, 
                     bop.ReceiverBankCode, 
                     bop.ReceiverBankName, 
                     "", 
                     bop.ReceiverFIID, 
                     bop.Chapter, 
                     bop.ReceiverAccount, 
                     bop.Receiver, 
                     bop.ReceiverName,
                     bop.ReceiverINN);
  if ((bop.FuturePayerAccount != "") and (bop.FIID_FuturePayAcc != 0)) //Если установлен счет текущего плательщика, то после ПИ нужно его вернуть
    Payment.FuturePayerAccount = bop.FuturePayerAccount;
    Payment.FuturePayerFIID = bop.FIID_FuturePayAcc;
  end;
  if ((bop.FutureReceiverAccount != "") and (bop.FIID_FutureRecAcc != 0)) //Если установлен счет текущего получателя, то после ПИ нужно его вернуть
    Payment.FutureReceiverAccount = bop.FutureReceiverAccount;
    Payment.FutureReceiverFIID = bop.FIID_FutureRecAcc;
  end;
  if (bop.DocKind != 288/*DLDOC_VALTRORDER*/)
    var arr = bop.GetPmAddPI();
    var item;
    for (item, arr)
      Payment.PIList(item.rec.DebetCredit).Insert(item);
    end;
    arr = bop.GetCOProperties();
    for (item, arr)
      Payment.PmCO.Insert(item);
    end;
  end;
  bop.PaymentID = Payment.PaymentID;
end;

macro CreatePrimDoc(DocKind: integer, PaymentID: integer)
  if (ValType(PaymentID) == V_UNDEF)
    PaymentID = 0;
  end;
  if (DocKind == 260/*DLDOC_DEAL_5_50*/)
    return RsbDeal550Payment(PaymentID);
  elif (DocKind == 17/*DLDOC_BANKCLAIM*/)
    return RsbBankClaim(PaymentID);
  elif (DocKind == 286/*DLDOC_BANKORDER*/)
    return RsbBankOrder(PaymentID);
  elif (DocKind == 16/*DLDOC_BANKPAYMENT*/)
    return RsbBankPayment(PaymentID);
  elif (DocKind == 200/*PS_BUYCURORDER*/)
    return RsbBuyCurrencyOrder(PaymentID);
  elif (DocKind == 400/*CASH_BOF_ADDORDER*/)
    return RsbBBAddCashOrder(PaymentID);
  elif (DocKind == 410/*CASH_PS_INCORDER*/)
    return RsbPSInCashOrder(PaymentID);
  elif (DocKind == 420/*CASH_PS_OUTORDER*/)
    return RsbPSOutCashOrder(PaymentID);
  elif (DocKind == 430/*CASH_BOF_INCORDER*/)
    return RsbBBIncCashOrder(PaymentID);
  elif (DocKind == 440/*CASH_BOF_OUTORDER*/)
    return RsbBBOutCashOrder(PaymentID);
  elif (DocKind == 445/*DLDOC_INOUTORDER*/)
    return RsbBBInOutCashOrder(PaymentID);
  elif (DocKind == 202/*PS_CPORDER*/)
    return RsbPsCpOrder(PaymentID);
  elif (DocKind == 27/*BBANK_CPORDER*/)
    return RsbBbCpOrder(PaymentID);
  elif (DocKind == 70/*DLDOC_MEMORIALORDER*/)
    return RsbMemorialOrder(PaymentID);
  elif (DocKind == 15/*CB_MULTYDOC*/)
    return RsbMultyDoc(PaymentID);
  elif (DocKind == 201/*PS_PAYORDER*/)
    return RsbPSPayOrder(PaymentID);
  elif (DocKind == 288/*DLDOC_VALTRORDER*/)
    return RsbValueTransOrder(PaymentID);
  end;
  return NULL;
end;

macro CopyPrimDoc(PrimDoc, bop: BOPaymentParm)
  CopyObjectProps(PrimDoc, bop);//копируем все что можно автоматом
  if (bop.DocKind == DLDOC_DEAL_5_50)
    PrimDoc.PrimDocNotes.AddNote(NOTEKIND_DEAL5_50_CREATEDATE, bop.Deal5_50Date, {curdate});
    PrimDoc.PrimDocNotes.AddNote(NOTEKIND_DEAL5_50_ORIGIN, bop.Deal5_50Origin, {curdate});
    PrimDoc.PrimDocNotes.AddNote(NOTEKIND_DEAL5_50_TYPE, bop.Deal5_50Type, {curdate});
    PrimDoc.PrimDocNotes.AddNote(NOTEKIND_DEAL5_50_NAME, bop.Deal5_50Name, {curdate});
    PrimDoc.PrimDocNotes.AddNote(NOTEKIND_DEAL5_50_NOTE, bop.Deal5_50Note, {curdate});
  end;
  if ((bop.DocKind == 286) or
      (bop.DocKind == 288) or
      (bop.DocKind == 260))
    CopyPayment(PrimDoc, bop, true);
  else
    CopyPayment(PrimDoc.Payment, bop, true);
  end;
end;

macro InsertRBDocumentOpr(PaymentList: TArray, StartOperation: bool)
  if ((valType(PaymentList) == V_UNDEF) or (PaymentList.size() == 0))
    return 0;
  end;
  if (valType(StartOperation) == V_UNDEF)
    StartOperation = true;
  end;
  var numOper, stat;
  GetRegistryValue("COMMON\\ИНТЕГРАЦИЯ С 5.50\\PAYMENTS\\OPER", V_INTEGER, numOper, stat);
  if (stat)
    numOper = {oper};
  end;
  stat = 0;
  var pm, obj;
  for (pm, PaymentList)
    if ((pm.Origin == 30) or (pm.Origin == 31))
      pm.Oper = numOper;
    end;
    if (pm.DocKind == 0)
      pm.DocKind = DefineDocKind(pm);
    end;
    obj = CreatePrimDoc(pm.DocKind);
    CopyPrimDoc(obj, pm);
    obj.LaunchOper = StartOperation;
    obj.ConnectToOper = true;
  end;
  return stat;
end;

/*Все функции для работы вне шага операции*/
macro CreateBODoc(DocKind: integer)
  var Obj;
  if (DocKind == 17/*DLDOC_BANKCLAIM*/)
    return BOBankClaimParm();
  elif (DocKind == 286/*DLDOC_BANKORDER*/)
    return BOBankOrderParm();
  elif (DocKind == 16/*DLDOC_BANKPAYMENT*/)
    return BOBankPaymentParm();
  elif (DocKind == 200/*PS_BUYCURORDER*/)
    return BOBCOrderParm();
  elif ((DocKind == 400/*CASH_BOF_ADDORDER*/) or
        (DocKind == 410/*CASH_PS_INCORDER*/) or
        (DocKind == 420/*CASH_PS_OUTORDER*/) or
        (DocKind == 430/*CASH_BOF_INCORDER*/) or
        (DocKind == 440/*CASH_BOF_OUTORDER*/) or
        (DocKind == 445/*DLDOC_INOUTORDER*/))
    Obj = BOCashOrderParm();
  elif ((DocKind == 202/*PS_CPORDER*/) or
        (DocKind == 27/*BBANK_CPORDER*/))
    Obj = BOCurrencyPaymentParm();
  elif (DocKind == 70/*DLDOC_MEMORIALORDER*/)
    return BOMemorialOrderParm();
  elif (DocKind == 15/*CB_MULTYDOC*/)
    return BOMultyDocParm();
  elif (DocKind == 201/*PS_PAYORDER*/)
    return BOPSPayOrderParm();
  elif (DocKind == 288/*DLDOC_VALTRORDER*/)
    return BOTransferOrderParm();
  else
    return NULL;
  end;
  Obj.DocKind = DocKind;
  return Obj;
end;

macro InsertBODoc( bop: Object, DocKind: integer, MinPhase:Integer,  MaxPhase:Integer, CheckPhase:Integer, ContextID:String , CheckTerrorOnUpdate:Integer)
  if (DocKind == 17/*DLDOC_BANKCLAIM*/)
    return InsertBOBankClaim(bop, MinPhase, MaxPhase, CheckPhase, ContextID, CheckTerrorOnUpdate);
  elif (DocKind == 286/*DLDOC_BANKORDER*/)
    return InsertBOBankOrder(bop, MinPhase, MaxPhase, CheckPhase, ContextID, CheckTerrorOnUpdate);
  elif (DocKind == 16/*DLDOC_BANKPAYMENT*/)
    return InsertBOBankPayment(bop, MinPhase, MaxPhase, CheckPhase, ContextID, CheckTerrorOnUpdate);
  elif (DocKind == 200/*PS_BUYCURORDER*/)
    return InsertBOBCOrder(bop, MinPhase, MaxPhase, CheckPhase, ContextID, CheckTerrorOnUpdate);
  elif ((DocKind == 400/*CASH_BOF_ADDORDER*/) or
        (DocKind == 410/*CASH_PS_INCORDER*/) or
        (DocKind == 420/*CASH_PS_OUTORDER*/) or
        (DocKind == 430/*CASH_BOF_INCORDER*/) or
        (DocKind == 440/*CASH_BOF_OUTORDER*/) or
        (DocKind == 445/*DLDOC_INOUTORDER*/))
    return InsertBOCashOrder(bop, MinPhase, MaxPhase, CheckPhase, ContextID, CheckTerrorOnUpdate);
  elif ((DocKind == 202/*PS_CPORDER*/) or
        (DocKind == 27/*BBANK_CPORDER*/))
    return InsertBOCurrencyPayment(bop, MinPhase, MaxPhase, CheckPhase, ContextID, CheckTerrorOnUpdate);
  elif (DocKind == 70/*DLDOC_MEMORIALORDER*/)
    return InsertBOMemorialOrder(bop, MinPhase, MaxPhase, CheckPhase, ContextID, CheckTerrorOnUpdate);
  elif (DocKind == 15/*CB_MULTYDOC*/)
    return InsertBOMultyDoc(bop, MinPhase, MaxPhase, CheckPhase, ContextID, CheckTerrorOnUpdate);
  elif (DocKind == 201/*PS_PAYORDER*/)
    return InsertBOPSPayOrder(bop, MinPhase, MaxPhase, CheckPhase, ContextID, CheckTerrorOnUpdate);
  elif (DocKind == 288/*DLDOC_VALTRORDER*/)
    return InsertBOTransferOrder(bop, MinPhase, MaxPhase, CheckPhase, ContextID, CheckTerrorOnUpdate);
  else
    return 1;
  end;
end;

macro UpdateBODoc( PaymentID: integer, bop: Object, DocKind: integer, MinPhase:Integer,  MaxPhase:Integer, CheckPhase:Integer, ContextID:String , CheckTerrorOnUpdate:Integer)
  if (DocKind == 17/*DLDOC_BANKCLAIM*/)
    return UpdateBOBankClaim(PaymentID, bop, MinPhase, MaxPhase, CheckPhase, ContextID, CheckTerrorOnUpdate);
  elif (DocKind == 286/*DLDOC_BANKORDER*/)
    return UpdateBOBankOrder(PaymentID, bop, MinPhase, MaxPhase, CheckPhase, ContextID, CheckTerrorOnUpdate);
  elif (DocKind == 16/*DLDOC_BANKPAYMENT*/)
    return UpdateBOBankPayment(PaymentID, bop, MinPhase, MaxPhase, CheckPhase, ContextID, CheckTerrorOnUpdate);
  elif (DocKind == 200/*PS_BUYCURORDER*/)
    return UpdateBOBCOrder(PaymentID, bop, MinPhase, MaxPhase, CheckPhase, ContextID, CheckTerrorOnUpdate);
  elif ((DocKind == 400/*CASH_BOF_ADDORDER*/) or
        (DocKind == 410/*CASH_PS_INCORDER*/) or
        (DocKind == 420/*CASH_PS_OUTORDER*/) or
        (DocKind == 430/*CASH_BOF_INCORDER*/) or
        (DocKind == 440/*CASH_BOF_OUTORDER*/) or
        (DocKind == 445/*DLDOC_INOUTORDER*/))
    return UpdateBOCashOrder(PaymentID, bop, MinPhase, MaxPhase, CheckPhase, ContextID, CheckTerrorOnUpdate);
  elif ((DocKind == 202/*PS_CPORDER*/) or
        (DocKind == 27/*BBANK_CPORDER*/))
    return UpdateBOCurrencyPayment(PaymentID, bop, MinPhase, MaxPhase, CheckPhase, ContextID, CheckTerrorOnUpdate);
  elif (DocKind == 70/*DLDOC_MEMORIALORDER*/)
    return UpdateBOMemorialOrder(PaymentID, bop, MinPhase, MaxPhase, CheckPhase, ContextID, CheckTerrorOnUpdate);
  elif (DocKind == 15/*CB_MULTYDOC*/)
    return UpdateBOMultyDoc(PaymentID, bop, MinPhase, MaxPhase, CheckPhase, ContextID, CheckTerrorOnUpdate);
  elif (DocKind == 201/*PS_PAYORDER*/)
    return UpdateBOPSPayOrder(PaymentID, bop, MinPhase, MaxPhase, CheckPhase, ContextID, CheckTerrorOnUpdate);
  elif (DocKind == 288/*DLDOC_VALTRORDER*/)
    return UpdateBOTransferOrder(PaymentID, bop, MinPhase, MaxPhase, CheckPhase, ContextID, CheckTerrorOnUpdate);
  else
    return 1;
  end;
end;

macro FindBODoc( PaymentID: integer, DocKind: integer)
  if (DocKind == 17/*DLDOC_BANKCLAIM*/)
    return FindBOBankClaim(PaymentID);
  elif (DocKind == 286/*DLDOC_BANKORDER*/)
    return FindBOBankOrder(PaymentID);
  elif (DocKind == 16/*DLDOC_BANKPAYMENT*/)
    return FindBOBankPayment(PaymentID);
  elif (DocKind == 200/*PS_BUYCURORDER*/)
    return FindBOBCOrder(PaymentID);
  elif ((DocKind == 400/*CASH_BOF_ADDORDER*/) or
        (DocKind == 410/*CASH_PS_INCORDER*/) or
        (DocKind == 420/*CASH_PS_OUTORDER*/) or
        (DocKind == 430/*CASH_BOF_INCORDER*/) or
        (DocKind == 440/*CASH_BOF_OUTORDER*/) or
        (DocKind == 445/*DLDOC_INOUTORDER*/))
    return FindBOCashOrder(PaymentID, DocKind);
  elif ((DocKind == 202/*PS_CPORDER*/) or
        (DocKind == 27/*BBANK_CPORDER*/))
    return FindBOCurrencyPayment(PaymentID, DocKind);
  elif (DocKind == 70/*DLDOC_MEMORIALORDER*/)
    return FindBOMemorialOrder(PaymentID);
  elif (DocKind == 15/*CB_MULTYDOC*/)
    return FindBOMultyDoc(PaymentID);
  elif (DocKind == 201/*PS_PAYORDER*/)
    return FindBOPSPayOrder(PaymentID);
  elif (DocKind == 288/*DLDOC_VALTRORDER*/)
    return FindBOTransferOrder(PaymentID);
  end;
  return NULL;
end;

macro FindBOPayment( PaymentID: integer )
  var rs = execSQLSelect("select t_DocKind, t_FIID from dpmpaym_dbt where t_PaymentID = ?", makeArray(SQLParam("", PaymentID)));
  if (rs.moveNext())
    var DocKind = rs.value(0);
    var Doc = FindBODoc(PaymentID, DocKind);
    var Result = BOPaymentParm();
    var obj;
    if (DocKind == 260/*DLDOC_DEAL_5_50*/)
      obj = RsbDeal550Payment(PaymentID);
      obj.FillBuffersForBO( Result );
    elif ((DocKind == 320) or (DocKind == 322))
      obj = RsbPayment(PaymentID);
      CopyFromPayment(Result, obj); 
    else
      if (valType(Doc) == V_UNDEF)
        return NULL;
      else   
        CopyObjectParmToBOParmProps(Result, Doc);
        /*VDN Принудительное изменение вида платежа*/
        if (Result.DocKind != DocKind) Result.DocKind = DocKind; end;
        /*VDN 16.01.2015 Изменение кода валюты платежа - при инициализации поле PayerFiid не перезаполняется*/
        Result.PayerFiid = rs.value(1); 
        if (DocKind != 288/*DLDOC_VALTRORDER*/)
          Result.SetPmAddPI(Doc.GetPmAddPI());
          Result.SetCOProperties(Doc.GetCOProperties());
        end;
        if ((DocKind == 400/*CASH_BOF_ADDORDER*/) or
            (DocKind == 410/*CASH_PS_INCORDER*/) or
            (DocKind == 420/*CASH_PS_OUTORDER*/) or
            (DocKind == 430/*CASH_BOF_INCORDER*/) or
            (DocKind == 440/*CASH_BOF_OUTORDER*/) or
            (DocKind == 445/*DLDOC_INOUTORDER*/) or
            (DocKind == 286/*DLDOC_BANKORDER*/))
          Result.SetCashSymbols(Doc.GetCashSymbols());
        end;
      end;
    end;
    return Result;
  end;
  return NULL;
end;

macro InsertBOPayment( bop: BOPaymentParm, MinPhase:Integer,  MaxPhase:Integer, CheckPhase:Bool, ContextID:String, Sign: ExternalSign, CheckTerrorOnUpdate:Integer)
  if (valType(CheckTerrorOnUpdate) == V_UNDEF)
    CheckTerrorOnUpdate = 0;
  end;
  if (bop.DocKind == 0)
    bop.DocKind = DefineDocKind(bop);
  end;
  var doc;
  var stat = 0;
  if (bop.DocKind == 260/**/)
    var obj = RsbDeal550Payment();
    /*if (bop.FuturePayerAccount == "")
      bop.FuturePayerAccount = bop.PayerAccount;
    end;
    if (bop.FutureReceiverAccount == "")
      bop.FutureReceiverAccount = bop.ReceiverAccount;
    end; */
    CopyPrimDoc(obj, bop);
    /*stat = obj.FillDocumentFromBO(bop);*/
    if(stat == 0)
      stat = obj.CheckMacro(2);
      if (stat == 0)
        obj.CheckTerrorOnUpdate = CheckTerrorOnUpdate;
        obj.CryptoAction( ContextID, Sign );
        stat = obj.Insert(bop.BOAction, bop.BOCode, bop.BOStartDate, MinPhase, MaxPhase, CheckPhase, bop.ID_Operation);
        if (stat == 0)
          bop.PaymentID = obj.PaymentID;
          obj.Actuate();
          var paymtr = obj.MakeTransaction();
          paymtr.Chapter         = obj.Chapter;
          paymtr.Date_Carry      = obj.ValueDate;
          paymtr.ResultCarry     = bop.Result_Carry;
          if( not paymtr.Carry )
            //MemoryError(NULL, "Ошибка при актуализации платежа");
            return 1;
          end;
        end;
      end;
    end;
  else
    doc = CreateBODoc(bop.DocKind);
    if (valType(doc) == V_UNDEF)
      MemoryError(NULL, "Вид документа не поддерживается в Расчетном банке");
      return 1;
    end;
    CopyObjectProps(doc, bop);
    doc.Date = bop.Payment_Date;
    if (bop.DocKind != 288/*DLDOC_VALTRORDER*/)
      doc.SetPmAddPI(bop.GetPmAddPI());
      doc.SetCOProperties(bop.GetCOProperties());
    end;
    stat = InsertBODoc(doc, bop.DocKind, MinPhase, MaxPhase, CheckPhase, ContextID, CheckTerrorOnUpdate);
    bop.PaymentID = doc.PaymentID;
  end;
  return stat;
end;

macro UpdateBOPayment( PaymentID:Integer, bop: BOPaymentParm, MinPhase:Integer,  MaxPhase:Integer, CheckPhase:Bool, ContextID:String, Sign: ExternalSign, CheckTerrorOnUpdate:Integer)
  if (valType(CheckTerrorOnUpdate) == V_UNDEF)
    CheckTerrorOnUpdate = 0;
  end;
  if (bop.DocKind == 0)
    bop.DocKind = DefineDocKind(bop);
  end;
  var doc;
  var stat = 0;
  if (bop.DocKind == 260/**/)
    var obj = RsbDeal550Payment(PaymentID);
    if (bop.FuturePayerAccount == "")
      bop.FuturePayerAccount = bop.PayerAccount;
    end;
    if (bop.FutureReceiverAccount == "")
      bop.FutureReceiverAccount = bop.ReceiverAccount;
    end;
    stat = obj.FillDocumentFromBO(bop);
    if (stat == 0)
      stat = obj.CheckMacro(3);
      if ((stat == 0) and CheckPhase)
        stat = obj.CheckPhases(MinPhase, MaxPhase);
      end;
      if (stat == 0)
        obj.CheckTerrorOnUpdate = CheckTerrorOnUpdate;
        obj.CryptoAction( ContextID, Sign );
        stat = obj.Update();
        if (stat == 0)
          bop.PaymentID = PaymentID;
        end;
      end;
    end;
  else
    doc = CreateBODoc(bop.DocKind);
    if (valType(doc) == V_UNDEF)
      MemoryError(NULL, "Вид документа не поддерживается в Расчетном банке");
      return 1;
    end;
    CopyObjectProps(doc, bop);
    doc.Date = bop.Payment_Date;
    if (bop.DocKind != 288/*DLDOC_VALTRORDER*/)
      doc.SetPmAddPI(bop.GetPmAddPI());
      doc.SetCOProperties(bop.GetCOProperties());
    end;
    stat = UpdateBODoc(bop.PaymentID, doc, bop.DocKind, MinPhase, MaxPhase, CheckPhase, ContextID, CheckTerrorOnUpdate);
  end;
  return stat;
end;

macro DeleteBOPayment( PaymentID:Integer )
  var rs = execSQLSelect("select t_DocKind from dpmpaym_dbt where t_PaymentID = ?", makeArray(SQLParam("", PaymentID)));
  var stat = 0;
  if (rs.moveNext())
    var DocKind = rs.values(0);
    if (DocKind == 260/*DLDOC_DEAL_5_50*/)
      var obj = RsbDeal550Payment(PaymentID);
      stat = obj.CheckMacro(1);
      if (stat == 0)
        stat = obj.Delete();
      end;
    elif (DocKind == 17/*DLDOC_BANKCLAIM*/)
      stat = DeleteBOBankClaim(PaymentID);
    elif (DocKind == 286/*DLDOC_BANKORDER*/)
      stat = DeleteBOBankOrder(PaymentID);
    elif (DocKind == 16/*DLDOC_BANKPAYMENT*/)
      stat = DeleteBOBankPayment(PaymentID);
    elif (DocKind == 200/*PS_BUYCURORDER*/)
      stat = DeleteBOBCOrder(PaymentID);
    elif ((DocKind == 400/*CASH_BOF_ADDORDER*/) or
          (DocKind == 410/*CASH_PS_INCORDER*/) or
          (DocKind == 420/*CASH_PS_OUTORDER*/) or
          (DocKind == 430/*CASH_BOF_INCORDER*/) or
          (DocKind == 440/*CASH_BOF_OUTORDER*/) or
          (DocKind == 445/*DLDOC_INOUTORDER*/))
      stat = DeleteBOCashOrder(PaymentID, DocKind);
    elif ((DocKind == 202/*PS_CPORDER*/) or
          (DocKind == 27/*BBANK_CPORDER*/))
      stat = DeleteBOCurrencyPayment(PaymentID, DocKind);
    elif (DocKind == 70/*DLDOC_MEMORIALORDER*/)
      stat = DeleteBOMemorialOrder(PaymentID);
    elif (DocKind == 15/*CB_MULTYDOC*/)
      stat = DeleteBOMultyDoc(PaymentID);
    elif (DocKind == 201/*PS_PAYORDER*/)
      stat = DeleteBOPSPayOrder(PaymentID);
    elif (DocKind == 288/*DLDOC_VALTRORDER*/)
      stat = DeleteBOTransferOrder(PaymentID);
    else
      MemoryError(NULL, "Вид документа не поддерживается в Расчетном банке");
      stat = 1;
    end;
  end;
  return stat;
end;

macro InsertRBDocument(PaymentList, StartOperation: bool)
  if ((valType(PaymentList) == V_UNDEF) or (PaymentList.size() == 0))
    return;
  end;
  if (valType(StartOperation) == V_UNDEF)
    StartOperation = true;
  end;
  var numOper, stat;
  GetRegistryValue("COMMON\\ИНТЕГРАЦИЯ С 5.50\\PAYMENTS\\OPER", V_INTEGER, numOper, stat);
  if (stat)
    numOper = {oper};
  end;
  stat = 0;
  var item, obj;
  var pm = BOPaymentParm();
  for (item, PaymentList)
    CopyBOPayment(pm, item);
    if ((pm.Origin == 30) or (pm.Origin == 31))
      pm.Oper = numOper;
    end;
    if (pm.DocKind == 0)
      pm.DocKind = DefineDocKind(pm);
    end;
    stat = InsertBOPayment(pm);
    if(stat == 0)
      if(pm.DocKind == 260)
        stat = Deal_ExecuteOperation(pm.PaymentID);
      elif(StartOperation)
        stat = PM_ExecuteOperation(pm.PaymentID, pm.DocKind);
      end;
    end;
  end;
  GenerateError(stat);
end;

macro CloseDeal_5_50(DealID: integer)
  var rs = execSQLSelect("select t_PaymStatus from dpmpaym_dbt where t_PaymentID = ? and t_DocKind = 260", makeArray(SQLParam("", DealID)));
  var stat = 0;
  if (rs.moveNext())
    if (rs.value(0) == PM_REJECTED)
      stat = Deal_ExecuteOperation(DealID, "R", NULL, NULL, 1);
      if (stat)
        return stat;
      end;
    end;
    stat = Deal_ExecuteOperation(DealID, "S", NULL, true);
  else
    RunError("Невозможно создать документ(ы) сделки. Не найдена сделка");
  end;
  GenerateError(stat);
end;

macro AddDocumentToDeal_5_50(DealID: integer, PaymentList, FinishDeal: bool)
  var rs = execSQLSelect("select t_PaymStatus from dpmpaym_dbt where t_PaymentID = ?", makeArray(SQLParam("", DealID)));
  var stat = 0;
  if (rs.moveNext())
    if (rs.value(0) == PM_REJECTED)
      stat = Deal_ExecuteOperation(DealID, "R", NULL, NULL, 1);
      if (stat)
        return stat;
      end;
    end;
    var numOper;
    GetRegistryValue("COMMON\\ИНТЕГРАЦИЯ С 5.50\\PAYMENTS\\OPER", V_INTEGER, numOper, stat);
    if (stat)
      numOper = {oper};
    end;
    var item;
    var List = TArray;
    //копируем из НЕХ в нормальный массив, создавая нормальные объекты
    for (item, PaymentList)
      List[List.size] = BOPaymentParm();
      CopyBOPayment(List[List.size - 1], item);
      List[List.size - 1].Oper = numOper;
    end;
    if ( stat == 0 )
      stat = Deal_ExecuteOperation(DealID, "S", List, FinishDeal);
    end;
  else
    RunError("Невозможно создать документ(ы) сделки. Не найдена сделка");
  end;
  GenerateError(stat);
end;

macro CreateDeal_5_50(pm)
  var Payment = BOPaymentParm();
  CopyBOPayment(Payment, pm);
  Payment.DocKind = DLDOC_DEAL_5_50;
  var stat = InsertBOPayment(Payment);
  if (stat == 0)
    stat = Deal_ExecuteOperation(Payment.PaymentID); //запуск операции
  end;
  GenerateError(stat);
  return Payment.PaymentID;
end;
