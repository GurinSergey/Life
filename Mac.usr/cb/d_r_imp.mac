//--------------------------------------------------------------------------------------------------
// @fname  : d_r_imp.mac 
// @desc   : процедура списания доходов-расходов. Процедуры
// @changes: 28.12.2011 vihrov C-8028
//           17.02.2012 vihrov I-00154847-2
//           14.01.2012 GSP R-142533-3 добавил условие для банка "Пойдем" по формированию счета зачисления.
//           16.01.2012 zip_z. починил обработчик панели
//--------------------------------------------------------------------------------------------------
// KS 26.11.2013 Адаптация под 31ю сборку

import BankInter, OprInter, globals, CTInter, InsCarryDoc, PTInter, FIInter; //distr1
import rsd, oralib, likepy, lib_lang, fg_life_parm;   //GSP добавил fg_life_parm

record dr(dr_docs ,"userop.def");
file acc("account" ) key 0;
file bal("balance") key 0;
file p(person);
file dep(dp_dep);
record dpan(RD_DOC ,"userop.lbr") dialog;

const 
  КатегорияДляОтчетности   = 1,
  ВидПДДоходыРасходы       = 5010,
  ВидОперацииДоходыРасходы = 5500;

var AccSymbolsForm102;

const
  Входящий = "Входящий"
 ,Исходящий = "Исходящий";

const
  ТипВходящий = 1
 ,ТипИсходящий = 2;

/*
 * Получить субъекта для филиала
 */
macro GetDprtParty(Department)
  dep.Code = Department;
  if(GetEQ(dep))
    return dep.PartyID;
  end;
  return {OurBank};
end;

/*
 * Получить сотрудника с правом второй подписи
 */
macro GetDprtSecondPerson(Department)
  var select:string;
  var params:TArray;
  var rs:object;
  var OperID = 0;

  select = "SELECT prsn.t_oper " +
           "  FROM dperson_dbt prsn " +
           " WHERE prsn.t_codedepart = :codedepart " +
           "   AND prsn.t_partyid IN ( " +
           "          SELECT offcr.t_personid " +
           "            FROM dofficer_dbt offcr " +
           "           WHERE offcr.t_partyid IN (SELECT dp.t_partyid " +
           "                                       FROM ddp_dep_dbt dp " +
           "                                      WHERE dp.t_code = prsn.t_codedepart) " +
           "             AND offcr.t_issecondperson = CHR (88)) ";

  params = makeArray( SQLParam(":codedepart", Department ));
        
  rs = execSQLselect( select, params, false );
        
  if(rs.moveNext())
    OperID = rs.value(0);
  end;

  return OperID;
end;

/*
 * Проверка существования балансового счета
 */
macro CheckBalanceQuiet(Balance, Required, Quiet)
  var stat = false;
  
  if((strlen(Balance) == 3) or (strlen(Balance) == 5))
    bal.Chapter  = ternary(substr(Balance,1,1)=="9",4,1);
    bal.iNumPlan = 0;
    bal.Balance = Balance;
    if( GetEQ(bal) )
      stat = true;
    else
      stat = false;
    end;

  elif((strlen(Balance) == 0) and (not Required))
    stat = true;
  
  elif((strlen(Balance) == 0) and (Required))
    stat = false;
  end;

  if((not stat) and (not Quiet)) msgbox("Введен неправильный номер балансового счета"); end;
  
  return stat;
end;

macro CheckBalance(Balance, Required)
  return CheckBalanceQuiet(Balance, Required, false);
end;

/* 
 * Получить значение категории для счета 
 */
macro CheckAccountCategory( accRec, GroupID : integer, Code : string, Num : string, DateCategory : date ) : bool
  var NumExists : bool;
  var stat : bool;
  stat = CheckObjAttrPresence(NumExists, OBJTYPE_ACCOUNT, UniID(accRec, OBJTYPE_ACCOUNT), GroupID, null, Code, Num, null);
  if(stat)
    return NumExists;
  end;
  return stat;
end;

/* 
 * Установить значение категории для счета на шаге операции
 */
macro SetAccountCategory( accRec, Autokey, GroupID, Num )
  var AccountID; 
  
  if(Autokey)
    AccountID = Autokey;
  else
    AccountID = UniID(accRec, OBJTYPE_ACCOUNT);
  end;
  
  return ConnectCategory(OBJTYPE_ACCOUNT, GroupID, AccountID, true, null, "", Num);
end;

/*
 * Определить и установить число знаков символа в счете
 */
macro SetAccSymbolsForm102()
  GetRegistryValue( "REPTREG\\REP_GROUPS\\ФОРМА 102\\ЧИСЛО ЗНАКОВ СИМВОЛА В СЧЕТЕ", V_INTEGER, AccSymbolsForm102, null );
end;

/*
 * Определить счет зачисления
 */
macro GetAccountTo(accRec, CurrencyTo : @INTEGER)
  var Account, AccBalance, AccCurrency, AccKey, AccDepartment, AccLastSymb, CatValueNum, BIC_Code;
  private var fgBank;
  record fi( "fininstr.dbt", "bank.def" );
  AccCurrency = "810";
  AccKey      = "0";
  fgBank = fg_life_subject({OurBank});

  if(strlen(dr.AccountTo) > 0)
    if(dr.CurrencyTo != ALLFININSTR)
        CurrencyTo = dr.CurrencyTo;
    else
        CurrencyTo = accRec.Code_Currency;
    end;
    return dr.AccountTo;
  else
    if(strlen(dr.BalanceTo) == 3)
      AccBalance = dr.BalanceTo;
      AccBalance = AccBalance + substr(accRec.Account, 4, 2);

    elif(strlen(dr.BalanceTo) == 5)
      AccBalance = dr.BalanceTo;

    end;
  end;

  CurrencyTo = accRec.Code_Currency;
// CurrencyTo = 0;
  if( ПолучитьФинИн( CurrencyTo, fi ) == 0 )
     AccCurrency = fi.CodeInAccount;
  end;

  if(dr.IsDepSave == "X")
    AccDepartment = substr(accRec.Account, 10, 4);
  else
    AccDepartment = "0000";
  end;

  if(dr.LastChar == 1)
    AccLastSymb = substr(accRec.Account, 14, 7);
  else
    AccLastSymb = substr(accRec.Account, 14, AccSymbolsForm102);

    /*Дополнить недостающие символы нулями*/
    while(strlen(AccLastSymb) < 6)
      AccLastSymb = AccLastSymb + "0";
    end;

    /*Последний символ зависит от категории на счете списания*/
    if(accRec.Code_Currency == NATCUR)
      if (fgBank.is_Go)                                                                      //GSP по R-142533-3
        AccLastSymb = AccLastSymb + "1";
      else
        if(CheckAccountCategory( accRec, КатегорияДляОтчетности, "", "V", dr.Date_Carry ))
          AccLastSymb = AccLastSymb + "1";
        else
          AccLastSymb = AccLastSymb + "0";
        end;
      end;
    else 
      if (fgBank.is_Go)
        AccLastSymb = AccLastSymb + "1";
      else
        AccLastSymb = AccLastSymb + "0";
      end;
    end;

  end;

  Account = AccBalance + AccCurrency + AccKey + AccDepartment + AccLastSymb;
  if(not CB_GetDprtPartyCode(accRec.Department, PTCK_BIC, BIC_Code))
    Account = GetKey(Account, BIC_Code);
  else
    Account = GetKey(Account);
  end;
  return Account;
end;

/* 
 * Получить буфер счета 
 */
macro GetAccountRecord( accRec, Chapter, Account, Code_Currency )
  acc.Chapter       = Chapter;
  acc.Account       = Account;
  acc.Code_Currency = Code_Currency;
  if( getEQ( acc ) )
    Copy( accRec, acc );
    return true;
  end;
  return false;
end;

/* 
 * Получить вид счета А/П
 */
macro GetKindAccount( Balance )
  bal.Chapter  = 1;
  bal.iNumPlan = 0;
  bal.Balance  = Balance;
  if( getEQ( bal ) )
    return bal.Kind_Account;
  end;
  return "";
end;

macro CheckOpenAccount(Account, Currency)
  acc.Account = Account;
  acc.Chapter = 1;
  acc.Code_Currency = Currency;
  if(( GetEQ(acc) ) and 
    (( acc.Open_Close == "" ) or ( acc.Open_Close == " " )))
    return true;
  else
    return false;
  end;
end;

macro CheckAccount(Account, Balance, Currency)
  var stat = true;

  var select:string;
  var params:TArray;
  var rs:object;

  if(strlen(Account))
    if(strlen(Balance))
      select = "SELECT 1 " +
               "  FROM daccblnc_dbt accblnc " +
               " WHERE accblnc.t_Account = :Account " +
               "   AND accblnc.t_Code_Currency = :Currency " +
               "   AND accblnc.t_Chapter = :Chapter " +
               "   AND accblnc.t_Balance0 = :Balance ";
      
      params = makeArray( SQLParam(":Account", Account)
                         ,SQLParam(":Currency", Currency)
                         ,SQLParam(":Chapter", 1)
                         ,SQLParam(":Balance", Balance));
            
      rs = execSQLselect( select, params, false );
            
      if(not rs.moveNext())
        stat = false;
      end;
    end;
    
    if(stat)
      select = "SELECT acc.t_Open_Close " +
               "  FROM daccount_dbt acc " +
               " WHERE acc.t_Account = :Account " +
               "   AND acc.t_Code_Currency = :Currency " +
               "   AND acc.t_Chapter = :Chapter ";
      
      params = makeArray( SQLParam(":Account", Account)
                         ,SQLParam(":Currency", Currency)
                         ,SQLParam(":Chapter", 1));
            
      rs = execSQLselect( select, params, false );
            
      if(rs.moveNext() and (( rs.value(0) == "" ) or ( rs.value(0) == " " )))
        stat = true;
      else
        stat = false;
      end;
    end;
  end;

  if(not stat) msgbox("Введен неправильный номер лицевого счета"); end;
  
  return stat;
end;

macro CheckNameOper(Oper)
  p.Oper = Oper;
  if(not GetEQ(p))
    return "<Операционист не найден>";
  else
    return p.Name;
  end;
end;

macro CheckNameDepartment(Department)
  if(Department == 0)
    return "Bсе филиалы";
  else
    dep.Code = Department;
    if(not GetEQ(dep))
      return "<Филиал не найден>";
    else
      return dep.Name;
    end;
  end;
end;
