/*----------------------------------------------------------------------------*/
/* Элементарные функции для выполнения SQL-команд                             */
/*----------------------------------------------------------------------------*/

import rsd, rsberror;

// параметр для параметризованного запроса
CLASS SQLParam( _name:string, _value:variant, _type:integer )
  var name :string  = _name, 
      value:variant = _value,
      type : integer;
  if( _type == NULL )
    _type = RSDBP_IN;
  end;
  type = _type;
END;

// получить строку ошибок RSD
MACRO getRSDErrorsString( cmd:RsdCommand ):string
  var i:integer = 0;
  var err_text:string = "";
  var delim:string="";

  if( cmd and cmd.connection and cmd.connection.environment )
    while( i < cmd.connection.environment.ErrorCount )
      err_text = err_text + delim + cmd.connection.environment.error(i).descr;
      i = i + 1;
      delim = "\n";
    end;
  end;
  return err_text;
END;

// добавление параметров в параметрический запрос
PRIVATE MACRO addParams( sqlcmd:RsdCommand, params:TArray )
  var i:integer = 0;
  var param:SQLParam = NULL;
  while( params AND (i < params.size) )
    param = params.value(i);
    sqlcmd.addParam( param.name, param.type, param.value );
    i = i + 1;
  end;
END;

// выполнить SQL-команду, не возвращающую record set
//   sqltext - текст команды
//   params  - параметры для параметризованного запроса (SQLParam)
//   throw   - возбуждать ли исключение (по умолчанию возбуждается)
// при успешном выполнении возвращает объект RsdCommand, иначе NULL или возбуждается исключение (по умолчанию)
MACRO execSQL( sqltext:string, params:TArray, throw:bool ):RsdCommand
  var cmd:RsdCommand = RsdCommand( sqltext );
  cmd.NullConversion = true;
  addParams( cmd, params );
  cmd.execute();
  return cmd;
ONERROR(x)
  if( (throw==NULL) OR throw )
    RsbThrow( getRSDErrorsString( cmd ) );
  else
    return NULL;
  end;
END;

// выполнить SQL-команду, возвращающую record set
//   sqltext     - текст команды
//   params      - параметры для параметризованного запроса (SQLParam)
//   throw       - возбуждать ли исключение (по умолчанию возбуждается)
//   crsLocation - местоположение курсора (RSDVAL_SERVER, RSDVAL_CLIENT, RSDVAL_CLIENT_IF_NEEDED)
//   crsType     - тип курсора (RSDVAL_STATIC, RSDVAL_DYNAMIC, RSDVAL_FORVARD_ONLY, RSDVAL_KEYSET_DRIVEN)
// при успешном выполнении возвращает объект RsdRecordset, иначе NULL или возбуждается исключение (по умолчанию)
MACRO execSQLselect( sqltext:string, params:TArray, throw:bool, crsLocation:integer, crsType:integer ):RsdRecordset
  var cmd:RsdCommand = RsdCommand( sqltext );
  cmd.NullConversion = true;
  addParams( cmd, params );
  cmd.execute();
  var rs:RsdRecordset = RsdRecordset( cmd, crsLocation, crsType );
  rs.open();
  return rs;
ONERROR(x)
  if( (throw==NULL) OR throw )
    RsbThrow( getRSDErrorsString( cmd ) );
  else
    return NULL;
  end;
END;

// выполнить SQL-процедуру
//   procname    - имя процедуры
//   retvaltype  - возвращаемое значение процедуры (V_UNDEF если ничего не возращает)
//   params      - параметры для параметризованного запроса (SQLParam)
// при успешном выполнении возвращает NULL (или значение, возвращаемое процедурой), иначе возбуждается исключение (по умолчанию)
// в params для рараметров RSDBP_OUT в value вернутся значения
MACRO execStoredFunc( procname:string, retvaltype:integer, params:TArray ):variant
  var sqltext = "";
  var i:integer = 0;
  var param:TArray = TArray(), sqlp:SQLParam = NULL;
  
  if( retvaltype != V_UNDEF )
    sqltext = "? := "
  end;
  sqltext = "begin " + sqltext + procname + "(";

  while( params AND (i < params.size) )
    sqltext = sqltext + "?";
    if( ((i+1) < params.size) )
      sqltext = sqltext + ", ";
    end;
    i = i + 1;
  end;
  sqltext = sqltext + "); end;";

  if( retvaltype != V_UNDEF )
    param.value(param.size) = SQLParam("retval", retvaltype, RSDBP_RETVAL);
  end;

  i = 0;
  while( params AND (i < params.size) )
    param.value(param.size) = params.value(i);
    i = i + 1;
  end;

  var cmd:RsdCommand = execSQL( sqltext, param, true );

  if( cmd != NULL )
    i = 0;
    while( params AND (i < params.size) )
      if( (params.value(i).type == RSDBP_OUT) or (params.value(i).type == RSDBP_IN_OUT) )
        if( retvaltype != V_UNDEF )
          params.value(i).value = cmd.value(i+1);
        else
          params.value(i).value = cmd.value(i);
        end;
      end;
      i = i + 1;
    end;

    if( retvaltype != V_UNDEF )
      return cmd.value(0);
    else
      return NULL;
    end;
  else
    return NULL;
  end;
END;

// преобразовать дату из SQL-формата в RSL-формат
MACRO sqlDate2date( sqlDate:variant ):date
  var dt:date;
  DtTmSplit( sqlDate, dt );
  if(dt == NULL)
    dt = date(0,0,0);
  end;
  return dt;
END;

// Проверить существование выборки
//   sqltext - текст команды
//   params  - параметры для параметризованного запроса (SQLParam)
MACRO existsSQLselect( sqltext:string, params:TArray ):bool
  var rs:RsdRecordset = execSQLselect( string( "select 1 from dual where exists ( ", sqltext, " )" ),
                                       params, false );
  return ( rs and rs.moveNext() );
END;

// Базовый класс для удобного чтения выборки
// Имена полей у наследника должны соответствовать названиям полей выборки за исключением "t_"
CLASS TRsdRecordReader
  /* Чтение данных из RSD-выборки */
  macro Read( rs:RsdRecordset )
    var i:integer = 0,
        count:integer = rs.FldCount,
        fld:RsdField;
    while( i < count )
      fld = rs.Fld(i);
      GenSetProp( this, SubStr( fld.Name, 3 ), fld.Value );
      i = i + 1;
    end;
  end;
END;

//Gurin S. 26.03.2015 HF2031_19_25_148
MACRO execSQLselectPrm( sqltext:string ) : RsdRecordset
  var params = null;

  var SQLParmCount : integer = ParmCount() - 1;
  if( SQLParmCount > 0 )
    params = TArray( SQLParmCount, SQLParmCount );

    var parm : SQLParam, i:integer = 1;
    while( GetParm(i, parm) )
      params[ params.size ] = parm;
      i = i + 1;
    end;
  end;

  return execSQLselect(sqltext, params);
END;
