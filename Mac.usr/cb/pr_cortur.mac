/*
 *  Печать распоряжения на проведение исправительных оборотов
 */
// KS 04.12.2013 Перенос пользовательских доработок в 31ю сборку

Import FIInter, "lib_rep.mac", "globals.mac", OprInter, RSD, oralib, likepy, PaymInter, BankInter;

const ячейка1_НомерДокумента = 0
     ,ячейка1_Дата           = 1
     ,ячейка1_Дебет          = 2
     ,ячейка1_ВалютаДебета   = 3
     ,ячейка1_СуммаДебета    = 4
     ,ячейка1_Кредит         = 5
     ,ячейка1_ВалютаКредита  = 6
     ,ячейка1_СуммаКредита   = 7
     ,ячейка1_ЭквивВНацВал   = 8
     ,ячейка1_Основание      = 9
     ;

const ячейка2_НомерДокумента = 0
     ,ячейка2_Статус         = 1
     ,ячейка2_Тип            = 2
     ,ячейка2_Дебет          = 3
     ,ячейка2_ВалютаДебета   = 4
     ,ячейка2_СуммаДебета    = 5
     ,ячейка2_Кредит         = 6
     ,ячейка2_ВалютаКредита  = 7
     ,ячейка2_СуммаКредита   = 8
     ,ячейка2_ЭквивВНацВал   = 9
     ,ячейка2_Основание      = 10
     ;

record accispr(accispr);
var CarryIspr : RsbAccTransaction;
var control_oper, Name_Control_Oper;
var printtop = 0;

private macro ПолучитьЭквивалентВРублях( SumRub : @money, Sum : money, DateRate : date, FIID : integer )
  if(( FIID == NATCUR ) or ( FIID == ALLFININSTR )) SumRub = Sum;
  else
    if( ConvSum( SumRub, Sum, DateRate, FIID, NATCUR ) )
      RunError( "Ошибка при конвертации суммы" );
    end;
  end;
end;

private macro ПечатьШапкиТаблицы1( Report : ReportLib)
  Report.PrintSplitLine();
  Report.SetCageContent( ячейка1_НомерДокумента, "№ док."                   );
  Report.SetCageContent( ячейка1_Дата          , "Дата"                     );
  Report.SetCageContent( ячейка1_Дебет         , "Дебет"                    );
  Report.SetCageContent( ячейка1_ВалютаДебета  , "Валюта дебета"            );
  Report.SetCageContent( ячейка1_СуммаДебета   , "Сумма дебета"             );
  Report.SetCageContent( ячейка1_Кредит        , "Кредит"                   );
  Report.SetCageContent( ячейка1_ВалютаКредита , "Валюта кредита"           );
  Report.SetCageContent( ячейка1_СуммаКредита  , "Сумма кредита"            );
  Report.SetCageContent( ячейка1_ЭквивВНацВал  , "Эквивалент в нац. валюте" );
  Report.SetCageContent( ячейка1_Основание     , "Основание"                );
  Report.Print();
  Report.PrintSplitLine();
end;

private macro ПечатьШапкиТаблицы2( Report : ReportLib )
  Report.PrintSplitLine();
  Report.SetCageContent( ячейка2_НомерДокумента, "№ док."                   );
  Report.SetCageContent( ячейка2_Статус        , "Статус"                   );
  Report.SetCageContent( ячейка2_Тип           , "Тип"                      );
  Report.SetCageContent( ячейка2_Дебет         , "Дебет"                    );
  Report.SetCageContent( ячейка2_ВалютаДебета  , "Валюта дебета"            );
  Report.SetCageContent( ячейка2_СуммаДебета   , "Сумма дебета"             );
  Report.SetCageContent( ячейка2_Кредит        , "Кредит"                   );
  Report.SetCageContent( ячейка2_ВалютаКредита , "Валюта кредита"           );
  Report.SetCageContent( ячейка2_СуммаКредита  , "Сумма кредита"            );
  Report.SetCageContent( ячейка2_ЭквивВНацВал  , "Эквивалент в нац. валюте" );
  Report.SetCageContent( ячейка2_Основание     , "Основание"                );
  Report.Print();
  Report.PrintSplitLine();
end;

private macro ПечатьДанныхДокумента1(Report : ReportLib, rsbAccTrn : RsbAccTransaction)

  Report.SetCageContent( ячейка1_НомерДокумента, rsbAccTrn.Numb_Document                  );
  Report.SetCageContent( ячейка1_Дата          , string(rsbAccTrn.Date_Carry:f          ) ); 
  Report.SetCageContent( ячейка1_Дебет         , string(rsbAccTrn.AccountPayer:f        ) );
  Report.SetCageContent( ячейка1_ВалютаДебета  , ПолучитьКодФинИн(rsbAccTrn.FIIDPayer   ) );
  Report.SetCageContent( ячейка1_СуммаДебета   , string(rsbAccTrn.SumPayer:f            ) );
  Report.SetCageContent( ячейка1_Кредит        , string(rsbAccTrn.AccountReceiver:f     ) );
  Report.SetCageContent( ячейка1_ВалютаКредита , ПолучитьКодФинИн(rsbAccTrn.FIIDReceiver) );
  Report.SetCageContent( ячейка1_СуммаКредита  , string(rsbAccTrn.SumReceiver:f         ) );
  Report.SetCageContent( ячейка1_ЭквивВНацВал  , string(rsbAccTrn.SumEquivalentCarry:f  ) );
  Report.SetCageContent( ячейка1_Основание     , rsbAccTrn.Ground                         );
  Report.Print();
  Report.PrintSplitLine();

end;

private macro ПечатьДанныхДокумента2(Report : ReportLib, rsbAccTrn : RsbAccTransaction, Статус, Тип)
  var Sum, SumRub, isMulty;
  /* Обычный илил мультивалютный платеж */
  if( rsbAccTrn.FIIDReceiver != rsbAccTrn.FIIDPayer )
   isMulty = 1;
  else
   isMulty = 0;
  end;
  /*для простой проводки*/
  if( isMulty == 0 )
    Sum = rsbAccTrn.SumPayer;
    /*не рублевый*/
    if( (rsbAccTrn.FIIDReceiver != 0 ) or ( rsbAccTrn.FIIDPayer != 0 ) )
      ПолучитьЭквивалентВРублях( @SumRub, Sum, rsbAccTrn.Date_Rate, rsbAccTrn.FIIDPayer );
    else 
      SumRub = "";//Sum;
    end;
  /*для мульти проводки*/
  elif( isMulty == 1 )
    if( (rsbAccTrn.FIIDPayer != 0) and (rsbAccTrn.FIIDReceiver != 0) )        /*FIIDPayer*/
      Sum = rsbAccTrn.SumPayer;
      ПолучитьЭквивалентВРублях( @SumRub, Sum, rsbAccTrn.Date_Rate, rsbAccTrn.FIIDPayer );
    elif(rsbAccTrn.FIIDPayer != 0)
      Sum = rsbAccTrn.SumPayer;
      ПолучитьЭквивалентВРублях( @SumRub, Sum, rsbAccTrn.Date_Rate, rsbAccTrn.FIIDPayer );
    elif(rsbAccTrn.FIIDReceiver != 0)
      Sum = rsbAccTrn.SumReceiver;
      ПолучитьЭквивалентВРублях( @SumRub, Sum, rsbAccTrn.Date_Rate, rsbAccTrn.FIIDReceiver );
    end;
  end;
  Report.SetCageContent( ячейка2_НомерДокумента, rsbAccTrn.Numb_Document                  );
  Report.SetCageContent( ячейка2_Статус        , Статус                                   ); 
  Report.SetCageContent( ячейка2_Тип           , Тип                                      ); 
  Report.SetCageContent( ячейка2_Дебет         , string(rsbAccTrn.AccountPayer:f        ) );
  Report.SetCageContent( ячейка2_ВалютаДебета  , ПолучитьКодФинИн(rsbAccTrn.FIIDPayer   ) );
  Report.SetCageContent( ячейка2_СуммаДебета   , string(rsbAccTrn.SumPayer:f            ) );
  Report.SetCageContent( ячейка2_Кредит        , string(rsbAccTrn.AccountReceiver:f     ) );
  Report.SetCageContent( ячейка2_ВалютаКредита , ПолучитьКодФинИн(rsbAccTrn.FIIDReceiver) );
  Report.SetCageContent( ячейка2_СуммаКредита  , string(rsbAccTrn.SumReceiver:f         ) );
  Report.SetCageContent( ячейка2_ЭквивВНацВал  , string(SumRub:f                        ) );
  Report.SetCageContent( ячейка2_Основание     , rsbAccTrn.Ground                         );
  Report.Print();
  Report.PrintSplitLine();
end;

private macro НазваниеГлавы( Chapter : integer )
  file obch("obchaptr.dbt");

  obch.Chapter = Chapter;
  if( GetEQ(obch) )
    return obch.Name;
  end;

  return "";
end;

macro GetAccIspr(AccIsprRec, PrimDoc, PrimDocKind) : bool
  file accisprfile("accispr.dbt") key 3;
  var query, rs, DocumentID;
  var params : TArray;
  record pr_paym(pmpaym);
  record cb_doc(cb_doc);
  record multydoc(multydoc);
  record acctrn(acctrn);
  query =         "SELECT t_CorrDocID, t_OrderNo ";
  query = query + "  FROM daccispr_dbt ";
  query = query + " WHERE t_DocKind = :DocKind ";
  query = query + "   AND t_DocumentID = :DocumentID ";
  if(PrimDocKind == DLDOC_MEMORIALORDER)
    SetBuff( cb_doc, PrimDoc );
    DocumentID = cb_doc.DocumentID;
  elif(PrimDocKind == CB_MULTYDOC)
    SetBuff( multydoc, PrimDoc );
    DocumentID = multydoc.AutoKey;
  elif(PrimDocKind == DLDOC_BANKORDER)
    SetBuff( pr_paym, PrimDoc );
    DocumentID = pr_paym.PaymentID;
  elif((PrimDocKind == DLDOC_CARRY) or (PrimDocKind == DLDOC_MULTYCAR))
    SetBuff( acctrn, PrimDoc );
    DocumentID = MakeObjectID(null, PrimDocKind, acctrn);
  end;
  params = makeArray(SQLParam( "DocKind",    PrimDocKind ),
                     SQLParam( "DocumentID", DocumentID  ));
  rs = execSQLselect(query, params, true);
  if(rs and rs.moveNext())
    accisprfile.CorrDocID = rs.value(0);
    accisprfile.OrderNo   = rs.value(1);
    if( GetEQ(accisprfile) )
      Copy(AccIsprRec, accisprfile);
      return true;
    end;
  end;
end;

private macro GetDocumentsByCorrDocID(CorrDocID)
  var query, rs;
  var params : TArray;
  query =         "SELECT t_DocKind, t_DocumentID, t_RateDate ";
  query = query + "  FROM daccispr_dbt ";
  query = query + " WHERE t_CorrDocID = :CorrDocID ";
  query = query + "   AND t_DocKind != 0 ";
  query = query + "   AND t_DocumentID != 0 ";
  query = query + " ORDER BY t_OrderNo ";
  params = makeArray(SQLParam( "CorrDocID", CorrDocID));
  rs = execSQLselect(query, params, true);
  return rs;
end;


/* EVG 30/12/2013 Пользовательская процедура, адаптирована под 2031 */
/* Получение номера опера из проводки */
private macro ПолучитьКонтрОпер (DocKind, DocumentID) : integer
   var query, rs;
   var params : TArray;

   /* EVG 30/2/2013 Переход на 2031
   query  = "select arhdoc.t_oper as oper"
   + "\n" + "from doproper_dbt ooper,  doprdocs_dbt oprdoc,darhdoc_dbt arhdoc"
   + "\n" + "where   ooper.t_documentid = lpad(" + DocumentID + ", 34, '0')"
   + "\n" + "        and OOPER.T_DOCKIND = " + DocKind
   + "\n" + "        and ooper.t_id_operation = oprdoc.t_id_operation"
   + "\n" + "        and substr(oprdoc.t_documentid, 6) = arhdoc.t_ApplicationKey;";
   rs = RSDRecordset( query );
   if (rs and rs.moveNext())
      return rs.value("oper");
   else
      query  = "select arhdoc.t_oper as oper" 
      + "\n" + "from doproper_dbt ooper,  doprdocs_dbt oprdoc,darhdoc$_dbt arhdoc"
      + "\n" + "where   ooper.t_documentid = lpad(" + DocumentID + ", 34, '0')"
      + "\n" + "        and OOPER.T_DOCKIND = " + DocKind
      + "\n" + "        and ooper.t_id_operation = oprdoc.t_id_operation"
      + "\n" + "        and substr(oprdoc.t_documentid, 6) = arhdoc.t_ApplicationKey;";
      rs = RSDRecordset( query );
      if (rs and rs.moveNext())
         return rs.value("oper");
      else
         return -1;
      end;
   end;
   */
   query  = " select acctrn.t_oper as oper "
   + "\n" + "   from doproper_dbt ooper, doprdocs_dbt oprdoc, dacctrn_dbt acctrn "
   + "\n" + "  where ooper.t_documentid    = lpad(" + DocumentID + ", 34, '0')"
   + "\n" + "    and ooper.t_dockind       = " + DocKind
   + "\n" + "    and oprdoc.t_id_operation = ooper.t_id_operation"
   + "\n" + "    AND oprdoc.t_acctrnid     = acctrn.t_acctrnid";

   rs = RSDRecordset( query );
   if (rs and rs.moveNext())
      return rs.value("oper");
   end;

   return -1;
end;

/* Коркин Иван: Переопределено свойство Ground,       */
/*              т.к в Ground класса RsbAccTransaction */
/*              не влезало полное описание.           */
/*              По заявке № A51425                    */
private class (RsbAccTransaction) RsbAccTransactionNew
   var Ground: string;
end;


private macro ПолучитьДокумент(DocKind, DocumentID, RateDate, State : @string) : RsbAccTransaction
  var PaymentObj : RsbPayment;
  var Multy : RsbMultyDoc;
  var Memorial : RsbMemorialOrder;
  var BankOrder : RsbBankOrder;
  var Документ = RsbAccTransactionNew;
  PaymentObj = RsbPayment(DocumentID);
  if(DocKind == CB_MULTYDOC)
    Multy = RsbMultyDoc( PaymentObj.DocumentID );
    Документ.Chapter         = Multy.Chapter;
    Документ.FIIDPayer       = PaymentObj.PayerFIID;
    Документ.FIIDReceiver    = PaymentObj.ReceiverFIID;
    Документ.SumPayer        = PaymentObj.PayerAmount;
    Документ.SumReceiver     = PaymentObj.ReceiverAmount;
    Документ.AccountPayer    = PaymentObj.PayerAccount;
    Документ.AccountReceiver = PaymentObj.ReceiverAccount;
    Документ.Numb_Document   = PaymentObj.Number;
    Документ.Date_Carry      = PaymentObj.ValueDate;
    Документ.Ground          = PaymentObj.Ground;
    Документ.TypeDocument    = Multy.Type_Document;
    if(Multy.Status == 1)
      State = "Отложен";
    elif(Multy.Status == 2)
      State = "Открыт";
    elif(Multy.Status == 3)
      State = "Закрыт";
    elif(Multy.Status == 4)
      State = "Отвергнут";
    end;
  elif(DocKind == DLDOC_MEMORIALORDER)
    Memorial = RsbMemorialOrder( PaymentObj.DocumentID );
    Документ.Chapter         = Memorial.Chapter;
    Документ.FIIDPayer       = Memorial.Code_Currency;
    Документ.FIIDReceiver    = Memorial.Code_Currency;
    Документ.SumPayer        = PaymentObj.PayerAmount;
    Документ.SumReceiver     = PaymentObj.ReceiverAmount;
    Документ.AccountPayer    = PaymentObj.PayerAccount;
    Документ.AccountReceiver = PaymentObj.ReceiverAccount;
    Документ.Numb_Document   = PaymentObj.Number;
    Документ.Date_Carry      = PaymentObj.ValueDate;
    Документ.Ground          = PaymentObj.Ground;
    Документ.TypeDocument    = Memorial.TypeDocument;
    if(Memorial.State == 0)
      State = "Отложен";
    elif(Memorial.State == 1)
      State = "Открыт";
    elif(Memorial.State == 2)
      State = "Отвергнут";
    elif(Memorial.State == 50)
      State = "Закрыт";
    end;
  elif(DocKind == DLDOC_BANKORDER)
    BankOrder = RsbBankOrder( PaymentObj.DocumentID );
    Документ.Chapter         = BankOrder.Chapter;
    Документ.FIIDPayer       = BankOrder.PayerFIID;
    Документ.FIIDReceiver    = BankOrder.ReceiverFIID;
    Документ.SumPayer        = PaymentObj.PayerAmount;
    Документ.SumReceiver     = PaymentObj.ReceiverAmount;
    Документ.AccountPayer    = PaymentObj.PayerAccount;
    Документ.AccountReceiver = PaymentObj.ReceiverAccount;
    Документ.Numb_Document   = PaymentObj.Number;
    Документ.Date_Carry      = PaymentObj.ValueDate;
    Документ.Ground          = PaymentObj.Ground;
    Документ.TypeDocument    = BankOrder.TypeDocument;
    if(BankOrder.PaymStatus == PM_PREPARING)
      State = "Отложен";
    elif(BankOrder.PaymStatus == PM_NOTFINISHED)
      State = "Открыт";
    elif(BankOrder.PaymStatus == PM_REJECTED)
      State = "Отвергнут";
    elif(BankOrder.PaymStatus == PM_FINISHED)
      State = "Закрыт";
    end;
  end;
  Документ.Date_Rate = RateDate;
  return Документ;
end;
  
private macro ПолучитьПроводку(AccTrnID) : RsbAccTransaction
  var Документ = RsbAccTransaction;
  var query, rs;
  var params : TArray;
  query =         "SELECT t_Chapter ";
  query = query + "      ,t_FIID_Payer ";
  query = query + "      ,t_FIID_Receiver ";
  query = query + "      ,t_Account_Payer ";
  query = query + "      ,t_Account_Receiver ";
  query = query + "      ,t_Sum_Payer ";
  query = query + "      ,t_Sum_Receiver ";
  query = query + "      ,t_Sum_NatCur ";
  query = query + "      ,t_Date_Carry ";
  query = query + "      ,t_Numb_Document ";
  query = query + "      ,t_Ground ";
  query = query + "  FROM dacctrn_dbt ";
  query = query + " WHERE t_AccTrnID = :AccTrnID ";
  params = makeArray(SQLParam( "AccTrnID", AccTrnID ));
  rs = execSQLselect(query, params, true);
  if(rs and rs.moveNext())
    Документ.Chapter            = rs.value(0); 
    Документ.FIIDPayer          = rs.value(1); 
    Документ.FIIDReceiver       = rs.value(2); 
    Документ.AccountPayer       = rs.value(3); 
    Документ.AccountReceiver    = rs.value(4); 
    Документ.SumPayer           = rs.value(5); 
    Документ.SumReceiver        = rs.value(6); 
    Документ.SumEquivalentCarry = rs.value(7); 
    Документ.Date_Carry         = rs.value(8); 
    Документ.Numb_Document      = rs.value(9); 
    Документ.Ground             = rs.value(10);
  end;
  return Документ;
end;
  
private macro ПечатьИсправительногоДокумента(Report : ReportLib, DocKind, DocumentID, RateDate)
  var State;
  var Документ = ПолучитьДокумент(DocKind, DocumentID, RateDate, @State);
  if (printtop == 0)
    ПечатьШапкиТаблицы2(Report, Документ);
    printtop=1;
  end;
  ПечатьДанныхДокумента2(Report, Документ, State, Документ.TypeDocument);
end;

private macro ПечатьИсправляемогоДокумента(Report : ReportLib, ИсправляемыйДокумент : RsbAccTransaction)
  Report.PrintSplitLine( true );
  Report.PrintLine( "Реквизиты ошибочной проводки", "c" );
  ПечатьШапкиТаблицы1(Report, ИсправляемыйДокумент);
  ПечатьДанныхДокумента1(Report, ИсправляемыйДокумент);
  println;
end;

macro ПечатьРаспоряжения(PrimDoc, PrimDocKind)
  var ИсправляемыйДокумент : RsbAccTransaction;
  var Report1 : ReportLib,
      Report2 : ReportLib;
  var rs, flag;
  var PaymentObj : RsbPayment;
  if((PrimDocKind == DLDOC_MEMORIALORDER) or (PrimDocKind == DLDOC_BANKORDER) or (PrimDocKind == CB_MULTYDOC))
    if( not GetAccIspr(accispr, PrimDoc, PrimDocKind))
      return;
    end;
    PaymentObj = RsbPayment(accispr.DocumentID);
  else
    return;
  end;
  Report1.AddCage( ячейка1_НомерДокумента, 5  );
  Report1.AddCage( ячейка1_Дата          , 10 );
  Report1.AddCage( ячейка1_Дебет         , 24 );
  Report1.AddCage( ячейка1_ВалютаДебета  , 7  );
  Report1.AddCage( ячейка1_СуммаДебета   , 15 );
  Report1.AddCage( ячейка1_Кредит        , 24 );
  Report1.AddCage( ячейка1_ВалютаКредита , 7  );
  Report1.AddCage( ячейка1_СуммаКредита  , 15 );
  Report1.AddCage( ячейка1_ЭквивВНацВал  , 15 );
  Report1.AddCage( ячейка1_Основание     , 20 );

  Report2.AddCage( ячейка2_НомерДокумента, 5  );
  Report2.AddCage( ячейка2_Статус        , 6  );
  Report2.AddCage( ячейка2_Тип           , 3  );
  Report2.AddCage( ячейка2_Дебет         , 24 );
  Report2.AddCage( ячейка2_ВалютаДебета  , 7  );
  Report2.AddCage( ячейка2_СуммаДебета   , 15 );
  Report2.AddCage( ячейка2_Кредит        , 24 );
  Report2.AddCage( ячейка2_ВалютаКредита , 7  );
  Report2.AddCage( ячейка2_СуммаКредита  , 15 );
  Report2.AddCage( ячейка2_ЭквивВНацВал  , 15 );
  Report2.AddCage( ячейка2_Основание     , 20 );

  Report1.PrintLine( "Распоряжение № " + accispr.CorrDocNumber, "c", true );
  println;
  Report1.PrintLine( "На проведение исправительного оборота ", "c", true );
  Report1.PrintLine( "Глава " + PaymentObj.Chapter + " " + НазваниеГлавы(PaymentObj.Chapter), "c", true );
  Report1.PrintLine( string({curdate}:f) + " г.", "c", true );
  println;
  if(accispr.SrcDocKind > 0)
    ИсправляемыйДокумент = ПолучитьПроводку(accispr.AccTrnID);
    ПечатьИсправляемогоДокумента(Report1, ИсправляемыйДокумент);
  end;
  Report2.PrintSplitLine(true);
  Report2.PrintLine( "Реквизиты исправительного документа", "c" );
  //ПечатьШапкиТаблицы2(Report2);
  rs = GetDocumentsByCorrDocID(accispr.CorrDocID);
  flag = true;
  while(rs and rs.moveNext())
    ПечатьИсправительногоДокумента(Report2, rs.value(0), rs.value(1), ИсправляемыйДокумент.Date_Carry);
    if (flag)
      control_oper = ПолучитьКонтрОпер(rs.value(0), rs.value(1));
      flag = false;
    end;
  end;
  /* EVG Вывод ФИО пользователя, выпускающего форму */
  var fperson:TBFile = TBFile("person.dbt", "R", 0),
      NameOper = "";
  fperson.Clear();
  fperson.rec.Oper = {Oper};
  if(fperson.GetEQ())
     NameOper = fperson.rec.Name;
  end;

  /* EVG 30/12/2013 Чтобы не было Undefined */
  Name_Control_Oper = "_____________";

  /* Коркин Иван: Вывод ФИО пользователя, выполнившего контроль */  
  fperson.Clear();
  fperson.rec.Oper = control_oper;
  if(fperson.GetEQ())
     Name_Control_Oper = fperson.rec.Name;
  end;

/*  println; Report2.PrintLine( " Гл.бухгалтер.           _______________________________ /_____________/", "l", true );*/
/*SDA 28.02.2014  R-338757-2 */
  println; Report2.PrintLine( " Гл.бухгалтер.           _______________________________ /"+ {FIO_Book}+"/", "l", true );
  /* Вывод ФИО*/
  println; Report2.PrintLine( " Выполнено, бухгалтер.   _______________________________ /" + NameOper + "/", "l", true );
  println; Report2.PrintLine( " Проконтролировано.      _______________________________ /" + Name_Control_Oper + "/", "l", true );
  println; Report2.PrintLine( " Ошибка допущена по вине _______________________________________________", "l", true );
end;
