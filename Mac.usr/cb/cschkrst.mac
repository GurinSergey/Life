//-----------------------------------------------------------------------------
// Блок     : 29017 - "Предобработка кассового документа"
// Описание : "Проверка остатков по счетам"
// @changes : 2013-04-15 zip_z. рефакторинг
// @diff    : Убраны дистрибутивные проверки на наличие К2 и КОР, добавлена маршрутизация во Фронт
//-----------------------------------------------------------------------------
import pm_chkrst, cbsttls;
import FrontRoute, lib_account;

private macro CheckReceiverAccount(Account, FIID, Amount)
    var RestCredit;
    var Rest, R = 0;
    if( СчетАктивный( Account, CHAPT1, FIID ) and ( not ЕстьПарныйСчет( Account, CHAPT1, FIID ) ) )
        RestCredit = ПолучитьОстаток( Account, CHAPT1, FIID );
        Rest = RestCredit + Amount;
        //Gurin S. 27.04.2015 R-576274-2
        var _acc = RSL_Account(Account, Acc_GetFiidByAccount(Account));
        if (_acc.check_type_account("О"))
           R = Acc_GetLimit(Account, {curdate});
        end;
        if( Rest > R ) return false; end;
    end;
    return true;
end;  

MACRO CS_CheckAccRest( Payment:RsbPayment ):integer
    var stat = 0;
    var obj:object;
    var CTRL_segment:integer = 0;
    var RestDebet;
    var RestCredit;
    var Rest;
    var pi :TRecHandler = TRecHandler( "pmaddpi.dbt" );
    var next:integer = 0;
 
    var SkipArest = false; 
    if (Payment.Priority == 0) SkipArest = true; end; 
    if( CheckRestAndMakeReserve(Payment, true, false, false, true, GetOprStatus(OPR_PAYM_PERMISSION), SkipArest, true) )
        if(RejectPayment(Payment, "Недостаточно средств для списания"))
            return 1;
        end;
        return 0;
    end;

    //Проверим остаток на счете получателя
    if((Payment.DocKind == CASH_BOF_INCORDER) and (Payment.PIList(1).Size > 0))
        Payment.PIList(1).First;
        while(next == 0)
            next = Payment.PIList(1).Current(pi);
            if((next != 0) or (not CheckReceiverAccount(pi.rec.Account, pi.rec.FIID, pi.rec.Amount)))
                if(RejectPayment(Payment, "Недостаточно средств для зачисления на счет разноски " + pi.rec.Account))
                    return 1;
                end;
                msgbox( "Недостаточно средств для зачисления на счет разноски " + pi.rec.Account );
                return 0;
            end;
            if(next == 0)
                next = Payment.PIList(1).Next;
            end;
        end;

    elif( not CheckReceiverAccount(Payment.ReceiverAccount, Payment.ReceiverFIID, Payment.FutureReceiverAmount) )
        if(RejectPayment(Payment, "Недостаточно средств для зачисления на счет " + Payment.ReceiverAccount))
            return 1;
        end;
        msgbox( "Недостаточно средств для зачисления на счет " + Payment.ReceiverAccount );
        return 0;
    end;
  
    if( stat == 0 )
        if( Payment.DocKind == CASH_BOF_ADDORDER )
            obj = GenObject( "RsbBBAddCashOrder", Payment.DocumentID );
        elif( Payment.DocKind == CASH_BOF_INCORDER )
            obj = GenObject( "RsbBBIncCashOrder", Payment.DocumentID );
        elif( Payment.DocKind == CASH_BOF_OUTORDER )
            obj = GenObject( "RsbBBOutCashOrder", Payment.DocumentID );
        elif( Payment.DocKind == CASH_PS_INCORDER )
            obj = GenObject( "RsbPSInCashOrder" , Payment.DocumentID );
        else //CASH_PS_OUTORDER
            obj = GenObject( "RsbPSOutCashOrder", Payment.DocumentID );
        end;

        CTRL_segment = OPR_PAYM_ST_CTRL_CONTROL;
        if ((IsFrontPayment(Payment)) and (Payment.DocKind == CASH_PS_OUTORDER))
            CTRL_segment = OPR_PAYM_ST_CTRL_NOTCONTROL;
        end;
        if( УстановитьСтатусыПлатежа( OPR_PAYM_CONTROL, CTRL_segment ) )
            msgbox("Ошибка при установке сегментов статуса экземпляра операции");
            return 1;
        end;
        if( УстановитьСтатусыПлатежа( OPR_PAYM_DO, OPR_PM_ST_ENTER ) )
            msgbox("Ошибка при установке сегментов статуса экземпляра операции");
            return 1;
        end;
    else
        return 1;
    end;
    
    return 0;
END;
