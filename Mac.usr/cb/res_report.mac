/*
 * Печать протокола процедуры формирования резерва
 */
Import "res_lib.mac", "globals.mac";

private const ACC_SERV_LOG_NONE  = 0
             ,ACC_SERV_LOG_ERROR = 1
             ,ACC_SERV_LOG_FULL  = 2;

private const ErrorPrefix   = "! Ошибка. ";
private const WarningPrefix = "! Внимание. ";

private var TotalSum    : money;
private var NumberCarry : integer;
private var LastCaseID  : integer;


private macro WithoutMessageLevel( AccOpSrvDoc ) : bool
  return (AccOpSrvDoc.LogType == ACC_SERV_LOG_NONE);
end;

private macro ErrorLevel( AccOpSrvDoc ) : bool
  return (AccOpSrvDoc.LogType == ACC_SERV_LOG_ERROR);
end;

private macro FullMessageLevel( AccOpSrvDoc ) : bool
  return (AccOpSrvDoc.LogType == ACC_SERV_LOG_FULL);
end;

/* добавить строку */
private macro AddString( cur_str : string, splitter : string, add_string : string ) : string
  cur_str = Trim( cur_str );

  if( cur_str != "" )
    cur_str = cur_str + splitter + " ";
  end;
  cur_str = cur_str + add_string;

  return cur_str;
end;

/* получить имя операциониста */
private macro _GetOperName( oper : integer ) : string
  file person("person.dbt");

  if( oper )
    person.Oper = oper;
    if( getEQ(person) )
      return person.Name;
    end;
  end;

  return "";
end;

/* формируемые резервы */
private macro CalcReservString( AccOpSrvDoc ) : string
  var str = "";

  if( AccOpSrvDoc.CalcReserve      ) str = AddString( str, ",", "РВП"  ); end;
  if( AccOpSrvDoc.CalcReserveLoans ) str = AddString( str, ",", "РВПС" ); end;
  if( AccOpSrvDoc.CalcReserveOff   ) str = AddString( str, ",", "РОФШ" ); end;

  return str;
end;

/* элементы */
private macro ProcessString( AccOpSrvDoc ) : string
  var str = "";

  if( AccOpSrvDoc.ProcessAccounts ) str = AddString( str, ",", "Л/с"      ); end;
  if( AccOpSrvDoc.ProcessCases    ) str = AddString( str, ",", "Портфели" ); end;
  if( AccOpSrvDoc.ProcessChanged  ) str = AddString( str, ",", "с измененными параметрами" ); end;

  return str;
end;

/* получить классификацию */
macro ClassValueString( ListClassif : integer, Element : integer ) : string
  record llvalues( "llvalues.dbt" );

  LL_FindLLVALUES( ListClassif, Element, llvalues );

  return llvalues.Code;
end;

/* получить название главы */
private macro AccountChapterString( Chapter : integer ) : string
  file obchaptr("obchaptr.dbt");
  var str = "";

  str = string( Chapter );
  /*
  if( Chapter )
    str = string( Chapter );

    obchaptr.Chapter = Chapter;
    if( getEQ(obchaptr) )
      str = str + " " + obchaptr.Name;
    end;
  end;
  */
  return str;
end;

/* получить название ФИ */
private macro AccountFIString( FIID : integer ) : string
  var str = GetFICode( FIID );
  /*
  if( Trim(str) != "" )
    str = str + " " + GetFIName(FIID);
  end;
  */
  return str;
end;

/* получить название портфеля */
private macro GetCaseName( CaseID : integer ) : string
  file case("accase.dbt");
  var str = "";

  str = string( CaseID );
  /*
  if( CaseID )
    case.CaseID = CaseID;
    if( getEQ(case) )
      str = case.Name;
    end;
  end;
  */
  return str;
end;

/* получить имя операциониста */
private macro GetOperString( oper : integer ) : string
  file person("person.dbt");
  var str = "";

  str = string( oper );
  /*
  if( oper )
    str = string( oper ) + " " + _GetOperName( oper );
  end;
  */
  return str;
end;

/* строка "Да/Нет" */
private macro YesNoString( switch_val : variant ) : string
  if( switch_val ) return "Да" ;
  else             return "Нет";
  end;
end;

private macro ParamR(idr)

var val;

      if (idr == 1)
        GetRegistryValue("CB\\РЕЗЕРВЫ\\ПРОЦЕНТ ПО НЕПРОСРОЧ. ТРЕБ-ЯМ",   V_double, val );
      elif (idr == 2)
        GetRegistryValue("CB\\РЕЗЕРВЫ\\РЕЗЕРВ ПО НЕПРОСРОЧ. ТРЕБ-ЯМ",   0 , val );
        if (val)
          val="YES";
        else
          val="NO";
        end;
      elif (idr == 3)
        GetRegistryValue("CB\\РЕЗЕРВЫ\\НОМЕР ПАЧКИ",   V_integer , val );
      elif (idr == 4)
        GetRegistryValue("CB\\РЕЗЕРВЫ\\МИН. ПРОЦЕНТ РЕЗЕРВИРОВАНИЯ\\РВП\\5",   V_double , val );
      elif (idr == 5)
        GetRegistryValue("CB\\РЕЗЕРВЫ\\СРОК ПРОСРОЧКИ",   V_integer , val );
      elif (idr == 6)
        GetRegistryValue("CB\\РЕЗЕРВЫ\\СЧЕТ ПОЛУЧАТЕЛЯ В ТРЕБОВАНИЯХ",   V_string , val );
      elif (idr == 7)
        GetRegistryValue("CB\\РЕЗЕРВЫ\\СЧЕТА ДЛЯ РАСЧ. ПРОСРОЧ. ТРЕБ.",   V_string , val );
      end;
  return Val;

end;


/* печать строчки шапки */
private macro _PrintHeaderLine( ColName : string, ColValue : string )
[############################## #############################################] (ColName:r, ColValue:w);
end;

/* Печать шапки отчета */
macro PrintHeader( _AccOpSrvDoc )

SaveEndTime (1); //Закончили
  
  record AccOpSrvDoc("accopsrv.dbt");
  
  SetBuff( AccOpSrvDoc, _AccOpSrvDoc );

[Протокол процедуры формирования резервов                                    ];
[                                                                            ];
[Дата и время формирования протокола ##########   ########                   ] ( {curdate}:f, time:f );
[Операционист ##### #                                                         ] ( {oper}:r, _GetOperName({oper}) );
[                                                                            ];
[Заданные параметры:                                                         ];

  _PrintHeaderLine( "Дата:"                         , string(AccOpSrvDoc.Date:f) );
  _PrintHeaderLine( "Формируемые резервы:"          , CalcReservString(AccOpSrvDoc) );
  _PrintHeaderLine( "Элементы:"                     , ProcessString   (AccOpSrvDoc) );
  _PrintHeaderLine( "Классификация РВП:"            , ClassValueString(1030, AccOpSrvDoc.RsvClass        ) );
  _PrintHeaderLine( "Классификация РВПС:"           , ClassValueString(1033, AccOpSrvDoc.RsvClassLoans   ) );
  _PrintHeaderLine( "Классификация РОФШ:"           , ClassValueString(1031, AccOpSrvDoc.RsvClassOffshore) );
  _PrintHeaderLine( "Глава:"                        , AccountChapterString(AccOpSrvDoc.AccountChapter) );
  _PrintHeaderLine( "Валюта:"                       , AccountFIString     (AccOpSrvDoc.AccountFI     ) );
  _PrintHeaderLine( "Маски л/с:"                    , AccOpSrvDoc.AccountMask );
  _PrintHeaderLine( "Портфель:"                     , GetCaseName(AccOpSrvDoc.CaseID) );
  _PrintHeaderLine( "Операционист:"                 , GetOperString(AccOpSrvDoc.AccountOper) );
  _PrintHeaderLine( "Формировать портфели:"         , YesNoString(AccOpSrvDoc.FormCases) );
  _PrintHeaderLine( "Актуализировать параметры:"    , YesNoString(AccOpSrvDoc.CheckParm) );
  _PrintHeaderLine( "Счета просроченных требований:", GetExpirationAccounts() );

  println;

  //Tikh Настройки реестра
[Настройки реестра:];
  _PrintHeaderLine( "ПРОЦЕНТ ПО НЕПРОСРОЧ. ТРЕБ-ЯМ:", ParamR(1) );
  _PrintHeaderLine( "РЕЗЕРВ ПО НЕПРОСРОЧ. ТРЕБ-ЯМ:", ParamR(2) );
  _PrintHeaderLine( "НОМЕР ПАЧКИ:", ParamR(3) );
  _PrintHeaderLine( "МИН. ПРОЦЕНТ РЕЗЕРВИРОВАНИЯ\\РВП\\5:", ParamR(4) );
  _PrintHeaderLine( "СРОК ПРОСРОЧКИ:", ParamR(5) );
  _PrintHeaderLine( "СЧЕТ ПОЛУЧАТЕЛЯ В ТРЕБОВАНИЯХ:", ParamR(6) );
  _PrintHeaderLine( "СЧЕТА ДЛЯ РАСЧ. ПРОСРОЧ. ТРЕБ.:", ParamR(7) );
  
  println;

end;

macro PrintActualizeStart( _AccOpSrvDoc )
[    В результате выполнения процедуры контроля и актуализации параметров    ];
[                      были выявлены следующие ошибки:                       ];
[+-+-----------------------+-------------------------------------------------+];
[|!|  Номер счета актива/  | Примечание                                      |];
[| |   Название портфеля   |                                                 |];
[+-+-----------------------+-------------------------------------------------+];
end;

macro PrintFormErrorStart( _AccOpSrvDoc )
[ В результате выполнения проверок л/счетов были выявлены ошибки.           ];
[ По следующим объектам резервы не формировались:                           ];
[+-----------------------+---------------------------------------------------------------------+];
[|  Номер счета актива/  | Примечание                                                          |];
[|   Название портфеля   |                                                                     |];
[+-----------------------+---------------------------------------------------------------------+];
end;

/* признак ошибки в сообщении */
private macro GetErrorSign( MessageType : integer ) : string
  if( MessageType == ActualizeError ) return "!"; end;
  return "";
end;

/* префикс комментария */
private macro GetCommentPrefix( MessageType : integer ) : string
  if( MessageType == ActualizeError   ) return ErrorPrefix  ; end;
  if( MessageType == ActualizeWarning ) return WarningPrefix; end;
  return "";
end;


macro PrintActualize( _AccOpSrvDoc, MessageType : integer, NameObject : string, Comment : string )
[|#|#######################|#################################################|]
( GetErrorSign(MessageType), NameObject:w, (GetCommentPrefix(MessageType) + Comment):w );
end;

macro PrintFormError( _AccOpSrvDoc, NameObject : string, Comment : string )
[|#######################|#####################################################################|]
( NameObject:w, Comment:w );
end;

macro PrintActualizeFinish( _AccOpSrvDoc )
[+-+-----------------------+-------------------------------------------------+];
  println;
end;

macro PrintFormErrorFinish( _AccOpSrvDoc )
[+-----------------------+---------------------------------------------------------------------+];
  println;
end;

macro PrintOverdueSumLogStart( _AccOpSrvDoc )
[ Суммы просроченных требований по результатам расчета:                                    ];
[+-----------------------+-------------------+------------+-----------+--------------------+--------------------+];
[| Номер лицевого счета  | Код клиента       | Код        | Признак   | Остаток счета      | Сумма просроченных |]; 
[| требования            |                   | валюты     | бэк-офиса | требования         | требований         |];
[|                       |                   | счета      |           | (в валюте счета)   | (в валюте счета)   |];
[|                       |                   | требования |           |                    |                    |];
[+-----------------------+-------------------+------------+-----------+--------------------+--------------------+];
end;

macro PrintOverdueSum( _AccOpSrvDoc, Account : string, ClientCode : string, FICode : string, BackOffice : string, Sum : money, Saldo : money )

[|#######################|###################|    ###     |###########|####################|####################|]
( Account, ClientCode, FICode, BackOffice, Saldo, Sum );

end;

macro PrintOverdueSumLogFinish( _AccOpSrvDoc )
[+-----------------------+-------------------+------------+-----------+--------------------+--------------------+];
  println;
end;

macro PrintOpenReserveAccountStart( _AccOpSrvDoc )
[В результате выполнения процедуры были открыты следующие счета резервов:    ];
[+-----------------------+-----------------------+                           ];
[|  Номер счета актива/  |  Номер счета резерва  |                           ];
[|   Название портфеля   |                       |                           ];
[+-----------------------+-----------------------+                           ];
end;

macro PrintOpenReserveAccount( _AccOpSrvDoc, NameObject : string, ReserveAccount : string )
[|#######################|#######################|                           ]  ( NameObject:w, string(ReserveAccount):f );
end;

macro PrintOpenReserveAccountFinish( _AccOpSrvDoc )
[+-----------------------+-----------------------+                           ];
  println;
end;

macro PrintCloseReserveAccountStart( _AccOpSrvDoc )
[В результате выполнения процедуры были закрыты следующие счета резервов:    ];
[+-----------------------+-----------------------+                           ];
[|  Номер счета актива/  |  Номер счета резерва  |                           ];
[|   Название портфеля   |                       |                           ];
[+-----------------------+-----------------------+                           ];
end;

macro PrintCloseReserveAccount( _AccOpSrvDoc, NameObject : string, ReserveAccount : string )
[|#######################|#######################|                           ]  ( NameObject:w, string(ReserveAccount):f );
end;

macro PrintCloseReserveAccountFinish( _AccOpSrvDoc )
[+-----------------------+-----------------------+                           ];
  println;
end;

macro PrintCarryLogStart( _AccOpSrvDoc )
  
  record AccOpSrvDoc("accopsrv.dbt");
  
  SetBuff( AccOpSrvDoc, _AccOpSrvDoc );

[                                   Реестр                                   ];
[                    документов по формированию резервов                     ];
[                               за ##########                                ] ( AccOpSrvDoc.Date:f );
[+--------+-----------------------+-----------------------+-----------------+];
[|  № док |    Счет по Дебету     |   Счет по Кредиту     |     Сумма       |];
[+--------+-----------------------+-----------------------+-----------------+];
  
  TotalSum    = $0;
  NumberCarry = 0;

end;

macro PrintCarryLog( _AccOpSrvDoc, Numb_Document : string, PayerAccount : string, ReceiverAccount : string, Sum : money )
[|########|#######################|#######################|#################|] ( Numb_Document:w, PayerAccount:f, ReceiverAccount:f, Sum );
  
  TotalSum    = TotalSum + Sum;
  NumberCarry = NumberCarry + 1;

end;

macro PrintCarryLogFinish( _AccOpSrvDoc )
[+--------+-----------------------+-----------------------+-----------------+];
[Итого                                                     ################# ] ( TotalSum );
[Общее количество проведенных документов ###########                         ] ( NumberCarry:l );
  
  println;
end;

macro PrintLine( strRep )
  println( strRep );
end;

macro PrintRollbackAccountStart( _AccOpSrvDoc )
[Лицевые счета:];
end;
macro PrintRollbackAccount(Account : string, Result : string )
[####################### #############################################################################################]  ( Account:f, Result );
end;
macro PrintRollbackAccountFinish( _AccOpSrvDoc )
  println;
end;

macro PrintRollbackAccaseStart( _AccOpSrvDoc )
[Портфели:];
  LastCaseID = 0;
end;
macro PrintRollbackAccase(CaseID : integer, Name : string, Number : integer, Result : string )
  if(LastCaseID != CaseID)
    LastCaseID = CaseID;
[##### ###############################################################################################################]  ( CaseID, Name );
  end;
[      ##### #########################################################################################################]  ( Number, Result );
end;
macro PrintRollbackAccaseFinish( _AccOpSrvDoc )
  println;
end;
