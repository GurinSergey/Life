/****************************************************************************/
//  Блок      : 29051 - "Перенаправление платежа в другой банк"             //
//  Шаг       : 190   - "Перенаправление в другой банк"                     //
//  Назначение: Макрос шага                                                 //
//  Описание  : Макрос шага                                                 //
//  Имя файла: pmredirb.mac                                                 //
//  Создан:    11.10.07                                                     //
//  Изменения:                                                              //
//                                                                          //
//  Jushmanov 2014-02-25 C-19151 Логгирование массово выполненных шагов     //
/****************************************************************************/

import InsCarryDoc, PaymInter, PTInter, OprInter, BankInter, RMInter, WldInter,
      "rmtools.mac", "pmtlscom.mac", "cbsttls.mac", "pmprops.mac", "pm_common.mac", pm_tools;
import oralib; //Jushmanov 2014-02-25 C-19151

var PaymentObj:RsbPayment;


private macro Наименование(Имя, Счет, Банк);
    return string( Substr(Имя, 1, 160), " р/сч. ", 
                   Substr(Счет,1, 20), " в ", 
                   Substr(Банк,1, 160) ); 
end;


private macro FindBankID( StartDepartment );

    var select:string = " select t_PartyID "
                        " from ddp_dep_dbt "
                        " where t_Code = :StartDepartment ";

    var params:TArray = makeArray(SQLParam( "StartDepartment", StartDepartment ));

    var rset:RsdRecordset = execSQLselect( select, params, TRUE );

    if( rset and rset.moveNext() )
        return rset.value(0);
    end;     

    return 0;
end;


PRIVATE CLASS TCategory( _GroupID:integer, _AttrID:integer )
    VAR GroupID:integer = _GroupID;
    VAR AttrID:integer  = _AttrID;
END;


PRIVATE MACRO GetCategoryForPayment( PaymentID:integer ):TArray

    var CatList:TArray = TArray();
    var query:string =  "select T_GROUPID, T_ATTRID " +
                         " from dobjatcor_dbt " +
                        " where t_ObjectType = :ObjectType " +
                          " and t_Object = LPAD(:PaymentID, 10, '0');";
    var params:TArray = makeArray( SQLParam( "ObjectType", OBJTYPE_PAYMENT ), 
                                   SQLParam( "PaymentID", PaymentID ) );

    var rs:RsdRecordset = execSQLselect( query, params, true );
    if( rs )
        while( rs.moveNext() )
            CatList[CatList.size] = TCategory( rs.value(0), rs.value(1) );
        end;
    end;
    return CatList;
ONERROR(x)
    return CatList;
END;


private macro CreateBankPayment()
    file acc ("account.dbt" ) key 0;
    var Payment:RsbPayment; // платеж 
    var BankPayment:object; // первичный документ
    var Name;
    var PayerBankID, ReceiverBankID;
    RECORD CorsIn(corschem);
    var stat = 0;

    if( НайтиКорсхему(PaymentObj.InCorschem, PaymentObj.ReceiverFIID, CorsIn)) 
        msgbox("Не найдена входящая корсхема платежа");
        return 1;
    end;

    if( (    ( PaymentObj.PayerFIID == PaymentObj.BaseFIID )
         and ( PaymentObj.PayerFIID == PaymentObj.ReceiverFIID )
         and ( PaymentObj.PayerFIID == 0 /*NATCUR*/ ) ) 
    or ( not PaymentObj.IsCredit()))

        if(PaymentObj.IsCredit())
            BankPayment = GenObject( "RsbBankPayment", 0 );
        else
            BankPayment = GenObject( "RsbBankClaim", 0 );
        end;

        Payment                = BankPayment.Payment();
        BankPayment.Origin     = MEMORDER_FDOC_REDIRECT;
        BankPayment.Oper       = {oper}; 
        BankPayment.Status     = 1;

        if( PaymentObj.IsCredit() )
            Payment.DocKind    = DLDOC_BANKPAYMENT;
        else
            Payment.DocKind    = DLDOC_BANKCLAIM;
        end;

    else

        BankPayment              = GenObject( "RsbBbCpOrder", 0 );
        Payment                  = BankPayment.Payment();
        BankPayment.Origin       = CP_OR_REDIRECT;
        BankPayment.Oper         = {oper}; 
        BankPayment.CurrentState = 0;
        Payment.DocKind          = BBANK_CPORDER;
    end;

    Payment.Purpose     = PM_PURP_BANKPAYMENT;
    Payment.Origin      = 1;//PAYMENT_OR_MANUAL 
    Payment.Number      = PaymentObj.Number;
    Payment.PaymentKind = "Э";

    if(Payment.DocKind == DLDOC_BANKCLAIM)
        Payment.ShifrOper   = "02";
    else
        Payment.ShifrOper   = "01";
    end;

    if(Payment.DocKind == DLDOC_BANKCLAIM)
        Payment.DemandAccept         = PaymentObj.DemandAccept;
        Payment.DemandAcceptTerm     = IfThenElse(PaymentObj.DemandAcceptTerm == -1, 1, PaymentObj.DemandAcceptTerm);
        Payment.DemandAcceptDate     = PaymentObj.DemandAcceptDate;
        Payment.DemandIndexExitDate  = PaymentObj.DemandIndexExitDate;
        Payment.DemandIndexPlaceDate = PaymentObj.DemandIndexPlaceDate;
    end;

    Payment.PayDate     =
    Payment.ClientDate  = 
    Payment.Date        = {curdate};
    Payment.Ground      = PaymentObj.Ground;

    if( PaymentObj.IsCredit() )
        acc.Chapter       = 1;
        acc.Account       = PaymentObj.FuturePayerAccount;
        acc.Code_Currency = PaymentObj.FuturePayerFIID;
        if( not getEQ( acc ) )
            msgbox("Не найден счет плательщика");
            return 1;
        end;

        PayerBankID = FindBankID( acc.Department );
        Name = Наименование(PaymentObj.PayerName, PaymentObj.PayerAccount, ПолучитьИмяСубъекта(PaymentObj.PayerBankID));

        Payment.SetPayerPI( PAYMENTS_GROUP_UNDEF, 
                            PayerBankID, 
                            0, 
                            "", 
                            "",
                            "",
                            PaymentObj.FuturePayerFIID, 
                            1/*CHAPT1*/, 
                            PaymentObj.FuturePayerAccount,
                            acc.Client,
                            Name
                            );

        Payment.SetReceiverPI( PAYMENTS_GROUP_UNDEF, 
                             PaymentObj.ReceiverBankID, 
                             PaymentObj.ReceiverBankCodeKind, 
                             PaymentObj.ReceiverBankCode, 
                             PaymentObj.ReceiverBankName,
                             PaymentObj.ReceiverBankCorrAcc,
                             PaymentObj.ReceiverFIID, 
                             1/*CHAPT1*/, 
                             PaymentObj.ReceiverAccount, 
                             PaymentObj.Receiver, 
                             PaymentObj.ReceiverName, 
                             PaymentObj.ReceiverINN );

        Payment.BaseFIID       = PaymentObj.BaseFIID;
        Payment.PayerFIID      = PaymentObj.FuturePayerFIID;
        Payment.ReceiverFIID   = PaymentObj.ReceiverFIID;
        Payment.BaseAmount     = PaymentObj.BaseAmount;
        Payment.PayerAmount    = PaymentObj.FuturePayerAmount;
        Payment.ReceiverAmount = PaymentObj.ReceiverAmount;

    else

        acc.Chapter       = 1;
        acc.Account       = PaymentObj.FutureReceiverAccount;
        acc.Code_Currency = PaymentObj.FutureReceiverFIID;
        if( not getEQ( acc ) )
            msgbox("Не найден счет получателя");
            return 1;
        end;

        ReceiverBankID = FindBankID( acc.Department );
        Name = Наименование(PaymentObj.ReceiverName, PaymentObj.ReceiverAccount, ПолучитьИмяСубъекта(PaymentObj.ReceiverBankID));

        Payment.SetReceiverPI( PAYMENTS_GROUP_UNDEF, 
                               ReceiverBankID, 
                               0,
                               "",
                               "",
                               "",
                               PaymentObj.FutureReceiverFIID, 
                               1/*CHAPT1*/, 
                               PaymentObj.FutureReceiverAccount, 
                               ReceiverBankID, 
                               Name );

        Payment.SetPayerPI(  PAYMENTS_GROUP_UNDEF, 
                             PaymentObj.PayerBankID, 
                             PaymentObj.PayerBankCodeKind, 
                             PaymentObj.PayerBankCode, 
                             PaymentObj.PayerBankName,
                             PaymentObj.PayerBankCorrAcc,
                             PaymentObj.PayerFIID, 
                             1/*CHAPT1*/, 
                             PaymentObj.PayerAccount, 
                             PaymentObj.Payer, 
                             PaymentObj.PayerName, 
                             PaymentObj.PayerINN );

        Payment.BaseFIID       = PaymentObj.BaseFIID;
        Payment.PayerFIID      = PaymentObj.PayerFIID;
        Payment.ReceiverFIID   = PaymentObj.FutureReceiverFIID;
        Payment.BaseAmount     = PaymentObj.BaseAmount;
        Payment.PayerAmount    = PaymentObj.PayerAmount;
        Payment.ReceiverAmount = PaymentObj.FutureReceiverAmount;
    end;

    Payment.ValueDate   = PM_GetOperDay_Balance(Payment.Department);

    array FlgRM, FlgCP, FlgKZRM, FlgKZCP;
    FlgRM[PNRMPM_COUNT]      = 0;
    FlgKZRM[KZPNRMPM_COUNT]  = 0;
    FlgCP[PNCPPM_COUNT]      = 0;
    FlgKZCP[KZ_PNCPPM_COUNT] = 0;

    if( not PM_IsClaim2( Payment ) )
        // R-maket
        FlgRM[ PNRMPM_SUM       ] = 1;
        FlgRM[ PNRMPM_ACCOUNTP  ] = 1;
        FlgRM[ PNRMPM_CODEKINDP ] = 1;
        FlgRM[ PNRMPM_CODEKIND2P] = 1;
        FlgRM[ PNRMPM_CODEP     ] = 1;
        FlgRM[ PNRMPM_BANKACCP  ] = 1;
        // Swift
        FlgCP[ PNCPPM_PAYFIID   ] = 1;
        FlgCP[ PNCPPM_ACCOUNTP  ] = 1;
        FlgCP[ PNCPPM_CODEKINDP ] = 1;
        FlgCP[ PNCPPM_CODEKINDP2] = 1;
        FlgCP[ PNCPPM_CODEP     ] = 1;
        FlgCP[ PNCPPM_ACCOUNTP  ] = 1;
        // R-maket
        FlgKZRM[ KZPNRMPM_IIK_PAYER ] = 1;
        FlgKZRM[ KZPNRMPM_SUM       ] = 1;
        FlgKZRM[ KZPNRMPM_PayerCode ] = 1;
        FlgKZRM[ KZPNRMPM_BANKP     ] = 1;
        FlgKZRM[ KZPNRMPM_CODEKINDP ] = 1;
        FlgKZRM[ KZPNRMPM_CODEKIND2P] = 1;
        FlgKZRM[ KZPNRMPM_CODEP     ] = 1;
        // Swift
        FlgKZCP[ KZ_PNCPPM_PayerCodeKind ] = 1;
        FlgKZCP[ KZ_PNCPPM_PayerCode     ] = 1;
        FlgKZCP[ KZ_PNCPPM_PayerAccount  ] = 1;
    else
        // R-maket
        FlgRM[ PNRMPM_SUM       ] = 1;
        FlgRM[ PNRMPM_ACCOUNTR  ] = 1;
        FlgRM[ PNRMPM_CODEKINDR ] = 1;
        FlgRM[ PNRMPM_CODEKIND2R] = 1;
        FlgRM[ PNRMPM_CODER     ] = 1;
        FlgRM[ PNRMPM_BANKACCR  ] = 1;
        // Swift
        FlgCP[ PNCPPM_PAYFIID   ] = 1;
        FlgCP[ PNCPPM_ACCOUNTP  ] = 1;
        FlgCP[ PNCPPM_CODEKINDR ] = 1;
        FlgCP[ PNCPPM_CODEKINDR2] = 1;
        FlgCP[ PNCPPM_CODER     ] = 1;
        FlgCP[ PNCPPM_ACCOUNTR  ] = 1;
        //R-Maket
        FlgKZRM[ KZPNRMPM_KINDCODE_RECEIVER ] = 1;
        FlgKZRM[ KZPNRMPM_CODE_RECEIVER     ] = 1;
        FlgKZRM[ KZPNRMPM_RecieverCode      ] = 1;
        FlgKZRM[ KZPNRMPM_IIK_RECEIVER      ] = 1;
        //swift
        FlgKZCP[ KZ_PNCPPM_FI_Code  ] = 1;
        FlgKZCP[ KZ_PNCPPM_Amount   ] = 1;
        FlgKZCP[ KZ_PNCPPM_CodeKind ] = 1;
        FlgKZCP[ KZ_PNCPPM_BankCode ] = 1;
        FlgKZCP[ KZ_PNCPPM_ReceiverCodeKind] = 1;
        FlgKZCP[ KZ_PNCPPM_ReceiverCode    ] = 1;
        FlgKZCP[ KZ_PNCPPM_ReceiverAccount ] = 1;
    end;

    if( PaymentObj.PropStatus == PM_PROP_UNKNOWN )
        FlgRM[ PNRMPM_VALUEDATE ] = 1;
        FlgRM[ PNRMPM_DATE      ] = 1; 
        FlgCP[ PNCPPM_VALUEDATE ] = 1;
        FlgCP[ PNCPPM_DATE      ] = 1;

        FlgKZRM[ KZPNRMPM_VALUEDATE  ] = 1;
        FlgKZRM[ KZPNRMPM_DATE       ] = 1;
        FlgKZCP[ KZ_PNCPPM_ValueDate ] = 1;
        FlgKZCP[ KZ_PNCPPM_Date      ] = 1;
    end;

    Payment.OrderFIID   = Payment.BaseFIID;
    Payment.OrderAmount = Payment.BaseAmount;

    if( not needUseKZpm() )
        stat = PM_ProcessPanel( Payment, 0, NULL, FlgRM  , FlgCP  , NULL, NULL, NULL, true );
    else
        stat = PM_ProcessPanel( Payment, 0, NULL, FlgKZRM, FlgKZCP, NULL, NULL, NULL, true );
    end;

    if( not stat )
        if(PaymentObj.IsCredit())
            Payment.SetReceiverPI( PAYMENTS_GROUP_UNDEF, 
                                   Payment.ReceiverBankID, 
                                   Payment.ReceiverBankCodeKind, 
                                   Payment.ReceiverBankCode, 
                                   Payment.ReceiverBankName,
                                   Payment.ReceiverBankCorrAcc,
                                   Payment.ReceiverFIID, 
                                   1/*CHAPT1*/, 
                                   Payment.ReceiverAccount, 
                                   Payment.Receiver, 
                                   Payment.ReceiverName, 
                                   Payment.ReceiverINN ); 
        else
            Payment.SetPayerPI(  PAYMENTS_GROUP_UNDEF, 
                                 Payment.PayerBankID, 
                                 Payment.PayerBankCodeKind, 
                                 Payment.PayerBankCode, 
                                 Payment.PayerBankName,
                                 Payment.PayerBankCorrAcc,
                                 Payment.PayerFIID, 
                                 1/*CHAPT1*/, 
                                 Payment.PayerAccount, 
                                 Payment.Payer, 
                                 Payment.PayerName, 
                                 Payment.PayerINN );
        end;
    end;

    record nt( notetext );
    var CatList:TArray = GetCategoryForPayment( PaymentObj.PaymentID );
    var i:integer = 0;

    if( not stat )
        if(PaymentObj.LinkPayment(Payment, PMLINK_KIND_RETREDIR ) )
            msgbox(GetErrMsg());
            return 1;
        end;

        // Копируем из исходного платежа категории
        CopyPaymentCategories(Payment, PaymentObj);

        // Копируем из исходного платежа примечания
        CopyPaymentNotes(Payment, PaymentObj);

        PaymentObj.CloseUnknown(); //Закрываем невыясненное свойство платежа

        // Установить признак автозапуска операции.
        BankPayment.LaunchOper = true;
    end;

    return stat;
end;


macro ExecuteStep( doc, first, KindDoc ) 
    var stat = 0;

    stat = CreateBankPayment();

    if(stat) return stat; end;
    /* Закрываем платеж */
    if ( УстановитьСтатусыПлатежа(OPR_PAYM_STATE, OPR_PM_ST_CLOSE))
        MsgBox("Возникла ошибка при смене статусов операции платежа");
        return 1;
    end;

    return 0;
end;


//Jushmanov 2014-02-25 C-19151
macro PostStepAction( message,      /* 1 - выполнение шага; 2 - откат шага;   */
                      errTrn,       /* статус выполнения шага. 0 - ошибки нет */
                      FirstDoc,     /* указатель на первичный документ        */
                      ID_Oper,      /* внутренний идентификатор операции      */
                      Number_Step,  /* Номер шага операции (из настроек)      */
                      KindOper,     /* номер вида операции                    */
                      KindDoc,      /* номер вида первичного документа        */
                      KindStep,     /* вид шага операции                      */
                      ID_Step )     /* внутренний идентификатор шага операции */
    private var logquery, idStep = ID_Step, idOper = ID_Oper;

    if(( message == OP_EXECUTE_STEP ) and (errTrn == 0) and (IsOprMultiExec))
        if ((valtype(idOper) != V_INTEGER) and (valtype(idOper) != V_STRING)) idOper = 0; end;
        if ((valtype(idStep) != V_INTEGER) and (valtype(idStep) != V_STRING)) idStep = 0; end;

        logquery = "UPDATE usr_doprstep_robot_dbt SET t_is_robot_step = chr(88)" +
                   " WHERE t_id_operation = " + idOper + " AND t_id_step = " + idStep;
        ExecSQL(logquery, null, false);
    end;

    return 0;
end;