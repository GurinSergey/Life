import cb_sql;
import rcbCoreInter;
import RcbProtocolView;
import RcbPtkPsdView;
import Календарь;

/* EVG */
import "rsexts.d32";

class InputRestData()
    var inputRestR;
    var inputRestV;
    var inputRest;
end;

private var date_export_ptk_psd;

getRegistryValue("REPTREG/REP_GROUPS/BALANCE_ACCOUNTS/ДАТА_ЭКСПОРТА_ПТК_ПСД", V_INTEGER,  date_export_ptk_psd, null);        

class exportData()
    /*
    chapter - номер главы
    BS - Номер БС;
    AP - вид счета;
    I_SUM_R - Входящий остаток в рублях;
    I_SUM_V - Входящий остаток в валюте;
    I_SUMM - Входящий остаток итого;
    O_ACT_R - Обороты по дебету в рублях;
    O_ACT_V - Обороты по дебету в валюте;
    O_ACT - Обороты по дебету итого;
    O_PAS_R - Обороты по кредиту в рублях;
    O_PAS_V - Обороты по кредиту в валюте;
    O_PAS - Обороты по кредиту итого;
    SUM_R - Исходящий остаток в рублях;
    SUM_V - Исходящий остаток в валюте;
    SUMM - Исходящий остаток итого.
    */
    var chapter;
    var BS;
    var AP;
    var I_SUM_R;
    var I_SUM_V;
    var I_SUMM;
    var O_ACT_R;
    var O_ACT_V;
    var O_ACT;
    var O_PAS_R;
    var O_PAS_V;
    var O_PAS;
    var SUM_R;
    var SUM_V;
    var SUMM;
        /*Проверка нулевых значений*/
    macro isNullAllValues()
        if (chapter <5)
            if ((I_SUM_R == 0)and(I_SUM_V == 0)and(I_SUMM == 0)and(O_ACT_R == 0)and(O_ACT_V == 0)and(O_ACT == 0)and(O_PAS_R == 0)and(O_PAS_V == 0)and(O_PAS == 0)and(SUM_R == 0)and(SUM_V == 0)and(SUMM == 0))
                return true;
            else 
                return false;
            end;        
        elif (chapter = 5)
            if ((I_SUMM == 0)and(O_ACT == 0)and(O_PAS == 0)and(SUMM == 0))
                return true
            else 
                return false
            end;        
        end;
    end;     
end;


class ExportPtkPsdPOperation()
    /*Таблица с балансовыми счетами*/
    private var dataSet;
    /* Текущий отчёт*/
    private var Report = RcbApplication.currentReport;
    /*Текущее представление*/
    private var PtkPsdView;

    // KS 06.10.2010 I-072912 формировать форму 101 ежедневную с призаком выгрузкт в ПТК ПСД Внутримесячная: Константы
    private const Type_BAL    = "BAL";    // KS 06.10.2010 I-072912: Ежемесячная
    private const Type_F101DV = "F101DV"; // KS 06.10.2010 I-072912: На внутримесячную дату

    private var   Type_Exp    = Type_BAL; // KS 06.10.2010 I-072912: По умолчанию

    /* EVG */
    var CopiedToTerm = true,
        TxtDir_term;

    private macro getExportDate()
        var exportDate = Report.context.period.endDate;

        if (date_export_ptk_psd == 0)
            return exportDate + 1;
        else
            exportDate = exportDate + 1;

            while (not isWorkDay(exportDate))
                exportDate = exportDate + 1;
            end;

            return exportDate;
        end;        
    end;

    /*Инициализация представления*/
    private macro initPtkPsdView()
        PtkPsdView = TPtkPsdView("101", getExportDate());
        PtkPsdView.setOutputFile(false);
    end;

    /*Постороение таблицы с балансовыми счетами*/
    private macro initDataSet()

        dataSet = TRsbDataSet("SELECT t_balance,t_kind_account,t_chapter"
        +"\n"+                 "  FROM dbalance_dbt"
        +"\n"+                 "WHERE t_balance NOT LIKE '%ОВП%'"
        +"\n"+                 "  --AND t_kind_account <> 'АП'"
        +"\n"+                 "  --AND t_kind_account <> '0'"
        +"\n"+                 "  AND t_inumplan = " + ЛогическийПланСчетов
        +"\n"+                 "  AND INSTR(t_type_balance, 'T') = 0"
        +"\n"+                 "  AND t_chapter < 6"
        +"\n"+                 "  AND LENGTH(t_balance) = 5"
        +"\n"+                 "ORDER BY t_chapter, t_balance");
    end;
        
    /*Вычисление входящих остатков балансового счета*/
    private macro calcInpitRestBalanceAccount(typeBA, balanceAccount)
        
        var currentInputRestData = InputRestData();               

        if (typeBA == "А")
            currentInputRestData.inputRestR = String((Report.attributeValue("Бн"+balanceAccount+"РуА").scaled + Report.attributeValue("Бн"+balanceAccount+"РуК").scaled - Report.attributeValue("Бн"+balanceAccount+"РуД").scaled):0:0);
            currentInputRestData.inputRestV = String((Report.attributeValue("Бн"+balanceAccount+"ПоА").scaled + Report.attributeValue("Бн"+balanceAccount+"ПоК").scaled - Report.attributeValue("Бн"+balanceAccount+"ПоД").scaled):0:0);          
            currentInputRestData.inputRest  = String((Report.attributeValue("Бн"+balanceAccount+"__А").scaled + Report.attributeValue("Бн"+balanceAccount+"__К").scaled - Report.attributeValue("Бн"+balanceAccount+"__Д").scaled):0:0);
        elif (typeBA == "П")
            currentInputRestData.inputRestR = String((Report.attributeValue("Бн"+balanceAccount+"РуП").scaled - Report.attributeValue("Бн"+balanceAccount+"РуК").scaled + Report.attributeValue("Бн"+balanceAccount+"РуД").scaled):0:0);
            currentInputRestData.inputRestV = String((Report.attributeValue("Бн"+balanceAccount+"ПоП").scaled - Report.attributeValue("Бн"+balanceAccount+"ПоК").scaled + Report.attributeValue("Бн"+balanceAccount+"ПоД").scaled):0:0);          
            currentInputRestData.inputRest  = String((Report.attributeValue("Бн"+balanceAccount+"__П").scaled - Report.attributeValue("Бн"+balanceAccount+"__К").scaled + Report.attributeValue("Бн"+balanceAccount+"__Д").scaled):0:0);
        end;            
        return  currentInputRestData;                 
        onError
            
     end;        

    /*Экспорт данных в файл по одному балансовому счёту*/
    private macro exportStrinIntoFile(expData)
        if (expData.chapter == 5) // KS 29.09.2010 I-070699 Выгрузка формы 101 в ПТК ПСД
            PtkPsdView.printRow(Type_EXP, expData.BS,"BS",expData.BS);  // KS 06.10.2010 I-072912: Выгрузка с нужным типом  
            if (expData.AP == "А")
                PtkPsdView.printRow(Type_EXP, expData.BS,"AP","1");
            else
                PtkPsdView.printRow(Type_EXP, expData.BS,"AP","2");
            end;                
            PtkPsdView.printRow(Type_EXP, expData.BS,"I_SUMM",expData.I_SUMM);
            PtkPsdView.printRow(Type_EXP, expData.BS,"O_ACT",expData.O_ACT);                   
            PtkPsdView.printRow(Type_EXP, expData.BS,"O_PAS",expData.O_PAS);
            PtkPsdView.printRow(Type_EXP, expData.BS,"SUMM",expData.SUMM);
        else
            PtkPsdView.printRow(Type_EXP, expData.BS,"BS",expData.BS);
            if (expData.AP == "А")
                PtkPsdView.printRow(Type_EXP, expData.BS,"AP","1");
            else
                PtkPsdView.printRow(Type_EXP, expData.BS,"AP","2");
            end;                
            PtkPsdView.printRow(Type_EXP, expData.BS,"I_SUM_R",expData.I_SUM_R);
            PtkPsdView.printRow(Type_EXP, expData.BS,"I_SUM_V",expData.I_SUM_V);
            PtkPsdView.printRow(Type_EXP, expData.BS,"I_SUMM",expData.I_SUMM);
            PtkPsdView.printRow(Type_EXP, expData.BS,"O_ACT_R",expData.O_ACT_R);
            PtkPsdView.printRow(Type_EXP, expData.BS,"O_ACT_V",expData.O_ACT_V);
            PtkPsdView.printRow(Type_EXP, expData.BS,"O_ACT",expData.O_ACT);
            PtkPsdView.printRow(Type_EXP, expData.BS,"O_PAS_R",expData.O_PAS_R);
            PtkPsdView.printRow(Type_EXP, expData.BS,"O_PAS_V",expData.O_PAS_V);
            PtkPsdView.printRow(Type_EXP, expData.BS,"O_PAS",expData.O_PAS);
            PtkPsdView.printRow(Type_EXP, expData.BS,"SUM_R",expData.SUM_R);
            PtkPsdView.printRow(Type_EXP, expData.BS,"SUM_V",expData.SUM_V);
            PtkPsdView.printRow(Type_EXP, expData.BS,"SUMM",expData.SUMM);
        end;
        
    end;

    /*Запись в файл экспорта*/
    private macro fillExportFile()
        
        initDataSet();
        initPtkPsdView();

        var attributeValue = null;
        /*
        Если значение настройки равно "TRUE", то выгружаются данные по всем счетам;
        если значение на-стройки равно "FALSE", то выгружаются данные только по тем счетам,
        для которые есть ненулевые значения
        */
        var isPrintNull;
        getRegistryValue( "REPTREG\\REP_GROUPS\\BALANCE_ACCOUNTS\\ЭКСПОРТ ПО РАБОЧЕМУ ПЛАНУ",V_BOOL, isPrintNull, NULL );
        
        /*Текущие эспортируемые данные*/
        var currentExportData = exportData();

        // KS 06.10.2010 I-072912 формировать форму 101 ежедневную с призаком выгрузкт в ПТК ПСД Внутримесячная: Диалог
        Array Text;
        Array Buttons;

        Text(0) = "Укажите с каким признаком выполнить выгрузку";

        Buttons(0) = "Ежемесячная";
        Buttons(1) = "Внутримесячная";

        if (ConfWin( Text, Buttons )==0)  // KS 06.10.2010 I-072912: Ежемесячная
          Type_EXP = Type_BAL;
        else
          Type_EXP = Type_F101DV;
        end;
                                                                          
        while (dataset.moveNext())
            currentExportData.chapter = dataSet.t_chapter;                      
            currentExportData.BS = dataSet.t_balance;
            currentExportData.AP = dataSet.t_kind_account;
                
            if (Report.attributeValue("Бн"+ dataSet.t_balance +"__Д") != null)
                if ((currentExportData.AP == "АП")or(currentExportData.AP == "0"))                      
                    currentExportData.AP = "А";
                end;
                if (currentExportData.chapter < 5)
                    currentExportData.I_SUM_R = calcInpitRestBalanceAccount(currentExportData.AP,currentExportData.BS).inputRestR;
                    currentExportData.I_SUM_V = calcInpitRestBalanceAccount(currentExportData.AP,currentExportData.BS).inputRestV;
                    currentExportData.I_SUMM = calcInpitRestBalanceAccount(currentExportData.AP,currentExportData.BS).inputRest;
                    currentExportData.O_ACT_R = Report.attributeValue("Бн"+dataSet.t_balance+"РуД").scaledAsString;
                    currentExportData.O_ACT_V = Report.attributeValue("Бн"+dataSet.t_balance+"ПоД").scaledAsString;
                    currentExportData.O_ACT = Report.attributeValue("Бн"+dataSet.t_balance+"__Д").scaledAsString;
                    currentExportData.O_PAS_R = Report.attributeValue("Бн"+dataSet.t_balance+"РуК").scaledAsString;
                    currentExportData.O_PAS_V = Report.attributeValue("Бн"+dataSet.t_balance+"ПоК").scaledAsString;
                    currentExportData.O_PAS = Report.attributeValue("Бн"+dataSet.t_balance+"__К").scaledAsString;
                    currentExportData.SUM_R = Report.attributeValue("Бн"+dataSet.t_balance+"Ру"+currentExportData.AP).scaledAsString;
                    currentExportData.SUM_V = Report.attributeValue("Бн"+dataSet.t_balance+"По"+currentExportData.AP).scaledAsString;
                    currentExportData.SUMM = Report.attributeValue("Бн"+dataSet.t_balance+"__"+currentExportData.AP).scaledAsString;
                    if (currentExportData.isNullAllValues() == false) 
                        exportStrinIntoFile(currentExportData)
                    else 
                        if (isPrintNull)
                            exportStrinIntoFile(currentExportData)
                        end;    
                    end;
                elif (currentExportData.chapter == 5)
                    currentExportData.I_SUMM = calcInpitRestBalanceAccount(currentExportData.AP,currentExportData.BS).inputRest;
                    currentExportData.O_ACT = Report.attributeValue("Бн"+dataSet.t_balance+"__Д").scaledAsString;              
                    currentExportData.O_PAS = Report.attributeValue("Бн"+dataSet.t_balance+"__К").scaledAsString;              
                    currentExportData.SUMM = Report.attributeValue("Бн"+dataSet.t_balance+"__"+currentExportData.AP).scaledAsString;           
                        
                    if (currentExportData.isNullAllValues() == false) 
                        exportStrinIntoFile(currentExportData)
                    else 
                        if (isPrintNull)
                            exportStrinIntoFile(currentExportData)
                        end;    
                    end;
                end;                                
            end;
        end;
        onError
            msgBox("Для балансового счёта " + currentExportData.BS + " типа" + currentExportData.AP + "не найдены соответствующие переменные.");           
            
    end;


    /* EVG Метод копирует сформированный файл в каталог на терминале */
    private macro CopyFileToTerm()
        var err;

        getRegistryValue( "PRBB\\TXTDIR", V_STRING, TxtDir_term, err );
        if ( (err > 0) or (strlen(trim(TxtDir_term)) == 0) )
           msgbox ("Не задано значение параметра реестра PRBB\\TXTDIR.|Экспорт выполняется в каталог $С:\\RsPar.");

           TxtDir_term = "$С:\\RsPar";
        end;

        //msgbox (ptkPsdView.getFileName(), "|", ptkPsdView.getFileName_Term( TxtDir_term ) );
        ptkPsdView.resetOutputFile;
        if ( not CopyFile( ptkPsdView.getFileName(), ptkPsdView.getFileName_Term( TxtDir_term ) ) )
           msgbox ("При копировании файла экспорта на терминал произошла ошибка");
           CopiedToTerm = false;
        end;
    end;
    
    
    /*Протокол экспорта в ПТК ПСД*/
    private macro getProtocolView()
        var protocolView  = TProtocolView("ПРОТОКОЛ ЭКСПОРТА В ПТК ПСД");
        
        protocolView.setProtocolOutput();
        protocolView.printHead();
                
        protocolView.printLine("Выгружено строк: " + ptkPsdView.getRowsCount());
        protocolView.printLine("   Количество содержательных строк: " + ptkPsdView.getRowsCount());
        protocolView.printLine("   Количество служебных строк: " + "0");
        protocolView.printLine("Файл экспорта: " + ptkPsdView.getFileName());

        /* EVG Информация о копировании файла экспорта на терминал */
        if ( CopiedToTerm )
           protocolView.printLine("Файл экспорта скопирован на терминал в каталог: " + ptkPsdView.getFileName_Term( TxtDir_term ));
        end;

        protocolView.resetProtocolOutput();
        showProtocol();

    end;

    /*Выполнение экспорта*/
    macro execute()
        fillExportFile();
        
        /* EVG Копирование на терминал */
        CopyFileToTerm();

        getProtocolView();
    end;
end;

var exportPtkPsd = ExportPtkPsdPOperation();
exportPtkPsd.execute();
установитьФлагВозврата(OK_MACRO_FLAG);          
exit(1);

