// -------------------------------------------------------------------------------------------------
// @filename: uf_answer.mac v.1
// @author  : 2012-08-01 zip_z. C-12896
// @desc    : Панель обработки ответа ED244
// @changes : 2012-12-10 zip_z. C-15778
//            2012-12-19 zip_z. I-00302230
//            2012-12-20 zip_z. R-136823 
//            2013-05-14 Gurin S. C-18664-6
//            2013-05-20 Gurin S. add условие замены $AccDocNo$
//            2013-06-22 Gurin S. C-20508
//            2013-07-27 Gurin S. C-21105-6
//            2013-07-08 Gurin S. C-22372 Обработка ED243 с 10,11,99 кодами запроса
//            2014-07-08 Gurin S. R-419016-2 Экранируем символ &
//            2015-01-22 Gurin S. C-31132-7 
// -------------------------------------------------------------------------------------------------

import OraLib, LikePy;
import uf_common, lib_registry, lib_types;

/* номера справочников кодов */
const UF_REF_TYPE_ANSWER  = 10001; // (пользовательский) ED244
const UF_REF_TYPE_REQUEST = 10000; // (пользовательский) ED243

const UF_REF_TYPE_TAX        = 1800;  // (дистрибутив) статус составителя налогового платежа
const UF_REF_TYPE_TAX_GROUND = 1801;  // (дистрибутив) основание налогового платежа
const UF_REF_TYPE_TAX_TYPE   = 1802;  // (дистрибутив) тип налогового платежа

private class UF_KeyValue (_key, _value)
   var key   = _key;
   var value = _value;
end;


/* @desc: поля платежа */
class TPaymentFields ()
    var field60  = 0; // ИНН плательщика                         (поле 60) 
    var field61  = 0; // ИНН получателя                          (поле 61) 
    var field101 = 0; // Статус составителя расчетного документа (поле 101)
    var field102 = 0; // КПП плательщика                         (поле 102)
    var field103 = 0; // КПП получателя                          (поле 103)
    var field104 = 0; // Код бюджетной классификации             (поле 104)
    var field105 = 0; // Код ОКАТО                               (поле 105)
    var field106 = 0; // Основание налогового платежа            (поле 106)
    var field107 = 0; // Налоговый период                        (поле 107)
    var field108 = 0; // Номер налогового документа              (поле 108)
    var field109 = 0; // Дата налогового документа               (поле 109)
    var field110 = 0; // Тип налогового платежа                  (поле 110)
    
    const IS_SET_VALUE = 1; /* значение задано */
end;                

// @desc: класс-описатель полей панели (пригодится для анализа на предмет изменений перед сохранением)
class TDialogFields (d)
   var OriginalEPD_EdNo            = d.rec.OriginalEPD_EdNo;          
   var OriginalEPD_EdDate          = d.rec.OriginalEPD_EdDate;
   var OriginalEPD_EDAuthor        = d.rec.OriginalEPD_EDAuthor;
   var EdDefineRequestCode         = d.rec.EdDefineRequestCode;
   var EdDefineRequestDescr        = d.rec.EdDefineRequestDescr;
   var EdDefineAnswerCode          = d.rec.EdDefineAnswerCode;
   var EdDefineAnswerDescr         = d.rec.EdDefineAnswerDescr;
   var InitialEd_EdNo              = d.rec.InitialEd_EdNo;
   var InitialEd_EdDate            = d.rec.InitialEd_EdDate;
   var InitialEd_EDAuthor          = d.rec.InitialEd_EDAuthor;
   var PayerINN                    = d.rec.PayerINN;
   var PayerKPP                    = d.rec.PayerKPP;
   var PayeeINN                    = d.rec.PayeeINN;
   var PayeeKPP                    = d.rec.PayeeKPP;
   var PayerAcc                    = d.rec.PayerAcc;
   var PayeeAcc                    = d.rec.PayeeAcc;
   var PayerLongName               = d.rec.PayerLongName;
   var PayeeLongName               = d.rec.PayeeLongName;
   var Address                     = d.rec.Address;
   var DrawerStatus                = d.rec.DrawerStatus;
   var TaxPaytKind                 = d.rec.TaxPaytKind;
   var CBC                         = d.rec.CBC;
   var OKATO                       = d.rec.OKATO;
   var AccDocNo                    = d.rec.AccDocNo;
   var PaytReason                  = d.rec.PaytReason;
   var AccDocDate                  = d.rec.AccDocDate;
   var TaxPeriod                   = d.rec.TaxPeriod;
   var Sum                         = d.rec.Sum;
   var DocNo                       = d.rec.DocNo;
   var DocDate                     = d.rec.DocDate;
   var Purpose                     = d.rec.Purpose;                   
   var EDDefineAnswerText          = d.rec.EDDefineAnswerText;                   
   var PayeeCorrAcc                = d.rec.PayeeCorrAcc;                   
   var PayeeBIC                    = d.rec.PayeeBIC;                   
end;    

// @desc  : сравнивает поля классов src и dest.
// @return: true (всё одинаково), false (что-то отличается)
macro CompareDialogFields (src:TDialogFields, dest:TDialogFields)
 return (    
             (src.OriginalEPD_EdNo       == dest.OriginalEPD_EdNo     )
         and (src.OriginalEPD_EdDate     == dest.OriginalEPD_EdDate   )
         and (src.OriginalEPD_EDAuthor   == dest.OriginalEPD_EDAuthor )
         and (src.EdDefineRequestCode    == dest.EdDefineRequestCode  )
         and (src.EdDefineRequestDescr   == dest.EdDefineRequestDescr )
         and (src.EdDefineAnswerCode     == dest.EdDefineAnswerCode   )
         and (src.EdDefineAnswerDescr    == dest.EdDefineAnswerDescr  )
         and (src.InitialEd_EdNo         == dest.InitialEd_EdNo       )
         and (src.InitialEd_EdDate       == dest.InitialEd_EdDate     )
         and (src.InitialEd_EDAuthor     == dest.InitialEd_EDAuthor   )
         and (src.PayerINN               == dest.PayerINN )
         and (src.PayerKPP               == dest.PayerKPP )
         and (src.PayeeINN               == dest.PayeeINN )
         and (src.PayeeKPP               == dest.PayeeKPP )
         and (src.PayerAcc               == dest.PayerAcc )
         and (src.PayeeAcc               == dest.PayeeAcc )
         and (src.PayerLongName          == dest.PayerLongName )
         and (src.PayeeLongName          == dest.PayeeLongName )
         and (src.Address                == dest.Address       )
         and (src.DrawerStatus           == dest.DrawerStatus  )
         and (src.TaxPaytKind            == dest.TaxPaytKind  )
         and (src.CBC                    == dest.CBC      )
         and (src.OKATO                  == dest.OKATO    )
         and (src.AccDocNo               == dest.AccDocNo )
         and (src.PaytReason             == dest.PaytReason )
         and (src.AccDocDate             == dest.AccDocDate )
         and (src.TaxPeriod              == dest.TaxPeriod  )
         and (src.Sum                    == dest.Sum   )
         and (src.DocNo                  == dest.DocNo )
         and (src.DocDate                == dest.DocDate )
         and (src.Purpose                == dest.Purpose )
         and (src.EDDefineAnswerText     == dest.EDDefineAnswerText )
         and (src.PayeeCorrAcc           == dest.PayeeCorrAcc )
         and (src.PayeeBIC               == dest.PayeeBIC )
        );
end; 

// @desc: класс справочника видов запросов/ответов
private class UF_CodeReference (_type:integer, _reqcode)
    var row = null;
    
    // @desc: обработчик событий скроллинга
    macro HandleScroll ( rs, cmd, id, key )
        var ret = CM_DEFAULT;
        if (cmd == DLG_KEY)
            if (key == 13) // Enter
                row = UF_KeyValue (rs.value ("t_code", null, V_STRING), rs.value ("t_name", null, V_STRING)); // пара key-value
                ret = CM_SELECT;
            end;
        end;
        return ret;
    end;
    
    // @desc: конструктор
    macro GetScroll (_type:integer, _reqcode)
        if (isNull(_reqcode)) _reqcode = ""; end;
        var sql = "select t_code, t_name, t_note from dllvalues_dbt where t_list = :m_list";

        if   (_reqcode == "10") sql = sql + " and t_code in (13,14,15,99)"; 
        elif (_reqcode == "11") sql = sql + " and t_code in (09,10,99)";
        elif (_reqcode == "14") sql = sql + " and t_code in (16,99)";
        elif (_reqcode == "15") sql = sql + " and t_code in (17,99)";
        elif (_reqcode == "99") sql = sql + " and t_code in (99)";
        end;

        var col = MakeArray ("t_code", "Код"                 ,  3,  0, -1, 0,
                             "t_name", "Вид запроса (ответа)", 40,  0, -1, 0);
        var cmd = RsdCommand (sql);
        cmd.addParam("m_list", RSDBP_IN, _type, V_INTEGER);

        var rs = RsdRecordSet (cmd, RSDVAL_CLIENT, RSDVAL_STATIC);
        RunScroll (rs, col.size/6, col, null, r2m(this, "HandleScroll"));
    end;
    
    /* явная инициализация сразу же при создании объекта */
    GetScroll (_type, _reqcode);
end;

// @desc: класс проверки кода ответа 2013-07-27 Gurin S. C-21105-6
private class UF_CompareCodeAnswer (_id)
    macro GetCode (_id)
        var sql = " SELECT   listagg (init_eddefinerequestcode, ', ') "
                  "             WITHIN GROUP (ORDER BY paymentid) "
                  "             OVER (PARTITION BY paymentid) "
                  "             AS ans_code  "
                  "   FROM   USR_UF_VIEW_243 "
                  "  WHERE   fname != '-' and paymentid = :m_id ";
        var rs:RsdRecordset = execSQLselect(sql, makeArray (SqlParam ("m_id", _id)));

        while (rs and rs.movenext())
            return rs.value("ans_code");
        end;

        return "";
    end;
end;

class (TRecHandler) UF_Answer ()
    var fname = "";                              // имя файла запроса
    var rs_global = null;                        // DataSet для инициализации панели ввода ответа
    var pf :TPaymentFields = TPaymentFields ();  // описатель налоговых полей документа
    var old_data:TDialogFields;                  // старые данные панели (до редактирования)
    var new_data:TDialogFields;                  // новые данные панели (после редактирования)
    var p       :EDParams     = EDParams (); 
    
    macro UF_Hlp_GetAnswerCodeByRequest (req)
        var retVal = req;
        if (req == "01") retVal = "02"; end;
        return retVal;
    end;
    
    macro UF_HLP_GetXMLData (dlg, _cond)
        var ret = "";
        var self:EDIdentity =  EDIdentity (); // идентифицируем себя :)
        if (_cond == null) _cond = True; end;
       
        // основная "болванка" XML ED244 
        // сорри, что не на MS XML Parser, потому что в гробу я видал его тормоза
        // <ED244 xmlns="urn:cbr-ru:ed:v2.0" EDAuthor="4585161000" EDDate="2012-08-01" EDDefineAnswerCode="05" EDDefineRequestCode="00" EDNo="1174">
        // ret = ret + "<?xml version=\"1.0\" encoding=\"windows-1251\" ?>"               + "\n";
        ret = ret + "<ED244 xmlns=\"urn:cbr-ru:ed:v2.0\" "                             + "\n";
        ret = ret + "       EDAuthor=\"$EDAuthor$\" "                                  + "\n";
        //new ufebs
        ret = ret + "       EDReceiver=\"$EDReceiver$\" "                              + "\n";
        
        ret = ret + "       EDDate=\"$EDDate$\" "                                      + "\n";
        
        
        ret = ret + "       EDDefineRequestCode=\"$EDDefineRequestCode$\" "            + "\n";
        ret = ret + "       EDDefineAnswerCode=\"$EDDefineAnswerCode$\" "              + "\n";
        ret = ret + "       EDNo=\"$EDNo$\">"                                          + "\n";
        
        ret = ret + "    <OriginalEPD EDAuthor=\"$OriginalEPD_EDAuthor$\" "  + "\n";
        ret = ret + "                 EDDate=\"$OriginalEPD_EDDate$\" "      + "\n";
        ret = ret + "                 EDNo=\"$OriginalEPD_EDNo$\"/>"         + "\n";
        if (not((dlg.("EDDefineAnswerCode") == ANS_AMOUNT_NOT_REFUNDED) 
                    or (dlg.("EDDefineAnswerCode") == ANS_AMOUNT_WILL_BE_REFUNDED) or (dlg.("EDDefineAnswerCode") == ANS_REFUNDED_AMOUNT_BY_AGREE)))
        ret = ret + "    <EDDefineAnswerInfo "                               + "\n";

        if (not _cond)
            ret = ret + "                           AccDocDate=\"$AccDocDate$\" "             + "\n";
            ret = ret + "                           AccDocNo=\"$AccDocNo$\" "                 + "\n";
            //new ufebs
            ret = ret + "                           Sum=\"$Sum$\" "                           + "\n";
            ret = ret + "                           PayerAcc=\"$PayerAcc$\" "                 + "\n";
            //ret = ret + "                           PayeeAcc=\"$PayeeAcc$\" "                 + "\n"; //??
        end;                           

        if (_cond)
            if ((dlg.("EDDefineRequestCode") == REQ_ACCOUNT) or 
                (dlg.("EDDefineRequestCode") == REQ_ACCOUNT_NAME))
                if (trim(dlg.("PayeeINN")) != "")
                    ret = ret + "                           PayeeINN=\"$EDPayeeINN$\" "              + "\n";
                end;
                ret = ret + "                           PayeeAcc=\"$PayeeAcc$\" "              + "\n";
            end;
        else
            if ((dlg.("EDDefineAnswerCode") == REQ_ACCOUNT) or 
                (dlg.("EDDefineAnswerCode") == REQ_ACCOUNT_NAME))
                if (trim(dlg.("PayeeINN")) != "")
                    ret = ret + "                           PayeeINN=\"$EDPayeeINN$\" "              + "\n";
                end;
                ret = ret + "                           PayeeAcc=\"$PayeeAcc$\" "              + "\n";
            end;
        end;
                                           
        if (_cond)
            if (dlg.("EDDefineRequestCode") == REQ_INN_ADDRESS)
                if (dlg.("EDDefineAnswerCode") != ANS_TO_USE_OTHER_CODES)
                     ret = ret + "                           PayerINN=\"$EDPayerINN$\" "              + "\n";
                     //Gurin S. 01.10.2014 R-458221-2 
                     //ret = ret + "                           PayeeINN=\"$EDPayeeINN$\" "              + "\n";
                end;
            end;
        else
            if (dlg.("EDDefineAnswerCode") == REQ_INN_ADDRESS)
                if (dlg.("EDDefineAnswerCode") != ANS_TO_USE_OTHER_CODES)
                    ret = ret + "                           PayerINN=\"$EDPayerINN$\" "              + "\n";
                    //Gurin S. 01.10.2014 R-458221-2
                    //ret = ret + "                           PayeeINN=\"$EDPayeeINN$\" "              + "\n";
                end;
            end;
        end;

        if (_cond)
            if (dlg.("EDDefineAnswerCode") == ANS_PROOF_OF_ACCEPT_CASH)
                ret = ret + "                           Sum=\"$Sum$\" "                          + "\n";
            end;
        end;

        if (_cond)
            if (dlg.("EDDefineAnswerCode") == ANS_NEW_BANK_RECV_ACCOUNT)
                ret = ret + "                           PayeeAcc=\"$PayeeAcc$\" "                + "\n";
                ret = ret + "                           PayeeCorrAcc=\"$EDPayeeCorrAcc$\" "      + "\n";
                ret = ret + "                           PayeeBIC=\"$EDPayeeBIC$\" "              + "\n";
            end;
        end;

        //Gurin S/ 07.08.2013
        /*if (not _cond)
            //new ufebs
            //ret = ret + "                           EnterDate=\"$EDEnterDate$\" "              + "\n";
            ret = ret + "                           PayeeCorrAcc=\"$EDPayeeCorrAcc$\" "        + "\n";
            ret = ret + "                           PayeeBIC=\"$EDPayeeBIC$\" "                + "\n";
        end;*/
        
        ret = ret + "                             >"                                        + "\n";

        if (_cond)
            if (dlg.("EDDefineAnswerCode") == ANS_NEW_BANK_RECV_ACCOUNT)
                ret = ret + "        <PayeeLongName>$EDPayeeLongName$</PayeeLongName>"   + "\n";
            end;
        end;
        
        if (_cond)
            if (/*(dlg.("EDDefineRequestCode") == REQ_ACCOUNT) or */
                (dlg.("EDDefineRequestCode") == REQ_PAYER_NAME))
                ret = ret + "        <PayerLongName>$EDPayerLongName$</PayerLongName>"   + "\n";
            end;
        else
            ret = ret + "        <PayerLongName>$EDPayerLongName$</PayerLongName>"   + "\n";
        end;
        
        if (_cond)
            if ((dlg.("EDDefineRequestCode") == REQ_RECV_NAME) or 
                (dlg.("EDDefineRequestCode") == REQ_ACCOUNT_NAME))
                ret = ret + "        <PayeeLongName>$EDPayeeLongName$</PayeeLongName>"   + "\n";
            elif ((dlg.("EDDefineAnswerCode") == REQ_ACCOUNT) or 
                  (dlg.("EDDefineAnswerCode") == REQ_ACCOUNT_NAME))
                if (trim(dlg.("PayeeLongName")) != "")
                    ret = ret + "        <PayeeLongName>$EDPayeeLongName$</PayeeLongName>"   + "\n";
                end;                                        
            end;
        else
            if ((dlg.("EDDefineAnswerCode") == REQ_RECV_NAME) or 
                (dlg.("EDDefineAnswerCode") == REQ_ACCOUNT_NAME))
                ret = ret + "        <PayeeLongName>$EDPayeeLongName$</PayeeLongName>"   + "\n";
            elif ((dlg.("EDDefineAnswerCode") == REQ_ACCOUNT) or 
                  (dlg.("EDDefineAnswerCode") == REQ_ACCOUNT_NAME))
                if (trim(dlg.("PayeeLongName")) != "")
                    ret = ret + "        <PayeeLongName>$EDPayeeLongName$</PayeeLongName>"   + "\n";
                end;                                        
            end;
        end;    
        
        if (_cond)
            if (dlg.("EDDefineRequestCode") == REQ_GROUND)
                ret = ret + "        <Purpose>$EDPurpose$</Purpose>"                     + "\n";
            end;
        else
            if (dlg.("EDDefineAnswerCode") == REQ_GROUND)
                ret = ret + "        <Purpose>$EDPurpose$</Purpose>"                     + "\n";
            end;
        end;
        
        if (_cond)
            if (dlg.("EDDefineRequestCode") == REQ_INN_ADDRESS)
                if (dlg.("EDDefineAnswerCode") != ANS_TO_USE_OTHER_CODES)
                    ret = ret + "        <Address>$EDAddress$</Address>"                     + "\n";
                end;
            end;
        else
            if (dlg.("EDDefineAnswerCode") == REQ_INN_ADDRESS)
                ret = ret + "        <Address>$EDAddress$</Address>"                     + "\n";
            end;
        end;

        if (not _cond) 
            if ((dlg.("EDDefineAnswerCode") == ANS_TO_USE_OTHER_CODES) or (dlg.("EDDefineAnswerCode") == ANS_INFO_BY_USE_PAYM_CARDS) or (dlg.("EDDefineAnswerCode") == ANS_INFO_DETAILS_OF_PAYM_CARDS))
                ret = ret + "        <EDDefineAnswerText>$EDDefineAnswerText$</EDDefineAnswerText>"   + "\n";
            end;
        else
            if ((dlg.("EDDefineAnswerCode") == ANS_TO_USE_OTHER_CODES) or (dlg.("EDDefineAnswerCode") == ANS_INFO_BY_USE_PAYM_CARDS) or (dlg.("EDDefineAnswerCode") == ANS_INFO_DETAILS_OF_PAYM_CARDS))
                ret = ret + "        <EDDefineAnswerText>$EDDefineAnswerText$</EDDefineAnswerText>"   + "\n";
            end;
        end;
        
        if (_cond) 
            if (dlg.("EDDefineRequestCode") == REQ_NEED_INFO_BY_MASK)
                //ret = ret + "        <AccDocAddInfo "                                       + "\n";
                
                    
                if ((this.pf.field60 == this.pf.IS_SET_VALUE) /*or (StrLen (trim (dlg.rec.PayerINN)) > 0)*/)
                    ret = ret + "        <EDFieldList> "                                       + "\n";
                    ret = ret + " <FieldNo> PayerINN </FieldNo> " + "\n";
                    ret = ret + " <FieldValue> \"$EDPayerINN$\" </FieldValue> " + "\n"; 
                    ret = ret + "        </EDFieldList> "                                       + "\n";
                end;
            
                if ((this.pf.field61 == this.pf.IS_SET_VALUE) /*or (StrLen (trim (dlg.rec.PayeeINN)) > 0)*/)
                    ret = ret + "        <EDFieldList> "                                       + "\n";
                    ret = ret + " <FieldNo> PayeeINN </FieldNo> " + "\n";
                    ret = ret + " <FieldValue> \"$EDPayeeINN$\" </FieldValue> " + "\n";       
                    ret = ret + "        </EDFieldList> "                                       + "\n";
                end;
            
                if ((this.pf.field101 == this.pf.IS_SET_VALUE) /*or (StrLen (trim (dlg.rec.DrawerStatus)) > 0)*/)
                    ret = ret + "        <EDFieldList> "                                       + "\n";
                    ret = ret + " <FieldNo> DrawerStatus </FieldNo> " + "\n";
                    ret = ret + " <FieldValue> \"$EDDrawerStatus$\" </FieldValue> " + "\n";       
                    ret = ret + "        </EDFieldList> "                                       + "\n"
                end;
            
                if ((this.pf.field102 == this.pf.IS_SET_VALUE) /*or (StrLen (trim (dlg.rec.PayerKPP)) > 0)*/)
                    ret = ret + "        <EDFieldList> "                                       + "\n";
                    ret = ret + " <FieldNo> PayerKPP </FieldNo> " + "\n";
                    ret = ret + " <FieldValue> \"$EDPayerKPP$\" </FieldValue> " + "\n";       
                    ret = ret + "        </EDFieldList> "                                       + "\n"
                end;
            
                if ((this.pf.field103 == this.pf.IS_SET_VALUE) /*or (StrLen (trim (dlg.rec.PayeeKPP)) > 0)*/)
                    ret = ret + "        <EDFieldList> "                                       + "\n";
                    ret = ret + " <FieldNo> PayeeKPP </FieldNo> " + "\n";
                    ret = ret + " <FieldValue> \"$EDPayeeKPP$\" </FieldValue> " + "\n";       
                    ret = ret + "        </EDFieldList> "                                       + "\n"
                end;
            
                if ((this.pf.field104 == this.pf.IS_SET_VALUE) /*or (StrLen (trim (dlg.rec.CBC)) > 0)*/)
                    ret = ret + "        <EDFieldList> "                                       + "\n";
                    ret = ret + " <FieldNo> CBC </FieldNo> " + "\n";
                    ret = ret + " <FieldValue> \"$EDCBC$\" </FieldValue> " + "\n";       
                    ret = ret + "        </EDFieldList> "                                       + "\n"
                end;
            
                if ((this.pf.field105 == this.pf.IS_SET_VALUE) /*or (StrLen (trim (dlg.rec.OKATO)) > 0)*/)
                    ret = ret + "        <EDFieldList> "                                       + "\n";
                    ret = ret + " <FieldNo> OKATO </FieldNo> " + "\n";
                    ret = ret + " <FieldValue> \"$EDOKATO$\" </FieldValue> " + "\n";       
                    ret = ret + "        </EDFieldList> "                                       + "\n"
                end;
            
                if ((this.pf.field106 == this.pf.IS_SET_VALUE) /*or (StrLen (trim (dlg.rec.PaytReason)) > 0)*/)
                    ret = ret + "        <EDFieldList> "                                       + "\n";
                    ret = ret + " <FieldNo> PaytReason </FieldNo> " + "\n";
                    ret = ret + " <FieldValue> \"$EDPaytReason$\" </FieldValue> " + "\n";       
                    ret = ret + "        </EDFieldList> "                                       + "\n"
                end;
            
                if ((this.pf.field107 == this.pf.IS_SET_VALUE) /*or (StrLen (trim (dlg.rec.TaxPeriod)) > 0)*/)
                    ret = ret + "        <EDFieldList> "                                       + "\n";
                    ret = ret + " <FieldNo> TaxPeriod </FieldNo> " + "\n";
                    ret = ret + " <FieldValue> \"$EDTaxPeriod$\" </FieldValue> " + "\n";       
                    ret = ret + "        </EDFieldList> "                                       + "\n"
                end;
            
                if ((this.pf.field108 == this.pf.IS_SET_VALUE) /*or (StrLen (trim (dlg.rec.DocNo)) > 0)*/)
                    ret = ret + "        <EDFieldList> "                                       + "\n";
                    ret = ret + " <FieldNo> DocNo </FieldNo> " + "\n";
                    ret = ret + " <FieldValue> \"$EDDocNo$\" </FieldValue> " + "\n";       
                    ret = ret + "        </EDFieldList> "                                       + "\n"
                end;
            
                if ((this.pf.field109 == this.pf.IS_SET_VALUE) /*or (StrLen (trim (dlg.rec.DocDate)) > 0)*/)
                    ret = ret + "        <EDFieldList> "                                       + "\n";
                    ret = ret + " <FieldNo> DocDate </FieldNo> " + "\n";
                    ret = ret + " <FieldValue> \"$EDDocDate$\" </FieldValue> " + "\n";       
                    ret = ret + "        </EDFieldList> "                                       + "\n"
                end;
            
                if ((this.pf.field110 == this.pf.IS_SET_VALUE) /*or (StrLen (trim (dlg.rec.TaxPaytKind)) > 0)*/)
                    ret = ret + "        <EDFieldList> "                                       + "\n";
                    ret = ret + " <FieldNo> TaxPaytKind </FieldNo> " + "\n";
                    ret = ret + " <FieldValue> \"$EDTaxPaytKind$\" </FieldValue> " + "\n";       
                    ret = ret + "        </EDFieldList> "                                       + "\n"
                end;
            
                //ret = ret + "/>"                                              + "\n";
            end;
        else
            if (dlg.("EDDefineAnswerCode") == REQ_NEED_INFO_BY_MASK)
            
                if ((this.pf.field61 == this.pf.IS_SET_VALUE) or (StrLen (trim (dlg.rec.PayeeINN)) > 0))
                    ret = ret + "        <EDFieldList> "                                       + "\n";
                    ret = ret + " <FieldNo> PayeeINN </FieldNo> " + "\n";
                    ret = ret + " <FieldValue> \"$EDPayeeINN$\" </FieldValue> " + "\n";       
                    ret = ret + "        </EDFieldList> "                                       + "\n";
                end;
            
                if ((this.pf.field101 == this.pf.IS_SET_VALUE) or (StrLen (trim (dlg.rec.DrawerStatus)) > 0))
                    ret = ret + "        <EDFieldList> "                                       + "\n";
                    ret = ret + " <FieldNo> DrawerStatus </FieldNo> " + "\n";
                    ret = ret + " <FieldValue> \"$EDDrawerStatus$\" </FieldValue> " + "\n";       
                    ret = ret + "        </EDFieldList> "                                       + "\n";
                end;
            
                if ((this.pf.field103 == this.pf.IS_SET_VALUE) or (StrLen (trim (dlg.rec.PayeeKPP)) > 0))
                    ret = ret + "        <EDFieldList> "                                       + "\n";
                    ret = ret + " <FieldNo> PayeeKPP </FieldNo> " + "\n";
                    ret = ret + " <FieldValue> \"$EDPayeeKPP$\" </FieldValue> " + "\n";       
                    ret = ret + "        </EDFieldList> "                                       + "\n";
                end;
            
                if ((this.pf.field104 == this.pf.IS_SET_VALUE) or (StrLen (trim (dlg.rec.CBC)) > 0))
                    ret = ret + "        <EDFieldList> "                                       + "\n";
                    ret = ret + " <FieldNo> CBC </FieldNo> " + "\n";
                    ret = ret + " <FieldValue> \"$EDCBC$\" </FieldValue> " + "\n";       
                    ret = ret + "        </EDFieldList> "                                       + "\n";
                end;
            
                if ((this.pf.field105 == this.pf.IS_SET_VALUE) or (StrLen (trim (dlg.rec.OKATO)) > 0))
                    ret = ret + "        <EDFieldList> "                                       + "\n";
                    ret = ret + " <FieldNo> OKATO </FieldNo> " + "\n";
                    ret = ret + " <FieldValue> \"$EDOKATO$\" </FieldValue> " + "\n";       
                    ret = ret + "        </EDFieldList> "                                       + "\n";
                end;
            
                if ((this.pf.field106 == this.pf.IS_SET_VALUE) or (StrLen (trim (dlg.rec.PaytReason)) > 0))
                    ret = ret + "        <EDFieldList> "                                       + "\n"; 
                    ret = ret + " <FieldNo> PaytReason </FieldNo> " + "\n";
                    ret = ret + " <FieldValue> \"$EDPaytReason$\" </FieldValue> " + "\n";       
                    ret = ret + "        </EDFieldList> "                                       + "\n";
                end;
            
                if ((this.pf.field107 == this.pf.IS_SET_VALUE) or (StrLen (trim (dlg.rec.TaxPeriod)) > 0))
                    ret = ret + "        <EDFieldList> "                                       + "\n"; 
                    ret = ret + " <FieldNo> TaxPeriod </FieldNo> " + "\n";
                    ret = ret + " <FieldValue> \"$EDTaxPeriod$\" </FieldValue> " + "\n";       
                    ret = ret + "        </EDFieldList> "                                       + "\n";
                end;
            
                if ((this.pf.field108 == this.pf.IS_SET_VALUE) or (StrLen (trim (dlg.rec.DocNo)) > 0))
                    ret = ret + "        <EDFieldList> "                                       + "\n"; 
                    ret = ret + " <FieldNo> DocNo </FieldNo> " + "\n";
                    ret = ret + " <FieldValue> \"$EDDocNo$\" </FieldValue> " + "\n";       
                    ret = ret + "        </EDFieldList> "                                       + "\n";

                end;
            
                if ((this.pf.field109 == this.pf.IS_SET_VALUE) or (StrLen (trim (dlg.rec.DocDate)) > 0))
                    ret = ret + "        <EDFieldList> "                                       + "\n"; 
                    ret = ret + " <FieldNo> DocDate </FieldNo> " + "\n";
                    ret = ret + " <FieldValue> \"$EDDocDate$\" </FieldValue> " + "\n";       
                    ret = ret + "        </EDFieldList> "                                       + "\n";

                end;
            
                if ((this.pf.field110 == this.pf.IS_SET_VALUE) or (StrLen (trim (dlg.rec.TaxPaytKind)) > 0))
                    ret = ret + "        <EDFieldList> "                                       + "\n"; 
                    ret = ret + " <FieldNo> TaxPaytKind </FieldNo> " + "\n";
                    ret = ret + " <FieldValue> \"$EDTaxPaytKind$\" </FieldValue> " + "\n";       
                    ret = ret + "        </EDFieldList> "                                       + "\n";
                end;
            
                //ret = ret + "/>"                                              + "\n";
            end;
        end;

        ret = ret + "    </EDDefineAnswerInfo>"                                     + "\n";
        end; //if
        
        ret = ret + "    <InitialED EDAuthor=\"$InitialED_EDAuthor$\" "    + "\n";
        ret = ret + "               EDDate=\"$InitialED_EDDate$\" "        + "\n";
        ret = ret + "               EDNo=\"$InitialED_EDNo$\"/>"           + "\n";

        ret = ret + "</ED244>";
        
        
        /* заполняем данные по ED243, на основании которого мы формируем ответ */
        if (_cond)
            ret = strSubst (ret, "$InitialED_EDNo$"    , trim (dlg.("InitialED_EDNo"    )));
        else
            ret = strSubst (ret, "$InitialED_EDNo$"    , trim ("1"));
        end;
        ret = strSubst (ret, "$InitialED_EDDate$"  , UF_DateYYYYMMDD (dlg.("InitialED_EDDate"  )));
        ret = strSubst (ret, "$InitialED_EDAuthor$", dlg.("InitialED_EDAuthor"));
        
        /* заполняем данные по оригинальному платежу, реквизиты которого мы должны уточнить */
        ret = strSubst (ret, "$OriginalEPD_EDNo$"    , trim (dlg.("OriginalEPD_EDNo"    )));
        ret = strSubst (ret, "$OriginalEPD_EDDate$"  , UF_DateYYYYMMDD (dlg.("OriginalEPD_EDDate"  )));
        ret = strSubst (ret, "$OriginalEPD_EDAuthor$", dlg.("OriginalEPD_EDAuthor"));
        
        /* заполняем данные идентификации стороны (т.е. наши) */
        if (_cond)
            ret = strSubst (ret, "$EDNo$",     self.EdNo);
        else
            ret = strSubst (ret, "$EDNo$",     trim (dlg.("InitialEd_EdNo")));
        end;
        ret = strSubst (ret, "$EDDate$",     self.EDDate);
        ret = strSubst (ret, "$EDAuthor$",   self.EDAuthor);
        //new ufebs
        ret = strSubst (ret, "$EDReceiver$", trim (dlg.("InitialEd_EdAuthor")));         

        /* заполняем данные по запросу и ответу */
        if (_cond)
            ret = strSubst (ret, "$EDDefineRequestCode$", dlg.("EDDefineRequestCode")); 
        else
            ret = strSubst (ret, "$EDDefineRequestCode$", dlg.("EDDefineAnswerCode")); 
        end;    

        if (_cond)
            if ((dlg.("EDDefineAnswerCode") == ANS_AMOUNT_NOT_REFUNDED) or (dlg.("EDDefineAnswerCode") == ANS_AMOUNT_WILL_BE_REFUNDED) 
                 or (dlg.("EDDefineAnswerCode") == ANS_REFUNDED_AMOUNT_BY_AGREE) or (dlg.("EDDefineAnswerCode") == ANS_PROOF_OF_ACCEPT_CASH) 
                 or (dlg.("EDDefineAnswerCode") == ANS_NEW_BANK_RECV_ACCOUNT) or (dlg.("EDDefineAnswerCode") == ANS_TO_USE_OTHER_CODES))
                ret = strSubst (ret, "$EDDefineAnswerCode$" , UF_Hlp_GetAnswerCodeByRequest (dlg.("EDDefineAnswerCode")));
            else
                ret = strSubst (ret, "$EDDefineAnswerCode$" , UF_Hlp_GetAnswerCodeByRequest (dlg.("EDDefineRequestCode")));
            end;
        else
            ret = strSubst (ret, "$EDDefineAnswerCode$" , UF_Hlp_GetAnswerCodeByRequest (dlg.("EDDefineAnswerCode"))); //trim("99")
        end;    
        
        /* всевозможные данные по платежу, в т.ч. налоговые реквизиты - это уже из найденного платежа */
        ret = strSubst (ret, "$EDPayerINN$",     trim (dlg.("PayerINN")));
        ret = strSubst (ret, "$EDPayeeINN$",     trim (dlg.("PayeeINN")));
        ret = strSubst (ret, "$EDDrawerStatus$", trim (dlg.("DrawerStatus")));
        ret = strSubst (ret, "$EDPayerKPP$",     trim (dlg.("PayerKPP")));
        ret = strSubst (ret, "$EDPayeeKPP$",     trim (dlg.("PayeeKPP")));
        ret = strSubst (ret, "$EDCBC$",          trim (dlg.("CBC")));
        ret = strSubst (ret, "$EDOKATO$",        trim (dlg.("OKATO")));
        ret = strSubst (ret, "$EDPaytReason$",   trim (dlg.("PaytReason")));
        ret = strSubst (ret, "$EDTaxPeriod$",    trim (dlg.("TaxPeriod")));
        ret = strSubst (ret, "$EDDocNo$",        trim (dlg.("DocNo")));
        ret = strSubst (ret, "$EDDocDate$",      UF_DateYYYYMMDD (dlg.("DocDate")));
        ret = strSubst (ret, "$EDTaxPaytKind$",  trim (dlg.("TaxPaytKind")));
        
        
        ret = strSubst (ret, "$PayerAcc$",    trim (dlg.("PayerAcc")));
        ret = strSubst (ret, "$PayeeAcc$",    trim (dlg.("PayeeAcc")));
        ret = strSubst (ret, "$AccDocDate$",  UF_DateYYYYMMDD (dlg.("AccDocDate")));

        if (_cond) //20.05.2013 Gurin S.
            ret = strSubst (ret, "$AccDocNo$",    trim (dlg.("AccDocNo")));
        else
            if (strlen(trim (dlg.("AccDocNo"))) > 3)
                ret = strSubst (ret, "$AccDocNo$",   string(int(substr(trim (dlg.("AccDocNo")),strlen(trim (dlg.("AccDocNo")))-2))));
            else
                ret = strSubst (ret, "$AccDocNo$",   trim (dlg.("AccDocNo")));
            end;
        end;
        
        ret = strSubst (ret, "$EDPurpose$",   trim (dlg.("Purpose")));
        ret = strSubst (ret, "$EDAddress$",   trim (dlg.("Address")));
        //new ufebs
        //ret = strSubst (ret, "$Sum$",               string (dlg.("Sum") * 100)); // хмм... ну да, иначе никак...
          ret = strSubst (ret, "$Sum$",               substr( string (double(dlg.("Sum")) * 100),1,strlen( string (double(dlg.("Sum")) * 100))-5)); 

        if (not _cond)
            //ret = strSubst (ret, "$EDEnterDate$",       UF_DateYYYYMMDD(dlg.rs_global.value ("EnterDate", null, V_DATE)));
            ret = strSubst (ret, "$EDPayeeCorrAcc$",    trim(dlg.("PayeeCorrAcc")));
            ret = strSubst (ret, "$EDPayeeBIC$",        trim(dlg.("PayeeBIC")));
        else                                               
            ret = strSubst (ret, "$EDPayeeCorrAcc$",    trim(dlg.("PayeeCorrAcc")));
            ret = strSubst (ret, "$EDPayeeBIC$",        trim(dlg.("PayeeBIC")));
        end;
        
        ret = strSubst (ret, "$EDPayerLongName$",  trim (dlg.("PayerLongName")));
        ret = strSubst (ret, "$EDPayeeLongName$",  trim (dlg.("PayeeLongName")));

        ret = strSubst (ret, "$EDDefineAnswerText$",  trim (dlg.("EDDefineAnswerText")));
        return ret;
    end;
    
    
    // сохранение данных XML ED244 в usr_uf_container.xml_answer 
    macro UF_Hlp_SaveXML244 (dlg, _cond)
        var sql, parm;
        if (_cond == null) _cond = True; end;
        //Gurin S. 25.07.2014 R-419016-2
        var xmldata = UF_StrSubSt(UF_HLP_GetXMLData (dlg, _cond));
        p.readEDParams();
        if (_cond)
            sql  = "begin " +
                   "    update usr_uf_container set is_answer_made = chr (88) where fname = :f1 " +
                   "           and extractvalue (xmldata, '/ED243/OriginalEPD/@EDAuthor', 'xmlns=urn:cbr-ru:ed:v2.0') = :a_EDAuthor " +
                   "           and extractvalue (xmldata, '/ED243/OriginalEPD/@EDDate', 'xmlns=urn:cbr-ru:ed:v2.0')   = to_char (:a_EDDate, 'yyyy-mm-dd') " +
                   "           and extractvalue (xmldata, '/ED243/OriginalEPD/@EDNo', 'xmlns=urn:cbr-ru:ed:v2.0')     = :a_EDNo;" +
            
                   "    update usr_uf_container set xml_answer = xmltype (:xmldata) where fname = :f2" +
                   "           and extractvalue (xmldata, '/ED243/OriginalEPD/@EDAuthor', 'xmlns=urn:cbr-ru:ed:v2.0') = :b_EDAuthor " +
                   "           and extractvalue (xmldata, '/ED243/OriginalEPD/@EDDate', 'xmlns=urn:cbr-ru:ed:v2.0')   = to_char (:b_EDDate, 'yyyy-mm-dd')  " +
                   "           and extractvalue (xmldata, '/ED243/OriginalEPD/@EDNo', 'xmlns=urn:cbr-ru:ed:v2.0')     = :b_EDNo;" +
                   "end; ";
            parm = makeArray (SQLParam ("f1"            ,rs_global.value ("fname"       )), 
                              SQLParam ("a_EDAuthor"    ,rs_global.value ("Or_EDAuthor" )),
                              SQLParam ("a_EDDate"      ,rs_global.value ("Or_EDDate", null, V_DATE )),
                              SQLParam ("a_EDNo"        ,rs_global.value ("Or_EDNo"     )),
                              SQLParam ("xmldata"       ,xmldata                         ), 
                              SQLParam ("f2"            ,rs_global.value ("fname"       )),
                              SQLParam ("b_EDAuthor"    ,rs_global.value ("Or_EDAuthor" )),
                              SQLParam ("b_EDDate"      ,rs_global.value ("Or_EDDate", null, V_DATE )),
                              SQLParam ("b_EDNo"        ,rs_global.value ("Or_EDNo"     ))
                              );  
        else
           /*sql = " MERGE INTO USR_UF_CONTAINER a USING (select 1 from dual) " +
                  "            ON (a.PAYMENTID = :id1 AND a.FNAME = '-') "
                  "       WHEN MATCHED " 
                  "       THEN "
                  "          UPDATE SET "
                  "             a.XML_ANSWER = :xmldata1 "
                  "       WHEN NOT MATCHED " 
                  "       THEN " 
                  "          INSERT (a.FNAME, a.IS_PAYMENT_FOUND, a.IS_ANSWER_MADE, a.XML_ANSWER, a.PAYMENTID, a.ASK_COUNT, a.IS_NOREQUEST, a.FNAME_ED244 ) " +
                  "              VALUES   (:fname, chr(88), chr(88), :xmldata2, :id2, 0, chr(88), :fname_ed244); ";
            parm = makeArray (SQLParam ("id1"           ,rs_global.value ("id")), ////SQLParam ("fname1"        ,rs_global.value ("fname")), 
                              SQLParam ("xmldata1"      ,xmldata), 
                              SQLParam ("fname"         ,rs_global.value ("fname")), 
                              SQLParam ("xmldata2"      ,xmldata), 
                              SQLParam ("id2"           ,rs_global.value ("id")),
                              SQLParam ("fname_ed244"   ,rs_global.value ("fname_ed244"))
                              );*/
            //2013-07-27 Gurin S. C-21105-6
            sql = " INSERT INTO USR_UF_CONTAINER (FNAME, IS_PAYMENT_FOUND, IS_ANSWER_MADE, XML_ANSWER, PAYMENTID, ASK_COUNT, IS_NOREQUEST, FNAME_ED244 ) " +
                  "              VALUES   (:fname, chr(88), chr(88), :xmldata, :id, 0, chr(88), :fname_ed244); ";
            
            parm = makeArray (SQLParam ("fname"         ,rs_global.value ("fname")), 
                              SQLParam ("xmldata"       ,xmldata), 
                              SQLParam ("id"            ,rs_global.value ("id")),
                              SQLParam ("fname_ed244"   ,rs_global.value ("fname_ed244"))
                              );
        end;
        if (not execSQL (sql, parm))
            msgbox ("Не удалось записать в БД XML-ответ ED244");
        else
            msgbox("Ответ сформирован");
        end;
        /*else
            /*Gurin сразу выгружаем XML ED244*/
            if (not _cond)            
                sql  = "select replace (convert (t.xml_answer.extract('/').getStringVal (), 'CL8MSWIN1251', 'RU8PC866'), " + 
                                   "'<?xml version=\"1.0\" encoding=\"CP866\"?>', null) as xml from usr_uf_container t where paymentid = :id and is_norequest = chr(88)";/*fname = :f ";*/
                parm = makeArray (SQLParam ("id", rs_global.value ("id"))); /*SQLParam ("f", rs_global.value ("fname"))*/                         
                sql  = execSQLSelect (sql, parm);
                if (sql.moveNext ())
                    //var out  = string (p.m_txtdir_export, "\\ED244_", trim (rs_global.value ("fname")));
                    var out  = string (p.m_txtdir_export, "\\ED244_", trim (rs_global.value ("fname_ed244")));
                    setOutput (out);
                    println ("<?xml version=\"1.0\" encoding=\"windows-1251\" ?>");
                    println (sql.value ("xml"));
                    setOutput (null, true);
                    sql = "update usr_uf_container set is_sent_file = chr (88), trncount = (trncount + 1), fname_ed244 = :f "
                          "where paymentid = :id and is_norequest = chr(88) " ;/*trim (fname) = :f";*/
                    parm = makeArray (SQLParam ("f",  rs_global.value ("fname_ed244")),
                                      SQLParam ("id", rs_global.value ("id")));
                    execSQL (sql, parm);
                    msgbox ("Файл выгрузки находится по пути " + out);
                else
                    msgbox ("Не удалось получить содержимое XML-контейнера для печати принятого сообщения");
                end;
            end
        end;*/
    end;
    
    // блокируем ненужные поля
    macro UF_Hlp_DisableFields (dlg, _cond)
        // да, нам придется перебирать все поля панели в DisableFields, потому что после
        // DisableFields (dlg) у нас потом не отработает EnableFields.
        if (_cond ==null) _cond = true; end;
        DisableFields (dlg, FldIndex ("EdDefineRequestDescr"));
        DisableFields (dlg, FldIndex ("EdDefineAnswerDescr"));
        DisableFields (dlg, FldIndex ("AccDocNo"));
        DisableFields (dlg, FldIndex ("AccDocDate"));
        DisableFields (dlg, FldIndex ("DrawerStatus"));
        DisableFields (dlg, FldIndex ("PayerINN"));
        DisableFields (dlg, FldIndex ("PayerKPP"));
        DisableFields (dlg, FldIndex ("PayerLongName"));
        DisableFields (dlg, FldIndex ("PayeeINN"));
        DisableFields (dlg, FldIndex ("PayeeKPP"));
        DisableFields (dlg, FldIndex ("PayeeLongName"));
        DisableFields (dlg, FldIndex ("Address"));
        DisableFields (dlg, FldIndex ("Sum"));
        DisableFields (dlg, FldIndex ("Purpose"));
        DisableFields (dlg, FldIndex ("PayerAcc"));
        DisableFields (dlg, FldIndex ("PayeeAcc"));
        DisableFields (dlg, FldIndex ("CBC"));
        DisableFields (dlg, FldIndex ("OKATO"));
        DisableFields (dlg, FldIndex ("PaytReason"));
        DisableFields (dlg, FldIndex ("TaxPeriod"));
        DisableFields (dlg, FldIndex ("DocNo"));
        DisableFields (dlg, FldIndex ("DocDate"));
        DisableFields (dlg, FldIndex ("TaxPaytKind"));
        if (not _cond) 
            DisableFields (dlg, FldIndex ("OriginalEPD_EdNo"));
            DisableFields (dlg, FldIndex ("OriginalEPD_EdDate"));
            DisableFields (dlg, FldIndex ("OriginalEPD_EdAuthor"));
            DisableFields (dlg, FldIndex ("InitialEd_EdNo"));
            DisableFields (dlg, FldIndex ("InitialEd_EdDate"));
            DisableFields (dlg, FldIndex ("InitialEd_EdAuthor"));
            DisableFields (dlg, FldIndex ("EdDefineRequestCode"));
            DisableFields (dlg, FldIndex ("EdDefineAnswerCode"));
        end;
        DisableFields (dlg, FldIndex ("EDDefineAnswerText"));
        DisableFields (dlg, FldIndex ("PayeeCorrAcc"));
        DisableFields (dlg, FldIndex ("PayeeBIC"));
        UpdateFields (dlg);
    end;

    // блокируем "EdDefineRequestCode" формирования ответа ED244 без запроса 
    macro UF_Hlp_DisableFields_simple (dlg)
        if (dlg.("EdDefineRequestCode") == "99")
            DisableFields (dlg, FldIndex ("EdDefineRequestCode"));
        end;
    end;

    macro UF_Hlp_EnableFieldsByCode (dlg)
        if   (dlg.("EdDefineAnswerCode") == "01")
            EnableFields (dlg, FldIndex ("AccDocNo"));
            EnableFields (dlg, FldIndex ("AccDocDate"));
            EnableFields (dlg, FldIndex ("PayerLongName"));
            EnableFields (dlg, FldIndex ("PayeeLongName"));
            EnableFields (dlg, FldIndex ("Sum"));
            EnableFields (dlg, FldIndex ("PayerAcc"));
            EnableFields (dlg, FldIndex ("PayeeAcc"));
    
        elif (dlg.("EdDefineAnswerCode") == "02")
            EnableFields (dlg, FldIndex ("PayeeINN"));
            EnableFields (dlg, FldIndex ("PayeeAcc"));
            EnableFields (dlg, FldIndex ("PayeeLongName"));

        elif (dlg.("EdDefineAnswerCode") == "03")
            // хз, нет в ТЗ
            
        elif (dlg.("EdDefineAnswerCode") == "04")
            EnableFields (dlg, FldIndex ("PayerLongName"));
        
        elif (dlg.("EdDefineAnswerCode") == "05")
            EnableFields (dlg, FldIndex ("PayeeLongName"));
            
        elif (dlg.("EdDefineAnswerCode") == "06")
            EnableFields (dlg, FldIndex ("PayerINN"));
            EnableFields (dlg, FldIndex ("Address"));
            
        elif (dlg.("EdDefineAnswerCode") == "07")
            EnableFields (dlg, FldIndex ("Purpose"));
            
        elif (dlg.("EdDefineAnswerCode") == "08")
            var sql = "select field60, field61, field101, field102, field103, field104, field105, field106, "
                    + " field107, field108, field109, field110 from usr_uf_view_243 where fname = :f"
                    + "   and or_edauthor = :EDAuthor " 
                    + "   and or_eddate   = :EDDate " 
                    + "   and or_edno     = :EDNo ";
                    
            sql = execSQLSelect (sql, makeArray (SQLParam ("f"            ,rs_global.value ("fname"                )),
                                                 SQLParam ("EDAuthor"     ,rs_global.value ("Or_EDAuthor" )),
                                                 SQLParam ("EDDate"       ,rs_global.value ("Or_EDDate", null, V_DATE   )),
                                                 SQLParam ("EDNo"         ,rs_global.value ("Or_EDNo"     ))));
            
            /* если удается прочитать данные запроса ED243, разблокируем только определенные поля*/
            if (sql.moveNext ())
                if (sql.value ("field60" , null, V_INTEGER) == 1) EnableFields (dlg, FldIndex ("PayerINN"));           end;
                if (sql.value ("field61" , null, V_INTEGER) == 1) EnableFields (dlg, FldIndex ("PayeeINN"));           end;
                if (sql.value ("field101", null, V_INTEGER) == 1) EnableFields (dlg, FldIndex ("DrawerStatus"));       end;
                if (sql.value ("field102", null, V_INTEGER) == 1) EnableFields (dlg, FldIndex ("PayerKPP"));           end;
                if (sql.value ("field103", null, V_INTEGER) == 1) EnableFields (dlg, FldIndex ("PayeeKPP"));           end;
                if (sql.value ("field104", null, V_INTEGER) == 1) EnableFields (dlg, FldIndex ("CBC"));                end;
                if (sql.value ("field105", null, V_INTEGER) == 1) EnableFields (dlg, FldIndex ("OKATO"));              end;
                if (sql.value ("field106", null, V_INTEGER) == 1) EnableFields (dlg, FldIndex ("PaytReason"));         end;
                if (sql.value ("field107", null, V_INTEGER) == 1) EnableFields (dlg, FldIndex ("TaxPeriod"));          end;
                if (sql.value ("field108", null, V_INTEGER) == 1) EnableFields (dlg, FldIndex ("DocNo"));              end;
                if (sql.value ("field109", null, V_INTEGER) == 1) EnableFields (dlg, FldIndex ("DocDate"));            end;
                if (sql.value ("field110", null, V_INTEGER) == 1) EnableFields (dlg, FldIndex ("TaxPaytKind"));        end;
                
                /* заполняем информацию TPaymentFields для дальнейшего разбора при сохранении ED244 с кодом ответа 08*/
                this.pf.field60  = sql.value ("field60" , null, V_INTEGER);
                this.pf.field61  = sql.value ("field61" , null, V_INTEGER);
                this.pf.field101 = sql.value ("field101", null, V_INTEGER);
                this.pf.field102 = sql.value ("field102", null, V_INTEGER);
                this.pf.field103 = sql.value ("field103", null, V_INTEGER);
                this.pf.field104 = sql.value ("field104", null, V_INTEGER);
                this.pf.field105 = sql.value ("field105", null, V_INTEGER);
                this.pf.field106 = sql.value ("field106", null, V_INTEGER);
                this.pf.field107 = sql.value ("field107", null, V_INTEGER);
                this.pf.field108 = sql.value ("field108", null, V_INTEGER);
                this.pf.field109 = sql.value ("field109", null, V_INTEGER);
                this.pf.field110 = sql.value ("field110", null, V_INTEGER);
            
            /* если не удается прочитать данные запроса ED243, разблокируем все поля*/
            else
                EnableFields (dlg, FldIndex ("PayerINN"));           // Field60    ИНН плательщика                         (поле 60)  
                EnableFields (dlg, FldIndex ("PayeeINN"));           // Field61    ИНН получателя                          (поле 61)  
                EnableFields (dlg, FldIndex ("DrawerStatus"));       // Field101   Статус составителя расчетного документа (поле 101) 
                EnableFields (dlg, FldIndex ("PayerKPP"));           // Field102   КПП плательщика                         (поле 102) 
                EnableFields (dlg, FldIndex ("PayeeKPP"));           // Field103   КПП получателя                          (поле 103) 
                EnableFields (dlg, FldIndex ("CBC"));                // Field104   Код бюджетной классификации             (поле 104) 
                EnableFields (dlg, FldIndex ("OKATO"));              // Field105   Код ОКАТО                               (поле 105) 
                EnableFields (dlg, FldIndex ("PaytReason"));         // Field106   Основание налогового платежа            (поле 106) 
                EnableFields (dlg, FldIndex ("TaxPeriod"));          // Field107   Налоговый период                        (поле 107) 
                EnableFields (dlg, FldIndex ("DocNo"));              // Field108   Номер налогового документа              (поле 108) 
                EnableFields (dlg, FldIndex ("DocDate"));            // Field109   Дата налогового документа               (поле 109) 
                EnableFields (dlg, FldIndex ("TaxPaytKind"));        // Field110   Тип налогового платежа                  (поле 110) 
            end;

        elif (dlg.("EdDefineAnswerCode") == "09")
            EnableFields (dlg, FldIndex ("Sum"));

        elif (dlg.("EdDefineAnswerCode") == "10")
            EnableFields (dlg, FldIndex ("PayeeLongName"));
            EnableFields (dlg, FldIndex ("PayeeAcc"));
            EnableFields (dlg, FldIndex ("PayeeCorrAcc"));
            EnableFields (dlg, FldIndex ("PayeeBIC"));

        elif (dlg.("EdDefineAnswerCode") == "16")
            EnableFields (dlg, FldIndex ("EDDefineAnswerText"));

        elif (dlg.("EdDefineAnswerCode") == "17")
            EnableFields (dlg, FldIndex ("EDDefineAnswerText"));

        elif (dlg.("EdDefineAnswerCode") == "99")
            EnableFields (dlg, FldIndex ("EDDefineAnswerText"));
        end;
        
        UpdateFields (dlg);
    end;

    macro UF_Hlp_EnableFieldsByCode_simple (dlg)
        if   (dlg.("EdDefineAnswerCode") == "01")
            EnableFields (dlg, FldIndex ("AccDocNo"));
            EnableFields (dlg, FldIndex ("AccDocDate"));
            EnableFields (dlg, FldIndex ("PayerLongName"));
            EnableFields (dlg, FldIndex ("PayeeLongName"));
            EnableFields (dlg, FldIndex ("Sum"));
            EnableFields (dlg, FldIndex ("PayerAcc"));
            EnableFields (dlg, FldIndex ("PayeeAcc"));
    
        elif (dlg.("EdDefineAnswerCode") == "02")
            //Gurin S. 29.10.2014 R-481476-2
            EnableFields (dlg, FldIndex ("PayeeINN"));
            EnableFields (dlg, FldIndex ("PayeeAcc"));
            EnableFields (dlg, FldIndex ("PayeeLongName"));

        elif (dlg.("EdDefineAnswerCode") == "03")
            // хз, нет в ТЗ
            
        elif (dlg.("EdDefineAnswerCode") == "04")
            EnableFields (dlg, FldIndex ("PayerLongName"));
        
        elif (dlg.("EdDefineAnswerCode") == "05")
            EnableFields (dlg, FldIndex ("PayeeLongName"));
            
        elif (dlg.("EdDefineAnswerCode") == "06")
            EnableFields (dlg, FldIndex ("PayerINN"));
            EnableFields (dlg, FldIndex ("Address"));
            
        elif (dlg.("EdDefineAnswerCode") == "07")
            EnableFields (dlg, FldIndex ("Purpose"));
            
        elif (dlg.("EdDefineAnswerCode") == "08")
            EnableFields (dlg, FldIndex ("PayeeINN"));           // Field60    ИНН плательщика                         (поле 60)  
            EnableFields (dlg, FldIndex ("PayeeKPP"));           // Field61    ИНН получателя                          (поле 61)  

        elif (dlg.("EdDefineAnswerCode") == "10")
            EnableFields (dlg, FldIndex ("PayeeCorrAcc"));
            EnableFields (dlg, FldIndex ("PayeeBIC"));

        elif (dlg.("EdDefineAnswerCode") == "16")
            EnableFields (dlg, FldIndex ("EDDefineAnswerText"));

        elif (dlg.("EdDefineAnswerCode") == "17")
            EnableFields (dlg, FldIndex ("EDDefineAnswerText"));

        elif (dlg.("EdDefineAnswerCode") == "99")
            EnableFields (dlg, FldIndex ("EDDefineAnswerText"));
        end;
        
        UpdateFields (dlg);
    end;
    
    macro UF_Hlp_GetDescriptionByCode (ref, code)
        var ret = "";
        var sql = "select t_code, t_name, t_note from dllvalues_dbt where t_list = :m_list and t_code = :m_code";
        
        var cmd = RsdCommand (sql);
        cmd.addParam("m_list", RSDBP_IN, ref,  V_INTEGER);
        cmd.addParam("m_code", RSDBP_IN, code, V_STRING);
        
        var rs = RsdRecordSet (cmd);
        
        if (rs.moveNext ())
            ret = rs.value ("t_name");
        end;
        return ret;

    onError return ret;
    end;
    
    macro PanelHandler ( dlg, cmd, id, key )
        var tmp;

        if   (cmd == DLG_INIT)
            UF_Hlp_DisableFields (dlg);
            UF_Hlp_EnableFieldsByCode (dlg);
            old_data = TDialogFields (dlg);
            message ("Esc - выход, F3 - выбор значения, F9 - сохранить изменения");
        
        // разрешаем ручное заполнение кодов запросов
        elif ((cmd == DLG_KEY) and (id == fldIndex ("EdDefineRequestCode")) and (key != 317) )
            this.("EdDefineRequestDescr") = UF_Hlp_GetDescriptionByCode (UF_REF_TYPE_REQUEST, this.("EdDefineRequestCode"));
            if (this.("EdDefineRequestDescr") == "")
                msgbox ("В справочнике форматов нет кода запроса с номером " + this.("EdDefineRequestCode") + 
                        "|Повторите ввод или воспользуйтесь справочником (F3).");
                return CM_IGNORE;
            else
                UF_Hlp_DisableFields (dlg);
                UF_Hlp_EnableFieldsByCode (dlg);
            end;
        
        // разрешаем ручное заполнение кодов ответов
        elif ((cmd == DLG_KEY) and (id == fldIndex ("EdDefineAnswerCode")) and (key != 317) )
            this.("EdDefineAnswerDescr") = UF_Hlp_GetDescriptionByCode (UF_REF_TYPE_ANSWER, this.("EdDefineAnswerCode"));
            if (this.("EdDefineAnswerDescr") == "")
                msgbox ("В справочнике форматов нет кода ответа с номером " + this.("EdDefineAnswerCode") + 
                        "|Повторите ввод или воспользуйтесь справочником (F3).");
                return CM_IGNORE;
            else
                UF_Hlp_DisableFields (dlg);
                UF_Hlp_EnableFieldsByCode (dlg);
            end;
        
        // F3 на поле "статус составителя"
        elif ((cmd == DLG_KEY) and (key == 317) and (id == fldIndex ("DrawerStatus")) )
            tmp = UF_CodeReference(UF_REF_TYPE_TAX).row;
            if (tmp != null)
                this.("DrawerStatus") = tmp.key;
                UpdateFields (dlg);
            end;
        
        // F3 на поле "тип налогового платежа"
        elif ((cmd == DLG_KEY) and (key == 317) and (id == fldIndex ("TaxPaytKind")) )
            tmp = UF_CodeReference(UF_REF_TYPE_TAX_TYPE).row;
            if (tmp != null)
                this.("TaxPaytKind") = tmp.key;
                UpdateFields (dlg);
            end;
            
        // F3 на поле "основание налогового платежа"
        elif ((cmd == DLG_KEY) and (key == 317) and (id == fldIndex ("PaytReason")) )
            tmp = UF_CodeReference(UF_REF_TYPE_TAX_GROUND).row;
            if (tmp != null)
                this.("PaytReason") = tmp.key;
                UpdateFields (dlg);
            end;
            
        // F3 на поле кода запроса
        elif ((cmd == DLG_KEY) and (key == 317) and (id == fldIndex ("EdDefineRequestCode")) )
            tmp = UF_CodeReference(UF_REF_TYPE_REQUEST).row;
            if (tmp != null)
                this.("EdDefineRequestCode")  = tmp.key;
                this.("EdDefineRequestDescr") = tmp.value;
                UF_Hlp_DisableFields (dlg);
                UF_Hlp_EnableFieldsByCode (dlg);
                UpdateFields (dlg);
            end;
        
        // F3 на поле кода ответа
        elif ((cmd == DLG_KEY) and (key == 317) and (id == fldIndex ("EdDefineAnswerCode")) )
            tmp = UF_CodeReference(UF_REF_TYPE_ANSWER, dlg.("EdDefineRequestCode")).row;
            if (tmp != null)
                this.("EdDefineAnswerCode")  = tmp.key;
                this.("EdDefineAnswerDescr") = tmp.value;
                UF_Hlp_DisableFields (dlg);
                UF_Hlp_EnableFieldsByCode (dlg);
                UpdateFields (dlg);
            end;
        
        // F3 на поле счета плательщика
        elif ((cmd == DLG_KEY) and (key == 317) and (id == fldIndex ("PayerAcc")) )
        
        
        // F3 на поле счета получателя
        elif ((cmd == DLG_KEY) and (key == 317) and (id == fldIndex ("PayeeAcc")) )
        
        
        // F9 - сохранение реквизитов формы
        elif ((cmd == DLG_KEY) and (key == 323))
            new_data = TDialogFields (dlg);
            if ((CompareDialogFields (new_data, old_data) == false) and 
                (GetTrue (true, "Параметры ответа были изменены. Сохранить изменения ?")))
                UF_Hlp_SaveXML244 (dlg);
            end;
        end;
    end;
    
    macro PanelHandler_only_view ( dlg, cmd, id, key )
        UF_Hlp_DisableFields (dlg, false);
    end;

    macro PanelHandler_simple ( dlg, cmd, id, key )
        var tmp, type;

        if   (cmd == DLG_INIT)
            UF_Hlp_DisableFields_simple (dlg);
            UF_Hlp_DisableFields (dlg);
            UF_Hlp_EnableFieldsByCode_simple (dlg);
            old_data = TDialogFields (dlg);
            message ("Esc - выход, F3 - выбор значения, F9 - сохранить изменения");
        
        // разрешаем ручное заполнение кодов запросов
        elif ((cmd == DLG_KEY) and (id == fldIndex ("EdDefineRequestCode")) and (key != 317) )
            this.("EdDefineRequestDescr") = UF_Hlp_GetDescriptionByCode (UF_REF_TYPE_REQUEST, this.("EdDefineRequestCode"));
            if (this.("EdDefineRequestDescr") == "")
                msgbox ("В справочнике форматов нет кода запроса с номером " + this.("EdDefineRequestCode") + 
                        "|Повторите ввод или воспользуйтесь справочником (F3).");
                return CM_IGNORE;
            else
                UF_Hlp_DisableFields (dlg);
                UF_Hlp_EnableFieldsByCode_simple (dlg);
            end;
        
        // разрешаем ручное заполнение кодов ответов
        elif ((cmd == DLG_KEY) and (id == fldIndex ("EdDefineAnswerCode")) and (key != 317) )
            this.("EdDefineAnswerDescr") = UF_Hlp_GetDescriptionByCode (UF_REF_TYPE_ANSWER, this.("EdDefineAnswerCode"));
            if (this.("EdDefineAnswerDescr") == "")
                msgbox ("В справочнике форматов нет кода ответа с номером " + this.("EdDefineAnswerCode") + 
                        "|Повторите ввод или воспользуйтесь справочником (F3).");
                return CM_IGNORE;
            else
                UF_Hlp_DisableFields (dlg);
                UF_Hlp_EnableFieldsByCode_simple (dlg);
            end;
        
        // F3 на поле "статус составителя"
        elif ((cmd == DLG_KEY) and (key == 317) and (id == fldIndex ("DrawerStatus")) )
            tmp = UF_CodeReference(UF_REF_TYPE_TAX).row;
            if (tmp != null)
                this.("DrawerStatus") = tmp.key;
                UpdateFields (dlg);
            end;
        
        // F3 на поле "тип налогового платежа"
        elif ((cmd == DLG_KEY) and (key == 317) and (id == fldIndex ("TaxPaytKind")) )
            tmp = UF_CodeReference(UF_REF_TYPE_TAX_TYPE).row;
            if (tmp != null)
                this.("TaxPaytKind") = tmp.key;
                UpdateFields (dlg);
            end;
            
        // F3 на поле "основание налогового платежа"
        elif ((cmd == DLG_KEY) and (key == 317) and (id == fldIndex ("PaytReason")) )
            tmp = UF_CodeReference(UF_REF_TYPE_TAX_GROUND).row;
            if (tmp != null)
                this.("PaytReason") = tmp.key;
                UpdateFields (dlg);
            end;
            
        // F3 на поле кода запроса
        elif ((cmd == DLG_KEY) and (key == 317) and (id == fldIndex ("EdDefineRequestCode")) )
            tmp = UF_CodeReference(UF_REF_TYPE_REQUEST).row;
            if (tmp != null)
                this.("EdDefineRequestCode")  = tmp.key;
                this.("EdDefineRequestDescr") = tmp.value;
                UF_Hlp_DisableFields (dlg);
                UF_Hlp_EnableFieldsByCode_simple (dlg);
                UpdateFields (dlg);
            end;
        
        // F3 на поле кода ответа
        elif ((cmd == DLG_KEY) and (key == 317) and (id == fldIndex ("EdDefineAnswerCode")) )
            tmp = UF_CodeReference(UF_REF_TYPE_ANSWER).row;
            if (tmp != null)
                this.("EdDefineAnswerCode")  = tmp.key;
                this.("EdDefineAnswerDescr") = tmp.value;
                UF_Hlp_DisableFields (dlg);
                UF_Hlp_EnableFieldsByCode_simple (dlg);
                var comp_code = UF_CompareCodeAnswer.GetCode(dlg.rs_global.value("id"));
                if (comp_code!="")
                    if(index(comp_code, tmp.key) > 0)
                        msgbox("Уже существует запрос ЕД 243 с таким кодом запроса");
                        this.("EdDefineAnswerCode")  = old_data.EdDefineAnswerCode;
                        this.("EdDefineAnswerDescr") = old_data.EdDefineAnswerDescr;
                    else
                        if (not GetTrue(True,"Есть запрос с кодом \""+comp_code+"\" по данному п/п. Продолжить?"))
                            this.("EdDefineAnswerCode")  = old_data.EdDefineAnswerCode;
                            this.("EdDefineAnswerDescr") = old_data.EdDefineAnswerDescr;
                        end;
                    end;
                end;
                UpdateFields (dlg);
            end;
        
        // F3 на поле счета плательщика
        elif ((cmd == DLG_KEY) and (key == 317) and (id == fldIndex ("PayerAcc")) )
        
        
        // F3 на поле счета получателя
        elif ((cmd == DLG_KEY) and (key == 317) and (id == fldIndex ("PayeeAcc")) )
        
        
        // F9 - сохранение реквизитов формы
        elif ((cmd == DLG_KEY) and (key == 323))
            new_data = TDialogFields (dlg);
            if ((CompareDialogFields (new_data, old_data) == false) and 
                (GetTrue (true, "Параметры ответа были изменены. Сохранить изменения ?")))
                UF_Hlp_SaveXML244 (dlg, false);
            end;
            
        end;
    end;
    
    initTRecHandler ("ED_244", RSL_GetLbrPath ("EDLib.lbr", true), true);
    
    macro InitByRowData (_rs, _cond1, _cond2)
        var rs = "";
        if (_cond1 == null) _cond1 = True; end;
        if (_cond2 == null) _cond2 = True; end;
        if (_cond1)
            this.fname = _rs.value ("fname");
            //Gurin S. 17.04.2014 I-00480672-2
            if (_rs.value ("is_payment_found") == "X")
                /* ed243*/
                if (_rs.value ("is_answer_made") != "X")
                    rs =   "select fname, isfound, init_edauthor, init_eddate, init_eddefinerequestcode, init_edno,"
                         + "       or_edauthor, or_eddate, or_edno, accdocdate, accdocno, payeracc,"
                         + "       payeeacc, edsum, drawerstatus, payerinn, payerkpp, payeeinn,"
                         + "       payeekpp, okato, cbc, paytreason, taxperiod, docno,"
                         + "       docdate, taxpaytkind, payerlongname, payeelongname, purpose, address"
                         + " from usr_uf_view_243 where fname = :f"
                         + "   and or_edauthor = :EDAuthor " 
                         + "   and to_char (or_eddate, 'yyyy-mm-dd')   = :EDDate " 
                         + "   and or_edno     = :EDNo ";
            
                /* ed244*/
                else 
                    rs =   "select fname, edauthor, eddate, edno, init_eddefineanswercode, init_eddefinerequestcode,"
                         + "       or_edauthor, or_edno, or_eddate, init_edauthor, init_edno, init_eddate,"
                         + "       accdocdate, accdocno, payeracc, payeeacc, payeecorracc, payeebic, edsum, payerlongname,"
                         + "       payeelongname, purpose, defineanswertext, address, payerinn, payeeinn, drawerstatus,"
                         + "       payerkpp, payeekpp, cbc, okato, paytreason, taxperiod,"
                         + "       docno, docdate, taxpaytkind"
                         + " from usr_uf_view_244 where fname = :f"
                         + "   and or_edauthor = :EDAuthor " 
                         + "   and to_char (or_eddate, 'yyyy-mm-dd')   = :EDDate " 
                         + "   and or_edno     = :EDNo ";
                end;
                rs = execSQLSelect (rs, makeArray (SQLParam ("f"           , _rs.value ("fname"                )),
                                                   SQLParam ("EDAuthor"    , _rs.value ("OriginalEPD_EdAuthor" )),
                                                   SQLParam ("EDDate"      , _rs.value ("OriginalEPD_EdDate"   )),
                                                   SQLParam ("EDNo"        , _rs.value ("OriginalEPD_EdNo"     ))));
                if (rs.moveNext ())
                    if (valType (rs.value ("Or_EdNo"))                   != 26) this.("OriginalEPD_EdNo")     = trim (rs.value ("Or_EdNo"));                    end;
                    if (valType (rs.value ("Or_EdDate", null, V_DATE))   != 26) this.("OriginalEPD_EdDate")   = rs.value ("Or_EdDate", null, V_DATE);    end;
                    if (valType (rs.value ("Or_EdAuthor"))               != 26) this.("OriginalEPD_EdAuthor") = trim (rs.value ("Or_EdAuthor"));                end;
                    if (valType (rs.value ("Init_EdNo"))                 != 26) this.("InitialEd_EdNo")       = trim (rs.value ("Init_EdNo"));                  end;
                    if (valType (rs.value ("Init_EdDate", null, V_DATE)) != 26) this.("InitialEd_EdDate")     = rs.value ("Init_EdDate", null, V_DATE);  end;
                    if (valType (rs.value ("Init_EdAuthor"))             != 26) this.("InitialEd_EdAuthor")   = trim (rs.value ("Init_EdAuthor"));              end;
                    if (valType (rs.value ("Init_EdDefineRequestCode"))  != 26) this.("EdDefineRequestCode")  = trim (rs.value ("Init_EdDefineRequestCode"));   end;
                
                    this.("EdDefineRequestDescr") = trim (UF_Hlp_GetDescriptionByCode   (UF_REF_TYPE_REQUEST, this.("EdDefineRequestCode")));
                    if (InList(trim(rs.value ("Init_EdDefineRequestCode")),10,11) and (_rs.value ("is_answer_made") == "X"))
                        this.("EdDefineAnswerCode")   = trim (rs.value ("Init_EdDefineAnswerCode"));
                    else
                        this.("EdDefineAnswerCode")   = trim (UF_Hlp_GetAnswerCodeByRequest (this.("EdDefineRequestCode")));
                    end;
                    this.("EdDefineAnswerDescr")  = trim (UF_Hlp_GetDescriptionByCode   (UF_REF_TYPE_ANSWER, this.("EdDefineAnswerCode")));
        
                    if (valType (rs.value ("AccDocNo"))      != 26) this.("AccDocNo")      = trim (rs.value ("AccDocNo"));      end;
                    if (valType (rs.value ("AccDocDate"))    != 26) this.("AccDocDate")    = rs.value ("AccDocDate");    end;
                    if (valType (rs.value ("DrawerStatus"))  != 26) this.("DrawerStatus")  = trim (rs.value ("DrawerStatus"));  end;
                    if (valType (rs.value ("PayerINN"))      != 26) this.("PayerINN")      = trim (rs.value ("PayerINN"));      end;
                    if (valType (rs.value ("PayerKPP"))      != 26) this.("PayerKPP")      = trim (rs.value ("PayerKPP"));      end;
                    if (valType (rs.value ("PayerLongName")) != 26) this.("PayerLongName") = trim (rs.value ("PayerLongName")); end;
                    if (valType (rs.value ("PayeeINN"))      != 26) this.("PayeeINN")      = trim (rs.value ("PayeeINN"));      end;
                    if (valType (rs.value ("PayeeKPP"))      != 26) this.("PayeeKPP")      = trim (rs.value ("PayeeKPP"));      end;
                    if (_rs.value ("is_answer_made") != "X")
                        this.("EDDefineAnswerText") = "";
                    else
                        if (valType (rs.value ("DefineAnswerText")) != 26) this.("EDDefineAnswerText") = trim (rs.value ("DefineAnswerText")); end;
                    end;
                    if (valType (rs.value ("Address"))       != 26) this.("Address")       = trim (rs.value ("Address"));       end;
                    if (valType (rs.value ("EdSum"))         != 26) this.("Sum")           = money(rs.value ("EdSum")) / 100;   end;
                    if (valType (rs.value ("Purpose"))       != 26) this.("Purpose")       = trim (rs.value ("Purpose"));       end;
                    if (valType (rs.value ("PayeeLongName")) != 26) this.("PayeeLongName") = trim (rs.value ("PayeeLongName")); end;
                    if (valType (rs.value ("PayerAcc"))      != 26) this.("PayerAcc")      = trim (rs.value ("PayerAcc"));      end;
                    if (valType (rs.value ("PayeeAcc"))      != 26) this.("PayeeAcc")      = trim (rs.value ("PayeeAcc"));  end;
                    if (_rs.value ("is_answer_made") != "X")
                        this.("PayeeCorrAcc")  = "";
                        this.("PayeeBIC")      = "";
                    else
                        if (valType (rs.value ("PayeeCorrAcc"))  != 26) this.("PayeeCorrAcc")  = trim (rs.value ("PayeeCorrAcc"));  end;
                        if (valType (rs.value ("PayeeBIC"))      != 26) this.("PayeeBIC")      = trim (rs.value ("PayeeBIC"));      end;
                    end;
                    if (valType (rs.value ("CBC"))           != 26) this.("CBC")           = trim (rs.value ("CBC"));           end;
                    if (valType (rs.value ("OKATO"))         != 26) this.("OKATO")         = trim (rs.value ("OKATO"));         end;
                    if (valType (rs.value ("PaytReason"))    != 26) this.("PaytReason")    = trim (rs.value ("PaytReason"));    end;
                    if (valType (rs.value ("TaxPeriod"))     != 26) this.("TaxPeriod")     = trim (rs.value ("TaxPeriod"));     end;
                    if (valType (rs.value ("DocNo"))         != 26) this.("DocNo")         = trim (rs.value ("DocNo"));         end;
                    if (valType (rs.value ("TaxPaytKind"))   != 26) this.("TaxPaytKind")   = trim (rs.value ("TaxPaytKind"));   end;
                                                                                
                    if ((valType (rs.value ("DocDate")) != 26) and (trim (rs.value ("DocDate")) != ""))                
                        if (trim (rs.value ("DocDate")) == "0") 
                            this.("DocDate") = "00.00.0000"; 
                        else
                            this.("DocDate")       = trim (rs.value ("DocDate"));         
                        end;
                    end;
                
                    this.rs_global = rs;
                
                    return runDialog (this, R2M (this, "PanelHandler"));
                else
                    msgbox ("Нет данных по исходному платежу для формирования ответа ED244|Платёж отсутствует в RS-Bank (1)");
                end;
            else
                msgbox ("Нет данных по исходному платежу для формирования ответа ED244|Платёж отсутствует в RS-Bank (2)");
            end;
        else
            if (_cond2)
                 rs =   "select fname, edauthor, eddate, edno, init_eddefineanswercode, init_eddefinerequestcode,"
                         + "       or_edauthor, or_edno, or_eddate, init_edauthor, init_edno, init_eddate,"
                         + "       accdocdate, accdocno, payeracc, payeeacc, payeecorracc, payeebic, edsum, payerlongname,"
                         + "       payeelongname, purpose, defineanswertext, address, payerinn, payeeinn, drawerstatus,"
                         + "       payerkpp, payeekpp, cbc, okato, paytreason, taxperiod,"
                         + "       docno, docdate, taxpaytkind, id, fname_ed244"
                         + " from usr_uf_view_244 where id = :id and IS_NOREQUEST = 'X'"
                         +"       and edauthor = :EDAuthor and to_char (eddate, 'yyyy-mm-dd') = :EDDate and edno = :EDNo ";


                rs = execSQLSelect (rs, makeArray (SQLParam ("id"          , _rs.value ("paymentid"       )),
                                                   SQLParam ("EDAuthor"    , _rs.value ("EDAuthor_244"  )),
                                                   SQLParam ("EDDate"      , _rs.value ("EDDate_244"    )),
                                                   SQLParam ("EDNo"        , _rs.value ("EDNo_244"      ))));

                var tmp_init_edno;
                generateReference (3,       tmp_init_edno);
                tmp_init_edno = int(tmp_init_edno) + 600000;

                if (rs.moveNext ())
                    if (valType (rs.value ("Or_EdNo"))                   != 26) this.("OriginalEPD_EdNo")     = trim (rs.value ("Or_EdNo"));                    end;
                    if (valType (rs.value ("Or_EdDate", null, V_DATE))   != 26) this.("OriginalEPD_EdDate")   = rs.value ("Or_EdDate", null, V_DATE);    end;
                    if (valType (rs.value ("Or_EdAuthor"))               != 26) this.("OriginalEPD_EdAuthor") = trim (rs.value ("Or_EdAuthor"));                end;
                    if (valType (rs.value ("Init_EdNo"))                 != 26) this.("InitialEd_EdNo")       = trim(string(tmp_init_edno));  end; //trim (string(int(_rs.value ("EDNO_244")) + 1));                  end;//trim(string(tmp_init_edno));  end;// //Gurin S. 25.06.2013 //trim (rs.value ("Init_EdNo"));
                    if (valType (rs.value ("Init_EdDate", null, V_DATE)) != 26) this.("InitialEd_EdDate")     = rs.value ("Init_EdDate", null, V_DATE);  end;
                    if (valType (rs.value ("Init_EdAuthor"))             != 26) this.("InitialEd_EdAuthor")   = trim (rs.value ("Init_EdAuthor"));              end;
                    if (valType (rs.value ("Init_EdDefineRequestCode"))  != 26) this.("EdDefineRequestCode")  = trim (rs.value ("Init_EdDefineAnswerCode"));   end;
                
                    this.("EdDefineRequestDescr") = trim (UF_Hlp_GetDescriptionByCode   (UF_REF_TYPE_REQUEST, this.("EdDefineRequestCode")));
                    //this.("EdDefineAnswerCode")   = trim (UF_Hlp_GetAnswerCodeByRequest (this.("EdDefineRequestCode"))); 
                    if (valType (rs.value ("Init_EdDefineAnswerCode"))  != 26) this.("EdDefineAnswerCode")  = trim (rs.value ("Init_EdDefineAnswerCode"));   end;
                    this.("EdDefineAnswerDescr")  = trim (UF_Hlp_GetDescriptionByCode   (UF_REF_TYPE_ANSWER, this.("EdDefineAnswerCode")));
        
                    if (valType (rs.value ("AccDocNo"))      != 26) this.("AccDocNo")      = trim (rs.value ("AccDocNo"));      end;
                    if (valType (rs.value ("AccDocDate"))    != 26) this.("AccDocDate")    = rs.value ("AccDocDate");    end;
                    if (valType (rs.value ("DrawerStatus"))  != 26) this.("DrawerStatus")  = trim (rs.value ("DrawerStatus"));  end;
                    if (valType (rs.value ("PayerINN"))      != 26) this.("PayerINN")      = trim (rs.value ("PayerINN"));      end;
                    if (valType (rs.value ("PayerKPP"))      != 26) this.("PayerKPP")      = trim (rs.value ("PayerKPP"));      end;
                    if (valType (rs.value ("PayerLongName")) != 26) this.("PayerLongName") = trim (rs.value ("PayerLongName")); end;
                    if (valType (rs.value ("PayeeINN"))      != 26) this.("PayeeINN")      = trim (rs.value ("PayeeINN"));      end;
                    if (valType (rs.value ("PayeeKPP"))      != 26) this.("PayeeKPP")      = trim (rs.value ("PayeeKPP"));      end;
                    if (valType (rs.value ("PayeeLongName")) != 26) this.("PayeeLongName") = trim (rs.value ("PayeeLongName")); end;
                    if (valType (rs.value ("Address"))       != 26) this.("Address")       = trim (rs.value ("Address"));       end;
                    if (valType (rs.value ("EdSum"))         != 26) this.("Sum")           = money(rs.value ("EdSum")) / 100;   end;
                    if (valType (rs.value ("Purpose"))       != 26) this.("Purpose")       = trim (rs.value ("Purpose"));       end;
                    if (valType (rs.value ("DefineAnswerText")) != 26) this.("EDDefineAnswerText") = trim (rs.value ("DefineAnswerText")); end;
                    if (valType (rs.value ("PayerAcc"))      != 26) this.("PayerAcc")      = trim (rs.value ("PayerAcc"));      end;
                    if (valType (rs.value ("PayeeAcc"))      != 26) this.("PayeeAcc")      = trim (rs.value ("PayeeAcc"));      end;
                    if (valType (rs.value ("CBC"))           != 26) this.("CBC")           = trim (rs.value ("CBC"));           end;
                    if (valType (rs.value ("OKATO"))         != 26) this.("OKATO")         = trim (rs.value ("OKATO"));         end;
                    if (valType (rs.value ("PaytReason"))    != 26) this.("PaytReason")    = trim (rs.value ("PaytReason"));    end;
                    if (valType (rs.value ("TaxPeriod"))     != 26) this.("TaxPeriod")     = trim (rs.value ("TaxPeriod"));     end;
                    if (valType (rs.value ("DocNo"))         != 26) this.("DocNo")         = trim (rs.value ("DocNo"));         end;
                    if (valType (rs.value ("TaxPaytKind"))   != 26) this.("TaxPaytKind")   = trim (rs.value ("TaxPaytKind"));   end;
                                                                                
                    if ((valType (rs.value ("DocDate")) != 26) and (trim (rs.value ("DocDate")) != ""))                
                        this.("DocDate")       = trim (rs.value ("DocDate"));         
                    end;
                
                    this.rs_global = rs;
                    //return runDialog (this, R2M (this, "PanelHandler_only_view"));  
                    return runDialog (this, R2M (this, "PanelHandler_simple"));
                end;
            else
                if (_rs.moveNext ())
                    if (valType (_rs.value ("Or_EdNo"))                   != 26) this.("OriginalEPD_EdNo")     = int(_rs.value ("Or_EdNo"));                    end; //Gurin убрал trim
                    if (valType (_rs.value ("Or_EdDate", null, V_DATE))   != 26) this.("OriginalEPD_EdDate")   = _rs.value ("Or_EdDate", null, V_DATE);    end;
                    if (valType (_rs.value ("Or_EdAuthor"))               != 26) this.("OriginalEPD_EdAuthor") = trim (_rs.value ("Or_EdAuthor"));                end;
                    if (valType (_rs.value ("Init_EdNo"))                 != 26) this.("InitialEd_EdNo")       = trim (_rs.value ("Init_EdNo"));                  end;
                    if (valType (_rs.value ("Init_EdDate", null, V_DATE)) != 26) this.("InitialEd_EdDate")     = _rs.value ("Init_EdDate", null, V_DATE);  end;
                    if (valType (_rs.value ("Init_EdAuthor"))             != 26) this.("InitialEd_EdAuthor")   = trim (_rs.value ("Init_EdAuthor"));              end;
                    if (valType (_rs.value ("Init_EdDefineRequestCode"))  != 26) this.("EdDefineRequestCode")  = trim (_rs.value ("Init_EdDefineRequestCode"));   end;
                
                    this.("EdDefineRequestDescr") = trim (UF_Hlp_GetDescriptionByCode   (UF_REF_TYPE_REQUEST, this.("EdDefineRequestCode")));
                    this.("EdDefineAnswerCode")   = trim (UF_Hlp_GetAnswerCodeByRequest (/*"99*/this.("EdDefineRequestCode")));
                    this.("EdDefineAnswerDescr")  = trim (UF_Hlp_GetDescriptionByCode   (UF_REF_TYPE_ANSWER, this.("EdDefineAnswerCode")));
        
                    if (valType (_rs.value ("AccDocNo"))      != 26) this.("AccDocNo")      = trim (_rs.value ("AccDocNo"));      end;
                    if (valType (_rs.value ("AccDocDate"))    != 26) this.("AccDocDate")    = _rs.value ("AccDocDate");    end;
                    if (valType (_rs.value ("DrawerStatus"))  != 26) this.("DrawerStatus")  = trim (_rs.value ("DrawerStatus"));  end;
                    if (valType (_rs.value ("PayerINN"))      != 26) this.("PayerINN")      = trim (_rs.value ("PayerINN"));      end;
                    if (valType (_rs.value ("PayerKPP"))      != 26) this.("PayerKPP")      = trim (_rs.value ("PayerKPP"));      end;
                    if (valType (_rs.value ("PayerLongName")) != 26) this.("PayerLongName") = trim (_rs.value ("PayerLongName")); end;
                    if (valType (_rs.value ("PayeeINN"))      != 26) this.("PayeeINN")      = trim (_rs.value ("PayeeINN"));      end;
                    if (valType (_rs.value ("PayeeKPP"))      != 26) this.("PayeeKPP")      = trim (_rs.value ("PayeeKPP"));      end;
                    if (valType (_rs.value ("PayeeLongName")) != 26) this.("PayeeLongName") = trim (_rs.value ("PayeeLongName")); end;
                    if (valType (_rs.value ("Address"))       != 26) this.("Address")       = trim (_rs.value ("Address"));       end;
                    if (valType (_rs.value ("EdSum"))         != 26) this.("Sum")           = money(_rs.value ("EdSum")) / 100;   end;

                    //if (valType (_rs.value ("EnterDate", null, V_DATE)) != 26) this.("EnterDate")     = _rs.value ("EnterDate", null, V_DATE);  end;

                    if (valType (_rs.value ("Purpose"))            != 26) this.("Purpose")            = trim (_rs.value ("Purpose"));       end;
                    this.("EDDefineAnswerText") = "";                                end;
                    //if (valType (_rs.value ("DefineAnswerText")) != 26) this.("EDDefineAnswerText") = trim (_rs.value ("DefineAnswerText")); end;
                    if (valType (_rs.value ("PayerAcc"))           != 26) this.("PayerAcc")           = trim (_rs.value ("PayerAcc"));      end;
                    if (valType (_rs.value ("PayeeAcc"))           != 26) this.("PayeeAcc")           = trim (_rs.value ("PayeeAcc"));      end;
                    if (valType (_rs.value ("CBC"))                != 26) this.("CBC")                = trim (_rs.value ("CBC"));           end;
                    if (valType (_rs.value ("OKATO"))              != 26) this.("OKATO")              = trim (_rs.value ("OKATO"));         end;
                    if (valType (_rs.value ("PaytReason"))         != 26) this.("PaytReason")         = trim (_rs.value ("PaytReason"));    end;
                    if (valType (_rs.value ("TaxPeriod"))          != 26) this.("TaxPeriod")          = trim (_rs.value ("TaxPeriod"));     end;
                    if (valType (_rs.value ("DocNo"))              != 26) this.("DocNo")              = trim (_rs.value ("DocNo"));         end;
                    if (valType (_rs.value ("TaxPaytKind"))        != 26) this.("TaxPaytKind")        = trim (_rs.value ("TaxPaytKind"));   end;
                                                                            
                    if ((valType (_rs.value ("DocDate")) != 26) and (trim (_rs.value ("DocDate")) != ""))                
                        this.("DocDate")       = trim (_rs.value ("DocDate"));         
                    end;
                
                    this.rs_global = _rs;
                
                    return runDialog (this, R2M (this, "PanelHandler_simple"));
                end;
            end;
        end;
    end;
end;

// var a = UF_Answer.InitByRowData ();