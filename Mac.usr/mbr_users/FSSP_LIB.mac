// -------------------------------------------------------------------------------------------------
// @filename: FSSP_LIB.mac 
// @desc    : Библиотека ФССП
// @changes : 16.07.2013 Golovkin переименовал compareName в compareNames, ибо вылезают ошибки переопределения
//          : 29.10.2015 DPN R-624904-2 Добавил тег Dept отправителя
//          : 03.11.2015 DPN R-626409-2 Тег нужен только для многофилиальных банков. Для остальных его значение null, поэтому выводить не нужно
// -------------------------------------------------------------------------------------------------
import RSD, Globals, RsExts;
import lib_types, KeyCodes, lib_registry, fssp_xml_lib;

/**
 * Golovkin перенос функций и костант из fssp_loader.mac для использования их в роботе
 */
const MT_UNKNOWN                  = -1;
const MT_QUERY                    = 1;
const MT_ACCOUNT_QUERY            = 2;
const MT_IP_ACT_FIND_ACCOUNT      = 3;
const MT_IP_ACT_ARREST_ACCMONEY   = 4;
const MT_IP_ACT_ENDARREST_ARM_3   = 5;
const MT_IP_ACT_ENDARREST_ARM_1_2 = 6;
const MT_IP_ACT_ENDARR_GMONEY     = 7;
const MT_IP_ACT_GACCOUNT_MONEY    = 8;
const MT_IP_ACT_ENDGACCOUNT_MONEY = 9;
/*************************************************************************************/

class TFSSP_Settings()
    var fssp_dir_import = RSL_GetRegistryValue("PRBB/FSSPPATH/IN"); 
    var fssp_dir_oldmsg = RSL_GetRegistryValue("PRBB/FSSPPATH/OLDMES"); 
    var fssp_dir_export = RSL_GetRegistryValue("PRBB/FSSPPATH/OUT");     
end;

macro isVIPAccount( acc:string )
    private var cmd,rs;

    cmd = RsdCommand( " SELECT   1 "
                      "   FROM   daccount_dbt acc, ddp_dep_dbt dep "
                      "  WHERE       acc.t_branch = dep.t_code "
                      "          AND dep.t_name = '012' "                    
                      "          AND acc.t_account = :account " );
    cmd.addparam( "", RSDBP_IN, acc );

    rs = RsdRecordset( cmd );

    if( rs.movenext ) return true; else return false; end;
onerror
    return false;
end;

macro insertAccLinks(MesID, Acc, ClientID)
   var sql = "insert into USR_FSSP_ACCOUNTS_LINK(T_MES_ID, T_ACCOUNT, T_CLIENT_ID) values(?, ?, ?)";
   execSQL(sql, makeArray(SQLParam("",MesID), SQLParam("",Acc), SQLParam("",ClientID)));
end;

macro saveAccountForTmp( mesId, acc, isVip, isErr, comment )
    private var cmd;
    private var Vip, Err;

    if( isVip ) Vip = strFor(88); else Vip = strFor(0); end;
    if( isErr ) Err = strFor(88); else Err = strFor(0); end;

    cmd = RsdCommand( " INSERT INTO USR_FSSP_ACCOUNTS_TMP VALUES ( :mesId, :acc, :vip, :err, :cmmnt ) " );
    cmd.addparam( "", RSDBP_IN, mesId   );
    cmd.addparam( "", RSDBP_IN, acc     );
    cmd.addparam( "", RSDBP_IN, vip     );
    cmd.addparam( "", RSDBP_IN, err     );
    cmd.addparam( "", RSDBP_IN, comment );
    cmd.execute;
end;

/*
CREATE GLOBAL TEMPORARY TABLE USR_FSSP_PACKXML_tmp
(
  ID   NUMBER(1),
  XML  CLOB
)
ON COMMIT PRESERVE ROWS
*/
// форматирование XML документа
macro setSerializeForFile(InFileName)
   var hd, strm, strm2, sql, rs;
   strm = TStream(InFileName, "R");               
   hd   = TRecHandler ("ClobRead", makeArray("Clob", V_STRING, strm.getsize, 0, 0));   
   execSQL("truncate table USR_FSSP_PACKXML_tmp");
   execSQL("insert into USR_FSSP_PACKXML_tmp values(1, empty_clob())");
   sql = " select id, xml from USR_FSSP_PACKXML_tmp where id = 1 for update";   
   rs  = RsdRecordset(RsdCommand(sql), null, RSDVAL_STATIC);
   strm.read2(hd); 
   rs.bloblimitsize = 1;
   if (rs.moveNext())
       rs.edit;       
       rs.Fld( 1 ).Write(hd);
       rs.update;     
   end;    
   macro setXMLSERIALIZE()
      execSQL("update USR_FSSP_PACKXML_TMP  set XML =  XMLSERIALIZE(DOCUMENT XMLTYPE(RemoveSpecialCharacter(XML)) INDENT SIZE = 4) ");
   onError()
   end;

   setXMLSERIALIZE();
         // Golovkin меняю кодировку
   sql = "  SELECT   1,                  REPLACE (CONVERT (XMLTYPE(XML).GETCLOBVAL(),'CL8MSWIN1251','RU8PC866'), 'CP866', 'WINDOWS-1251')  VAL, "
         "           DBMS_LOB.GETLENGTH (REPLACE (CONVERT (XMLTYPE(XML).GETCLOBVAL(),'CL8MSWIN1251','RU8PC866'), 'CP866', 'WINDOWS-1251')) LEN  "
         "    FROM   USR_FSSP_PACKXML_TMP ";

   rs = RsdRecordset(sql, null, RSDVAL_STATIC);                         
   if (rs and rs.moveNext())        
      hd = null; // Обязательно!!!
      hd = TRecHandler ("ClobRead", makeArray("Clob", V_STRING , rs.value("len", null, v_integer), 0, 0));   
      rs.Fld(1).Read(hd);      
      strm2 = TStream(InFileName, "W");
      strm2.Write2(hd);   
      strm2.flush();
   end;
end;

macro regAnswer( mes_id, answer_key )
    private var cmd;

    cmd = RsdCommand( " INSERT INTO USR_FSSP_ANSWER ( "
                      "                                 T_ID, "
                      "                                 T_MES_ID, "
                      "                                 T_ANSWER_DATE, "
                      "                                 T_ANSWER_TIME, "
                      "                                 T_ANSWERKEY, "
                      "                                 T_OPER "
                      "            ) "
                      "   VALUES   ( "
                      "                0, " 
                      "                :MES_ID, "
                      "                TO_CHAR (SYSDATE, 'DD.MM.YYYY'), "
                      "                TO_DATE ( "
                      "                   '01.01.0001 ' "
                      "                   || SUBSTR (TO_CHAR (SYSDATE, 'DD.MM.YYYY HH24:MI:SS'), 12), "
                      "                   'DD.MM.YYYY HH24:MI:SS' "
                      "                ), "
                      "                :ANSWERKEY, "
                      "                :OPER "
                      "            ) " );

     cmd.addparam( "MES_ID"   , RSDBP_IN, mes_id     ); 
     cmd.addparam( "ANSWERKEY", RSDBP_IN, answer_key ); 
     cmd.addparam( "OPER"     , RSDBP_IN, {oper}     ); 
     cmd.execute;
end;

macro toFSSPdate(d :date)
    var dd, mm, yyyy;
    DateSplit(d, dd, mm, yyyy);
    
    return String(yyyy, "-", mm:2:o, "-", dd:2:o);
end;

macro toFSSPDateTime( d:date, t:time )
    var hh24, mi, ss;
    timeSplit( t, hh24, mi, ss );
    return string( toFSSPdate( d ), "T", hh24:2:o, ":", mi:2:o, ":", ss:2:o );
end;

macro ReplaceSpecialChars(str)
   str = strSubSt(string(str), "&quot;","\""); 
   str = strSubSt(string(str), "&apos;","'" );   
   
   return str;
end;

macro getMesName(ID)
   var OutFileName = "";
   var sql = " SELECT  S.T_ID, S.T_SESS_FILE               "+           
             " FROM    usr_fssp_sess s, usr_fssp_mes m     "+    
             " WHERE   S.T_ID = M.T_SESS_ID AND M.T_ID = ? ";  
   sql = execSQLSelect(sql, makeArray(SQLParam("", ID)));
   if (sql and sql.moveNext())
      SplitFile(sql.value(1), OutFileName); 
      return String(sql.value(0, null, v_integer), "_", ID, "_", OutFileName, ".xml");
   end;
   
   return "";   
end;

macro toRSLdate(FSSPdate);
   var cmd, rs;
   cmd = rsdCommand(" select to_date(?, 'yyyy-mm-dd') from dual ");
   cmd.AddParam("", RSDBP_IN, FSSPdate);
   rs = RsdRecordset(cmd);
   if(rs.moveNext()) return date(rs.value(0)); end;
   
   return FSSPdate;
end;

macro getExternalKey()
  var rs;
  rs = RsdRecordSet( " SELECT USR_FSSP_ANSWER_MES_SEQ.NEXTVAL FROM DUAL ");
  if( rs.movenext ) return int(rs.value(0)); end;
  
  return -1;
end;


macro compareNames(name1, name2)
     const OOO = "ОБЩЕСТВО С ОГРАНИЧЕННОЙ ОТВЕТСТВЕННОСТЬЮ";
     const ZAO = "ЗАКРЫТОЕ АКЦИОНЕРНОЕ ОБЩЕСТВО";
     const OAO = "ОТКРЫТОЕ АКЦИОНЕРНОЕ ОБЩЕСТВО";  
     
     name2 = strupr(name2);                   name1 = strupr(name1); 
     name2 = strsubst(name2,"ООО",OOO);       name1 = strsubst(name1,"ООО",OOO);
     name2 = strsubst(name2,"ЗАО",ZAO);       name1 = strsubst(name1,"ЗАО",ZAO);
     name2 = strsubst(name2,"ОАО",OAO);       name1 = strsubst(name1,"ОАО",OAO);
     name2 = strsubst(name2,"Ё","Е");         name1 = strsubst(name1,"Ё","Е");
     name2 = strsubst(name2,"\"","");         name1 = strsubst(name1,"\"","");
     name2 = strsubst(name2,"  "," ");        name1 = strsubst(name1,"  "," ");   
     return (name1 == name2);
end;

macro UpdateDataScroll(ID, ClientID);        
   var sql = " update usr_fssp_mes                   "+
             " set t_party_id = ?,  T_MES_STATE = 1  "+                                       
             " where t_id = ?                        ";
   execSQL(sql, makeArray(SQLParam("", ClientID), SQLParam("", ID)));                  
end;

macro RollBackDataScroll(ID)
   var sql = " update usr_fssp_mes                   "+
             " set t_party_id = -1, T_MES_STATE = 0  "+
             " where t_id = ?                        ";
   execSQL(sql, makeArray(SQLParam("", ID)));                       
end;  

macro SerializeXML(XML)
    var cmd, rs ; 
    cmd = RSDCommand(" with t as (select                                                "+
                     " xmlserialize(document xmltype(?) as clob indent size = 4 ) x     "+
                     " from dual m)                                                     "+
                     " select xmltype(x).getStringVal() as xml from t                   ");
    cmd.AddParam("", RSDBP_IN, String(XML));                 
    rs = RSDRecordset(cmd);
    if (rs.movenext) return rs.value(0); end;
    
    return XML;
    
onError()
    return XML;
end;                                                                           


macro getClientByCode(Code)
    var cmd, rs;
    cmd = RsdCommand(" with t as (select :c code from dual)                                                                                                "+               
                     " SELECT PT.T_PARTYID PartyID, COUNT (1) OVER (PARTITION BY NULL) cnt,                                                                "+
                     "        PT.T_NAME PartyName, obj.t_code PartyCode                                                                                    "+
                     " FROM   dobjcode_dbt obj, dparty_dbt pt, t                                                                                           "+
                     " WHERE     OBJ.T_STATE = 0                                                                                                           "+
                     "       AND OBJ.T_CODEKIND = 16                                                                                                       "+
                     "       AND OBJ.T_OBJECTTYPE = 3                                                                                                      "+
                     "       AND PT.T_PARTYID = OBJ.T_OBJECTID                                                                                             "+
                     "       AND OBJ.T_CODE LIKE code || '%'                                                                                               "+
                     "       AND LENGTH (code) =                                                                                                           "+
                     "       DECODE (INSTR (code, '/'),                                                                                                    "+
                     "               0, LENGTH (                                                                                                           "+
                     "                           CASE                                                                                                      "+
                     "                              WHEN INSTR (OBJ.T_CODE, '/') != 0 THEN NVL (SUBSTR (OBJ.T_CODE, 1, INSTR (OBJ.T_CODE, '/') - 1), ' ')  "+   
                     "                              ELSE NVL (SUBSTR (OBJ.T_CODE, 1), ' ')                                                                 "+ 
                     "                            END                                                                                                      "+ 
                     "                         ),                                                                                                          "+ 
                     "               LENGTH (OBJ.T_CODE))                                                                                                  ");
    cmd.AddParam("", RSDBP_IN, Code);                                                                                                                      
    return RsdRecordset(cmd, RSDVAL_CLIENT, RSDVAL_STATIC);  
end;
    
macro IdentityClient(obj :@object, ActionMode)
    var cmd, rs, debtor, count = 0, col = TArray, INN_KPP;
    var ClientsID = TArray();
    var flag = false;
     
    macro AddCol (ar,ind, fld, head, width, rdonly, DecPoint)
        ar.value (ind * 6)     = fld;
        ar.value (ind * 6 + 1) = head;
        ar.value (ind * 6 + 2) = width;
        ar.value (ind * 6 + 3 ) = 0;   // fldType
        ar.value (ind * 6 + 4 ) = decPoint;  // decPoint
        ar.value (ind * 6 + 5 ) = 0;   // reserv
    end;
    macro ViewMsg(Name1, Name2, INN_KPP1, INN_KPP2)                     
        return String(" ID сообщения: " + obj.ID +
                      " || Наименование клиента в сообщении: ", Name1,
                      " || наименование в БД: ", Name2, 
                      " || ИНН/КПП в сообщении: ", INN_KPP1, 
                      " || ИНН/КПП в БД:",INN_KPP2, 
                      " || Обработать сообщение?");                                  
    end;

    macro EvProc (rs, cmd, id, key )
        var CM_FLAG = CM_DEFAULT;
        if(cmd == DLG_INIT) 
            if (not AddMultiAction (rs, KEY_F2)) 
                msgbox ("Ошибка инициализации массового выделения клиентов");
            end;
            ClientsID = TArray();         
        elif((Cmd == DLG_MSEL) and (key == KEY_F2))
            ClientsID[ClientsID.Size] = rs.value("PartyID");
            return CM_MSEL_CONT_CLEAR;
        elif (Cmd == DLG_MSELEND)            
            flag = true;
            return CM_CANCEL;                  
        elif (cmd == DLG_KEY)                            
            if (key == KEY_ESC)
                if(not getTrue(false,"Вы не выбрали клиента, уверены что хотите выйти?"))
                    CM_FLAG = CM_DEFAULT; 
                end;
            elif(Flag)//Обработать массово              
                CM_FLAG = CM_SELECT;
            elif(key == KEY_F2)
                ClientsID[ClientsID.Size] = rs.value("PartyID");
                CM_FLAG = CM_SELECT; 
            end;
        end;
        return CM_FLAG;
    end;    

    INN_KPP = obj.DebtorINN;

    if((notNull(obj.DebtorKPP)) and (obj.DebtorKPP != " "))
        INN_KPP = obj.DebtorINN + "/" + obj.DebtorKPP;
    end;
      
    debtor =  getClientByCode(INN_KPP);        

    if(debtor.MoveNext())
        count = debtor.value("cnt");
        if(count == 1)
            if(compareNames(ReplaceSpecialChars(obj.DebtorName), debtor.value("PartyName")))                          
                ClientsID[ClientsID.Size] = debtor.value("PartyID");                       
            else                  
                if( ActionMode == 3 ) // роботяга
                    runError("client error");
                else
                    if(getTrue(true, ViewMsg(ReplaceSpecialChars(obj.DebtorName), debtor.value("PartyName"), INN_KPP,  debtor.value("PartyCode"))))                                                            
                        ClientsID[ClientsID.Size] = debtor.value("PartyID");
                    end;                                        
                end;
            end;    
        else               
            if( ActionMode == 3 ) // роботяга
                // вообще по идее надо сразу на ручную обработку
                if(not compareNames(obj.DebtorName, debtor.value("PartyName"))) runError(); end;

                while(debtor.MoveNext)
                    if(not compareNames(obj.DebtorName, debtor.value("PartyName"))) runError(); end;
                end;
            else
                AddCol (col, 0, "PartyCode",    "Код",          22, true);
                AddCol (col, 1, "PartyName",    "Наименование", 40, true);
                AddCol (col, 2, "PartyID",      "ID Субъекта",  10, true); 
                if (RunScroll (debtor, 3, col, "ListParty", "EvProc", "Выбор клиента", "~Enter~ Выбор"))
                    // return debtor.value("PartyID"); 
                end;             
            end;     
        end;     
    end;         

    return ClientsID;     
end;

macro viewClientAccLinks(id)
   var rs, colums = TArray();
   var cmd = RsdCommand(" SELECT   LNK.T_ACCOUNT,                                          "+
                        " LNK.T_CLIENT_ID,                                                 "+
                        " PT.T_NAME,                                                       "+
                        " (SELECT   OBJ.T_CODE                                             "+
                        " FROM   dobjcode_dbt obj                                          "+
                        "   WHERE       OBJ.T_OBJECTID = LNK.T_CLIENT_ID                   "+
                        " AND OBJ.T_CODEKIND = 1                                           "+
                        " AND OBJ.T_OBJECTTYPE = 3                                         "+
                        " AND OBJ.T_STATE = 0) code                                        "+
                        " FROM   USR_FSSP_ACCOUNTS_LINK lnk, dparty_dbt pt                 "+
                        " WHERE   PT.T_PARTYID = LNK.T_CLIENT_ID AND LNK.T_MES_ID = ?      ");

   cmd.AddParam("", RSDBP_IN, id);                                                                                                                      
   rs = RsdRecordset(cmd, RSDVAL_CLIENT, RSDVAL_STATIC);  

   colums = makeArray("t_account"   , "Счет"        , 20, 0, 0, 0,                       
                      "code"        , "Код"         , 12, 0, 0, 0,
                      "t_name"      , "Наименование", 60, 0, 0, 0, 
                      "t_client_id" , "ИД Клиента"  , 10, 0, 0, 0);

   macro EvProc (rs, cmd, id, key )
      if (cmd == DLG_KEY)                            
         if (key == KEY_ESC) return cm_cancel; end;
      end;
      return CM_DEFAULT;
   end;

  RunScroll(rs, colums.size/6, colums, "", "EvProc", "Список лицевых счетов клиента", "~Enter~ Выбор");

end;


macro getAccRSD(ClientID, Filter)
    var cmd, rs;
    cmd = " SELECT  acc.t_account account,                                                 "+
          "         acc.t_code_currency fiid,                                              "+
          "         acc.t_chapter chapter,                                                 "+
          "         acc.T_TYPE_ACCOUNT type_account,                                       "+
          "         DEP.T_NAME NameBranch,                                                 "+
          "         ACC.T_OPEN_CLOSE OPEN_CLOSE                                            "+
          "  FROM   ddp_dep_dbt dep, daccount_dbt acc                                      "+        
          " WHERE       acc.t_client = ?                                                   "+
          "         AND acc.t_chapter = 1                                                  "+
          "         AND REGEXP_LIKE (acc.T_TYPE_ACCOUNT, 'Ч|X|Я|Q|K|Y')                    "+
          "         AND DEP.T_CODE = ACC.T_BRANCH                                          ";
                                                                                                
     if (valtype(Filter) != V_UNDEF) cmd = cmd + Filter; end;                                                           
     cmd = RsdCommand(cmd);                                                     
     cmd.AddParam("", RSDBP_IN, ClientID);                                                                                           
     return RsdRecordset(cmd);     
end;

macro getCountData(mesID)
    private var cmd, rs;
    cmd = RsdCommand(" WITH FSSP_MES AS (SELECT   xmltype (T_MES_DATA) MES_DATA                       "+
                     " FROM   USR_FSSP_MES                                                            "+
                     " WHERE   T_ID = :MesID)                                                         "+
                     "    SELECT   COUNT ( * )                                                        "+
                     "    FROM   FSSP_MES MES, table (XMLSEQUENCE (MES.MES_DATA.EXTRACT ('//Data')))  ");                                                                                          
    cmd.addparam( "", RSDBP_IN, mesID );
    rs  = RSDRecordset( cmd );
    if( rs.movenext ) return int( rs.value(0)); end;
    return 0;
onError(er)
    return 0;
end;

class TACCOUNT_DATUM(MesID, PartID)
    var ID = MesID, Part = PartID;    
    var cmd, rs;
    var Acc                = NULL,      
        Summa              = NULL,
        InternalKey        = Null;

        macro  ACCOUNT_DATUM()   
        cmd = RsdCommand(" WITH t AS (SELECT   xmltype (mes.T_MES_DATA).EXTRACT ('//Data[' || :Part || ']') xml  "+
                         "           FROM   USR_FSSP_MES mes                                                     "+
                         "           WHERE   T_ID = :MesID)                                                      "+
                         "     SELECT   EXTRACTVALUE (t.xml, '//Acc'  )       Acc,                               "+
                         "              EXTRACTVALUE (t.xml, '//Summa')       Summa,                             "+
                         "              EXTRACTVALUE (t.xml, '//InternalKey') InternalKey                        "+
                         "     FROM   t                                                                          ");
        cmd.AddParam("", RSDBP_IN, Part);
        cmd.AddParam("", RSDBP_IN, ID);
        rs = RsdRecordset(cmd);        
        if(rs.MoveNext())           
           if(valType(rs.value("ACC"        )) != NullVal)  ACC         = rs.value("ACC"  )      ; end;         
           if(valType(rs.value("SUMMA"      )) != NullVal)  SUMMA       = rs.value("SUMMA")      ; end;              
           if(valType(rs.value("InternalKey")) != NullVal)  InternalKey = rs.value("InternalKey"); end;              
        end; 
    end;
    ACCOUNT_DATUM();
end;                    


/**
 * Golovkin перенос функций и костант из fssp_loader.mac для использования их в роботе
 */
var fssp_dir_import = RSL_GetRegistryValue("PRBB/FSSPPATH/IN"); 
var fssp_dir_oldmsg = RSL_GetRegistryValue("PRBB/FSSPPATH/OLDMES"); 
var fssp_dir_export = RSL_GetRegistryValue("PRBB/FSSPPATH/OUT");

macro AddField (ar, name, tp, sz, dec)
   ar [ar.size] = name;
   ar [ar.size] = tp;
   ar [ar.size] = sz;
   ar [ar.size] = dec;
   ar [ar.size] = 0;
end;

macro gen_sess_id

    private var rs;

    rs = RsdRecordSet( " SELECT   USR_FSSP_SESS_SEQ.NEXTVAL FROM DUAL " );

    if( rs.movenext )
        return rs.value( 0 );
    else
        return -1;
    end;

end;

macro move_file( in, out )
    if( copyfile( in, out ) ) 
        if( removefile( in ) )
            return true;
        else
            return false;
        end;
    else
        return false;
    end;
end;

macro clear_tmp( table )
    RsdCommand( " DELETE " + table ).execute;
end;

macro set_mes_type( mess_id )

    private var cmd, rs;

    cmd = " DECLARE                                     "                                                                         + "\n" +
          "    v_xml_data              XMLTYPE;         "                                                                         + "\n" +
          "    v_mes_id                PLS_INTEGER;     "                                                                         + "\n" +
          "    v_mes_type              NUMBER;          "                                                                         + "\n" +
          "    v_arrest_removal_mode   NUMBER;          "                                                                         + "\n" +
          "    v_doc_code              VARCHAR2 (4000); "                                                                         + "\n" +
          "    v_ns                    VARCHAR2 (4000) := 'xmlns:wat=\"http://www.red-soft.biz/schemas/fssp/common/2011/0.5\"'; " + "\n" +
          " BEGIN                   "                                                                                             + "\n" +
          "    v_mes_id := :mes_id; "                                                                                             + "\n" + 
                                                                                                                                    "\n" +
          "    SELECT   xmltype (t.t_mes_data) INTO v_xml_data FROM USR_FSSP_MES t "                                              + "\n" +
          "     WHERE   t.t_id = v_mes_id;                                         "                                              + "\n" +
                                                                                                                                    "\n" +
          "    IF    v_xml_data.EXTRACT ('//Query'       , v_ns) IS NOT NULL  THEN    v_mes_type := 1; "                          + "\n" +
          "    ELSIF v_xml_data.EXTRACT ('//AccountQuery', v_ns) IS NOT NULL  THEN    v_mes_type := 2; "                          + "\n" +
          "    ELSIF v_xml_data.EXTRACT ('//Restrictn'   , v_ns) IS NOT NULL                           "                          + "\n" +
          "    THEN "                                                                                                             + "\n" +
                                                                                                                                    "\n" +
          "       SELECT   NVL(EXTRACTVALUE(v_xml_data, '//Restrictn/DocCode/text()'          , v_ns), ''), "                     + "\n" +
          "                NVL(EXTRACTVALUE(v_xml_data, '//Restrictn/ArrestRemovalMode/text()', v_ns), 0 )  "                     + "\n" +
          "         INTO   v_doc_code, v_arrest_removal_mode "                                                                    + "\n" +
          "         FROM   DUAL;"                                                                                                 + "\n" +
                                                                                                                                    "\n" +
          "       v_mes_type := CASE                                                       "                                      + "\n" +
          "                          WHEN v_doc_code = 'O_IP_ACT_FIND_ACCOUNT'      THEN 3 "                                      + "\n" +
          "                          WHEN v_doc_code = 'O_IP_ACT_ARREST_ACCMONEY'   THEN 4 "                                      + "\n" +
          "                          WHEN v_doc_code = 'O_IP_ACT_ENDARREST'                "                                      + "\n" + 
          "                           AND v_arrest_removal_mode = 3                 THEN 5 "                                      + "\n" +
          "                          WHEN v_doc_code = 'O_IP_ACT_ENDARREST'                "                                      + "\n" +
          "                           AND v_arrest_removal_mode IN (1, 2)           THEN 6 "                                      + "\n" +
          "                          WHEN v_doc_code = 'O_IP_ACT_ENDARR_GMONEY'     THEN 7 "                                      + "\n" +
          "                          WHEN v_doc_code = 'O_IP_ACT_GACCOUNT_MONEY'    THEN 8 "                                      + "\n" +
          "                          WHEN v_doc_code = 'O_IP_ACT_ENDGACCOUNT_MONEY' THEN 9 "                                      + "\n" +
          "                          ELSE -1                                               "                                      + "\n" +
          "                     END;                                                       "                                      + "\n" +
          "    ELSE v_mes_type := -1; "                                                                                           + "\n" +
          "    END IF;                "                                                                                           + "\n" +
                                                                                                                                    "\n" +
          "    IF v_mes_type = -1 THEN "                                                                                          + "\n" +
          "       INSERT INTO USR_FSSP_ERR_TMP VALUES (v_mes_id,'Не удалось определить тип запроса'); "                           + "\n" +
          "    END IF; "                                                                                                          + "\n" +
                                                                                                                                    "\n" +
          "    UPDATE   USR_FSSP_MES SET T_MES_TYPE = v_mes_type "                                                                + "\n" +
          "     WHERE   t_id = v_mes_id;                         "                                                                + "\n" +
                                                                                                                                    "\n" +
          "    :mes_type := v_mes_type; "                                                                                         + "\n" +
          " END;       " ;

    cmd = RsdCommand( cmd );

    cmd.addparam( "mes_id"  , RSDBP_IN,  mess_id   );
    cmd.addparam( "mes_type", RSDBP_OUT, V_INTEGER );

    cmd.execute;

    return cmd.param( "mes_type" ).value;

end;

macro get_mes_id_by_session_part( session_id, part )

    private var cmd, rs;

    cmd = Rsdcommand( " SELECT   T_ID "
                      "   FROM   USR_FSSP_MES "
                      "  WHERE   T_SESS_ID = :sess_id AND T_SESS_PART = :sess_part ");
    cmd.addparam( "sess_id", RSDBP_IN, session_id );
    cmd.addparam( "part"   , RSDBP_IN, part       );

    rs = RsdRecordset(cmd);

    if( rs.movenext )
        return int( rs.value(0) );
    end;

    return -1;

end;

macro get_docs_count_in_session( session_id )

    private var cmd, rs;

//"  WITH FSS_SESS AS (SELECT   xmltype (T_SESS_DATA) SESS_DATA  "
    cmd = RsdCommand( "  WITH FSS_SESS AS (SELECT   xmltype (usrRedsoftSpike(T_SESS_DATA)) SESS_DATA  "
                      "                      FROM   USR_FSSP_SESS  "
                      "                     WHERE   T_ID = :sess_id)  "
                      "  SELECT   COUNT ( * )  "
                      "    FROM   FSS_SESS FSSP_SESS, "
                      "           table(nvl2(EXTRACTVALUE(FSSP_SESS.SESS_DATA,'(//Document/*/InternalKey/text())[1]'), "
                      "                      XMLSEQUENCE (FSSP_SESS.SESS_DATA.EXTRACT ('//Document') ),   "
                      "                      XMLSEQUENCE (FSSP_SESS.SESS_DATA.EXTRACT ('//wat:Document', 'xmlns:wat=\"http://www.red-soft.biz/ncore/dx/1.1\"') ) ) ); " );

    cmd.addparam( "sess_id", RSDBP_IN, session_id );

    rs  = RSDRecordset( cmd ); 

    if( rs.movenext )
        return int( rs.value(0) );
    else
        return 0;
    end;

onerror
    return 0;

end;

macro load_xml( blob, session_id, file_name )

    private var cmd, rs;

    cmd = RsdCommand( " INSERT INTO USR_FSSP_SESS "
                      "   VALUES   (:sess_id, "
                      "             NULL, "
                      "             TO_CHAR (SYSDATE, 'DD.MM.YYYY'), "
                      "             '01.01.0001 ' || SUBSTR (TO_CHAR (SYSDATE, 'DD.MM.YYYY HH24:MI:SS'), 12), "
                      "             :file_name, "
                      "             RSBSessionData.curdate, "
                      "             :oper) " );

    cmd.addparam( "sess_id"  , RSDBP_IN, session_id );
    cmd.addparam( "file_name", RSDBP_IN, file_name  );
    cmd.addparam( "oper"     , RSDBP_IN, {oper}     );
    cmd.execute;

    cmd = RSDCommand( "     SELECT   T_ID, T_SESS_DATA "
                      "       FROM   USR_FSSP_SESS "
                      "      WHERE   T_ID = :SESS_ID "
                      " FOR UPDATE " );

    cmd.addparam( "sess_id", RSDBP_IN, session_id ); 

    rs  = RSDRecordset( cmd, null, RSDVAL_STATIC ); 

    rs.bloblimitsize = 1;

    if( rs.MoveNext() ) 
        rs.edit;       
        rs.Fld( 1 ).Write( blob );
        rs.update;     

        return true;
    else
        println( "Не найдена запись" );
        return false;         
    end;              
 
end;

macro part_already_load( session_id, part )

    private var cmd, rs;

    cmd = RsdCommand( " SELECT   * "
                      "   FROM   USR_FSSP_MES "
                      "  WHERE   T_SESS_ID = :sessid AND T_SESS_PART = :sesspart " );

    cmd.addparam( "sess_id", RSDBP_IN, session_id );
    cmd.addparam( "part"   , RSDBP_IN, part       );

    rs = RsdRecordset( cmd );

    return rs.movenext;

end;

macro get_document( session_id, part, mes_state )

    private var cmd, rs;

    if( mes_state == null ) mes_state = 0; end;
  
    cmd = " DECLARE "
 + "\n" + "    v_xml_data     XMLTYPE; "
 + "\n" + "    v_sess_id      PLS_INTEGER; "
 + "\n" + "    v_mes_exists   PLS_INTEGER; "
 + "\n" + "    v_part         PLS_INTEGER; "
 + "\n" + "    v_internalkey  VARCHAR2(500); "
 + "\n" + "    v_doc_date     VARCHAR2(500); "
 + "\n" + "    v_debtor_name  VARCHAR2(500); "
 + "\n" + "    v_buffer       XMLTYPE; "
 + "\n" + "    v_document     XMLTYPE; "
 + "\n" + "    v_ns           VARCHAR2 (4000) := 'xmlns:wat=\"http://www.red-soft.biz/ncore/dx/1.1\"'; " // namespace
 + "\n" + "    v_eol          VARCHAR2 (2)    := CONCAT (CHR (13), CHR (10)); "
 + "\n" + " BEGIN "
 + "\n" + "    v_part    := :part; "
 + "\n" + "    v_sess_id := :sess_id; "
 + "\n" 
// + "\n" + "    SELECT   xmltype (t.t_sess_data) INTO   v_xml_data "
 + "\n" + "    SELECT   xmltype (usrRedsoftSpike(t.t_sess_data)) INTO   v_xml_data "
 + "\n" + "      FROM   USR_FSSP_SESS t WHERE   t.t_id = v_sess_id; "
 + "\n" 
 + "\n" + "    v_document := v_xml_data.EXTRACT ('(//Document)[' || v_part || ']'); " 
 + "\n" 
 + "\n" + "    IF v_document IS NOT NULL THEN "      
 + "\n"
 + "\n" + "       SELECT   NVL(EXTRACTVALUE(v_document,'/*/*/InternalKey/text()'  ),-1), "
 + "\n" + "                NVL(EXTRACTVALUE(v_document,'/*/*/DocDate/text()'      ),-1), "
 + "\n" + "                NVL(EXTRACTVALUE(v_document,'/*/*/IP/DebtorName/text()'),-1)  "
 + "\n" + "         INTO   v_internalkey, "
 + "\n" + "                v_doc_date, "
 + "\n" + "                v_debtor_name "
 + "\n" + "         FROM   DUAL; "
 + "\n"
 + "\n" + "       v_debtor_name := replace(v_debtor_name,'&quot;','\"'); "
 + "\n"
 + "\n" + "       BEGIN "
 + "\n" + "           SELECT 1 INTO v_mes_exists FROM USR_FSSP_MES WHERE T_INTERNALKEY = v_internalkey  AND T_INTERNALKEY != -1 AND ROWNUM = 1; "
 + "\n" + "       EXCEPTION WHEN NO_DATA_FOUND THEN v_mes_exists := 0; "
 + "\n" + "       END;"
 + "\n" + "       v_mes_exists := 0;  "
 + "\n" + "       IF v_mes_exists = 1 THEN "
 + "\n" + "           INSERT INTO USR_FSSP_ERR_TMP VALUES (0,'Постановление InternalKey = '|| v_internalkey ||' уже загружено'); "
 + "\n" + "       ELSE "
 + "\n" + "           INSERT INTO USR_FSSP_MES (T_SESS_ID,T_MES_DATA,T_MES_DATE,T_MES_TIME,T_MES_STATE,T_SESS_PART,T_INTERNALKEY,T_DOC_DATE,T_DEBTOR_NAME,T_PARTY_ID,T_OPER_DATE) "
 + "\n" + "             VALUES   (v_sess_id, "
 + "\n" + "                       '<?xml version=\"1.0\" encoding=\"WINDOWS-1251\"?>' || v_eol || v_document.getClobVal(), "
 + "\n" + "                       TO_CHAR(SYSDATE,'DD.MM.YYYY'), "
 + "\n" + "                       '01.01.0001 ' || SUBSTR(TO_CHAR(SYSDATE, 'DD.MM.YYYY HH24:MI:SS'), 12), "
 + "\n" + "                       :mes_state, "
 + "\n" + "                       v_part, "
 + "\n" + "                       v_internalkey, "
 + "\n" + "                       v_doc_date, "
 + "\n" + "                       v_debtor_name, "
 + "\n" + "                       -1, "
 + "\n" + "                       RSBSessionData.curdate); "
 + "\n" + "       END IF; "
 + "\n" 
 + "\n" + "    END IF; "
 + "\n" + " END; ";

    cmd = RsdCommand( cmd );

    cmd.addparam( "part"     , RSDBP_IN, part       );
    cmd.addparam( "sess_id"  , RSDBP_IN, session_id );
    cmd.addparam( "mes_state", RSDBP_IN, mes_state  );

    cmd.execute;

    if( part_already_load( session_id, part ) )
        return 0;
    else
        return 2; 
    end;

onerror
    return 3;

end;

/**
 * Golovkin перенос функций и костант из fssp_create_pack.mac для использования их в роботе
 */
//var fssp_dir_export      = RSL_GetRegistryValue( "PRBB/FSSPPATH/OUT"      );
var fssp_dir_export_pack = RSL_GetRegistryValue( "PRBB/FSSPPATH/OUT_PACK" );
var fssp_dir_export_old  = RSL_GetRegistryValue( "PRBB/FSSPPATH/OUT_OLD"  );

private macro fileNameWithoutPath( pathName )
    private var fName, fileExt;
    splitFile( pathName, fName, fileExt );
    return fName;
end;

private macro moveFile (src, dst)
    return (copyFile (src, dst) and removeFile (src));        
end;
private macro getInDXPack(mes_id)
   var sql  = " WITH SESS AS (SELECT   XMLT.COLUMN_VALUE DXPack,                                                                                                       "+           
              "           T_INTERNALKEY                                                                                                                                "+
//              "   FROM   (SELECT   xmltype (S.T_SESS_DATA) SESS_DATA,                                                                                                  "+
              "   FROM   (SELECT   xmltype (usrRedsoftSpike(S.T_SESS_DATA)) SESS_DATA,                                                                                 "+
              "                    M.T_INTERNALKEY                                                                                                                     "+
              "             FROM   USR_FSSP_SESS S, USR_FSSP_MES M                                                                                                     "+
              "            WHERE   S.T_ID = M.T_SESS_ID AND M.T_ID = :mes_id)                                                                                          "+
              "          FSSP_SESS,                                                                                                                                    "+
              "          table(XMLSEQUENCE( NVL (FSSP_SESS.SESS_DATA.EXTRACT ('//DXPack'),                                                                             "+
              "                                  FSSP_SESS.SESS_DATA.EXTRACT ('//wat:DXPack','xmlns:wat=\http://www.red-soft.biz/ncore/dx/1.1\') ))) XMLT)             "+
              "  SELECT                                                                                                                                                "+
              "  NVL (EXTRACTVALUE (SESS1.DXPACK,'//DXPack/@id'),                                                                                                      "+
              "                EXTRACTVALUE (SESS1.DXPACK,'//wat:DXPack/wat:Direction/wat:Sender/wat:Org/text()','xmlns:wat=\http://www.red-soft.biz/ncore/dx/1.1\'))  "+
              "                DXPACK_ID                                                                                                                               "+
              "    FROM   SESS sess1,                                                                                                                                  "+
              "           table( XMLSEQUENCE( SESS1.DXPACK.EXTRACT ('/*/*/*/*/*/InternalKey') ) ) IntKey                                                               "+
              "   WHERE   EXTRACTVALUE(IntKey.column_value, '/InternalKey/text()' ) = T_INTERNALKEY                                                                    ";

   sql = execSQLSelect(sql, makeArray(SQLParam("mes_id", mes_id)));
   if(sql.moveNext())
       return sql.value("DXPACK_ID");
   end; 

   return 0;
onError
   return 0;                                                                                                                                                                        
end;

class Pack( _sessId )
    var sessId         = _sessId;
    var countParts     = 0;
    var messageCount   = 0;
    var packFileName   = "";
    var sessFileName   = "";
    var mesFilesNames  = TArray();
    var packFile;
    var DXBox          = xmlElement( "dx:DXBox", null, makeArray( XMLAttribute( "xmlns:dx", "http://www.red-soft.biz/ncore/dx/1.1" ) ) );
    var DXControl      = xmlElement( "dx:DXControl" );
    var maxCountEnvelopes = 99;

    private macro getDXPackId
        var rs;
        rs = RsdRecordSet( " SELECT   USR_FSSP_DSPACKID_SEQ.NEXTVAL FROM DUAL " );

        if( rs.movenext )
            return int( rs.value(0) );
        end;

        return -1;
    end;

    private macro getEnvelopeId
        var rs;
        rs = RsdRecordSet( " SELECT   USR_FSSP_ENVELOPE_SEQ.NEXTVAL FROM DUAL " );

        if( rs.movenext )
            return int( rs.value(0) );
        end;

        return -1;
    end;

    private macro getAnswerKeyByMesID( mes_id )
        private var cmd,rs;
        cmd = RsdCommand( " SELECT T_ANSWERKEY FROM USR_FSSP_ANSWER WHERE T_MES_ID = :MES_ID " );
        cmd.addparam( "MES_ID", RSDBP_IN, mes_id );
        rs = RsdRecordset( cmd );
        if( rs.movenext ) return rs.value( "T_ANSWERKEY" ); end;
        return 0;
    onerror
        return 0;
    end;

    macro getMessageCount
        var rs;
        rs = execSQLselect( " SELECT   COUNT ( * ) COUNT FROM   USR_FSSP_MES WHERE   T_SESS_ID = :SESS_ID ", makeArray( SQLParam( "SESS_ID", sessId ) ) );
        rs.movenext;
        messageCount = int( rs.value( "COUNT" ) ); 
    onerror
        messageCount = 0;
    end;

    macro checkMessage( mesId )
        var rs, t_sess_id;
        rs = execSQLselect( " SELECT   T_SESS_ID, T_INTERNALKEY FROM   USR_FSSP_MES WHERE   T_ID = :MES_ID ", makeArray( SQLParam( "MES_ID", mesId ) ) );
        if( rs.movenext )
            t_sess_id = int( rs.value( "t_sess_id" ) );
            setparm( 2, rs.value( "t_internalkey"  ) );
            return t_sess_id == sessId; 
        end;
        setparm( 2, 0 );
        return false;
    onerror
        setparm( 2, 0 );
        return false;
    end;

    macro getDXBoxDirection
        private var cmd,rs;
        private var OrgRecipient, DeptRecipient, Sender, Protocol;
/*
        cmd = RsdCommand( " SELECT   nvl( EXTRACTVALUE (XMLTYPE (SESS.T_SESS_DATA),'//DXControl/Direction/Sender/Org/text()'), "
                          "               EXTRACTVALUE (XMLTYPE (SESS.T_SESS_DATA),'//wat:DXControl/wat:Direction/wat:Sender/wat:Org/text()','xmlns:wat=\"http://www.red-soft.biz/ncore/dx/1.1\"'))  "
                          "          OrgRecipient, "
                          "          nvl( EXTRACTVALUE (XMLTYPE (SESS.T_SESS_DATA),'//DXControl/Direction/Sender/Dept/text()'), "
                          "               EXTRACTVALUE (XMLTYPE (SESS.T_SESS_DATA),'//wat:DXControl/wat:Direction/wat:Sender/wat:Dept/text()','xmlns:wat=\"http://www.red-soft.biz/ncore/dx/1.1\"'))  "
                          "          DeptRecipient, "
                          "          nvl( EXTRACTVALUE (XMLTYPE (SESS.T_SESS_DATA),'//DXControl/Direction/Recipient/Org/text()'), "
                          "               EXTRACTVALUE (XMLTYPE (SESS.T_SESS_DATA),'//wat:DXControl/wat:Direction/wat:Recipient/wat:Org/text()','xmlns:wat=\"http://www.red-soft.biz/ncore/dx/1.1\"')) "
                          "          Sender, "
                          "          nvl( EXTRACTVALUE (XMLTYPE (SESS.T_SESS_DATA),'//DXControl/Direction/Protocol/text()'), "
                          "               EXTRACTVALUE (XMLTYPE (SESS.T_SESS_DATA),'//wat:DXControl/wat:Direction/wat:Protocol/text()','xmlns:wat=\"http://www.red-soft.biz/ncore/dx/1.1\"')) "
                          "          Protocol "
                          "   FROM   usr_fssp_sess sess "
                          "  WHERE   sess.t_id = :id " );
*/
        cmd = RsdCommand( " SELECT   nvl( EXTRACTVALUE (XMLTYPE (usrRedsoftSpike(SESS.T_SESS_DATA)),'//DXControl/Direction/Sender/Org/text()'), "
                          "               EXTRACTVALUE (XMLTYPE (usrRedsoftSpike(SESS.T_SESS_DATA)),'//wat:DXControl/wat:Direction/wat:Sender/wat:Org/text()','xmlns:wat=\"http://www.red-soft.biz/ncore/dx/1.1\"'))  "
                          "          OrgRecipient, "
                          "          nvl( EXTRACTVALUE (XMLTYPE (usrRedsoftSpike(SESS.T_SESS_DATA)),'//DXControl/Direction/Sender/Dept/text()'), "
                          "               EXTRACTVALUE (XMLTYPE (usrRedsoftSpike(SESS.T_SESS_DATA)),'//wat:DXControl/wat:Direction/wat:Sender/wat:Dept/text()','xmlns:wat=\"http://www.red-soft.biz/ncore/dx/1.1\"'))  "
                          "          DeptRecipient, "
                          "          nvl( EXTRACTVALUE (XMLTYPE (usrRedsoftSpike(SESS.T_SESS_DATA)),'//DXControl/Direction/Recipient/Org/text()'), "
                          "               EXTRACTVALUE (XMLTYPE (usrRedsoftSpike(SESS.T_SESS_DATA)),'//wat:DXControl/wat:Direction/wat:Recipient/wat:Org/text()','xmlns:wat=\"http://www.red-soft.biz/ncore/dx/1.1\"')) "
                          "          Sender, "
                          "          nvl( EXTRACTVALUE (XMLTYPE (usrRedsoftSpike(SESS.T_SESS_DATA)),'//DXControl/Direction/Protocol/text()'), "
                          "               EXTRACTVALUE (XMLTYPE (usrRedsoftSpike(SESS.T_SESS_DATA)),'//wat:DXControl/wat:Direction/wat:Protocol/text()','xmlns:wat=\"http://www.red-soft.biz/ncore/dx/1.1\"')) "
                          "          Protocol "
                          "   FROM   usr_fssp_sess sess "
                          "  WHERE   sess.t_id = :id " );

        cmd.addparam( "id", RSDBP_IN, sessId );

        rs = RsdRecordset( cmd );

        if( rs.movenext )
            OrgRecipient  = rs.value( "OrgRecipient"  );
            DeptRecipient = rs.value( "DeptRecipient" );
            Sender        = rs.value( "Sender"        );
            Protocol      = rs.value( "Protocol"      );

            var DXDirection = xmlElement( "dx:Direction" );
            var DXSender    = xmlElement( "dx:Sender"    );
            var DXRecipient = xmlElement( "dx:Recipient" );

            DXSender.addChild( xmlElement( "dx:Org", Sender ) );

            DXRecipient.addChild( xmlElement( "dx:Org" , OrgRecipient  ) );
            DXRecipient.addChild( xmlElement( "dx:Dept", DeptRecipient ) );

            DXDirection.addChild( DXSender    );
            DXDirection.addChild( DXRecipient );
            DXDirection.addChild( xmlElement( "dx:Protocol", Protocol  ) );

            DXControl.addChild( DXDirection ); 
            DXControl.addChild( xmlElement( "dx:Pack", null, null, makeArray( xmlElement( "dx:MaxCount", 0 /*messageCount*/ ) ) ) );  //21.08.2013 Andrey A Chelyadinov Просьба исправить в данном поле.  Нужно проставлять всегда "ноль"
        end;

    onerror
    end;

//29.10.2015 DPN R-624904-2 Добавил тег Dept отправителя
    macro getDXPackDirection( mes_id ):xmlElement
        private var cmd,rs;
        private var OrgRecipient, DeptRecipient, Sender, DeptSender, Protocol;

        cmd = RsdCommand( " WITH SESS AS (SELECT   XMLT.COLUMN_VALUE DXPack, "
                          "                        T_INTERNALKEY "
//                          "                 FROM   (SELECT   xmltype (S.T_SESS_DATA) SESS_DATA, "
                          "                 FROM   (SELECT   xmltype (usrRedsoftSpike(S.T_SESS_DATA)) SESS_DATA, "
                          "                                  M.T_INTERNALKEY "
                          "                           FROM   USR_FSSP_SESS S, USR_FSSP_MES M "
                          "                          WHERE   S.T_ID = M.T_SESS_ID AND M.T_ID = :mes_id) "
                          "                        FSSP_SESS,  "
                          "                        table(XMLSEQUENCE( NVL (FSSP_SESS.SESS_DATA.EXTRACT ('//DXPack'), FSSP_SESS.SESS_DATA.EXTRACT ('//wat:DXPack','xmlns:wat=\"http://www.red-soft.biz/ncore/dx/1.1\"') ))) XMLT) "
                          " SELECT   NVL (EXTRACTVALUE (SESS1.DXPACK,'//DXPack/Direction/Sender/Org/text()'), "
                          "               EXTRACTVALUE (SESS1.DXPACK,'//wat:DXPack/wat:Direction/wat:Sender/wat:Org/text()','xmlns:wat=\"http://www.red-soft.biz/ncore/dx/1.1\"')) OrgRecipient, "
                          "          NVL (EXTRACTVALUE (SESS1.DXPACK,'//DXPack/Direction/Sender/Dept/text()'), "
                          "               EXTRACTVALUE (SESS1.DXPACK,'//wat:DXPack/wat:Direction/wat:Sender/wat:Dept/text()','xmlns:wat=\"http://www.red-soft.biz/ncore/dx/1.1\"')) DeptRecipient, "
                          "          NVL (EXTRACTVALUE (SESS1.DXPACK,'//DXPack/Direction/Recipient/Org/text()'), "
                          "               EXTRACTVALUE (SESS1.DXPACK,'//wat:DXPack/wat:Direction/wat:Recipient/wat:Org/text()','xmlns:wat=\"http://www.red-soft.biz/ncore/dx/1.1\"')) Sender, "
                          "          NVL (EXTRACTVALUE (sess1.dxpack,'//DXPack/Direction/Recipient/Dept/text()'),"
                          "               EXTRACTVALUE (sess1.dxpack, '//wat:DXPack/wat:Direction/wat:Recipient/wat:Dept/text()','xmlns:wat=\"http://www.red-soft.biz/ncore/dx/1.1\"')) deptsender,"                        
                          "          NVL (EXTRACTVALUE (SESS1.DXPACK,'//DXPack/Direction/Protocol/text()'), "
                          "               EXTRACTVALUE (SESS1.DXPACK,'//wat:DXPack/wat:Direction/wat:Protocol/text()','xmlns:wat=\"http://www.red-soft.biz/ncore/dx/1.1\"')) Protocol   "
                          "   FROM   SESS sess1, "
                          "          table( XMLSEQUENCE( SESS1.DXPACK.EXTRACT ('/*/*/*/*/*/InternalKey') ) ) IntKey "
                          "  WHERE   EXTRACTVALUE(IntKey.column_value, '/InternalKey/text()' ) = T_INTERNALKEY " );

        cmd.addparam( "mes_id", RSDBP_IN, mes_id );

        rs = RsdRecordset( cmd );

        if( rs.movenext )
            OrgRecipient  = rs.value( "OrgRecipient"  );
            DeptRecipient = rs.value( "DeptRecipient" );
            Sender        = rs.value( "Sender"        );
            deptsender    = rs.value( "deptSender"        );
            Protocol      = rs.value( "Protocol"      );

            var DXPackDirection = xmlElement( "dx:Direction" );
            var DXSender        = xmlElement( "dx:Sender"    );
            var DXRecipient     = xmlElement( "dx:Recipient" );

            DXSender.addChild( xmlElement( "dx:Org", Sender ) );
            //03.11.2015 DPN R-626409-2 Тег нужен только для многофилиальных банков. Для остальных его значение null, поэтому выводить не нужно
            if (valType(DeptSender) != 26)
                DXSender.addChild( xmlElement( "dx:Dept", DeptSender ) );
            end;

            DXRecipient.addChild( xmlElement( "dx:Org" , OrgRecipient  ) );
            DXRecipient.addChild( xmlElement( "dx:Dept", DeptRecipient ) );

            DXPackDirection.addChild( DXSender    );
            DXPackDirection.addChild( DXRecipient );
            DXPackDirection.addChild( xmlElement( "dx:Protocol", Protocol  ) );
            return DXPackDirection;
        end;

        return xmlElement( "dx:Direction" );  
    onerror
        return xmlElement( "dx:Direction" );  
    end;

    macro getSessFileName
        var rs;
        rs = execSQLselect( " SELECT T_SESS_FILE FROM USR_FSSP_SESS WHERE T_ID = :SESS_ID ", makeArray( SQLParam( "SESS_ID", sessId ) ) );
        rs.movenext;
        sessFileName = fileNameWithoutPath( rs.value( "T_SESS_FILE" ) ); 
    onerror
        sessFileName = "";
    end;

    macro createFile
        getMessageCount;
        getSessFileName;
        packFileName = String ( fssp_dir_export_pack, "/", sessFileName, "_answer.xml" );
//        packFile     = TStream( packFileName, "WA" );
        packFile     = TStream( packFileName, "WC" ); // zmp 13.12.2014 WA => WC
    end;

    macro appendHead
        if( countParts == 1 )
            getDXBoxDirection;
            packFile.write( "<?xml version=\"1.0\" encoding=\"WINDOWS-1251\"?>" + "\n" );
            packFile.write( DXBox.openTag + "\n" );
            packFile.write( DXControl.toString );
            packFile.flush();
        end;
    end;

    macro appendGround
        if( countParts == messageCount ) 
            packFile.write( DXBox.closeTag );
            packFile.flush();
        end;
    end;

    macro appendDxPackEnvelopesOpenTags( mesId )
        var DXPack;

        if( mod( countParts - 1, maxCountEnvelopes ) == 0 ) 
            DXPack = xmlElement( "dx:DXPack", null, makeArray( XMLAttribute( "id", getInDXPack( mesId ) + getDXPackId ), 
                                                               XMLAttribute( "time_sent", toFSSPDateTime( date, time ) ) ) );
            packFile.write( DXPack.openTag  + "\n" );
            packFile.write( getDXPackDirection( mesId ).toString );
            packFile.write( simpleXMLElement( "dx:DocDate", toFSSPdate( {curdate} ) ) );
            packFile.write( simpleXMLOpenTag( "dx:Envelopes" ) + "\n" );
            packFile.flush();
        end;
    end;

    macro appendDxPackEnvelopesCloseTags
        if( ( countParts == messageCount ) or ( mod( countParts, maxCountEnvelopes ) == 0 ) )
            packFile.write( simpleXMLCloseTag( "dx:Envelopes" ) + "\n" );
            packFile.write( simpleXMLCloseTag( "dx:DXPack"    ) + "\n" );
            packFile.flush();
        end;
    end;

    macro appendMessage( mesFileName, mesId )
        private var mesFile, clobText, internalKey;
        private var DXPack;

        if( not checkMessage( mesId, internalKey ) ) // если сообщение не из этого сеанса, пропускаем
            return;
        end; 

        if( countParts == messageCount ) 
            return;
        end;

        countParts = countParts + 1;

        appendHead;
        appendDxPackEnvelopesOpenTags( mesId );

        mesFile = TStream( String( fssp_dir_export, "/", mesFileName ), "R");

        clobText = TRecHandler( "ClobRead", makeArray( "clob", V_STRING, mesFile.getsize, 0, 0) );

        mesFile.read2 ( clobText );

        /* Envelope, Document */
        packFile.write ( simpleXMLOpenTag ( "dx:Envelope id=\"" + getEnvelopeId + "\" doc_id=\"" + getAnswerKeyByMesID( mesId ) + "\""  ) + "\n" );
        packFile.write ( simpleXMLElement ( "dx:DocDate", toFSSPdate( {curdate} ) ) );
        packFile.write ( simpleXMLOpenTag ( "dx:Document"  ) + "\n" );
        packFile.write2( clobText );       
        packFile.write ( simpleXMLCloseTag( "dx:Document"  ) + "\n" );
        packFile.write ( simpleXMLCloseTag( "dx:Envelope"  ) + "\n" );
        packFile.flush();

        appendDxPackEnvelopesCloseTags;

        mesFilesNames[mesFilesNames.size] = mesFileName;

        appendGround;
    end;   

    macro checkPack;
        var i;

        packFile = NULL;

        if(    ( messageCount != countParts )   // пакет собирается только если кол-во сообщений в сеансе совпадает с количеством файлов  
            or ( messageCount == 0          ) )                                                                                                                                                                
            removeFile( packFileName );
            return false;
        else
            for ( i, 0, mesFilesNames.size )
                moveFile( String( fssp_dir_export, "/", mesFilesNames[i] ), String( fssp_dir_export_old, "/", mesFilesNames[i] ) );
            end;
        end;
        return true;
    end;

    if( sessId != 0 ) createFile; end;
end;
/*************************************************************************************/