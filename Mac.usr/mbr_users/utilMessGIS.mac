/*******************************************************************************/
/*  RS-Bank 6.0                                          R-Style Software      */
/*                                                                             */
/*  File Name   : utilMessGIS.mac                                              */
/*  Created     : 11.11.2015                                                   */
/*  Programmer  : VDN.                                                         */
/*  Description : Макрос перегенерации сообщения ГИС через БД с изменением     */
/*                УИН                                                          */
/*******************************************************************************/

import lib_sqltools; 

private class UtilMess( paymentid, uin )
   startQueryCapture ();
   [
   DECLARE
     v_paymentid       NUMBER         := :paymentid;
     v_uin             VARCHAR2 (100) := :uin;

     v_infoid          NUMBER;
     v_messid          NUMBER;                   
     v_messidnew       NUMBER;

     v_referencemess   VARCHAR2 (100);
     v_referencesess   VARCHAR2 (100);
     v_referencesyst   VARCHAR2 (100);
     v_mean            VARCHAR2 (100);

     v_error           VARCHAR2 (4000) := 'Сообщение перегенерировано';

     FUNCTION checkOldMessage (v_messid NUMBER)
       RETURN BOOLEAN
     IS
       v_uin VARCHAR2(100);
     BEGIN
       SELECT t_value 
       INTO v_uin
       FROM dwlmesval_dbt 
       WHERE t_mesid = v_messid
         AND t_tpfieldid = 984;

       IF (v_uin = '0') OR (v_uin = '00000000000000000000') THEN
         RETURN TRUE;
       END IF;

       RETURN FALSE;

     EXCEPTION
       WHEN OTHERS THEN
         v_error := SQLERRM;
         RETURN FALSE;
     END;

     FUNCTION getReference (v_reference OUT VARCHAR2, v_refid NUMBER)
       RETURN BOOLEAN
     IS
       v_stat NUMBER (5) := 0;
     BEGIN
       RsbSessionData.m_OperDprt     := 1;
       RsbSessionData.m_OperDprtNode := 1;

       v_stat := rsi_rsb_refer.wldgeneratereference (v_reference, v_refid, 0, 0, SYSDATE);

       IF v_stat = 0 THEN
         RETURN TRUE;
       END IF;
      
       RETURN FALSE;
     END;
   
     FUNCTION insertHistory(v_messid NUMBER)
       RETURN BOOLEAN
     IS
     BEGIN
       INSERT INTO dwlhistor_dbt
       (
         t_objid, t_objkind, t_state, t_bankdate, t_sysdate, t_systime, t_userid
       )
       VALUES 
       (
         v_messid, 502, 7, rsbsessiondata.m_curdate, TRUNC (SYSDATE), 
         TO_DATE ('01.01.0001 ' || TO_CHAR (SYSDATE, 'hh24:mi:ss'), 'dd.mm.yyyy hh24:mi:ss'), rsbsessiondata.oper
        );
 
       RETURN TRUE;
      
     EXCEPTION
       WHEN OTHERS THEN
         v_error := SQLERRM;
         RETURN FALSE;
     END;     

     FUNCTION insertMess (v_messid NUMBER, v_messidnew OUT NUMBER, v_referencemess OUT VARCHAR2, v_referencesess OUT VARCHAR2)
       RETURN BOOLEAN
     IS
       oldmess   dwlmes_dbt%ROWTYPE;
     BEGIN
       SELECT s.* INTO oldmess FROM dwlmes_dbt s WHERE t_mesid = v_messid;

       IF NOT getreference (v_referencesess, 3) THEN
         RAISE_APPLICATION_ERROR (-20000, 'Ошибка генерации референса сессии');
       END IF;
      
       IF NOT getreference (v_referencemess, 223) THEN
         RAISE_APPLICATION_ERROR (-20000, 'Ошибка генерации референса сообщения');  
       END IF; 
      
       SELECT dwlmes_dbt_seq.NEXTVAL INTO v_messidnew FROM DUAL;
       
       INSERT INTO dwlmes_dbt
       (
         t_mesid, t_direct, t_tpschemid, t_sessionid, t_rlsformid, t_outsideabonentid, t_kind, t_trn, t_relatedref, t_tpsession, t_tpsessmesnum, t_importance, t_outsideabonentdate, t_outsideabonenttime, t_state, t_bankdate,
         t_sysdate, t_systime, t_userid, t_insideabonentid, t_outsideabonentcodekind, t_outsideabonentcode, t_insideabonentcodekind, t_insideabonentcode, t_agentid, t_agentcodekind, t_agentcode, t_exportsort,
         t_respprocessingdescr, t_department, t_edtuser, t_edtdate, t_edttime, t_control, t_covermode
       )
       VALUES 
       (
         v_messidnew, CHR(0), oldmess.t_tpschemid, v_referencesess, oldmess.t_rlsformid, oldmess.t_outsideabonentid, oldmess.t_kind, v_referencemess, oldmess.t_relatedref, oldmess.t_tpsession, oldmess.t_tpsessmesnum, 
         oldmess.t_importance, oldmess.t_outsideabonentdate, oldmess.t_outsideabonenttime, 0, TRUNC (SYSDATE), TRUNC (SYSDATE), TO_DATE ('01/01/0001 ' || TO_CHAR (SYSDATE, 'hh24:mi:ss'), 'MM/DD/YYYY HH24:MI:SS'),
         rsbsessiondata.oper, oldmess.t_insideabonentid, oldmess.t_outsideabonentcodekind, oldmess.t_outsideabonentcode, oldmess.t_insideabonentcodekind, oldmess.t_insideabonentcode, oldmess.t_agentid, 
         oldmess.t_agentcodekind, oldmess.t_agentcode, oldmess.t_exportsort, oldmess.t_respprocessingdescr, oldmess.t_department, rsbsessiondata.oper, TRUNC (SYSDATE), 
         TO_DATE ('01/01/0001 ' || TO_CHAR (SYSDATE, 'hh24:mi:ss'), 'MM/DD/YYYY HH24:MI:SS'), oldmess.t_control, oldmess.t_covermode
       );
 
       /*Старое отметим как невалидное*/
       UPDATE dwlmes_dbt SET T_STATE = 7 WHERE t_mesid = v_messid;
     
       RETURN TRUE;
     
     EXCEPTION
       WHEN OTHERS THEN
         v_error := SQLERRM;
         RETURN FALSE;     
     END;
   
     FUNCTION insertLink(v_messid number, v_infoid number)
       RETURN BOOLEAN
     IS
     BEGIN
       INSERT INTO DWLMESLNK_DBT
       (T_MESID, T_OBJID, T_OBJKIND, T_STATE, T_BANKDATE, T_SYSDATE, T_SYSTIME, T_USERID)
       VALUES
       (v_messid, v_infoid, 506, 1, TRUNC(SYSDATE), TRUNC(SYSDATE), TO_DATE ('01/01/0001 ' || TO_CHAR (SYSDATE, 'hh24:mi:ss'), 'MM/DD/YYYY HH24:MI:SS'), rsbsessiondata.oper);
     
       RETURN TRUE;
     EXCEPTION
       WHEN OTHERS THEN
         v_error := SQLERRM;
         RETURN FALSE;
     END;
   
     FUNCTION insertFields(v_messid NUMBER, v_messidnew NUMBER)
       RETURN BOOLEAN
     IS
       PRAGMA AUTONOMOUS_TRANSACTION;
     BEGIN
       FOR item IN (SELECT val.*
                    FROM dwlmesval_dbt val   
                    WHERE val.t_mesid = v_messid
                    ORDER BY t_index)
       LOOP
      
         INSERT INTO dwlmesval_dbt
         VALUES(v_messidnew, item.t_index, item.t_fieldid, item.t_tpfieldid, item.t_state,
                TRUNC(SYSDATE), TRUNC(SYSDATE), TO_DATE ('01/01/0001 ' || TO_CHAR (SYSDATE, 'hh24:mi:ss'), 'MM/DD/YYYY HH24:MI:SS'), 
                rsbsessiondata.oper, item.t_value);
         COMMIT;        
              
       END LOOP;
      
       RETURN TRUE;
      
     EXCEPTION
       WHEN OTHERS THEN
         DELETE FROM dwlmesval_dbt WHERE t_mesid = v_messidnew;
         COMMIT;  
         v_error := SQLERRM;
         RETURN FALSE;
     END; 
   
   BEGIN
     SELECT t_infoid, t_mesid INTO v_infoid, v_messid
     FROM usr_gis_gmp_sendmes_log_dbt
     WHERE t_mes_trn =
                   (SELECT REPLACE(TRIM(UTL_RAW.cast_to_varchar2 (t_text)), CHR(0), '')
                    FROM dnotetext_dbt
                    WHERE t_documentid = LPAD (v_paymentid, 10, '0')
                      AND t_notekind = 52 
                      /*VDN 04.12.2015 I-00587167*/
                      AND t_validtodate = '31.12.9999')
       AND ROWNUM = 1 
       AND TRUNC (t_send_req_time) >= '17.07.2015';

     IF NOT checkOldMessage (v_messid) THEN
       RAISE_APPLICATION_ERROR(-20000, 'Сообщение с УИН, отличным от 0, уже было отправлено');
     END IF; 
  
     BEGIN
       usr_gis_gmp_get_status.rollback_send (v_infoid, v_messid);

       UPDATE dwlinfo_dbt  SET t_state = 10 WHERE t_infoid = v_infoid;
      
       IF NOT insertHistory(v_messid) THEN
         RAISE_APPLICATION_ERROR(-20000, 'Ошибка обновления истории');        
       END IF;
      
       IF NOT insertMess(v_messid, v_messidnew, v_referencemess, v_referencesess) THEN
         RAISE_APPLICATION_ERROR(-20000, 'Ошибка cоздания сообщения');
       END IF;
      
       IF NOT insertLink(v_messidnew, v_infoid) THEN
         RAISE_APPLICATION_ERROR(-20000, 'Ошибка обновления связи сообщения с УО');        
       END IF;   

       IF NOT insertFields(v_messid, v_messidnew) THEN
         RAISE_APPLICATION_ERROR(-20000, 'Ошибка формирования полей сообщения');
       END IF;            

       IF NOT getreference (v_referencesyst, 232) THEN
         RAISE_APPLICATION_ERROR (-20000, 'Ошибка генерации системного идентификатора');  
       END IF; 
          
       COMMIT;

       /*UIN*/
       UPDATE dwlmesval_dbt SET t_value = v_uin WHERE t_mesid = v_messidnew AND t_tpfieldid = 984;
       UPDATE dpmrmprop_dbt SET t_uin   = v_uin WHERE t_paymentid = v_paymentid;

       /*SystemIdentifier*/
       UPDATE dwlmesval_dbt SET t_value = CONCAT(subStr(t_value, 1, 16), v_referencesyst) WHERE t_mesid = v_messidnew AND t_tpfieldid = 1000;

       /*ID*/
       v_mean := rsb_common.GetRegStrValue ('МЕЖБАНКОВСКИЕ РАСЧЕТЫ\ГИС ГМП\SymbolPaymentID', 0);
       SELECT sys_guid() INTO v_referencesyst FROM dual;

       v_mean :=    subStr(v_mean, 1, 1) 
                 || '_'
                 || subStr(v_referencesyst, 1, 8)
                 || '-'
                 || subStr(v_referencesyst, 9, 4)
                 || '-'
                 || subStr(v_referencesyst, 13, 4)
                 || '-'
                 || subStr(v_referencesyst, 17, 4)
                 || '-'
                 || subStr(v_referencesyst, 21);

       UPDATE dwlmesval_dbt SET t_value = v_mean WHERE t_mesid = v_messidnew AND t_tpfieldid = 981;  
       UPDATE dnotetext_dbt SET t_text  = UTL_RAW.cast_to_raw (CONCAT(v_referencemess, CHR(0))),
                                t_oper = RSBSESSIONDATA.oper,
                                t_date = sysdate,
                                t_time = sysdate WHERE t_documentid = LPAD (v_paymentid, 10, '0') AND t_notekind = 52 AND T_VALIDTODATE = TO_DATE('12/31/9999 00:00:00', 'MM/DD/YYYY HH24:MI:SS');
    
       /*В проконтролированные*/       
       UPDATE dwlinfo_dbt   SET t_state = 20    WHERE t_infoid = v_infoid;
      
       COMMIT;

       :v_error := v_error;
     EXCEPTION
       WHEN OTHERS THEN
         ROLLBACK;
         :v_error := v_error || ', ' || SQLERRM;
     END;
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       :v_error := 'Данные не найдены или сообщение отправлено не в формате INFP1.16.1! Платеж: ' || v_paymentid;
     WHEN OTHERS THEN
       :v_error := SQLERRM;
   END;
   ];

   private var sql     = endQueryCapture();
   private var cmdText = RSDCommand(string(sql));
   cmdText.addParam("paymentid", RSDBP_IN    , paymentid  );
   cmdText.addParam("uin"      , RSDBP_IN    , string(uin));
   cmdText.addParam("v_error"  , RSDBP_RETVAL, V_STRING   );

   macro generate()
      cmdText.execute();
      msgBox(cmdText.param("v_error").value);

   onError(e)
      msgBox("Ошибка при перегенерации сообщения");
   end;
end;

private macro checkUin(uin)
  if (strLen(uin) < 20)
    msgBox("Длинна кода " + uin + " меньше 20 символов!");
    return false;
  end;

  return true;
end;

private macro checkGroup()
  if (not ВходитВГруппу({oper}, 64)) 
      msgBox("Вы не включены в группу 64 - Перегенерация сообщений");
      return false;
  end;

  return true;
end;

macro generateMessage( paymentid )
  var v_uin;
 
  if (not checkGroup()) return; end;

  if ( not GetString( v_uin, "Введите УИН для сообщения:") ) 
     return;
  end;

  v_uin = trim(v_uin);

  if (not checkUIN(v_uin)) return end;

  var mess = UtilMess( paymentid, v_uin );
  mess.generate();
end;                               



