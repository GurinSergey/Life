import RSD,"soa_core.mac";
import PTInter;



//Ñãü  îêéÑ

    class account_info 
        var  p_AccountNumber :STRING ;//  IN     VARCHAR2 DEFAULT NULL ,
        var  p_AccountID     :  INTEGER;  // IN     NUMBER DEFAULT NULL ,
        var  p_Startdate     :  DATE ;
        var  p_PartyID       :  INTEGER;//   OUT INTEGER,
        var  p_BIC           :  STRING   ;//OUT VARCHAR2,
        var  p_Branch        :  INTEGER ;//  OUT INTEGER,
        var  p_Department    :  INTEGER;//   OUT INTEGER,
        var  p_Oper          :  INTEGER;//   OUT INTEGER,
        var  p_FIOOper       :  STRING   ;//OUT VARCHAR2,
        var  p_Chapter       :  INTEGER;//   OUT INTEGER,
        var  p_Currency      :  INTEGER;//   OUT INTEGER,
        var  p_CodeCurrency  :  STRING   ;//OUT VARCHAR2,
        var  p_OpenClose     :  STRING   ;//OUT VARCHAR,
        var  p_Balance       :  STRING   ;//OUT VARCHAR,
        var  p_Index2        :  STRING   ;//OUT VARCHAR,
        var  p_Symbol        :  STRING   ;//OUT VARCHAR2,
        var  p_Limit         :  MONEY;//   OUT NUMBER,
        var  p_LimitDate     :  DATE;//   OUT DATE,
        var  p_AccType       :  STRING;//  OUT VARCHAR2,
        var  p_AccUserType   :  STRING ;//  OUT VARCHAR2,
        var  p_AccName       :  STRING  ;// OUT VARCHAR2,
        var  p_OpenDate      :  DATE   ;//OUT DATE,
        var  p_CloseDate     :  DATE   ;//OUT DATE,
        var  p_PlanId        :  INTEGER;//   OUT INTEGER,
        var  p_Rest          :  MONEY ;//  OUT NUMBER,
        var  p_RestReal      :  MONEY;//   OUT NUMBER,
        var  p_DateMoving    :  DATE ;//  OUT DATE,
        var  p_RestOnFirst   :  MONEY;//  OUT NUMBER
    end;

    macro getAccountInfo(PartyID,AccountNumber,currdate)
        var  fcmd;
        var account_i :account_info;
    
        account_i.p_PartyID =PartyID;
        account_i.p_AccountNumber=AccountNumber;
        account_i.p_StartDate=currdate;
        account_i.p_AccountID =NULL;
        fcmd = RsdCommand("begin getAccountInfo_frod("+
                            "  p_accountNumber=>? "+
                            " ,p_accountID =>? "+
                            " ,p_PartyID   =>? "+
                            " ,p_StartDate =>? "+
                            " ,p_BIC       =>? "+
                            " ,p_Branch    =>? "+
                            " ,p_Department=>? "+
                            " ,p_Oper      =>? "+
                            " ,p_FIOOper   =>? "+
                            " ,p_Chapter   =>? "+ 
                            " ,p_Currency  =>? "+
                            " ,p_CodeCurrency=>? "+
                            " ,p_OpenClose =>? "+
                            " ,p_Balance   =>? "+
                            " ,p_Index2    =>? "+
                            " ,p_Symbol    =>? "+
                            " ,p_Limit     =>? "+
                            " ,p_LimitDate =>? "+
                            " ,p_AccType   =>? "+
                            " ,p_AccUserType=>? "+
                            " ,p_AccName   =>? "+
                            " ,p_OpenDate  =>? "+
                            " ,p_CloseDate =>? "+
                            " ,p_PlanId    =>? "+
                            " ,p_Rest      =>? "+
                            " ,p_RestReal  =>? "+
                            " ,p_DateMoving=>? "+
                            " ,p_RestOnFirst=>?"+
                            " ,p_error      =>?);"+
                            " END;");
    
        fcmd.addparam("p_AccountNumber", RSDBP_IN, account_i.p_AccountNumber);
        fcmd.addparam("p_accountID", RSDBP_RETVAL,V_INTEGER);
        fcmd.addparam("p_PartyID", RSDBP_IN, account_i.p_PartyID);
        fcmd.addparam("p_StartDate", RSDBP_IN, account_i.p_StartDate);
        fcmd.addParam("p_BIC",    RSDBP_OUT, V_STRING,1024);             
        fcmd.addParam("p_Branch", RSDBP_OUT, V_INTEGER);
        fcmd.addParam("p_Department", RSDBP_OUT, V_INTEGER);
        fcmd.addParam("p_Oper", RSDBP_OUT, V_INTEGER);
        fcmd.addParam("p_FIOOper", RSDBP_OUT,  V_STRING,1024);
        fcmd.addParam("p_Chapter", RSDBP_OUT, V_INTEGER);
        fcmd.addParam("p_Currency", RSDBP_OUT, V_INTEGER);
        fcmd.addParam("p_CodeCurrency", RSDBP_OUT,  V_STRING,1024);
        fcmd.addParam("p_OpenClose", RSDBP_OUT,  V_STRING,1024);
        fcmd.addParam("p_Balance", RSDBP_OUT,  V_STRING,1024);
        fcmd.addParam("p_Index2", RSDBP_OUT,  V_STRING,1024);
        fcmd.addParam("p_Symbol", RSDBP_OUT,  V_STRING,1024);
        fcmd.addParam("p_Limit", RSDBP_OUT,  V_MONEY);
        fcmd.addParam("p_LimitDate", RSDBP_OUT,  V_DATE);
        fcmd.addParam("p_AccType", RSDBP_OUT,  V_STRING,1024);
        fcmd.addParam("p_AccUserType", RSDBP_OUT,  V_STRING,1024);
        fcmd.addParam("p_AccName", RSDBP_OUT,  V_STRING,1024);
        fcmd.addParam("p_OpenDate", RSDBP_OUT,  V_DATE);
        fcmd.addParam("p_CloseDate", RSDBP_OUT,  V_DATE);
        fcmd.addParam("p_PlanId", RSDBP_OUT, V_INTEGER);
        fcmd.addParam("p_Rest", RSDBP_OUT,  V_MONEY);
        fcmd.addParam("p_RestReal", RSDBP_OUT,  V_MONEY);
        fcmd.addParam("p_DateMoving", RSDBP_OUT,  V_DATE);
        fcmd.addParam("p_RestOnFirst", RSDBP_OUT,  V_MONEY);
        fcmd.addParam("p_error", RSDBP_OUT,   V_STRING,1024);
        fcmd.execute();
        if (fcmd.param("p_error").value == "no_error")
            account_i.p_accountID           =fcmd.param("p_accountID").value;
            account_i.p_BIC                  =fcmd.param("p_BIC").value;
            account_i.p_Branch               =fcmd.param("p_Branch").value;
            account_i.p_Department           =fcmd.param("p_Department").value;
            account_i.p_Oper                 =fcmd.param("p_Oper").value;
            account_i.p_FIOOper              =fcmd.param("p_FIOOper").value;
            account_i.p_Chapter              =fcmd.param("p_Chapter").value;
            account_i.p_Currency             =fcmd.param("p_Currency").value;
            account_i.p_CodeCurrency         =fcmd.param("p_CodeCurrency").value;
            account_i.p_OpenClose            =fcmd.param("p_OpenClose").value;
            account_i.p_Balance              =fcmd.param("p_Balance").value;
            account_i.p_Index2               =fcmd.param("p_Index2").value;
            account_i.p_Symbol               =fcmd.param("p_Symbol").value;
            account_i.p_Limit                =fcmd.param("p_Limit").value;
            account_i.p_LimitDate            =fcmd.param("p_LimitDate").value;
            account_i.p_AccType              =fcmd.param("p_AccType").value;
            account_i.p_AccUserType          =fcmd.param("p_AccUserType").value;
            account_i.p_AccName              =fcmd.param("p_AccName").value;
            account_i.p_OpenDate             =fcmd.param("p_OpenDate").value;
            account_i.p_CloseDate            =fcmd.param("p_CloseDate").value;
            account_i.p_PlanId               =nvl_ex(fcmd.param("p_PlanId").value,0);
            account_i.p_Rest                 =fcmd.param("p_Rest").value;
            account_i.p_RestReal             =fcmd.param("p_RestReal").value;
            account_i.p_DateMoving           =fcmd.param("p_DateMoving").value;
            account_i.p_RestOnFirst          =fcmd.param("p_RestOnFirst").value;
            return account_i;
        else
            runerror (fcmd.param("p_error").value);
        end;
   
    end;



    macro Get_AccountList(p_partyid,contr_status,contr_date, p_ar_list:object)


        class acc_dog(c_id_contr,c_numbercontr,c_branchname,c_DEPARTMENT,c_DATEBEGIN,c_DATECLOSE,c_state,c_amount,c_IDacc,c_Numberacc,c_Nameacc,c_curid,c_isonum,c_openacc,c_closeacc)
            var id           : integer = c_id_contr;
            var ContractType : string  = "ACCOUNT";
            var number       : string  = c_numbercontr;
            var BankCode     : string  = èÆ´„Á®‚ÏäÆ§ë„°Í•™‚†( {OurBank}, 3 );
            var BranchCode   : string  = c_branchname;
            var DepartmentID : string  = c_DEPARTMENT;
            var RegDate      : date    = c_DATEBEGIN;
            var CloseDate    : date    = c_DATECLOSE;
            var state        : string  = c_state;
            var minamount    : money   = c_amount;
            var AccountData  = tarray();

            class TArray_ACC (v_ID,v_Number,v_Name,v_curid,v_isonum,v_openacc,v_closeacc)
                var id         :integer = v_ID; 
                var Number     :string  = v_Number ;
                var Name       :string  = v_Name ;
                var CurrencyID :integer = v_curid ; 
                var CurencyISO :string  = v_isonum;
                var OpenDate   : date   = v_openacc ;
                var CloseDate  : date   = v_closeacc ;
            end;
            AccountData[AccountData.size()] = (TArray_ACC(c_IDacc,c_Numberacc,c_Nameacc,c_curid,c_isonum,c_openacc,c_closeacc));
        end;

        var cmd_party,rs_party,cmd_contr,rs_contr;
        var p_id        =NULL,
        p_number    =NULL,
        p_RegDate   =NULL,
        p_CloseDate =NULL;
        var parm = tArray();
    
        var sql="SELECT  ACC.T_CLIENT , acc.t_accountid,"+
                        " acc.t_account,"+
                        " acc.t_nameaccount,"+
                        " acc.T_DEPARTMENT,"+
                        " dep.t_name namebr,"+
                        " acc.T_BRANCH,"+
                        "nvl((SELECT   TO_NUMBER(USR_NOTETEXT.ConvertRAWtoSTRING (dn.t_text,NK.T_NOTETYPE))"+
                        "    FROM   dnotetext_dbt dn, dnotekind_dbt nk"+
                        "  WHERE       dn.t_notekind = 14"+
                        "           AND dn.t_objecttype = 4"+
                        "           AND dn.t_notekind = NK.T_NOTEKIND"+
                        "           AND dn.t_objecttype = nk.t_objecttype"+
                        "           AND dn.t_documentid = CONCAT ('010000000', acc.t_account)),0) amount,"+
                        " acc.T_CLOSE_DATE, decode(ACC.T_OPEN_CLOSE,chr(135),'CLOSED','ACTIVE') state, "+
                        " acc.T_CODE_CURRENCY,"+
                        " FIN.T_CCY,"+
                        " acc.T_OPEN_DATE,"+
                        " acc.T_CLOSE_DATE "+
                        " FROM   daccount_dbt acc, ddp_dep_dbt dep,dfininstr_dbt fin "+
                        " WHERE   ACC.T_CLIENT = :client "+
                        " AND  dep.t_code = acc.T_BRANCH "+
                        " AND  ACC.T_CODE_CURRENCY=FIN.T_FIID";
        parm [ parm.size () ] = SqlParam ("client", p_partyid);
        if (contr_date != date(00,00,0000))
            sql=sql+" and  acc.T_CLOSE_DATE <= :closedate";
            parm [ parm.size () ] = SqlParam ("closedate", contr_date);
        end;
        if (contr_status==1)
                sql=sql+" and  acc.T_OPEN_CLOSE != chr(135)"
        elif (contr_status==2)
                sql=sql+" and  acc.T_OPEN_CLOSE  = chr(135)"
        end;

        rs_party=execSqlSelect(sql,parm);
           
        While  (rs_party.movenext())
    
            parm=tarray();
        
            p_id        =NULL;
            p_number    =NULL;
            p_RegDate   =NULL;
            p_CloseDate =NULL;
        
            sql="SELECT   contr.t_id,"+
                "     contr.t_number,"+
                "     CONTR.T_DEPARTMENT,"+
                "     CONTR.T_DATEBEGIN,"+
                "     CONTR.T_DATECLOSE,"+
                "     CONTR.T_OBJECT account, "+
                " DECODE (CONTR.T_DATECLOSE,TO_DATE ('01010001', 'ddmmyyyy'), TO_DATE ('31129999', 'ddmmyyyy'),CONTR.T_DATECLOSE) date_cl "+
                " FROM   dsfcontr_dbt contr "+
                " Where  CONTR.T_PARTYID = :partyid "+
                " AND  CONTR.T_OBJECT = :account"+
                " order by date_cl desc";
                
            parm [ parm.size () ] = SqlParam ("partyid", p_partyid);
            parm [ parm.size () ] = SqlParam ("account", rs_party.value("t_account"));
        
            rs_contr=execSqlSelect(sql,parm);
            if (rs_contr.movenext) 
                p_id        =rs_contr.value("t_id");
                p_number    =rs_contr.value("t_number");
                p_RegDate   =rs_contr.value("T_DATEBEGIN");
                p_CloseDate =rs_contr.value("T_DATECLOSE");
            end;

            p_ar_list[p_ar_list.size ()] = acc_dog( p_id,
                                                p_number,
                                                rs_party.value("namebr"), 
                                                rs_party.value("T_DEPARTMENT"), 
                                                p_RegDate, 
                                                p_CloseDate, 
                                                rs_party.value("state"),
                                                rs_party.value("amount"), 
                                               // rs_contr.value("account"), 
                                                rs_party.value("t_accountid"),
                                                rs_party.value("t_account"),
                                                rs_party.value("t_nameaccount"),
                                                rs_party.value("T_CODE_CURRENCY"),
                                                rs_party.value("T_CCY"),
                                                rs_party.value("T_OPEN_DATE"),
                                                rs_party.value("T_CLOSE_DATE"));
        end;
        SetParm (3, p_ar_list);
    end;



    macro GetAccountList(partyid,_status,_date)
        var ar_list  = tarray();
        _status = nvl_ex (_status, 0);
        if (valType(_date) == V_UNDEF)
        _date   =  date(00,00,0000);
        end;
        
        Get_AccountList(partyid,_status,_date,ar_list);
        if (ar_list.size==0)  ar_list = null end;
        return ar_list; 
  
    end;

//èÆ´„Á®‚Ï íè ØÆ ·Á•‚„
    macro GetAccountTP(p_account :string)
        private var rs,cmd; 
        class TTarifPlan
        var NamePlan :string;
        var NameOper :string;
        end;
        var TarifPlan = TTarifPlan;
        cmd=RsdCommand( "SELECT NP.T_NAME NAMEP,Pers.T_NAME "+
                "           FROM dsfcontr_dbt cont, "+
                "                dsfcontrplan_dbt PLAN,"+ 
                "                daccount_dbt acc,"+
                "                dsfplan_dbt np,dperson_dbt pers "+
                "          WHERE  acc.t_account= ? "+
                "            and acc.t_account =cont.t_object "+
                "            and acc.t_oper = pers.t_oper "+
                "            AND cont.t_id = PLAN.t_sfcontrid "+
                "            and np.T_SFPLANID = PLAN.T_SFPLANID"+
                "            AND (PLAN.t_end = TO_DATE ('01.01.0001', 'dd.mm.yyyy')"+
                "                 OR PLAN.t_end > sysdate)");
        cmd.addparam("acc", RSDBP_IN, p_account);
    //   cmd.addparam("dd", RSDBP_IN, {CURDATE});
        rs = RsdRecordset(cmd);
        if (rs.movenext())
            TarifPlan.NamePlan = rs.value("NAMEP");
            TarifPlan.NameOper = rs.value("T_NAME");
        else
            runerror("í†‡®‰≠Î© Ø´†≠ ØÆ ·Á•‚„:"+p_account+" ≠• ≠†©§•≠")
        end;
        return TarifPlan;
    end;

// èÆ´„Á®‚Ï §†‚„ ØÆ·´•§≠•© Ø‡Æ¢Æ§™®
    macro GetLastTRDate(p_account :string)
        private var rs,cmd; 
        cmd=RsdCommand( "SELECT MAX (rdc.t_restdate) maxdate "+
                        " FROM drestdate_dbt rdc,daccount_dbt acc "+
                        " WHERE acc.t_account =? "+
                        " and ACC.t_accountid = rdc.t_accountid "+
                        "   AND rdc.t_restDate <= TRUNC(SYSDATE) "+
                        "    AND (rdc.t_debet != 0 "+
                        "    OR rdc.t_credit != 0 "+
                        "    OR rdc.t_debetspod != 0 "+
                        "    OR rdc.t_creditspod != 0)");
        cmd.addparam("acc", RSDBP_IN, p_account);
        rs = RsdRecordset(cmd);
        if ((rs.movenext()) and (valtype(rs.value("maxdate"))!=26))
            return rs.value("maxdate");
        else
            runerror("é°Æ‡Æ‚Æ¢ ØÆ ·Á•‚„:"+p_account+" ≠•‚")
        end;
    end;

// èÆ´„Á®‚Ï ·Ø®·Æ™ ™†‡‚Æ‚•™®2 ® 1 ØÆ ·Á•‚„ ™´®•≠‚†
    macro GetK2list(p_account :string,dateperiod :object /*p_datebegin,p_dateend*/)
        private var rs,cmd,sql; 
        private var parm = TArray();
        private var out = TArray();
        Class TKList
            var outK1 = TArray();
            var outK2 = TArray();
        end;
        
        class TArrayListK (_payer, _NUMBER, _PLACEDATE, _RECEIVERBANKNAME, _RECEIVERNAME, _GROUND, _payeraccount, _AMOUNT,_amountlast)
            var payer           :integer = nvl_ex (_payer    , zeroValue (V_INTEGER)); 
            var NUMBER          :string  = nvl_ex (_NUMBER   , zeroValue (V_STRING ));
            var PLACEDATE       :date  = nvl_ex (_PLACEDATE , zeroValue (V_DATE ));
            var RECEIVERBANKNAME:string  = nvl_ex (_RECEIVERBANKNAME , zeroValue (V_STRING )); 
            var RECEIVERNAME    :string  = nvl_ex (_RECEIVERNAME  , zeroValue (V_STRING )); 
            var GROUND          :string  = nvl_ex (_GROUND   , zeroValue (V_STRING ));
            var PAYERACCOUNT    :string  = nvl_ex (_payeraccount , zeroValue (V_STRING ));
            var AMOUNT          :money = nvl_ex (_AMOUNT         , zeroValue (V_MONEY));
            var AMOUNTLAST      :money = nvl_ex (_amountlast , zeroValue (V_MONEY));
        end;
        
        var KList: TKList;
        
        sql ="SELECT /*+index(pm dpmpaym_dbt_idxc)*/ "+
            " pm.t_payer,"+
            " PROP.T_NUMBER,"+
            " kprop.T_PLACEDATE,"+
            " PROP.T_RECEIVERBANKNAME,"+
            " PROP.T_RECEIVERNAME,"+
            " PROP.t_GROUND,"+
            " pm.t_payeraccount,"+
            " pm.T_AMOUNT,"+
            " pm.t_futurePayerAmount AS t_amountlast "+
            " FROM   dpmpaym_dbt pm, dpmrmprop_dbt prop, daccount_dbt acc,DPSINPROP_DBT kprop"+
            " WHERE       acc.t_account =:account"+
            " AND ACC.T_CLIENT = pm.t_payer"+
            " AND PM.T_PAYMENTID = PROP.T_PAYMENTID"+
            " AND PM.T_PAYMENTID = kprop.T_PAYMENTID"+
            " AND pm.t_paymstatus = 2000"+
            " AND pm.t_dockind IN (201, 286)";
        parm [ parm.size () ] = SqlParam ("account", p_account);
        if ((notNull (dateperiod)) and (notNull(safeGetPropMandatory(dateperiod, "p_datebegin", V_DATE)))) //•·´® Ø•‡•§†´® Ø•‡®Æ§
            sql=sql+" AND kprop.T_PLACEDATE Between :datebegin AND :dateend";
            parm [ parm.size () ] = SqlParam ("datebegin", safeGetPropMandatory(dateperiod, "p_datebegin", V_DATE));
            parm [ parm.size () ] = SqlParam ("dateend", nvl_ex (safeGetProp (dateperiod,"p_dateend", V_DATE) ,{curdate} ));
        end;
        sql =sql+" order by T_PLACEDATE";
        sql = execSqlSelect (sql, parm);
        while (sql.moveNext ())
            KList.outK2 [ KList.outK2.size () ] = TArrayListK (sql.value ("t_payer"          , null, V_INTEGER)
                                         ,sql.value ("T_NUMBER"          , null, V_STRING )
                                         ,sql.value ("T_PLACEDATE"       , null, V_DATE )
                                         ,sql.value ("T_RECEIVERBANKNAME", null, V_STRING )
                                         ,sql.value ("T_RECEIVERNAME"    , null, V_STRING )
                                         ,sql.value ("t_GROUND"          , null, V_STRING )
                                         ,sql.value ("t_payeraccount"    , null, V_STRING )
                                         ,sql.value ("T_AMOUNT"          , null, V_MONEY)
                                         ,sql.value ("t_amountlast"      , null, V_MONEY)
                                          );
        end;
        parm = TArray();
    
        sql=  "SELECT    /*+ index(pm USR_DPMPAYM_DBT_IDXFC) LEADING(acc pm)*/"+
            " pm .t_payer,"+
            " PROP.T_NUMBER,"+
            " pm.T_PAYERBANKENTERDATE,"+
            " PROP.T_RECEIVERBANKNAME,"+
            " PROP.T_RECEIVERNAME,"+
            " PROP.t_GROUND,"+
            " pm.t_payeraccount,"+
            " kprop.t_reqsum T_AMOUNT,"+
            " pm.t_futurePayerAmount AS t_amountlast"+
            " FROM   dpspaydem_dbt kprop,"+
            " dpspayord_dbt ord,"+
            " dpmpaym_dbt pm,"+
            " dpmrmprop_dbt prop,"+
            " daccount_dbt acc"+
            " WHERE acc.t_account =:account"+
            " AND ACC.T_CLIENT = pm.t_payer"+
            " AND ord.t_orderid = kprop.t_orderid"+
            " AND pm.t_paymentid = ord.t_orderid"+
            " AND PM.T_PAYMENTID = PROP.T_PAYMENTID"+
            " AND kprop.t_accept = 0"+
            " AND ord.t_currentstate = 3";
        parm [ parm.size () ] = SqlParam ("account", p_account);
        if ((notNull (dateperiod)) and (notNull(safeGetPropMandatory(dateperiod, "p_datebegin", V_DATE)))) //•·´® Ø•‡•§†´® Ø•‡®Æ§
            sql=sql+" AND pm.T_PAYERBANKENTERDATE Between :datebegin AND :dateend";
            parm [ parm.size () ] = SqlParam ("datebegin", safeGetPropMandatory(dateperiod, "p_datebegin", V_DATE));
            parm [ parm.size () ] = SqlParam ("dateend", nvl_ex (safeGetProp (dateperiod,"p_dateend", V_DATE) ,{curdate} ));
        end;
        sql =sql+" order by pm.T_PAYERBANKENTERDATE";
        sql = execSqlSelect (sql, parm);
        while (sql.moveNext ())
            KList.outK1 [ KList.outK1.size () ] = TArrayListK (sql.value ("t_payer"          , null, V_INTEGER)
                                         ,sql.value ("T_NUMBER"          , null, V_STRING )
                                         ,sql.value ("T_PAYERBANKENTERDATE"       , null, V_DATE )
                                         ,sql.value ("T_RECEIVERBANKNAME", null, V_STRING )
                                         ,sql.value ("T_RECEIVERNAME"    , null, V_STRING )
                                         ,sql.value ("t_GROUND"          , null, V_STRING )
                                         ,sql.value ("t_payeraccount"    , null, V_STRING )
                                         ,sql.value ("T_AMOUNT"          , null, V_MONEY)
                                         ,sql.value ("t_amountlast"      , null, V_MONEY)
                                          );
        end;
        return KList ;
    end;

//ØÆ´„Á•≠®• ´®¨®‚†
    macro GetLimitACC(p_account :string)
        private var rs,cmd; 
        cmd=RsdCommand("SELECT lim.T_limit "+
                    "FROM   dacclimit_dbt lim "+
                    "WHERE       LIM.T_ACCOUNT = ? "+
                    "        AND t_limitdate = to_date('01.01.0001','dd.mm.yyyy') "+
                    "        AND LIM.T_CODE_CURRENCY = usr_common.get_fiid (LIM.T_ACCOUNT)");
        cmd.addparam("acc", RSDBP_IN, p_account);
        rs = RsdRecordset(cmd);
        if ((rs.movenext()) and (valtype(rs.value("T_limit"))!=26))
            return rs.value("T_limit");
        else
            runerror("ã®¨®‚ ØÆ ·Á•‚„:"+p_account+" ≠• „·‚†≠Æ¢´•≠")
        end;
    end;

// èÆ´„Á®‚Ï ·Ø®·Æ™ Æ·‚†‚™Æ¢ ØÆ ·Á•‚„ ™´®•≠‚†
    macro GetAccRest(p_account :string,dateperiod :object /*p_datebegin,p_dateend*/)
        private var rs,cmd,sql;
        private var out  =  TArray();
        private var parm = TArray();
        var  RestList = TArray();
        class TArrayListRest (_RESTDATE, _REST, _PLANREST)
            var RESTDATE      :date  = nvl_ex (_RESTDATE    , zeroValue (V_DATE)); 
            var REST          :money = nvl_ex (_REST         , zeroValue (V_MONEY));
            var PLANREST      :money = nvl_ex (_PLANREST , zeroValue (V_MONEY));
        end;
         
        sql ="SELECT   REST.T_RESTDATE,REST.T_REST,REST.T_PLANREST"+
             "   FROM   drestdate_dbt rest, daccount_dbt acc"+
             "   WHERE       acc.t_account = :account"+
             "   AND ACC.T_ACCOUNTID = REST.T_ACCOUNTID"+
             "   AND REST.T_RESTCURRENCY = usr_common.get_fiid (acc.t_account) ";
        parm [ parm.size () ] = SqlParam ("account", p_account);
        if ((notNull (dateperiod)) and (notNull(safeGetPropMandatory(dateperiod, "p_datebegin", V_DATE)))) //•·´® Ø•‡•§†´® Ø•‡®Æ§
            sql=sql+" AND rest.T_RESTDATE Between :datebegin AND :dateend";
            parm [ parm.size () ] = SqlParam ("datebegin", safeGetPropMandatory(dateperiod, "p_datebegin", V_DATE));
            parm [ parm.size () ] = SqlParam ("dateend", nvl_ex (safeGetProp (dateperiod,"p_dateend", V_DATE) ,{curdate} ));
        end;
        sql =sql+" order by REST.T_RESTDATE DESC";
        sql = execSqlSelect (sql, parm);
        while (sql.moveNext ())
            RestList[RestList.size ()] = TArrayListRest(sql.value ("T_RESTDATE"      , null, V_DATE)
                                     ,sql.value ("T_REST"          , null, V_MONEY )
                                     ,sql.value ("T_PLANREST"      , null, V_MONEY ));
        end;
        return RestList;
    end;
// èÆ´„Á®‚Ï ®≠‰Æ‡¨†Ê®Ó ØÆ Ø‡•‚•≠ß®Ô¨
    macro GetClaimInfo (p_account :string,dateperiod :object /*p_datebegin,p_dateend*/)
        private var rs,cmd,sql;
        private var out  =  TArray();
        private var parm = TArray();
        private var ClaimList = TArray();
        class TArrayListClaim (_STATE, _DOCDATE, _DATEREG,_DOCNUMBER,_INITNAME,_FISCORGCODE,_NAMEORG,_CLAIMKIND,_RESTKIND,_PRIORITY,_STARTAMOUNT,_COMMENT,_CUR)
            var STATE      :string  = nvl_ex (_STATE        , zeroValue (V_STRING)); 
            var DOCDATE    :date    = nvl_ex (_DOCDATE      , zeroValue (V_DATE));
            var DATEREG    :date    = nvl_ex (_DATEREG      , zeroValue (V_DATE));
            var DOCNUMBER  :string  = nvl_ex (_DOCNUMBER    , zeroValue (V_STRING));
            var INITNAME   :string  = nvl_ex (_INITNAME     , zeroValue (V_STRING));
            var FISCORGCODE:string  = nvl_ex (_FISCORGCODE  , zeroValue (V_STRING));
            var NAMEORG    :string  = nvl_ex (_NAMEORG      , zeroValue (V_STRING));
            var CLAIMKIND  :string  = nvl_ex (_CLAIMKIND    , zeroValue (V_STRING));
            var RESTKIND   :string  = nvl_ex (_RESTKIND     , zeroValue (V_STRING));
            var PRIORITY   :integer = nvl_ex (_PRIORITY     , zeroValue (V_INTEGER));
            var STARTAMOUNT:money   = nvl_ex (_STARTAMOUNT  , zeroValue (V_MONEY));
            var COMMENT    :string  = nvl_ex (_COMMENT      , zeroValue (V_STRING));
            var CUR        :string  = nvl_ex (_CUR          , zeroValue (V_STRING));
        end;
        sql ="SELECT   DECODE (claimstate.t_state, 1, 'Ä', 2, 'à', claimstate.t_state) t_state, "+
            "claim.t_docdate, "+
            "claim.T_SYSDATE datereg, "+
            "claim.t_docnumber, "+
            "init.t_name initname, "+
            "CLAIM.T_FISCORGCODE, "+
            "(SELECT   PARTY.T_NAME "+
            "   FROM   dobjcode_dbt code, dparty_dbt party "+
            "  WHERE       code.t_objecttype = 3 "+
            "          AND code.t_codekind = 28 "+
            "          AND code.t_code = CLAIM.T_FISCORGCODE "+
            "          AND PARTY.T_PARTYID = CODE.T_OBJECTID "+
            "          AND ROWNUM = 1) "+
            "   name_org, "+
            "DECODE (claim.t_claimkind, "+
            "        1, 'Ä‡•·‚', "+
            "        2, 'ñ•´•¢Æ• ®·ØÆ´ÏßÆ¢†≠®•', "+
            "        3, 'ê•ß•‡¢®‡Æ¢†≠®•', "+
            "        claim.t_claimkind) "+
            "   t_claimkind, "+
            "DECODE (claim.t_restkind, "+
            "        1, 'ØÆ´≠Î©', "+
            "        2, 'Á†·‚®Á≠Î©', "+
            "        3, '≠† ·„¨¨„', "+
            "        4, 'Æ°•·Ø•Á®‚•´Ï≠Î©', "+
            "        claim.t_restkind) "+
            "   t_restkind, "+
            "claim.T_PRIORITY, "+
            "claim.t_startamount, "+
            "DECODE (claim.t_comment, CHR (1), '', claim.t_comment) T_COMMENT, "+
            "(SELECT   fin.t_ccy "+
            "   FROM   dfininstr_dbt fin "+
            "  WHERE   fin.t_fiid = 0) cur "+
            "FROM   dacclaim_dbt claim, "+
            "       dacclaimstate_dbt claimstate, "+
            "       dacclaiminit_dbt init "+
            " WHERE   (claim.t_finishdate > (SELECT   SYSDATE FROM DUAL) "+
            "          OR claim.t_finishdate = TO_DATE ('  01.01.0001  ', 'DD.MM.YYYY')) "+
            "         AND (claimstate.t_state = 1 OR claimstate.t_state = 2) "+
            "         AND (claim.t_claimkind = 1 OR claim.t_claimkind = 2) "+
            "         AND claim.t_claimid = claimstate.t_claimid "+
            "         AND claimstate.t_statedate = "+
            "               (SELECT   MAX (t_statedate) "+
            "                  FROM   dacclaimstate_dbt "+
            "                 WHERE   t_claimid = claim.t_claimid "+
            "                         AND t_statedate <= SYSDATE) "+
            "         AND claim.t_account = :account "+
            "         AND init.t_initiatorid = claim.t_initiator";
            parm [ parm.size () ] = SqlParam ("account", p_account);
            if ((notNull (dateperiod)) and (notNull(safeGetPropMandatory(dateperiod, "p_datebegin", V_DATE)))) //•·´® Ø•‡•§†´® Ø•‡®Æ§
                sql=sql+" AND claim.t_docdate Between :datebegin AND :dateend";
                parm [ parm.size () ] = SqlParam ("datebegin", safeGetPropMandatory(dateperiod, "p_datebegin", V_DATE));
                parm [ parm.size () ] = SqlParam ("dateend", nvl_ex (safeGetProp (dateperiod,"p_dateend", V_DATE) ,{curdate} ));
            end;
            sql =sql+" order by claim.t_docdate ";
            sql = execSqlSelect (sql, parm);
            while (sql.moveNext ())
                ClaimList[ClaimList.size ()] = TArrayListClaim(sql.value ("t_state"      , null, V_STRING)
                                                               ,sql.value ("t_docdate"    , null, V_DATE )
                                                               ,sql.value ("datereg"      , null, V_DATE )
                                                               ,sql.value ("t_docnumber"  , null, V_STRING )
                                                               ,sql.value ("initname"     , null, V_STRING )
                                                               ,sql.value ("T_FISCORGCODE", null, V_STRING )
                                                               ,sql.value ("name_org"     , null, V_STRING )
                                                               ,sql.value ("t_claimkind"  , null, V_STRING )
                                                               ,sql.value ("t_restkind"   , null, V_STRING )
                                                               ,sql.value ("T_PRIORITY"   , null, V_INTEGER )
                                                               ,sql.value ("t_startamount", null, V_MONEY )
                                                               ,sql.value ("T_COMMENT"    , null, V_STRING )
                                                               ,sql.value ("cur"          , null, V_STRING ));
            end;
            return ClaimList;
    end;






























