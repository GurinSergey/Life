/* ---------------------------------------------------------------------------------------------------------------
 * Макрос массового формирования платежей бухгалтерии банка по XML-файлу через ТК
 *
 * @begin  : 2014-02-17
 *
 * @changes: 
 *
 *----------------------------------------------------------------------------------------------------------------*/

import Rsd, rcw, rsexts;
import globals, oralib, likePy;
import "fg_Life_parm.mac", "lib_fg.mac";

import BankInter;
import PaymInter;
import OprInter;

private const ERR_EXIT_SUCCESS = 0;
private const ERR_EXIT_FAILURE = 1;

var PACK_NUMBER_OURBANK      = 1;
var PACK_NUMBER_OUTSIDE_BANK = 605;
var PACK_NUMBER_MEMORDER     = 1505;

var ACC_PRBB_PAYER_OURCARD   = "30232810529000060071";
var ACC_PRBB_DEBTSET_DEBET   = "30233810719000060071";
var ACC_VUZ_PAYER_OURCARD    = "30232810601080000004";
var ACC_VUZ_PAYER_OTHERCARD  = "30233810201080000005";
var ACC_EXV_DEBTSET_DEBET    = "30233810800000010285";
var ACC_EXV_DEBTSET_CREDIT   = "30232810500000010285";
var ACC_VUZ_DEBTSET_DEBET    = "47423810201080000099";
var ACC_VUZ_DEBTSET_CREDIT   = "30232810501080000010";
var ACC_GEB_DEBTSET_DEBET    = "30233810919000070004";
var ACC_GEB_DEBTSET_CREDIT   = "30232810309000270004";

    //если значение из реестра получить не удалось, переменная своего текущего значения не изменит
    GetRegistryValue ( "PRBB\\ACQUIRING\\PACK_NUMBER_OURBANK",      0, PACK_NUMBER_OURBANK      );
    GetRegistryValue ( "PRBB\\ACQUIRING\\PACK_NUMBER_OUTSIDE_BANK", 0, PACK_NUMBER_OUTSIDE_BANK );
    GetRegistryValue ( "PRBB\\ACQUIRING\\PACK_NUMBER_MEMORDER",     0, PACK_NUMBER_MEMORDER     );
    GetRegistryValue ( "PRBB\\ACQUIRING\\ACC_PRBB_PAYER_OURCARD",   0, ACC_PRBB_PAYER_OURCARD   );
    GetRegistryValue ( "PRBB\\ACQUIRING\\ACC_PRBB_DEBTSET_DEBET",   0, ACC_PRBB_DEBTSET_DEBET   );
    GetRegistryValue ( "PRBB\\ACQUIRING\\ACC_VUZ_PAYER_OURCARD",    0, ACC_VUZ_PAYER_OURCARD    );
    GetRegistryValue ( "PRBB\\ACQUIRING\\ACC_VUZ_PAYER_OTHERCARD",  0, ACC_VUZ_PAYER_OTHERCARD  );
    GetRegistryValue ( "PRBB\\ACQUIRING\\ACC_EXV_DEBTSET_DEBET",    0, ACC_EXV_DEBTSET_DEBET    );
    GetRegistryValue ( "PRBB\\ACQUIRING\\ACC_EXV_DEBTSET_CREDIT",   0, ACC_EXV_DEBTSET_CREDIT   );
    GetRegistryValue ( "PRBB\\ACQUIRING\\ACC_VUZ_DEBTSET_DEBET",    0, ACC_VUZ_DEBTSET_DEBET    );
    GetRegistryValue ( "PRBB\\ACQUIRING\\ACC_VUZ_DEBTSET_CREDIT",   0, ACC_VUZ_DEBTSET_CREDIT   );
    GetRegistryValue ( "PRBB\\ACQUIRING\\ACC_GEB_DEBTSET_DEBET",    0, ACC_GEB_DEBTSET_DEBET    );
    GetRegistryValue ( "PRBB\\ACQUIRING\\ACC_GEB_DEBTSET_CREDIT",   0, ACC_GEB_DEBTSET_CREDIT   );


macro PM_CreateMemorialOrder (p_payer_account, 
                              p_receiver_account,  
                              p_value_date, 
                              p_num_doc, 
                              p_oper, 
                              p_debet_sum, 
                              p_ground, 
                              p_pack )

    var Memorial            = RsbMemorialOrder ( );
    var Payment             = Memorial.Payment ( );

    Memorial.State          = 0;
    Memorial.Oper           = {oper};
    Memorial.Chapter        = 1;
    Memorial.Code_Currency  = 0;
    Memorial.Kind_Oper      = " 4";
    //Gurin S. 23.06.2015 R-595472-2
    //Memorial.Origin         = 1;
    Memorial.Origin         = 2600; //Получен из ПЦ (эквайринг)
    Memorial.LaunchOper     = false;

    Payment.DocKind         = 70;
    Payment.Purpose         = PM_PURP_MEMORDER;
    Payment.ShifrOper       = "09";

    Payment.BaseFIID            = 0;
    Payment.Number              = p_num_doc;
    Payment.Ground              = p_ground;
    Payment.PayerAmount         = 
    Payment.ReceiverAmount      = 
    Payment.BaseAmount          = p_debet_sum;
    Payment.ValueDate           = 
    Payment.Date                = 
    Payment.ClientDate          = {CurDate};
    Payment.PayerBankEnterDate  = p_value_date;
    
    Payment.IsPlanPaym          = "X";
    Payment.PaymentKind         = "Н";//"Э"; Gurin S. 23.07.2013
    Payment.Priority            = 6;
    Payment.NumberPack          = p_pack;

    Payment.SetPayerPI ( PAYMENTS_GROUP_INTERNAL,          
                         {OurBank},
                         3,
                         {MFO_BANK},
                         {NAME_BANK},
                         {CORAC_BANK},
                         0,
                         1,
                         p_payer_account);

    Payment.SetReceiverPI ( PAYMENTS_GROUP_INTERNAL,       
                            {OurBank},
                            3,
                            {MFO_BANK},
                            {NAME_BANK},
                            {CORAC_BANK},
                            0,
                            1,
                            p_receiver_account);
                               
    return Memorial.Update();

OnError(Err)
    MsgBox(Err.Message,"| at ",Err.Line,"|in ",Err.Module); 
end;


macro PM_CreateBankPayment (p_payer_account, 
                            p_receiver_account,  
                            p_value_date, 
                            p_num_doc, 
                            p_oper, 
                            p_debet_sum, 
                            p_ground, 
                            p_pack, 
                            p_mfo_receiver, 
                            p_receiver_name, 
                            p_receiver_inn )

    // Платеж ББ

    var BankPaym = RsbBankPayment ();

    BankPaym.Status     = 1; 
    //Gurin S. 23.06.2015 R-595472-2
    //BankPaym.Origin     = 0; // Ручной ввод
    BankPaym.Origin     = 2600; //Получен из ПЦ (эквайринг)
    BankPaym.Oper       = p_oper; 
    BankPaym.LaunchOper = false;

    var Payment = BankPaym.Payment;

    Payment.DocKind     = 16;
    Payment.Ground      = p_ground;
    Payment.ShifrOper   = "01"; 
    Payment.Number      = p_num_doc;
    Payment.BaseFIID    = 0;
    Payment.PaymentKind = "Н"; //"Э"; Gurin S. 23.07.2013
    Payment.Priority    = 6;
    Payment.NumberPack  = p_pack;
    Payment.Purpose     = 15; /*PM_PURP_BANKPAYMENT*/
    Payment.IsPlanPaym  = "X";

    Payment.ClientDate     = 
    Payment.Date           = 
    Payment.ValueDate      = {CurDate};

    Payment.ReceiverAmount = 
    Payment.PayerAmount    = 
    Payment.BaseAmount     = p_debet_sum;

    Payment.PayerBankEnterDate = p_value_date;

    Payment.SetPayerPI (PAYMENTS_GROUP_INTERNAL,
                        {OurBank},
                        3,
                        {MFO_BANK},
                        {NAME_BANK},
                        {CORAC_BANK},
                        0,
                        1,
                        p_payer_account,
                        {OurBank});

    if (p_mfo_receiver == {MFO_BANK}) // внутренный платеж
        Payment.SetReceiverPI ( PAYMENTS_GROUP_INTERNAL,
                                {OurBank},
                                3,
                                {MFO_BANK},
                                {NAME_BANK},
                                {CORAC_BANK},
                                0,
                                1,
                                p_receiver_account);
    else
        Payment.SetReceiverPI ( PAYMENTS_GROUP_EXTERNAL, // Group // UNDEF
                                0,                    // BankID
                                3,                    // BankCodeKind 
                                p_mfo_receiver,       // {MFO_BANK},
                                "",                   // BankName
                                "",                   // CorrAcc
                                0,                    // FIID        
                                1,                    // Chapter      
                                p_receiver_account,   // Account      
                                0,                    // Client       
                                p_receiver_name,      // ClientName   
                                p_receiver_inn        // ClientINN    
                            );
    end;

    return BankPaym.Update ();

OnError(Err)
    MsgBox(Err.Message,"| at ",Err.Line,"|in ",Err.Module); 
end;


class AcquiringLoader (WorkBook_Path)

    var XML_File_Path = WorkBook_Path; //входной файл

    //информация о формируемом платеже
    private var number_doc = 0;
    private var p_payer_account = "";
    private var p_receiver_account = "";
    private var p_debet_sum = 0;
    private var p_ground = "";

    private var AcquiringRecord;
    private var tmp_sqlquery;
    private var term_sqlquery;
    private var client_sqlquery;

    //флаги постановки/снятия задолженности (для формирования мемордера вне зависимости от наличия номера пачки)
    private var setting_debt : bool = false;
    private var unsetting_debt : bool = false;

    /*---------------------------------------------------------------------------------------
      * Временные переменные для формирования сводного отчета по выгруженным платежам
      *---------------------------------------------------------------------------------------*/
    var rep_count_badsum            = 0;
    var rep_count_terminal_notfound = 0;
    var rep_count_terminal_block    = 0;
    var rep_count_zeroamount        = 0;
    var rep_count_debt_set          = 0;
    var rep_count_debt_closed_full  = 0;
    var rep_count_debt_closed_part  = 0;
    var rep_documents_total         = 0;

    var rep_amount_transfer         = 0;
    var rep_amount_commission       = 0;
    var rep_amount_payments         = 0;
    var rep_amount_debts_set        = 0;
    var rep_amount_debts_clear      = 0;
    var rep_amount_total            = 0;

    /*----------------------------------------------------------------------------------------------------------------
     * Нахождение записи, соответствующей POS-терминалу с идентификатором ID в пользовательском справочнике  
     * dsprterm_usr. Если соответствующую запись найти удалось, возвращается объект RSDRecordset со структурой,
     * напоминающей dsprterm_usr%rowtype:
     *           - t_name_firm
     *           - t_name_office
     *           - t_percent_value
     *           - t_acc_postuplen
     *           - t_acc_oplat
     *           - t_acc_percent
     *           - t_mfo_receiver
     *           - m_innkpp
     *           - t_account_receiver
     *           - t_number_dogovor
     *---------------------------------------------------------------------------------------------------------------*/

    macro EQ_FindRecordByPOS_ID (ID)
        var sql = "select m.t_name_firm, m.t_name_office, m.t_percent_value, m.t_acc_postuplen, m.t_acc_oplat,"
         + "\n" + "       m.t_acc_percent, m.t_mfo_receiver,"
         + "\n" + "       trim (both chr (1) from (m.t_inn_receiver || '/' || m.t_kpp_receiver)) m_innkpp,"
         + "\n" + "       m.t_account_receiver, m.t_number_dogovor"
         + "\n" + "  from dsprterm_usr m"
         + "\n" + " where m.t_number_terminal = :n";

        sql = ExecSQLSelect (sql, makeArray (SQLParam ("n", ID)));
        
        if (sql.MoveNext)
            return sql;
        end;

        return false;

    OnError(Err)
        MsgBox(Err.Message,"| at ",Err.Line,"|in ",Err.Module); 
    end;


    /*-------------------------------------------------------------------------------------------------------
     * Макрос подготовки к загрузке платежей: переписывает входящий xml-файл в таблицу dacquiring_record_usr
     *-------------------------------------------------------------------------------------------------------*/
    macro Init ()
        var ha = TArray, blob, strm, cmd, rs;

        /* очищаем промежуточную таблицу usr_acquiring_tk */
        cmd = RSDCommand("delete from usr_acquiring_tk");
        cmd.execute;

        cmd = RSDCommand("insert into usr_acquiring_tk values (1, null)");
        cmd.execute;

        /* переписываем xml-файл в промежуточную таблицу usr_acquiring_tk */
        strm = TStream ( XML_File_Path, "R" );

        ha[ha.size] = "xml";
        ha[ha.size] = V_STRING;
        ha[ha.size] = strm.getsize;
        ha[ha.size] = 0;
        ha[ha.size] = 0;

        blob = TRecHandler ( "xmlread", ha );
        strm.read2 ( blob );

        cmd = RSDCommand(" SELECT t_id, t_xmldata "
                         "   FROM usr_acquiring_tk "
                         "  WHERE t_id = 1 "
                         "    FOR UPDATE " );
        rs  = RSDRecordset( cmd, null, RSDVAL_STATIC ); 
        rs.bloblimitsize = 1;

        if (rs.MoveNext());
            rs.edit;
            rs.Fld( 1 ).Write( blob );
            rs.update;
        end;

        /* Разделяем XML-блок, находящийся в промежуточной таблице, на отдельные платежи
         * и записываем их в таблицу dacquiring_record_usr для последующего разбора. */
        cmd = RSDCommand(string(
          " DECLARE "
       ,"\n     v_counter PLS_INTEGER; "
       ,"\n BEGIN "
       ,"\n     v_counter := 0; "
       ,"\n     for rec in "
       ,"\n"
       ,"\n  (select xmltbl.* "
       ,"\n     from usr_acquiring_tk, XMLtable('/THIRD/LIST_Q1/Q1/LIST_BI_REPORT.R_POS_TRANSACTIONS_UR__1__2__3__4__5__6_/BI_REPORT.R_POS_TRANSACTIONS_UR__1__2__3__4__5__6_' "
       ,"\n                                 passing xmltype(t_xmldata)  "
       ,"\n                                 columns dev_owner    path 'DEVICE_OWNER'     -- владелец устройства "
       ,"\n                                        ,company      path 'COMPANY'          -- компания "
       ,"\n                                        ,address      path 'ADDR'             -- адрес "
       ,"\n                                        ,device       path 'DEVICE'           -- устройство "
       ,"\n                                        ,post_date    path 'POSTING_DATE'     -- дата проводки "
       ,"\n                                        ,amount       path 'AMOUNT'           -- сумма "
       ,"\n                                        ,currency     path 'CURR'             -- валюта "
       ,"\n                                        ,fee_perc     path 'FEE'              -- % (комиссии) "
       ,"\n                                        ,settl_amount path 'SETTL_AMOUNT'     -- устан. сумма "
       ,"\n                                        ,fee          path 'fee_DF_C_60'      -- fee (комиссия) "
       ,"\n                                        ,card_owner   path 'CARD_OWNER'       -- владелец карты "
       ,"\n                                        ,card_num     path 'CONTRACT_NUMBER'  -- № счёта/карты "
       ,"\n                                        ,card_type    path 'CARD_TYPE'        -- тип карты "
       ,"\n                                        ,tr_details   path 'TRANS_DETAILS'    -- назначение платежа "
       ,"\n                                        ,tr_date      path 'TRANS_DATE'       -- дата транзакции "
       ,"\n                                        ,tr_type      path 'TRANS_TYPE'       -- тип транзакции "
       ,"\n                                        ,req_cat      path 'REQUEST_CATEGORY' -- REQUEST_CATEGORY "
       ,"\n                                        ,auth_code    path 'AUTH_CODE'        -- код авторизации "
       ,"\n                                        ,bank_cash    path 'BANK_CASH') xmltbl ) "
       ,"\n      loop "
       ,"\n          insert into dacquiring_record_usr values "
       ,"\n              (v_counter "
       ,"\n              ,rec.dev_owner "
       ,"\n              ,rec.company "
       ,"\n              ,rec.address "
       ,"\n              ,rec.device "
       ,"\n              ,rec.amount "
       ,"\n              ,rec.currency "
       ,"\n              ,rec.fee_perc "
       ,"\n              ,rec.settl_amount "
       ,"\n              ,rec.fee "
       ,"\n              ,rec.card_owner "
       ,"\n              ,rec.card_num "
       ,"\n              ,rec.card_type "
       ,"\n              ,rec.tr_details "
       ,"\n              ,rec.post_date); "
       ,"\n          v_counter := v_counter + 1; "
       ,"\n      end loop; "
       ,"\n "
       ,"\n END;"));

        cmd.execute;

        return 0;

    OnError(Err)
        //MsgBox(Err.Message,"| at ",Err.Line,"|in ",Err.Module);
        return Err.Message;
    end;


    /*-----------------------------------------------------------------------------------------------------
     * Макрос-обёртка генерации банковского ордера
     *-----------------------------------------------------------------------------------------------------*/    
    private macro CreateBankorder ( )
        var p_receiver_name;
        var p_mfo_receiver;
        var p_receiver_inn;
        var p_number_pack;
        var stat;

        number_doc = number_doc + 1;
        //Gurin S. 23.06.2015 R-595472-2
        if(substr(string(number_doc),strlen(string(number_doc))-2) == "000")
           number_doc = number_doc + 1;
        end;
        //подбираем счёт оплаты
        if (p_payer_account == "") //если счет назначен "снаружи", то не задаём его здесь

            if (_bank.is_PRBB())
                p_payer_account = ACC_PRBB_PAYER_OURCARD;
            elif (_bank.is_GEB())
                p_payer_account = ACC_GEB_DEBTSET_CREDIT;
            elif (_bank.is_VUZ())
                if  ((StrUpr(term_sqlquery.value("cardholder")) == StrUpr("ВУЗ-банк"))
                  or (StrUpr(term_sqlquery.value("cardholder")) == StrUpr("ВУЗбанк")))
                    p_payer_account = ACC_VUZ_PAYER_OURCARD;
                else
                    p_payer_account = ACC_VUZ_PAYER_OTHERCARD;
                end;
            else
                p_payer_account = AcquiringRecord.value("t_Acc_Oplat");
            end;
        end;

        if (p_receiver_account == "")
            p_receiver_account = AcquiringRecord.value("t_Account_Receiver");
        end;

        if (p_debet_sum == 0) //если сумма платежа назначена "снаружи", то не задаём её здесь
            p_debet_sum = double(term_sqlquery.value("carryamount"));
        end;

        if (    (AcquiringRecord.value ("m_innkpp") != "")
            and (AcquiringRecord.value ("m_innkpp") != strFor (1))
            and (AcquiringRecord.value ("m_innkpp") != strFor (0))
            and (AcquiringRecord.value ("m_innkpp") != "/"))
            p_receiver_inn = AcquiringRecord.value ("m_innkpp");
        else
            p_receiver_inn = "";
        end;

        if (   (AcquiringRecord.value ("t_MFO_Receiver") == {mfo_bank}) 
            or (AcquiringRecord.value ("t_MFO_Receiver") == "") 
            or (AcquiringRecord.value ("t_MFO_Receiver") == strFor (1))
            or (AcquiringRecord.value ("t_MFO_Receiver") == strFor (0))
            ) // "свой банк"

            p_number_pack  = PACK_NUMBER_OURBANK;
            p_mfo_receiver = {mfo_bank};

        else // "чужой банк"
            p_mfo_receiver  = AcquiringRecord.value ("t_MFO_Receiver");
            p_receiver_name = AcquiringRecord.value ("t_Name_Firm");
            p_number_pack   = PACK_NUMBER_OUTSIDE_BANK;
        end;

        if (p_ground == "") //если основание платежа назначено "снаружи", то не задаём его здесь
            p_ground = "Оплата операций по пластиковым картам за " +
                        substr (string ( term_sqlquery.value ("m_carrydate") ), 1, 10) +
                       " " +
                        string (AcquiringRecord.value ("t_name_office")) +
                       "; комиссия " +
                        string (AcquiringRecord.value ("t_Percent_Value"):0:3) +
                       "% - " +
                        money(term_sqlquery.value("feeamount")) +
                       " согласно договору " +
                        AcquiringRecord.value ("t_number_dogovor") +
                       ". НДС не облагается.";
        end;

        stat = PM_CreateBankPayment (p_payer_account,
                                     p_receiver_account,
                                     term_sqlquery.value ("m_carrydate"),
                                     number_doc,
                                     {oper},
                                     p_debet_sum,
                                     p_ground,
                                     p_number_pack,
                                     p_mfo_receiver,
                                     p_receiver_name,
                                     p_receiver_inn );

        if (stat == ERR_EXIT_SUCCESS)
            [ББ:  Дт ###################### Кт ###################### = ################ (ok)] 
                    (p_payer_account,          p_receiver_account,      money(p_debet_sum));
            rep_amount_payments = rep_amount_payments + p_debet_sum;
            rep_documents_total = rep_documents_total + 1;
            rep_amount_total    = rep_amount_total    + p_debet_sum;
        else
            [ББ:  Дт ###################### Кт ###################### = ################ (-error)] 
                    (p_payer_account,          p_receiver_account,      money(p_debet_sum));
        end;

        p_debet_sum = 0;
        p_ground = "";
        p_payer_account = "";
        p_receiver_account = "";

        return stat;

    end;


    /*-----------------------------------------------------------------------------------------------------
     * Макрос-обёртка генерации мемориального ордера
     *-----------------------------------------------------------------------------------------------------*/
    private macro CreateMemorder ( )
        var p_value_date;
        var stat;

        if ((PACK_NUMBER_MEMORDER != 0) or setting_debt or unsetting_debt)
        /* мемордера не формируются, если в реестре установлена нулевая пачка для них */
        /* но формируются, если нужно установить/погасить задолженность */
            number_doc = number_doc + 1;
            //Gurin S. 23.06.2015 R-595472-2
            if(substr(string(number_doc),strlen(string(number_doc))-2) == "000")
               number_doc = number_doc + 1;
            end;

            //подбираем счета оплаты
            if   (setting_debt and _bank.is_PRBB())
                p_payer_account = ACC_PRBB_DEBTSET_DEBET;
                p_receiver_account = ACC_PRBB_PAYER_OURCARD;
            elif (unsetting_debt and _bank.is_PRBB())
                p_payer_account = ACC_PRBB_PAYER_OURCARD;
                p_receiver_account = ACC_PRBB_DEBTSET_DEBET;
            elif (setting_debt and _bank.is_EXV())
                p_payer_account = ACC_EXV_DEBTSET_DEBET;
                p_receiver_account = ACC_EXV_DEBTSET_CREDIT;
            elif (unsetting_debt and _bank.is_EXV())
                p_payer_account = ACC_EXV_DEBTSET_CREDIT;
                p_receiver_account = ACC_EXV_DEBTSET_DEBET;
            elif (setting_debt and _bank.is_GEB())
                p_payer_account = ACC_GEB_DEBTSET_DEBET;
                p_receiver_account = ACC_GEB_DEBTSET_CREDIT;
            elif (unsetting_debt and _bank.is_GEB())
                p_payer_account = ACC_GEB_DEBTSET_CREDIT;
                p_receiver_account = ACC_GEB_DEBTSET_DEBET;
            elif (setting_debt and _bank.is_VUZ())
                p_payer_account = ACC_VUZ_DEBTSET_DEBET;
                p_receiver_account = ACC_VUZ_DEBTSET_CREDIT;
            elif (unsetting_debt and _bank.is_VUZ())
                p_payer_account = ACC_VUZ_DEBTSET_CREDIT;
                p_receiver_account = ACC_VUZ_DEBTSET_DEBET;
            end;

            if (p_payer_account == "") //если счет уже назначен, то не задаём его здесь
                if (_bank.is_PRBB())
                    p_payer_account = ACC_PRBB_PAYER_OURCARD;
                elif (_bank.is_VUZ())
                    if  ((StrUpr(term_sqlquery.value("cardholder")) == StrUpr("ВУЗ-банк"))
                      or (StrUpr(term_sqlquery.value("cardholder")) == StrUpr("ВУЗбанк")))
                        p_payer_account = ACC_VUZ_PAYER_OURCARD;
                    else
                        p_payer_account = ACC_VUZ_PAYER_OTHERCARD;
                    end;
                else
                    p_payer_account = AcquiringRecord.value("t_Acc_Oplat");
                end;
            end;

            if (p_receiver_account == "")
                p_receiver_account = AcquiringRecord.value ("t_acc_percent");
            end;

            //подбираем сумму платежа
            if (setting_debt)
                p_debet_sum = term_sqlquery.value("negamount");
                p_ground = "Требование к " + client_sqlquery.value("t_name_firm") +
                           " за " + substr(string(term_sqlquery.value("m_carrydate")),1,10);
            end;

            if (p_debet_sum == 0) //если сумма платежа назначена "снаружи", то не задаём её здесь
                p_debet_sum = double(term_sqlquery.value("feeamount"));
            end;

            if (p_ground == "") //если основание платежа назначено "снаружи", то не задаём его здесь
                p_ground = "Комиссия банка по операциям в торговых точках за " +
                            substr (string (term_sqlquery.value ("m_carrydate")), 1, 10) +
                           " " +
                            string (AcquiringRecord.value ("t_name_office")) +
                           ", комиссия " +
                            string (AcquiringRecord.value ("t_percent_value"):0:3) +
                           " % - согласно договору " +
                            string (AcquiringRecord.value ("t_number_dogovor"));
            end;

            p_value_date = term_sqlquery.value ("m_carrydate");

            stat = PM_CreateMemorialOrder (p_payer_account,
                                           p_receiver_account,
                                           {CurDate}, // p_value_date,
                                           number_doc,
                                           {oper},
                                           p_debet_sum,
                                           p_ground,
                                           PACK_NUMBER_MEMORDER
                                           );

            if (stat == ERR_EXIT_SUCCESS)
                [МО:  Дт ###################### Кт ###################### = ################ (ok)]
                         (p_payer_account,         p_receiver_account,      money(p_debet_sum));
                if (setting_debt)
                    rep_amount_debts_set = rep_amount_debts_set + p_debet_sum;
                    rep_count_debt_set = rep_count_debt_set + 1;
                elif (unsetting_debt)
                    rep_amount_debts_clear = rep_amount_debts_clear + p_debet_sum;
                else
                    rep_amount_commission = rep_amount_commission + p_debet_sum;
                end;
                rep_documents_total   = rep_documents_total + 1;
                rep_amount_total      = rep_amount_total + p_debet_sum;
            else
                [МО:  Дт ###################### Кт ###################### = ################ (-error)]
                         (p_payer_account,         p_receiver_account,      money(p_debet_sum));
            end;

            p_debet_sum = 0;
            p_ground = "";
            p_payer_account = "";
            p_receiver_account = "";
            setting_debt = false;
            unsetting_debt = false;

        end;

    end;

    /*-----------------------------------------------------------------------------------------------------
     * Макрос генерации платежей
     *-----------------------------------------------------------------------------------------------------*/
    macro CreatePayments ( )
        var j = 0;
        var s = 0;
        var d;
        var debt = 0;
        var del_sqlquery;
        var debt_sqlquery;
        var tsp_detail : bool = true; //флаг "детализировать платежи по ТСП"

        // устанавливаем счётчик номеров документов
        number_doc = int( substr( string( date()), 1, 2) + "000");

        println ("Детализированный протокол вставки платежей");

        /* проверяем все платежи на разные условия, так как впоследствии некоторые из них могут быть проведены группой */
        tmp_sqlquery = RsdRecordSet(string(
               "select distinct"
            +"\n       rtrim(usr.m_id_pos,chr(255)) m_id_pos,"
            +"\n       nvl(term.t_client_block,chr(1)) t_client_block"
            +"\n  from dacquiring_record_usr usr, dsprterm_usr term"
            +"\n where usr.m_id_pos = term.t_number_terminal(+)"));

        while (tmp_sqlquery.MoveNext)

            if (not EQ_FindRecordByPOS_ID(tmp_sqlquery.value ("m_id_pos")))
                // платежи без информации о терминале заносятся в отчёт и исключаются из дальнейшей обработки

                println ("В справочнике не найдена запись о POS-терминале с ID " + tmp_sqlquery.value ("m_id_pos"));
                rep_count_terminal_notfound = rep_count_terminal_notfound + 1;
                rep_count_badsum            = rep_count_badsum + 1;

                del_sqlquery = RsdCommand(String(
                    "delete from dacquiring_record_usr usr"
                +"\n where rtrim(usr.m_id_pos,chr(255)) = '" + tmp_sqlquery.value("m_id_pos") + "'" ));
                del_sqlquery.execute;

            elif (tmp_sqlquery.value("t_client_block") == "X")
                //платежи заблокированных клиентов исключаются из дальнейшей обработки

                println ("POS-терминал с ID " + tmp_sqlquery.value ("m_id_pos") + " заблокирован. " +
                         "Платежи исключены из обработки.");
                rep_count_badsum         = rep_count_badsum + 1;
                rep_count_terminal_block = rep_count_terminal_block + 1;

                del_sqlquery = RsdCommand(String(
                    "delete from dacquiring_record_usr usr"
                +"\n  where rtrim(usr.m_id_pos,chr(255)) = '" + tmp_sqlquery.value("m_id_pos") + "'" ));
                del_sqlquery.execute;

            end;
        end;

        // перебираем всех клиентов
        client_sqlquery = RsdRecordSet(string(
           "select distinct "
        +"\n       max(s.t_name_firm) t_name_firm, s.t_inn_receiver,"
        +"\n       nvl((select sum(h.t_debt_rest) from dacquiring_history_usr h where h.t_inn_receiver = s.t_inn_receiver),0) t_debt,"
        +"\n       nvl(max(t_no_tsp_detail),chr(1)) no_tsp_detail"
        +"\n  from dsprterm_usr s"
        +"\n where upper(s.t_number_terminal) in"
        +"\n    (select distinct upper(rtrim(m_id_pos,chr(255))) from dacquiring_record_usr)"
        +"\n group by s.t_inn_receiver"
        +"\n order by t_name_firm"));

        while (client_sqlquery.MoveNext)

            debt = 0;

            if (client_sqlquery.value("no_tsp_detail") != "X") //с детализацией по ТСП
                //перебираем все терминалы клиента
                term_sqlquery = RsdRecordSet(string(
                   "select r.m_id_pos"
                +"\n      ,sum(r.m_totalamount)    totalamount"
                +"\n      ,sum(r.m_carryamount)    carryamount"
                +"\n      ,sum(r.m_feeamount)      feeamount"
                +"\n      ,max(r.m_carrydate) m_carrydate"
                +"\n      ,0 - sum(case when r.m_carryamount < 0 then r.m_carryamount else 0 end) negamount"
                +"\n      ,sum(r.m_carryamount) - sum(case when r.m_carryamount < 0 then r.m_carryamount else 0 end) posamount"
                +"\n      ,0 - sum(case when r.m_feeamount < 0 then r.m_feeamount else 0 end) feenegamount"
                +"\n      ,sum(case when r.m_feeamount > 0 then r.m_feeamount else 0 end)     feeposamount"
                +"\n      ,max(r.m_cardholder) cardholder"
                +"\n  from dacquiring_record_usr r"
                +"\n where upper(r.m_id_pos) in"
                +"\n    (select distinct upper(rtrim(t_number_terminal,chr(255))) from dsprterm_usr"
                +"\n      where t_inn_receiver = '" + client_sqlquery.value("t_inn_receiver") + "')"
                +"\n group by r.m_id_pos"
                +"\n order by negamount desc"));

            else //без детализации по ТСП
                //собираем суммы по всем терминалам клиента
                term_sqlquery = RsdRecordSet(string(
                   "select max(r.m_id_pos)      m_id_pos"
                +"\n      ,sum(r.m_totalamount) totalamount"
                +"\n      ,sum(r.m_carryamount) carryamount"
                +"\n      ,sum(r.m_feeamount)   feeamount"
                +"\n      ,max(r.m_carrydate)   m_carrydate"
                +"\n      ,0 - sum(r.negamount) negamount"
                +"\n      ,sum(r.m_carryamount) - sum(r.negamount) posamount"
                +"\n      ,0 - sum(r.feenegamount) feenegamount"
                +"\n      ,sum(r.feeposamount)     feeposamount"
                +"\n      ,max(r.m_cardholder)     cardholder"
                +"\n  from (select m_id_pos"
                +"\n              ,max(m_carrydate)   m_carrydate"
                +"\n              ,max(m_cardholder)  m_cardholder"
                +"\n              ,sum(m_carryamount) m_carryamount"
                +"\n              ,sum(m_feeamount)   m_feeamount"
                +"\n              ,sum(m_totalamount) m_totalamount"
                +"\n              ,sum(case when m_carryamount < 0 then m_carryamount else 0 end) negamount"
                +"\n              ,sum(case when m_feeamount < 0 then m_feeamount else 0 end)     feenegamount"
                +"\n              ,sum(case when m_feeamount > 0 then m_feeamount else 0 end)     feeposamount"
                +"\n              ,sum(case when m_carryamount > 0 then m_carryamount else 0 end) posamount"
                +"\n          from dacquiring_record_usr"
                +"\n         group by m_id_pos ) r"
                +"\n where upper(r.m_id_pos) in"
                +"\n      (select distinct upper(rtrim(t_number_terminal,chr(255))) from dsprterm_usr"
                +"\n        where t_inn_receiver = '" + client_sqlquery.value("t_inn_receiver") + "')"));

            end; //if (tsp_detail)

            while (term_sqlquery.MoveNext)

                j = j + 1;

                AcquiringRecord = EQ_FindRecordByPOS_ID (term_sqlquery.value ("m_id_pos"));

                if (term_sqlquery.value("negamount") != 0) //ставим в долг отриц. суммы

                    setting_debt = true;
                    CreateMemorder();

                    /* заносим задолженность в справочник */
                    del_sqlquery = RsdCommand(string(
                       "update dsprterm_usr"
                    +"\n   set t_debt = nvl(t_debt,0) + abs(" + term_sqlquery.value("negamount") + ")"
                    +"\n where upper(t_number_terminal) in"
                    +"\n (select upper(t_number_terminal) from dsprterm_usr where t_inn_receiver = '" +
                                                           client_sqlquery.value("t_inn_receiver") + "')"));
                    del_sqlquery.execute;

                    /* заносим задолженность в историю */
                    del_sqlquery = RsdCommand("insert into dacquiring_history_usr values (?,?,?,?,?,chr(0),?,?)");
                    DtTmSplit(term_sqlquery.value("m_carrydate"), d);
                    del_sqlquery.AddParam("ID",        RSDBP_IN, 0);
                    del_sqlquery.AddParam("INN",       RSDBP_IN, client_sqlquery.value("t_inn_receiver"));
                    del_sqlquery.AddParam("CarryDate", RSDBP_IN, d);
                    del_sqlquery.AddParam("Amount",    RSDBP_IN, money(term_sqlquery.value("negamount")));
                    del_sqlquery.AddParam("Fee",       RSDBP_IN, money(term_sqlquery.value("feenegamount")));
                    del_sqlquery.AddParam("CurAmount", RSDBP_IN, money(term_sqlquery.value("negamount")));
                    del_sqlquery.AddParam("CurFee",    RSDBP_IN, money(term_sqlquery.value("feenegamount")));
                    del_sqlquery.Execute();

                end; //if negamount != 0

                debt_sqlquery = RsdRecordSet(string(
                   "select sum(h.t_feeamount)        feeamount"
                +"\n      ,nvl(sum(h.t_debt_rest),0) debt"
                +"\n      ,sum(h.t_feeamount + h.t_carryamount) totalamount"
                +"\n  from dacquiring_history_usr h "
                +"\n where h.t_closed != chr(88)"
                +"\n   and h.t_inn_receiver = '" + client_sqlquery.value("t_inn_receiver") + "'"));
                debt_sqlquery.MoveNext;

                debt = debt_sqlquery.value("debt");
                /*VDN 10.08.2015 R-612416 Проверим, беда со сравнением данных с плавающей точкой в переменных, которым значение присвоено из вне*/
                if (debt > 0)
                    var cmd = RSDRecordSet (string("select case when "+ term_sqlquery.value("posamount") +" > 0 then "+ term_sqlquery.value("posamount") +" else 0 end posamount from dual"));                     
                    cmd.movenext();
                end;
                //if ((debt > 0) and (term_sqlquery.value("posamount") > 0)) //гасим долг                    
                if ((debt > 0) and (cmd.value("posamount") > 0)) //гасим долг                    

                    unsetting_debt = true;
                    if (debt < term_sqlquery.value("posamount"))
                        p_debet_sum = debt;
                    else
                        p_debet_sum = term_sqlquery.value("posamount");
                    end;
                    s = p_debet_sum;
                    var change_summ = p_debet_sum;
                    p_ground = "Возмещение требования к " + client_sqlquery.value("t_name_firm");
                    CreateMemorder();

                    /* VDN 10.04.2014 собираем информациюю о задолжености клиента*/
                    var summ_debt = RSDRecordSet(string("select h.t_debt_rest debt, t_id"
                                                  +"\n     from dacquiring_history_usr h" 
                                                  +"\n     where h.t_closed != chr(88)"
                                                  +"\n           and h.t_inn_receiver = '" + client_sqlquery.value("t_inn_receiver") + "'"
                                                  +"\n                       order by t_id"));
                                                  
                    /* VDN 10.04.2014 проверяем каждую запись истории задолженности клиента*/
                    debugbreak;
                    while (summ_debt.MoveNext)                      
                        if (summ_debt.value(0) > change_summ)
                            rep_count_debt_closed_part = rep_count_debt_closed_part + 1;
                        else
                            rep_count_debt_closed_full = rep_count_debt_closed_full + 1;
                        end;
                        /* уменьшаем на сумму погашенного долга*/
                        change_summ = change_summ - summ_debt.value(0);
                        if (change_summ <= 0)
                           break;
                        end;
                    end;

                    /* уменьшаем задолженность в справочнике истории задолженностей */

                    del_sqlquery = RsdCommand(string(
                       "DECLARE"
                    +"\n     v_debt NUMBER;"
                    +"\n     v_sum NUMBER;"
                    +"\n     v_fee NUMBER;"
                    +"\n     v_fee_debt NUMBER;"
                    +"\n     v_id NUMBER;"
                    +"\n     v_inn VARCHAR2(25);"
                    +"\n BEGIN"
                    +"\n     v_sum := " + s + ";"
                    +"\n     v_fee := " + term_sqlquery.value("feeposamount") + ";"
                    +"\n     v_inn := '" + client_sqlquery.value("t_inn_receiver") + "';"
                    +"\n     WHILE (v_sum > 0)"
                    +"\n     LOOP"
                    +"\n         select t_debt_rest, t_fee_rest, t_id into v_debt, v_fee_debt, v_id"
                    +"\n           from dacquiring_history_usr"
                    +"\n          where t_id = (select min(t_id)"
                    +"\n                          from dacquiring_history_usr"
                    +"\n                         where t_inn_receiver = v_inn and t_debt_rest > 0);"
                    +"\n         IF    v_sum = v_debt THEN"
                    +"\n             update dacquiring_history_usr"
                    +"\n                set t_debt_rest = 0, t_fee_rest = 0, t_closed = 'X'"
                    +"\n              where t_id = v_id;"
                    +"\n             v_sum := 0;"
                    +"\n         ELSIF v_sum < v_debt THEN"
                    +"\n             update dacquiring_history_usr"
                    +"\n                set t_debt_rest = (t_debt_rest - v_sum), t_fee_rest = (t_fee_rest - v_fee)"
                    +"\n              where t_id = v_id;"
                    +"\n             v_sum := 0;"
                    +"\n             v_fee := 0;"
                    +"\n         ELSIF v_sum > v_debt THEN"
                    +"\n             update dacquiring_history_usr"
                    +"\n                set t_debt_rest = 0, t_fee_rest = 0, t_closed = 'X'"
                    +"\n              where t_id = v_id;"
                    +"\n             v_sum := v_sum - v_debt;"
                    +"\n             v_fee := v_fee - v_fee_debt;"
                    +"\n         END IF;"
                    +"\n     END LOOP;"
                    +"\n     EXCEPTION"
                    +"\n         WHEN NO_DATA_FOUND THEN v_sum := 0;"
                    +"\n END;" ));
                    del_sqlquery.execute;

                end; //if Debt > 0 and posamount > 0

                if (debt < term_sqlquery.value("posamount")) //возмещаем, если осталось

                    del_sqlquery = RsdRecordSet(string(
                       "select nvl(sum(t_fee_rest),0)                  t_fee_rest"
                    +"\n      ,nvl(sum(t_carryamount - t_feeamount),0) t_carryamount" //нужна первоначальная сумма проводки, т.е. общая сумма - комиссия
                    +"\n  from dacquiring_history_usr"
                    +"\n where t_inn_receiver = '" + client_sqlquery.value("t_inn_receiver")+ "'"
                    +"\n   and t_closed != chr(88)" ));
                    del_sqlquery.MoveNext;

                    p_debet_sum = term_sqlquery.value("posamount") - debt;
                    if (debt == 0)
                        p_ground = "Оплата операций по пластиковым картам за " +
                                    substr (string ( term_sqlquery.value ("m_carrydate") ), 1, 10) +
                                   " " +
                                    string (AcquiringRecord.value ("t_name_office")) +
                                   "; комиссия " +
                                    string (AcquiringRecord.value("t_Percent_Value"):0:3) +
                                   "% - " +
                                    money(term_sqlquery.value("feeposamount")) +
                                   " согласно договору " +
                                    AcquiringRecord.value("t_number_dogovor") +
                                   ". НДС не облагается.";
                    else
                        p_ground = "Оплата операций по пластиковым картам за " +
                                    substr (string ( term_sqlquery.value ("m_carrydate") ), 1, 10) +
                                   " " +
                                    string (AcquiringRecord.value ("t_name_office")) +
                                   "; комиссия " +
                                    string (AcquiringRecord.value("t_Percent_Value"):0:3) +
                                   "% - " +
                                    money(term_sqlquery.value("feeposamount") - debt_sqlquery.value("feeamount")) +
                                   " за минусом суммы возврата в " + money(debt_sqlquery.value("totalamount")) +
                                   " согласно договору " +
                                    AcquiringRecord.value("t_number_dogovor") +
                                   ". НДС не облагается.";
                    end;
                    CreateBankorder();   

                    CreateMemorder();

                end; //if Debt < posamount
                
                /* VDN 10.04.2014 изменил и перенес счетчик в момент гашения долга*/
                //увеличиваем счётчики погашения задолженностей
                /*debt_sqlquery = RsdRecordSet(string(
                   "select nvl(sum(h.t_debt_rest),0) debt"
                +"\n  from dacquiring_history_usr h "
                +"\n where h.t_closed != chr(88)"
                +"\n   and h.t_inn_receiver = '" + client_sqlquery.value("t_inn_receiver") + "'"));
                debt_sqlquery.MoveNext;

                //если долг был и было чем его гасить, значит, и погашение было
                if ((debt > 0) and (term_sqlquery.value("posamount") > 0))
                    if  (debt_sqlquery.value("debt") == 0) //полное или частичное?
                        rep_count_debt_closed_full = rep_count_debt_closed_full + 1;
                    else
                        rep_count_debt_closed_part = rep_count_debt_closed_part + 1;
                    end;
                end;*/

            end; //while (term_sqlquery.MoveNext)

        end; //while (client_sqlquery.MoveNext)

        if (tmp_sqlquery)
        [ ────────────────────────────────────────────────────────────────────────────────────────];
        [       Сводная информация:                                                               ];
        [     ───────────────────────────────────────────────────────────────────────────         ];
        [       Количество найденных сумм:                          ###################           ](j:r);
        [       Количество забракованных сумм:                      ###################           ](rep_count_badsum:r);
        [       ├─ документов с ненайденными терминалами            ###################           ](rep_count_terminal_notfound:r);
        [       ├─ документов с заблокированными терминалами        ###################           ](rep_count_terminal_block:r);
        [       └─ нулевых сумм                                     ###################           ](rep_count_zeroamount:r);
        [       Количество сформированных требований:               ###################           ](rep_count_debt_set:r);
        [       Количество требований, погашенных полностью:        ###################           ](rep_count_debt_closed_full:r);
        [       Количество требований, погашенных частично:         ###################           ](rep_count_debt_closed_part:r);
        [       Количество сформированных документов:               ###################           ](rep_documents_total:r);
        [       - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -           ];
        [       Сумма документов с переводами:                      ###################           ](money(rep_amount_transfer):r);
        [       Сумма документов с комиссиями:                      ###################           ](money(rep_amount_commission):r);
        [       Сумма документов с оплатами:                        ###################           ](money(rep_amount_payments):r);
        [       Сумма документов с требованиями:                    ###################           ](money(rep_amount_debts_set):r);
        [       Сумма документов с погашением требований:           ###################           ](money(rep_amount_debts_clear):r);
        [       Общая сумма документов:                             ###################           ](money(rep_amount_total):r);
        end;

        return string("badsum:"+rep_count_badsum+"; debtset:"+rep_count_debt_set+"; debtclosefull:"+rep_count_debt_closed_full+"; debtclosepart:"+rep_count_debt_closed_part+"; docs:"+rep_documents_total);
    end; /* macro CreatePayments */


    var init_ret = Init();

    if (init_ret == 0)
        return CreatePayments();
    else
        return init_ret;
    end;

OnError(err)
    println(err.Message);
    return err.Message;

end;


macro AcqLoader(WorkBook_Path)

    ExecSQL ("truncate table dacquiring_record_usr", null, false);

    var r = AcquiringLoader (WorkBook_Path);

    ExecSQL ("truncate table dacquiring_record_usr", null, false);
    
    return r;

end;