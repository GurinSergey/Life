// -------------------------------------------------------------------------------------------------
// @filename: soa_notes_checkdata.mac v.1
// @author  : 2013-07-15 zip_z. 
// @desc    : ТК Life - примечания. Проверка входящих параметров
// @changes : none
// -------------------------------------------------------------------------------------------------
// Примечания для страждущих: 
//      состояние проверки возвращается параметром V_INTEGER (константы из перечня CHECK_SETNOTE_*)
//      текстовое описание ошибки приходит в параметре errm
// -------------------------------------------------------------------------------------------------
import soa_core;

/** коды возврата проверок **/
const CHECK_SETNOTE_SUCCESS        = 0; // проверки пройдены
const CHECK_SETNOTE_FAILURE        = 1; // проверки пройдены
const CHECK_SETNOTE_NOTEXISTS      = 2; // примечание не существует
const CHECK_SETNOTE_WRONG_DATATYPE = 3; // неверный тип примечания
const CHECK_SETNOTE_MISSED_PARAM   = 4; // пропущен обязательный параметр


// @desc  : установка примечания для объекта системы. Проверка входящих параметров.
// @param :  p_objecttype - IN    V_INTEGER - тип объекта
//           p_objectid   - IN    V_STRING  - идентификатор объекта 
//           note         - IN    V_GENOBJ  - структура с описанием параметров примечания (TRsbDynamicBeanImpl)
//           errm         - INOUT V_STRING  - описание ошибки
// @return: V_INTEGER
macro usr_setnote_checkdata ( p_objecttype:integer, p_objectid:string, note:object, errm:string ):integer
    // проверка наличия обязательных параметров. Выбрасываемся сразу, потому что если не заполнены
    // нужные параметры, нет смысла проверять что-то ещё
    var noteKind  = safeGetProp (note, "noteKind"  ,V_INTEGER);
    var noteValue = safeGetProp (note, "noteValue" ,V_INTEGER);
    
    // по умолчанию считается, что всё хорошо
    var ret = CHECK_SETNOTE_SUCCESS;
    setParm (3, EMPTY_STRING);
    
    // проверка обязательных параметров
    if (isNull (p_objecttype)) setParm (3, "Пропущен обязательный параметр objectType"    ); return CHECK_SETNOTE_MISSED_PARAM; end;
    if (isNull (p_objectid  )) setParm (3, "Пропущен обязательный параметр objectId"      ); return CHECK_SETNOTE_MISSED_PARAM; end;
    if (isNull (noteKind    )) setParm (3, "Пропущен обязательный параметр note.noteKind" ); return CHECK_SETNOTE_MISSED_PARAM; end;
    if (isNull (noteValue   )) setParm (3, "Пропущен обязательный параметр note.noteValue"); return CHECK_SETNOTE_MISSED_PARAM; end;
    
    // проверка корректности переданных параметров примечания: на существование и соответствие типов
    var sql = "SELECT m_note_valtype, m_object_name FROM usr_vw_soa_notes_chk WHERE m_object_type = :m_object_type AND m_note_kind = :m_note_kind";
    sql = execSqlSelect (sql, makeArray (SQLParam ("m_object_type" ,p_objecttype ), SQLParam ("m_note_kind", noteKind )), true);
    if (not sql.moveNext ())
        // проверка на существование вида примечания
        setParm (3, "Примечание вида " + noteKind + " к объекту системы " + p_objecttype + "(" + sql.value ("m_object_name", null, V_STRING) + ") не существует" );
        ret = CHECK_SETNOTE_NOTEXISTS;
    else
        // проверка на соответствие типов данных между тем, что есть по справочнику (noteValType) 
        // и тем, что принят параметром фактически (realValType)
        var noteValType = sql.value ("m_note_valtype", null, V_STRING);
        var realValType = getRslStringValtype (noteValue);
        if ( noteValType != realValType )
            // тип параметров не совпадает - выбрасываем ошибку
            setParm (3, "Неверный тип примечания " + noteKind + " к объекту типа " + p_objecttype + "( ожидается " + noteValType + ", получено " + realValType);
            ret = CHECK_SETNOTE_WRONG_DATATYPE;
        end;
    end;
    return ret;
end;

// @desc  : удаление примечания для объекта системы. Проверка входящих параметров на существование
// @param :  p_objecttype - IN    V_INTEGER - тип объекта
//           p_notekind   - IN    V_INTEGER - вид примечания
// @return: V_INTEGER
macro check_delnote ( p_objecttype:integer, p_notekind:integer ):integer
    var sql = "SELECT 1 FROM usr_vw_soa_notes_chk where m_object_type = :m_object_type and m_note_kind = :m_note_kind";
    sql = execSqlSelect (sql, makeArray (SQLParam ("m_object_type", p_objecttype), SQLParam ("m_note_kind", p_notekind)), true);
    return iif (sql.moveNext(), CHECK_SETNOTE_SUCCESS, CHECK_SETNOTE_FAILURE);
end;