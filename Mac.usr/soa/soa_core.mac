// -------------------------------------------------------------------------------------------------
// @filename: soa_core.mac v.3
// @author  : 2013-05-01 zip_z. 
// @desc    : ТК Life - Общие функции 
// @changes : 2013-06-10 zip_z. + catchUserError
//            2013-06-11 zip_z. + safeGetProp
//            2013-06-11 zip_z. - TXReturnValueStruct
//            2013-06-17 LAO    + RSL_GetSystemError
//            2013-07-22 zip_z. + getRslStringValtype
//            2013-07-22 zip_z. + trimErrMsg
// -------------------------------------------------------------------------------------------------
import soa_const, lib_sqltools, lib_types, lib_account, lib_const, lib_pm_check; // mac.usr
import lib_str, cb_sql;                                                          // mac

// @desc   : Инициализация опера
// @return : none
macro initSessionData
    var sqlText = " BEGIN "
    " rsbsessiondata.m_oper := :m_oper; "
    " rsbsessiondata.m_curdate := :m_curdate; "
    " rsbsessiondata.m_OurBank := :m_OurBank; "
    " END; ";
    execSQL( sqlText, makeArray( sqlParam( "m_oper", {oper} ),
    sqlParam( "m_curdate", {curdate} ),
    sqlParam( "m_OurBank", {OurBank} ) ) );
end;

// @desc   : усечение сообщения об ошибке до 80 знаков (#197495)
// @return : V_STRING
macro TrimErrMsg (msg:string):string
    const RUNERROR_MSG_MAXLENGTH = 80;
    var ret = msg;
    if (strlen (msg) > RUNERROR_MSG_MAXLENGTH)
         ret = string (substr (msg, 1, RUNERROR_MSG_MAXLENGTH - 3), "...");
    end;
    return ret;
end;

// @desc   : быстрая генерация UniID
// @return : V_STRING
macro makeFastUniId (m_object_type:integer, m_object_id:string):string
    if (inList (m_object_type, OBJ_MEMORIAL_ORDER, OBJ_PS_REQCLOSEACC, OBJ_PS_PAYMENT_RUB, OBJ_PS_PAYMENT_CUR))
        m_object_id = strlpad (m_object_id, 34, "0");
    elif (m_object_type == OBJ_ACCOUNT)
        m_object_id = Acc_GetAccountUniId (m_object_id);
    else 
        m_object_id = strlpad (m_object_id, 10, "0");
    end;
    return m_object_id;
end;

// @desc   : пользовательский перехват ошибок в секции onError
// @return : V_STRING
macro catchUserError (e)
    runError (TrimErrMsg (e.message ));
end;

// @desc   : безопасное получение параметров (свойств) структуры типа obj
// @return : свойство или нулевое значение типа
macro safeGetProp (obj:object, propName:string, type:integer):variant
    return genGetProp(obj, propName);
onError 
    return zeroValue (type);
end;

// @desc   : безопасное получение параметров (свойств) структуры типа obj для обязательных реквизитов
// @return : свойство или null
macro safeGetPropMandatory (obj:object, propName:string, type:integer):variant
    return genGetProp(obj, propName);
onError return null;
end;

// @desc   : безопасное получение параметров (свойств) даты, zeroValue не слушается.
// @return : свойство или нулевое значение типа
macro safeGetPropDate (obj:object, propName:string, type:integer):variant
    return genGetProp(obj, propName);
onError 
    return null;
end;

// @desc   : "правильный" возврат ошибки ! взято из commonint.mac
// @return :  V_STRING (строка с текстом ошибки)
macro RSL_GetSystemError (stat : integer):string
    initError ();
    memoryError (stat);
    return getErrMsg ();
end;

// @desc   : получить текстовое описание типа переменной, которая пришла в параметре v
// @return : V_STRING
macro getRslStringValtype (v:variant):string
    var ret = "{UNKNOWN}";
    var type = valtype (v);

    if   ( type ==  V_MONEY   ) ret = "V_MONEY";      
    elif ( type ==  V_R2M     ) ret = "V_R2M";
    elif ( type ==  V_MEMADDR ) ret = "V_MEMADDR";
    elif ( type ==  V_DTTM    ) ret = "V_DTTM";
    elif ( type ==  V_PROC    ) ret = "V_PROC";
    elif ( type ==  V_DBFFILE ) ret = "V_DBFFILE";
    elif ( type ==  V_TXTFILE ) ret = "V_TXTFILE";
    elif ( type ==  V_ARRAY   ) ret = "V_ARRAY";
    elif ( type ==  V_STRUC   ) ret = "V_STRUC";
    elif ( type ==  V_FILE    ) ret = "V_FILE";
    elif ( type ==  V_GENOBJ  ) ret = "V_GENOBJ";
    elif ( type ==  V_TIME    ) ret = "V_TIME";
    elif ( type ==  V_DATE    ) ret = "V_DATE";
    elif ( type ==  V_BOOL    ) ret = "V_BOOL";
    elif ( type ==  V_STRING  ) ret = "V_STRING";
    elif ( type ==  V_DOUBLEL ) ret = "V_DOUBLEL";
    elif ( type ==  V_DOUBLE  ) ret = "V_DOUBLE";
    elif ( type ==  V_INTEGER ) ret = "V_INTEGER";
    elif ( type ==  V_UNDEF   ) ret = "V_UNDEF";
    end;                                     

    return ret;
end;