// -------------------------------------------------------------------------------------------------
// @filename: xr_claim.mac v.1
// @author  : 2013-05-01 zip_z. 
// @desc    : ТК Life - претензии
// @changes : none
// -------------------------------------------------------------------------------------------------

import soa_core;

// комментарий к претензиям по умолчанию
private const CLAIM_COMMENT_IFNULL = "Блокировка остатка инициирована внешней системой";

// @desc: вставка претензии
// DONE

macro usr_insert_claim (p_account  :string
                       ,p_sum      :money
                       ,p_comment  :string
                       ,p_oper     :integer
                       ):integer
    
    // дозаполнение параметров по умолчанию
    p_oper    = nvl_ex (p_oper, {oper});
    p_comment = nvl_ex (p_comment, CLAIM_COMMENT_IFNULL);
    
    // LAO Проверка на привилегию 0096 - http://portal.softlab.ru/reggy/ForFilial/Support/RSLFuncs/func.asp?idFunc=12057
    var acs_permission :string = EMPTY_STRING, is_exist:bool;
    var stat = RebuildResultRestrict (CLAIM_PRIV, p_oper, is_exist, acs_permission );
    
    if (EXIT_SUCCESS != stat) runError (RSL_GetSystemError (stat)); end;
    if (acs_permission !=EMPTY_STRING)
        if (index (acs_permission ,"^") > 0)
            runError ("У пользователя " + p_oper + " недостаточно прав для блокировки остатка"); 
        end;  
    else
        runError ("У пользователя " + p_oper + " недостаточно прав для блокировки остатка"); 
    end;
    /*КОНЕЦ ПРОВЕРКИ*/
    
    // транзакция вставки претензии
    var cmd = RSDCommand("begin usr_claims.insert_claim (?, ?, ?, ?, ?); end;");
    cmd.addParam ("m_account", RSDBP_IN , p_account );
    cmd.addParam ("m_oper"   , RSDBP_IN , p_oper    );
    cmd.addParam ("m_comment", RSDBP_IN , p_comment );
    cmd.addParam ("m_sum"    , RSDBP_IN , p_sum     );
    cmd.addParam ("m_error"  , RSDBP_OUT, V_STRING, 1024);
    cmd.execute();
    
    var errm = cmd.param("m_error").value;
    if (errm != EXIT_NOERROR)
        runError (errm); 
    else
        // чертово ТЗ. На кой нам возвращать ID вставленной претензии ?!
        var sql = "select t_claimid"         + "\n" +
                  "from ( select t_claimid"  + "\n" +
                  "       from dacclaim_dbt" + "\n" +
                  "       where t_account = :m_account and t_startamount = :m_startamount " + "\n" + 
                  "         and t_claimkind = 3 /*ACCLAIM_KIND_RESERVE*/ and t_restkind = 3 /*ACCLAIM_TYPE_AMOUNT*/ and t_initiator = 5 /*ACCLAIM_INIT_BANK*/ " + "\n" +
                  "       order by t_claimid desc )" + "\n" +
                  "where rownum = 1";
        sql = execSqlSelect (sql, makeArray (SqlParam ("m_account", p_account), SqlParam ("m_startamount", p_sum)));
        if (sql.moveNext ()) 
            return (sql.value ("t_claimid", null, V_INTEGER));
        end;
    end;
// пользовательский перехват исключений
onerror (e) catchUserError (e);    
end;

// @desc: удаление претензии
// DONE
macro usr_delete_claim (p_account         :string
                       ,p_sum             :money
                       ,p_comment         :string
                       )
    p_comment = nvl_ex (p_comment, CLAIM_COMMENT_IFNULL);

    // транзакция удаления претензии
    var cmd = RSDCommand("begin usr_claims.delete_claim (?, ?, ?, ?); end;");
    
    cmd.addParam ("m_account", RSDBP_IN , p_account );
    cmd.addParam ("m_sum"    , RSDBP_IN , p_sum     );
    cmd.addParam ("m_comment", RSDBP_IN , p_comment );
    cmd.addParam ("m_error"  , RSDBP_OUT, V_STRING, 1024);
    cmd.execute();
    
    var errm = cmd.param ("m_error").value;
    if  (errm != EXIT_NOERROR) runError (errm); end;
    
    return true;
  
// пользовательский перехват исключений
onerror (e) catchUserError (e);    
end;