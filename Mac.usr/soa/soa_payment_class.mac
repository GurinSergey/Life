// -------------------------------------------------------------------------------------------------
// @filename: soa_payment_class.mac v.4
// @author  : 2013-06-18 zip_z. 
// @desc    : ТК Life часть II - реализация класса SOAPayment
// @changes : none
// -------------------------------------------------------------------------------------------------
import BankInter, PaymInter, PSInter, CTInter;
import soa_core;

class SOAPayment ()
                                                                        // ------------------------------ --------- ---------------- -     ----------------
                                                                        // ARG                            DIR       DATA_TYPE_PSQL   D     DATA_TYPE_RSL
    /** OUT - обязательные параметры **/                                // ------------------------------ --------- ---------------- -     ----------------
    var payment_id                :integer    = null;                   // p_payment_id                   OUT       NUMBER           N     V_INTEGER  
    var error                     :string     = null;                   // p_error                        OUT       VARCHAR2         N     V_STRING
    /** IN - обязательные параметры **/
    var payer_account             :string     = null;                   // p_payer_account                IN        VARCHAR2         N     V_STRING        
    var receiver_account          :string     = null;                   // p_receiver_account             IN        VARCHAR2         N     V_STRING        
    var oper                      :integer    = null;                   // p_oper                         IN        NUMBER           N     V_INTEGER       
    var num_doc                   :string     = null;                   // p_num_doc                      IN        VARCHAR2         N     V_STRING        
    var debet_sum                 :money      = null;                   // p_debet_sum                    IN        NUMBER           N     V_MONEY         
    var ground                    :string     = null;                   // p_ground                       IN        VARCHAR2         N     V_STRING        
    var doc_kind                  :integer    = null;                   // p_doc_kind                     IN        NUMBER           N     V_INTEGER       
    var origin                    :integer    = null;                   // p_origin                       IN        NUMBER           N     V_INTEGER       
    /** IN - опциональные параметры **/
    var typedoc                   :string     = zeroValue (V_STRING );  // p_typedoc                      IN        VARCHAR2         Y     V_STRING        
    var payer_name                :string     = zeroValue (V_STRING );  // p_payer_name                   IN        VARCHAR2         Y     V_STRING        
    var payer_bic                 :string     = zeroValue (V_STRING );  // p_payer_bic                    IN        VARCHAR2         Y     V_STRING        
    var payer_inn                 :string     = zeroValue (V_STRING );  // p_payer_inn                    IN        VARCHAR2         Y     V_STRING        
    var payer_kpp                 :string     = zeroValue (V_STRING );  // p_payer_kpp                    IN        VARCHAR2         Y     V_STRING        
    var receiver_name             :string     = zeroValue (V_STRING );  // p_receiver_name                IN        VARCHAR2         Y     V_STRING        
    var receiver_bic              :string     = zeroValue (V_STRING );  // p_receiver_bic                 IN        VARCHAR2         Y     V_STRING        
    var receiver_inn              :string     = zeroValue (V_STRING );  // p_receiver_inn                 IN        VARCHAR2         Y     V_STRING        
    var receiver_kpp              :string     = zeroValue (V_STRING );  // p_receiver_kpp                 IN        VARCHAR2         Y     V_STRING        
    var pack                      :integer    = zeroValue (V_INTEGER);  // p_pack                         IN        NUMBER           Y     V_INTEGER       
    var corschem                  :integer    = zeroValue (V_INTEGER);  // p_corschem                     IN        NUMBER           Y     V_INTEGER       
    var num_operation             :integer    = zeroValue (V_INTEGER);  // p_num_operation                IN        NUMBER           Y     V_INTEGER       
    var usertypedoc               :string     = zeroValue (V_STRING );  // p_usertypedoc                  IN        VARCHAR2         Y     V_STRING        
    var kredit_sum                :money      = zeroValue (V_MONEY  );  // p_kredit_sum                   IN        NUMBER           Y     V_MONEY         
    var rate                      :money      = zeroValue (V_MONEY  );  // p_rate                         IN        NUMBER           Y     V_MONEY         
    var branch                    :integer    = zeroValue (V_INTEGER);  // p_branch                       IN        NUMBER           Y     V_INTEGER       
    var priority                  :integer    = zeroValue (V_INTEGER);  // p_priority                     IN        NUMBER           Y     V_INTEGER       
    var shifr                     :string     = zeroValue (V_STRING );  // p_shifr                        IN        VARCHAR2         Y     V_STRING        
    var value_date                :date       = zeroValue (V_DATE   );  // p_value_date                   IN        DATE             Y     V_DATE          
    var doc_date                  :date       = zeroValue (V_DATE   );  // p_doc_date                     IN        DATE             Y     V_DATE          
    var cash_symbs                :string     = zeroValue (V_STRING );  // p_cash_symbs                   IN        VARCHAR2         Y     V_STRING        
    var fio_client                :string     = zeroValue (V_STRING );  // p_fio_client                   IN        VARCHAR2         Y     V_STRING        
    var userfield1                :string     = zeroValue (V_STRING );  // p_userfield1                   IN        VARCHAR2         Y     V_STRING        
    var userfield2                :string     = zeroValue (V_STRING );  // p_userfield2                   IN        VARCHAR2         Y     V_STRING        
    var userfield3                :string     = zeroValue (V_STRING );  // p_userfield3                   IN        VARCHAR2         Y     V_STRING        
    var userfield4                :string     = zeroValue (V_STRING );  // p_userfield4                   IN        VARCHAR2         Y     V_STRING        
    var accept_term               :integer    = zeroValue (V_INTEGER);  // p_accept_term                  IN        NUMBER           Y     V_INTEGER       
    var accept_date               :date       = zeroValue (V_DATE   );  // p_accept_date                  IN        DATE             Y     V_DATE          
    var pay_condition             :string     = zeroValue (V_STRING );  // p_pay_condition                IN        VARCHAR2         Y     V_STRING        
    var accept_period             :integer    = zeroValue (V_INTEGER);  // p_accept_period                IN        NUMBER           Y     V_INTEGER       
    var creator_status            :string     = zeroValue (V_STRING );  // p_creator_status               IN        VARCHAR2         Y     V_STRING        
    var kbk_code                  :string     = zeroValue (V_STRING );  // p_kbk_code                     IN        VARCHAR2         Y     V_STRING        
    var okato_code                :string     = zeroValue (V_STRING );  // p_okato_code                   IN        VARCHAR2         Y     V_STRING        
    var ground_tax_doc            :string     = zeroValue (V_STRING );  // p_ground_tax_doc               IN        VARCHAR2         Y     V_STRING        
    var tax_period                :string     = zeroValue (V_STRING );  // p_tax_period                   IN        VARCHAR2         Y     V_STRING        
    var num_tax_doc               :string     = zeroValue (V_STRING );  // p_num_tax_doc                  IN        VARCHAR2         Y     V_STRING        
    var tax_date                  :string     = zeroValue (V_STRING );  // p_tax_date                     IN        VARCHAR2         Y     V_STRING        
    var tax_type                  :string     = zeroValue (V_STRING );  // p_tax_type                     IN        VARCHAR2         Y     V_STRING        
    var skip_check_mask           :integer    = zeroValue (V_INTEGER);  // p_skip_check_mask              IN        NUMBER           Y     V_INTEGER       
    var check_exists              :integer    = zeroValue (V_INTEGER);  // p_check_exists                 IN        NUMBER           Y     V_INTEGER       
    var run_operation             :integer    = zeroValue (V_INTEGER);  // p_run_operation                IN        NUMBER           Y     V_INTEGER       
    var pack_mode                 :integer    = zeroValue (V_INTEGER);  // p_pack_mode                    IN        NUMBER           Y     V_INTEGER  
    var make_carry_from_payment   :integer    = zeroValue (V_INTEGER);  // p_make_carry_from_payment      IN        NUMBER           Y     V_INTEGER  
    var transaction_mode          :integer    = zeroValue (V_INTEGER);  // p_transaction_mode             IN        NUMBER           Y     V_INTEGER  
    var doc_cur_iso               :string     = zeroValue (V_STRING );  // p_doc_cur_iso                  IN        VARCHAR2         Y     V_STRING
    var receiver_account_cur_iso  :string     = zeroValue (V_STRING );  // p_receiver_account_cur_iso     IN        VARCHAR2         Y     V_STRING
    var comiss_acc                :string     = zeroValue (V_STRING );  // p_comiss_acc                   IN        VARCHAR2         Y     V_STRING
    var expense_transfer          :string     = zeroValue (V_STRING );  // p_expense_transfer             IN        VARCHAR2         Y     V_STRING
    var vo_code                   :string     = zeroValue (V_STRING );  // p_vo_code                      IN        VARCHAR2         Y     V_STRING
    var gtd                       :string     = zeroValue (V_STRING );  // p_gtd                          IN        VARCHAR2         Y     V_STRING
    var gtd_date                  :date       = zeroValue (V_DATE   );  // p_gtd_date                     IN        DATE             Y     V_DATE    
    var gtd_cur_iso               :string     = zeroValue (V_STRING );  // p_gtd_cur_iso                  IN        VARCHAR2         Y     V_STRING
    var deal_passport             :string     = zeroValue (V_STRING );  // p_deal_passport                IN        VARCHAR2         Y     V_STRING
    var deal_date                 :date       = zeroValue (V_DATE   );  // p_deal_date                    IN        DATE             Y     V_DATE    
    var med_bankname              :string     = zeroValue (V_STRING );  // p_med_bankname                 IN        VARCHAR2         Y     V_STRING
    var med_bic                   :string     = zeroValue (V_STRING );  // p_med_bic                      IN        VARCHAR2         Y     V_STRING
    var receiver_bankname         :string     = zeroValue (V_STRING );  // p_receiver_bankname            IN        VARCHAR2         Y     V_STRING
    var receiver_bankcoracc       :string     = zeroValue (V_STRING );  // p_receiver_bankcoracc          IN        VARCHAR2         Y     V_STRING
    var receiver_bank_bic         :string     = zeroValue (V_STRING );  // p_receiver_bank_bic            IN        VARCHAR2         Y     V_STRING
    var ground_add                :string     = zeroValue (V_STRING );  // p_ground_add                   IN        VARCHAR2         Y     V_STRING
    var transfer_date             :date       = zeroValue (V_DATE   );  // p_transfer_date                IN        DATE             Y     V_DATE    
    var bosspost                  :string     = zeroValue (V_STRING );  // p_bosspost                     IN        VARCHAR2         Y     V_STRING        
    var bossfio                   :string     = zeroValue (V_STRING );  // p_bossfio                      IN        VARCHAR2         Y     V_STRING        
    var paymentkind               :string     = zeroValue (V_STRING );  // p_paymentkind                  IN        VARCHAR2         Y     V_STRING        
    var autorun_operation         :integer    = zeroValue (V_INTEGER);  // p_autorun_operation            IN        NUMBER           Y     V_INTEGER       
    var paperkind                 :integer    = zeroValue (V_INTEGER);  // p_paperkind                    IN        NUMBER           Y     V_INTEGER       
    var paperseries               :string     = zeroValue (V_STRING );  // p_paperseries                  IN        VARCHAR2         Y     V_STRING        
    var papernumber               :string     = zeroValue (V_STRING );  // p_papernumber                  IN        VARCHAR2         Y     V_STRING        
    var paperissueddate           :date       = zeroValue (V_DATE   );  // p_paperissueddate              IN        DATE             Y     V_DATE          
    var paperissuer               :string     = zeroValue (V_STRING );  // p_paperissuer                  IN        VARCHAR2         Y     V_STRING          
    var payerchargeoffdate        :date       = zeroValue (V_DATE   );  // p_payerchargeoffdate           IN        DATE             Y     V_DATE            
    var paytype                   :integer    = zeroValue (V_INTEGER);  // p_paytype                      IN        NUMBER           Y     V_INTEGER          
    var subkindmessagedebet       :integer    = zeroValue (V_INTEGER);  // p_subkindmessagedebet          IN        NUMBER           Y     V_INTEGER          
    var subkindmessagecredit      :integer    = zeroValue (V_INTEGER);  // p_subkindmessagecredit         IN        NUMBER           Y     V_INTEGER          
    var uin                       :string     = zeroValue (V_STRING );  // p_uin                          IN        VARCHAR2         Y     V_STRING 
    var ratetype                  :integer    = zeroValue (V_INTEGER);  // p_ratetype                     IN        NUMBER           Y     V_INTEGER
    var servicekindcode           :string     = zeroValue (V_STRING );
    
    // @desc  : проверка на допустимый вид для автообработки
    private macro checkAutorun (dockind:integer):bool
        return (inList (dockind, USR_CASH_IN, USR_CASH_OUT, USR_CASH_INOUT, USR_MEMORDER, USR_MEMORDER_BANK_ORDER, 
                                 USR_MULTYCARRY, USR_CLIENT_CASH_IN, USR_CLIENT_CASH_OUT, USR_BANK_PAYM, USR_EXTERNAL_IN 
                                ));
    end;
    
    // @desc  : физическая проверка заполненности обязательных свойств класса
    // @return: V_BOOL (true, если все хорошо)
    private macro validatePropsPhysical ():bool
        return ((notNull (payer_account))    and 
                (notNull (receiver_account)) and 
                (notNull (oper))             and 
                (notNull (num_doc))          and 
                (notNull (debet_sum))        and 
                (notNull (ground))           and 
                (notNull (doc_kind))         and 
                (notNull (origin))
               );
    end;
    
    // @desc  : логическая проверка заполненности обязательных свойств класса
    // @return: V_BOOL (true, если все хорошо)
    private macro validatePropsLogical (skip_check_mask):bool
        var sqlFilter = "";
        
        /** битовые маски исключающих проверок **/
        private const PM_CHECK_EXCLUDE_NONE                 :integer /* c_chk_default            */ = 0;   // все проверки работают
        private const PM_CHECK_EXCLUDE_PAYER_ACCOUNT_EXISTS :integer /* c_chk_payacc_exists      */ = 1;   // не проверять наличие счета плательщика
        private const PM_CHECK_EXCLUDE_PAYER_NAME           :integer /* c_chk_payname_match      */ = 2;   // не проверять наименование плательщика
        private const PM_CHECK_EXCLUDE_RECVR_ACCOUNT_EXISTS :integer /* c_chk_recacc_exists      */ = 4;   // не проверять наличие счета получателя
        private const PM_CHECK_EXCLUDE_RECVR_NAME           :integer /* c_chk_recname_match      */ = 8;   // не проверять наименование получателя
        private const PM_CHECK_EXCLUDE_PAYER_INNKPP         :integer /* c_chk_pay_inn_fill       */ = 16;  // не проверять/заполнять ИНН плательщика
        private const PM_CHECK_EXCLUDE_RECVR_INNKPP         :integer /* c_chk_rec_inn_fill       */ = 32;  // не проверять/заполнять ИНН получателя
        private const PM_CHECK_EXCLUDE_PAYER_ACCOUNT_FULL   :integer /* c_chk_payacc_exists_full */ = 64;  // не проверять наличие счета плательщика вообще
        private const PM_CHECK_EXCLUDE_RECVR_ACCOUNT_FULL   :integer /* c_chk_recacc_exists_full */ = 128; // не проверять наличие счета получател вообще
        private const PM_CHECK_EXCLUDE_BIC                  :integer /* c_chk_bic                */ = 256; // не проверять бики
        
        // нужно ли что-нибудь проверять? если да, проставляются соответствующие флаги true / false. 
        // если сие непонятно - учим алгебру логики, в качестве домашнего задания можно переписать на or/xor, муахаха :))
        const LOGICAL_CHECK_INCLUDE_NONE                 :bool = ( skip_check_mask != PM_CHECK_EXCLUDE_NONE );
        const LOGICAL_CHECK_INCLUDE_PAYER_ACCOUNT_EXISTS :bool = ( band ( skip_check_mask, PM_CHECK_EXCLUDE_PAYER_ACCOUNT_EXISTS ) != PM_CHECK_EXCLUDE_PAYER_ACCOUNT_EXISTS );
        const LOGICAL_CHECK_INCLUDE_PAYER_NAME           :bool = ( band ( skip_check_mask, PM_CHECK_EXCLUDE_PAYER_NAME           ) != PM_CHECK_EXCLUDE_PAYER_NAME           );
        const LOGICAL_CHECK_INCLUDE_RECVR_ACCOUNT_EXISTS :bool = ( band ( skip_check_mask, PM_CHECK_EXCLUDE_RECVR_ACCOUNT_EXISTS ) != PM_CHECK_EXCLUDE_RECVR_ACCOUNT_EXISTS );
        const LOGICAL_CHECK_INCLUDE_RECVR_NAME           :bool = ( band ( skip_check_mask, PM_CHECK_EXCLUDE_RECVR_NAME           ) != PM_CHECK_EXCLUDE_RECVR_NAME           );
        const LOGICAL_CHECK_INCLUDE_PAYER_INNKPP         :bool = ( band ( skip_check_mask, PM_CHECK_EXCLUDE_PAYER_INNKPP         ) != PM_CHECK_EXCLUDE_PAYER_INNKPP         );
        const LOGICAL_CHECK_INCLUDE_RECVR_INNKPP         :bool = ( band ( skip_check_mask, PM_CHECK_EXCLUDE_RECVR_INNKPP         ) != PM_CHECK_EXCLUDE_RECVR_INNKPP         );
        const LOGICAL_CHECK_INCLUDE_PAYER_ACCOUNT_FULL   :bool = ( band ( skip_check_mask, PM_CHECK_EXCLUDE_PAYER_ACCOUNT_FULL   ) != PM_CHECK_EXCLUDE_PAYER_ACCOUNT_FULL   );
        const LOGICAL_CHECK_INCLUDE_RECVR_ACCOUNT_FULL   :bool = ( band ( skip_check_mask, PM_CHECK_EXCLUDE_RECVR_ACCOUNT_FULL   ) != PM_CHECK_EXCLUDE_RECVR_ACCOUNT_FULL   );
        const LOGICAL_CHECK_INCLUDE_BIC                  :bool = ( band ( skip_check_mask, PM_CHECK_EXCLUDE_BIC                  ) != PM_CHECK_EXCLUDE_BIC                  );
                                                                                                                      
        /** проверки **/
        // -----------------------------------------------------------------------------------------
        // 0. Общий набор - все новые проверки, которым не соответствуют маски исключения, добавлять строго сюда !!
        // -----------------------------------------------------------------------------------------
        
        // проверка на существование по основным реквизитам (номер, Дт, Кт, сумма, дата, основание)
        if (check_exists == true)
            if (execMacroFile ("lib_pm_check.mac", "PM_isExistDuplicatePayment", this.doc_kind, this.value_date, this.payer_account, this.receiver_account, this.debet_sum, this.num_doc, this.ground))
                runError ("Платёж с такими реквизитами уже существует в БД RS-Bank",-110);
            end;
        end;
        
        // допустимый вид документа для обработки
       /* if (not (inList (this.docKind, SOA_CB_MULTYDOC, SOA_DLDOC_BANKPAYMENT, SOA_DLDOC_BANKCLAIM, SOA_DLDOC_MEMORIALORDER, SOA_DLDOC_BANKORDER
                                     , SOA_BBANK_CPORDER, SOA_PS_BUYCURORDER, SOA_PS_PAYORDER, SOA_PS_CPORDER, SOA_WL_INDOC, SOA_CASH_BOF_ADDORDER
                                     , SOA_CASH_BOF_INCORDER, SOA_CASH_BOF_OUTORDER, SOA_CASH_PS_INCORDER, SOA_CASH_PS_OUTORDER                     )))
            runError ("Вид документа " + this.docKind + " не поддерживается для вставки в БД RS-Bank");
        end;
        */
        // проверка происхождения
        if (not (execMacroFile ("lib_pm_check", "PM_isValidOrigin", this.doc_kind, this.origin)))
            runError ("Для вида документа " + this.doc_kind + " происхождение с кодом " + this.origin + " отсутствует в системном справочнике RS-Bank",-120);
        end;
        
        // валидный операционист
        if (not DB_FindValueByPrimaryKey ("dperson_dbt", "t_oper", this.oper))
            runError ("Пользователь " + this.oper + " не существует в БД RS-Bank",-130);
        end;
        
        sqlFilter = " t_userblocked  != chr (88) and t_userclosed != chr (88) and t_isdeleted != chr (88) ";
        if (not DB_FindValueByPrimaryKey ("dperson_dbt", "t_oper", this.oper, sqlFilter))
            runError ("Пользователь " + this.oper + " заблокирован, закрыт или удалён в БД RS-Bank",-140);
        end;
        
        // сумма (округление до двух знаков после запятой
        if (round (this.debet_sum , 2) != this.debet_sum  ) 
            runError ("Сумма дебета платежа содержит более двух знаков после запятой: "  + this.debet_sum,-150 ); 
        end;
        if (round (this.kredit_sum, 2) != this.kredit_sum ) 
            runError ("Сумма кредита платежа содержит более двух знаков после запятой: " + this.kredit_sum,-160); 
        end;
        
        // длина ОКАТО
        if (StrLen (this.okato_code) > 11)
            runError ("Длина кода ОКАТО превышает 11 символов: " + this.okato_code,-170);
        end;
        
        // если больше проверок не требуется, а общий набор подошел к концу, выбрасываемся
        if (LOGICAL_CHECK_INCLUDE_NONE)  return true; end;
        
        // -----------------------------------------------------------------------------------------
        // 1. Проверки LOGICAL_CHECK_INCLUDE_PAYER_ACCOUNT_EXISTS +30мс
        // -----------------------------------------------------------------------------------------
        if ((LOGICAL_CHECK_INCLUDE_PAYER_ACCOUNT_EXISTS) or (LOGICAL_CHECK_INCLUDE_PAYER_ACCOUNT_FULL))
            sqlFilter = " t_open_close != 'З' ";
            if (not DB_FindValueByPrimaryKey ("daccounts_dbt", "t_account", this.payerAccount, sqlFilter))
                runError ("Лицевой счет плательщика " + this.payerAccount + " не существует либо закрыт в БД RS-Bank",-180);
            end;
        end;

        // -----------------------------------------------------------------------------------------
        // 2. Проверки LOGICAL_CHECK_INCLUDE_PAYER_NAME + 20 мс
        // -----------------------------------------------------------------------------------------
        if (not LOGICAL_CHECK_INCLUDE_PAYER_NAME)
            if (isNull (this.payer_name))
                runError ("Отсутствует наименование плательщика",-190);
            end;
            
            var tmp_payer = Acc_GetClientName (this.payer_account);
            if ( tmp_payer != this.payer_name)
                runError ("Наименование клиента по счёту плательщика отличается от наименования, переданного внешней системой: "
                          "|Передано: " + this.payer_name +
                          "|Клиент по счету: " + tmp_payer,-200
                          );
            end;
        end;

        // -----------------------------------------------------------------------------------------
        // 3. Проверки LOGICAL_CHECK_INCLUDE_RECVR_ACCOUNT_EXISTS +60мс
        // -----------------------------------------------------------------------------------------
        if ((LOGICAL_CHECK_INCLUDE_RECVR_ACCOUNT_EXISTS) or (LOGICAL_CHECK_INCLUDE_RECVR_ACCOUNT_FULL))
            sqlFilter = " t_open_close != 'З' ";
            if (not DB_FindValueByPrimaryKey ("daccounts_dbt", "t_account", this.receiverAccount, sqlFilter))
                runError ("Лицевой счет получателя " + this.receiverAccount + " не существует либо закрыт в БД RS-Bank",-210);
            end;
        end;

        // -----------------------------------------------------------------------------------------
        // 4. Проверки LOGICAL_CHECK_INCLUDE_RECVR_NAME + 20 мс
        // -----------------------------------------------------------------------------------------
        if (LOGICAL_CHECK_INCLUDE_RECVR_NAME)
            if (isNull (this.payer_name))
                runError ("Отсутствует наименование получателя");
            end;
            
            var tmp_recv = Acc_GetClientName (this.payer_account);
            if ( tmp_recv != this.payer_name)
                runError ("Наименование клиента по счёту получателя отличается от наименования, переданного внешней системой: "
                          "|Передано: " + this.payer_name +
                          "|Клиент по счету: " + tmp_recv,-220
                          );
            end;
        end;
        
        // -----------------------------------------------------------------------------------------
        // 5. Проверки LOGICAL_CHECK_INCLUDE_PAYER_INNKPP +70мс
        // -----------------------------------------------------------------------------------------
        if (LOGICAL_CHECK_INCLUDE_PAYER_INNKPP)
            if (isNull (this.payer_inn))
                runError ("В переданных реквизитах платежа отсутствует ИНН плательщика ",-230);
            end;
            sqlFilter = " t_objecttype = 3 and t_codekind = 16 and t_state = 0 and t_unique = chr ( 88 ) ";
            if (not DB_FindValueByPrimaryKey ("dobjcode_dbt", "regexp_substr (t_code, '[0-9]+')", this.payer_inn, sqlFilter))
                runError ("ИНН плательщика " + this.payer_inn + " не существует либо закрыт в БД RS-Bank",-240);
            end;
            if ((notNull (this.payer_kpp)) and (not DB_FindValueByPrimaryKey ("dobjcode_dbt", "t_code", string (this.payer_inn, "/", this.payer_kpp), sqlFilter)))
                runError ("Пара ИНН/КПП плательщика " + string (this.payer_inn, "/", this.payer_kpp) + " не существует либо закрыта в БД RS-Bank",-250);
            end;
        end;

        // -----------------------------------------------------------------------------------------
        // 6. Проверки LOGICAL_CHECK_INCLUDE_RECVR_INNKPP + 70 мс
        // -----------------------------------------------------------------------------------------
        if (LOGICAL_CHECK_INCLUDE_RECVR_INNKPP)
            if (isNull (this.receiver_inn))
                runError ("В переданных реквизитах платежа отсутствует ИНН получателя ",-260);
            end;
            sqlFilter = " t_objecttype = 3 and t_codekind = 16 and t_state = 0 and t_unique = chr ( 88 ) ";
            if (not DB_FindValueByPrimaryKey ("dobjcode_dbt", "regexp_substr (t_code, '[0-9]+')", this.receiver_inn, sqlFilter))
                runError ("ИНН получателя " + this.payer_inn + " не существует либо закрыт в БД RS-Bank",-270);
            end;
            if ((notNull (this.payer_kpp)) and (not DB_FindValueByPrimaryKey ("dobjcode_dbt", "t_code", string (this.receiver_inn, "/", this.receiver_kpp), sqlFilter)))
                runError ("Пара ИНН/КПП получателя " + string (this.receiver_inn, "/", this.receiver_kpp) + " не существует либо закрыта в БД RS-Bank",-270);
            end;
        end;

        // -----------------------------------------------------------------------------------------
        // 7. Проверки LOGICAL_CHECK_INCLUDE_BIC +20мс
        // -----------------------------------------------------------------------------------------
        if (LOGICAL_CHECK_INCLUDE_BIC)
            // если БИК ненулевой, но в БД его нет среди открытых - ругаемся
            sqlFilter = " t_objecttype = 3 and t_codeKind = any (3, 6) and t_state = 0 and t_unique = chr (88) ";
            if ((notNull (this.p_payer_bic))    and 
                (not DB_FindValueByPrimaryKey ("dobjcode_dbt", "t_code", this.p_payer_bic, sqlFilter)))
                runError ("БИК банка плательщика не существует или закрыт",-280);
            end;
            if ((notNull (this.p_receiver_bic)) and 
                (not DB_FindValueByPrimaryKey ("dobjcode_dbt", "t_code", this.p_receiver_bic, sqlFilter)))
                runError ("БИК банка получателя не существует или закрыт",-290);
            end;
            if ((notNull (this.p_med_bic))      and 
                (not DB_FindValueByPrimaryKey ("dobjcode_dbt", "t_code", this.p_med_bic, sqlFilter)))
                runError ("БИК банка посредника не существует или закрыт",-300);
            end;
        end;
        
        return true;
    end;
    
    
    // @desc  : проверка заполненности обязательных свойств класса
    // @return: V_STRING (EMPTY_STRING - если всё хорошо).
    private macro validatePropsPhysical_getErrm ()
        var ret :string = EMPTY_STRING;
        private var arr = TArray;
        if (not validatePropsPhysical ())
            if (isNull (payer_account    ))  arr [ arr.size () ] =  "payer_account ";      end;
            if (isNull (receiver_account ))  arr [ arr.size () ] =  "receiver_account ";   end;
            if (isNull (oper             ))  arr [ arr.size () ] =  "oper ";               end;
            if (isNull (num_doc          ))  arr [ arr.size () ] =  "num_doc ";            end;
            if (isNull (debet_sum        ))  arr [ arr.size () ] =  "debet_sum ";          end;
            if (isNull (ground           ))  arr [ arr.size () ] =  "ground ";             end;
            if (isNull (doc_kind         ))  arr [ arr.size () ] =  "doc_kind ";           end;
            if (isNull (origin           ))  arr [ arr.size () ] =  "origin ";             end;
        end;
        if (arr.size () > 0) 
            ret = "Обязательные параметры не заполнены: " + join (arr, ", ") + "."; 
        end;
        return ret;
    end; 
    
    
    // @desc  : инициализация свойств класса по переданным параметрам
    // @return: void
    macro insertPaymentInit (doc  :object   // p1   - описание основных параметров документа                    
                            ,pay  :object   // p2   - описание параметров плательщика (дебет)                   
                            ,rcv  :object   // p3   - описание параметров получателя (кредит)                   
                            ,sum  :object   // p4   - описание финансовых параметров платежного документа       
                            ,med  :object   // p5   - описание банка-посредника (для переводов)                 
                            ,usr  :object   // p6   - описание пользовательских полей                           
                            ,tax  :object   // p7   - описание дополнительных параметров налогового платежа     
                            ,dem  :object   // p8   - описание дополнительных параметров платежного требования  
                            ,opr  :object   // p9   - описание параметров обработки документа в RS-Bank         
                            ,cur  :object   // p10  - описание дополнительных параметров перевода               
                            ,vo   :object   // p11  - описание дополнительных реквизитов по валютной операции   
                            ,cln  :object   // p12  - описание параметров физ.лица (для кассовых документов)    
                            )
        /****************************************************
        // 0. предварительная проверка переданных параметров
        // Все структуры должны быть переданы - для того, чтобы отработал safeGetProp ()
        // warning: при выбросе runError (), если сообщение слишком длинное, схлопывается терминал - нужен запрос
        var ret :string = EMPTY_STRING;
        private var arr = TArray;
        if (isNull (doc))  arr [ arr.size () ] =  "p1 ";  end;
        if (isNull (pay))  arr [ arr.size () ] =  "p2 ";  end;
        if (isNull (rcv))  arr [ arr.size () ] =  "p3 ";  end;
        if (isNull (sum))  arr [ arr.size () ] =  "p4 ";  end;
        if (isNull (med))  arr [ arr.size () ] =  "p5 ";  end;
        if (isNull (usr))  arr [ arr.size () ] =  "p6 ";  end;
        if (isNull (tax))  arr [ arr.size () ] =  "p7 ";  end;
        if (isNull (dem))  arr [ arr.size () ] =  "p8 ";  end;
        if (isNull (opr))  arr [ arr.size () ] =  "p9 ";  end;
        if (isNull (cur))  arr [ arr.size () ] =  "p10";  end;
        if (isNull (vo ))  arr [ arr.size () ] =  "p11";  end;
        if (isNull (cln))  arr [ arr.size () ] =  "p12";  end;
        if (arr.size () > 0)                     
            ret = "Обязательные структуры не заполнены: " + join (arr, ", ") + "."; 
            while (index (ret, "  ")) 
                ret = replace (ret, "  ", " "); 
            end;
            ret = replace (ret, " ,", ",");
            runError (ret);
        end;
       *******************************************************/
        // 1. заполнение свойств класса по блокам
        /** Блок данных "общие сведения" - packID, department - не добавлены, ибо нефиг. 
            Пачка не нужна, потому что массовый режим не будет работать в силу природы вещей, а department -это [operdprt]
         **/
        this.branch                    = safeGetPropMandatory (doc, "branch"                   ,valType (this.branch                   ));
        this.corschem                  = safeGetPropMandatory (doc, "corschem"                 ,valType (this.corschem                 ));
        this.oper                      = safeGetPropMandatory  (doc, "oper"                     ,valType (this.oper                     ));
        this.pack                      = safeGetPropMandatory  (doc, "pack"                     ,valType (this.pack                     ));
        this.typedoc                   = safeGetPropMandatory  (doc, "typeDoc"                  ,valType (this.typedoc                  ));
        this.usertypedoc               = safeGetPropMandatory  (doc, "userTypeDoc"              ,valType (this.usertypedoc              ));
        this.paymentkind               = safeGetPropMandatory  (doc, "paymentkind"              ,valType (this.paymentkind              ));
        this.paytype                   = safeGetPropMandatory  (doc, "paytype"                  ,valType (this.paytype                  ));
        this.num_doc                   = safeGetPropMandatory  (doc, "numDoc"                   ,valType (this.num_doc                  ));
        this.doc_date                  = safeGetPropMandatory  (doc, "docDate"                  ,valType (this.doc_date                 ));
        this.value_date                = safeGetPropMandatory  (doc, "valueDate"                ,valType (this.value_date               ));
        this.ground                    = safeGetPropMandatory  (doc, "ground"                   ,valType (this.ground                   ));
        this.priority                  = safeGetPropMandatory  (doc, "priority"                 ,valType (this.priority                 ));
        this.shifr                     = safeGetPropMandatory  (doc, "shifr"                    ,valType (this.shifr                    ));
        this.bosspost                  = safeGetProp           (doc, "bossPost"                 ,valType (this.bosspost                 ));
        this.bossfio                   = safeGetProp           (doc, "bossFIO"                  ,valType (this.bossfio                  ));
        this.payerchargeoffdate        = safeGetPropMandatory  (doc, "payerChargeoffDate"       ,valType (this.payerchargeoffdate       ));
        this.doc_kind                  = safeGetPropMandatory  (doc, "docKind"                  ,valType (this.doc_kind                 ));
        this.subkindmessagedebet       = safeGetPropMandatory  (doc, "subkindMessageDebet"      ,valType (this.subkindmessagedebet      ));
        this.subkindmessagecredit      = safeGetPropMandatory  (doc, "subkindMessageCredit"     ,valType (this.subkindmessagecredit     ));
        this.num_operation             = safeGetPropMandatory  (doc, "numOperation"             ,valType (this.num_operation            ));
        this.origin                    = safeGetPropMandatory  (doc, "origin"                   ,valType (this.origin                   ));
        /** Блок данных "описание плательщика" **/
        this.payer_account             = safeGetPropMandatory  (pay, "payerAccount"             ,valType (this.payer_account            ));
        this.payer_name                = safeGetPropMandatory  (pay, "payerName"                ,valType (this.payer_name               ));
        this.payer_bic                 = safeGetPropMandatory  (pay, "payerBic"                 ,valType (this.payer_bic                ));
        this.payer_inn                 = safeGetPropMandatory  (pay, "payerInn"                 ,valType (this.payer_inn                ));
        this.payer_kpp                 = safeGetPropMandatory  (pay, "payerKpp"                 ,valType (this.payer_kpp                ));
        /** Блок данных "описание получателя" **/
        this.receiver_bankname         = safeGetPropMandatory  (rcv, "receiver_bankname"        ,valType (this.receiver_bankname        ));
        this.receiver_bankcoracc       = safeGetPropMandatory  (rcv, "receiver_bankcoracc"      ,valType (this.receiver_bankcoracc      ));
        this.receiver_bank_bic         = safeGetPropMandatory  (rcv, "receiver_bank_bic"        ,valType (this.receiver_bank_bic        ));
        this.receiver_account          = safeGetPropMandatory  (rcv, "receiverAccount"          ,valType (this.receiver_account         ));
        this.receiver_account_cur_iso  = safeGetPropMandatory  (rcv, "receiver_account_cur_iso" ,valType (this.receiver_account_cur_iso ));
        this.receiver_name             = safeGetPropMandatory  (rcv, "receiverName"             ,valType (this.receiver_name            ));
        this.receiver_bic              = safeGetPropMandatory  (rcv, "receiverBic"              ,valType (this.receiver_bic             ));
        this.receiver_inn              = safeGetPropMandatory  (rcv, "receiverInn"              ,valType (this.receiver_inn             ));
        this.receiver_kpp              = safeGetPropMandatory  (rcv, "receiverKpp"              ,valType (this.receiver_kpp             ));
        /** Блок данных с суммами **/
        this.debet_sum                 = safeGetPropMandatory  (sum, "debetSum"                 ,valType (this.debet_sum                ));
        this.kredit_sum                = safeGetPropMandatory  (sum, "creditSum"                ,valType (this.kredit_sum               ));
        this.rate                      = safeGetPropMandatory  (sum, "rate"                     ,valType (this.rate                     ));
        this.cash_symbs                = safeGetProp           (sum, "cashSymbols"              ,valType (this.cash_symbs               ));
        this.ratetype                  = safeGetPropMandatory  (sum, "ratetype"                 ,valType (this.ratetype                 ));
        /** Блок данных банка-посредника **/
        this.med_bankname              = safeGetPropMandatory  (med, "med_bankname"             ,valType (this.med_bankname             ));
        this.med_bic                   = safeGetPropMandatory  (med, "med_bic"                  ,valType (this.med_bic                  ));
        /** Блок данных "пользовательские поля" **/
        this.userfield1                = safeGetPropMandatory  (usr, "userfield1"               ,valType (this.userfield1               ));
        this.userfield2                = safeGetPropMandatory  (usr, "userfield2"               ,valType (this.userfield2               ));
        this.userfield3                = safeGetPropMandatory  (usr, "userfield3"               ,valType (this.userfield3               ));
        this.userfield4                = safeGetPropMandatory  (usr, "userfield4"               ,valType (this.userfield4               ));
        /** Блок данных налогового платежа **/
        this.creator_status            = safeGetPropMandatory  (tax, "creatorStatus"            ,valType (this.creator_status           ));
        this.kbk_code                  = safeGetPropMandatory  (tax, "kbkCode"                  ,valType (this.kbk_code                 ));
        this.okato_code                = safeGetPropMandatory  (tax, "okatoCode"                ,valType (this.okato_code               ));
        this.ground_tax_doc            = safeGetPropMandatory  (tax, "groundTaxDoc"             ,valType (this.ground_tax_doc           ));
        this.tax_period                = safeGetPropMandatory  (tax, "taxPeriod"                ,valType (this.tax_period               ));
        this.num_tax_doc               = safeGetPropMandatory  (tax, "numTaxDoc"                ,valType (this.num_tax_doc              ));
        this.tax_date                  = safeGetPropMandatory  (tax, "taxDate"                  ,valType (this.tax_date                 ));
        this.tax_type                  = safeGetPropMandatory  (tax, "taxType"                  ,valType (this.tax_type                 ));
        this.uin                       = safeGetPropMandatory  (tax, "uin"                      ,valType (this.uin                      ));
        /** Блок данных для платежного требования **/
        this.accept_term               = safeGetPropMandatory  (dem, "acceptTerm"               ,valType (this.accept_term              ));
        this.accept_date               = safeGetPropMandatory  (dem, "acceptDate"               ,valType (this.accept_date              ));
        this.pay_condition             = safeGetPropMandatory  (dem, "payCondishion"            ,valType (this.pay_condition            ));
        this.accept_period             = safeGetPropMandatory  (dem, "acceptPeriod"             ,valType (this.accept_period            ));
        /** Блок данных управления операцией **/
        this.skip_check_mask           = safeGetPropMandatory  (opr, "skipCheckMask"            ,valType (this.skip_check_mask          ));
        this.check_exists              = safeGetPropMandatory  (opr, "checkExists"              ,valType (this.check_exists             ));
        this.run_operation             = 0; // safeGetPropMandatory (opr, "runOperation"             ,valType (this.run_operation            ));
        this.pack_mode                 = 0; // safeGetPropMandatory (opr, "packMode"                 ,valType (this.pack_mode                ));
        this.make_carry_from_payment   = 0; // safeGetPropMandatory (opr, "makeCarryFromPayment"     ,valType (this.make_carry_from_payment  ));
        this.transaction_mode          = 0; // safeGetPropMandatory (opr, "transaction_mode"         ,valType (this.transaction_mode         ));
        /** Блок данных дополнительных параметров валютного перевода **/
        this.doc_cur_iso               = safeGetPropMandatory (cur, "doc_cur_iso"              ,valType (this.doc_cur_iso              ));
        this.comiss_acc                = safeGetPropMandatory (cur, "commis_acc"               ,valType (this.comiss_acc               ));
        this.ground_add                = safeGetPropMandatory (cur, "ground_add"               ,valType (this.ground_add               ));
        this.transfer_date             = safeGetPropMandatory (cur, "transfer_date"            ,valType (this.transfer_date            ));
        this.expense_transfer          = safeGetPropMandatory (cur, "expence_transfer"         ,valType (this.expense_transfer         ));
        /** Блок данных по валютной операции **/
        this.vo_code                   = safeGetPropMandatory (vo,  "vo_code"                  ,valType (this.vo_code        ));
        this.gtd                       = safeGetPropMandatory (vo,  "gtd"                      ,valType (this.gtd            ));
        this.gtd_date                  = safeGetPropMandatory (vo,  "gtd_date"                 ,valType (this.gtd_date       ));
        this.gtd_cur_iso               = safeGetPropMandatory (vo,  "gtd_cur_iso"              ,valType (this.gtd_cur_iso    ));
        this.deal_passport             = safeGetPropMandatory (vo,  "deal_passport"            ,valType (this.deal_passport  ));
        this.deal_date                 = safeGetPropMandatory (vo,  "deal_date"                ,valType (this.deal_date      ));
        this.servicekindcode           = safeGetPropMandatory (vo,  "servicekindcode"          ,valType (this.servicekindcode));
        /** Блок данных по клиенту **/
        this.fio_client                = safeGetPropMandatory (cln, "fioClient", valType (this.fio_client ));
        var paper = safeGetProp (cln, "paper", V_GENOBJ);
        this.paperkind               = safeGetPropMandatory (paper, "paperKind"                ,valType (this.paperkind ));
        this.paperseries             = safeGetPropMandatory (paper, "series"                   ,valType (this.paperseries ));
        this.papernumber             = safeGetPropMandatory (paper, "number"                   ,valType (this.papernumber ));
        this.paperissueddate         = {curdate};// safeGetPropMandatory (paper, "issuedDate"               ,valType (this.paperissueddate ));
        this.paperissuer             = safeGetPropMandatory (paper, "issuer"                   ,valType (this.paperissuer ));
        // this.paperissuerCode      = safeGetPropMandatory (paper, "issuerCode"               ,valType (this.paperissuerCode ));
        
    end;
    
    // @desc      : выполнить вставку платежа
    // @return    : void
    macro checkPropsAndInsertPayment ()
        // физическая проверка параметров (заполненность обязательных реквизитов)
        this.error = validatePropsPhysical_getErrm ();
        if (this.error != EMPTY_STRING) 
            runError (this.error,-310); 
        end;
        //LAO временно закоментировал 12122013
        // логическая проверка параметров (смысловое соответствие реквизитов согласно маске проверки)
        // if (validatePropsLogical ())
            this.error = EMPTY_STRING;
        // end;
    end;
    
    macro insertPaymentExecute ()
        startQueryCapture ();
        [ 
            BEGIN
                usr_payments.insert_payment (p_payment_id                              => :m_payment_id,
                                             p_error                                   => :m_error,
                                             p_payer_account                           => :m_payer_account,
                                             p_receiver_account                        => :m_receiver_account,
                                             p_oper                                    => :m_oper,
                                             p_num_doc                                 => :m_num_doc,
                                             p_debet_sum                               => :m_debet_sum,
                                             p_ground                                  => :m_ground,
                                             p_doc_kind                                => :m_doc_kind,
                                             p_origin                                  => :m_origin,
                                             p_typedoc                                 => :m_typedoc,
                                             p_payer_name                              => :m_payer_name,
                                             p_payer_bic                               => :m_payer_bic,
                                             p_payer_inn                               => :m_payer_inn,
                                             p_payer_kpp                               => :m_payer_kpp,
                                             p_receiver_name                           => :m_receiver_name,
                                             p_receiver_bic                            => :m_receiver_bic,
                                             p_receiver_inn                            => :m_receiver_inn,
                                             p_receiver_kpp                            => :m_receiver_kpp,
                                             p_pack                                    => :m_pack,
                                             p_corschem                                => :m_corschem,
                                             p_num_operation                           => :m_num_operation,
                                             p_usertypedoc                             => :m_usertypedoc,
                                             p_kredit_sum                              => :m_kredit_sum,
                                             p_rate                                    => :m_rate,
                                             p_branch                                  => :m_branch,
                                             p_priority                                => :m_priority,
                                             p_shifr                                   => :m_shifr,
                                             p_value_date                              => :m_value_date,
                                             p_doc_date                                => :m_doc_date,
                                             p_cash_symbs                              => :m_cash_symbs,
                                             p_fio_client                              => :m_fio_client,
                                             p_userfield1                              => :m_userfield1,
                                             p_userfield2                              => :m_userfield2,
                                             p_userfield3                              => :m_userfield3,
                                             p_userfield4                              => :m_userfield4,
                                             p_accept_term                             => :m_accept_term,
                                             p_accept_date                             => :m_accept_date,
                                             p_pay_condition                           => :m_pay_condition,
                                             p_accept_period                           => :m_accept_period,
                                             p_creator_status                          => :m_creator_status,
                                             p_kbk_code                                => :m_kbk_code,
                                             p_okato_code                              => :m_okato_code,
                                             p_ground_tax_doc                          => :m_ground_tax_doc,
                                             p_tax_period                              => :m_tax_period,
                                             p_num_tax_doc                             => :m_num_tax_doc,
                                             p_tax_date                                => :m_tax_date,
                                             p_tax_type                                => :m_tax_type,
                                             p_skip_check_mask                         => :m_skip_check_mask,
                                             p_check_exists                            => :m_check_exists,
                                             p_run_operation                           => :m_run_operation,
                                             p_pack_mode                               => :m_pack_mode,
                                             p_make_carry_from_payment                 => :m_make_carry_from_payment,
                                             p_transaction_mode                        => :m_transaction_mode,
                                             p_doc_cur_iso                             => :m_doc_cur_iso,
                                             p_receiver_account_cur_iso                => :m_receiver_account_cur_iso,
                                             p_comiss_acc                              => :m_comiss_acc,
                                             p_expense_transfer                        => :m_expense_transfer,
                                             p_vo_code                                 => :m_vo_code,
                                             p_gtd                                     => :m_gtd,
                                             p_gtd_date                                => :m_gtd_date,
                                             p_gtd_cur_iso                             => :m_gtd_cur_iso,
                                             p_deal_passport                           => :m_deal_passport,
                                             p_deal_date                               => :m_deal_date,
                                             p_med_bankname                            => :m_med_bankname,
                                             p_med_bic                                 => :m_med_bic,
                                             p_receiver_bankname                       => :m_receiver_bankname,
                                             p_receiver_bankcoracc                     => :m_receiver_bankcoracc,
                                             p_receiver_bank_bic                       => :m_receiver_bank_bic,
                                             p_ground_add                              => :m_ground_add,
                                             p_transfer_date                           => :m_transfer_date,
                                             p_bosspost                                => :m_bosspost,
                                             p_bossfio                                 => :m_bossfio,
                                             p_paymentkind                             => :m_paymentkind,
                                             p_autorun_operation                       => :m_autorun_operation,
                                             p_paperkind                               => :m_paperkind,
                                             p_paperseries                             => :m_paperseries,
                                             p_papernumber                             => :m_papernumber,
                                             p_paperissueddate                         => :m_paperissueddate,
                                             p_paperissuer                             => :m_paperissuer,
                                             p_payerchargeoffdate                      => :m_payerchargeoffdate,
                                             p_paytype                                 => :m_paytype,
                                             p_subkindmessagedebet                     => :m_subkindmessagedebet,
                                             p_subkindmessagecredit                    => :m_subkindmessagecredit,
                                             p_uin                                     => :m_uin);
            END;     
        ];
        var cmd = RsdCommand (endQueryCapture ());
        
        cmd.addParam ("m_payment_id"                   ,RSDBP_OUT ,V_INTEGER         );
        cmd.addParam ("m_error"                        ,RSDBP_OUT ,V_STRING    , 1024);

        cmd.addParam ("m_payer_account"                ,RSDBP_IN  ,this.payer_account           );
        cmd.addParam ("m_receiver_account"             ,RSDBP_IN  ,this.receiver_account        );
        cmd.addParam ("m_oper"                         ,RSDBP_IN  ,this.oper                    );
        cmd.addParam ("m_num_doc"                      ,RSDBP_IN  ,this.num_doc                 );
        cmd.addParam ("m_debet_sum"                    ,RSDBP_IN  ,this.debet_sum               );
        cmd.addParam ("m_ground"                       ,RSDBP_IN  ,this.ground                  );
        cmd.addParam ("m_doc_kind"                     ,RSDBP_IN  ,this.doc_kind                );
        cmd.addParam ("m_origin"                       ,RSDBP_IN  ,this.origin                  );
        cmd.addParam ("m_typedoc"                      ,RSDBP_IN  ,this.typedoc                 );
        cmd.addParam ("m_payer_name"                   ,RSDBP_IN  ,this.payer_name              );
        cmd.addParam ("m_payer_bic"                    ,RSDBP_IN  ,this.payer_bic               );
        cmd.addParam ("m_payer_inn"                    ,RSDBP_IN  ,this.payer_inn               );
        cmd.addParam ("m_payer_kpp"                    ,RSDBP_IN  ,this.payer_kpp               );
        cmd.addParam ("m_receiver_name"                ,RSDBP_IN  ,this.receiver_name           );
        cmd.addParam ("m_receiver_bic"                 ,RSDBP_IN  ,this.receiver_bic            );
        cmd.addParam ("m_receiver_inn"                 ,RSDBP_IN  ,this.receiver_inn            );
        cmd.addParam ("m_receiver_kpp"                 ,RSDBP_IN  ,this.receiver_kpp            );
        cmd.addParam ("m_pack"                         ,RSDBP_IN  ,this.pack                    );
        cmd.addParam ("m_corschem"                     ,RSDBP_IN  ,this.corschem                );
        cmd.addParam ("m_num_operation"                ,RSDBP_IN  ,this.num_operation           );
        cmd.addParam ("m_usertypedoc"                  ,RSDBP_IN  ,this.usertypedoc             );
        cmd.addParam ("m_kredit_sum"                   ,RSDBP_IN  ,this.kredit_sum              );
        cmd.addParam ("m_rate"                         ,RSDBP_IN  ,this.rate                    );
        cmd.addParam ("m_branch"                       ,RSDBP_IN  ,this.branch                  );
        cmd.addParam ("m_priority"                     ,RSDBP_IN  ,this.priority                );
        cmd.addParam ("m_shifr"                        ,RSDBP_IN  ,this.shifr                   );
        cmd.addParam ("m_value_date"                   ,RSDBP_IN  ,this.value_date              );
        cmd.addParam ("m_doc_date"                     ,RSDBP_IN  ,this.doc_date                );
        cmd.addParam ("m_cash_symbs"                   ,RSDBP_IN  ,this.cash_symbs              );
        cmd.addParam ("m_fio_client"                   ,RSDBP_IN  ,this.fio_client              );
        cmd.addParam ("m_userfield1"                   ,RSDBP_IN  ,this.userfield1              );
        cmd.addParam ("m_userfield2"                   ,RSDBP_IN  ,this.userfield2              );
        cmd.addParam ("m_userfield3"                   ,RSDBP_IN  ,this.userfield3              );
        cmd.addParam ("m_userfield4"                   ,RSDBP_IN  ,this.userfield4              );
        cmd.addParam ("m_accept_term"                  ,RSDBP_IN  ,this.accept_term             );
        cmd.addParam ("m_accept_date"                  ,RSDBP_IN  ,this.accept_date             );
        cmd.addParam ("m_pay_condition"                ,RSDBP_IN  ,this.pay_condition           );
        cmd.addParam ("m_accept_period"                ,RSDBP_IN  ,this.accept_period           );
        cmd.addParam ("m_creator_status"               ,RSDBP_IN  ,this.creator_status          );
        cmd.addParam ("m_kbk_code"                     ,RSDBP_IN  ,this.kbk_code                );
        cmd.addParam ("m_okato_code"                   ,RSDBP_IN  ,this.okato_code              );
        cmd.addParam ("m_ground_tax_doc"               ,RSDBP_IN  ,this.ground_tax_doc          );
        cmd.addParam ("m_tax_period"                   ,RSDBP_IN  ,this.tax_period              );
        cmd.addParam ("m_num_tax_doc"                  ,RSDBP_IN  ,this.num_tax_doc             );
        cmd.addParam ("m_tax_date"                     ,RSDBP_IN  ,this.tax_date                );
        cmd.addParam ("m_tax_type"                     ,RSDBP_IN  ,this.tax_type                );
        cmd.addParam ("m_skip_check_mask"              ,RSDBP_IN  ,this.skip_check_mask         );
        cmd.addParam ("m_check_exists"                 ,RSDBP_IN  ,this.check_exists            );
        cmd.addParam ("m_run_operation"                ,RSDBP_IN  ,this.run_operation           );
        cmd.addParam ("m_pack_mode"                    ,RSDBP_IN  ,this.pack_mode               );
        cmd.addParam ("m_make_carry_from_payment"      ,RSDBP_IN  ,this.make_carry_from_payment );
        cmd.addParam ("m_transaction_mode"             ,RSDBP_IN  ,this.transaction_mode        );
        cmd.addParam ("m_doc_cur_iso"                  ,RSDBP_IN  ,this.doc_cur_iso             );
        cmd.addParam ("m_receiver_account_cur_iso"     ,RSDBP_IN  ,this.receiver_account_cur_iso);
        cmd.addParam ("m_comiss_acc"                   ,RSDBP_IN  ,this.comiss_acc              );
        cmd.addParam ("m_expense_transfer"             ,RSDBP_IN  ,this.expense_transfer        );
        cmd.addParam ("m_vo_code"                      ,RSDBP_IN  ,this.vo_code                 );
        cmd.addParam ("m_gtd"                          ,RSDBP_IN  ,this.gtd                     );
        cmd.addParam ("m_gtd_date"                     ,RSDBP_IN  ,this.gtd_date                );
        cmd.addParam ("m_gtd_cur_iso"                  ,RSDBP_IN  ,this.gtd_cur_iso             );
        cmd.addParam ("m_deal_passport"                ,RSDBP_IN  ,this.deal_passport           );
        cmd.addParam ("m_deal_date"                    ,RSDBP_IN  ,this.deal_date               );
        cmd.addParam ("m_med_bankname"                 ,RSDBP_IN  ,this.med_bankname            );
        cmd.addParam ("m_med_bic"                      ,RSDBP_IN  ,this.med_bic                 );
        cmd.addParam ("m_receiver_bankname"            ,RSDBP_IN  ,this.receiver_bankname       );
        cmd.addParam ("m_receiver_bankcoracc"          ,RSDBP_IN  ,this.receiver_bankcoracc     );
        cmd.addParam ("m_receiver_bank_bic"            ,RSDBP_IN  ,this.receiver_bank_bic       );
        cmd.addParam ("m_ground_add"                   ,RSDBP_IN  ,this.ground_add              );
        cmd.addParam ("m_transfer_date"                ,RSDBP_IN  ,this.transfer_date           );
        cmd.addParam ("m_bosspost"                     ,RSDBP_IN  ,this.bosspost                );
        cmd.addParam ("m_bossfio"                      ,RSDBP_IN  ,this.bossfio                 );
        cmd.addParam ("m_paymentkind"                  ,RSDBP_IN  ,this.paymentkind             );
        cmd.addParam ("m_autorun_operation"            ,RSDBP_IN  ,this.autorun_operation       );
        cmd.addParam ("m_paperkind"                    ,RSDBP_IN  ,this.paperkind               );
        cmd.addParam ("m_paperseries"                  ,RSDBP_IN  ,this.paperseries             );
        cmd.addParam ("m_papernumber"                  ,RSDBP_IN  ,this.papernumber             );
        cmd.addParam ("m_paperissueddate"              ,RSDBP_IN  ,this.paperissueddate         );
        cmd.addParam ("m_paperissuer"                  ,RSDBP_IN  ,this.paperissuer             );
        cmd.addParam ("m_payerchargeoffdate"           ,RSDBP_IN  ,this.payerchargeoffdate      );
        cmd.addParam ("m_paytype"                      ,RSDBP_IN  ,this.paytype                 );
        cmd.addParam ("m_subkindmessagedebet"          ,RSDBP_IN  ,this.subkindmessagedebet     );
        cmd.addParam ("m_subkindmessagecredit"         ,RSDBP_IN  ,this.subkindmessagecredit    );
        cmd.addParam ("m_uin"                          ,RSDBP_IN  ,this.uin                     );
        
        cmd.execute ();
        
        this.error      = cmd.param ("m_error").value;
        this.payment_id = cmd.param ("m_payment_id").value;
    end;
end; 