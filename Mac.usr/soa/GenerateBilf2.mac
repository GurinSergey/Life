// -------------------------------------------------------------------------------------------------
// @filename: GenerateBilf.mac 
// @author  : Zlenko M. P. 
// @desc    : Макрос автоматической генерации СФ по времени
// @request : C-24221 
// @created : 13.12.2013
// @changes : none
// -------------------------------------------------------------------------------------------------

import bankinter, rsexts, Globals, rcw, Календарь, KeyCodes;
import oralib;
import lib_registry, bilsffiziki, bilf, soa_core;

class TAutoBilf ()
   private var protocol_1, protocol_2;    
   var descErr = "no error";
   var LastWorkDate = date({curdate}) - 1;
   var DateError   =  " ";

   private macro getBilfLogID()
       var sql = execSQLSelect("select USR_BILG_LOG_SEQ.nextval from dual");

       if (sql and sql.moveNext())
           return sql.value(0, null, v_integer);
       end;

       return -1;
    end;   

   private macro usr_SetOperDay(_d)
      if(valtype(_d) == v_date) return setOperDay(date(_d)); end;

      var reg = rsdrecordset("select trunc(t_curdate) date_max from dcurdate_dbt where t_ismain = chr(88)");
      if (reg.movenext())
          return setOperDay(date(reg.value(0)));
      end; 
      return false;
   end;

   private macro getlastOperDay()
      var reg = rsdrecordset("select trunc(t_curdate) date_max from dcurdate_dbt where t_ismain = chr(88)");
      if (reg.movenext()) return date(reg.value(0)); end; 
      return date(0,0,0);
   end;

   private macro getLastWorkDay(_date)     
      var sql  = "select max(trunc(BANK_DATE)) from GENERATE_BILF_LOG ";
      sql = RsdRecordset(sql);

      if((sql.moveNext()) and (valtype(sql.value(0, null, v_date)) != 26)) 
                         setParm(1,date(sql.value(0, null, v_date)));       
      else               setParm(1,date({curdate}                 ) - 1);
      end;         

      return true;
   onError
      return false;
   end;


   private macro send_mail()
       var stat = 0, Email = "",Theme = "", Content = "";

       GetRegistryValue("PRBB\\BILF\\ADRESS_MAIL", V_STRING, Email, stat);

       if ((stat == 0) and (trim(Email) != ""))

           if(date(LastWorkDate) + 1 == {curdate}) 
              Theme = "Отчет о выполнении генерации СФ " + trim({NAME_BANK}) + " за опер. день" + {curdate};
           else 
              Theme = "Отчет о выполнении генерации СФ " + trim({NAME_BANK}) + " за период с " + LastWorkDate + " по " + {curdate};
           end;

           if (descErr == "no error") 
              if(trim(DateError) != "")
                 Content = "Не удалось сформировать СФ за " + substr(DateError, 1, strLen(DateError) - 2) + "\nПожалуйста, сформируйте СФ за эти дни в ручном режиме.";
              else
                 Content = "Процедура отработала успешно! \n С протоколом о выполнении процедуры, вы можете ознакомиться из меню Бухгелтерия банка\\Счета-Фактуры\\Отчет по автоматической генерации СФ."; 
              end;
               
           else      
              Content = "В работе процедуры  произошла ошибка.\nПожалуйста, сформируйте СФ в ручном режиме. \n" + descErr; 
           end;
           Send_l(Theme, Content, 73, Email); 
       end;
   onError
   end;

   private macro catchError(err)
      usr_setOperDay();
      descErr = err;
      send_mail();
   onError
   end;

   private macro getResultFile()
      var resFile = getTxtFileName("resultBilfProrocol");       
      var clobText;
      var Stream = TStream(resFile, "WA" );
      var tmpStream = TStream(protocol_2, "R");

      if(tmpStream.getsize != 0)
         clobText = TRecHandler( "ClobRead", makeArray( "clob", V_STRING, tmpStream.getsize, 0, 0) );
         tmpStream.read2(clobtext);
         Stream.write2 ( clobText );                         
      end;
         clobText  = null;
         tmpStream = null;
         Stream.write("\n\n\n**********************************************************************************************************************************************\n");
         Stream.write("*\n");
         Stream.write("**********************************************************************************************************************************************\n\n\n"); 
         tmpStream = TStream(protocol_1, "R");

      if(tmpStream.getsize != 0)
         clobText = TRecHandler( "ClobRead", makeArray( "clob", V_STRING, tmpStream.getsize, 0, 0) );
         tmpStream.READ2(clobText);
         Stream.write2(clobText);
      end;
         Stream.flush();
         removeFile(resFile);

      return resFile;
    onError
    end;


   private macro writeProtocol(FilePath)
       var hd, rs, strm, cmd;                                                             
       var bilfID = getBilfLogID();

       execSQL("INSERT INTO GENERATE_BILF_LOG VALUES(?, SYSDATE, RSBSESSIONDATA.CURDATE, empty_clob())", makeArray(SQLParam("", bilfID)));
       strm = TStream(FilePath, "R");               
       hd = TRecHandler ("ClobRead", makeArray("Clob", V_STRING, strm.getsize, 0, 0));
       strm.read2(hd); 

       cmd = RSDCommand("select id, PROTOCOL from GENERATE_BILF_LOG where id = ? for update");
       cmd.AddParam("", RSDBP_IN, bilfID);
       rs = RSDRecordset(cmd, null, RSDVAL_STATIC); 
       rs.bloblimitsize = 1;        

       if(rs and rs.MoveNext() ) 
          rs.edit; 
          rs.Fld(1).Write(hd);
	  rs.update;        
	  removeFile(FilePath);
       end;        

    onError(err)
       catchError(err.message);
    end;
        
    
    // ставим костыли, в книгу продаж не попадают записи по НДС если процедуру выполнять роботом ( 
    private macro insertSpike()
       var sql = " INSERT INTO dbkentsum_dbt                                                   "
                 "  SELECT   ENT.T_BOOKENTRYID,                                                "
                 "         18,                                                                 "
                 "         LN.T_AMOUNT,                                                        "
                 "         LN.T_NDSAMOUNT,                                                     "
                 "         LN.T_AMOUNTWITHNDS,                                                 "
                 "         0                                                                   "
                 "  FROM   dbilbookentry_dbt ent, dbilfactura_dbt fc, dbilfacturaline_dbt LN   "
                 " WHERE   ENT.T_REGDATE = to_date('" + {curdate} + "','dd.mm.yyyy')           "        
                 "         AND ENT.T_OPER = 20015                                              "
                 "         AND FC.T_FACTURAID = ENT.T_FACTURAID                                "
                 "         AND LN.T_FACTURAID = ENT.T_FACTURAID                                "
                 "         AND NOT EXISTS                                                      "
                 "               (SELECT   1                                                   "
                 "                  FROM   DBKENTSUM_DBT                                       "
                 "                 WHERE   T_BOOKENTRYID = ENT.T_BOOKENTRYID AND T_FIID = 0);  ";                 
      RsdCommand(sql).execute();                                                                                      
    end;

    macro viewProtocol(ID)
       var bdate :date = {curdate};
       var hd, rs, strm, cmd, sql;
       var protocol = getTxtFileName("ViewProrocol");
       var isDataExists = false;
       if(getDate(bdate, "Задайте дату отчета"))
          sql = execSQLSelect("select DBMS_LOB.GETLENGTH(PROTOCOL), PROTOCOL from GENERATE_BILF_LOG where bank_date = ?", makeArray(SQLParam("", bdate)));
          strm = TStream(protocol, "WA");
          while(sql and sql.moveNext())                                  
             isDataExists = true;             
             hd = TRecHandler ("ClobRead", makeArray("Clob", V_STRING, sql.value(0, null, v_integer), 0, 0));           
             sql.Fld(1).Read(hd);                          
             strm.Write2( hd );
             strm.flush();
             hd = null;   
          end;
          strm = null;
          if (isDataExists) viewFile(protocol);                              
          else              msgBox("За выбранную дату нет данных");
          end;
       end;
    end;       

    private macro clearOldProtocols()
       RsdCommand("delete from  GENERATE_BILF_LOG where SYS_DATE < sysdate - INTERVAL '14' DAY").execute();
    onError
    end;


    macro main(oDescErr)

       var LastWorkDay;
       var lastOperDay = getlastOperDay();

       usr_SetOperDay();

       clearOldProtocols();
       if(not IsWorkday == 1 )
          descErr = "Выходной день, СФ не формируются";                 return;
       end;

       if(not getLastWorkDay(@LastWorkDay)) 
          descErr = "Не удалось получить последний рабочий опер. день"; return;
       end; 
       LastWorkDate = LastWorkDay;
       // если были выходные в первый рабочий день, формируем СФ по всем выходным дням
       while((date(LastWorkDay) < date(lastOperDay)) and (lastOperDay != date(0,0,0)))
          /* Генерация СФ*/
          var s = true;
          if(usr_SetOperDay(date(LastWorkDay)))  
             ControlProtocolRBS2(protocol_2, null);    // true - поиск по пачке 7 в мем. ордерах                                                              
          else   
             dateError  = dateError + String(LastWorkDay, ", ");
             s = false;
          end;
          
          insertSpike();
           
          LastWorkDay  = date(LastWorkDay) + 1;
          usr_SetOperDay(date(LastWorkDay));

          /*Протокол контроля записей книги продаж*/
          if(s)
             ControlProtocolRBS1(protocol_1);                        
             writeProtocol      (getResultFile);                                
          end;
       end;      
       send_mail();                                       
       
    onError(err)        
       usr_SetOperDay();       
       catchError(String(err.message, " Модуль: ", err.Module, " Строка: ", err.line));
    end;
end;   

macro main(p)    
   initSessionData();

   var AutoBilf = TAutoBilf(); 
       AutoBilf.main();  

   return String(AutoBilf.descErr);         
end;    
