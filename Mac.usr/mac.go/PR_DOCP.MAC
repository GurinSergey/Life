/*──────────────────────────────────────────────────────────────────────────┐
  RS-Bank 5.0                                         R-Style Software Lab

  File Name   : pr_docp.mac                                December 7,1998
  Programmer  : LCh
  Description : Справка о проведенных документах
  Comment     :
  Modifications:
       14.11.2000 Kasatsky - Увеличено поле вывода для номера пачки до 5 символов

  Зубко С. 25.04.2011  Сделал доработки по I-00035903 Тема: Перенсти отчет в РС V6 
                       то есть выгрузку в текстовый файл с разделителем Tab.
                       Для критиков: код размазывать не стал. Сделал получение данных 
                       отдельными процедурами. Может и не производительно, но легко 
                       обновлять макросы, так как все почти в одном месте.
AAN 11.05.2012 I-00182304-2 в отчёт не выводились документы если их создал операциорнист
а провёл контролёр. sql запрос поправил
//06.08.2014 I-00506908-2 dpn Адаптация под 31-й патч
//02.10.2014 I-00519517-2 DPN Стоял ошибочный параметр для вывода отчёта в ин.валюте
//09.10.2014 R-466898-1 dpn 
//13.10.2014 R-469914-2 dpn Сделал округление до 2-х знаков
//17.11.2014 R-493934-2 DPN Эквивалент выводится не только в итоге, а и в строках, если стоит галка. Подправил таблицу отчета
└───────────────────────────────────────────────────────────────────────────*/
import RsbDataset;

import BankInter;
import FiInter;
import Reporting;

import cb_sql;

import rep_lib;
import "fg_Life_parm.mac";
/*MX*/
private var fgBank = fg_life_subject({OurBank});
var {FIO_OPER};

private const ALLCURRENCY = -2;
private const AKMULTYCARRY = 15;

private const tempProtocolTableName = "drepdocer_tmp";
private var tempInserter;

private const useProtocol = true;
debugbreak;
/****************************************************/
/*   ПОЛЬЗОВАТЕЛЬСКИЕ ПЕРЕМЕННЫЕ И ИХ ОПРЕДЕЛЕНИЕ   */
/****************************************************/
/*Зубко С. Добавил выбор типа отчета*/
/*Массив для хранения типов*/
array LstType_Name;
LstType_Name(0) = "   ПРОСТО ОТЧЕТ   ";
LstType_Name(1) = " + ВЫВОД В ФАЙЛ   ";
file outfile() txt;
/*Выбранный тип */
var choise_type:integer;
var TAB = "\t";
var pth:string = "";
var outfileName:string = "";
var docInfoServer = RepDocInfoServer(PTCK_ALL, 0); /* создание инфо-сервера, ставим 0, т.к. получаем данные из платежа, если нужна проводка ставь 1 */
var cmd:object,rs:object,sql:string;
var cmd2:object,rs2:object,sql2:string;
var doc_table_name:string = "";
var v_acc_payer_name:string = ""; /*Название счета плательщика */
var v_acc_receiver_name:string = ""; /*Название счета получателя */
var v_acc_payer_branch:string = ""; /*Офис счета плательщика */
var v_acc_receiver_branch:string = ""; /*Офис счета получателя */
var v_doc_branch:string = ""; /*Офис документа */
var v_doc_oper:string = ""; /*Опер документа*/

var onlypack = 0;

getRegistryValue("BANK_INI\\ОБЩИЕ ПАРАМЕТРЫ\\ДИРЕКТОРИИ\\TEXTDIR", 6, pth, null);
outfileName  = pth + "\\tabdelimfile." + UserNumber;
/*******************************************************/
/* КОНЕЦ  ПОЛЬЗОВАТЕЛЬСКИЕ ПЕРЕМЕННЫЕ И ИХ ОПРЕДЕЛЕНИЕ */
/*******************************************************/
private MACRO B2I(val)
  if (val == true)
    return 1;
  else
    return 0;
  end;
END;

private macro opername(id)
var cmd = rsdcommand("select t_name from dperson_dbt where t_oper = ?");
cmd.addparam ("oper", RSDBP_IN, id);
cmd.execute;
var rsd = rsdrecordset(cmd);
if (rsd.movenext())
return rsd.value(0);
end;
end;
/**
 * Элемент кеша
 * @author ABP
 * @since v.6.00.020.29
 */
private class TFinancialInstrumentCachedDataElement(_fiId : Integer, _isoNumber : String)
    var fiId : Integer = _fiId;
    var isoNumber : String = _isoNumber;
end;

/**
 * Кеширующий ИД фин. инструментов
 * @author ABP
 * @since v.6.00.020.29
 */
private class TFinancialInstrumentCachedData()

    private var m_cache : Object;

    private macro add(fiId : Integer) : Object
        var finInstr = TBFile("fininstr");
        finInstr.rec.fiId = fiId;
        if (finInstr.getEQ())
            m_cache[fiId] = TFinancialInstrumentCachedDataElement(fiId, finInstr.rec.iso_number);
            return m_cache[fiId];
        else
            return null;
        end;
    end;

    /**
     * Получить элемент кеша
     * @param fiId Идентификатор фин. инструмента
     * @return объект класса TFinancialInstrumentCachedDataElement или null
     */
    macro get(fiId : Integer) : Object
        var result = m_cache[fiId];
        if (result == null)
            return add(fiId);
        else
            return result;
        end;
    end;

    /**
     * Получить цифровой код фин. инструмента по ISO
     * @param fiId Идентификатор фин. инструмента
     * @return цифровой код фин. инструмента по ISO
     */
    macro getIsoNumber(fiId : Integer) : String
        return get(fiId).isoNumber;
    end;

    private macro constructorTFinancialInstrumentCachedData()
        m_cache = TArray();
    end;

    constructorTFinancialInstrumentCachedData();

end;

private var m_financialInstrumentCachedData = TFinancialInstrumentCachedData();

/*Параметры для создания отчета, полученные из панели*/
CLASS TReportParameters(departmentCode,
                         orgStructure,
                            issueMode,
                        chapterNumber,
                                 plan,
                         currencyCode,
                  periodBeginningDate,
                     periodEndingDate,
                       needGroupSplit,
                           operNumber,
                           packNumber,
                          sortingKind,
                         needPackItog,
                        needOperSplit,
       needNationalCurrencyEquivalent,
                 needEveryDayPrinting,
                         paymentsData,
                     needApostrophies,
                 needExchangeRateDiff)

    var m_departmentCode                 = departmentCode;
    var m_orgStructure                   = orgStructure;
    var m_issueMode                      = issueMode;
    var m_chapterNumber                  = chapterNumber;
    var m_plan                           = plan;
    var m_currencyCode                   = currencyCode;
    var m_periodBeginningDate            = periodBeginningDate;
    var m_periodEndingDate               = periodEndingDate;
    var m_operNumber                     = operNumber;
    var m_packNumber                     = packNumber;
    var m_sortingKind:TArray             = sortingKind;
    var m_needPackItog                   = needPackItog;
    var m_needNationalCurrencyEquivalent = needNationalCurrencyEquivalent;
    var m_needEveryDayPrinting           = needEveryDayPrinting;
    var m_paymentsData                   = paymentsData;
    var m_needApostrophies               = needApostrophies;
    var m_needOperSplit                  = needOperSplit;
    var m_needGroupSplit                 = needGroupSplit;
    var m_needExchangeRateDiff           = needExchangeRateDiff;

    var m_departmentList   = RepDepartmentList(m_orgStructure, m_issueMode, m_departmentCode);
    /*для счетов ОВП*/
    var m_ocpAccountServer = RepOcpAccountServer(m_chapterNumber, ALLFININSTR, m_departmentList);
    /*привилегия 073*/
    var m_accountFilter    = RepAccountFilter(m_departmentList, PRIV_GET_ACCOUNT_DATA_FOR_REPORTS); /*Для фильтра по ТС/РС*/
    /*привилегия 008*/
    var m_documentFilter   = RepDocumentFilter(m_departmentList);

END; /*class TReportParameters*/

/*Агрегирующие данные отчета*/
CLASS TReportAggregates (operCode,
                       packNumber,
                     currencyCode,
            packNumberOfDocuments,
                         packSumm,
                 packCoveringSumm,
            operNumberOfDocuments,
                         operSumm,
                 operCoveringSumm,
        currencyNumberOfDocuments,
                     currencySumm,
             currencyCoveringSumm,
     documentsNumberInOneCurrency,
 operDocumentsNumberInOneCurrency,
           finalNumberOfDocuments,
              finalEquivalentSumm,
    operCoveringSummInOneCurrency)

    var m_operCode                         = operCode;                 /*код опера*/
    var m_packNumber                       = packNumber;               /*номер пачки*/
    var m_currencyCode                     = currencyCode;             /*код валюты*/
    var m_packNumberOfDocuments            = packNumberOfDocuments;    /*число документов в пачке*/
    var m_packSumm                         = packSumm;                 /*сумма документов в пачке*/
    var m_packCoveringSumm                 = packCoveringSumm;         /*сумма покрытия документов в пачке*/
    var m_operNumberOfDocuments            = operNumberOfDocuments;    /*число документов по операционисту*/
    var m_operSumm                         = operSumm;                 /*сумма документов по операционисту*/
    var m_operCoveringSumm                 = operCoveringSumm;         /*сумма покрытия документов по операционисту*/
    var m_currencyNumberOfDocuments        = currencyNumberOfDocuments;/*число документов по валюте*/
    var m_currencySumm                     = currencySumm;             /*сумма документов по валюте*/
    var m_currencyCoveringSumm             = currencyCoveringSumm;     /*сумма покрытия документов по валюте*/
    var m_documentsNumberInOneCurrency     = documentsNumberInOneCurrency; /*количество документов в пачке по одной валюте*/
    var m_operDocumentsNumberInOneCurrency = operDocumentsNumberInOneCurrency; /*количество документов опера по одной валюте*/
    var m_finalNumberOfDocuments           = finalNumberOfDocuments; /*общее количество документов*/
    var m_finalEquivalentSumm              = finalEquivalentSumm;    /*общая сумма покрытия*/
    var m_operCoveringSummInOneCurrency    = operCoveringSummInOneCurrency; /*сумма покрытия по одной валюте одного опера*/
END;

/*Агрегирующие данные отчета по одной валюте в пачке*/
CLASS TOneCurrencyAggregatesInPack(currencyCode,
                              numberOfDocuments,
                                debitSummInPack,
                      debitEquivalentSummInPack,
                               creditSummInPack,
                     creditEquivalentSummInPack)

    var m_codeCurrency         = currencyCode;               /*код валюты*/
    var m_numberOfDocuments    = numberOfDocuments;          /*количество документов по одной валюте в пачке*/
    var m_debitSumm            = debitSummInPack;            /*сумма дебета в пачке по этой валюте*/
    var m_debitEquivalentSumm  = debitEquivalentSummInPack;  /*сумма дебета покрытия в пачке по этой валюте*/
    var m_creditSumm           = creditSummInPack;           /*сумма кредита в пачке по этой валюте*/
    var m_creditEquivalentSumm = creditEquivalentSummInPack; /*сумма кредита покрытия в пачке по этой валюте*/
END;

/*Агрегирующие данные отчета по одной валюте одного опера*/
CLASS TOneCurrencyAggregatesByOper(currencyCode,
                              numberOfDocuments,
                                debitSummByOper,
                      debitEquivalentSummByOper,
                               creditSummByOper,
                     creditEquivalentSummByOper)

    var m_codeCurrency         = currencyCode;               /*код валюты*/
    var m_numberOfDocuments    = numberOfDocuments;          /*количество документов по одной валюте*/
    var m_debitSumm            = debitSummByOper;            /*сумма дебета опера по этой валюте*/
    var m_debitEquivalentSumm  = debitEquivalentSummByOper;  /*сумма дебета покрытия опера по этой валюте*/
    var m_creditSumm           = creditSummByOper;           /*сумма кредита опера по этой валюте*/
    var m_creditEquivalentSumm = creditEquivalentSummByOper; /*сумма кредита покрытия опера по этой валюте*/
END;

/*Итоговые агрегирующие данные отчета по одной валюте*/
CLASS TFinalOneCurrencyAggregates(currencyCode,
                                debitFinalSumm,
                      debitEquivalentFinalSumm,
                               creditFinalSumm,
                     creditEquivalentFinalSumm)

    var m_codeCurrency         = currencyCode;               /*код валюты*/
    var m_debitSumm            = debitFinalSumm;             /*сумма дебета по валюте*/
    var m_debitEquivalentSumm  = debitEquivalentFinalSumm;   /*сумма дебета покрытия по валюте*/
    var m_creditSumm           = creditFinalSumm;            /*сумма кредита по валюте*/
    var m_creditEquivalentSumm = creditEquivalentFinalSumm;  /*сумма кредита опера по валюте*/
END;

class TPair(_oper, _pack)
    var oper = _oper;
    var pack = _pack;
end;

CLASS TGroupOfOpersAndPacks()

    var oper     : Object;
    var operpack : Object;
    var i;

    macro addPair(_oper, _pack)
        operpack[operpack.size] = TPair(_oper, _pack);
    end;

    macro addSingle(_oper)
        oper[oper.size] = _oper;
    end;

    macro haveSingle(_oper)
        i = 0;
        while (i < oper.size)
            if (oper[i] == _oper)
                return true;
            end;
            i = i + 1;
        end;
        return false;
    end;

    macro havePair(_oper, _pack)
        i = 0;
        while (i < operpack.size)
            if ((operpack[i].oper == _oper) AND (operpack[i].pack == _pack))
                return true;
            end;
            i = i + 1;
        end;
        return false;
    end;

    macro clear()
        i = 0;
        while (i < oper.size)
            oper[i] = -1;
            i = i + 1;
        end;
        while (i < operpack.size)
            operpack[i].oper = -1;
            operpack[i].pack = -1;
            i = i + 1;
        end;
        oper.size = 0;
        operpack.size = 0;
    end;

    macro constructorTGroupOfOpersAndPacks()
        oper     = TArray();
        operpack = TArray();
    end;

    constructorTGroupOfOpersAndPacks();
end;

/**
 * Оптимизированное хранилище обработанных номеров операционистов и номеров пачек документов
 * @author ABP
 * @since v.6.00.020.29
 */
private class (TGroupOfOpersAndPacks) TGroupOfOpersAndPacksOptimized()

    /**
     * Добавить в хранилище пару "номер операциониста - номер пачки"
     * @param _oper номер операциониста
     * @param _pack номер пачки
     */
    macro addPair(_oper : Integer, _pack : Integer)
        operPack[_oper] = TArray();
        operPack[_oper][_pack] = 1;
    end;

    /**
     * Проверить наличие пары "номера операциониста - номер пачки"
     * @param _oper номер операциониста
     * @param _pack номер пачки
     * @return признак наличия в хранилище заданной пары "номера операциониста - номер пачки" (false или true)
     */
    macro havePair(_oper : Integer, _pack : Integer) : Bool
        return ((operPack[_oper] != null) and (operPack[_oper][_pack] != null));
    end;

    /**
     * Добавить в хранилище номер операциониста
     * @param _oper номер операциониста
     */
    macro addSingle(_oper : Integer)
        oper[_oper] = _oper;
    end;

    /**
     * Проверить наличие номера операциониста
     * @param _oper номер операциониста
     * @return признак наличия в хранилище заданного номера операциониста (false или true)
     */
    macro haveSingle(_oper : Integer) : Bool
        return (oper[_oper] != null);
    end;

    /**
     * Очистка хранилища
     */
    macro clear()
        oper.size = 0;
        operPack.size = 0;
    end;

    private macro constructorTGroupOfOpersAndPacksOptimized()
        initTGroupOfOpersAndPacks();
    end;

    constructorTGroupOfOpersAndPacksOptimized();

end;

/*Процедура добавляет запись во временную таблицу с данными для протокола*/
MACRO addRecordToProtocol(dataRecord, errorCode)
/*    tempInserter.Update();*/
    tempInserter.AddNew();
    tempInserter.T_ACCTRNID   = dataRecord.T_ACCTRNID;    /* Сегмент уникального индекса */ //06.08.2014 I-00506908-2 dpn 
  //  tempInserter.t_applicationkind  = dataRecord.dociapplicationkind;  /* Сегмент уникального индекса */
    tempInserter.t_error_code       = errorCode;                         /* Сегмент уникального индекса */
    tempInserter.t_date_carry       = dataRecord.docdate_carry;
    tempInserter.t_document_number  = dataRecord.docnumb_document;
    tempInserter.t_payment_id       = dataRecord.paymentIdNotNull;
    tempInserter.t_currency_code    = dataRecord.doccode_currency;
    tempInserter.t_payer_account    = dataRecord.docaccount_payer;
    tempInserter.t_receiver_account = dataRecord.docaccount_receiver;
    tempInserter.t_document_summ    = dataRecord.docsum;

    tempInserter.Update();
    OnError(err);
        tempInserter.CancelEdit();

END;

/*Процедура заполняет список фин.инструментов и количество фин.инструментов*/
MACRO getCurrencyList(currencyList:TArray):TArray
    var queryText = "";
    var data;
    var i;
debugbreak;
    queryText = "SELECT t_fiId"
       + "\n" + "  FROM dfininstr_dbt"
       + "\n" + " WHERE t_fi_kind IN (" + FIKIND_CURRENCY + ", " + FIKIND_METAL + ")"
       + "\n" + " ORDER BY t_fi_code";

    data = TRsbDataset(queryText);
    while (data.next())
        currencyList[currencyList.size] = data.fiId;
    end;

    return currencyList;
END;

/*Получение номера и наименование валюты по коду. Например, доллар США: код 5, номер 840*/
MACRO getCurrencyNumber(currencyCode, numberOfCurrency)
debugbreak;
    setparm (1, m_financialInstrumentCachedData.getIsoNumber(currencyCode));
END;

/*Печать "заголовка" (все, что до таблицы)*/
MACRO printHeader(chapterNumber, beginningDate, endingDate, reportDate, width, shift, isPeriod)
    var dateOfReport;
    var timeOfReport;

    var dateOfBeginningDate;
    var timeOfBeginningDate;

    var dateOfEndingDate;
    var timeOfEndingDate;

    printLn();
    println(mkStr(" ", shift) + StrAlign("СПРАВКА О ПРОВЕДЕННЫХ ДОКУМЕНТАХ", width, STR_ALIGN_CENTER));
    println(mkStr(" ", shift) + StrAlign("по главе " + НазваниеГлавы(chapterNumber), width, STR_ALIGN_CENTER));
    if (isPeriod)
        /*Если даты начала и конца периода совпадают, то печатаем как на дату*/
        if (beginningDate != endingDate)
            dtTmSplit (beginningDate, dateOfBeginningDate, timeOfBeginningDate);
            dtTmSplit (endingDate, dateOfEndingDate, timeOfEndingDate);
            printLn(mkStr(" ", shift) + StrAlign(string("за период с ",string(dateOfBeginningDate:f)," по ",string(dateOfEndingDate:f)), width, STR_ALIGN_CENTER));
        elif (beginningDate == endingDate)
            dtTmSplit (beginningDate, dateOfReport, timeOfReport);
            printLn(mkStr(" ", shift) + StrAlign(string("за ",string(dateOfReport:f)), width, STR_ALIGN_CENTER));
        end;
    else
        dtTmSplit (reportDate, dateOfReport, timeOfReport);
        printLn(mkStr(" ", shift) + StrAlign(string("за ",string(dateOfReport:f)), width, STR_ALIGN_CENTER));
    end;
END;

/*Печать шапки таблицы*/
MACRO printTableHeader(isForeignCurrency, isNationalEquivalent, needOperSplit)
    if (isForeignCurrency)
        if (isNationalEquivalent)
            if (needOperSplit)
                [┌───────────────┬──────────┬──────┬────────────────┬─────────────────────────┬─────────────────────────┬─────────────────────────┬─────────────────────────┬─────────────────────────┬─────────────────────────┐
                 │    Номер      │    Дата  │ Код  │      БИК       │          Дебет          │         Кредит          │      Сумма дебета       │      Сумма дебета       │      Сумма кредита      │      Сумма кредита      │
                 │  документа    │ документа│валюты│                │                         │                         │        в валюте         │        в рублях         │        в валюте         │        в рублях         │
                 ├───────────────┼──────────┼──────┼────────────────┼─────────────────────────┼─────────────────────────┼─────────────────────────┼─────────────────────────┼─────────────────────────┼─────────────────────────┤
                ];
            else
                [┌────────┬───────────────┬──────────┬──────┬────────────────┬─────────────────────────┬─────────────────────────┬─────────────────────────┬─────────────────────────┬─────────────────────────┬─────────────────────────┐
                 │Операци-│    Номер      │    Дата  │ Код  │      БИК       │          Дебет          │         Кредит          │      Сумма дебета       │      Сумма дебета       │      Сумма кредита      │      Сумма кредита      │
                 │ онист  │  документа    │ документа│валюты│                │                         │                         │        в валюте         │        в рублях         │        в валюте         │        в рублях         │
                 ├────────┼───────────────┼──────────┼──────┼────────────────┼─────────────────────────┼─────────────────────────┼─────────────────────────┼─────────────────────────┼─────────────────────────┼─────────────────────────┤
                ];
            end;
        else
            if (needOperSplit)
                [┌───────────────┬──────────┬──────┬────────────────┬─────────────────────────┬─────────────────────────┬─────────────────────────┬─────────────────────────┐
                 │    Номер      │    Дата  │ Код  │      БИК       │          Дебет          │         Кредит          │      Сумма дебета       │      Сумма кредита      │
                 │  документа    │ документа│валюты│                │                         │                         │                         │                         │
                 ├───────────────┼──────────┼──────┼────────────────┼─────────────────────────┼─────────────────────────┼─────────────────────────┼─────────────────────────┤
                ];
            else
                [┌────────┬───────────────┬──────────┬──────┬────────────────┬─────────────────────────┬─────────────────────────┬─────────────────────────┬─────────────────────────┐
                 │Операци-│    Номер      │    Дата  │ Код  │      БИК       │          Дебет          │         Кредит          │      Сумма дебета       │      Сумма кредита      │
                 │ онист  │  документа    │ документа│валюты│                │                         │                         │                         │                         │
                 ├────────┼───────────────┼──────────┼──────┼────────────────┼─────────────────────────┼─────────────────────────┼─────────────────────────┼─────────────────────────┤
                ];
            end;
        end;
    else
        if (needOperSplit)
            [┌─────┬──────────┬──┬───────────────────────────────────┬───────────────────────────────────┬────────────────────┐
             │Номер│    Дата  │  │               Дебет               │              Кредит               │        Сумма       │
             │ док-│ документа│ВО├─────────┬─────────────────────────┼─────────┬─────────────────────────┤                    │
             │ та  │          │  │   БИК   │           Счет          │   БИК   │          Счет           │                    │
             ├─────┼──────────┼──┼─────────┼─────────────────────────┼─────────┼─────────────────────────┼────────────────────┤
            ];
        else
            [┌────────┬─────┬──────────┬──┬───────────────────────────────────┬───────────────────────────────────┬────────────────────┐
             │Операци-│Номер│    Дата  │  │               Дебет               │              Кредит               │        Сумма       │
             │ онист  │ док-│ документа│ВО├─────────┬─────────────────────────┼─────────┬─────────────────────────┤                    │
             │        │ та  │          │  │   БИК   │           Счет          │   БИК   │          Счет           │                    │
             ├────────┼─────┼──────────┼──┼─────────┼─────────────────────────┼─────────┼─────────────────────────┼────────────────────┤
            ];
        end;
    end;
END;

/*Печать заголовка пачки*/
MACRO printNewPack(packNumber)
    [Пачка № #####](packNumber);
END;

/*Печать заголовка опера*/
MACRO printNewOper( operNumber)
    [Операционист № #####](operNumber);
END;

/*Печать заголовка группы операционистов*/
MACRO printNewGroup( groupNumber)
    println();
    if (groupNumber == -1)
        [Операционисты, не входящие ни в одну группу];
    else
        [Группа операционистов № ##########](string(groupNumber:10:0:l));
    end;
END;

/*Печать итога по пачке*/
MACRO printPackResult(numberOfDocumentsInPack, summInPack, needApostrophiesInSumm, needOperSplit)
    var printableSummInPack;

    if (needApostrophiesInSumm)
        printableSummInPack = string(summInPack:a);
    else
        printableSummInPack = string(summInPack);
    end;

    if (needOperSplit)
        [├─────┴──────────┴──┴─────────┴─────────────────────────┴─────────┴─────────────────────────┴────────────────────┤
         │         Документов в пачке: #####                               Итого по пачке:            ####################│
         └────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
        ](numberOfDocumentsInPack, printableSummInPack:r);
    else
        [├────────┴──────────┴─────┴──┴─────────┴─────────────────────────┴─────────┴─────────────────────────┴────────────────────┤
         │         Документов в пачке: #####                                        Итого по пачке:            ####################│
         └─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
        ](numberOfDocumentsInPack, printableSummInPack:r);
    end;
END;

/*Печать результатов по пачке в валютном отчете*/
MACRO printPackResultInForeignReport(numberOfDocumentsInPack, equivalentDebitSumm, equivalentCreditSumm, isEquivalent, needApostrophiesInSumm, needOperSplit)
    var printableDebitEquivalent;
    var printableCreditEquivalent;

    if (needApostrophiesInSumm)
        printableDebitEquivalent = ternary(equivalentDebitSumm == 0, "", string(equivalentDebitSumm : a));
        printableCreditEquivalent = ternary(equivalentCreditSumm == 0, "", string(equivalentCreditSumm : a));
    else
        printableDebitEquivalent = ternary(equivalentDebitSumm == 0, "", string(equivalentDebitSumm));
        printableCreditEquivalent = ternary(equivalentCreditSumm == 0, "", string(equivalentCreditSumm));
    end;

    if (isEquivalent)
        if (needOperSplit)
            [└───────────────┴──────────┴──────┴────────────────┴─────────────────────────┴─────────────────────────┴─────────────────────────┴─────────────────────────┴─────────────────────────┴─────────────────────────┘
              Документов в пачке:                                ########                         Итого по пачке:                              #########################                           #########################
            ](numberOfDocumentsInPack, printableDebitEquivalent:r, printableCreditEquivalent:r);
        else
            [└────────┴───────────────┴──────────┴──────┴────────────────┴─────────────────────────┴─────────────────────────┴─────────────────────────┴─────────────────────────┴─────────────────────────┴─────────────────────────┘
              Документов в пачке:                                         ########                         Итого по пачке:                              #########################                           #########################
            ](numberOfDocumentsInPack, printableDebitEquivalent:r, printableCreditEquivalent:r);
        end;
    else
        if (needOperSplit)
            [└───────────────┴──────────┴──────┴────────────────┴─────────────────────────┴─────────────────────────┴─────────────────────────┴─────────────────────────┘
              Документов в пачке:                                ########                         Итого по пачке:
            ](numberOfDocumentsInPack);
        else
            [└────────┴───────────────┴──────────┴──────┴────────────────┴─────────────────────────┴─────────────────────────┴─────────────────────────┴─────────────────────────┘
              Документов в пачке:                                         ########                         Итого по пачке:
            ](numberOfDocumentsInPack);
        end;
    end;
END;

/*Печать результатов по оперу в валютном отчете*/
MACRO printOperResultInForeignReport(numberOfOperDocuments,
                                        equivalentDebitSumm,
                                       equivalentCreditSumm,
                                               isEquivalent,
                                                     isPack,
                                     needApostrophiesInSumm,
                                              needOperSplit)
    var printableDebitEquivalent;
    var printableCreditEquivalent;

    if (isPack == FALSE)
          if (isEquivalent)
              if (needOperSplit)
                  [└───────────────┴──────────┴──────┴────────────────┴─────────────────────────┴─────────────────────────┴─────────────────────────┴─────────────────────────┴─────────────────────────┴─────────────────────────┘];
              else
                  [├────────┴───────────────┴──────────┴──────┴────────────────┴─────────────────────────┴─────────────────────────┴─────────────────────────┴─────────────────────────┴─────────────────────────┴─────────────────────────┤];
              end;
          else
              if (needOperSplit)
                  [└───────────────┴──────────┴──────┴────────────────┴─────────────────────────┴─────────────────────────┴─────────────────────────┴─────────────────────────┘];
              else
                  [├────────┴───────────────┴──────────┴──────┴────────────────┴─────────────────────────┴─────────────────────────┴─────────────────────────┴─────────────────────────┤];
              end;
          end;
    end;

    if (needApostrophiesInSumm)
        printableDebitEquivalent = ternary(equivalentDebitSumm == 0, "", string(equivalentDebitSumm : 0 : 2 : a));
        printableCreditEquivalent = ternary(equivalentCreditSumm == 0, "", string(equivalentCreditSumm : 0 : 2 : a));
    else
        printableDebitEquivalent = ternary(equivalentDebitSumm == 0, "", string(equivalentDebitSumm : 0 : 2));
        printableCreditEquivalent = ternary(equivalentCreditSumm == 0, "", string(equivalentCreditSumm : 0 : 2));
    end;

    if (isEquivalent)
        if (needOperSplit)
            [
              Документов у операциониста:    ########                          Итого по операционисту:                                         #########################                           #########################
            ](numberOfOperDocuments, printableDebitEquivalent:r, printableCreditEquivalent:r);
        else
            [│Документов у операциониста:             ########                          Итого по операционисту:                                         #########################                           #########################│
            ](numberOfOperDocuments, printableDebitEquivalent:r, printableCreditEquivalent:r);
        end;
    else
        if (needOperSplit)
            [
              Документов у операциониста:             ########                 Итого по операционисту:
            ](numberOfOperDocuments);
        else
            [│Документов у операциониста:             ########                 Итого по операционисту:                                                                           │
            ](numberOfOperDocuments);
        end;
    end;
END;

MACRO printFinalResultInForeignReport(numberOfDocuments,
                                    equivalentDebitSumm,
                                   equivalentCreditSumm,
                                           isEquivalent,
                                 needApostrophiesInSumm,
                                          needOperSplit)
    var printableDebitEquivalent;
    var printableCreditEquivalent;

    if (needApostrophiesInSumm)
        printableDebitEquivalent = ternary(equivalentDebitSumm == 0, "", string(equivalentDebitSumm : a));
        printableCreditEquivalent = ternary(equivalentCreditSumm == 0, "", string(equivalentCreditSumm : a));
    else
        printableDebitEquivalent = ternary(equivalentDebitSumm == 0, "", string(equivalentDebitSumm));
        printableCreditEquivalent = ternary(equivalentCreditSumm == 0, "", string(equivalentCreditSumm));
    end;

    if (isEquivalent)
        if (needOperSplit)
            [
              Всего документов:                       ########                                  ИТОГО:                                         #########################                           #########################
            ](numberOfDocuments, printableDebitEquivalent:r, printableCreditEquivalent:r);
        else
            [
              Всего документов:                       ########                                           ИТОГО:                                         #########################                           #########################
            ](numberOfDocuments, printableDebitEquivalent:r, printableCreditEquivalent:r);
        end;
    else
        [
          Всего документов:                       ########                                  ИТОГО:
        ](numberOfDocuments);
    end;
END;

/*Печать агрегирующих данных в разрезе валют*/
MACRO printAggregatesByCurrencies(listOfAggregates:TArray, isEquivalent, needApostrophiesInSumm, needOperSplit, isFinal)
    var currencyCode;
    var i = 0;

    var debitSumm;
    var creditSumm;
    var debitEquivalent;
    var creditEquivalent;

    var border;

    if (isFinal)
        border = " ";
    else
        border = "│";
    end;

    while (i < listOfAggregates.size)
        getCurrencyNumber(listOfAggregates[i].m_codeCurrency, currencyCode);
        /*Печатаем если есть хотя бы одно из данных, иначе валюту пропускаем*/
        if ((listOfAggregates[i].m_debitSumm            != 0) or
            (listOfAggregates[i].m_debitEquivalentSumm  != 0) or
            (listOfAggregates[i].m_creditSumm           != 0) or
            (listOfAggregates[i].m_creditEquivalentSumm != 0)
            )

            debitSumm = ternary(listOfAggregates[i].m_debitSumm != 0, money(listOfAggregates[i].m_debitSumm), "");
            creditSumm = ternary(listOfAggregates[i].m_creditSumm != 0, money(listOfAggregates[i].m_creditSumm), "");;

            debitEquivalent = ternary(listOfAggregates[i].m_debitEquivalentSumm != 0, money(listOfAggregates[i].m_debitEquivalentSumm), "");
            creditEquivalent = ternary(listOfAggregates[i].m_creditEquivalentSumm != 0, money(listOfAggregates[i].m_creditEquivalentSumm), "");

            if (needApostrophiesInSumm)
                debitSumm = string(debitSumm : 0 : 2 : a);
                creditSumm = string(creditSumm : 0 : 2 : a);
                debitEquivalent = string(debitEquivalent : 0 : 2 : a);
                creditEquivalent = string(creditEquivalent : 0 : 2 : a);
            else
                debitSumm = string(debitSumm : 0 : 2);
                creditSumm = string(creditSumm : 0 : 2);
                debitEquivalent = string(debitEquivalent : 0 : 2);
                creditEquivalent = string(creditEquivalent : 0 : 2);
            end;

            if (isEquivalent)
                if (needOperSplit)
                    [              по валюте ###:                                                                            ######################### ######################### ######################### #########################
                    ](currencyCode, debitSumm:r, debitEquivalent:r,
                                   creditSumm:r, creditEquivalent:r);
                else
                    creditEquivalent = creditEquivalent + border;
                    [#             по валюте ###:                                                                                     ######################### ######################### ######################### ##########################
                    ](border,
                      currencyCode, debitSumm:r, debitEquivalent:r,
                                   creditSumm:r, creditEquivalent:r);
                end;
            else
                if (needOperSplit)
                    [              по валюте ###:                                                                            ######################### #########################
                    ](currencyCode, debitSumm:r, creditSumm:r);
                else
                    creditSumm = creditSumm + border;
                    [#             по валюте ###:                                                                                     ######################### ##########################
                    ](border,
                      currencyCode, debitSumm:r, creditSumm:r);
                end;
            end;
        end;
        i = i + 1;
    end;
END;

/*Печать итога по оперу*/
MACRO printOperResult(operNumberOfDocumets, operSumm, needPackSort, needApostrophiesInSumm, needOperSplit)
    var printableOperSumm;

    if (needPackSort)
        [┌────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐];
    else
        if (needOperSplit)
            [├─────┴──────────┴──┴─────────┴─────────────────────────┴─────────┴─────────────────────────┴────────────────────┤];
        else
            [├────────┴─────┴──────────┴──┴─────────┴─────────────────────────┴─────────┴─────────────────────────┴────────────────────┤];
        end;
    end;

    if (needApostrophiesInSumm)
        printableOperSumm = string(operSumm:a);
    else
        printableOperSumm = string(operSumm);
    end;

    if (needOperSplit or needPackSort)
        [│ Документов у операциониста: #####                       Итого по операционисту:            ####################│
         └────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
        ](operNumberOfDocumets, printableOperSumm:r);
    else
        [│ Документов у операциониста: #####                                Итого по операционисту:            ####################│
        ](operNumberOfDocumets, printableOperSumm:r);
    end;
END;

/*Печать разделительной линии под итогами опера в режиме без разбивки по операм*/
MACRO printOperResultBackLine(isLastOper)
    if (isLastOper)
        [└─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘];
    else
        [├────────┬──────────┬─────┬──┬─────────┬─────────────────────────┬─────────┬─────────────────────────┬────────────────────┤];
    end;
END;

MACRO printOperForeignResultBackLine(isLastOper, needNationalCurrencyEquivalent)
    if (isLastOper)
        if (needNationalCurrencyEquivalent)
            [└───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘];
        else
            [└───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘];
        end;
    else
        if (needNationalCurrencyEquivalent)
            [├────────┬───────────────┬──────────┬──────┬────────────────┬─────────────────────────┬─────────────────────────┬─────────────────────────┬─────────────────────────┬─────────────────────────┬─────────────────────────┤];
        else
            [├────────┬───────────────┬──────────┬──────┬────────────────┬─────────────────────────┬─────────────────────────┬─────────────────────────┬─────────────────────────┤];
        end;
    end;
END;

MACRO printSignatures ()
    printLn();
    if (fgBank.is_go )
    printLn("Исполнитель ",opername({oper}));
    printLn("Контролер _____________________ ");
     else
    printLn({Name_Book}," ___________ ",{FIO_Book});
    end;
    printLn();
END;

/*Печать одной записи в таблицу отчета*/
MACRO printOneNationalDocument(dataString, needApostrophiesInSumm, needOperSplit)
    var documentOper;
    var documentNumber;
    var operationKind;
    var payerBankCode;
    var payerAccount;
    var receiverBankCode;
    var receiverAccount;
    var documentSumm;
    var printableDocumentSum;
    var documentDate;

    documentOper     = dataString.docoper;
    documentNumber   = dataString.t_numb_document;
    documentDate     = dataString.t_date_document;
    operationKind    = dataString.t_shifr_Oper;
    payerBankCode    = dataString.PayerBankCodeNotNull;
    payerAccount     = dataString.t_payerAccount;
    receiverBankCode = dataString.ReceiverBankCodeNotNull;
    receiverAccount  = dataString.t_receiverAccount;
//    documentSumm     = dataString.t_amount;
    documentSumm     = dataString.docsum;

    if (needApostrophiesInSumm)
        printableDocumentSum = string(documentSumm:a);
    else
        printableDocumentSum = string(documentSumm);
    end;

    if (needOperSplit)
        [│#####│##########│##│#########│#########################│#########│#########################│####################│
        ](documentNumber,
          documentDate:f,
          operationKind,
          payerBankCode,
          payerAccount,
          receiverBankCode,
          receiverAccount,
          printableDocumentSum:r);
    else
        [│########│#####│##########│##│#########│#########################│#########│#########################│####################│
        ](documentOper,
          documentNumber,
          documentDate:f,
          operationKind,
          payerBankCode,
          payerAccount,
          receiverBankCode,
          receiverAccount,
          printableDocumentSum:r);
    end;

    /* ПОЛЬЗОВАТЕЛЬСКИЕ ДОРАБОТКИ - НАЧАЛО */
    /*   Зубко С. 25.04.2011  Сделал доработки по I-00035903 Тема: Перенсти отчет в РС V6 
                            то есть выгрузку в текстовый файл с разделителем Tab 
    */
    /*Если выбрали вывод в файл*/
    if (choise_type == 1)
       /*В зависимости от вида проводки выберем таблицу*/
       //В 31-м не выбираем
       // 24.06.2014 I-00495537-2 DPN
      // if(dataString.t_code_currency == 0)
          doc_table_name = " dacctrn_dbt ";
      // else
      //    doc_table_name = " darhdoc$_dbt ";
      // end;

       /*Сформируем запрос для передачи в инфосервер*/ 
       sql = " select doc.* " +  
             " from " +  doc_table_name  + " doc " +
             " where doc.T_ACCTRNID = " + dataString.T_ACCTRNID ;  //06.08.2014 I-00506908-2 dpn
            // " and doc.T_APPLICATIONKEY = '" + dataString.t_docapplicationKey + "' ";

       /*Вызовем как в примере*/
       docInfoServer.cacheInformation(sql);

       /*Получить наименование  временной таблицы DDOC_INF_DBT*/
       rs = TRsbDataset("SELECT * FROM " + docInfoServer.getCacheTableName());

       /*Если что-то инфосервер нам заполнил*/
       if(rs.moveNext)

          /*Получить имя и офис счета-плательщика*/
          sql2 = "select acc.t_nameaccount, acc.t_branch from daccount_dbt acc where acc.T_ACCOUNT = ? ";
          cmd2 = RsdCommand(sql2);
          cmd2.AddParam("account", RSDBP_IN, dataString.t_payerAccount);
          rs2 = RsdRecordSet(cmd2);
          if (rs2.MoveNext and ( Valtype(rs2.Value(0)) != 26))
             v_acc_payer_name = rs2.Value("t_nameaccount"); /*Название счета плательщика */
             v_acc_payer_branch = rs2.Value("t_branch"); /*Офис счета плательщика */
          end;

          /*Получить имя и офис счета-получателя*/
          cmd2 = null; rs2 = null;
          cmd2 = RsdCommand(sql2);
          cmd2.AddParam("account", RSDBP_IN, dataString.t_receiverAccount);
          rs2 = RsdRecordSet(cmd2);
          if (rs2.MoveNext and ( Valtype(rs2.Value(0)) != 26))
             v_acc_receiver_name = rs2.Value("t_nameaccount"); /*Название счета получателя */
             v_acc_receiver_branch = rs2.Value("t_branch"); /*Офис счета получателя*/
          end;

          /*Получить опера и офис документа*/
          cmd2 = null; rs2 = null;

          sql2 = " select doc.t_branch, doc.t_oper " + 
                 " from " +  doc_table_name  + " doc " +
                 " where doc.T_ACCTRNID = " + dataString.T_ACCTRNID; //06.08.2014 I-00506908-2 dpn 
                // " and doc.T_APPLICATIONKEY = '" + dataString.t_docapplicationKey + "' ";

          cmd2 = RsdCommand(sql2);
          rs2 = RsdRecordSet(cmd2);
          if (rs2.MoveNext and ( Valtype(rs2.Value(0)) != 26))
             v_doc_branch = rs2.Value("t_branch"); /*Офис документа */
             v_doc_oper = rs2.Value("t_oper"); /*Опер документа*/
          end;

          /*Переключим вывод в другой файл*/
          SetOutPut(outfileName, true);
          /*Напечатаем данные*/
          println(string(dataString.T_ACCTRNID,TAB,   /*application_kind */
                       //  dataString.t_dociApplicationKind,TAB, /*application_key  */ dpn
                         dataString.t_date_document,TAB,       /*Дата             */
                         dataString.t_docsum,TAB,              /*Сумма            */
                         dataString.t_docoper,TAB,             /*Код операциониста*/
                         v_doc_branch,TAB, /*Офис(в проводке)*/
                         rs.Ground,TAB, /*Назначение платежа*/
                         dataString.t_payerAccount,TAB,         /*Счет плательщика*/
                         rs.PAYERBANKCODE,TAB, /*БИК плательщика */
                         v_acc_payer_name,TAB,  /*Название счета плательщика */
                         rs.PAYERNAME,TAB,  /*Плательщик                 */
                         rs.PAYERINN,TAB,  /*ИНН плательщика            */
                         rs.PAYERBANKNAME,TAB,  /*Банк плательщика           */
                         v_acc_receiver_branch,TAB,  /*Офис счета плательщика     */
                         dataString.t_receiverAccount,TAB,  /*Счет получателя            */
                         rs.RECEIVERBANKCODE,TAB,  /*БИК получателя             */
                         v_acc_receiver_name,TAB,  /*Название счета получателя  */
                         rs.RECEIVERNAME,TAB,  /*Получатель                 */
                         rs.RECEIVERINN,TAB,  /*ИНН получателя             */
                         rs.RECEIVERBANKNAME,TAB,  /*Банк получателя            */
                         v_acc_receiver_branch,TAB,  /*Офис счета получателя      */
                         rs.NUMBER_PACK,TAB,  /*Пачка                      */
                         v_doc_oper,TAB   /*Операционист               */
                 ));
          /*Вывод переключим по-умолчанию*/
          SetOutput(null, true);
       end;
    end;
    /* ПОЛЬЗОВАТЕЛЬСКИЕ ДОРАБОТКИ - КОНЕЦ */

                                                     
END;

/*Печать одной записи по мультивалютной проводке с покрытием*/
MACRO printOneMultyCarryRecord(documentNumber,
                               documentDate,
                               currencyCode,
                               receiverBankCode,
                               payerAccount,
                               receiverAccount,
                               debitSumm,
                               debitEquivalentSumm,
                               creditSumm,
                               creditEquivalentSumm,
                               needApostrophiesInSumm);

    var currencyNumber;

    getCurrencyNumber(currencyCode, currencyNumber);

    if (needApostrophiesInSumm)
        [│###############│##########│ ###  │################│#########################│#########################│#########################│#########################│#########################│#########################│
        ](documentNumber,
          documentDate:f,
          currencyNumber,
          receiverBankCode,
          payerAccount,
          receiverAccount,
          debitSumm:r:a,
          debitEquivalentSumm:r:a,
          creditSumm:r:a,
          creditEquivalentSumm:r:a);
    else
        [│###############│##########│ ###  │################│#########################│#########################│#########################│#########################│#########################│#########################│
        ](documentNumber,
          documentDate:f,
          currencyNumber,
          receiverBankCode,
          payerAccount,
          receiverAccount,
          debitSumm:r,
          debitEquivalentSumm:r,
          creditSumm:r,
          creditEquivalentSumm:r);
    end;
END;

/*Печать одной записи в валютном отчете*/
MACRO printOneForeignCurrencyDocument(parametersF:TReportParameters,
                                                        dataStringF,
                                                    debitEquivalent,
                                                   creditEquivalent);
    var documentOper         = dataStringF.docoper;
    var documentNumber       = dataStringF.numb_Document;
    var documentDate         = dataStringF.date_document;
    var currencyCode;
    var receiverBankCode     = dataStringF.receiverBankCodeNotNull;
    var payerAccount         = dataStringF.payerAccount;
    var receiverAccount      = dataStringF.receiverAccount;
    var debitSumm            = dataStringF.payerAmount;
    var creditSumm           = dataStringF.receiverAmount;
//    var debitSumm            = dataStringF.docsum;
//    var creditSumm           = dataStringF.docsum;
    var debitEquivalentSumm  = numeric(debitEquivalent);
    var creditEquivalentSumm = numeric(creditEquivalent);

    getCurrencyNumber(dataStringF.payerFiid, currencyCode);

    if (not parametersF.m_needOperSplit)
        print("│" + string(documentOper:8:r));
    end;

    if (parametersF.m_needNationalCurrencyEquivalent)
        if ((dataStringF.t_receiverFiId != dataStringF.t_payerFiId) and (dataStringF.t_result_carry != 18) //06.08.2014 I-00506908-2 dpn
                                                         and (dataStringF.t_result_carry != 82)
                                                         and (dataStringF.t_result_carry != 83)
                                                         and (dataStringF.t_result_carry != 84))
            /*мультивалютная проводка*/
            if (parametersF.m_needApostrophies)
                [│###############│##########│ ###  │################│#########################│#########################│#########################│#########################│#########################│#########################│
                ](documentNumber,
                  documentDate:f,
                  currencyCode,
                  receiverBankCode,
                  payerAccount,
                  receiverAccount,
                  debitSumm:r:a,
                  debitEquivalentSumm:r:a,
                  creditSumm:r:a,
                  creditEquivalentSumm:r:a);
            else
                [│###############│##########│ ###  │################│#########################│#########################│#########################│#########################│#########################│#########################│
                ](documentNumber,
                  documentDate:f,
                  currencyCode,
                  receiverBankCode,
                  payerAccount,
                  receiverAccount,
                  debitSumm:r,
                  debitEquivalentSumm:r,
                  creditSumm:r,
                  creditEquivalentSumm:r);
            end;
        else
            if (parametersF.m_needApostrophies)
                [│###############│##########│ ###  │################│#########################│#########################│#########################│#########################│                         │                         │
                ](documentNumber,
                  documentDate:f,
                  currencyCode,
                  receiverBankCode,
                  payerAccount,
                  receiverAccount,
                  debitSumm:r:a,
                  debitEquivalentSumm:r:a);
            else
                [│###############│##########│ ###  │################│#########################│#########################│#########################│#########################│                         │                         │
                ](documentNumber,
                  documentDate:f,
                  currencyCode,
                  receiverBankCode,
                  payerAccount,
                  receiverAccount,
                  debitSumm:r,
                  debitEquivalentSumm:r);
            end;
        end;
    else
             /*мультивалютная проводка*/
        if ((dataStringF.t_receiverFiId != dataStringF.t_payerFiId) and (dataStringF.t_result_carry != 18) //06.08.2014 I-00506908-2 dpn 
                                                         and (dataStringF.t_result_carry != 82)
                                                         and (dataStringF.t_result_carry != 83)
                                                         and (dataStringF.t_result_carry != 84))
            if (parametersF.m_needApostrophies)
                [│###############│##########│ ###  │################│#########################│#########################│#########################│#########################│
                ](documentNumber,
                  documentDate:f,
                  currencyCode,
                  receiverBankCode,
                  payerAccount,
                  receiverAccount,
                  debitSumm:r:a,
                  creditSumm:r:a);
            else
                [│###############│##########│ ###  │################│#########################│#########################│#########################│#########################│
                ](documentNumber,
                  documentDate:f,
                  currencyCode,
                  receiverBankCode,
                  payerAccount,
                  receiverAccount,
                  debitSumm:r,
                  creditSumm:r);
            end;
        else
            if (parametersF.m_needApostrophies)
                [│###############│##########│ ###  │################│#########################│#########################│#########################│#########################│
                ](documentNumber,
                  documentDate:f,
                  currencyCode,
                  receiverBankCode,
                  payerAccount,
                  receiverAccount,
                  debitSumm:r:a,
                  creditSumm:r:a); //09.10.2014 R-466898-1 dpn 
            else
                [│###############│##########│ ###  │################│#########################│#########################│#########################│#########################│
                ](documentNumber,
                  documentDate:f,
                  currencyCode,
                  receiverBankCode,
                  payerAccount,
                  receiverAccount,
                  debitSumm:r,
                  creditSumm:r:a); //09.10.2014 R-466898-1 dpn 
            end;
        end;
    end;
END;

MACRO printTableWithNationalResults(parametersOfReport:TReportParameters, aggregates:TArray, resultDate, chapter)
    var i = 0;
    var resultsListSize;

    MACRO printResultHeader(chapterNumber, dateForPrinting, needPackSort)
        var resultDate;
        var resultTime;
        var resultWidth;
        var resultShift = 0;

        if (needPackSort)
            resultWidth = 58;
        else
            resultWidth = 50;
        end;

        dtTmSplit (dateForPrinting, resultDate, resultTime);

        printLn();
        printLn();
        printLn(mkStr(" ",resultShift) + strAlign("СПРАВКА О ПРОВЕДЕННЫХ ДОКУМЕНТАХ",resultWidth, STR_ALIGN_CENTER));
        printLn(mkStr(" ",resultShift) + strAlign(string("по главе " + НазваниеГлавы(chapterNumber)), resultWidth, STR_ALIGN_CENTER));
        printLn(mkStr(" ",resultShift) + strAlign(string("за " + string(resultDate:f)), resultWidth, STR_ALIGN_CENTER));
        if (needPackSort)
            [
             ┌──────────────┬───────┬────────────────────┬────────────┐
             │              │       │                    │ Количество │
             │ Операционист │ Пачка │      Сумма         │ документов │
             │              │       │                    │            │
             ├──────────────┼───────┼────────────────────┼────────────┤
            ];
        else
            [
             ┌──────────────┬────────────────────┬────────────┐
             │              │                    │ Количество │
             │ Операционист │      Сумма         │ документов │
             │              │                    │            │
             ├──────────────┼────────────────────┼────────────┤
            ];
      end;
    END;

    MACRO printPackString(aggregatesData:TReportAggregates)
       var operNumber              = aggregatesData.m_operCode;
       var packNumber              = aggregatesData.m_packNumber;
       var summInPack              = aggregatesData.m_packSumm;
       var numberOfDocumentsInPack = aggregatesData.m_packNumberOfDocuments;
        if (parametersOfReport.m_needApostrophies)
            [│      #####   │ ##### │####################│   #####    │
            ](operNumber, packNumber, summInPack:r:a, numberOfDocumentsInPack);
        else
            [│      #####   │ ##### │####################│   #####    │
            ](operNumber, packNumber, summInPack:r, numberOfDocumentsInPack);
        end;
    END;


    MACRO printOperString (aggregatesData:TReportAggregates, needPackSort)
        var operNumber            = aggregatesData.m_operCode;
        var operSumm              = aggregatesData.m_operSumm;
        var operNumberOfDocuments = aggregatesData.m_operNumberOfDocuments;

         if (needPackSort)
             if (parametersOfReport.m_needApostrophies)
                 [├──────────────┴───────┼────────────────────┼────────────┤];
                 [│    Опер.             │####################│   #####    │] (operSumm:r:a, operNumberOfDocuments);
                 [│    #####             │                    │            │] (operNumber);
                 [├──────────────┬───────┼────────────────────┼────────────┤]
             else
                 [├──────────────┴───────┼────────────────────┼────────────┤];
                 [│    Опер.             │####################│   #####    │] (operSumm:r, operNumberOfDocuments);
                 [│    #####             │                    │            │] (operNumber);
                 [├──────────────┬───────┼────────────────────┼────────────┤]
             end;
         else
             if (parametersOfReport.m_needApostrophies)
                 [│      #####   │####################│   #####    │] (operNumber, operSumm:r:a, operNumberOfDocuments);
             else
                 [│      #####   │####################│   #####    │] (operNumber, operSumm:r, operNumberOfDocuments);
             end;
         end;
    END;

    MACRO printFinalResult(aggregatesData:TReportAggregates, needPackSort)
          var finalSumm              = aggregatesData.m_currencySumm;
          var finalNumberOfDocuments = aggregatesData.m_currencyNumberOfDocuments;

          if (needPackSort)
             if (parametersOfReport.m_needApostrophies)
                 [│ВСЕГО:        │       │####################│   #####    │
                  └──────────────┴───────┴────────────────────┴────────────┘

                 ](finalSumm:r:a, finalNumberOfDocuments);
             else
                 [│ВСЕГО:        │       │####################│   #####    │
                  └──────────────┴───────┴────────────────────┴────────────┘

                 ](finalSumm:r, finalNumberOfDocuments);

             end;
          else
             if (parametersOfReport.m_needApostrophies)
                 [├──────────────┼────────────────────┼────────────┤
                  │ВСЕГО:        │####################│   #####    │
                  └──────────────┴────────────────────┴────────────┘

                 ](finalSumm:r:a, finalNumberOfDocuments);
             else
                 [├──────────────┼────────────────────┼────────────┤
                  │ВСЕГО:        │####################│   #####    │
                  └──────────────┴────────────────────┴────────────┘

                 ](finalSumm:r, finalNumberOfDocuments);
             end;
          end;
    END;

    resultsListSize = aggregates.size;


    if (parametersOfReport.m_needPackItog)

        if (parametersOfReport.m_needEveryDayPrinting)
            printResultHeader(chapter, resultDate, TRUE);
        else
            printResultHeader(chapter, parametersOfReport.m_periodEndingDate, TRUE);
        end;

        while (i < resultsListSize)
            if   ((aggregates[i].m_packNumber != 0) or
                  (aggregates[i].m_packNumberOfDocuments != 0) or
                  (aggregates[i].m_packSumm != 0))
                printPackString(aggregates[i]);
            elif ((aggregates[i].m_operCode != 0) or
                  (aggregates[i].m_operNumberOfDocuments != 0) or
                  (aggregates[i].m_operSumm != 0))
                printOperString (aggregates[i], TRUE);
            elif ((aggregates[i].m_currencyNumberOfDocuments != 0) or
                  (aggregates[i].m_currencySumm != 0))
                printFinalResult(aggregates[i], TRUE);
            end;

            i = i + 1;
        end;
    else
        if (parametersOfReport.m_needEveryDayPrinting)
            printResultHeader(chapter, resultDate, FALSE);
        else
            printResultHeader(chapter, parametersOfReport.m_periodEndingDate, FALSE);
        end;

        while (i < resultsListSize)
            if ((aggregates[i].m_operCode != 0) or
                (aggregates[i].m_operNumberOfDocuments != 0) or
                (aggregates[i].m_operSumm != 0))
                printOperString (aggregates[i], FALSE);
            elif ((aggregates[i].m_currencyNumberOfDocuments != 0) or
                  (aggregates[i].m_currencySumm != 0))
                printFinalResult(aggregates[i], FALSE);
            end;

            i = i + 1;
        end;
    end;
END;

MACRO printTableWithForeignResults (parametersOfReport:TReportParameters, aggregates:TArray, resultDate, chapter)
    var resultsListSize;
    var i;
    var wasOperResultForOneCurrency = FALSE;
    var wasOperString               = FALSE;

    MACRO printResultHeader(chapterNumber, dateForPrinting, needPackSort)
        var resultDate;
        var resultTime;
        var resultWidth;
        var resultShift = 0;

        if (parametersOfReport.m_needNationalCurrencyEquivalent)
            resultWidth =  90;
        else
            resultWidth =  64;
        end;

        dtTmSplit (dateForPrinting, resultDate, resultTime);

        printLn();
        printLn();
        printLn(mkStr(" ",resultShift) + strAlign("СПРАВКА О ПРОВЕДЕННЫХ ДОКУМЕНТАХ",resultWidth, STR_ALIGN_CENTER));
        printLn(mkStr(" ",resultShift) + strAlign(string("по главе " + НазваниеГлавы(chapterNumber)), resultWidth, STR_ALIGN_CENTER));
        printLn(mkStr(" ",resultShift) + strAlign(string("за " + string(resultDate:f)), resultWidth, STR_ALIGN_CENTER));
        if (needPackSort)
            if (parametersOfReport.m_needNationalCurrencyEquivalent)
               [┌────────────┬─────┬──────┬──────────┬─────────────────────────┬─────────────────────────┐
                │Операционист│Пачка│Валюта│Количество│          Сумма          │      Сумма покрытия     │
                │            │     │      │документов│                         │           (руб.)        │
                ├────────────┼─────┼──────┼──────────┼─────────────────────────┼─────────────────────────┤
               ];
            else
               [┌────────────┬─────┬──────┬──────────┬─────────────────────────┐
                │Операционист│Пачка│Валюта│Количество│          Сумма          │
                │            │     │      │документов│                         │
                ├────────────┼─────┼──────┼──────────┼─────────────────────────┤
               ];
            end;
        else
            if (parametersOfReport.m_needNationalCurrencyEquivalent)
               [┌──────────────────┬──────┬──────────┬─────────────────────────┬─────────────────────────┐
                │  Операционист    │Валюта│Количество│          Сумма          │      Сумма покрытия     │
                │                  │      │документов│                         │           (руб.)        │
                ├──────────────────┼──────┼──────────┼─────────────────────────┼─────────────────────────┤
               ];
            else
               [┌──────────────────┬──────┬──────────┬─────────────────────────┐
                │  Операционист    │Валюта│Количество│          Сумма          │
                │                  │      │документов│                         │
                ├──────────────────┼──────┼──────────┼─────────────────────────┤
               ];
            end;
      end;
    END;

    MACRO printPackString (aggregatesData:TReportAggregates)
        var currencyCode;
        var i;
        var equivalentSumm = numeric(aggregatesData.m_packCoveringSumm);

        getCurrencyNumber(aggregatesData.m_currencyCode, currencyCode);

        if (parametersOfReport.m_needNationalCurrencyEquivalent)
           if (parametersOfReport.m_needApostrophies)
               [│    ####    │#####│ ###  │ ######## │#########################│#########################│
               ](aggregatesData.m_operCode,
                 aggregatesData.m_packNumber,
                 currencyCode,
                 aggregatesData.m_documentsNumberInOneCurrency,
                 aggregatesData.m_packSumm:r:a,
                 equivalentSumm:r:a);
           else
               [│    ####    │#####│ ###  │ ######## │#########################│#########################│
               ](aggregatesData.m_operCode,
                 aggregatesData.m_packNumber,
                 currencyCode,
                 aggregatesData.m_documentsNumberInOneCurrency,
                 aggregatesData.m_packSumm:r,
                 equivalentSumm:r);
           end;
        else
           if (parametersOfReport.m_needApostrophies)
               [│    ####    │#####│ ###  │ ######## │#########################│
               ](aggregatesData.m_operCode,
                 aggregatesData.m_packNumber,
                 currencyCode,
                 aggregatesData.m_documentsNumberInOneCurrency,
                 aggregatesData.m_packSumm:r:a);
           else
               [│    ####    │#####│ ###  │ ######## │#########################│
               ](aggregatesData.m_operCode,
                 aggregatesData.m_packNumber,
                 currencyCode,
                 aggregatesData.m_documentsNumberInOneCurrency,
                 aggregatesData.m_packSumm:r);
           end;
        end;
    END;

    MACRO printOperString (aggregatesData:TReportAggregates)
        var equivalentSumm = numeric(aggregatesData.m_operCoveringSumm);

        if (parametersOfReport.m_needPackItog)
            if (parametersOfReport.m_needNationalCurrencyEquivalent)
                if (parametersOfReport.m_needApostrophies)
                    [├────────────┴─────┼──────┼──────────┼─────────────────────────┼─────────────────────────┤
                     │ Опер.            │      │ ######## │                         │#########################│
                     │ ####             │      │          │                         │                         │
                     ├──────────────────┼──────┼──────────┼─────────────────────────┼─────────────────────────┤
                    ](aggregatesData.m_operNumberOfDocuments, equivalentSumm:r:a, aggregatesData.m_operCode);
                else
                    [├────────────┴─────┼──────┼──────────┼─────────────────────────┼─────────────────────────┤
                     │ Опер.            │      │ ######## │                         │#########################│
                     │ ####             │      │          │                         │                         │
                     ├──────────────────┼──────┼──────────┼─────────────────────────┼─────────────────────────┤
                    ](aggregatesData.m_operNumberOfDocuments, equivalentSumm:r, aggregatesData.m_operCode);
                end;
            else
                [├────────────┴─────┼──────┼──────────┼─────────────────────────┤
                 │ Опер.            │      │ ######## │                         │
                 │ ####             │      │          │                         │
                 ├──────────────────┼──────┼──────────┼─────────────────────────┤
                ](aggregatesData.m_operNumberOfDocuments, aggregatesData.m_operCode);
            end;
        else
            if (parametersOfReport.m_needNationalCurrencyEquivalent)
                if (parametersOfReport.m_needApostrophies)
                    [│    ####          │      │ ######## │                         │#########################│
                    ](aggregatesData.m_operCode, aggregatesData.m_operNumberOfDocuments, equivalentSumm:r:a);
                else
                    [│    ####          │      │ ######## │                         │#########################│
                    ](aggregatesData.m_operCode, aggregatesData.m_operNumberOfDocuments, equivalentSumm:r);
                end;
            else
                [│    ####          │      │ ######## │                         │
                ](aggregatesData.m_operCode, aggregatesData.m_operNumberOfDocuments);
            end;
        end;
    END;

    MACRO printOperStringForOneCurrency(aggregatesData:TReportAggregates)
        var currencyCode;
        var equivalentSumm = numeric(aggregatesData.m_operCoveringSummInOneCurrency);
        getCurrencyNumber(aggregatesData.m_currencyCode, currencyCode);

        if (parametersOfReport.m_needNationalCurrencyEquivalent)
            if (parametersOfReport.m_needApostrophies)
                [│                  │ ###  │ ######## │#########################│#########################│
                ](currencyCode,
                  aggregatesData.m_operDocumentsNumberInOneCurrency,
                  aggregatesData.m_operSumm:r:a,
                  equivalentSumm:r:a);
            else
                [│                  │ ###  │ ######## │#########################│#########################│
                ](currencyCode,
                  aggregatesData.m_operDocumentsNumberInOneCurrency,
                  aggregatesData.m_operSumm:r,
                  equivalentSumm:r);
            end;
        else
            if (parametersOfReport.m_needApostrophies)
                [│                  │ ###  │ ######## │#########################│
                ](currencyCode,
                  aggregatesData.m_operDocumentsNumberInOneCurrency,
                  aggregatesData.m_operSumm:r:a);
            else
                [│                  │ ###  │ ######## │#########################│
                ](currencyCode,
                  aggregatesData.m_operDocumentsNumberInOneCurrency,
                  aggregatesData.m_operSumm:r);
            end;
        end;
    END;

    MACRO printSeparateLineIfPack(isEquivalent)
        if (isEquivalent)
            [├────────────┬─────┼──────┼──────────┼─────────────────────────┼─────────────────────────┤];
        else
            [├────────────┬─────┼──────┼──────────┼─────────────────────────┤];
        end;
    END;

    MACRO printSeparateLine(isEquivalent)
        if (isEquivalent)
            [├──────────────────┼──────┼──────────┼─────────────────────────┼─────────────────────────┤];
        else
            [├──────────────────┼──────┼──────────┼─────────────────────────┤];
        end;
    END;

    MACRO finishTable(isEquivalent)
        if (isEquivalent)
            [└──────────────────┴──────┴──────────┴─────────────────────────┴─────────────────────────┘];
        else
            [└──────────────────┴──────┴──────────┴─────────────────────────┘];
        end;
    END;

    MACRO printResults (aggregatesData:TReportAggregates)
        var equivalentSumm = numeric(aggregatesData.m_finalEquivalentSumm);

        if (parametersOfReport.m_needNationalCurrencyEquivalent)
            if (parametersOfReport.m_needApostrophies)
                [ Всего документов:          ########                            #########################
                ](aggregatesData.m_finalNumberOfDocuments, equivalentSumm:r:a);
            else
                [ Всего документов:          ########                            #########################
                ](aggregatesData.m_finalNumberOfDocuments, equivalentSumm:r);
            end;
        else
            [   Всего документов:          ########
            ] (aggregatesData.m_finalNumberOfDocuments);
        end;
    END;

    MACRO printResultsForOneCurrency(aggregatesData:TReportAggregates)
        var currencyCode;
        var equivalentSumm = numeric(aggregatesData.m_currencyCoveringSumm);

        getCurrencyNumber(aggregatesData.m_currencyCode, currencyCode);

        if (parametersOfReport.m_needNationalCurrencyEquivalent)
            if (parametersOfReport.m_needApostrophies)
                [        по валюте:  ###               ######################### #########################
                ](currencyCode, aggregatesData.m_currencySumm:r:a, equivalentSumm:r:a);
            else
                [        по валюте:  ###               ######################### #########################
                ](currencyCode, aggregatesData.m_currencySumm:r, equivalentSumm:r);
            end;
        else
            if (parametersOfReport.m_needApostrophies)
                [        по валюте:  ###               #########################
                ](currencyCode, aggregatesData.m_currencySumm:r:a);
            else
                [        по валюте:  ###               #########################
                ](currencyCode, aggregatesData.m_currencySumm:r);
            end;
        end;
    END;
    resultsListSize = aggregates.size;

    if (parametersOfReport.m_needNationalCurrencyEquivalent)
        if (parametersOfReport.m_needPackItog)

            if (parametersOfReport.m_needEveryDayPrinting)
                printResultHeader(chapter, resultDate, TRUE);
            else
                printResultHeader(chapter, parametersOfReport.m_periodEndingDate, TRUE);
            end;

            i = 0;
            while (i < resultsListSize)
                if   ((aggregates[i].m_packNumber                   != 0) or
                      (aggregates[i].m_packSumm                     != 0) or
                      (aggregates[i].m_documentsNumberInOneCurrency != 0) or
                      (aggregates[i].m_packCoveringSumm             != 0))
                    if (wasOperResultForOneCurrency)
                       printSeparateLineIfPack(TRUE);
                       printPackString(aggregates[i]);
                    else
                       printPackString(aggregates[i]);
                    end;
                    wasOperResultForOneCurrency = FALSE;
                elif ((aggregates[i].m_operNumberOfDocuments != 0) or
                      (aggregates[i].m_operCoveringSumm      != 0))
                    printOperString (aggregates[i]);
                elif ((aggregates[i].m_operSumm                         != 0) or
                      (aggregates[i].m_operDocumentsNumberInOneCurrency != 0) or
                      (aggregates[i].m_operCoveringSummInOneCurrency    != 0))
                    printOperStringForOneCurrency(aggregates[i]);
                    wasOperResultForOneCurrency = TRUE;
                elif ((aggregates[i].m_finalNumberOfDocuments != 0) or
                      (aggregates[i].m_finalEquivalentSumm    != 0))
                    finishTable(TRUE);
                    printResults (aggregates[i]);
                elif ((aggregates[i].m_currencySumm         != 0) or
                      (aggregates[i].m_currencyCoveringSumm != 0))
                    printResultsForOneCurrency(aggregates[i]);
                end;
                i = i + 1;
            end;
        else
            if (parametersOfReport.m_needEveryDayPrinting)
                printResultHeader(chapter, resultDate, FALSE);
            else
                printResultHeader(chapter, parametersOfReport.m_periodEndingDate, FALSE);
            end;

            i = 0;
            while (i < resultsListSize)
                if ((aggregates[i].m_operNumberOfDocuments         != 0) or
                    (aggregates[i].m_operCoveringSumm              != 0))
                    if (wasOperResultForOneCurrency)
                        printSeparateLine(TRUE);
                        printOperString (aggregates[i]);
                    else
                        printOperString (aggregates[i]);
                    end;
                    wasOperResultForOneCurrency = FALSE;
                    wasOperString = TRUE;
                elif  ((aggregates[i].m_operSumm                        != 0) or
                      (aggregates[i].m_operDocumentsNumberInOneCurrency != 0) or
                      (aggregates[i].m_operCoveringSummInOneCurrency    != 0))
                    if (wasOperString)
                        printSeparateLine(TRUE);
                        printOperStringForOneCurrency(aggregates[i]);
                    else
                        printOperStringForOneCurrency(aggregates[i]);
                    end;
                    wasOperResultForOneCurrency = TRUE;
                    wasOperString = FALSE;
                elif ((aggregates[i].m_finalNumberOfDocuments != 0) or
                      (aggregates[i].m_finalEquivalentSumm    != 0))
                    finishTable(TRUE);
                    printResults (aggregates[i]);
                elif ((aggregates[i].m_currencySumm != 0) or
                      (aggregates[i].m_currencyCoveringSumm != 0))
                    printResultsForOneCurrency(aggregates[i]);
                end;
                i = i + 1;
            end;
        end;
    else
        if (parametersOfReport.m_needPackItog)

            if (parametersOfReport.m_needEveryDayPrinting)
                printResultHeader(chapter, resultDate, TRUE);
            else
                printResultHeader(chapter, parametersOfReport.m_periodEndingDate, TRUE);
            end;

            i = 0;
            while (i < resultsListSize)
                if   ((aggregates[i].m_packNumber                   != 0) or
                      (aggregates[i].m_packSumm                     != 0) or
                      (aggregates[i].m_documentsNumberInOneCurrency != 0))
                    if (wasOperResultForOneCurrency)
                       printSeparateLineIfPack(FALSE);
                       printPackString(aggregates[i]);
                    else
                       printPackString(aggregates[i]);
                    end;
                    wasOperResultForOneCurrency = FALSE;
                elif (aggregates[i].m_operNumberOfDocuments != 0)
                    printOperString (aggregates[i]);
                elif ((aggregates[i].m_operSumm                         != 0) or
                      (aggregates[i].m_operDocumentsNumberInOneCurrency != 0))
                    printOperStringForOneCurrency(aggregates[i]);
                    wasOperResultForOneCurrency = TRUE;
                elif (aggregates[i].m_finalNumberOfDocuments != 0)
                    finishTable(FALSE);
                    printResults (aggregates[i]);
                elif (aggregates[i].m_currencySumm != 0)
                    printResultsForOneCurrency(aggregates[i]);
                end;

                i = i + 1;
            end;
        else
            if (parametersOfReport.m_needEveryDayPrinting)
                printResultHeader(chapter, resultDate, FALSE);
            else
                printResultHeader(chapter, parametersOfReport.m_periodEndingDate, FALSE);
            end;

            i = 0;
            while (i < resultsListSize)
                if (aggregates[i].m_operNumberOfDocuments != 0)
                    if (wasOperResultForOneCurrency)
                        printSeparateLine();
                        printOperString (aggregates[i]);
                    else
                        printOperString (aggregates[i]);
                    end;
                    wasOperResultForOneCurrency = FALSE;
                    wasOperString = TRUE;
                elif  ((aggregates[i].m_operSumm                        != 0) or
                      (aggregates[i].m_operDocumentsNumberInOneCurrency != 0))
                    if (wasOperString)
                        printSeparateLine();
                        printOperStringForOneCurrency(aggregates[i]);
                    else
                        printOperStringForOneCurrency(aggregates[i]);
                    end;
                    wasOperResultForOneCurrency = TRUE;
                    wasOperString = FALSE;
                elif (aggregates[i].m_finalNumberOfDocuments != 0)
                    finishTable(FALSE);
                    printResults (aggregates[i]);
                elif (aggregates[i].m_currencySumm != 0)
                    printResultsForOneCurrency(aggregates[i]);
                end;
                i = i + 1;
            end;
        end;
    end;
END;

/*Выбираем имена таблиц в зависимости от того, нац. или ин. валюта задана*/
MACRO setTableName(carryTableName, accountTableName, isForeignCurrency)
//06.08.2014 I-00506908-2 dpn 
 //   if (isForeignCurrency) 
 //dpn
        setParm(0,"dacctrn_dbt");
        setParm(1,"daccount_dbt");
   // else
   //     setParm(0,"darhdoc_dbt");
   //     setParm(1,"daccount_dbt");
  //  end;
END;

/**
 * Формирование текста SQL-запроса для выборки данных по национальной или иностранной валюте
 */
private macro makeCarryQuery(parameters: TReportParameters, isCurrency)

    var needSystemMaketSort;
    var carryTable = "";
    var accountTable = "";
    var query = "";
    var i;

    var numb_document = ternary(parameters.m_paymentsData, "CASE "
                                                 + "\n" + "     WHEN doc.t_chapter != 3 AND (doc.t_result_carry NOT IN (18, 82, 83, 84))"
                                                 + "\n" + "        THEN                                            "
                                                 + "\n" + "            NVL(pmrmprop.t_number, doc.t_numb_document) "
                                                 + "\n" + "        ELSE                                            "
                                                 + "\n" + "            doc.t_numb_document                         "
                                                 + "\n" + " END",
                                                 "doc.t_numb_document");

    var date_document = ternary(parameters.m_paymentsData, "CASE "
                                                 + "\n" + "     WHEN doc.t_chapter != 3 AND (doc.t_result_carry NOT IN (18, 82, 83, 84))"
                                                 + "\n" + "        THEN                                            "
                                                 + "\n" + "            NVL(pmrmprop.t_date, doc.t_date_carry)    "
                                                 + "\n" + "        ELSE                                            "
                                                 + "\n" + "            doc.t_date_carry                            "
                                                 + "\n" + " END",
                                                 "doc.t_date_carry");


    var shifr_oper = ternary(parameters.m_paymentsData, "CASE "
                                                 + "\n" + "     WHEN doc.t_chapter != 3 AND (doc.t_result_carry NOT IN (18, 82, 83, 84))"
                                                 + "\n" + "        THEN                                             "
                                                 + "\n" + "            NVL(pmrmprop.t_shifrOper, doc.t_shifr_oper)  "
                                                 + "\n" + "        ELSE                                             "
                                                 + "\n" + "            doc.t_shifr_oper                             "
                                                 + "\n" + " END",
                                                 "doc.t_shifr_oper");

    var receiverBankCode =         "CASE"
                          + "\n" + "    WHEN pmprop_credit.t_bankCode IS NOT NULL"
                          + "\n" + "    THEN DECODE(pmprop_credit.t_codeKind,"
                          + "\n" + "            " + PTCK_BIC + ","
                          + "\n" + "                pmprop_credit.t_bankCode,"
                          + "\n" + "                CHR(1)"
                          + "\n" + "               )"
                          + "\n" + "    ELSE rsb_rep_pt.get_partyCode(" + PTCK_BIC + ","
                          + "\n" + "                                  " + {OurBank} + ","
                          + "\n" + "                                  doc.t_date_carry,"
                          + "\n" + "                                  1"
                          + "\n" + "                                 )"
                          + "\n" + " END";

    var payerBankCode =         "CASE"
                       + "\n" + "    WHEN pmprop_debit.t_bankCode IS NOT NULL"
                       + "\n" + "    THEN DECODE(pmprop_debit.t_codeKind,"
                       + "\n" + "            " + PTCK_BIC + ","
                       + "\n" + "                pmprop_debit.t_bankCode,"
                       + "\n" + "                CHR(1)"
                       + "\n" + "               )"
                       + "\n" + "    ELSE rsb_rep_pt.get_partyCode(" + PTCK_BIC + ","
                       + "\n" + "                                  " + {OurBank} + ","
                       + "\n" + "                                  doc.t_date_carry,"
                       + "\n" + "                                  1"
                       + "\n" + "                                 )"
                       + "\n" + " END";

    var receiverAccount = ternary(parameters.m_paymentsData, "CASE "
                                                    + "\n" + "     WHEN doc.t_chapter != 3 AND (doc.t_result_carry NOT IN (18, 82, 83, 84))"
                                                    + "\n" + "         THEN                                                      "
                                                    + "\n" + "             NVL(pmpaym.t_receiverAccount, doc.t_account_receiver) "
                                                    + "\n" + "         ELSE                                                      "
                                                    + "\n" + "             doc.t_account_receiver                                "
                                                    + "\n" + "END",
                                                    "doc.t_account_receiver");

    var payerAccount = ternary(parameters.m_paymentsData, "   CASE "
                                                    + "\n" + "     WHEN doc.t_chapter != 3 AND (doc.t_result_carry NOT IN (18, 82, 83, 84))"
                                                    + "\n" + "         THEN                                                      "
                                                    + "\n" + "             NVL(pmpaym.t_payerAccount, doc.t_account_payer)       "
                                                    + "\n" + "         ELSE                                                      "
                                                    + "\n" + "             doc.t_account_payer                                   "
                                                    + "\n" + "END",
                                                    "doc.t_account_payer");

    var code_currency = "doc.T_FIID_PAYER"; 
    
    //06.08.2014 I-00506908-2 dpn
    var receiverAmount = ternary(parameters.m_paymentsData, "CASE WHEN doc.T_FIID_PAYER != doc.T_FIID_RECEIVER  "// AND (doc.t_connAppKind NOT IN(18,82,83,84))" //dpn
                                                                "     THEN doc.T_SUM_RECEIVER "
                                                                "     ELSE NVL(pmpaym.t_payAmount, doc.T_SUM_RECEIVER)"
                                                            "END ", "doc.T_SUM_RECEIVER");

    var payerAmount = ternary(parameters.m_paymentsData, "CASE WHEN doc.T_FIID_PAYER != doc.T_FIID_RECEIVER " + //dpn
                                                                " THEN doc.T_SUM_payer "
                                                                " ELSE NVL(pmpaym.t_payAmount, doc.T_SUM_PAYER)"
                                                            "END ", "doc.T_SUM_PAYER");

    var receiverFiId = ternary(parameters.m_paymentsData, "   CASE "
                                                    + "\n" + "     WHEN doc.t_chapter != 3 AND (doc.t_result_carry NOT IN (18, 82, 83, 84))"
                                                    + "\n" + "         THEN                                                      "
                                                    + "\n" + "             NVL(pmpaym.t_payFiId, doc.T_FIID_RECEIVER)            " //dpn
                                                    + "\n" + "         ELSE                                                      "
                                                    + "\n" + "             doc.T_FIID_RECEIVER                                   " //dpn
                                                    + "\n" + "END",
                                                    "doc.T_FIID_RECEIVER");

    var payerFiId = ternary(parameters.m_paymentsData, "      CASE "
                                                    + "\n" + "     WHEN doc.t_chapter != 3 AND (doc.t_result_carry NOT IN (18, 82, 83, 84))"
                                                    + "\n" + "         THEN                                                      "
                                                    + "\n" + "             NVL(pmpaym.t_fiId, doc.T_FIID_PAYER)               " //dpn
                                                    + "\n" + "         ELSE                                                      "
                                                    + "\n" + "             doc.T_FIID_PAYER                                   " //dpn
                                                    + "\n" + "END",
                                                    "doc.T_FIID_PAYER");

    var paymentIdNotNull = ternary(parameters.m_paymentsData,"CASE "
                                                    + "\n" + "     WHEN doc.t_chapter != 3 AND (doc.t_result_carry NOT IN (18, 82, 83, 84))"
                                                    + "\n" + "         THEN                                                      "
                                                    + "\n" + "             NVL(pmpaym.t_paymentId, 0)                                 "
                                                    + "\n" + "         ELSE                                                      "
                                                    + "\n" + "             0                                                     "
                                                    + "\n" + "END",
                                                    "0");

    macro makeEquivalentSumClause(isDebit, needPayment)
        var accountField = ternary(isDebit, "t_account_payer", "t_account_receiver");
        var clause;

//06.08.2014 I-00506908-2 dpn
        if (isCurrency)
            clause =   "NVL("
              + "\n" + "    (CASE"
              + "\n" + "         WHEN    doc.T_FIID_PAYER != " + NATCUR //dpn
              + "\n" + "         and    doc.T_FIID_RECEIVER != " + NATCUR
              + "\n" + "             AND doc.T_FIID_PAYER = doc.T_FIID_RECEIVER " //dpn
              + "\n" + "         THEN (SELECT SUM(eq.T_SUM_NATCUR)" //dpn
              + "\n" + "                 FROM dacctrn_dbt eq"  //dpn
              + "\n" + "                WHERE eq.T_ACCTRNID = doc.T_ACCTRNID"
              + "\n" + "              )"
              + "\n" + "         WHEN doc.T_FIID_PAYER != doc.T_FIID_RECEIVER "
              + "\n" + "         THEN (SELECT SUM(eq.T_SUM_NATCUR)"
              + "\n" + "                 FROM daccount_dbt ac,"
              + "\n" + "                      dacctrn_dbt eq";
            /*  if (needPayment)
                  clause = clause + ", dmultycar_dbt mc";
              end;*/
              clause = clause //dpn
              + "\n" + "                WHERE ac.t_chapter = doc.t_chapter"
              + "\n" + "                  AND ac.t_code_currency = doc.T_FIID_PAYER"
              + "\n" + "                  AND ac.t_account = doc." + accountField
              + "\n" + "                  AND eq.T_ACCTRNID = doc.T_ACCTRNID";
          //    + "\n" + "                  AND eq.t_connAppKey = doc.t_connAppKey" //dpn
          //    + "\n" + "                  AND eq.t_chapter = doc.t_chapter";
              if (needPayment)
                  clause = clause
             //     + "\n" + "              AND mc.T_ACCTRNID= doc.T_ACCTRNID " //dpn
                //  + "\n" + "              AND mc.t_applicationkey = doc.t_connAppKey "
               //   + "\n" + "              AND mc.t_chapter = doc.t_chapter "
              //    + "\n" + "              AND eq." + accountField
               //   + "\n" + "                   = mc." + ternary(isDebit, "t_account_from", "t_account_to");
              else
                  clause = clause; //dpn
              //    + "\n" + "              AND eq." + accountField + " = ac.t_connect_account";
              end;
              clause = clause
              + "\n" + "                  AND eq.t_result_carry NOT IN (18,82,83,84)"
              + "\n" + "              )"
              + "\n" + "      END"
              + "\n" + "    ), 0"
              + "\n" + "   )";
        else
            clause = "0";
        end;

        return clause;
    end;

    macro makeCoverCarryNumberClause(isDebit)
        var accountField = ternary(isDebit, "t_account_payer", "t_account_receiver");
        var clause;

//06.08.2014 I-00506908-2 dpn
        if (isCurrency)  //dpn
            clause =   "NVL("
              + "\n" + "    (CASE"
              + "\n" + "         WHEN    doc.T_FIID_PAYER != " + NATCUR //dpn
              + "\n" + "        and    doc.T_FIID_RECEIVER != " + NATCUR
              + "\n" + "             AND doc.T_FIID_PAYER = doc.T_FIID_RECEIVER " 
              + "\n" + "         THEN (SELECT count(eq.T_ACCTRNID)"
              + "\n" + "                 FROM dacctrn_dbt eq"
              + "\n" + "                WHERE eq.T_ACCTRNID = doc.T_ACCTRNID"
             // + "\n" + "                  AND eq.t_connAppKey = doc.t_applicationKey"
              + "\n" + "              )"
              + "\n" + "         WHEN doc.T_FIID_PAYER != doc.T_FIID_RECEIVER " 
              + "\n" + "         THEN (SELECT count(eq.T_ACCTRNID)"
              + "\n" + "                 FROM daccount_dbt ac,"
              + "\n" + "                      dacctrn_dbt eq"
              + "\n" + "                WHERE ac.t_chapter = doc.t_chapter"
              + "\n" + "                  AND (ac.t_code_currency = doc.T_FIID_PAYER"
              + "\n" + "                       or ac.t_code_currency = doc.T_FIID_RECEIVER)"
              + "\n" + "                  AND ac.t_code_currency != 0"
              + "\n" + "                  AND ac.t_account = doc." + accountField
              + "\n" + "                  AND eq.T_ACCTRNID = doc.T_ACCTRNID"
            //  + "\n" + "                  AND eq.t_connAppKey = doc.t_connAppKey"
              + "\n" + "                  AND eq.t_chapter = doc.t_chapter"
           //   + "\n" + "                  AND eq." + accountField +" = ac.t_Connect_Account" dpn
              + "\n" + "                  AND eq.t_result_carry NOT IN (18,82,83,84)"
              + "\n" + "              )"
              + "\n" + "      END"
              + "\n" + "    ), 0"
              + "\n" + "   )";
        else
            clause = "0";
        end;

        return clause;
    end;

    setTableName(carryTable, accountTable, isCurrency);

    needSystemMaketSort = false;
    i = 0;
    while (i < parameters.m_sortingKind.size) /*по каждому заданному виду сортировки*/
      if (parameters.m_sortingKind[i] == REP_PATTERNSORT_SYSTEM_MAKET)
        needSystemMaketSort = true;
        break;
      end;
      i = i +1;
    end;

    query =      "SELECT " + numb_document + "                AS t_numb_document,"
        + "\n" + "       " + date_document + "                AS t_date_document,"
        + "\n" + "       " + shifr_oper + "                   AS t_shifr_oper,"
        + "\n" + "       " + receiverBankCode + "             AS t_receiverBankCodeNotNull,"
        + "\n" + "       " + receiverAccount + "              AS t_receiverAccount,"
        + "\n" + "       " + payerBankCode + "                AS t_payerBankCodeNotNull,"
        + "\n" + "       " + payerAccount + "                 AS t_payerAccount,"
        + "\n" + "       " + code_currency + "                AS t_code_currency,"
        + "\n" + "       " + receiverAmount + "               AS t_receiverAmount,"
        + "\n" + "       " + payerAmount + "                  AS t_payerAmount,"
        + "\n" + "       " + receiverFiId + "                 AS t_receiverFiId,"
        + "\n" + "       " + payerFiId + "                    AS t_payerFiId,"
        + "\n" + "       " + paymentIdNotNull + "             AS t_paymentIdNotNull,"
        + "\n" + "  CASE WHEN doc.T_SUM_PAYER = 0 "         //09.10.2014 R-466898-1 dpn 
        + "\n" + "       THEN DOC.T_SUM_RECEIVER "
        + "\n" + "       ELSE doc.T_SUM_PAYER "
        + "\n" + "  END                                       AS t_docsum," //06.08.2014 I-00506908-2 dpn
        + "\n" + " DOC.T_SUM_NATCUR                 as natcur, " //09.10.2014 R-466898-1 dpn 
        + "\n" + "       doc.t_result_carry                   AS t_result_carry,"
        + "\n" + "       doc.t_oper                           AS t_docoper,"
        + "\n" + "       doc.t_chapter                        AS t_docchapter,"
        + "\n" + "       doc.t_date_carry                     AS t_docdate_carry,"
        + "\n" + "       doc.t_number_pack                    AS t_docnumber_pack"; //06.08.2014 I-00506908-2 dpn
    //    + "\n" + "       doc.t_connAppKind                    AS t_docconnAppKind";

    if (useProtocol)
        query = query + ","
        + "\n" + "       doc.T_ACCTRNID                 AS t_docapplicationKey,"
      //  + "\n" + "       doc.t_iApplicationKind               AS t_dociApplicationKind," //06.08.2014 I-00506908-2 dpn
       // + "\n" + "       doc.t_code_currency                  AS t_doccode_currency,"
        + "\n" + "       doc.t_numb_document                  AS t_docnumb_document,"
        + "\n" + "       doc.t_account_payer                  AS t_docaccount_payer,"
        + "\n" + "       doc.t_account_receiver               AS t_docaccount_receiver";
    end;

    if (needSystemMaketSort)


/*MX*/
  if (fgBank.is_go )
        query = query + ","

          "  CASE SUBSTR (accp.t_Account, 1, 3) "+
          "    WHEN '706' "+
          "    THEN "+
          "       CONCAT(CONCAT (SUBSTR (accp.t_account, 1, 8), '0000'), SUBSTR (accp.t_account, 14)) "+
          "    ELSE "+
          "       CONCAT(CONCAT (SUBSTR (accp.t_account, 1, 8), '000000'), SUBSTR (accp.t_account, 16)) "+
          " END "+
          "    Sort ";

  else
        query = query + ","
        + "\n" + "     accp.t_sort                             AS t_systemMaketSort";

  end;

    end;

    // Если нужно покрытие, то получаем суммы покрытия и данные о количестве проводок покрытия для протокола
    if (parameters.m_needNationalCurrencyEquivalent)
    
    //06.08.2014 I-00506908-2 dpn
     /*   if (isCurrency)
            query = query + ","
        + "\n" + "     NVL(multycar.t_carryid, 0)             AS t_carryIdNotNull";
        else
            query = query + ","
        + "\n" + "     0                                      AS t_carryIdNotNull";
        end;*/ 

        query = query + ","
        + "\n" + " " + makeEquivalentSumClause(TRUE, parameters.m_paymentsData) + "      AS t_equivalentDebitSumm,"
        + "\n" + " " + makeEquivalentSumClause(FALSE, parameters.m_paymentsData) + "     AS t_equivalentCreditSumm";

    if (useProtocol)
        query = query + ","
        + "\n" + " " + makeCoverCarryNumberClause(TRUE) + "   AS t_debitCarriesNumber,"
        + "\n" + " " + makeCoverCarryNumberClause(FALSE) + "  AS t_creditCarriesNumber";
    end;

    end;

    /*Добавляем поля с групами операционистов*/
    if (parameters.m_needGroupSplit)
        query = query + ","
        + "\n" + "    NVL(grp.t_groupid, -1)                  AS t_groupId,"
        + "\n" + "    grp.t_groupid                           AS t_groupIdNull";
    end;

    query = query
        + "\n" + "  FROM " + carryTable + " doc"
        + "\n" + " LEFT OUTER JOIN " + accountTable + " accp"
        + "\n" + "    ON accp.t_chapter = doc.t_chapter"
        + "\n" + "   AND accp.t_account = doc.t_account_payer"
        + "\n" + " LEFT OUTER JOIN " + accountTable + " accr"
        + "\n" + "    ON accr.t_chapter = doc.t_chapter"
        + "\n" + "   AND accr.t_account = doc.t_account_receiver";

    if (isCurrency)
        query = query
        + "\n" + "   AND accp.t_code_currency = DOC.T_FIID_PAYER" //06.08.2014 I-00506908-2 dpn
        + "\n" + "   AND accr.t_code_currency =  DOC.T_FIID_RECEIVER"; //06.08.2014 I-00506908-2 dpn
    end;

    if (parameters.m_needGroupSplit)
        query = query
        + "\n" + "  LEFT OUTER JOIN dacsgroupoper_dbt grp"
        + "\n" + "               ON doc.t_oper = grp.t_oper";
    end;

    // dpn
   /* query = query
        + "\n" + "  LEFT OUTER JOIN dmultycar_dbt multycar"
        + "\n" + "               ON doc.t_connAppKind = multycar.t_iApplicationKind"
        + "\n" + "              AND doc.t_connAppKey  = multycar.t_ApplicationKey";*/

    if (not useProtocol and not parameters.m_paymentsData)
        query = query
        + "\n" + "  LEFT OUTER JOIN dpmdocs_dbt pmdocs"
        + "\n" + "               ON DOC.T_ACCTRNID = PMDOCS.T_ACCTRNID"   //06.08.2014 I-00506908-2 dpn
      //  + "\n" + "              AND 1 = pmdocs.t_linkKindId"           //06.08.2014 I-00506908-2 dpn 
        + "\n" + "  LEFT OUTER JOIN dpmprop_dbt pmprop_debit"
        + "\n" + "               ON pmdocs.t_paymentId = pmprop_debit.t_paymentId"
        + "\n" + "              AND 0 = pmprop_debit.t_debetCredit"
        + "\n" + "  LEFT OUTER JOIN dpmprop_dbt pmprop_credit"
        + "\n" + "               ON pmdocs.t_paymentId = pmprop_credit.t_paymentId"
        + "\n" + "              AND 1 = pmprop_credit.t_debetCredit";
    end;

    if (useProtocol or parameters.m_paymentsData)
        query = query
        + "\n" + "  LEFT OUTER JOIN dpmdocs_dbt pmdocs"   //06.08.2014 I-00506908-2 dpn
        + "\n" + "               ON DOC.T_ACCTRNID = PMDOCS.T_ACCTRNID"
     //   + "\n" + "              AND 1 = pmdocs.t_linkKindId"
        + "\n" + "  LEFT OUTER JOIN dpmpaym_dbt pmpaym"
        + "\n" + "               ON pmdocs.t_paymentId = pmpaym.t_paymentId"
        + "\n" + "  LEFT OUTER JOIN dpmprop_dbt pmprop_debit"
        + "\n" + "               ON pmpaym.t_paymentId = pmprop_debit.t_paymentId"
        + "\n" + "              AND 0 = pmprop_debit.t_debetCredit"
        + "\n" + "  LEFT OUTER JOIN dpmprop_dbt pmprop_credit"
        + "\n" + "               ON pmpaym.t_paymentId = pmprop_credit.t_paymentId"
        + "\n" + "              AND 1 = pmprop_credit.t_debetCredit"
    end;

    if (parameters.m_paymentsData)
        query = query
        + "\n" + "  LEFT OUTER JOIN dpmrmprop_dbt pmrmprop"
        + "\n" + "               ON pmpaym.t_paymentId = pmrmprop.t_paymentId";
    end;

    query = query
        + "\n" + " WHERE (" + parameters.m_accountFilter.getAsSqlString("accp")
        + "\n" + " OR     " + parameters.m_accountFilter.getAsSqlString("accr") + ")"

        + "\n" + "   AND (" + parameters.m_documentFilter.getAsSqlString("doc.t_department",
                                                                         "accp.t_branch",
                                                                         "accr.t_branch",
                                                                         PRIV_GET_ACCOUNT_DATA_FOR_REPORTS)
        + "\n" + "       )"

        + "\n" + "   AND doc.t_date_carry BETWEEN " + getSqlDate(parameters.m_periodBeginningDate)
        + "\n" + "                            AND " + getSqlDate(parameters.m_periodEndingDate)
        + "\n" + "   AND doc.t_result_carry != " + RUBCARRY;
  
  //06.08.2014 I-00506908-2 dpn
    if (not (isCurrency))
        query = query
        + "\n" + " and DOC.T_FIID_PAYER = 0 and DOC.T_FIID_RECEIVER = 0 "; //dpn 
    end;
 //09.10.2014 R-466898-1 dpn 
  /*  if (parameters.m_currencyCode == ALLCURRENCY)
        query = query
         + "\n" + " and DOC.T_FIID_PAYER != 0 and DOC.T_FIID_RECEIVER != 0 "; //dpn 
    end;*/
    
    if (parameters.m_chapterNumber != 0)
        query = query
        + "\n" + "   AND doc.t_chapter = " + parameters.m_chapterNumber;
    end;

    if ((parameters.m_operNumber != 0) AND (not parameters.m_needGroupSplit))
        query = query
        //AAN
       + "\n" + "   AND pmpaym.t_oper = " + parameters.m_operNumber;
/*       + "\n" + "   AND doc.t_oper = " + parameters.m_operNumber;*/
    end;

    if (parameters.m_packNumber != 0)
        query = query
         + "\n" + "   AND doc.t_number_pack = " + parameters.m_packNumber;
    end;
    if ((isCurrency) and (parameters.m_currencyCode > 0))
        query = query
         + "\n" + "   AND  DOC.T_FIID_PAYER = " + parameters.m_currencyCode; //06.08.2014 I-00506908-2 dpn
    end;

    if ((parameters.m_operNumber != 0) AND (parameters.m_needGroupSplit))
        query = query
         + "\n" + "   AND grp.t_groupid = " + parameters.m_operNumber;
    end;

    if (not parameters.m_needExchangeRateDiff)
        query = query
         + "\n" + "   AND doc.t_result_carry != 83";
    elif (isCurrency)
        query = query
        + "\n" + "   AND (doc.t_result_carry != 83 OR (doc.t_result_carry = 83))"// AND multycar.t_carryid > 0))"; //06.08.2014 I-00506908-2 dpn 
    end;
debugbreak;
    return query;
end;

private macro resultQuery(parameters: TReportParameters)
    var i;
    var query = "";
    if   (parameters.m_currencyCode == NATCUR)
        query = makeCarryQuery(parameters, FALSE);
    elif (parameters.m_currencyCode == ALLCURRENCY)
        query = makeCarryQuery(parameters, TRUE);
    elif (parameters.m_currencyCode == ALLFININSTR)
        query =      makeCarryQuery(parameters, true); //02.10.2014 I-00519517-2 DPN
          //  + "\n" + "UNION ALL"
         //   + "\n" + makeCarryQuery(parameters, TRUE);
    else
        query = makeCarryQuery(parameters, TRUE);
    end;

if (onlypack)
    query = query
    + "\n" + "ORDER BY t_docnumber_pack, T_PAYERACCOUNT, T_RECEIVERACCOUNT";
else
    query = query
      + "\n" + "ORDER BY t_docchapter"; //dpn

    if (parameters.m_needEveryDayPrinting)
        query = query + ","
          + "\n" + "     t_docdate_carry";
    end;

    if (parameters.m_needGroupSplit)
        query = query + ","
          + "\n" + "     t_groupIdNull NULLS LAST";
    end;

    query = query + ","
          + "\n" + "      t_docoper";

    if (parameters.m_needPackItog)
        query = query + ","
          + "\n" + "     t_docnumber_pack";
    end;

    /*заданная в панели сортировка*/
    i = 0;
    while (i < parameters.m_sortingKind.size)
        query = query + ", ";
        if (parameters.m_sortingKind[i] == REP_PATTERNSORT_SUM_DOCUMENT)
            query = query
            + "\n" + "   t_docsum";
        elif (parameters.m_sortingKind[i] == REP_PATTERNSORT_SYSTEM_MAKET)

/*MX*/

            if ( fgBank.is_go )
            query = query
            + "\n" + "   sort";
            else
            query = query
            + "\n" + "   t_systemMaketSort";
            end;

        end;
        i = i +1;
    end;

          if (fgBank.is_go )
            query = query
             + ", t_docsum";
          end;
end;
    return query;
end;

/*Печать отчета*/
MACRO printReport (parameters: TReportParameters);

    var width         = 83;
    var shift         = 0;
    var reportData;
    var isDataRecords = FALSE;
    var data;
    var dataRecord;

    var debitSummEquivalent    = 0;  /*текущая сумма покрытия по дебету для мультивалютной проводки*/
    var creditSummEquivalent   = 0;  /*текущая сумма покрытия по кредиту для мультивалютной проводки*/
    var wasRecordsOfCurrentMultyCarry = 0; /*количество рассмотренных записей */
                                                  /*по текущей мультивалютной проводке*/

    /*агрегирующие данные*/
    var numberOfOperDocuments   = 0; /*количество документов у операциониста*/
    var numberOfDocumentsInPack = 0; /*количество документов в пачке*/
    var summOfOperDocuments     = 0; /*итого по операционисту*/
    var summOfDocumentsInPack   = 0; /*итого по пачке*/
    var finalNumberOfDocuments  = 0; /*общее количество документов*/
    var finalSumm               = 0; /*общая сумма*/
    /*агрегирующие данные для валютного отчета*/
    var debitEquivalentSummInPack                = 0; /*сумма покрытия по дебету в пачке*/
    var creditEquivalentSummInPack               = 0; /*сумма покрытия по кредиту в пачке*/

    var debitEquivalentOperSumm                  = 0; /*сумма покрытия по дебету опера*/
    var creditEquivalentOperSumm                 = 0; /*сумма покрытия по кредиту опера*/

    var debitEquivalentFinalSumm                 = 0; /*итоговая сумма покрытия по дебету*/
    var creditEquivalentFinalSumm                = 0; /*итоговая сумма покрытия по кредиту*/
    var debitFinalSummForOneCurrency             = 0; /*итоговая сумма по дебету по одной валюте*/
    var creditFinalSummForOneCurrency            = 0; /*итоговая сумма по кредиту по одной валюте*/
    var debitFinalEquivalentSummForOneCurrency   = 0; /*итоговая сумма покрытия по дебету по одной валюте*/
    var creditFinalEquivalentSummForOneCurrency  = 0; /*итоговая сумма покрытия по кредиту по одной валюте*/

    var listOfReportAggregates = TArray; /*список агрегирующих данных*/
/*    var indexOfReportAggregates  = 0;    индекс в списке агрегирующих данных*/
    var currentReportAggregates;

    var listOfAggregatesInPack = TArray; /*список результатов по валютам в пачке*/
    var listOfAggregatesOfOper = TArray; /*список результатов по валютам для опера*/
    var listOfFinalAggregates  = TArray; /*список итоговых результатов по валютам*/
    var currencyList;                    /*список валют*/
    var listOfFinalAggregates_Groups  = TArray; /*список итоговых результатов по валютам при разбивка на группы*/

/*Буфер записи по мультивалютной проводке с покрытием*/
    var buffer_documentNumber;
    var buffer_currencyCode;
    var buffer_receiverBankCode;
    var buffer_payerAccount;
    var buffer_receiverAccount;
    var buffer_debitSumm;
    var buffer_debitEquivalentSumm;
    var buffer_creditSumm;
    var buffer_creditEquivalentSumm;

    /*текущие значения*/
    var currentChapter;
    var currentDate;
    var currentGroup;
    var currentOper;
    var currentPack;
    var currentCurrency;
    var currentCarryId;

    var wasRecord = FALSE;

    var count = 0; /*количество записей в отчете*/

//    var usedOpersList = TGroupOfOpersAndPacks();
    var usedOpersList = TGroupOfOpersAndPacksOptimized();

    /*Функция печатает фрагмент рублевого отчета только с данными по операм и пачкам*/
    MACRO printNationalReportPart1(parameters1:TReportParameters, recordForPrinting1)

        if (((recordForPrinting1.docOper == currentOper) AND (not parameters1.m_needGroupSplit)) OR
            ((recordForPrinting1.docOper == currentOper) AND (parameters1.m_needGroupSplit) AND
             (recordForPrinting1.groupid == currentGroup)))

             if (parameters1.m_needPackItog)
                 if (recordForPrinting1.docNumber_Pack == currentPack)
                     printOneNationalDocument(recordForPrinting1,
                                              parameters1.m_needApostrophies, parameters.m_needOperSplit);
                     /*дополнили агрегирующие данные*/
                     numberOfDocumentsInPack = numberOfDocumentsInPack + 1;
                     summOfDocumentsInPack   = summOfDocumentsInPack + recordForPrinting1.t_payerAmount;
                     numberOfOperDocuments   = numberOfOperDocuments + 1;
                     summOfOperDocuments     = summOfOperDocuments   + recordForPrinting1.t_payerAmount;

                     /*запомнили текущие значения*/
                     currentPack = recordForPrinting1.docNumber_Pack;
                 else /*(recordForPrinting1.docNumberPack != currentPack)*/
                     /*напечатали итог по пачке*/
                     printPackResult(numberOfDocumentsInPack,
                                     summOfDocumentsInPack,
                                     parameters1.m_needApostrophies, parameters.m_needOperSplit);

                     /*сложили агрегирующие данные по пачке в список*/
                     currentReportAggregates = TReportAggregates(currentOper,
                                                                  currentPack,
                                                                            0,
                                                      numberOfDocumentsInPack,
                                                        summOfDocumentsInPack,
                                                                            0,
                                                                            0,
                                                                            0,
                                                                            0,
                                                                            0,
                                                                            0,
                                                                            0,
                                                                            0,
                                                                            0,
                                                                            0,
                                                                            0,
                                                                            0);
                     if (parameters1.m_needGroupSplit)
                         if (not usedOpersList.havePair(currentOper, currentPack))
                            usedOpersList.addPair(currentOper, currentPack);
                            listOfReportAggregates[listOfReportAggregates.size] = currentReportAggregates;
                         end;
                     else
                         listOfReportAggregates[listOfReportAggregates.size] = currentReportAggregates;
                     end;

                     /*обнулили агрегирующие данные по пачке*/
                     numberOfDocumentsInPack = 0;
                     summOfDocumentsInPack   = 0;

                     printNewPack(recordForPrinting1.docNumber_pack);

                     printTableHeader(FALSE, FALSE, parameters.m_needOperSplit);

                     printOneNationalDocument(recordForPrinting1, parameters1.m_needApostrophies, parameters.m_needOperSplit);
                     /*дополнили агрегирующие данные*/
                     numberOfDocumentsInPack = numberOfDocumentsInPack + 1;
                     summOfDocumentsInPack   = summOfDocumentsInPack + recordForPrinting1.t_payerAmount;
                     numberOfOperDocuments   = numberOfOperDocuments + 1;
                     summOfOperDocuments     = summOfOperDocuments   + recordForPrinting1.t_payerAmount;

                     /*запомнили текущие значения*/
                     currentPack = recordForPrinting1.docNumber_Pack;
                 end;/*(recordForPrinting1.docNumberPack == currentPack)*/
             else/*(parameters1.m_needPackItog == "")*/

                 printOneNationalDocument(recordForPrinting1, parameters1.m_needApostrophies, parameters.m_needOperSplit);
                 /*дополнили агрегирующие данные*/
                 numberOfOperDocuments  = numberOfOperDocuments + 1;
                 summOfOperDocuments    = summOfOperDocuments   + recordForPrinting1.t_payerAmount;

             end;/*(parameters1.m_needPackItog)*/
         else  /*(recordForPrinting1.docOper != currentOper)*/
             if (parameters1.m_needPackItog)

                 /*напечатали итог по пачке*/
                 printPackResult(numberOfDocumentsInPack, summOfDocumentsInPack, parameters1.m_needApostrophies, parameters.m_needOperSplit);

                 /*сложили агрегирующие данные по пачке в список*/
                 currentReportAggregates = TReportAggregates(currentOper,
                                                              currentPack,
                                                                        0,
                                                  numberOfDocumentsInPack,
                                                    summOfDocumentsInPack,
                                                                        0,
                                                                        0,
                                                                        0,
                                                                        0,
                                                                        0,
                                                                        0,
                                                                        0,
                                                                        0,
                                                                        0,
                                                                        0,
                                                                        0,
                                                                        0);
                 if (parameters1.m_needGroupSplit)
                     if (not usedOpersList.havePair(currentOper, currentPack))
                         usedOpersList.addPair(currentOper, currentPack);
                         listOfReportAggregates[listOfReportAggregates.size] = currentReportAggregates;
                     end;
                 else
                     listOfReportAggregates[listOfReportAggregates.size] = currentReportAggregates;
                 end;

                 /*обнулили агрегирующие данные по пачке*/
                 numberOfDocumentsInPack = 0;
                 summOfDocumentsInPack   = 0;

             end;/*(parameters1.m_needPackItog)*/

             /*напечатали итог по оперу*/
             printOperResult(numberOfOperDocuments,
                               summOfOperDocuments,
                        parameters1.m_needPackItog,
                    parameters1.m_needApostrophies,
                        parameters.m_needOperSplit);

             /*сложили агрегирующие данные по оперу в список*/

             currentReportAggregates = TReportAggregates (currentOper,
                                                                    0,
                                                                    0,
                                                                    0,
                                                                    0,
                                                                    0,
                                                numberOfOperDocuments,
                                                  summOfOperDocuments,
                                                                    0,
                                                                    0,
                                                                    0,
                                                                    0,
                                                                    0,
                                                                    0,
                                                                    0,
                                                                    0,
                                                                    0);
             if (parameters1.m_needGroupSplit)
                 if (not usedOpersList.haveSingle(currentOper))
                 /*дополнили общие агрегирующие данные перед обнулением данных по оперу*/
                 finalNumberOfDocuments = finalNumberOfDocuments + numberOfOperDocuments;
                 finalSumm              = finalSumm + summOfOperDocuments;

                 listOfReportAggregates[listOfReportAggregates.size] = currentReportAggregates;

                 usedOpersList.addSingle(currentOper);
                 end;
             else
                 /*дополнили общие агрегирующие данные перед обнулением данных по оперу*/
                 finalNumberOfDocuments = finalNumberOfDocuments + numberOfOperDocuments;
                 finalSumm              = finalSumm + summOfOperDocuments;

                 listOfReportAggregates[listOfReportAggregates.size] = currentReportAggregates;
             end;

             /*обнулили агрегирующие данные по оперу*/
             numberOfOperDocuments = 0;
             summOfOperDocuments   = 0;

             if ((parameters1.m_needGroupSplit) AND (reportData.groupid != currentGroup))
                 if (not parameters1.m_needOperSplit)
                     printOperResultBackLine(true);   // Закрываем таблицу
                 end;
                 printNewGroup(recordForPrinting1.groupid);
             else
                 if (not parameters1.m_needOperSplit)
                     printOperResultBackLine(false);   // продолжаем таблицу
                 end;
             end;

             if (parameters1.m_needOperSplit)
                 printNewOper(recordForPrinting1.docOper);
             end;

             if (parameters1.m_needPackItog)
                 printNewPack(recordForPrinting1.docNumber_pack);
             end;

             if (parameters1.m_needOperSplit OR
                 ((parameters1.m_needGroupSplit) AND (recordForPrinting1.groupid != currentGroup)))
                 printTableHeader(FALSE, FALSE, parameters1.m_needOperSplit);
             end;

             printOneNationalDocument(recordForPrinting1, parameters1.m_needApostrophies, parameters.m_needOperSplit);
             /*дополнили агрегирующие данные*/
             if (parameters1.m_needPackItog)
                 numberOfDocumentsInPack = numberOfDocumentsInPack + 1;
                 summOfDocumentsInPack   = summOfDocumentsInPack + recordForPrinting1.t_payerAmount;
             end;

             numberOfOperDocuments   = numberOfOperDocuments + 1;
             summOfOperDocuments     = summOfOperDocuments   + recordForPrinting1.t_payerAmount;

             /*запомнили текущие значения*/
             if (parameters1.m_needPackItog)
                 currentPack = recordForPrinting1.docNumber_Pack;
             end;
             if (parameters1.m_needGroupSplit)
                 currentGroup  = recordForPrinting1.groupid;
             end;
             currentOper  = recordForPrinting1.docOper;
//end;
        end;  /*(recordForPrinting1.docOper == currentOper)*/

    END;

    /*Печать части отчета с итогами по оперу (пачке), таблицей итогов и подписями*/
    MACRO printNationalReportPart2(parameters2:TReportParameters, recordForPrinting2)
         var j;

         if (parameters2.m_needPackItog)
             /*напечатали итог по пачке*/
             printPackResult(numberOfDocumentsInPack, summOfDocumentsInPack, parameters2.m_needApostrophies, parameters.m_needOperSplit);

             /*сложили агрегирующие данные по пачке в список*/
             currentReportAggregates = TReportAggregates(currentOper,
                                                         currentPack,
                                                                   0,
                                             numberOfDocumentsInPack,
                                               summOfDocumentsInPack,
                                                                   0,
                                                                   0,
                                                                   0,
                                                                   0,
                                                                   0,
                                                                   0,
                                                                   0,
                                                                   0,
                                                                   0,
                                                                   0,
                                                                   0,
                                                                   0);
             if (parameters2.m_needGroupSplit)
                 if (not usedOpersList.havePair(currentOper, currentPack))
                     usedOpersList.addPair(currentOper, currentPack);
                     listOfReportAggregates[listOfReportAggregates.size] = currentReportAggregates;
                 end;
             else
                 listOfReportAggregates[listOfReportAggregates.size] = currentReportAggregates;
             end;

             /*обнулили агрегирующие данные по пачке*/
             numberOfDocumentsInPack = 0;
             summOfDocumentsInPack   = 0;
         end;/*(parameters2.m_needPackItog)*/

         /*напечатали итог по оперу*/
         printOperResult(numberOfOperDocuments,
                         summOfOperDocuments,
                         parameters2.m_needPackItog,
                         parameters2.m_needApostrophies,
                         parameters.m_needOperSplit);

         if (not parameters2.m_needOperSplit)
             printOperResultBackLine(true);   // Закрываем таблицу
         end;


         /*сложили агрегирующие данные по оперу в список*/
         currentReportAggregates = TReportAggregates(currentOper,
                                                                0,
                                                                0,
                                                                0,
                                                                0,
                                                                0,
                                            numberOfOperDocuments,
                                              summOfOperDocuments,
                                                                0,
                                                                0,
                                                                0,
                                                                0,
                                                                0,
                                                                0,
                                                                0,
                                                                0,
                                                                0);
         if (parameters2.m_needGroupSplit)
             if (not usedOpersList.haveSingle(currentOper))
                 usedOpersList.addSingle(currentOper);

                 /*дополнили общие агрегирующие данные перед обнулением данных по оперу*/
                 finalNumberOfDocuments = finalNumberOfDocuments + numberOfOperDocuments;
                 finalSumm              = finalSumm + summOfOperDocuments;

                 listOfReportAggregates[listOfReportAggregates.size] = currentReportAggregates;
             end;
         else
             /*дополнили общие агрегирующие данные перед обнулением данных по оперу*/
             finalNumberOfDocuments = finalNumberOfDocuments + numberOfOperDocuments;
             finalSumm              = finalSumm + summOfOperDocuments;

             listOfReportAggregates[listOfReportAggregates.size] = currentReportAggregates;
         end;

         /*обнулили агрегирующие данные по оперу*/
         numberOfOperDocuments = 0;
         summOfOperDocuments   = 0;

         /*сложили общие агрегирующие данные в список*/
         currentReportAggregates = TReportAggregates(0,
                                                     0,
                                                     0,
                                                     0,
                                                     0,
                                                     0,
                                                     0,
                                                     0,
                                                     0,
                                finalNumberOfDocuments,
                                             finalSumm,
                                                     0,
                                                     0,
                                                     0,
                                                     0,
                                                     0,
                                                     0);
         listOfReportAggregates[listOfReportAggregates.size] = currentReportAggregates;

         /*Обнулили общие итоги*/
         finalNumberOfDocuments  = 0;
         finalSumm               = 0;

         /*Напечатали табличку с результатами данных*/
         printTableWithNationalResults(parameters2,
                            listOfReportAggregates,
                                       currentDate,
                                    currentChapter);

         /*очистили список результатов*/
         j = 0;
         while (j < listOfReportAggregates.size)
             listOfReportAggregates[j].m_operCode                  = 0;
             listOfReportAggregates[j].m_packNumber                = 0;
             listOfReportAggregates[j].m_currencyCode              = 0;
             listOfReportAggregates[j].m_packNumberOfDocuments     = 0;
             listOfReportAggregates[j].m_packSumm                  = 0;
             listOfReportAggregates[j].m_packCoveringSumm          = 0;
             listOfReportAggregates[j].m_operNumberOfDocuments     = 0;
             listOfReportAggregates[j].m_operSumm                  = 0;
             listOfReportAggregates[j].m_operCoveringSumm          = 0;
             listOfReportAggregates[j].m_currencyNumberOfDocuments = 0;
             listOfReportAggregates[j].m_currencySumm              = 0;
             listOfReportAggregates[j].m_currencyCoveringSumm      = 0;
/*                            listOfReportAggregates[j].clear();*/
             j = j + 1;
         end;

         usedOpersList.clear();

         /*Напечатали подписи*/
         printSignatures();
         printLn();
    END;


    /*Печать отчета в национальной валюте*/
    MACRO printNationalReport(nationalParameters:TReportParameters, dataRecord)
//         var dataRecord;
         printTableHeader(FALSE, FALSE, parameters.m_needOperSplit);

         useProgress (count);

         printOneNationalDocument(dataRecord/*data*/, nationalParameters.m_needApostrophies, parameters.m_needOperSplit);
         /*дополнили агрегирующие данные*/
         if (parameters.m_needPackItog)
             numberOfDocumentsInPack = numberOfDocumentsInPack + 1;
             summOfDocumentsInPack   = summOfDocumentsInPack + dataRecord/*data*/.t_payerAmount;
         end;
         numberOfOperDocuments  = numberOfOperDocuments + 1;
         summOfOperDocuments    = summOfOperDocuments   + dataRecord/*data*/.t_payerAmount;

         /*запомнили текущие значения*/
         currentChapter = dataRecord/*data*/.docchapter;
         if (parameters.m_needEveryDayPrinting)
            currentDate = dataRecord/*data*/.docdate_carry;
         end;
         if (parameters.m_needGroupSplit)
             currentGroup   = dataRecord/*data*/.groupid
         end;
         currentOper    = dataRecord/*data*/.docOper;
         if (parameters.m_needPackItog)
            currentPack = dataRecord/*data*/.docNumber_Pack;
         end;

        /*печатаем остальные записи отчета*/
        while (dataRecord.next())
//            dataRecord = data.GetRecord();
            count = count + 1;
            useProgress (count);
            if (dataRecord.docChapter == currentChapter)

                if (parameters.m_needEveryDayPrinting)
                    if (dataRecord.docDate_carry == currentDate)
                        printNationalReportPart1(parameters, dataRecord);
                    else  /*(dataRecord.docDate_carry != currentDate)*/
                        printNationalReportPart2(parameters, dataRecord);

                        printBankHeader(parameters.m_departmentCode, parameters.m_orgStructure, width, shift);

                        printHeader(dataRecord.docChapter,
                         parameters.m_periodBeginningDate,
                            parameters.m_periodEndingDate,
                                 dataRecord.docdate_carry,
                                                    width,
                                                    shift,
                                                    FALSE);

                        if (parameters.m_needGroupSplit)
                            if (not parameters.m_needOperSplit)
                                printOperResultBackLine(true);   // Закрываем таблицу
                            end;
                            printNewGroup(reportData.groupid);
                        end;

                        if (parameters.m_needOperSplit)
                            printNewOper(reportData.docoper);
                        end;

                        if (parameters.m_needPackItog)
                            printNewPack(reportData.docnumber_pack);
                        end;

                        printTableHeader(FALSE, FALSE, parameters.m_needOperSplit);

                        printOneNationalDocument(dataRecord, parameters.m_needApostrophies, parameters.m_needOperSplit);
                        /*дополнили агрегирующие данные*/
                        if (parameters.m_needPackItog)
                            numberOfDocumentsInPack = numberOfDocumentsInPack + 1;
                            summOfDocumentsInPack   = summOfDocumentsInPack + dataRecord.t_payerAmount;
                        end;

                        numberOfOperDocuments   = numberOfOperDocuments + 1;
                        summOfOperDocuments     = summOfOperDocuments   + dataRecord.t_payerAmount;

                        /*запомнили текущие значения*/
                        if (parameters.m_needPackItog)
                            currentPack = dataRecord.docNumber_Pack;
                        end;
                        if (parameters.m_needGroupSplit)
                            currentGroup   = dataRecord.groupid;
                        end;
                        currentOper  = dataRecord.docOper;
                        currentDate  = dataRecord.docdate_carry;
                    end;  /*(dataRecord.docDate_carry == currentDate)*/
                else /*(parameters.m_needEveryDayPrinting == "")*/
                    printNationalReportPart1(parameters, dataRecord);
                end; /*(parameters.m_needEveryDayPrinting)*/

            else /*(dataRecord.docChapter != currentChapter)*/
                if (parameters.m_needEveryDayPrinting)
                    if (dataRecord.docDate_carry == currentDate)
                        printNationalReportPart1(parameters, dataRecord);
                    else  /*(dataRecord.docDate_carry != currentDate)*/
                        printNationalReportPart2(parameters, dataRecord);

                        printBankHeader(parameters.m_departmentCode, parameters.m_orgStructure, width, shift);

                        printHeader(reportData.docChapter,
                         parameters.m_periodBeginningDate,
                            parameters.m_periodEndingDate,
                                 reportData.docdate_carry,
                                                    width,
                                                    shift,
                                                    FALSE);
                        if (parameters.m_needGroupSplit)
                            printNewGroup(reportData.groupid);
                        end;

                        if (parameters.m_needOperSplit)
                            printNewOper(reportData.docoper);
                        end;

                        if (parameters.m_needPackItog)
                            printNewPack(reportData.docnumber_pack);
                        end;

                        printTableHeader(FALSE, FALSE, parameters.m_needOperSplit);

                        printOneNationalDocument(dataRecord, parameters.m_needApostrophies, parameters.m_needOperSplit);
                        /*дополнили агрегирующие данные*/
                        if (parameters.m_needPackItog)
                            numberOfDocumentsInPack = numberOfDocumentsInPack + 1;
                            summOfDocumentsInPack   = summOfDocumentsInPack + dataRecord.t_payerAmount;
                        end;

                        numberOfOperDocuments   = numberOfOperDocuments + 1;
                        summOfOperDocuments     = summOfOperDocuments   + dataRecord.t_payerAmount;

                        /*запомнили текущие значения*/
                        if (parameters.m_needGroupSplit)
                            currentGroup   = dataRecord.groupid;
                        end;
                        if (parameters.m_needPackItog)
                            currentPack = dataRecord.docNumber_Pack;
                        end;
                        currentOper  = dataRecord.docOper;
                        currentDate  = dataRecord.docdate_carry;
                        currentChapter = dataRecord.docChapter;
                    end;  /*(dataRecord.docDate_carry == currentDate)*/
                else /*(parameters.m_needEveryDayPrinting == "")*/

                    printNationalReportPart2(parameters, dataRecord);

                    printBankHeader(parameters.m_departmentCode, parameters.m_orgStructure, width, shift);

                    printHeader(reportData.docChapter,
                     parameters.m_periodBeginningDate,
                        parameters.m_periodEndingDate,
                             reportData.docdate_carry,
                                                width,
                                                shift,
                                                TRUE);
                    if (parameters.m_needGroupSplit)
                        printNewGroup(reportData.groupid);
                    end;

                    if (parameters.m_needOperSplit)
                        printNewOper(reportData.docoper);
                    end;

                    if (parameters.m_needPackItog)
                        printNewPack(reportData.docnumber_pack);
                    end;

                    printTableHeader(FALSE, FALSE, parameters.m_needOperSplit);

                    printOneNationalDocument(dataRecord, parameters.m_needApostrophies, parameters.m_needOperSplit);
                    /*дополнили агрегирующие данные*/
                    if (parameters.m_needPackItog)
                        numberOfDocumentsInPack = numberOfDocumentsInPack + 1;
                        summOfDocumentsInPack   = summOfDocumentsInPack + dataRecord.t_payerAmount;
                    end;

                    numberOfOperDocuments   = numberOfOperDocuments + 1;
                    summOfOperDocuments     = summOfOperDocuments   + dataRecord.t_payerAmount;

                    /*запомнили текущие значения*/
                    if (parameters.m_needGroupSplit)
                        currentGroup = dataRecord.groupid;
                    end;
                    if (parameters.m_needPackItog)
                        currentPack = dataRecord.docNumber_Pack;
                    end;
                    currentOper  = dataRecord.docOper;
                    currentDate  = dataRecord.docdate_carry;
                    currentChapter = dataRecord.docChapter;
                end; /*(parameters.m_needEveryDayPrinting)*/
            end; /*(dataRecord.docChapter == currentChapter)*/
        end; /*while*/

        printNationalReportPart2(parameters, dataRecord);
    END;

    /*Функция заполняет элементы списков результатов по валютам нулевыми значениями (для валютного отчета)*/
    MACRO clearAggregates(finalAggregatesList:TArray, currencyList:TArray)
        var  i = 0;
        i = 0;
        while (i < currencyList.size)
            finalAggregatesList[i].m_codeCurrency         = 0;
            finalAggregatesList[i].m_debitSumm            = 0;
            finalAggregatesList[i].m_debitEquivalentSumm  = 0;
            finalAggregatesList[i].m_creditSumm           = 0;
            finalAggregatesList[i].m_creditEquivalentSumm = 0;
            i = i + 1;
        end;
    END;


    MACRO clearOperAgregates(operAggregatesList:TArray, currencyList:TArray)
        var  i = 0;
        while (i < currencyList.size)

            operAggregatesList[i].m_codeCurrency         = 0;
            operAggregatesList[i].m_numberOfDocuments    = 0;
            operAggregatesList[i].m_debitSumm            = 0;
            operAggregatesList[i].m_debitEquivalentSumm  = 0;
            operAggregatesList[i].m_creditSumm           = 0;
            operAggregatesList[i].m_creditEquivalentSumm = 0;
            i = i + 1;
        end;
    END;

    /*Функция заполняет элементы списка результатов пачки по валютам нулевыми значениями (для валютного отчета)*/
    MACRO clearPackAggregates(packAggregatesList:TArray, currencyList:TArray)
        var  i = 0;
        while (i < currencyList.size)
            packAggregatesList[i].m_codeCurrency         = 0;
            packAggregatesList[i].m_numberOfDocuments    = 0;
            packAggregatesList[i].m_debitSumm            = 0;
            packAggregatesList[i].m_debitEquivalentSumm  = 0;
            packAggregatesList[i].m_creditSumm           = 0;
            packAggregatesList[i].m_creditEquivalentSumm = 0;
            i = i + 1;
        end;
    END;

    /*Функция добавляет данные в суммарные значения (для валютного отчета)*/
    MACRO addDataToAggregates(dataString, finalAggregatesList:TArray, currencyList:TArray)
        var i;

        /*дополнили общие данные*/
        finalNumberOfDocuments = finalNumberOfDocuments + 1;

        if (parameters.m_needNationalCurrencyEquivalent)
            if ((dataString.t_receiverFiId != dataString.t_payerFiId)     //09.10.2014 R-466898-1 dpn 
                and (dataString.t_result_carry != 18)
                and (dataString.t_result_carry != 82)
                and (dataString.t_result_carry != 83)
                and (dataString.t_result_carry != 84))
                if ((parameters.m_paymentsData == TRUE) AND (dataString.docChapter != 3)) /*данные из платежей*/
                        /*если проводка в валюте дебета*/
                    if (dataString.payerFiid == NATCUR)
                        debitEquivalentFinalSumm = debitEquivalentFinalSumm +
                                                    dataString.payerAmount;
                        creditEquivalentFinalSumm = creditEquivalentFinalSumm +
                                                    dataString.payerAmount;
                    else
                        if (dataString.payerFiid == dataString.code_currency)
                            debitEquivalentFinalSumm = debitEquivalentFinalSumm +
                                                        dataString.equivalentDebitSumm;
                            creditEquivalentFinalSumm = creditEquivalentFinalSumm +
                                                        dataString.equivalentDebitSumm;
                        end;
                    end;
                else
                    if ((dataString.equivalentDebitSumm == 0) and
                        (dataString.equivalentCreditSumm != 0)) /*проводка по валюте кредита*/
                        debitEquivalentFinalSumm = debitEquivalentFinalSumm +
                                                    dataString.equivalentCreditSumm;
                        creditEquivalentFinalSumm = creditEquivalentFinalSumm +
                                                    dataString.equivalentCreditSumm;
                    elif ((dataString.equivalentCreditSumm == 0) and
                          (dataString.equivalentDebitSumm != 0))  /*проводка по валюте дебета*/

                        debitEquivalentFinalSumm = debitEquivalentFinalSumm +
                                                    dataString.equivalentDebitSumm;
                        creditEquivalentFinalSumm = creditEquivalentFinalSumm +
                                                    dataString.equivalentDebitSumm;
                    end;
                end;
            else
                if (dataString.code_currency == NATCUR)
                    debitEquivalentFinalSumm = debitEquivalentFinalSumm + dataString.payerAmount;
                else
                    debitEquivalentFinalSumm = debitEquivalentFinalSumm + dataString.equivalentDebitSumm;
                end;
            end;
        end;

        i = 0;
        while (i < currencyList.size)
            if (dataString.payerFiid == currencyList[i])
                if (parameters.m_needNationalCurrencyEquivalent)
                    if ((dataString.t_receiverFiId != dataString.t_payerFiId) and (dataString.t_result_carry != 18) //09.10.2014 R-466898-1 dpn 
                                                                    and (dataString.t_result_carry != 82)
                                                                    and (dataString.t_result_carry != 83)
                                                                    and (dataString.t_result_carry != 84))
                        if ((parameters.m_paymentsData == TRUE) AND (dataString.docChapter != 3)) /*данные из платежей*/
                            if (dataString.payerFiid == NATCUR)
                                finalAggregatesList[i].m_codeCurrency = dataString.payerFiid;
                                finalAggregatesList[i].m_debitSumm = finalAggregatesList[i].m_debitSumm + dataString.payerAmount;
                                finalAggregatesList[i].m_creditSumm = finalAggregatesList[i].m_creditSumm +
                                                                     dataString.receiverAmount;

                                finalAggregatesList[i].m_debitEquivalentSumm = finalAggregatesList[i].m_debitEquivalentSumm +
                                                                              dataString.payerAmount;
                                finalAggregatesList[i].m_creditEquivalentSumm = finalAggregatesList[i].m_creditEquivalentSumm +
                                                                               dataString.payerAmount;
                            else
                                if (dataString.payerFiid == dataString.code_currency)
                                    finalAggregatesList[i].m_codeCurrency = dataString.payerFiid;
                                    finalAggregatesList[i].m_debitSumm = finalAggregatesList[i].m_debitSumm + dataString.payerAmount;
                                    finalAggregatesList[i].m_creditSumm = finalAggregatesList[i].m_creditSumm +
                                                                         dataString.receiverAmount;

                                    finalAggregatesList[i].m_debitEquivalentSumm = finalAggregatesList[i].m_debitEquivalentSumm +
                                                                                  dataString.equivalentDebitSumm;
                                    finalAggregatesList[i].m_creditEquivalentSumm = finalAggregatesList[i].m_creditEquivalentSumm +
                                                                                   dataString.equivalentCreditSumm;
                                end;
                            end;
                        else
                            if ((dataString.equivalentDebitSumm == 0) and
                                (dataString.equivalentCreditSumm != 0)) /*проводка по валюте кредита*/
                                finalAggregatesList[i].m_codeCurrency         = dataString.payerFiid;
                                finalAggregatesList[i].m_debitSumm            = finalAggregatesList[i].m_debitSumm + dataString.payerAmount;
                                finalAggregatesList[i].m_creditSumm           = finalAggregatesList[i].m_creditSumm +
                                                                               dataString.receiverAmount;
                                finalAggregatesList[i].m_debitEquivalentSumm  = finalAggregatesList[i].m_debitEquivalentSumm +
                                                                               dataString.equivalentCreditSumm;
                                finalAggregatesList[i].m_creditEquivalentSumm = finalAggregatesList[i].m_creditEquivalentSumm +
                                                                               dataString.equivalentCreditSumm;
                            elif ((dataString.equivalentCreditSumm == 0) and
                                  (dataString.equivalentDebitSumm != 0))  /*проводка по валюте дебета*/
                                finalAggregatesList[i].m_codeCurrency         = dataString.payerFiid;
                                finalAggregatesList[i].m_debitSumm            = finalAggregatesList[i].m_debitSumm + dataString.payerAmount;
                                finalAggregatesList[i].m_creditSumm           = finalAggregatesList[i].m_creditSumm +
                                                                               dataString.receiverAmount;

                                finalAggregatesList[i].m_debitEquivalentSumm  = finalAggregatesList[i].m_debitEquivalentSumm +
                                                                               dataString.equivalentDebitSumm;
                                finalAggregatesList[i].m_creditEquivalentSumm = finalAggregatesList[i].m_creditEquivalentSumm +
                                                                               dataString.equivalentDebitSumm;
                            end;
                        end;
                    else
                        finalAggregatesList[i].m_codeCurrency = dataString.payerFiid;
                        finalAggregatesList[i].m_debitSumm = finalAggregatesList[i].m_debitSumm + dataString.payerAmount;

                        if (dataString.code_currency == NATCUR)
                            finalAggregatesList[i].m_debitEquivalentSumm = finalAggregatesList[i].m_debitEquivalentSumm
                                                                          + dataString.payerAmount;
                        else
                            finalAggregatesList[i].m_debitEquivalentSumm = finalAggregatesList[i].m_debitEquivalentSumm
                                                                           + dataString.equivalentDebitSumm;
                        end;
                    end;
                else
                    finalAggregatesList[i].m_codeCurrency = dataString.payerFiid;
                    finalAggregatesList[i].m_debitSumm = finalAggregatesList[i].m_debitSumm + dataString.payerAmount;

                    if ((dataString.t_receiverFiId != dataString.t_payerFiId) and (dataString.t_result_carry != 18) //09.10.2014 R-466898-1 dpn 
                                                                    and (dataString.t_result_carry != 82)
                                                                    and (dataString.t_result_carry != 83)
                                                             and (dataString.t_result_carry != 84))
                        finalAggregatesList[i].m_creditSumm = finalAggregatesList[i].m_creditSumm + dataString.receiverAmount;
                    end;
                end;
                break;
            end;
            i = i + 1;
        end;
    END;

    MACRO addDataToOperAggregates(dataString, operAggregatesList:TArray, currencyList:TArray)
        var i;
        /*дополнили данные по оперу*/
        numberOfOperDocuments = numberOfOperDocuments + 1;

        if (parameters.m_needNationalCurrencyEquivalent)
            if ((dataString.t_receiverFiId != dataString.t_payerFiId) and (dataString.t_result_carry != 18) //06.08.2014 I-00506908-2 dpn
                                                            and (dataString.t_result_carry != 82)
                                                            and (dataString.t_result_carry != 83)
                                                            and (dataString.t_result_carry != 84))
                if ((parameters.m_paymentsData == TRUE) AND (dataString.docChapter != 3)) /*данные из платежей*/
                    /*если проводка в валюте дебета*/
                    if (dataString.payerFiid == NATCUR)
                        debitEquivalentOperSumm = debitEquivalentOperSumm +
                                                    dataString.payerAmount;
                        creditEquivalentOperSumm = creditEquivalentOperSumm +
                                                    dataString.payerAmount;
                    else
                        if (dataString.payerFiid == dataString.code_currency)
                            debitEquivalentOperSumm = debitEquivalentOperSumm +
                                                        dataString.equivalentDebitSumm;
                            creditEquivalentOperSumm = creditEquivalentOperSumm +
                                                        dataString.equivalentCreditSumm;
                        end;
                    end;
                else
                    if ((dataString.equivalentDebitSumm == 0) and
                        (dataString.equivalentCreditSumm != 0)) /*проводка по валюте кредита*/
                        debitEquivalentOperSumm = debitEquivalentOperSumm +
                                                    dataString.equivalentCreditSumm;
                        creditEquivalentOperSumm = creditEquivalentOperSumm +
                                                    dataString.equivalentCreditSumm;
                    elif ((dataString.equivalentCreditSumm == 0) and
                          (dataString.equivalentDebitSumm != 0))  /*проводка по валюте дебета*/

                        debitEquivalentOperSumm = debitEquivalentOperSumm +
                                                    dataString.equivalentDebitSumm;
                        creditEquivalentOperSumm = creditEquivalentOperSumm +
                                                    dataString.equivalentDebitSumm;
                    end;
                end;
            else
                if (dataString.code_currency == NATCUR)
                    debitEquivalentOperSumm = debitEquivalentOperSumm + dataString.payerAmount;
                else
                    debitEquivalentOperSumm = debitEquivalentOperSumm + dataString.equivalentDebitSumm;
                end;
            end;
         end;

        i = 0;
        while (i < currencyList.size)
            if (dataString.payerFiid == currencyList[i])
                if (parameters.m_needNationalCurrencyEquivalent)
                    if ((dataString.t_receiverFiId != dataString.t_payerFiId) and (dataString.t_result_carry != 18) //06.08.2014 I-00506908-2 dpn 
                                                                    and (dataString.t_result_carry != 82)
                                                                    and (dataString.t_result_carry != 83)
                                                                    and (dataString.t_result_carry != 84))
                        if ((parameters.m_paymentsData == TRUE) AND (dataString.docChapter != 3)) /*данные из платежей*/

                            if (dataString.payerFiid == NATCUR)
                                operAggregatesList[i].m_codeCurrency = dataString.payerFiid;
                                operAggregatesList[i].m_debitSumm = operAggregatesList[i].m_debitSumm + dataString.payerAmount;
                                operAggregatesList[i].m_numberOfDocuments = operAggregatesList[i].m_numberOfDocuments + 1;
                                operAggregatesList[i].m_creditSumm = operAggregatesList[i].m_creditSumm +
                                                                     dataString.receiverAmount;

                                operAggregatesList[i].m_debitEquivalentSumm = operAggregatesList[i].m_debitEquivalentSumm +
                                                                              dataString.payerAmount;
                                operAggregatesList[i].m_creditEquivalentSumm = operAggregatesList[i].m_creditEquivalentSumm +
                                                                               dataString.payerAmount;
                            else
                                if (dataString.payerFiid == dataString.code_currency)
                                    operAggregatesList[i].m_codeCurrency = dataString.payerFiid;
                                    operAggregatesList[i].m_debitSumm = operAggregatesList[i].m_debitSumm + dataString.payerAmount;
                                    operAggregatesList[i].m_numberOfDocuments = operAggregatesList[i].m_numberOfDocuments + 1;
                                    operAggregatesList[i].m_creditSumm = operAggregatesList[i].m_creditSumm +
                                                                         dataString.receiverAmount;

                                    operAggregatesList[i].m_debitEquivalentSumm = operAggregatesList[i].m_debitEquivalentSumm +
                                                                                  dataString.equivalentDebitSumm;
                                    operAggregatesList[i].m_creditEquivalentSumm = operAggregatesList[i].m_creditEquivalentSumm +
                                                                                   dataString.equivalentCreditSumm;
                                end;
                            end;
                        else
                            if ((dataString.equivalentDebitSumm == 0) and
                                (dataString.equivalentCreditSumm != 0)) /*проводка по валюте кредита*/
                                operAggregatesList[i].m_numberOfDocuments    = operAggregatesList[i].m_numberOfDocuments + 1;
                                operAggregatesList[i].m_codeCurrency         = dataString.payerFiid;
                                operAggregatesList[i].m_debitSumm            = operAggregatesList[i].m_debitSumm + dataString.payerAmount;
                                operAggregatesList[i].m_creditSumm           = operAggregatesList[i].m_creditSumm +
                                                                               dataString.receiverAmount;
                                operAggregatesList[i].m_debitEquivalentSumm  = operAggregatesList[i].m_debitEquivalentSumm +
                                                                               dataString.equivalentCreditSumm;
                                operAggregatesList[i].m_creditEquivalentSumm = operAggregatesList[i].m_creditEquivalentSumm +
                                                                               dataString.equivalentCreditSumm;
                            elif ((dataString.equivalentCreditSumm == 0) and
                                  (dataString.equivalentDebitSumm != 0))  /*проводка по валюте дебета*/
                                operAggregatesList[i].m_numberOfDocuments    = operAggregatesList[i].m_numberOfDocuments + 1;
                                operAggregatesList[i].m_codeCurrency         = dataString.payerFiid;
                                operAggregatesList[i].m_debitSumm            = operAggregatesList[i].m_debitSumm + dataString.payerAmount;
                                operAggregatesList[i].m_creditSumm           = operAggregatesList[i].m_creditSumm +
                                                                               dataString.receiverAmount;

                                operAggregatesList[i].m_debitEquivalentSumm  = operAggregatesList[i].m_debitEquivalentSumm +
                                                                               dataString.equivalentDebitSumm;
                                operAggregatesList[i].m_creditEquivalentSumm = operAggregatesList[i].m_creditEquivalentSumm +
                                                                               dataString.equivalentDebitSumm;
                            end;
                        end;
                    else
                        operAggregatesList[i].m_codeCurrency = dataString.payerFiid;
                        operAggregatesList[i].m_debitSumm = operAggregatesList[i].m_debitSumm + dataString.payerAmount;
                        operAggregatesList[i].m_numberOfDocuments = operAggregatesList[i].m_numberOfDocuments + 1;
                        operAggregatesList[i].m_creditSumm = operAggregatesList[i].m_creditSumm +
                                                                         dataString.receiverAmount;
                        if (dataString.code_currency == NATCUR)
                            operAggregatesList[i].m_debitEquivalentSumm = operAggregatesList[i].m_debitEquivalentSumm
                                                                          + dataString.payerAmount;
                        else
                            operAggregatesList[i].m_debitEquivalentSumm = operAggregatesList[i].m_debitEquivalentSumm
                                                                           + dataString.equivalentDebitSumm;
                        end;
                    end;
                else
                    operAggregatesList[i].m_codeCurrency = dataString.payerFiid;
                    operAggregatesList[i].m_debitSumm = operAggregatesList[i].m_debitSumm + dataString.payerAmount;
                     operAggregatesList[i].m_creditSumm = operAggregatesList[i].m_creditSumm +dataString.receiverAmount;
                    operAggregatesList[i].m_numberOfDocuments = operAggregatesList[i].m_numberOfDocuments + 1;

                    if ((dataString.t_receiverFiId != dataString.t_payerFiId) and (dataString.t_result_carry != 18) //06.08.2014 I-00506908-2 dpn
                                                                    and (dataString.t_result_carry != 82)
                                                                    and (dataString.t_result_carry != 83)
                                                                    and (dataString.t_result_carry != 84))
                        operAggregatesList[i].m_creditSumm = operAggregatesList[i].m_creditSumm +
                                                                         dataString.receiverAmount;
                    end;
                end;
                break;
            end;
            i = i + 1;
        end;

    END;


    MACRO addDataToPackAggregates(dataString, packAggregatesList:TArray, currencyList:TArray)
        var i = 0;
        var ww;
        ww = currencyList.size;

        numberOfDocumentsInPack = numberOfDocumentsInPack + 1;
        if (parameters.m_needNationalCurrencyEquivalent)
            if ((dataString.t_receiverFiId != dataString.t_payerFiId) and (dataString.t_result_carry != 18) //09.10.2014 R-466898-1 dpn 
                                                            and (dataString.t_result_carry != 82)
                                                            and (dataString.t_result_carry != 83)
                                                            and (dataString.t_result_carry != 84))
                if ((parameters.m_paymentsData == TRUE) AND (dataString.docChapter != 3)) /*данные из платежей*/
                    if (dataString.payerFiid == NATCUR)
                        debitEquivalentSummInPack = debitEquivalentSummInPack +
                                                    dataString.payerAmount;
                        creditEquivalentSummInPack = creditEquivalentSummInPack +
                                                    dataString.payerAmount;
                    else
                        if (dataString.payerFiid == dataString.code_currency)
                            debitEquivalentSummInPack = debitEquivalentSummInPack +
                                                        dataString.equivalentDebitSumm;
                            creditEquivalentSummInPack = creditEquivalentSummInPack +
                                                        dataString.equivalentCreditSumm;
                        end;
                    end;
                else
                    if ((dataString.equivalentDebitSumm == 0) and
                        (dataString.equivalentCreditSumm != 0)) /*проводка по валюте кредита*/
                        debitEquivalentSummInPack = debitEquivalentSummInPack +
                                                    dataString.equivalentCreditSumm;
                        creditEquivalentSummInPack = creditEquivalentSummInPack +
                                                    dataString.equivalentCreditSumm;
                    elif ((dataString.equivalentCreditSumm == 0) and
                          (dataString.equivalentDebitSumm != 0))  /*проводка по валюте дебета*/

                        debitEquivalentSummInPack = debitEquivalentSummInPack +
                                                    dataString.equivalentDebitSumm;
                        creditEquivalentSummInPack = creditEquivalentSummInPack +
                                                    dataString.equivalentCreditSumm;
                    end;
                end;
            else
                if (dataString.code_currency == NATCUR)
                    debitEquivalentSummInPack = debitEquivalentSummInPack + dataString.payerAmount;
                else
                    debitEquivalentSummInPack = debitEquivalentSummInPack + dataString.equivalentDebitSumm;
                end;
            end;
        end;

        i = 0;
        while (i < ww)
            if (dataString.payerFiid == currencyList[i])
                if (parameters.m_needNationalCurrencyEquivalent)
                    if ((dataString.t_receiverFiId != dataString.t_payerFiId) and (dataString.t_result_carry != 18) //09.10.2014 R-466898-1 dpn 
                                                                    and (dataString.t_result_carry != 82)
                                                                    and (dataString.t_result_carry != 83)
                                                                    and (dataString.t_result_carry != 84))
                        if ((parameters.m_paymentsData == TRUE) AND (dataString.docChapter != 3)) /*данные из платежей*/
                            if (dataString.payerFiid == NATCUR)
                                packAggregatesList[i].m_numberOfDocuments = packAggregatesList[i].m_numberOfDocuments + 1;
                                packAggregatesList[i].m_codeCurrency = dataString.payerFiid;
                                packAggregatesList[i].m_debitSumm = packAggregatesList[i].m_debitSumm + dataString.payerAmount;
                                packAggregatesList[i].m_creditSumm = packAggregatesList[i].m_creditSumm +
                                                                     dataString.receiverAmount;
                                packAggregatesList[i].m_debitEquivalentSumm = packAggregatesList[i].m_debitEquivalentSumm +
                                                                              dataString.payerAmount;
                                packAggregatesList[i].m_creditEquivalentSumm = packAggregatesList[i].m_creditEquivalentSumm +
                                                                               dataString.payerAmount;
                            else
                                if (dataString.payerFiid == dataString.code_currency)
                                    packAggregatesList[i].m_numberOfDocuments = packAggregatesList[i].m_numberOfDocuments + 1;
                                    packAggregatesList[i].m_codeCurrency = dataString.payerFiid;
                                    packAggregatesList[i].m_debitSumm = packAggregatesList[i].m_debitSumm + dataString.payerAmount;
                                    packAggregatesList[i].m_creditSumm = packAggregatesList[i].m_creditSumm +
                                                                         dataString.receiverAmount;

                                    packAggregatesList[i].m_debitEquivalentSumm = packAggregatesList[i].m_debitEquivalentSumm +
                                                                                  dataString.equivalentDebitSumm;
                                    packAggregatesList[i].m_creditEquivalentSumm = packAggregatesList[i].m_creditEquivalentSumm +
                                                                                   dataString.equivalentCreditSumm;
                                end;
                            end;
                        else
                            if ((dataString.equivalentDebitSumm == 0) and
                                (dataString.equivalentCreditSumm != 0)) /*проводка по валюте кредита*/
                                packAggregatesList[i].m_numberOfDocuments    = packAggregatesList[i].m_numberOfDocuments + 1;
                                packAggregatesList[i].m_codeCurrency         = dataString.payerFiid;
                                packAggregatesList[i].m_debitSumm            = packAggregatesList[i].m_debitSumm + dataString.payerAmount;
                                packAggregatesList[i].m_creditSumm           = packAggregatesList[i].m_creditSumm +
                                                                               dataString.receiverAmount;
                                packAggregatesList[i].m_debitEquivalentSumm  = packAggregatesList[i].m_debitEquivalentSumm +
                                                                               dataString.equivalentCreditSumm;
                                packAggregatesList[i].m_creditEquivalentSumm = packAggregatesList[i].m_creditEquivalentSumm +
                                                                               dataString.equivalentCreditSumm;
                            elif ((dataString.equivalentCreditSumm == 0) and
                                  (dataString.equivalentDebitSumm != 0))  /*проводка по валюте дебета*/
                                packAggregatesList[i].m_numberOfDocuments    = packAggregatesList[i].m_numberOfDocuments + 1;
                                packAggregatesList[i].m_codeCurrency         = dataString.payerFiid;
                                packAggregatesList[i].m_debitSumm            = packAggregatesList[i].m_debitSumm + dataString.payerAmount;
                                packAggregatesList[i].m_creditSumm           = packAggregatesList[i].m_creditSumm +
                                                                               dataString.receiverAmount;

                                packAggregatesList[i].m_debitEquivalentSumm  = packAggregatesList[i].m_debitEquivalentSumm +
                                                                               dataString.equivalentDebitSumm;
                                packAggregatesList[i].m_creditEquivalentSumm = packAggregatesList[i].m_creditEquivalentSumm +
                                                                               dataString.equivalentDebitSumm;
                            end;
                        end;
                    else
                        packAggregatesList[i].m_numberOfDocuments = packAggregatesList[i].m_numberOfDocuments + 1;
                        packAggregatesList[i].m_codeCurrency = dataString.payerFiid;
                        packAggregatesList[i].m_debitSumm = packAggregatesList[i].m_debitSumm + dataString.payerAmount;
                        if (dataString.code_currency == NATCUR)
                            packAggregatesList[i].m_debitEquivalentSumm = packAggregatesList[i].m_debitEquivalentSumm
                                                                          + dataString.payerAmount;
                        else
                            packAggregatesList[i].m_debitEquivalentSumm = packAggregatesList[i].m_debitEquivalentSumm
                                                                           + dataString.equivalentDebitSumm;
                        end;
                    end;
                else
                    packAggregatesList[i].m_numberOfDocuments = packAggregatesList[i].m_numberOfDocuments + 1;
                    packAggregatesList[i].m_codeCurrency = dataString.payerFiid;
                    packAggregatesList[i].m_debitSumm = packAggregatesList[i].m_debitSumm + dataString.payerAmount;

                    if ((dataString.t_receiverFiId != dataString.t_payerFiId) and (dataString.t_result_carry != 18) //09.10.2014 R-466898-1 dpn 
                                                                    and (dataString.t_result_carry != 82)
                                                                    and (dataString.t_result_carry != 83)
                                                                    and (dataString.t_result_carry != 84))
                        packAggregatesList[i].m_creditSumm = packAggregatesList[i].m_creditSumm +
                                                                         dataString.receiverAmount;
                    end;
                end;
                break;
            end;
            i = i + 1;
        end;
    END;

    MACRO addOperAgregatesToFinalAggregates(finalAggregatesList:TArray, operAggregatesList:TArray)

        var i;

        finalNumberOfDocuments = finalNumberOfDocuments + numberOfOperDocuments;
        debitEquivalentFinalSumm = debitEquivalentFinalSumm + debitEquivalentOperSumm;
        creditEquivalentFinalSumm = creditEquivalentFinalSumm + creditEquivalentOperSumm;

        i = 0;
        while (i < operAggregatesList.size)
            if (
                (operAggregatesList[i].m_debitSumm            != 0) or
                (operAggregatesList[i].m_creditSumm           != 0) or
                (operAggregatesList[i].m_debitEquivalentSumm  != 0) or
                (operAggregatesList[i].m_creditEquivalentSumm != 0)
               )

                finalAggregatesList[i].m_codeCurrency = operAggregatesList[i].m_codeCurrency;

                finalAggregatesList[i].m_debitSumm =
                finalAggregatesList[i].m_debitSumm + operAggregatesList[i].m_debitSumm;
                finalAggregatesList[i].m_creditSumm =
                finalAggregatesList[i].m_creditSumm + operAggregatesList[i].m_creditSumm;

                finalAggregatesList[i].m_debitEquivalentSumm =
                finalAggregatesList[i].m_debitEquivalentSumm + operAggregatesList[i].m_debitEquivalentSumm;
                finalAggregatesList[i].m_creditEquivalentSumm =
                finalAggregatesList[i].m_creditEquivalentSumm + operAggregatesList[i].m_creditEquivalentSumm;
            end;
            i = i + 1;
        end;

    END;

    /*Функция запоминает текущие значения (для валютного отчета)*/
    MACRO setCurrentValues(dataString)
      /*  if ((parameters.m_needNationalCurrencyEquivalent) and
            (dataString.t_receiverFiId != dataString.t_payerFiId) and //06.08.2014 I-00506908-2 dpn
            (dataString.t_result_carry != 18) and
            (dataString.t_result_carry != 82) and
            (dataString.t_result_carry != 83) and
            (dataString.t_result_carry != 84) and
            (dataString.carryIdNotNull != currentCarryId))
           currentCarryId = dataString.carryIdNotNull;
        end;
*/
        currentChapter = dataString.docchapter;
        if (parameters.m_needEveryDayPrinting)
           currentDate = dataString.docdate_carry;
        end;
        if (parameters.m_needGroupSplit)
            currentGroup   = dataString.groupid
        end;
        currentOper    = dataString.docOper;
        if (parameters.m_needPackItog)
           currentPack = dataString.docNumber_Pack;
        end;
    END;

    /*Оформление завершения пачки*/
    MACRO performPackResult(parameters1:TReportParameters, recordForPrinting1, currencyList:TArray)
        var i;
        /*напечатали итог по пачке*/
        if (parameters1.m_needNationalCurrencyEquivalent)
            printPackResultInForeignReport(numberOfDocumentsInPack, debitEquivalentSummInPack, creditEquivalentSummInPack, TRUE, parameters1.m_needApostrophies, parameters1.m_needOperSplit);
        else
            printPackResultInForeignReport(numberOfDocumentsInPack, 0, 0, FALSE, parameters1.m_needApostrophies, parameters1.m_needOperSplit);
        end;
        /*напечатали агрегирующие данные по пачке*/
         printAggregatesByCurrencies(listOfAggregatesInPack,
              parameters1.m_needNationalCurrencyEquivalent,
                            parameters1.m_needApostrophies,
                               parameters1.m_needOperSplit, false);
        /*сложили агрегирующие данные по пачке в список*/
        i = 0;
        while (i < listOfAggregatesInPack.size)
            if (parameters1.m_needNationalCurrencyEquivalent)
               if ((listOfAggregatesInPack[i].m_debitSumm            != 0) or
                   (listOfAggregatesInPack[i].m_debitEquivalentSumm  != 0) or
                   (listOfAggregatesInPack[i].m_creditSumm           != 0) or
                   (listOfAggregatesInPack[i].m_creditEquivalentSumm != 0)
                  )
                   currentReportAggregates = TReportAggregates(currentOper,
                                                               currentPack,
                                  listOfAggregatesInPack[i].m_codeCurrency,
                                                                         0,
                                     listOfAggregatesInPack[i].m_debitSumm,
                           listOfAggregatesInPack[i].m_debitEquivalentSumm,
                                                                         0,
                                                                         0,
                                                                         0,
                                                                         0,
                                                                         0,
                                                                         0,
                             listOfAggregatesInPack[i].m_numberOfDocuments,
                                                                         0,
                                                                         0,
                                                                         0,
                                                                         0);
                   if (not (parameters1.m_needGroupSplit AND usedOpersList.havePair(currentOper, currentPack)))
                       listOfReportAggregates[listOfReportAggregates.size] = currentReportAggregates;
                   end;

               end;
            else
               if ((listOfAggregatesInPack[i].m_debitSumm            != 0) or
                   (listOfAggregatesInPack[i].m_creditSumm           != 0)
                  )
                   currentReportAggregates = TReportAggregates(currentOper,
                                                               currentPack,
                                  listOfAggregatesInPack[i].m_codeCurrency,
                                                                         0,
                                     listOfAggregatesInPack[i].m_debitSumm,
                                                                         0,
                                                                         0,
                                                                         0,
                                                                         0,
                                                                         0,
                                                                         0,
                                                                         0,
                             listOfAggregatesInPack[i].m_numberOfDocuments,
                                                                         0,
                                                                         0,
                                                                         0,
                                                                         0);
                   if (not (parameters1.m_needGroupSplit AND usedOpersList.havePair(currentOper, currentPack)))
                       listOfReportAggregates[listOfReportAggregates.size] = currentReportAggregates;
                   end;

               end;
            end;
            i = i + 1;
        end;

        if (not (parameters1.m_needGroupSplit AND usedOpersList.havePair(currentOper, currentPack)))
            usedOpersList.addPair(currentOper, currentPack);
        end;

        /*обнулили агрегирующие данные по пачке*/
        numberOfDocumentsInPack    = 0;
        summOfDocumentsInPack      = 0;
        debitEquivalentSummInPack  = 0;
        creditEquivalentSummInPack = 0;

        clearPackAggregates(listOfAggregatesInPack, currencyList);
    END;

    /*Оформление завершения опера*/
    MACRO performOperResult(parameters1:TReportParameters, recordForPrinting1, currencyList:TArray)
        var i;
        /*напечатали итог по оперу*/
        if (parameters1.m_needNationalCurrencyEquivalent)
            printOperResultInForeignReport(numberOfOperDocuments,
                                         debitEquivalentOperSumm,
                                        creditEquivalentOperSumm,
                                                            TRUE,
                                      parameters1.m_needPackItog,
                                  parameters1.m_needApostrophies,
                                     parameters1.m_needOperSplit);
        else
            printOperResultInForeignReport(numberOfOperDocuments,
                                                               0,
                                                               0,
                                                           FALSE,
                                      parameters1.m_needPackItog,
                                  parameters1.m_needApostrophies,
                                     parameters1.m_needOperSplit);
        end;
        /*напечатали агрегирующие данные по оперу*/
        printAggregatesByCurrencies(listOfAggregatesOfOper,
              parameters1.m_needNationalCurrencyEquivalent,
                            parameters1.m_needApostrophies,
                               parameters1.m_needOperSplit, false);

        /*сложили агрегирующие данные по оперу в список*/
        /*общее количество документов по оперу*/
        if (parameters1.m_needNationalCurrencyEquivalent)
            currentReportAggregates = TReportAggregates(currentOper,
                                                                  0,
                                                                  0,
                                                                  0,
                                                                  0,
                                                                  0,
                                              numberOfOperDocuments,
                                                                  0,
                                            debitEquivalentOperSumm,
                                                                  0,
                                                                  0,
                                                                  0,
                                                                  0,
                                                                  0,
                                                                  0,
                                                                  0,
                                                                  0);
        else
            currentReportAggregates = TReportAggregates(currentOper,
                                                                  0,
                                                                  0,
                                                                  0,
                                                                  0,
                                                                  0,
                                              numberOfOperDocuments,
                                                                  0,
                                                                  0,
                                                                  0,
                                                                  0,
                                                                  0,
                                                                  0,
                                                                  0,
                                                                  0,
                                                                  0,
                                                                  0);
        end;

        if (not (parameters1.m_needGroupSplit AND usedOpersList.haveSingle(currentOper)))
            listOfReportAggregates[listOfReportAggregates.size] = currentReportAggregates;
        end;

        i = 0;
        /*данные по оперу в разрезе валют*/
        while (i < listOfAggregatesOfOper.size)
            if (parameters1.m_needNationalCurrencyEquivalent)
               if ((listOfAggregatesOfOper[i].m_debitSumm            != 0) or
                   (listOfAggregatesOfOper[i].m_debitEquivalentSumm  != 0) or
                   (listOfAggregatesOfOper[i].m_creditSumm           != 0) or
                   (listOfAggregatesOfOper[i].m_creditEquivalentSumm != 0)
                  )
                   currentReportAggregates = TReportAggregates(0,
                                                               0,
                        listOfAggregatesOfOper[i].m_codeCurrency,
                                                               0,
                                                               0,
                                                               0,
                                                               0,
                           listOfAggregatesOfOper[i].m_debitSumm,
                                                               0,
                                                               0,
                                                               0,
                                                               0,
                                                               0,
                   listOfAggregatesOfOper[i].m_numberOfDocuments,
                                                               0,
                                                               0,
                 listOfAggregatesOfOper[i].m_debitEquivalentSumm);

                 if (not (parameters1.m_needGroupSplit AND usedOpersList.haveSingle(currentOper)))
                     listOfReportAggregates[listOfReportAggregates.size] = currentReportAggregates;
                 end
               end;
            else
               if ((listOfAggregatesOfOper[i].m_debitSumm            != 0) or
                   (listOfAggregatesOfOper[i].m_creditSumm           != 0)
                  )
                  currentReportAggregates = TReportAggregates(0,
                                                              0,
                       listOfAggregatesOfOper[i].m_codeCurrency,
                                                              0,
                                                              0,
                                                              0,
                                                              0,
                          listOfAggregatesOfOper[i].m_debitSumm,
                                                              0,
                                                              0,
                                                              0,
                                                              0,
                                                              0,
                  listOfAggregatesOfOper[i].m_numberOfDocuments,
                                                              0,
                                                              0,
                                                              0);
                 if (not (parameters1.m_needGroupSplit AND usedOpersList.haveSingle(currentOper)))
                     listOfReportAggregates[listOfReportAggregates.size] = currentReportAggregates;
                 end
               end;
            end;
            i = i + 1;
        end;

        if (not (parameters1.m_needGroupSplit AND usedOpersList.haveSingle(currentOper)))
            addOperAgregatesToFinalAggregates(listOfFinalAggregates, listOfAggregatesOfOper);
            usedOpersList.addSingle(currentOper);
        end;

        /*обнулили агрегирующие данные по оперу*/
        numberOfOperDocuments    = 0;
        summOfOperDocuments      = 0;
        debitEquivalentOperSumm  = 0;
        creditEquivalentOperSumm = 0;
        clearOperAgregates(listOfAggregatesOfOper, currencyList);
    END;

    MACRO performPrintOneCurrencyDocument (parameters1:TReportParameters, recordForPrinting1)
        if (parameters1.m_needNationalCurrencyEquivalent)
        //06.08.2014 I-00506908-2 dpn
           /* if (useProtocol)
                ОШИБКА 3 - В ПРОТОКОЛ (нет проводок покрытия)
                if ((recordForPrinting1.debitCarriesNumber == 0) and
                    (recordForPrinting1.creditCarriesNumber == 0) and
                    (recordForPrinting1.doccode_currency != NATCUR))
                    addRecordToProtocol(recordForPrinting1, 3);
                end;
            end;*/ //dpn

            if ((recordForPrinting1.t_receiverFiId != recordForPrinting1.t_payerFiId) and (recordForPrinting1.t_result_carry != 18) //dpn
                                                                    and (recordForPrinting1.t_result_carry != 82)
                                                                    and (recordForPrinting1.t_result_carry != 83)
                                                                    and (recordForPrinting1.t_result_carry != 84))
                if ((parameters1.m_paymentsData == TRUE) AND (recordForPrinting1.docChapter != 3)) /*данные из платежей*/
                    if (useProtocol)
                        /*ОШИБКА 1 - В ПРОТОКОЛ (нет платежа)*/
                        if (recordForPrinting1.paymentIdNotNull == 0)
                            addRecordToProtocol(recordForPrinting1, 1);
                        /*ОШИБКА 2 - В ПРОТОКОЛ (несколько проводок покрытия)*/
                        elif ((recordForPrinting1.debitCarriesNumber > 2) or
                            (recordForPrinting1.creditCarriesNumber > 2))
                            addRecordToProtocol(recordForPrinting1, 2);
                        end;
                    end;

                    /*если мультивалютная проводка с рублей на ин.валюту*/
                    if (recordForPrinting1.payerFiid == NATCUR)
                        printOneForeignCurrencyDocument(parameters1,
                                                 recordForPrinting1,
                                     recordForPrinting1.payerAmount,
                                     recordForPrinting1.payerAmount);
                    else
                        /*если проводка в валюте дебета*/
                        if (recordForPrinting1.payerFiid == recordForPrinting1.code_currency)
                            printOneForeignCurrencyDocument(parameters1,
                                                     recordForPrinting1,
                                 recordForPrinting1.equivalentDebitSumm,
                                 recordForPrinting1.equivalentCreditSumm);
                        end;
                    end;
                else
                    if     ((recordForPrinting1.equivalentDebitSumm == 0) and
                           (recordForPrinting1.equivalentCreditSumm != 0)) /*проводка по валюте кредита*/
                            printOneForeignCurrencyDocument(parameters1,
                                                     recordForPrinting1,
                                 recordForPrinting1.equivalentCreditSumm,
                                 recordForPrinting1.equivalentCreditSumm);

                    elif   ((recordForPrinting1.equivalentCreditSumm == 0) and
                           (recordForPrinting1.equivalentDebitSumm != 0))  /*проводка по валюте дебета*/
                            printOneForeignCurrencyDocument(parameters1,
                                                     recordForPrinting1,
                                 recordForPrinting1.equivalentDebitSumm,
                                 recordForPrinting1.equivalentDebitSumm);
                    end;
                end;
            else
                if (recordForPrinting1.code_currency == NATCUR)
                    printOneForeignCurrencyDocument(parameters1, recordForPrinting1, recordForPrinting1.payerAmount, 0);
                else
                    printOneForeignCurrencyDocument(parameters1, recordForPrinting1, recordForPrinting1.equivalentDebitSumm, 0);
                end;
            end;
        else
            if ((recordForPrinting1.t_receiverFiId != recordForPrinting1.t_payerFiId) and (recordForPrinting1.t_result_carry != 18) //06.08.2014 I-00506908-2 dpn 
                                                                    and (recordForPrinting1.t_result_carry != 82)
                                                                    and (recordForPrinting1.t_result_carry != 83)
                                                                    and (recordForPrinting1.t_result_carry != 84))
                if ((parameters1.m_paymentsData) AND (recordForPrinting1.docChapter !=3)) /*данные из платежей*/
                    if (useProtocol)
                        /*ОШИБКА 1 - В ПРОТОКОЛ*/
                        if (recordForPrinting1.paymentIdNotNull == 0)
                            addRecordToProtocol(recordForPrinting1, 1);
                        end;
                    end;

                    if ((recordForPrinting1.payerFiid == recordForPrinting1.code_currency) or
                        (recordForPrinting1.payerFiid == NATCUR))
                    /*если проводка в валюте дебета*/
                       printOneForeignCurrencyDocument(parameters1,
                                                recordForPrinting1,
                                                                 0,
                                                                 0);
                    end;
                else /*данные из проводки*/
                    printOneForeignCurrencyDocument(parameters1,
                                             recordForPrinting1,
                                                              0,
                                                              0);
                end;

            else
                printOneForeignCurrencyDocument(parameters1, recordForPrinting1, 0, 0);
            end;
        end;
    END;

    /*Функция печатает фрагмент отчета в ин.валюте только с данными по операм и пачкам*/
    MACRO printForeignCurrencyReportPart1(parameters1:TReportParameters, recordForPrinting1, currencyList:TArray)
         var i = 0;
        if (((recordForPrinting1.docOper == currentOper) AND (not parameters1.m_needGroupSplit)) OR
            ((recordForPrinting1.docOper == currentOper) AND (parameters1.m_needGroupSplit) AND
             (recordForPrinting1.groupid == currentGroup)))

             if (parameters1.m_needPackItog)
                 if (recordForPrinting1.docNumber_Pack == currentPack)
                     /*напечатали документ*/
                     performPrintOneCurrencyDocument (parameters1, recordForPrinting1);
                     /*дополнили агрегирующие данные*/
                     addDataToPackAggregates(recordForPrinting1, listOfAggregatesInPack, currencyList);
                     addDataToOperAggregates(recordForPrinting1, listOfAggregatesOfOper, currencyList);

                     /*запомнили текущие значения*/
                     setCurrentValues(recordForPrinting1);
                 else /*(recordForPrinting1.docNumberPack != currentPack)*/
                     /*Оформили завершение пачки*/
                     performPackResult(parameters1, recordForPrinting1, currencyList);
                     printNewPack(recordForPrinting1.docNumber_pack);

                     printTableHeader(TRUE, parameters1.m_needNationalCurrencyEquivalent, parameters.m_needOperSplit);

                     /*напечатали документ*/
                     performPrintOneCurrencyDocument (parameters1, recordForPrinting1);                     /*дополнили агрегирующие данные*/
                     addDataToPackAggregates(recordForPrinting1, listOfAggregatesInPack, currencyList);
                     addDataToOperAggregates(recordForPrinting1, listOfAggregatesOfOper, currencyList);

                     /*запомнили текущие значения*/
                     setCurrentValues(recordForPrinting1);
                 end;/*(recordForPrinting1.docNumberPack == currentPack)*/
             else/*(parameters1.m_needPackItog == "")*/
                 /*напечатали документ*/
                 performPrintOneCurrencyDocument(parameters1, recordForPrinting1);
                 /*дополнили агрегирующие данные*/
                 addDataToOperAggregates(recordForPrinting1, listOfAggregatesOfOper, currencyList);
             end;/*(parameters1.m_needPackItog)*/
         else  /*(recordForPrinting1.docOper != currentOper)*/
             if (parameters1.m_needPackItog)
                 /*Оформили завершение пачки*/
                 performPackResult(parameters1, recordForPrinting1, currencyList);
             end;/*(parameters1.m_needPackItog)*/

             performOperResult(parameters1, recordForPrinting1, currencyList);

             if ((parameters1.m_needGroupSplit) AND (recordForPrinting1.groupid != currentGroup))
                 if (not parameters1.m_needOperSplit)
                     printOperForeignResultBackLine(true, parameters1.m_needNationalCurrencyEquivalent);   // Закрываем таблицу
                 end;
                 printNewGroup(recordForPrinting1.groupid);
             else
                 if (not parameters1.m_needOperSplit)
                     printOperForeignResultBackLine(false, parameters1.m_needNationalCurrencyEquivalent);   // продолжаем таблицу
                 end;
             end;

             if (parameters1.m_needOperSplit)
                 printNewOper(recordForPrinting1.docOper);
             end;

             if (parameters1.m_needPackItog)
                 printNewPack(recordForPrinting1.docNumber_pack);
             end;

             if (parameters1.m_needOperSplit OR
                 ((parameters1.m_needGroupSplit) AND (reportData.groupid != currentGroup)))
                 printTableHeader(TRUE, parameters1.m_needNationalCurrencyEquivalent, parameters.m_needOperSplit);
             end;

             /*напечатали документ*/
             performPrintOneCurrencyDocument (parameters1, recordForPrinting1);
             /*дополнили агрегирующие данные*/
             if (parameters1.m_needPackItog)
                 addDataToPackAggregates(recordForPrinting1, listOfAggregatesInPack, currencyList);
             end;
             addDataToOperAggregates(recordForPrinting1, listOfAggregatesOfOper, currencyList);

             /*запомнили текущие значения*/
             setCurrentValues(recordForPrinting1);
         end;  /*(recordForPrinting1.docOper == currentOper)*/
    END;

    MACRO performFinalResult(parametersF, recordForPrintingF, currencyList:TArray)
        var i;
        /*напечатали общий итог*/
        if (parametersF.m_needNationalCurrencyEquivalent)
            printFinalResultInForeignReport(finalNumberOfDocuments,
                                          debitEquivalentFinalSumm,
                                         creditEquivalentFinalSumm,
                                                              TRUE,
                                    parametersF.m_needApostrophies,
                                       parametersF.m_needOperSplit);
        else
            printFinalResultInForeignReport(finalNumberOfDocuments,
                                                                 0,
                                                                 0,
                                                             FALSE,
                                    parametersF.m_needApostrophies,
                                       parametersF.m_needOperSplit);
        end;
        /*напечатали общие агрегирующие данные*/
        printAggregatesByCurrencies(listOfFinalAggregates,
             parametersF.m_needNationalCurrencyEquivalent,
                           parametersF.m_needApostrophies,
                              parametersF.m_needOperSplit,
                                                    true);

        /*сложили общие агрегирующие данные в список*/
        if (parametersF.m_needNationalCurrencyEquivalent)
            currentReportAggregates = TReportAggregates(0,
                                                        0,
                                                        0,
                                                        0,
                                                        0,
                                                        0,
                                                        0,
                                                        0,
                                                        0,
                                                        0,
                                                        0,
                                                        0,
                                                        0,
                                                        0,
                                   finalNumberOfDocuments,
                                 debitEquivalentFinalSumm,
                                                        0);
        else
            currentReportAggregates = TReportAggregates(0,
                                                        0,
                                                        0,
                                                        0,
                                                        0,
                                                        0,
                                                        0,
                                                        0,
                                                        0,
                                                        0,
                                                        0,
                                                        0,
                                                        0,
                                                        0,
                                   finalNumberOfDocuments,
                                                        0,
                                                        0);
        end;
        listOfReportAggregates[listOfReportAggregates.size] = currentReportAggregates;

        i = 0;
        while (i < listOfFinalAggregates.size)
            if (parametersF.m_needNationalCurrencyEquivalent)
               if ((listOfFinalAggregates[i].m_debitSumm            != 0) or
                   (listOfFinalAggregates[i].m_debitEquivalentSumm  != 0) or
                   (listOfFinalAggregates[i].m_creditSumm           != 0) or
                   (listOfFinalAggregates[i].m_creditEquivalentSumm != 0)
                  )
                   currentReportAggregates = TReportAggregates(0,
                                                               0,
                         listOfFinalAggregates[i].m_codeCurrency,
                                                               0,
                                                               0,
                                                               0,
                                                               0,
                                                               0,
                                                               0,
                                                               0,
                            listOfFinalAggregates[i].m_debitSumm,
                  listOfFinalAggregates[i].m_debitEquivalentSumm,
                                                               0,
                                                               0,
                                                               0,
                                                               0,
                                                               0);
                   listOfReportAggregates[listOfReportAggregates.size] = currentReportAggregates;
               end;
            else
               if ((listOfFinalAggregates[i].m_debitSumm   != 0) or
                   (listOfFinalAggregates[i].m_creditSumm  != 0)
                  )
                   currentReportAggregates = TReportAggregates(0,
                                                               0,
                         listOfFinalAggregates[i].m_codeCurrency,
                                                               0,
                                                               0,
                                                               0,
                                                               0,
                                                               0,
                                                               0,
                                                               0,
                            listOfFinalAggregates[i].m_debitSumm,
                                                               0,
                                                               0,
                                                               0,
                                                               0,
                                                               0,
                                                               0);
                   listOfReportAggregates[listOfReportAggregates.size] = currentReportAggregates;
               end;
            end;
            i = i + 1;
        end;
        /*обнулили общие агрегирующие данные*/
        finalNumberOfDocuments = 0;
        /*Если есть эквивалент*/
        debitEquivalentFinalSumm = 0;
        creditEquivalentFinalSumm = 0;

        clearAggregates(listOfFinalAggregates, currencyList);
    END;

    MACRO printForeignCurrencyReportPart2(parameters2:TReportParameters, recordForPrinting2, currencyList:TArray)
         var j;

         if (parameters2.m_needPackItog)
             /*напечатали итог по пачке*/
             performPackResult(parameters2, recordForPrinting2, currencyList);
         end;/*(parameters2.m_needPackItog)*/

         performOperResult(parameters2, recordForPrinting2, currencyList);

         if (not parameters2.m_needOperSplit)
             printOperForeignResultBackLine(true, parameters2.m_needNationalCurrencyEquivalent);   // Закрываем таблицу
         end;

         performFinalResult(parameters2, recordForPrinting2, currencyList);

         /*Напечатали табличку с результатами данных*/
         printTableWithForeignResults (parameters2, listOfReportAggregates, currentDate, currentChapter);

         /*очистили список результатов*/
         j = 0;
         while (j < listOfReportAggregates.size)
             listOfReportAggregates[j].m_operCode                         = 0;
             listOfReportAggregates[j].m_packNumber                       = 0;
             listOfReportAggregates[j].m_currencyCode                     = 0;
             listOfReportAggregates[j].m_packNumberOfDocuments            = 0;
             listOfReportAggregates[j].m_packSumm                         = 0;
             listOfReportAggregates[j].m_packCoveringSumm                 = 0;
             listOfReportAggregates[j].m_operNumberOfDocuments            = 0;
             listOfReportAggregates[j].m_operSumm                         = 0;
             listOfReportAggregates[j].m_operCoveringSumm                 = 0;
             listOfReportAggregates[j].m_currencyNumberOfDocuments        = 0;
             listOfReportAggregates[j].m_currencySumm                     = 0;
             listOfReportAggregates[j].m_currencyCoveringSumm             = 0;
             listOfReportAggregates[j].m_documentsNumberInOneCurrency     = 0;
             listOfReportAggregates[j].m_operDocumentsNumberInOneCurrency = 0;
             listOfReportAggregates[j].m_finalNumberOfDocuments           = 0;
             listOfReportAggregates[j].m_finalEquivalentSumm              = 0;
             listOfReportAggregates[j].m_operCoveringSummInOneCurrency    = 0;
             j = j + 1;
         end;

         usedOpersList.clear();

         /*Напечатали подписи*/
         printSignatures();
         printLn();
    END;

    /*Печать отчета в ин.валюте или общего отчета*/
    MACRO printForeignReport(parameters:TReportParameters, dataRecord /*dataForPrint*/, currencyList:TArray)
        var i = 0;
//        var dataRecord;

        useProgress (count);
        /*проинициализировали списки результирующих данных нулевыми значениями*/
        while (i < currencyList.size)
            listOfAggregatesInPack[i] = TOneCurrencyAggregatesInPack(0,0,0,0,0,0);
            listOfAggregatesOfOper[i] = TOneCurrencyAggregatesByOper(0,0,0,0,0,0);
            listOfFinalAggregates[i]  = TFinalOneCurrencyAggregates(0,0,0,0,0);
            i = i + 1;
        end;

        printTableHeader(TRUE, parameters.m_needNationalCurrencyEquivalent, parameters.m_needOperSplit);
        /*напечатали документ*/
        performPrintOneCurrencyDocument(parameters, /*dataForPrint*/dataRecord);

        /*дополнили агрегирующие данные*/
        if (parameters.m_needPackItog)
            addDataToPackAggregates(dataRecord/*dataForPrint*/, listOfAggregatesInPack, currencyList);
        end;
        addDataToOperAggregates(dataRecord/*dataForPrint*/, listOfAggregatesOfOper, currencyList);
        setCurrentValues(dataRecord/*dataForPrint*/);
        /*печатаем остальные записи отчета*/
        while (dataRecord/*dataForPrint*/.next())
//            dataRecord = dataForPrint.GetRecord();
            count = count + 1;
            useProgress (count);
            if (dataRecord.docChapter == currentChapter)
                if (parameters.m_needEveryDayPrinting)
                    if (dataRecord.docDate_carry == currentDate)
                        printForeignCurrencyReportPart1(parameters, dataRecord, currencyList);
                    else  /*(dataRecord.docDate_carry != currentDate)*/
                        printForeignCurrencyReportPart2(parameters, dataRecord, currencyList);

                        printBankHeader(parameters.m_departmentCode, parameters.m_orgStructure, width, shift);

                        printHeader(dataRecord.docChapter,
                         parameters.m_periodBeginningDate,
                            parameters.m_periodEndingDate,
                                 dataRecord.docdate_carry,
                                                    width,
                                                    shift,
                                                    FALSE);
                        if (parameters.m_needGroupSplit)
                            if (not parameters.m_needOperSplit)
                                printOperForeignResultBackLine(true, parameters.m_needNationalCurrencyEquivalent);   // Закрываем таблицу
                            end;
                            printNewGroup(dataRecord.groupid);
                        end;

                        if (parameters.m_needOperSplit)
                            printNewOper(dataRecord.docoper);
                        end;

                        if (parameters.m_needPackItog)
                            printNewPack(dataRecord.docnumber_pack);
                        end;

                        printTableHeader(TRUE, parameters.m_needNationalCurrencyEquivalent, parameters.m_needOperSplit);

                        performPrintOneCurrencyDocument (parameters, dataRecord);

                        /*дополнили агрегирующие данные*/
                        if (parameters.m_needPackItog)
                            addDataToPackAggregates(dataRecord, listOfAggregatesInPack, currencyList);
                        end;
                        addDataToOperAggregates(dataRecord, listOfAggregatesOfOper, currencyList);

                        /*запомнили текущие значения*/
                        setCurrentValues(dataRecord);
                    end;  /*(dataRecord.docDate_carry == currentDate)*/
                else /*(parameters.m_needEveryDayPrinting == "")*/
                    printForeignCurrencyReportPart1(parameters, dataRecord, currencyList);
                end; /*(parameters.m_needEveryDayPrinting)*/
            else /*(dataRecord.docChapter != currentChapter)*/
                if (parameters.m_needEveryDayPrinting)
                    if (dataRecord.docDate_carry == currentDate)
                        printForeignCurrencyReportPart1(parameters, dataRecord, currencyList);
                    else  /*(dataRecord.docDate_carry != currentDate)*/
                        printForeignCurrencyReportPart2(parameters, dataRecord, currencyList);

                        printBankHeader(parameters.m_departmentCode, parameters.m_orgStructure, width, shift);

                        printHeader(dataRecord.docChapter,
                         parameters.m_periodBeginningDate,
                            parameters.m_periodEndingDate,
                                 dataRecord.docdate_carry,
                                                    width,
                                                    shift,
                                                    FALSE);
                        if (parameters.m_needGroupSplit)
                            printNewGroup(dataRecord.groupid);
                        end;

                        if (parameters.m_needOperSplit)
                            printNewOper(dataRecord.docoper);
                        end;

                        if (parameters.m_needPackItog)
                            printNewPack(dataRecord.docnumber_pack);
                        end;

                        printTableHeader(TRUE, parameters.m_needNationalCurrencyEquivalent, parameters.m_needOperSplit);

                        performPrintOneCurrencyDocument (parameters, dataRecord);

                        /*дополнили агрегирующие данные*/
                        if (parameters.m_needPackItog)
                            addDataToPackAggregates(dataRecord, listOfAggregatesInPack, currencyList);
                        end;
                        addDataToOperAggregates(dataRecord, listOfAggregatesOfOper, currencyList);

                        /*запомнили текущие значения*/
                        setCurrentValues(dataRecord);
                    end;  /*(dataRecord.docDate_carry == currentDate)*/
                else /*(parameters.m_needEveryDayPrinting == "")*/
//                    printForeignCurrencyReportPart1(parameters, dataRecord, currencyList);

                    printForeignCurrencyReportPart2(parameters, dataRecord, currencyList);

                    printBankHeader(parameters.m_departmentCode, parameters.m_orgStructure, width, shift);

                    printHeader(dataRecord.docChapter,
                     parameters.m_periodBeginningDate,
                        parameters.m_periodEndingDate,
                             dataRecord.docdate_carry,
                                                width,
                                                shift,
                                                TRUE);
                    if (parameters.m_needGroupSplit)
                        printNewGroup(dataRecord.groupid);
                    end;

                    if (parameters.m_needOperSplit)
                        printNewOper(dataRecord.docoper);
                    end;

                    if (parameters.m_needPackItog)
                        printNewPack(dataRecord.docnumber_pack);
                    end;

                    printTableHeader(TRUE, parameters.m_needNationalCurrencyEquivalent, parameters.m_needOperSplit);

                    performPrintOneCurrencyDocument(parameters, dataRecord);

                    /*дополнили агрегирующие данные*/
                    if (parameters.m_needPackItog)
                        addDataToPackAggregates(dataRecord, listOfAggregatesInPack, currencyList);
                    end;
                    addDataToOperAggregates(dataRecord, listOfAggregatesOfOper, currencyList);

                    /*запомнили текущие значения*/
                    setCurrentValues(dataRecord);
                end; /*(parameters.m_needEveryDayPrinting)*/
            end; /*(dataRecord.docChapter == currentChapter)*/
        end; /*while*/

        printForeignCurrencyReportPart2(parameters, dataRecord, currencyList);
        /*end;*/
    END;

    if (useProtocol)
        SQL_Truncate(tempProtocolTableName);
        tempInserter = TRsbDataSet("SELECT * FROM " + tempProtocolTableName
                          + "\n" + " WHERE 0 = 1",
                                   RSDVAL_CLIENT, RSDVAL_STATIC);
    end;

    begAction(1000, "Получение данных...");

    reportData = TRsbDataSet(resultQuery(parameters));

    reportData.setFieldType("t_date_document", V_DATE);
    reportData.setFieldType("t_code_currency", V_INTEGER);
    reportData.setFieldType("t_receiverAmount", V_MONEY);
    reportData.setFieldType("t_payerAmount", V_MONEY);
    reportData.setFieldType("t_receiverFiId", V_INTEGER);
    reportData.setFieldType("t_payerFiId", V_INTEGER);
    reportData.setFieldType("t_paymentIdNotNull", V_INTEGER);
    reportData.setFieldType("t_docsum", V_MONEY);
    reportData.setFieldType("t_docoper", V_INTEGER);
    reportData.setFieldType("t_docchapter", V_INTEGER);
    reportData.setFieldType("t_docdate_carry", V_DATE);
    reportData.setFieldType("t_docnumber_pack", V_INTEGER);
   // reportData.setFieldType("t_docconnAppKind", V_INTEGER); //06.08.2014 I-00506908-2 dpn

    if (useProtocol)
     //   reportData.setFieldType("t_dociApplicationKind", V_INTEGER);
        reportData.setFieldType("t_doccode_currency", V_INTEGER);
        reportData.setFieldType("t_debitCarriesNumber", V_INTEGER);
        reportData.setFieldType("t_creditCarriesNumber", V_INTEGER);
    end;

    if (parameters.m_needNationalCurrencyEquivalent)
     //   reportData.setFieldType("t_carryIdNotNull", V_INTEGER);  //09.10.2014 R-466898-1 dpn 
        reportData.setFieldType("t_equivalentDebitSumm", V_MONEY);
        reportData.setFieldType("t_equivalentCreditSumm", V_MONEY);
    end;

    if (parameters.m_needGroupSplit)
        reportData.setFieldType("t_groupId", V_INTEGER);
        reportData.setFieldType("t_groupIdNull", V_INTEGER);
    end;

    endAction();

    isDataRecords = reportData.next();

    initProgress(-1, "", "Печать отчета");

    count = count + 1;

    if (isDataRecords == TRUE)

        if (parameters.m_currencyCode == NATCUR)
            width = 104;      //104
            shift = 0;
        else
            width = 146;      //198
            shift = 0;
        end;

        if (parameters.m_needNationalCurrencyEquivalent)
            width = width + 52;
        end;

        if (not parameters.m_needOperSplit)
            width = width + 9;
        end;

        printBankHeader(parameters.m_departmentCode, parameters.m_orgStructure, width, shift);

        if (parameters.m_needEveryDayPrinting)
            printHeader(reportData.docChapter,
             parameters.m_periodBeginningDate,
                parameters.m_periodEndingDate,
                      reportData.docdate_carry,
                                        width,
                                        shift,
                                        FALSE);
        else
            printHeader(reportData.docChapter,
             parameters.m_periodBeginningDate,
                parameters.m_periodEndingDate,
                parameters.m_periodEndingDate,
                                        width,
                                        shift,
                                        TRUE);
        end;

        if (parameters.m_needGroupSplit)
            printNewGroup(reportData.groupid);
        end;

        if (parameters.m_needOperSplit)
            printNewOper(reportData.docoper);
        end;

        if (parameters.m_needPackItog)
            printNewPack(reportData.docnumber_pack);
        end;

        if (parameters.m_currencyCode == NATCUR)
            printNationalReport(parameters, reportData);
        else
            /*Заполняем список валют*/
            currencyList = TArray;
            currencyList = getCurrencyList(currencyList);

            printForeignReport(parameters, reportData, currencyList);
        end;

    else
    /*Пустой отчет*/
        PrintBankHeader(parameters.m_departmentCode, parameters.m_orgStructure, width, shift);

        printHeader(parameters.m_chapterNumber,
              parameters.m_periodBeginningDate,
                 parameters.m_periodEndingDate,
                 parameters.m_periodEndingDate, /*можно передать любое значение, т.к. все равно печататем за период*/
                                         width,
                                         shift,
                                         TRUE);

        if (parameters.m_operNumber != 0)
            printNewOper(parameters.m_operNumber);
        end;

        if (parameters.m_packNumber != 0)
            printNewPack(parameters.m_packNumber);
        end;

        printLn();
        println(mkStr(" ", shift) + StrAlign("Нет данных для отчета", width, STR_ALIGN_CENTER));
        printSignatures();
    end;

    remProgress();
END;

MACRO printHeaderOfProtocol(dateForPrint)
     var dateOfReport;
     var timeOfReport;

     dtTmSplit (dateForPrint, dateOfReport, timeOfReport);

     printLn();
     printLn("Справка о проведенных документах за дату ", string(dateOfReport:f));
     printLn();
END;

MACRO printErrorTitle(errorCode)
     printLn(string("по Ошибке", errorCode));
     printLn();
END;

MACRO printOneRecordFromProtocol(dataRecord)
    var currencyCode;

    getCurrencyNumber(dataRecord.t_currency_code, currencyCode);

    if   (dataRecord.t_error_code == 1)
        printLn("№ док. - ", dataRecord.t_document_number, "; код валюты - ", currencyCode, "; счет дебета ", dataRecord.t_payer_account, ";");
        printLn("счет кредита ", dataRecord.t_receiver_account, "; сумма ", dataRecord.t_document_summ);
        printLn("Проводка не привязана к платежу");
    elif (dataRecord.t_error_code == 2)
        printLn("№ сделки - ", dataRecord.t_payment_id, ";");
        printLn("№ док. - ", dataRecord.t_document_number, "; код валюты - ", currencyCode, "; счет дебета ", dataRecord.t_payer_account, ";");
        printLn("счет кредита ", dataRecord.t_receiver_account, "; сумма ", dataRecord.t_document_summ);
        printLn("Найдено более одного счета, корреспондирующего с исходным в данном платеже, БС");
        printLn("которого не входит в массив исключений");
    elif (dataRecord.t_error_code == 3)
        printLn("№ док. - ", dataRecord.t_document_number, "; код валюты - ", currencyCode, "; счет дебета ", dataRecord.t_payer_account, ";");
        printLn("счет кредита ", dataRecord.t_receiver_account, "; сумма ", dataRecord.t_document_summ);
        printLn("Невозможно определить проводку рублевого покрытия");
    end;
    printLn();
END;

MACRO printProtocol()
   var protocolData;
   var queryText        = "";
   var messageString    = ""; /*строка сообщения на экран, если есть протокол*/
   var completeFileName = ""; /*полное имя файла протокола*/

   var currentDate;
   var currentErrorCode;

   var count = 0;
   queryText =          "SELECT *"
               + "\n" + "  FROM " + tempProtocolTableName
               + "\n" + " ORDER BY " + tempProtocolTableName +".t_date_carry,"
               + "\n" + "          " + tempProtocolTableName +".t_error_code";

   protocolData = TRsbDataSet(queryText);

   if (protocolData.Next() == TRUE)
       completeFileName = GetTxtFileName("OutDocsError");
       messageString = messageString + string("Были обнаружены ошибки. Подробнее см. файл - ", completeFileName);
       msgbox(messageString);

       initProgress (-1, "", "Печать данных в файл протокола");
       count = count + 1;
       useProgress (count);

       printHeaderOfProtocol(protocolData.t_date_carry);
       printErrorTitle(protocolData.t_error_code);
       printOneRecordFromProtocol(protocolData);
       currentDate = protocolData.t_date_carry;
       currentErrorCode = protocolData.t_error_code;
   end;

   while (protocolData.Next() == TRUE)
       count = count + 1;
       useProgress (count);
       if (protocolData.t_date_carry == currentDate)
           if (protocolData.t_error_code == currentErrorCode)
               printOneRecordFromProtocol(protocolData);
               currentDate = protocolData.t_date_carry;
               currentErrorCode = protocolData.t_error_code;
           else
               printErrorTitle(protocolData.t_error_code);
               printOneRecordFromProtocol(protocolData);
               currentDate = protocolData.t_date_carry;
               currentErrorCode = protocolData.t_error_code;
           end;
       else
           printHeaderOfProtocol(protocolData.t_date_carry);
           printErrorTitle(protocolData.t_error_code);
           printOneRecordFromProtocol(protocolData);
           currentDate = protocolData.t_date_carry;
           currentErrorCode = protocolData.t_error_code;
       end;
   end;

   remProgress();
END;

MACRO printReport_Pack(parameters: TReportParameters)
debugbreak;
var Glava_ = "";
var natcur = 0;
debugbreak;
if (parameters.M_chapternumber == 1)
	Glava_ = "А. Балансовые Счета";
elif (parameters.M_chapternumber == 2)	
	Glava_ = "Счета доверит. управления";
elif (parameters.M_chapternumber == 3)
	Glava_ = "В. Внебалансовые Счета";
elif (parameters.M_chapternumber == 4)
	Glava_ = "Срочные сделки";
elif (parameters.M_chapternumber == 5)
	Glava_ = "Счета депо";
elif (parameters.M_chapternumber == 6)
	Glava_ = "Счета налогового учета";	
end;

[
                                            ОАО КБ "ПОЙДЁМ!"                                            

                                    СПРАВКА О ПРОВЕДЕННЫХ ДОКУМЕНТАХ                                    
                                      по главе ###########################################
                                             за ####################################                                              
](Glava_, parameters.m_periodBeginningDate+" - "+parameters.m_periodEndingDate);

	var reportData_ = TRsbDataSet(resultQuery(parameters));
	var last_pack = "";
	var i = 0;
	var doc_count:integer = 0;
	var total_summ:money = 0;
	var itogpack = TArray;
	var itogcount = TArray;
	var itogsumm = TArray;
   var summ = 0;
	while (reportData_.MoveNext())
		if (last_pack != reportData_.t_docnumber_pack)
		       if (last_pack != "")
			 //09.10.2014 R-466898-1 dpn 	
				[├──────────┴──────────┴──┴─────────┴─────────────────────┴─────────┴─────────────────────┴────────────────────┤
				 │          Документов в пачке:    ########            На сумму(в рублёвом эквиваленте):    ###################│
				 └─────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
				](doc_count, total_summ);
			end;
			
			[
                                #######################################################################################################
			] ("Пачка № " + reportData_.t_docnumber_pack);
			
			[
			┌──────────┬──────────┬──┬───────────────────────────────┬───────────────────────────────┬────────────────────┐
			│   Номер  │   Дата   │  │             Дебет             │              Кредит           │       Сумма        │
			│ документа│ документа│ВО├─────────┬─────────────────────┼─────────┬─────────────────────┤                    │
			│          │          │  │   БИК   │         Счет        │   БИК   │        Счет         │                    │
			├──────────┼──────────┼──┼─────────┼─────────────────────┼─────────┼─────────────────────┼────────────────────┤
			];
				itogpack(i) = last_pack;
				itogcount(i) = doc_count;
				itogsumm(i) = total_summ; 
				last_pack = reportData_.t_docnumber_pack;
				doc_count = 0;
				total_summ = 0;
			i = i + 1;
		end;
		doc_count = doc_count + 1;
		//total_summ = total_summ + reportData_.t_docsum;
      total_summ = total_summ + reportData_.natcur; //09.10.2014 R-466898-1 dpn
      //17.11.2014 R-493934-2 DPN 
      if(parameters.m_needNationalCurrencyEquivalent)
          summ = money(reportData_.NATCUR,2);
      else 
          summ = money(reportData_.t_docsum,2);
      end;                  
		[│##########│##########│##│#########│#####################│#########│#####################│####################│
		](	reportData_.t_numb_document, 
			date(reportData_.t_date_document), 
			reportData_.t_shifr_oper,
			reportData_.t_payerBankCodeNotNull,
			reportData_.t_payerAccount,
			reportData_.t_receiverBankCodeNotNull,
			reportData_.t_receiverAccount,
         summ);
			  //13.10.2014 R-469914-2 dpn 

	end;
     //09.10.2014 R-466898-1 dpn 
   [├──────────┴──────────┴──┴─────────┴─────────────────────┴─────────┴─────────────────────┴────────────────────┤
    │          Документов в пачке:    ########            На сумму(в рублёвом эквиваленте):    ###################│ 
    └─────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
	](doc_count, total_summ);
	
	//debugbreak;
	itogpack(i) = last_pack;
	itogcount(i) = doc_count;
	itogsumm(i) = total_summ;
	
	if (parameters.M_chapternumber == 1)
		Glava_ = "А. Балансовые Счета";
	elif (parameters.M_chapternumber == 2)	
		Glava_ = "Счета доверит. управления";
	elif (parameters.M_chapternumber == 3)
		Glava_ = "В. Внебалансовые Счета";
	elif (parameters.M_chapternumber == 4)
		Glava_ = "Срочные сделки";
	elif (parameters.M_chapternumber == 5)
		Glava_ = "Счета депо";
	elif (parameters.M_chapternumber == 6)
		Glava_ = "Счета налогового учета";	
	end;
	

[
                                            ОАО КБ "ПОЙДЁМ!"                                            

                                    СПРАВКА О ПРОВЕДЕННЫХ ДОКУМЕНТАХ                                    
                                      по главе ######################################
                                             за ####################################                                              
┌─────────────────────┬────────────────────┬────────────┐
│                     │                    │ Количество │
│        Пачка        │      Сумма         │ документов │
│                     │                    │            │
](Glava_, parameters.m_periodBeginningDate+" - "+parameters.m_periodEndingDate);

var k = 1;
total_summ = 0;

while(k<=i)
	[├─────────────────────┼────────────────────┼────────────┤
	 │ ################### │ ################## │ ########## │
	](itogpack(k), itogsumm(k), itogcount(k));
	total_summ = total_summ + itogsumm(k);
	k = k + 1;
end;
[└─────────────────────┴────────────────────┴────────────┘
     Итого по всем пачкам: ##############################     


Исполнитель ##########################################################  
Контролер _____________________ 

] (total_summ, opername({oper}));



end;

/*ТОЧКА ВХОДА В ПРОГРАММУ!*/
MACRO makeReport(departmentCode,
                   orgStructure,
                      issueMode,
                  chapterNumber,
                           plan,
                   currencyCode,
            periodBeginningDate,
               periodEndingDate,
                 needGroupSplit,
                     operNumber,
                     packNumber,
                    sortingKind,
                   needPackItog,
                  needOperSplit,
 needNationalCurrencyEquivalent,
           needEveryDayPrinting,
                   paymentsData,
               needApostrophies,
           needExchangeRateDiff
)

 if (fgBank.is_EXV)
   /* ПОЛЬЗОВАТЕЛЬСКИЕ ДОРАБОТКИ - НАЧАЛО */
    /*   Зубко С. 25.04.2011  Сделал доработки по I-00035903 Тема: Перенсти отчет в РС V6 
                            то есть выгрузку в текстовый файл с разделителем Tab 
    */
    /* ВЫБОР ТИПА ОТЧЕТА */
    choise_type =  menu(LstType_Name, "~Enter~ - выбор ~ESC~ - выход", "  ТИП ОТЧЕТА  ");
    /*Если выводим в файл, то еще обнулим файл, если в него выпускали раньше */
    if(choise_type == 1 )
       SetOutPut(outfileName, false);
       SetOutput(null, true);
    end;
    /* ПОЛЬЗОВАТЕЛЬСКИЕ ДОРАБОТКИ - КОНЕЦ */
 end; 
    var parameters = TReportParameters(departmentCode,
                                        orgStructure,
                                           issueMode,
                                       chapterNumber,
                                                plan,
                                        currencyCode,
                                  periodBeginningDate,
                                    periodEndingDate,
                                      needGroupSplit,
                                          operNumber,
                                          packNumber,
                                         sortingKind,
                                        needPackItog,
                                       needOperSplit,
                      needNationalCurrencyEquivalent,
                                needEveryDayPrinting,
                                        paymentsData,
                                    needApostrophies,
                                needExchangeRateDiff);

    var i = 0;
    var dataString;
    var reportOutPut;
    var protocolFileName;
    /* Контроль открытых опердней */
    if (RepOperdaysOpened(parameters.m_departmentList, parameters.m_periodBeginningDate, parameters.m_periodEndingDate).ShouldContinue == false)
        exit(1);
    end;

        /*печатаем отчет*/
	if (fgBank.is_GO)
	     var seltype_:String="";
	     if(MsgBoxEx("Выпустить отчёт в разрезе пачек? ",MB_YES+MB_NO, IND_YES, "Тип отчёта") == IND_YES)
		onlypack = 1;
	       printReport_Pack(parameters);
	     else 
	     	printReport(parameters);
	     end;
	end; 


    if (useProtocol)
        protocolFileName = GetTxtFileName("OutDocsError");
        reportOutPut     = setOutPut(protocolFileName,false);
        printProtocol();
        setOutPut(reportOutPut, true);
    end;

 if (fgBank.is_EXV)
    /* ПОЛЬЗОВАТЕЛЬСКИЕ ДОРАБОТКИ - НАЧАЛО */
    /*   Зубко С. 25.04.2011  Сделал доработки по I-00035903 Тема: Перенсти отчет в РС V6 
                            то есть выгрузку в текстовый файл с разделителем Tab 
    */
    /*Если выводили в файл, то откроем файл для просмотра.*/
    if (choise_type == 1)
       if(open(outfile, outfileName))
         ViewFile(outfile);
         close(outfile);
       end;
    end;
    /* ПОЛЬЗОВАТЕЛЬСКИЕ ДОРАБОТКИ - КОНЕЦ */
 end;

END;
